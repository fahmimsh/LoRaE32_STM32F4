
LoRaE32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ccb8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000017c4  0800ce48  0800ce48  0001ce48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e60c  0800e60c  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800e60c  0800e60c  0001e60c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e614  0800e614  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e614  0800e614  0001e614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e618  0800e618  0001e618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800e61c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003534  200001e8  0800e804  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000371c  0800e804  0002371c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001609a  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ce6  00000000  00000000  000362b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001068  00000000  00000000  00038f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f60  00000000  00000000  0003a000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023b57  00000000  00000000  0003af60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014fb4  00000000  00000000  0005eab7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d0910  00000000  00000000  00073a6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014437b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005aac  00000000  00000000  001443d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000003c  00000000  00000000  00149e7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000076  00000000  00000000  00149eb8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ce30 	.word	0x0800ce30

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800ce30 	.word	0x0800ce30

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <ILI9341_DrawChar>:

	ILI9341_DrawRectangle(X0True, Y0True, xLen, yLen, color);
}

void ILI9341_DrawChar(char ch, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 8000fec:	b590      	push	{r4, r7, lr}
 8000fee:	b08d      	sub	sp, #52	; 0x34
 8000ff0:	af02      	add	r7, sp, #8
 8000ff2:	60b9      	str	r1, [r7, #8]
 8000ff4:	4611      	mov	r1, r2
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	73fb      	strb	r3, [r7, #15]
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	81bb      	strh	r3, [r7, #12]
 8001000:	4613      	mov	r3, r2
 8001002:	80fb      	strh	r3, [r7, #6]
	if ((ch < 31) || (ch > 127)) return;
 8001004:	7bfb      	ldrb	r3, [r7, #15]
 8001006:	2b1e      	cmp	r3, #30
 8001008:	d961      	bls.n	80010ce <ILI9341_DrawChar+0xe2>
 800100a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800100e:	2b00      	cmp	r3, #0
 8001010:	db5d      	blt.n	80010ce <ILI9341_DrawChar+0xe2>

	uint8_t fOffset, fWidth, fHeight, fBPL;
	uint8_t *tempChar;

	fOffset = font[0];
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	77fb      	strb	r3, [r7, #31]
	fWidth = font[1];
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	785b      	ldrb	r3, [r3, #1]
 800101c:	77bb      	strb	r3, [r7, #30]
	fHeight = font[2];
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	789b      	ldrb	r3, [r3, #2]
 8001022:	777b      	strb	r3, [r7, #29]
	fBPL = font[3];
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	78db      	ldrb	r3, [r3, #3]
 8001028:	773b      	strb	r3, [r7, #28]

	tempChar = (uint8_t*)&font[((ch - 0x20) * fOffset) + 4]; /* Current Character = Meta + (Character Index * Offset) */
 800102a:	7bfb      	ldrb	r3, [r7, #15]
 800102c:	3b20      	subs	r3, #32
 800102e:	7ffa      	ldrb	r2, [r7, #31]
 8001030:	fb02 f303 	mul.w	r3, r2, r3
 8001034:	3304      	adds	r3, #4
 8001036:	68ba      	ldr	r2, [r7, #8]
 8001038:	4413      	add	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]

	/* Clear background first */
	ILI9341_DrawRectangle(X, Y, fWidth, fHeight, bgcolor);
 800103c:	7fbb      	ldrb	r3, [r7, #30]
 800103e:	b29a      	uxth	r2, r3
 8001040:	7f7b      	ldrb	r3, [r7, #29]
 8001042:	b29c      	uxth	r4, r3
 8001044:	88f9      	ldrh	r1, [r7, #6]
 8001046:	89b8      	ldrh	r0, [r7, #12]
 8001048:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800104a:	9300      	str	r3, [sp, #0]
 800104c:	4623      	mov	r3, r4
 800104e:	f000 fc1d 	bl	800188c <ILI9341_DrawRectangle>

	for (int j=0; j < fHeight; j++)
 8001052:	2300      	movs	r3, #0
 8001054:	627b      	str	r3, [r7, #36]	; 0x24
 8001056:	e035      	b.n	80010c4 <ILI9341_DrawChar+0xd8>
	{
		for (int i=0; i < fWidth; i++)
 8001058:	2300      	movs	r3, #0
 800105a:	623b      	str	r3, [r7, #32]
 800105c:	e02b      	b.n	80010b6 <ILI9341_DrawChar+0xca>
		{
			uint8_t z =  tempChar[fBPL * i + ((j & 0xF8) >> 3) + 1]; /* (j & 0xF8) >> 3, increase one by 8-bits */
 800105e:	7f3b      	ldrb	r3, [r7, #28]
 8001060:	6a3a      	ldr	r2, [r7, #32]
 8001062:	fb02 f203 	mul.w	r2, r2, r3
 8001066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001068:	10db      	asrs	r3, r3, #3
 800106a:	f003 031f 	and.w	r3, r3, #31
 800106e:	4413      	add	r3, r2
 8001070:	3301      	adds	r3, #1
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	4413      	add	r3, r2
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	75fb      	strb	r3, [r7, #23]
			uint8_t b = 1 << (j & 0x07);
 800107a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800107c:	f003 0307 	and.w	r3, r3, #7
 8001080:	2201      	movs	r2, #1
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	75bb      	strb	r3, [r7, #22]
			if (( z & b ) != 0x00)
 8001088:	7dfa      	ldrb	r2, [r7, #23]
 800108a:	7dbb      	ldrb	r3, [r7, #22]
 800108c:	4013      	ands	r3, r2
 800108e:	b2db      	uxtb	r3, r3
 8001090:	2b00      	cmp	r3, #0
 8001092:	d00d      	beq.n	80010b0 <ILI9341_DrawChar+0xc4>
			{
				ILI9341_DrawPixel(X+i, Y+j, color);
 8001094:	6a3b      	ldr	r3, [r7, #32]
 8001096:	b29a      	uxth	r2, r3
 8001098:	89bb      	ldrh	r3, [r7, #12]
 800109a:	4413      	add	r3, r2
 800109c:	b298      	uxth	r0, r3
 800109e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a0:	b29a      	uxth	r2, r3
 80010a2:	88fb      	ldrh	r3, [r7, #6]
 80010a4:	4413      	add	r3, r2
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80010aa:	4619      	mov	r1, r3
 80010ac:	f000 fb88 	bl	80017c0 <ILI9341_DrawPixel>
		for (int i=0; i < fWidth; i++)
 80010b0:	6a3b      	ldr	r3, [r7, #32]
 80010b2:	3301      	adds	r3, #1
 80010b4:	623b      	str	r3, [r7, #32]
 80010b6:	7fbb      	ldrb	r3, [r7, #30]
 80010b8:	6a3a      	ldr	r2, [r7, #32]
 80010ba:	429a      	cmp	r2, r3
 80010bc:	dbcf      	blt.n	800105e <ILI9341_DrawChar+0x72>
	for (int j=0; j < fHeight; j++)
 80010be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c0:	3301      	adds	r3, #1
 80010c2:	627b      	str	r3, [r7, #36]	; 0x24
 80010c4:	7f7b      	ldrb	r3, [r7, #29]
 80010c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010c8:	429a      	cmp	r2, r3
 80010ca:	dbc5      	blt.n	8001058 <ILI9341_DrawChar+0x6c>
 80010cc:	e000      	b.n	80010d0 <ILI9341_DrawChar+0xe4>
	if ((ch < 31) || (ch > 127)) return;
 80010ce:	bf00      	nop
			}
		}
	}
}
 80010d0:	372c      	adds	r7, #44	; 0x2c
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd90      	pop	{r4, r7, pc}

080010d6 <ILI9341_DrawText>:

void ILI9341_DrawText(const char* str, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b08a      	sub	sp, #40	; 0x28
 80010da:	af02      	add	r7, sp, #8
 80010dc:	60f8      	str	r0, [r7, #12]
 80010de:	60b9      	str	r1, [r7, #8]
 80010e0:	4611      	mov	r1, r2
 80010e2:	461a      	mov	r2, r3
 80010e4:	460b      	mov	r3, r1
 80010e6:	80fb      	strh	r3, [r7, #6]
 80010e8:	4613      	mov	r3, r2
 80010ea:	80bb      	strh	r3, [r7, #4]
	uint8_t charWidth;			/* Width of character */
	uint8_t fOffset = font[0];	/* Offset of character */
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	77fb      	strb	r3, [r7, #31]
	uint8_t fWidth = font[1];	/* Width of font */
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	785b      	ldrb	r3, [r3, #1]
 80010f6:	77bb      	strb	r3, [r7, #30]

	while (*str)
 80010f8:	e02d      	b.n	8001156 <ILI9341_DrawText+0x80>
	{
		ILI9341_DrawChar(*str, font, X, Y, color, bgcolor);
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	7818      	ldrb	r0, [r3, #0]
 80010fe:	88b9      	ldrh	r1, [r7, #4]
 8001100:	88fa      	ldrh	r2, [r7, #6]
 8001102:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001104:	9301      	str	r3, [sp, #4]
 8001106:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001108:	9300      	str	r3, [sp, #0]
 800110a:	460b      	mov	r3, r1
 800110c:	68b9      	ldr	r1, [r7, #8]
 800110e:	f7ff ff6d 	bl	8000fec <ILI9341_DrawChar>

		/* Check character width and calculate proper position */
		uint8_t *tempChar = (uint8_t*)&font[((*str - 0x20) * fOffset) + 4];
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	3b20      	subs	r3, #32
 8001118:	7ffa      	ldrb	r2, [r7, #31]
 800111a:	fb02 f303 	mul.w	r3, r2, r3
 800111e:	3304      	adds	r3, #4
 8001120:	68ba      	ldr	r2, [r7, #8]
 8001122:	4413      	add	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
		charWidth = tempChar[0];
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	75fb      	strb	r3, [r7, #23]

		if(charWidth + 2 < fWidth)
 800112c:	7dfb      	ldrb	r3, [r7, #23]
 800112e:	1c9a      	adds	r2, r3, #2
 8001130:	7fbb      	ldrb	r3, [r7, #30]
 8001132:	429a      	cmp	r2, r3
 8001134:	da07      	bge.n	8001146 <ILI9341_DrawText+0x70>
		{
			/* If character width is smaller than font width */
			X += (charWidth + 2);
 8001136:	7dfb      	ldrb	r3, [r7, #23]
 8001138:	b29a      	uxth	r2, r3
 800113a:	88fb      	ldrh	r3, [r7, #6]
 800113c:	4413      	add	r3, r2
 800113e:	b29b      	uxth	r3, r3
 8001140:	3302      	adds	r3, #2
 8001142:	80fb      	strh	r3, [r7, #6]
 8001144:	e004      	b.n	8001150 <ILI9341_DrawText+0x7a>
		}
		else
		{
			X += fWidth;
 8001146:	7fbb      	ldrb	r3, [r7, #30]
 8001148:	b29a      	uxth	r2, r3
 800114a:	88fb      	ldrh	r3, [r7, #6]
 800114c:	4413      	add	r3, r2
 800114e:	80fb      	strh	r3, [r7, #6]
		}

		str++;
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	3301      	adds	r3, #1
 8001154:	60fb      	str	r3, [r7, #12]
	while (*str)
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d1cd      	bne.n	80010fa <ILI9341_DrawText+0x24>
	}
}
 800115e:	bf00      	nop
 8001160:	bf00      	nop
 8001162:	3720      	adds	r7, #32
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}

08001168 <HAL_SPI_TxCpltCallback>:

volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  /* Deselect when Tx Complete */
  if(hspi == HSPI_INSTANCE)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	4a06      	ldr	r2, [pc, #24]	; (800118c <HAL_SPI_TxCpltCallback+0x24>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d104      	bne.n	8001182 <HAL_SPI_TxCpltCallback+0x1a>
  {
	  HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001178:	2201      	movs	r2, #1
 800117a:	2101      	movs	r1, #1
 800117c:	4804      	ldr	r0, [pc, #16]	; (8001190 <HAL_SPI_TxCpltCallback+0x28>)
 800117e:	f003 fb0f 	bl	80047a0 <HAL_GPIO_WritePin>
  }
}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	200035b0 	.word	0x200035b0
 8001190:	40020800 	.word	0x40020800

08001194 <ILI9341_SPI_Tx>:

static void ILI9341_SPI_Tx(uint8_t data)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 800119e:	bf00      	nop
 80011a0:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <ILI9341_SPI_Tx+0x30>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	2b02      	cmp	r3, #2
 80011ac:	d1f8      	bne.n	80011a0 <ILI9341_SPI_Tx+0xc>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, &data, 1);
 80011ae:	1dfb      	adds	r3, r7, #7
 80011b0:	2201      	movs	r2, #1
 80011b2:	4619      	mov	r1, r3
 80011b4:	4803      	ldr	r0, [pc, #12]	; (80011c4 <ILI9341_SPI_Tx+0x30>)
 80011b6:	f005 fc99 	bl	8006aec <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
}
 80011ba:	bf00      	nop
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	200035b0 	.word	0x200035b0

080011c8 <ILI9341_SPI_TxBuffer>:

static void ILI9341_SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	460b      	mov	r3, r1
 80011d2:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 80011d4:	bf00      	nop
 80011d6:	4b08      	ldr	r3, [pc, #32]	; (80011f8 <ILI9341_SPI_TxBuffer+0x30>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	f003 0302 	and.w	r3, r3, #2
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	d1f8      	bne.n	80011d6 <ILI9341_SPI_TxBuffer+0xe>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, buffer, len);
 80011e4:	887b      	ldrh	r3, [r7, #2]
 80011e6:	461a      	mov	r2, r3
 80011e8:	6879      	ldr	r1, [r7, #4]
 80011ea:	4803      	ldr	r0, [pc, #12]	; (80011f8 <ILI9341_SPI_TxBuffer+0x30>)
 80011ec:	f005 fc7e 	bl	8006aec <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, buffer, len, 10);
}
 80011f0:	bf00      	nop
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	200035b0 	.word	0x200035b0

080011fc <ILI9341_WriteCommand>:

void ILI9341_WriteCommand(uint8_t cmd)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	//command
 8001206:	2200      	movs	r2, #0
 8001208:	2101      	movs	r1, #1
 800120a:	4808      	ldr	r0, [pc, #32]	; (800122c <ILI9341_WriteCommand+0x30>)
 800120c:	f003 fac8 	bl	80047a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8001210:	2200      	movs	r2, #0
 8001212:	2101      	movs	r1, #1
 8001214:	4806      	ldr	r0, [pc, #24]	; (8001230 <ILI9341_WriteCommand+0x34>)
 8001216:	f003 fac3 	bl	80047a0 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(cmd);
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff ffb9 	bl	8001194 <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	40020000 	.word	0x40020000
 8001230:	40020800 	.word	0x40020800

08001234 <ILI9341_WriteData>:

void ILI9341_WriteData(uint8_t data)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 800123e:	2201      	movs	r2, #1
 8001240:	2101      	movs	r1, #1
 8001242:	4808      	ldr	r0, [pc, #32]	; (8001264 <ILI9341_WriteData+0x30>)
 8001244:	f003 faac 	bl	80047a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8001248:	2200      	movs	r2, #0
 800124a:	2101      	movs	r1, #1
 800124c:	4806      	ldr	r0, [pc, #24]	; (8001268 <ILI9341_WriteData+0x34>)
 800124e:	f003 faa7 	bl	80047a0 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(data);
 8001252:	79fb      	ldrb	r3, [r7, #7]
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff ff9d 	bl	8001194 <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 800125a:	bf00      	nop
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40020000 	.word	0x40020000
 8001268:	40020800 	.word	0x40020800

0800126c <ILI9341_WriteBuffer>:

void ILI9341_WriteBuffer(uint8_t *buffer, uint16_t len)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	460b      	mov	r3, r1
 8001276:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 8001278:	2201      	movs	r2, #1
 800127a:	2101      	movs	r1, #1
 800127c:	4808      	ldr	r0, [pc, #32]	; (80012a0 <ILI9341_WriteBuffer+0x34>)
 800127e:	f003 fa8f 	bl	80047a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8001282:	2200      	movs	r2, #0
 8001284:	2101      	movs	r1, #1
 8001286:	4807      	ldr	r0, [pc, #28]	; (80012a4 <ILI9341_WriteBuffer+0x38>)
 8001288:	f003 fa8a 	bl	80047a0 <HAL_GPIO_WritePin>
	ILI9341_SPI_TxBuffer(buffer, len);
 800128c:	887b      	ldrh	r3, [r7, #2]
 800128e:	4619      	mov	r1, r3
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f7ff ff99 	bl	80011c8 <ILI9341_SPI_TxBuffer>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8001296:	bf00      	nop
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40020000 	.word	0x40020000
 80012a4:	40020800 	.word	0x40020800

080012a8 <ILI9341_SetAddress>:

void ILI9341_SetAddress(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 80012a8:	b590      	push	{r4, r7, lr}
 80012aa:	b085      	sub	sp, #20
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4604      	mov	r4, r0
 80012b0:	4608      	mov	r0, r1
 80012b2:	4611      	mov	r1, r2
 80012b4:	461a      	mov	r2, r3
 80012b6:	4623      	mov	r3, r4
 80012b8:	80fb      	strh	r3, [r7, #6]
 80012ba:	4603      	mov	r3, r0
 80012bc:	80bb      	strh	r3, [r7, #4]
 80012be:	460b      	mov	r3, r1
 80012c0:	807b      	strh	r3, [r7, #2]
 80012c2:	4613      	mov	r3, r2
 80012c4:	803b      	strh	r3, [r7, #0]
	uint8_t buffer[4];
	buffer[0] = x1 >> 8;
 80012c6:	88fb      	ldrh	r3, [r7, #6]
 80012c8:	0a1b      	lsrs	r3, r3, #8
 80012ca:	b29b      	uxth	r3, r3
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	733b      	strb	r3, [r7, #12]
	buffer[1] = x1;
 80012d0:	88fb      	ldrh	r3, [r7, #6]
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	737b      	strb	r3, [r7, #13]
	buffer[2] = x2 >> 8;
 80012d6:	887b      	ldrh	r3, [r7, #2]
 80012d8:	0a1b      	lsrs	r3, r3, #8
 80012da:	b29b      	uxth	r3, r3
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	73bb      	strb	r3, [r7, #14]
	buffer[3] = x2;
 80012e0:	887b      	ldrh	r3, [r7, #2]
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2A);
 80012e6:	202a      	movs	r0, #42	; 0x2a
 80012e8:	f7ff ff88 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 80012ec:	f107 030c 	add.w	r3, r7, #12
 80012f0:	2104      	movs	r1, #4
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff ffba 	bl	800126c <ILI9341_WriteBuffer>

	buffer[0] = y1 >> 8;
 80012f8:	88bb      	ldrh	r3, [r7, #4]
 80012fa:	0a1b      	lsrs	r3, r3, #8
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	733b      	strb	r3, [r7, #12]
	buffer[1] = y1;
 8001302:	88bb      	ldrh	r3, [r7, #4]
 8001304:	b2db      	uxtb	r3, r3
 8001306:	737b      	strb	r3, [r7, #13]
	buffer[2] = y2 >> 8;
 8001308:	883b      	ldrh	r3, [r7, #0]
 800130a:	0a1b      	lsrs	r3, r3, #8
 800130c:	b29b      	uxth	r3, r3
 800130e:	b2db      	uxtb	r3, r3
 8001310:	73bb      	strb	r3, [r7, #14]
	buffer[3] = y2;
 8001312:	883b      	ldrh	r3, [r7, #0]
 8001314:	b2db      	uxtb	r3, r3
 8001316:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2B);
 8001318:	202b      	movs	r0, #43	; 0x2b
 800131a:	f7ff ff6f 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 800131e:	f107 030c 	add.w	r3, r7, #12
 8001322:	2104      	movs	r1, #4
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff ffa1 	bl	800126c <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);
 800132a:	202c      	movs	r0, #44	; 0x2c
 800132c:	f7ff ff66 	bl	80011fc <ILI9341_WriteCommand>
}
 8001330:	bf00      	nop
 8001332:	3714      	adds	r7, #20
 8001334:	46bd      	mov	sp, r7
 8001336:	bd90      	pop	{r4, r7, pc}

08001338 <ILI9341_Reset>:

void ILI9341_Reset(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);	//Disable
 800133c:	2200      	movs	r2, #0
 800133e:	2104      	movs	r1, #4
 8001340:	480c      	ldr	r0, [pc, #48]	; (8001374 <ILI9341_Reset+0x3c>)
 8001342:	f003 fa2d 	bl	80047a0 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001346:	200a      	movs	r0, #10
 8001348:	f002 fb3e 	bl	80039c8 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);		//Select
 800134c:	2200      	movs	r2, #0
 800134e:	2101      	movs	r1, #1
 8001350:	4808      	ldr	r0, [pc, #32]	; (8001374 <ILI9341_Reset+0x3c>)
 8001352:	f003 fa25 	bl	80047a0 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001356:	200a      	movs	r0, #10
 8001358:	f002 fb36 	bl	80039c8 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 800135c:	2201      	movs	r2, #1
 800135e:	2104      	movs	r1, #4
 8001360:	4804      	ldr	r0, [pc, #16]	; (8001374 <ILI9341_Reset+0x3c>)
 8001362:	f003 fa1d 	bl	80047a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET); 		//Deselect
 8001366:	2201      	movs	r2, #1
 8001368:	2101      	movs	r1, #1
 800136a:	4802      	ldr	r0, [pc, #8]	; (8001374 <ILI9341_Reset+0x3c>)
 800136c:	f003 fa18 	bl	80047a0 <HAL_GPIO_WritePin>
}
 8001370:	bf00      	nop
 8001372:	bd80      	pop	{r7, pc}
 8001374:	40020800 	.word	0x40020800

08001378 <ILI9341_Enable>:

void ILI9341_Enable(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 800137c:	2201      	movs	r2, #1
 800137e:	2104      	movs	r1, #4
 8001380:	4802      	ldr	r0, [pc, #8]	; (800138c <ILI9341_Enable+0x14>)
 8001382:	f003 fa0d 	bl	80047a0 <HAL_GPIO_WritePin>
}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40020800 	.word	0x40020800

08001390 <ILI9341_Init>:

void ILI9341_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
	ILI9341_Enable();
 8001394:	f7ff fff0 	bl	8001378 <ILI9341_Enable>
	ILI9341_Reset();
 8001398:	f7ff ffce 	bl	8001338 <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_WriteCommand(0x01);
 800139c:	2001      	movs	r0, #1
 800139e:	f7ff ff2d 	bl	80011fc <ILI9341_WriteCommand>
	HAL_Delay(10);
 80013a2:	200a      	movs	r0, #10
 80013a4:	f002 fb10 	bl	80039c8 <HAL_Delay>

	//POWER CONTROL A
	ILI9341_WriteCommand(0xCB);
 80013a8:	20cb      	movs	r0, #203	; 0xcb
 80013aa:	f7ff ff27 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x39);
 80013ae:	2039      	movs	r0, #57	; 0x39
 80013b0:	f7ff ff40 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x2C);
 80013b4:	202c      	movs	r0, #44	; 0x2c
 80013b6:	f7ff ff3d 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 80013ba:	2000      	movs	r0, #0
 80013bc:	f7ff ff3a 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x34);
 80013c0:	2034      	movs	r0, #52	; 0x34
 80013c2:	f7ff ff37 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x02);
 80013c6:	2002      	movs	r0, #2
 80013c8:	f7ff ff34 	bl	8001234 <ILI9341_WriteData>

	//POWER CONTROL B
	ILI9341_WriteCommand(0xCF);
 80013cc:	20cf      	movs	r0, #207	; 0xcf
 80013ce:	f7ff ff15 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 80013d2:	2000      	movs	r0, #0
 80013d4:	f7ff ff2e 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 80013d8:	20c1      	movs	r0, #193	; 0xc1
 80013da:	f7ff ff2b 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x30);
 80013de:	2030      	movs	r0, #48	; 0x30
 80013e0:	f7ff ff28 	bl	8001234 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL A
	ILI9341_WriteCommand(0xE8);
 80013e4:	20e8      	movs	r0, #232	; 0xe8
 80013e6:	f7ff ff09 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x85);
 80013ea:	2085      	movs	r0, #133	; 0x85
 80013ec:	f7ff ff22 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 80013f0:	2000      	movs	r0, #0
 80013f2:	f7ff ff1f 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x78);
 80013f6:	2078      	movs	r0, #120	; 0x78
 80013f8:	f7ff ff1c 	bl	8001234 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL B
	ILI9341_WriteCommand(0xEA);
 80013fc:	20ea      	movs	r0, #234	; 0xea
 80013fe:	f7ff fefd 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8001402:	2000      	movs	r0, #0
 8001404:	f7ff ff16 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8001408:	2000      	movs	r0, #0
 800140a:	f7ff ff13 	bl	8001234 <ILI9341_WriteData>

	//POWER ON SEQUENCE CONTROL
	ILI9341_WriteCommand(0xED);
 800140e:	20ed      	movs	r0, #237	; 0xed
 8001410:	f7ff fef4 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x64);
 8001414:	2064      	movs	r0, #100	; 0x64
 8001416:	f7ff ff0d 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 800141a:	2003      	movs	r0, #3
 800141c:	f7ff ff0a 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x12);
 8001420:	2012      	movs	r0, #18
 8001422:	f7ff ff07 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x81);
 8001426:	2081      	movs	r0, #129	; 0x81
 8001428:	f7ff ff04 	bl	8001234 <ILI9341_WriteData>

	//PUMP RATIO CONTROL
	ILI9341_WriteCommand(0xF7);
 800142c:	20f7      	movs	r0, #247	; 0xf7
 800142e:	f7ff fee5 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x20);
 8001432:	2020      	movs	r0, #32
 8001434:	f7ff fefe 	bl	8001234 <ILI9341_WriteData>

	//POWER CONTROL,VRH[5:0]
	ILI9341_WriteCommand(0xC0);
 8001438:	20c0      	movs	r0, #192	; 0xc0
 800143a:	f7ff fedf 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x23);
 800143e:	2023      	movs	r0, #35	; 0x23
 8001440:	f7ff fef8 	bl	8001234 <ILI9341_WriteData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_WriteCommand(0xC1);
 8001444:	20c1      	movs	r0, #193	; 0xc1
 8001446:	f7ff fed9 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x10);
 800144a:	2010      	movs	r0, #16
 800144c:	f7ff fef2 	bl	8001234 <ILI9341_WriteData>

	//VCM CONTROL
	ILI9341_WriteCommand(0xC5);
 8001450:	20c5      	movs	r0, #197	; 0xc5
 8001452:	f7ff fed3 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x3E);
 8001456:	203e      	movs	r0, #62	; 0x3e
 8001458:	f7ff feec 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x28);
 800145c:	2028      	movs	r0, #40	; 0x28
 800145e:	f7ff fee9 	bl	8001234 <ILI9341_WriteData>

	//VCM CONTROL 2
	ILI9341_WriteCommand(0xC7);
 8001462:	20c7      	movs	r0, #199	; 0xc7
 8001464:	f7ff feca 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x86);
 8001468:	2086      	movs	r0, #134	; 0x86
 800146a:	f7ff fee3 	bl	8001234 <ILI9341_WriteData>

	//MEMORY ACCESS CONTROL
	ILI9341_WriteCommand(0x36);
 800146e:	2036      	movs	r0, #54	; 0x36
 8001470:	f7ff fec4 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x48);
 8001474:	2048      	movs	r0, #72	; 0x48
 8001476:	f7ff fedd 	bl	8001234 <ILI9341_WriteData>

	//PIXEL FORMAT
	ILI9341_WriteCommand(0x3A);
 800147a:	203a      	movs	r0, #58	; 0x3a
 800147c:	f7ff febe 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x55);
 8001480:	2055      	movs	r0, #85	; 0x55
 8001482:	f7ff fed7 	bl	8001234 <ILI9341_WriteData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_WriteCommand(0xB1);
 8001486:	20b1      	movs	r0, #177	; 0xb1
 8001488:	f7ff feb8 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 800148c:	2000      	movs	r0, #0
 800148e:	f7ff fed1 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x18);
 8001492:	2018      	movs	r0, #24
 8001494:	f7ff fece 	bl	8001234 <ILI9341_WriteData>

	//DISPLAY FUNCTION CONTROL
	ILI9341_WriteCommand(0xB6);
 8001498:	20b6      	movs	r0, #182	; 0xb6
 800149a:	f7ff feaf 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x08);
 800149e:	2008      	movs	r0, #8
 80014a0:	f7ff fec8 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x82);
 80014a4:	2082      	movs	r0, #130	; 0x82
 80014a6:	f7ff fec5 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x27);
 80014aa:	2027      	movs	r0, #39	; 0x27
 80014ac:	f7ff fec2 	bl	8001234 <ILI9341_WriteData>

	//3GAMMA FUNCTION DISABLE
	ILI9341_WriteCommand(0xF2);
 80014b0:	20f2      	movs	r0, #242	; 0xf2
 80014b2:	f7ff fea3 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 80014b6:	2000      	movs	r0, #0
 80014b8:	f7ff febc 	bl	8001234 <ILI9341_WriteData>

	//GAMMA CURVE SELECTED
	ILI9341_WriteCommand(0x26);
 80014bc:	2026      	movs	r0, #38	; 0x26
 80014be:	f7ff fe9d 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x01);
 80014c2:	2001      	movs	r0, #1
 80014c4:	f7ff feb6 	bl	8001234 <ILI9341_WriteData>

	//POSITIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE0);
 80014c8:	20e0      	movs	r0, #224	; 0xe0
 80014ca:	f7ff fe97 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x0F);
 80014ce:	200f      	movs	r0, #15
 80014d0:	f7ff feb0 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 80014d4:	2031      	movs	r0, #49	; 0x31
 80014d6:	f7ff fead 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x2B);
 80014da:	202b      	movs	r0, #43	; 0x2b
 80014dc:	f7ff feaa 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 80014e0:	200c      	movs	r0, #12
 80014e2:	f7ff fea7 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 80014e6:	200e      	movs	r0, #14
 80014e8:	f7ff fea4 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 80014ec:	2008      	movs	r0, #8
 80014ee:	f7ff fea1 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x4E);
 80014f2:	204e      	movs	r0, #78	; 0x4e
 80014f4:	f7ff fe9e 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0xF1);
 80014f8:	20f1      	movs	r0, #241	; 0xf1
 80014fa:	f7ff fe9b 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x37);
 80014fe:	2037      	movs	r0, #55	; 0x37
 8001500:	f7ff fe98 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8001504:	2007      	movs	r0, #7
 8001506:	f7ff fe95 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x10);
 800150a:	2010      	movs	r0, #16
 800150c:	f7ff fe92 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8001510:	2003      	movs	r0, #3
 8001512:	f7ff fe8f 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8001516:	200e      	movs	r0, #14
 8001518:	f7ff fe8c 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x09);
 800151c:	2009      	movs	r0, #9
 800151e:	f7ff fe89 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8001522:	2000      	movs	r0, #0
 8001524:	f7ff fe86 	bl	8001234 <ILI9341_WriteData>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE1);
 8001528:	20e1      	movs	r0, #225	; 0xe1
 800152a:	f7ff fe67 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 800152e:	2000      	movs	r0, #0
 8001530:	f7ff fe80 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8001534:	200e      	movs	r0, #14
 8001536:	f7ff fe7d 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x14);
 800153a:	2014      	movs	r0, #20
 800153c:	f7ff fe7a 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8001540:	2003      	movs	r0, #3
 8001542:	f7ff fe77 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x11);
 8001546:	2011      	movs	r0, #17
 8001548:	f7ff fe74 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 800154c:	2007      	movs	r0, #7
 800154e:	f7ff fe71 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8001552:	2031      	movs	r0, #49	; 0x31
 8001554:	f7ff fe6e 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8001558:	20c1      	movs	r0, #193	; 0xc1
 800155a:	f7ff fe6b 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x48);
 800155e:	2048      	movs	r0, #72	; 0x48
 8001560:	f7ff fe68 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8001564:	2008      	movs	r0, #8
 8001566:	f7ff fe65 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 800156a:	200f      	movs	r0, #15
 800156c:	f7ff fe62 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8001570:	200c      	movs	r0, #12
 8001572:	f7ff fe5f 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8001576:	2031      	movs	r0, #49	; 0x31
 8001578:	f7ff fe5c 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x36);
 800157c:	2036      	movs	r0, #54	; 0x36
 800157e:	f7ff fe59 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 8001582:	200f      	movs	r0, #15
 8001584:	f7ff fe56 	bl	8001234 <ILI9341_WriteData>

	//EXIT SLEEP
	ILI9341_WriteCommand(0x11);
 8001588:	2011      	movs	r0, #17
 800158a:	f7ff fe37 	bl	80011fc <ILI9341_WriteCommand>
	HAL_Delay(100);
 800158e:	2064      	movs	r0, #100	; 0x64
 8001590:	f002 fa1a 	bl	80039c8 <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_WriteCommand(0x29);
 8001594:	2029      	movs	r0, #41	; 0x29
 8001596:	f7ff fe31 	bl	80011fc <ILI9341_WriteCommand>

	//STARTING ROTATION
	ILI9341_SetRotation(SCREEN_VERTICAL_1);
 800159a:	2000      	movs	r0, #0
 800159c:	f000 f802 	bl	80015a4 <ILI9341_SetRotation>
}
 80015a0:	bf00      	nop
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <ILI9341_SetRotation>:

void ILI9341_SetRotation(uint8_t rotation)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	71fb      	strb	r3, [r7, #7]
	ILI9341_WriteCommand(0x36);
 80015ae:	2036      	movs	r0, #54	; 0x36
 80015b0:	f7ff fe24 	bl	80011fc <ILI9341_WriteCommand>
	HAL_Delay(1);
 80015b4:	2001      	movs	r0, #1
 80015b6:	f002 fa07 	bl	80039c8 <HAL_Delay>

	switch(rotation)
 80015ba:	79fb      	ldrb	r3, [r7, #7]
 80015bc:	2b03      	cmp	r3, #3
 80015be:	d837      	bhi.n	8001630 <ILI9341_SetRotation+0x8c>
 80015c0:	a201      	add	r2, pc, #4	; (adr r2, 80015c8 <ILI9341_SetRotation+0x24>)
 80015c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015c6:	bf00      	nop
 80015c8:	080015d9 	.word	0x080015d9
 80015cc:	080015ef 	.word	0x080015ef
 80015d0:	08001605 	.word	0x08001605
 80015d4:	0800161b 	.word	0x0800161b
	{
	case SCREEN_VERTICAL_1:
		ILI9341_WriteData(0x40|0x08);
 80015d8:	2048      	movs	r0, #72	; 0x48
 80015da:	f7ff fe2b 	bl	8001234 <ILI9341_WriteData>
		LCD_WIDTH = 240;
 80015de:	4b17      	ldr	r3, [pc, #92]	; (800163c <ILI9341_SetRotation+0x98>)
 80015e0:	22f0      	movs	r2, #240	; 0xf0
 80015e2:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 80015e4:	4b16      	ldr	r3, [pc, #88]	; (8001640 <ILI9341_SetRotation+0x9c>)
 80015e6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80015ea:	801a      	strh	r2, [r3, #0]
		break;
 80015ec:	e021      	b.n	8001632 <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_1:
		ILI9341_WriteData(0x20|0x08);
 80015ee:	2028      	movs	r0, #40	; 0x28
 80015f0:	f7ff fe20 	bl	8001234 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 80015f4:	4b11      	ldr	r3, [pc, #68]	; (800163c <ILI9341_SetRotation+0x98>)
 80015f6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80015fa:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 80015fc:	4b10      	ldr	r3, [pc, #64]	; (8001640 <ILI9341_SetRotation+0x9c>)
 80015fe:	22f0      	movs	r2, #240	; 0xf0
 8001600:	801a      	strh	r2, [r3, #0]
		break;
 8001602:	e016      	b.n	8001632 <ILI9341_SetRotation+0x8e>
	case SCREEN_VERTICAL_2:
		ILI9341_WriteData(0x80|0x08);
 8001604:	2088      	movs	r0, #136	; 0x88
 8001606:	f7ff fe15 	bl	8001234 <ILI9341_WriteData>
		LCD_WIDTH  = 240;
 800160a:	4b0c      	ldr	r3, [pc, #48]	; (800163c <ILI9341_SetRotation+0x98>)
 800160c:	22f0      	movs	r2, #240	; 0xf0
 800160e:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8001610:	4b0b      	ldr	r3, [pc, #44]	; (8001640 <ILI9341_SetRotation+0x9c>)
 8001612:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001616:	801a      	strh	r2, [r3, #0]
		break;
 8001618:	e00b      	b.n	8001632 <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_2:
		ILI9341_WriteData(0x40|0x80|0x20|0x08);
 800161a:	20e8      	movs	r0, #232	; 0xe8
 800161c:	f7ff fe0a 	bl	8001234 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 8001620:	4b06      	ldr	r3, [pc, #24]	; (800163c <ILI9341_SetRotation+0x98>)
 8001622:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001626:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8001628:	4b05      	ldr	r3, [pc, #20]	; (8001640 <ILI9341_SetRotation+0x9c>)
 800162a:	22f0      	movs	r2, #240	; 0xf0
 800162c:	801a      	strh	r2, [r3, #0]
		break;
 800162e:	e000      	b.n	8001632 <ILI9341_SetRotation+0x8e>
	default:
		break;
 8001630:	bf00      	nop
	}
}
 8001632:	bf00      	nop
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	20000002 	.word	0x20000002
 8001640:	20000000 	.word	0x20000000

08001644 <ILI9341_DrawColorBurst>:
	uint8_t buffer[2] = {color>>8, color};
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
}

void ILI9341_DrawColorBurst(uint16_t color, uint32_t size)
{
 8001644:	b5b0      	push	{r4, r5, r7, lr}
 8001646:	b08c      	sub	sp, #48	; 0x30
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	6039      	str	r1, [r7, #0]
 800164e:	80fb      	strh	r3, [r7, #6]
 8001650:	466b      	mov	r3, sp
 8001652:	461d      	mov	r5, r3
	uint32_t BufferSize = 0;
 8001654:	2300      	movs	r3, #0
 8001656:	627b      	str	r3, [r7, #36]	; 0x24

	if((size*2) < BURST_MAX_SIZE)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001660:	d202      	bcs.n	8001668 <ILI9341_DrawColorBurst+0x24>
	{
		BufferSize = size;
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	627b      	str	r3, [r7, #36]	; 0x24
 8001666:	e002      	b.n	800166e <ILI9341_DrawColorBurst+0x2a>
	}
	else
	{
		BufferSize = BURST_MAX_SIZE;
 8001668:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800166c:	627b      	str	r3, [r7, #36]	; 0x24
	}

	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 800166e:	2201      	movs	r2, #1
 8001670:	2101      	movs	r1, #1
 8001672:	483d      	ldr	r0, [pc, #244]	; (8001768 <ILI9341_DrawColorBurst+0x124>)
 8001674:	f003 f894 	bl	80047a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001678:	2200      	movs	r2, #0
 800167a:	2101      	movs	r1, #1
 800167c:	483b      	ldr	r0, [pc, #236]	; (800176c <ILI9341_DrawColorBurst+0x128>)
 800167e:	f003 f88f 	bl	80047a0 <HAL_GPIO_WritePin>

	uint8_t chifted = color>>8;
 8001682:	88fb      	ldrh	r3, [r7, #6]
 8001684:	0a1b      	lsrs	r3, r3, #8
 8001686:	b29b      	uxth	r3, r3
 8001688:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t BurstBuffer[BufferSize];
 800168c:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800168e:	4623      	mov	r3, r4
 8001690:	3b01      	subs	r3, #1
 8001692:	61fb      	str	r3, [r7, #28]
 8001694:	4620      	mov	r0, r4
 8001696:	f04f 0100 	mov.w	r1, #0
 800169a:	f04f 0200 	mov.w	r2, #0
 800169e:	f04f 0300 	mov.w	r3, #0
 80016a2:	00cb      	lsls	r3, r1, #3
 80016a4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80016a8:	00c2      	lsls	r2, r0, #3
 80016aa:	4620      	mov	r0, r4
 80016ac:	f04f 0100 	mov.w	r1, #0
 80016b0:	f04f 0200 	mov.w	r2, #0
 80016b4:	f04f 0300 	mov.w	r3, #0
 80016b8:	00cb      	lsls	r3, r1, #3
 80016ba:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80016be:	00c2      	lsls	r2, r0, #3
 80016c0:	1de3      	adds	r3, r4, #7
 80016c2:	08db      	lsrs	r3, r3, #3
 80016c4:	00db      	lsls	r3, r3, #3
 80016c6:	ebad 0d03 	sub.w	sp, sp, r3
 80016ca:	466b      	mov	r3, sp
 80016cc:	3300      	adds	r3, #0
 80016ce:	61bb      	str	r3, [r7, #24]

	for(uint32_t j = 0; j < BufferSize; j+=2)
 80016d0:	2300      	movs	r3, #0
 80016d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80016d4:	e00e      	b.n	80016f4 <ILI9341_DrawColorBurst+0xb0>
	{
		BurstBuffer[j] = chifted;
 80016d6:	69ba      	ldr	r2, [r7, #24]
 80016d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016da:	4413      	add	r3, r2
 80016dc:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80016e0:	701a      	strb	r2, [r3, #0]
		BurstBuffer[j+1] = color;
 80016e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016e4:	3301      	adds	r3, #1
 80016e6:	88fa      	ldrh	r2, [r7, #6]
 80016e8:	b2d1      	uxtb	r1, r2
 80016ea:	69ba      	ldr	r2, [r7, #24]
 80016ec:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < BufferSize; j+=2)
 80016ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016f0:	3302      	adds	r3, #2
 80016f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80016f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80016f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d3ec      	bcc.n	80016d6 <ILI9341_DrawColorBurst+0x92>
	}

	uint32_t SendingSize = size * 2;
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	617b      	str	r3, [r7, #20]
	uint32_t SendingInBlock = SendingSize / BufferSize;
 8001702:	697a      	ldr	r2, [r7, #20]
 8001704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001706:	fbb2 f3f3 	udiv	r3, r2, r3
 800170a:	613b      	str	r3, [r7, #16]
	uint32_t RemainderFromBlock = SendingSize % BufferSize;
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001710:	fbb3 f2f2 	udiv	r2, r3, r2
 8001714:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001716:	fb01 f202 	mul.w	r2, r1, r2
 800171a:	1a9b      	subs	r3, r3, r2
 800171c:	60fb      	str	r3, [r7, #12]

	if(SendingInBlock != 0)
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d010      	beq.n	8001746 <ILI9341_DrawColorBurst+0x102>
	{
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8001724:	2300      	movs	r3, #0
 8001726:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001728:	e009      	b.n	800173e <ILI9341_DrawColorBurst+0xfa>
		{
			HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, BufferSize, 10);
 800172a:	69b9      	ldr	r1, [r7, #24]
 800172c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172e:	b29a      	uxth	r2, r3
 8001730:	230a      	movs	r3, #10
 8001732:	480f      	ldr	r0, [pc, #60]	; (8001770 <ILI9341_DrawColorBurst+0x12c>)
 8001734:	f005 f89e 	bl	8006874 <HAL_SPI_Transmit>
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8001738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800173a:	3301      	adds	r3, #1
 800173c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800173e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	429a      	cmp	r2, r3
 8001744:	d3f1      	bcc.n	800172a <ILI9341_DrawColorBurst+0xe6>
		}
	}

	HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, RemainderFromBlock, 10);
 8001746:	69b9      	ldr	r1, [r7, #24]
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	b29a      	uxth	r2, r3
 800174c:	230a      	movs	r3, #10
 800174e:	4808      	ldr	r0, [pc, #32]	; (8001770 <ILI9341_DrawColorBurst+0x12c>)
 8001750:	f005 f890 	bl	8006874 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001754:	2201      	movs	r2, #1
 8001756:	2101      	movs	r1, #1
 8001758:	4804      	ldr	r0, [pc, #16]	; (800176c <ILI9341_DrawColorBurst+0x128>)
 800175a:	f003 f821 	bl	80047a0 <HAL_GPIO_WritePin>
 800175e:	46ad      	mov	sp, r5
}
 8001760:	bf00      	nop
 8001762:	3730      	adds	r7, #48	; 0x30
 8001764:	46bd      	mov	sp, r7
 8001766:	bdb0      	pop	{r4, r5, r7, pc}
 8001768:	40020000 	.word	0x40020000
 800176c:	40020800 	.word	0x40020800
 8001770:	200035b0 	.word	0x200035b0

08001774 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	4603      	mov	r3, r0
 800177c:	80fb      	strh	r3, [r7, #6]
	ILI9341_SetAddress(0, 0, LCD_WIDTH, LCD_HEIGHT);
 800177e:	4b0e      	ldr	r3, [pc, #56]	; (80017b8 <ILI9341_FillScreen+0x44>)
 8001780:	881b      	ldrh	r3, [r3, #0]
 8001782:	b29a      	uxth	r2, r3
 8001784:	4b0d      	ldr	r3, [pc, #52]	; (80017bc <ILI9341_FillScreen+0x48>)
 8001786:	881b      	ldrh	r3, [r3, #0]
 8001788:	b29b      	uxth	r3, r3
 800178a:	2100      	movs	r1, #0
 800178c:	2000      	movs	r0, #0
 800178e:	f7ff fd8b 	bl	80012a8 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, LCD_WIDTH*LCD_HEIGHT);
 8001792:	4b09      	ldr	r3, [pc, #36]	; (80017b8 <ILI9341_FillScreen+0x44>)
 8001794:	881b      	ldrh	r3, [r3, #0]
 8001796:	b29b      	uxth	r3, r3
 8001798:	461a      	mov	r2, r3
 800179a:	4b08      	ldr	r3, [pc, #32]	; (80017bc <ILI9341_FillScreen+0x48>)
 800179c:	881b      	ldrh	r3, [r3, #0]
 800179e:	b29b      	uxth	r3, r3
 80017a0:	fb03 f302 	mul.w	r3, r3, r2
 80017a4:	461a      	mov	r2, r3
 80017a6:	88fb      	ldrh	r3, [r7, #6]
 80017a8:	4611      	mov	r1, r2
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff ff4a 	bl	8001644 <ILI9341_DrawColorBurst>
}
 80017b0:	bf00      	nop
 80017b2:	3708      	adds	r7, #8
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	20000002 	.word	0x20000002
 80017bc:	20000000 	.word	0x20000000

080017c0 <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x,uint16_t y,uint16_t color)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b086      	sub	sp, #24
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	80fb      	strh	r3, [r7, #6]
 80017ca:	460b      	mov	r3, r1
 80017cc:	80bb      	strh	r3, [r7, #4]
 80017ce:	4613      	mov	r3, r2
 80017d0:	807b      	strh	r3, [r7, #2]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 80017d2:	4b2c      	ldr	r3, [pc, #176]	; (8001884 <ILI9341_DrawPixel+0xc4>)
 80017d4:	881b      	ldrh	r3, [r3, #0]
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	88fa      	ldrh	r2, [r7, #6]
 80017da:	429a      	cmp	r2, r3
 80017dc:	d24d      	bcs.n	800187a <ILI9341_DrawPixel+0xba>
 80017de:	4b2a      	ldr	r3, [pc, #168]	; (8001888 <ILI9341_DrawPixel+0xc8>)
 80017e0:	881b      	ldrh	r3, [r3, #0]
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	88ba      	ldrh	r2, [r7, #4]
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d247      	bcs.n	800187a <ILI9341_DrawPixel+0xba>

	uint8_t bufferX[4] = {x>>8, x, (x+1)>>8, (x+1)};
 80017ea:	88fb      	ldrh	r3, [r7, #6]
 80017ec:	0a1b      	lsrs	r3, r3, #8
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	753b      	strb	r3, [r7, #20]
 80017f4:	88fb      	ldrh	r3, [r7, #6]
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	757b      	strb	r3, [r7, #21]
 80017fa:	88fb      	ldrh	r3, [r7, #6]
 80017fc:	3301      	adds	r3, #1
 80017fe:	121b      	asrs	r3, r3, #8
 8001800:	b2db      	uxtb	r3, r3
 8001802:	75bb      	strb	r3, [r7, #22]
 8001804:	88fb      	ldrh	r3, [r7, #6]
 8001806:	b2db      	uxtb	r3, r3
 8001808:	3301      	adds	r3, #1
 800180a:	b2db      	uxtb	r3, r3
 800180c:	75fb      	strb	r3, [r7, #23]
	uint8_t bufferY[4] = {y>>8, y, (y+1)>>8, (y+1)};
 800180e:	88bb      	ldrh	r3, [r7, #4]
 8001810:	0a1b      	lsrs	r3, r3, #8
 8001812:	b29b      	uxth	r3, r3
 8001814:	b2db      	uxtb	r3, r3
 8001816:	743b      	strb	r3, [r7, #16]
 8001818:	88bb      	ldrh	r3, [r7, #4]
 800181a:	b2db      	uxtb	r3, r3
 800181c:	747b      	strb	r3, [r7, #17]
 800181e:	88bb      	ldrh	r3, [r7, #4]
 8001820:	3301      	adds	r3, #1
 8001822:	121b      	asrs	r3, r3, #8
 8001824:	b2db      	uxtb	r3, r3
 8001826:	74bb      	strb	r3, [r7, #18]
 8001828:	88bb      	ldrh	r3, [r7, #4]
 800182a:	b2db      	uxtb	r3, r3
 800182c:	3301      	adds	r3, #1
 800182e:	b2db      	uxtb	r3, r3
 8001830:	74fb      	strb	r3, [r7, #19]
	uint8_t bufferC[2] = {color>>8, color};
 8001832:	887b      	ldrh	r3, [r7, #2]
 8001834:	0a1b      	lsrs	r3, r3, #8
 8001836:	b29b      	uxth	r3, r3
 8001838:	b2db      	uxtb	r3, r3
 800183a:	733b      	strb	r3, [r7, #12]
 800183c:	887b      	ldrh	r3, [r7, #2]
 800183e:	b2db      	uxtb	r3, r3
 8001840:	737b      	strb	r3, [r7, #13]

	ILI9341_WriteCommand(0x2A);						//ADDRESS
 8001842:	202a      	movs	r0, #42	; 0x2a
 8001844:	f7ff fcda 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferX, sizeof(bufferX));	//XDATA
 8001848:	f107 0314 	add.w	r3, r7, #20
 800184c:	2104      	movs	r1, #4
 800184e:	4618      	mov	r0, r3
 8001850:	f7ff fd0c 	bl	800126c <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2B);						//ADDRESS
 8001854:	202b      	movs	r0, #43	; 0x2b
 8001856:	f7ff fcd1 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferY, sizeof(bufferY));	//YDATA
 800185a:	f107 0310 	add.w	r3, r7, #16
 800185e:	2104      	movs	r1, #4
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff fd03 	bl	800126c <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);						//ADDRESS
 8001866:	202c      	movs	r0, #44	; 0x2c
 8001868:	f7ff fcc8 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferC, sizeof(bufferC));	//COLOR
 800186c:	f107 030c 	add.w	r3, r7, #12
 8001870:	2102      	movs	r1, #2
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff fcfa 	bl	800126c <ILI9341_WriteBuffer>
 8001878:	e000      	b.n	800187c <ILI9341_DrawPixel+0xbc>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 800187a:	bf00      	nop
}
 800187c:	3718      	adds	r7, #24
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	20000002 	.word	0x20000002
 8001888:	20000000 	.word	0x20000000

0800188c <ILI9341_DrawRectangle>:

void ILI9341_DrawRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 800188c:	b590      	push	{r4, r7, lr}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	4604      	mov	r4, r0
 8001894:	4608      	mov	r0, r1
 8001896:	4611      	mov	r1, r2
 8001898:	461a      	mov	r2, r3
 800189a:	4623      	mov	r3, r4
 800189c:	80fb      	strh	r3, [r7, #6]
 800189e:	4603      	mov	r3, r0
 80018a0:	80bb      	strh	r3, [r7, #4]
 80018a2:	460b      	mov	r3, r1
 80018a4:	807b      	strh	r3, [r7, #2]
 80018a6:	4613      	mov	r3, r2
 80018a8:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 80018aa:	4b24      	ldr	r3, [pc, #144]	; (800193c <ILI9341_DrawRectangle+0xb0>)
 80018ac:	881b      	ldrh	r3, [r3, #0]
 80018ae:	b29b      	uxth	r3, r3
 80018b0:	88fa      	ldrh	r2, [r7, #6]
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d23d      	bcs.n	8001932 <ILI9341_DrawRectangle+0xa6>
 80018b6:	4b22      	ldr	r3, [pc, #136]	; (8001940 <ILI9341_DrawRectangle+0xb4>)
 80018b8:	881b      	ldrh	r3, [r3, #0]
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	88ba      	ldrh	r2, [r7, #4]
 80018be:	429a      	cmp	r2, r3
 80018c0:	d237      	bcs.n	8001932 <ILI9341_DrawRectangle+0xa6>

	if((x+width-1)>=LCD_WIDTH)
 80018c2:	88fa      	ldrh	r2, [r7, #6]
 80018c4:	887b      	ldrh	r3, [r7, #2]
 80018c6:	4413      	add	r3, r2
 80018c8:	4a1c      	ldr	r2, [pc, #112]	; (800193c <ILI9341_DrawRectangle+0xb0>)
 80018ca:	8812      	ldrh	r2, [r2, #0]
 80018cc:	b292      	uxth	r2, r2
 80018ce:	4293      	cmp	r3, r2
 80018d0:	dd05      	ble.n	80018de <ILI9341_DrawRectangle+0x52>
	{
		width=LCD_WIDTH-x;
 80018d2:	4b1a      	ldr	r3, [pc, #104]	; (800193c <ILI9341_DrawRectangle+0xb0>)
 80018d4:	881b      	ldrh	r3, [r3, #0]
 80018d6:	b29a      	uxth	r2, r3
 80018d8:	88fb      	ldrh	r3, [r7, #6]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	807b      	strh	r3, [r7, #2]
	}

	if((y+height-1)>=LCD_HEIGHT)
 80018de:	88ba      	ldrh	r2, [r7, #4]
 80018e0:	883b      	ldrh	r3, [r7, #0]
 80018e2:	4413      	add	r3, r2
 80018e4:	4a16      	ldr	r2, [pc, #88]	; (8001940 <ILI9341_DrawRectangle+0xb4>)
 80018e6:	8812      	ldrh	r2, [r2, #0]
 80018e8:	b292      	uxth	r2, r2
 80018ea:	4293      	cmp	r3, r2
 80018ec:	dd05      	ble.n	80018fa <ILI9341_DrawRectangle+0x6e>
	{
		height=LCD_HEIGHT-y;
 80018ee:	4b14      	ldr	r3, [pc, #80]	; (8001940 <ILI9341_DrawRectangle+0xb4>)
 80018f0:	881b      	ldrh	r3, [r3, #0]
 80018f2:	b29a      	uxth	r2, r3
 80018f4:	88bb      	ldrh	r3, [r7, #4]
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	803b      	strh	r3, [r7, #0]
	}

	ILI9341_SetAddress(x, y, x+width-1, y+height-1);
 80018fa:	88fa      	ldrh	r2, [r7, #6]
 80018fc:	887b      	ldrh	r3, [r7, #2]
 80018fe:	4413      	add	r3, r2
 8001900:	b29b      	uxth	r3, r3
 8001902:	3b01      	subs	r3, #1
 8001904:	b29c      	uxth	r4, r3
 8001906:	88ba      	ldrh	r2, [r7, #4]
 8001908:	883b      	ldrh	r3, [r7, #0]
 800190a:	4413      	add	r3, r2
 800190c:	b29b      	uxth	r3, r3
 800190e:	3b01      	subs	r3, #1
 8001910:	b29b      	uxth	r3, r3
 8001912:	88b9      	ldrh	r1, [r7, #4]
 8001914:	88f8      	ldrh	r0, [r7, #6]
 8001916:	4622      	mov	r2, r4
 8001918:	f7ff fcc6 	bl	80012a8 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, height*width);
 800191c:	883b      	ldrh	r3, [r7, #0]
 800191e:	887a      	ldrh	r2, [r7, #2]
 8001920:	fb02 f303 	mul.w	r3, r2, r3
 8001924:	461a      	mov	r2, r3
 8001926:	8b3b      	ldrh	r3, [r7, #24]
 8001928:	4611      	mov	r1, r2
 800192a:	4618      	mov	r0, r3
 800192c:	f7ff fe8a 	bl	8001644 <ILI9341_DrawColorBurst>
 8001930:	e000      	b.n	8001934 <ILI9341_DrawRectangle+0xa8>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001932:	bf00      	nop
}
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	bd90      	pop	{r4, r7, pc}
 800193a:	bf00      	nop
 800193c:	20000002 	.word	0x20000002
 8001940:	20000000 	.word	0x20000000

08001944 <ILI9341_DrawHLine>:

void ILI9341_DrawHLine(uint16_t x, uint16_t y, uint16_t width, uint16_t color)
{
 8001944:	b590      	push	{r4, r7, lr}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	4604      	mov	r4, r0
 800194c:	4608      	mov	r0, r1
 800194e:	4611      	mov	r1, r2
 8001950:	461a      	mov	r2, r3
 8001952:	4623      	mov	r3, r4
 8001954:	80fb      	strh	r3, [r7, #6]
 8001956:	4603      	mov	r3, r0
 8001958:	80bb      	strh	r3, [r7, #4]
 800195a:	460b      	mov	r3, r1
 800195c:	807b      	strh	r3, [r7, #2]
 800195e:	4613      	mov	r3, r2
 8001960:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001962:	4b18      	ldr	r3, [pc, #96]	; (80019c4 <ILI9341_DrawHLine+0x80>)
 8001964:	881b      	ldrh	r3, [r3, #0]
 8001966:	b29b      	uxth	r3, r3
 8001968:	88fa      	ldrh	r2, [r7, #6]
 800196a:	429a      	cmp	r2, r3
 800196c:	d225      	bcs.n	80019ba <ILI9341_DrawHLine+0x76>
 800196e:	4b16      	ldr	r3, [pc, #88]	; (80019c8 <ILI9341_DrawHLine+0x84>)
 8001970:	881b      	ldrh	r3, [r3, #0]
 8001972:	b29b      	uxth	r3, r3
 8001974:	88ba      	ldrh	r2, [r7, #4]
 8001976:	429a      	cmp	r2, r3
 8001978:	d21f      	bcs.n	80019ba <ILI9341_DrawHLine+0x76>

	if((x+width-1)>=LCD_WIDTH)
 800197a:	88fa      	ldrh	r2, [r7, #6]
 800197c:	887b      	ldrh	r3, [r7, #2]
 800197e:	4413      	add	r3, r2
 8001980:	4a10      	ldr	r2, [pc, #64]	; (80019c4 <ILI9341_DrawHLine+0x80>)
 8001982:	8812      	ldrh	r2, [r2, #0]
 8001984:	b292      	uxth	r2, r2
 8001986:	4293      	cmp	r3, r2
 8001988:	dd05      	ble.n	8001996 <ILI9341_DrawHLine+0x52>
	{
		width=LCD_WIDTH-x;
 800198a:	4b0e      	ldr	r3, [pc, #56]	; (80019c4 <ILI9341_DrawHLine+0x80>)
 800198c:	881b      	ldrh	r3, [r3, #0]
 800198e:	b29a      	uxth	r2, r3
 8001990:	88fb      	ldrh	r3, [r7, #6]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	807b      	strh	r3, [r7, #2]
	}

	ILI9341_SetAddress(x, y, x+width-1, y);
 8001996:	88fa      	ldrh	r2, [r7, #6]
 8001998:	887b      	ldrh	r3, [r7, #2]
 800199a:	4413      	add	r3, r2
 800199c:	b29b      	uxth	r3, r3
 800199e:	3b01      	subs	r3, #1
 80019a0:	b29a      	uxth	r2, r3
 80019a2:	88bb      	ldrh	r3, [r7, #4]
 80019a4:	88b9      	ldrh	r1, [r7, #4]
 80019a6:	88f8      	ldrh	r0, [r7, #6]
 80019a8:	f7ff fc7e 	bl	80012a8 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, width);
 80019ac:	887a      	ldrh	r2, [r7, #2]
 80019ae:	883b      	ldrh	r3, [r7, #0]
 80019b0:	4611      	mov	r1, r2
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7ff fe46 	bl	8001644 <ILI9341_DrawColorBurst>
 80019b8:	e000      	b.n	80019bc <ILI9341_DrawHLine+0x78>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 80019ba:	bf00      	nop
}
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd90      	pop	{r4, r7, pc}
 80019c2:	bf00      	nop
 80019c4:	20000002 	.word	0x20000002
 80019c8:	20000000 	.word	0x20000000

080019cc <ILI9341_DrawVLine>:

void ILI9341_DrawVLine(uint16_t x, uint16_t y, uint16_t height, uint16_t color)
{
 80019cc:	b590      	push	{r4, r7, lr}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4604      	mov	r4, r0
 80019d4:	4608      	mov	r0, r1
 80019d6:	4611      	mov	r1, r2
 80019d8:	461a      	mov	r2, r3
 80019da:	4623      	mov	r3, r4
 80019dc:	80fb      	strh	r3, [r7, #6]
 80019de:	4603      	mov	r3, r0
 80019e0:	80bb      	strh	r3, [r7, #4]
 80019e2:	460b      	mov	r3, r1
 80019e4:	807b      	strh	r3, [r7, #2]
 80019e6:	4613      	mov	r3, r2
 80019e8:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 80019ea:	4b18      	ldr	r3, [pc, #96]	; (8001a4c <ILI9341_DrawVLine+0x80>)
 80019ec:	881b      	ldrh	r3, [r3, #0]
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	88fa      	ldrh	r2, [r7, #6]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d225      	bcs.n	8001a42 <ILI9341_DrawVLine+0x76>
 80019f6:	4b16      	ldr	r3, [pc, #88]	; (8001a50 <ILI9341_DrawVLine+0x84>)
 80019f8:	881b      	ldrh	r3, [r3, #0]
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	88ba      	ldrh	r2, [r7, #4]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d21f      	bcs.n	8001a42 <ILI9341_DrawVLine+0x76>

	if((y+height-1)>=LCD_HEIGHT)
 8001a02:	88ba      	ldrh	r2, [r7, #4]
 8001a04:	887b      	ldrh	r3, [r7, #2]
 8001a06:	4413      	add	r3, r2
 8001a08:	4a11      	ldr	r2, [pc, #68]	; (8001a50 <ILI9341_DrawVLine+0x84>)
 8001a0a:	8812      	ldrh	r2, [r2, #0]
 8001a0c:	b292      	uxth	r2, r2
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	dd05      	ble.n	8001a1e <ILI9341_DrawVLine+0x52>
	{
		height=LCD_HEIGHT-y;
 8001a12:	4b0f      	ldr	r3, [pc, #60]	; (8001a50 <ILI9341_DrawVLine+0x84>)
 8001a14:	881b      	ldrh	r3, [r3, #0]
 8001a16:	b29a      	uxth	r2, r3
 8001a18:	88bb      	ldrh	r3, [r7, #4]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	807b      	strh	r3, [r7, #2]
	}

	ILI9341_SetAddress(x, y, x, y+height-1);
 8001a1e:	88ba      	ldrh	r2, [r7, #4]
 8001a20:	887b      	ldrh	r3, [r7, #2]
 8001a22:	4413      	add	r3, r2
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	3b01      	subs	r3, #1
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	88fa      	ldrh	r2, [r7, #6]
 8001a2c:	88b9      	ldrh	r1, [r7, #4]
 8001a2e:	88f8      	ldrh	r0, [r7, #6]
 8001a30:	f7ff fc3a 	bl	80012a8 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, height);
 8001a34:	887a      	ldrh	r2, [r7, #2]
 8001a36:	883b      	ldrh	r3, [r7, #0]
 8001a38:	4611      	mov	r1, r2
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7ff fe02 	bl	8001644 <ILI9341_DrawColorBurst>
 8001a40:	e000      	b.n	8001a44 <ILI9341_DrawVLine+0x78>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001a42:	bf00      	nop
}
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd90      	pop	{r4, r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	20000002 	.word	0x20000002
 8001a50:	20000000 	.word	0x20000000

08001a54 <wireWriteRegister>:
/*!
    @brief  Sends a single command byte over I2C
*/
/**************************************************************************/
void wireWriteRegister (uint8_t reg, uint16_t value)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b088      	sub	sp, #32
 8001a58:	af04      	add	r7, sp, #16
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	460a      	mov	r2, r1
 8001a5e:	71fb      	strb	r3, [r7, #7]
 8001a60:	4613      	mov	r3, r2
 8001a62:	80bb      	strh	r3, [r7, #4]
	uint8_t i2c_temp[2];
	i2c_temp[0] = value>>8;
 8001a64:	88bb      	ldrh	r3, [r7, #4]
 8001a66:	0a1b      	lsrs	r3, r3, #8
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	733b      	strb	r3, [r7, #12]
	i2c_temp[1] = value;
 8001a6e:	88bb      	ldrh	r3, [r7, #4]
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(&hi2c1, INA219_ADDRESS<<1, (uint16_t)reg, 1, i2c_temp, 2, 0xffffffff);
 8001a74:	79fb      	ldrb	r3, [r7, #7]
 8001a76:	b29a      	uxth	r2, r3
 8001a78:	f04f 33ff 	mov.w	r3, #4294967295
 8001a7c:	9302      	str	r3, [sp, #8]
 8001a7e:	2302      	movs	r3, #2
 8001a80:	9301      	str	r3, [sp, #4]
 8001a82:	f107 030c 	add.w	r3, r7, #12
 8001a86:	9300      	str	r3, [sp, #0]
 8001a88:	2301      	movs	r3, #1
 8001a8a:	2180      	movs	r1, #128	; 0x80
 8001a8c:	4804      	ldr	r0, [pc, #16]	; (8001aa0 <wireWriteRegister+0x4c>)
 8001a8e:	f002 fffd 	bl	8004a8c <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8001a92:	2001      	movs	r0, #1
 8001a94:	f001 ff98 	bl	80039c8 <HAL_Delay>
}
 8001a98:	bf00      	nop
 8001a9a:	3710      	adds	r7, #16
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	20002c3c 	.word	0x20002c3c

08001aa4 <wireReadRegister>:
/*!
    @brief  Reads a 16 bit values over I2C
*/
/**************************************************************************/
void wireReadRegister(uint8_t reg, uint16_t *value)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b088      	sub	sp, #32
 8001aa8:	af04      	add	r7, sp, #16
 8001aaa:	4603      	mov	r3, r0
 8001aac:	6039      	str	r1, [r7, #0]
 8001aae:	71fb      	strb	r3, [r7, #7]
	uint8_t i2c_temp[2];
	HAL_I2C_Mem_Read(&hi2c1, INA219_ADDRESS<<1, (uint16_t)reg, 1,i2c_temp, 2, 0xffffffff);
 8001ab0:	79fb      	ldrb	r3, [r7, #7]
 8001ab2:	b29a      	uxth	r2, r3
 8001ab4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ab8:	9302      	str	r3, [sp, #8]
 8001aba:	2302      	movs	r3, #2
 8001abc:	9301      	str	r3, [sp, #4]
 8001abe:	f107 030c 	add.w	r3, r7, #12
 8001ac2:	9300      	str	r3, [sp, #0]
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	2180      	movs	r1, #128	; 0x80
 8001ac8:	4809      	ldr	r0, [pc, #36]	; (8001af0 <wireReadRegister+0x4c>)
 8001aca:	f003 f8d9 	bl	8004c80 <HAL_I2C_Mem_Read>
	HAL_Delay(1);
 8001ace:	2001      	movs	r0, #1
 8001ad0:	f001 ff7a 	bl	80039c8 <HAL_Delay>
	*value = ((uint16_t)i2c_temp[0]<<8 )|(uint16_t)i2c_temp[1];
 8001ad4:	7b3b      	ldrb	r3, [r7, #12]
 8001ad6:	021b      	lsls	r3, r3, #8
 8001ad8:	b21a      	sxth	r2, r3
 8001ada:	7b7b      	ldrb	r3, [r7, #13]
 8001adc:	b21b      	sxth	r3, r3
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	b21b      	sxth	r3, r3
 8001ae2:	b29a      	uxth	r2, r3
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	801a      	strh	r2, [r3, #0]
}
 8001ae8:	bf00      	nop
 8001aea:	3710      	adds	r7, #16
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	20002c3c 	.word	0x20002c3c

08001af4 <setCalibration_16V_400mA>:
    @brief set device to alibration which uses the highest precision for
      current measurement (0.1mA), at the expense of
      only supporting 16V at 400mA max.
*/
/**************************************************************************/
void setCalibration_16V_400mA(void) {
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0

  // 5. Compute the calibration register
  // Cal = trunc (0.04096 / (Current_LSB * RSHUNT))
  // Cal = 8192 (0x2000)

  ina219_calValue = 8192;
 8001afa:	4b0e      	ldr	r3, [pc, #56]	; (8001b34 <setCalibration_16V_400mA+0x40>)
 8001afc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b00:	601a      	str	r2, [r3, #0]
  // MaximumPower = Max_Current_Before_Overflow * VBUS_MAX
  // MaximumPower = 0.4 * 16V
  // MaximumPower = 6.4W

  // Set multipliers to convert raw current/power values
  ina219_currentDivider_mA = 20;  // Current LSB = 50uA per bit (1000/50 = 20)
 8001b02:	4b0d      	ldr	r3, [pc, #52]	; (8001b38 <setCalibration_16V_400mA+0x44>)
 8001b04:	2214      	movs	r2, #20
 8001b06:	601a      	str	r2, [r3, #0]
  ina219_powerMultiplier_mW = 1;     // Power LSB = 1mW per bit
 8001b08:	4b0c      	ldr	r3, [pc, #48]	; (8001b3c <setCalibration_16V_400mA+0x48>)
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	601a      	str	r2, [r3, #0]

  // Set Calibration register to 'Cal' calculated above
  wireWriteRegister(INA219_REG_CALIBRATION, ina219_calValue);
 8001b0e:	4b09      	ldr	r3, [pc, #36]	; (8001b34 <setCalibration_16V_400mA+0x40>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	4619      	mov	r1, r3
 8001b16:	2005      	movs	r0, #5
 8001b18:	f7ff ff9c 	bl	8001a54 <wireWriteRegister>

  // Set Config register to take into account the settings above
  uint16_t config = INA219_CONFIG_BVOLTAGERANGE_16V |
 8001b1c:	f240 139f 	movw	r3, #415	; 0x19f
 8001b20:	80fb      	strh	r3, [r7, #6]
                    INA219_CONFIG_GAIN_1_40MV |
                    INA219_CONFIG_BADCRES_12BIT |
                    INA219_CONFIG_SADCRES_12BIT_1S_532US |
                    INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS;
  wireWriteRegister(INA219_REG_CONFIG, config);
 8001b22:	88fb      	ldrh	r3, [r7, #6]
 8001b24:	4619      	mov	r1, r3
 8001b26:	2000      	movs	r0, #0
 8001b28:	f7ff ff94 	bl	8001a54 <wireWriteRegister>
}
 8001b2c:	bf00      	nop
 8001b2e:	3708      	adds	r7, #8
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	20002a6c 	.word	0x20002a6c
 8001b38:	20000a60 	.word	0x20000a60
 8001b3c:	20000a64 	.word	0x20000a64

08001b40 <getBusVoltage_raw>:
/*!
    @brief  Gets the raw bus voltage (16-bit signed integer, so +-32767)
    @return the raw bus voltage reading
*/
/**************************************************************************/
int16_t getBusVoltage_raw() {
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
  uint16_t value;
  wireReadRegister(INA219_REG_BUSVOLTAGE, &value);
 8001b46:	1dbb      	adds	r3, r7, #6
 8001b48:	4619      	mov	r1, r3
 8001b4a:	2002      	movs	r0, #2
 8001b4c:	f7ff ffaa 	bl	8001aa4 <wireReadRegister>

  // Shift to the right 3 to drop CNVR and OVF and multiply by LSB
  return (int16_t)((value >> 3) * 4);
 8001b50:	88fb      	ldrh	r3, [r7, #6]
 8001b52:	08db      	lsrs	r3, r3, #3
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	b21b      	sxth	r3, r3
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3708      	adds	r7, #8
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <getCurrent_raw>:
/*!
    @brief  Gets the raw current value (16-bit signed integer, so +-32767)
    @return the raw current reading
*/
/**************************************************************************/
int16_t getCurrent_raw() {
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0

  // Sometimes a sharp load will reset the INA219, which will
  // reset the cal register, meaning CURRENT and POWER will
  // not be available ... avoid this by always setting a cal
  // value even if it's an unfortunate extra step
  wireWriteRegister(INA219_REG_CALIBRATION, ina219_calValue);
 8001b6a:	4b09      	ldr	r3, [pc, #36]	; (8001b90 <getCurrent_raw+0x2c>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	4619      	mov	r1, r3
 8001b72:	2005      	movs	r0, #5
 8001b74:	f7ff ff6e 	bl	8001a54 <wireWriteRegister>

  // Now we can safely read the CURRENT register!
  wireReadRegister(INA219_REG_CURRENT, &value);
 8001b78:	1dbb      	adds	r3, r7, #6
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	2004      	movs	r0, #4
 8001b7e:	f7ff ff91 	bl	8001aa4 <wireReadRegister>

  return (int16_t)value;
 8001b82:	88fb      	ldrh	r3, [r7, #6]
 8001b84:	b21b      	sxth	r3, r3
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	20002a6c 	.word	0x20002a6c

08001b94 <getPower_raw>:
/*!
    @brief  Gets the raw power value (16-bit signed integer, so +-32767)
    @return raw power reading
*/
/**************************************************************************/
int16_t getPower_raw() {
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0

  // Sometimes a sharp load will reset the INA219, which will
  // reset the cal register, meaning CURRENT and POWER will
  // not be available ... avoid this by always setting a cal
  // value even if it's an unfortunate extra step
  wireWriteRegister(INA219_REG_CALIBRATION, ina219_calValue);
 8001b9a:	4b09      	ldr	r3, [pc, #36]	; (8001bc0 <getPower_raw+0x2c>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	2005      	movs	r0, #5
 8001ba4:	f7ff ff56 	bl	8001a54 <wireWriteRegister>

  // Now we can safely read the POWER register!
  wireReadRegister(INA219_REG_POWER, &value);
 8001ba8:	1dbb      	adds	r3, r7, #6
 8001baa:	4619      	mov	r1, r3
 8001bac:	2003      	movs	r0, #3
 8001bae:	f7ff ff79 	bl	8001aa4 <wireReadRegister>

  return (int16_t)value;
 8001bb2:	88fb      	ldrh	r3, [r7, #6]
 8001bb4:	b21b      	sxth	r3, r3
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	20002a6c 	.word	0x20002a6c
 8001bc4:	00000000 	.word	0x00000000

08001bc8 <getBusVoltage_V>:
/*!
    @brief  Gets the shunt voltage in volts
    @return the bus voltage converted to volts
*/
/**************************************************************************/
float getBusVoltage_V() {
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
  int16_t value = getBusVoltage_raw();
 8001bce:	f7ff ffb7 	bl	8001b40 <getBusVoltage_raw>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	80fb      	strh	r3, [r7, #6]
  return value * 0.001;
 8001bd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7fe fca2 	bl	8000524 <__aeabi_i2d>
 8001be0:	a309      	add	r3, pc, #36	; (adr r3, 8001c08 <getBusVoltage_V+0x40>)
 8001be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be6:	f7fe fd07 	bl	80005f8 <__aeabi_dmul>
 8001bea:	4602      	mov	r2, r0
 8001bec:	460b      	mov	r3, r1
 8001bee:	4610      	mov	r0, r2
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	f7fe fff9 	bl	8000be8 <__aeabi_d2f>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	ee07 3a90 	vmov	s15, r3
}
 8001bfc:	eeb0 0a67 	vmov.f32	s0, s15
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	d2f1a9fc 	.word	0xd2f1a9fc
 8001c0c:	3f50624d 	.word	0x3f50624d

08001c10 <getCurrent_mA>:
    @brief  Gets the current value in mA, taking into account the
            config settings and current LSB
    @return the current reading convereted to milliamps
*/
/**************************************************************************/
float getCurrent_mA() {
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
  float valueDec = getCurrent_raw();
 8001c16:	f7ff ffa5 	bl	8001b64 <getCurrent_raw>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	ee07 3a90 	vmov	s15, r3
 8001c20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c24:	edc7 7a01 	vstr	s15, [r7, #4]
  valueDec /= ina219_currentDivider_mA;
 8001c28:	4b09      	ldr	r3, [pc, #36]	; (8001c50 <getCurrent_mA+0x40>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	ee07 3a90 	vmov	s15, r3
 8001c30:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c34:	edd7 6a01 	vldr	s13, [r7, #4]
 8001c38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c3c:	edc7 7a01 	vstr	s15, [r7, #4]
  return valueDec;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	ee07 3a90 	vmov	s15, r3
}
 8001c46:	eeb0 0a67 	vmov.f32	s0, s15
 8001c4a:	3708      	adds	r7, #8
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	20000a60 	.word	0x20000a60

08001c54 <getPower_mW>:
    @brief  Gets the power value in mW, taking into account the
            config settings and current LSB
    @return power reading converted to milliwatts
*/
/**************************************************************************/
float getPower_mW() {
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
  float valueDec = getPower_raw();
 8001c5a:	f7ff ff9b 	bl	8001b94 <getPower_raw>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	ee07 3a90 	vmov	s15, r3
 8001c64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c68:	edc7 7a01 	vstr	s15, [r7, #4]
  valueDec *= ina219_powerMultiplier_mW;
 8001c6c:	4b09      	ldr	r3, [pc, #36]	; (8001c94 <getPower_mW+0x40>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	ee07 3a90 	vmov	s15, r3
 8001c74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c78:	ed97 7a01 	vldr	s14, [r7, #4]
 8001c7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c80:	edc7 7a01 	vstr	s15, [r7, #4]
  return valueDec;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	ee07 3a90 	vmov	s15, r3
}
 8001c8a:	eeb0 0a67 	vmov.f32	s0, s15
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	20000a64 	.word	0x20000a64

08001c98 <set_time>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/**Fungsi ini digunakan untuk set timer jika dibutuhkan untuk set rtc
  */
void set_time(void){
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af00      	add	r7, sp, #0
	  RTC_TimeTypeDef sTime = {0};
 8001c9e:	1d3b      	adds	r3, r7, #4
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	605a      	str	r2, [r3, #4]
 8001ca6:	609a      	str	r2, [r3, #8]
 8001ca8:	60da      	str	r2, [r3, #12]
 8001caa:	611a      	str	r2, [r3, #16]
	  RTC_DateTypeDef sDate = {0};
 8001cac:	2300      	movs	r3, #0
 8001cae:	603b      	str	r3, [r7, #0]
	  /** Initialize RTC and set the Time and Date
	  */
	  sTime.Hours = 0x10;
 8001cb0:	2310      	movs	r3, #16
 8001cb2:	713b      	strb	r3, [r7, #4]
	  sTime.Minutes = 0x1;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	717b      	strb	r3, [r7, #5]
	  sTime.Seconds = 0x0;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	71bb      	strb	r3, [r7, #6]
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	613b      	str	r3, [r7, #16]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	617b      	str	r3, [r7, #20]
	  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001cc4:	1d3b      	adds	r3, r7, #4
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4812      	ldr	r0, [pc, #72]	; (8001d14 <set_time+0x7c>)
 8001ccc:	f004 fb41 	bl	8006352 <HAL_RTC_SetTime>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <set_time+0x42>
	  {
	    Error_Handler();
 8001cd6:	f001 fa21 	bl	800311c <Error_Handler>
	  }
	  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	703b      	strb	r3, [r7, #0]
	  sDate.Month = RTC_MONTH_OCTOBER;
 8001cde:	2310      	movs	r3, #16
 8001ce0:	707b      	strb	r3, [r7, #1]
	  sDate.Date = 0x18;
 8001ce2:	2318      	movs	r3, #24
 8001ce4:	70bb      	strb	r3, [r7, #2]
	  sDate.Year = 0x21;
 8001ce6:	2321      	movs	r3, #33	; 0x21
 8001ce8:	70fb      	strb	r3, [r7, #3]

	  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001cea:	463b      	mov	r3, r7
 8001cec:	2201      	movs	r2, #1
 8001cee:	4619      	mov	r1, r3
 8001cf0:	4808      	ldr	r0, [pc, #32]	; (8001d14 <set_time+0x7c>)
 8001cf2:	f004 fbeb 	bl	80064cc <HAL_RTC_SetDate>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d001      	beq.n	8001d00 <set_time+0x68>
	  {
	    Error_Handler();
 8001cfc:	f001 fa0e 	bl	800311c <Error_Handler>
	  }
	  /* USER CODE BEGIN RTC_Init 2 */
	  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);
 8001d00:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8001d04:	2101      	movs	r1, #1
 8001d06:	4803      	ldr	r0, [pc, #12]	; (8001d14 <set_time+0x7c>)
 8001d08:	f004 fcf9 	bl	80066fe <HAL_RTCEx_BKUPWrite>
	  /* USER CODE END RTC_Init 2 */

}
 8001d0c:	bf00      	nop
 8001d0e:	3718      	adds	r7, #24
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	20002d74 	.word	0x20002d74

08001d18 <getLCD>:
/**Fungsi ini digunakan untuk LCD*/

void getLCD(char *data_lat,char *data_lng, char *volt, char *amper, char *persen)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b086      	sub	sp, #24
 8001d1c:	af02      	add	r7, sp, #8
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	607a      	str	r2, [r7, #4]
 8001d24:	603b      	str	r3, [r7, #0]
	  ILI9341_DrawVLine(0, 0, 320, DARKGREEN);
 8001d26:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8001d2a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001d2e:	2100      	movs	r1, #0
 8001d30:	2000      	movs	r0, #0
 8001d32:	f7ff fe4b 	bl	80019cc <ILI9341_DrawVLine>
	  ILI9341_DrawVLine(2, 0, 320, DARKGREEN);
 8001d36:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8001d3a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001d3e:	2100      	movs	r1, #0
 8001d40:	2002      	movs	r0, #2
 8001d42:	f7ff fe43 	bl	80019cc <ILI9341_DrawVLine>
	  ILI9341_DrawText("17-10-2021", FONT3, 9, 8, WHITE, BLACK);
 8001d46:	2300      	movs	r3, #0
 8001d48:	9301      	str	r3, [sp, #4]
 8001d4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d4e:	9300      	str	r3, [sp, #0]
 8001d50:	2308      	movs	r3, #8
 8001d52:	2209      	movs	r2, #9
 8001d54:	499c      	ldr	r1, [pc, #624]	; (8001fc8 <getLCD+0x2b0>)
 8001d56:	489d      	ldr	r0, [pc, #628]	; (8001fcc <getLCD+0x2b4>)
 8001d58:	f7ff f9bd 	bl	80010d6 <ILI9341_DrawText>
	  ILI9341_DrawText("17:04:00", FONT3, 90, 8, WHITE, BLACK);
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	9301      	str	r3, [sp, #4]
 8001d60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d64:	9300      	str	r3, [sp, #0]
 8001d66:	2308      	movs	r3, #8
 8001d68:	225a      	movs	r2, #90	; 0x5a
 8001d6a:	4997      	ldr	r1, [pc, #604]	; (8001fc8 <getLCD+0x2b0>)
 8001d6c:	4898      	ldr	r0, [pc, #608]	; (8001fd0 <getLCD+0x2b8>)
 8001d6e:	f7ff f9b2 	bl	80010d6 <ILI9341_DrawText>
	  ILI9341_DrawRectangle(190, 4, 8, 20, GREENYELLOW);
 8001d72:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8001d76:	9300      	str	r3, [sp, #0]
 8001d78:	2314      	movs	r3, #20
 8001d7a:	2208      	movs	r2, #8
 8001d7c:	2104      	movs	r1, #4
 8001d7e:	20be      	movs	r0, #190	; 0xbe
 8001d80:	f7ff fd84 	bl	800188c <ILI9341_DrawRectangle>
	  ILI9341_DrawRectangle(200, 4, 8, 20, GREENYELLOW);
 8001d84:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8001d88:	9300      	str	r3, [sp, #0]
 8001d8a:	2314      	movs	r3, #20
 8001d8c:	2208      	movs	r2, #8
 8001d8e:	2104      	movs	r1, #4
 8001d90:	20c8      	movs	r0, #200	; 0xc8
 8001d92:	f7ff fd7b 	bl	800188c <ILI9341_DrawRectangle>
	  ILI9341_DrawRectangle(210, 4, 8, 20, GREENYELLOW);
 8001d96:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8001d9a:	9300      	str	r3, [sp, #0]
 8001d9c:	2314      	movs	r3, #20
 8001d9e:	2208      	movs	r2, #8
 8001da0:	2104      	movs	r1, #4
 8001da2:	20d2      	movs	r0, #210	; 0xd2
 8001da4:	f7ff fd72 	bl	800188c <ILI9341_DrawRectangle>
	  ILI9341_DrawRectangle(220, 4, 8, 20, GREENYELLOW);
 8001da8:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8001dac:	9300      	str	r3, [sp, #0]
 8001dae:	2314      	movs	r3, #20
 8001db0:	2208      	movs	r2, #8
 8001db2:	2104      	movs	r1, #4
 8001db4:	20dc      	movs	r0, #220	; 0xdc
 8001db6:	f7ff fd69 	bl	800188c <ILI9341_DrawRectangle>
	  ILI9341_DrawRectangle(230, 4, 8, 20, GREENYELLOW);
 8001dba:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8001dbe:	9300      	str	r3, [sp, #0]
 8001dc0:	2314      	movs	r3, #20
 8001dc2:	2208      	movs	r2, #8
 8001dc4:	2104      	movs	r1, #4
 8001dc6:	20e6      	movs	r0, #230	; 0xe6
 8001dc8:	f7ff fd60 	bl	800188c <ILI9341_DrawRectangle>
	  ILI9341_DrawVLine(237, 0, 320, DARKGREEN);
 8001dcc:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8001dd0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	20ed      	movs	r0, #237	; 0xed
 8001dd8:	f7ff fdf8 	bl	80019cc <ILI9341_DrawVLine>
	  ILI9341_DrawVLine(239, 0, 320, DARKGREEN);
 8001ddc:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8001de0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001de4:	2100      	movs	r1, #0
 8001de6:	20ef      	movs	r0, #239	; 0xef
 8001de8:	f7ff fdf0 	bl	80019cc <ILI9341_DrawVLine>
	  ILI9341_DrawHLine(0, 30, 240, DARKGREEN);
 8001dec:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8001df0:	22f0      	movs	r2, #240	; 0xf0
 8001df2:	211e      	movs	r1, #30
 8001df4:	2000      	movs	r0, #0
 8001df6:	f7ff fda5 	bl	8001944 <ILI9341_DrawHLine>
	  ILI9341_DrawHLine(0, 32, 240, DARKGREEN);
 8001dfa:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8001dfe:	22f0      	movs	r2, #240	; 0xf0
 8001e00:	2120      	movs	r1, #32
 8001e02:	2000      	movs	r0, #0
 8001e04:	f7ff fd9e 	bl	8001944 <ILI9341_DrawHLine>
	  ILI9341_DrawText("ID NODE : A", FONT3, 9, 40, WHITE, BLACK);
 8001e08:	2300      	movs	r3, #0
 8001e0a:	9301      	str	r3, [sp, #4]
 8001e0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e10:	9300      	str	r3, [sp, #0]
 8001e12:	2328      	movs	r3, #40	; 0x28
 8001e14:	2209      	movs	r2, #9
 8001e16:	496c      	ldr	r1, [pc, #432]	; (8001fc8 <getLCD+0x2b0>)
 8001e18:	486e      	ldr	r0, [pc, #440]	; (8001fd4 <getLCD+0x2bc>)
 8001e1a:	f7ff f95c 	bl	80010d6 <ILI9341_DrawText>
	  ILI9341_DrawText(volt, FONT3, 120, 40, WHITE, BLACK);
 8001e1e:	2300      	movs	r3, #0
 8001e20:	9301      	str	r3, [sp, #4]
 8001e22:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e26:	9300      	str	r3, [sp, #0]
 8001e28:	2328      	movs	r3, #40	; 0x28
 8001e2a:	2278      	movs	r2, #120	; 0x78
 8001e2c:	4966      	ldr	r1, [pc, #408]	; (8001fc8 <getLCD+0x2b0>)
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f7ff f951 	bl	80010d6 <ILI9341_DrawText>
	  ILI9341_DrawText(amper, FONT3, 180, 40, WHITE, BLACK);
 8001e34:	2300      	movs	r3, #0
 8001e36:	9301      	str	r3, [sp, #4]
 8001e38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e3c:	9300      	str	r3, [sp, #0]
 8001e3e:	2328      	movs	r3, #40	; 0x28
 8001e40:	22b4      	movs	r2, #180	; 0xb4
 8001e42:	4961      	ldr	r1, [pc, #388]	; (8001fc8 <getLCD+0x2b0>)
 8001e44:	6838      	ldr	r0, [r7, #0]
 8001e46:	f7ff f946 	bl	80010d6 <ILI9341_DrawText>
	  ILI9341_DrawHLine(0, 60, 240, DARKGREEN);
 8001e4a:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8001e4e:	22f0      	movs	r2, #240	; 0xf0
 8001e50:	213c      	movs	r1, #60	; 0x3c
 8001e52:	2000      	movs	r0, #0
 8001e54:	f7ff fd76 	bl	8001944 <ILI9341_DrawHLine>
	  ILI9341_DrawHLine(0, 62, 240, DARKGREEN);
 8001e58:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8001e5c:	22f0      	movs	r2, #240	; 0xf0
 8001e5e:	213e      	movs	r1, #62	; 0x3e
 8001e60:	2000      	movs	r0, #0
 8001e62:	f7ff fd6f 	bl	8001944 <ILI9341_DrawHLine>
	  ILI9341_DrawText("Masukkan Pesan yang anda kirim : ", FONT2, 9, 70, WHITE, BLACK);
 8001e66:	2300      	movs	r3, #0
 8001e68:	9301      	str	r3, [sp, #4]
 8001e6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e6e:	9300      	str	r3, [sp, #0]
 8001e70:	2346      	movs	r3, #70	; 0x46
 8001e72:	2209      	movs	r2, #9
 8001e74:	4958      	ldr	r1, [pc, #352]	; (8001fd8 <getLCD+0x2c0>)
 8001e76:	4859      	ldr	r0, [pc, #356]	; (8001fdc <getLCD+0x2c4>)
 8001e78:	f7ff f92d 	bl	80010d6 <ILI9341_DrawText>
	  ILI9341_DrawHLine(0, 85, 240, DARKGREEN);
 8001e7c:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8001e80:	22f0      	movs	r2, #240	; 0xf0
 8001e82:	2155      	movs	r1, #85	; 0x55
 8001e84:	2000      	movs	r0, #0
 8001e86:	f7ff fd5d 	bl	8001944 <ILI9341_DrawHLine>
	  ILI9341_DrawHLine(0, 87, 240, DARKGREEN);
 8001e8a:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8001e8e:	22f0      	movs	r2, #240	; 0xf0
 8001e90:	2157      	movs	r1, #87	; 0x57
 8001e92:	2000      	movs	r0, #0
 8001e94:	f7ff fd56 	bl	8001944 <ILI9341_DrawHLine>
	  ILI9341_DrawText("Ini Pesan Anda", FONT2, 9, 95, WHITE, BLACK);
 8001e98:	2300      	movs	r3, #0
 8001e9a:	9301      	str	r3, [sp, #4]
 8001e9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ea0:	9300      	str	r3, [sp, #0]
 8001ea2:	235f      	movs	r3, #95	; 0x5f
 8001ea4:	2209      	movs	r2, #9
 8001ea6:	494c      	ldr	r1, [pc, #304]	; (8001fd8 <getLCD+0x2c0>)
 8001ea8:	484d      	ldr	r0, [pc, #308]	; (8001fe0 <getLCD+0x2c8>)
 8001eaa:	f7ff f914 	bl	80010d6 <ILI9341_DrawText>
	  ILI9341_DrawHLine(0, 150, 240, DARKGREEN);
 8001eae:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8001eb2:	22f0      	movs	r2, #240	; 0xf0
 8001eb4:	2196      	movs	r1, #150	; 0x96
 8001eb6:	2000      	movs	r0, #0
 8001eb8:	f7ff fd44 	bl	8001944 <ILI9341_DrawHLine>
	  ILI9341_DrawHLine(0, 152, 240, DARKGREEN);
 8001ebc:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8001ec0:	22f0      	movs	r2, #240	; 0xf0
 8001ec2:	2198      	movs	r1, #152	; 0x98
 8001ec4:	2000      	movs	r0, #0
 8001ec6:	f7ff fd3d 	bl	8001944 <ILI9341_DrawHLine>
	  ILI9341_DrawText("Anda Menerima Pesan : ", FONT2, 9, 160, WHITE, BLACK);
 8001eca:	2300      	movs	r3, #0
 8001ecc:	9301      	str	r3, [sp, #4]
 8001ece:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ed2:	9300      	str	r3, [sp, #0]
 8001ed4:	23a0      	movs	r3, #160	; 0xa0
 8001ed6:	2209      	movs	r2, #9
 8001ed8:	493f      	ldr	r1, [pc, #252]	; (8001fd8 <getLCD+0x2c0>)
 8001eda:	4842      	ldr	r0, [pc, #264]	; (8001fe4 <getLCD+0x2cc>)
 8001edc:	f7ff f8fb 	bl	80010d6 <ILI9341_DrawText>
	  ILI9341_DrawText("Ini Pesan dia", FONT2, 9, 175, WHITE, BLACK);
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	9301      	str	r3, [sp, #4]
 8001ee4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ee8:	9300      	str	r3, [sp, #0]
 8001eea:	23af      	movs	r3, #175	; 0xaf
 8001eec:	2209      	movs	r2, #9
 8001eee:	493a      	ldr	r1, [pc, #232]	; (8001fd8 <getLCD+0x2c0>)
 8001ef0:	483d      	ldr	r0, [pc, #244]	; (8001fe8 <getLCD+0x2d0>)
 8001ef2:	f7ff f8f0 	bl	80010d6 <ILI9341_DrawText>
	  ILI9341_DrawHLine(0, 245, 240, DARKGREEN);
 8001ef6:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8001efa:	22f0      	movs	r2, #240	; 0xf0
 8001efc:	21f5      	movs	r1, #245	; 0xf5
 8001efe:	2000      	movs	r0, #0
 8001f00:	f7ff fd20 	bl	8001944 <ILI9341_DrawHLine>
	  ILI9341_DrawHLine(0, 247, 240, DARKGREEN);
 8001f04:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8001f08:	22f0      	movs	r2, #240	; 0xf0
 8001f0a:	21f7      	movs	r1, #247	; 0xf7
 8001f0c:	2000      	movs	r0, #0
 8001f0e:	f7ff fd19 	bl	8001944 <ILI9341_DrawHLine>
	  ILI9341_DrawText("Lokasi   : ", FONT2, 9, 255, WHITE, BLACK);
 8001f12:	2300      	movs	r3, #0
 8001f14:	9301      	str	r3, [sp, #4]
 8001f16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f1a:	9300      	str	r3, [sp, #0]
 8001f1c:	23ff      	movs	r3, #255	; 0xff
 8001f1e:	2209      	movs	r2, #9
 8001f20:	492d      	ldr	r1, [pc, #180]	; (8001fd8 <getLCD+0x2c0>)
 8001f22:	4832      	ldr	r0, [pc, #200]	; (8001fec <getLCD+0x2d4>)
 8001f24:	f7ff f8d7 	bl	80010d6 <ILI9341_DrawText>
	  ILI9341_DrawText("Latitude : ", FONT2, 9, 270, WHITE, BLACK);
 8001f28:	2300      	movs	r3, #0
 8001f2a:	9301      	str	r3, [sp, #4]
 8001f2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f30:	9300      	str	r3, [sp, #0]
 8001f32:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8001f36:	2209      	movs	r2, #9
 8001f38:	4927      	ldr	r1, [pc, #156]	; (8001fd8 <getLCD+0x2c0>)
 8001f3a:	482d      	ldr	r0, [pc, #180]	; (8001ff0 <getLCD+0x2d8>)
 8001f3c:	f7ff f8cb 	bl	80010d6 <ILI9341_DrawText>
	  ILI9341_DrawText(data_lat, FONT2, 75, 270, WHITE, BLACK);
 8001f40:	2300      	movs	r3, #0
 8001f42:	9301      	str	r3, [sp, #4]
 8001f44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f48:	9300      	str	r3, [sp, #0]
 8001f4a:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8001f4e:	224b      	movs	r2, #75	; 0x4b
 8001f50:	4921      	ldr	r1, [pc, #132]	; (8001fd8 <getLCD+0x2c0>)
 8001f52:	68f8      	ldr	r0, [r7, #12]
 8001f54:	f7ff f8bf 	bl	80010d6 <ILI9341_DrawText>
	  ILI9341_DrawText("Longitude : ", FONT2, 9, 285, WHITE, BLACK);
 8001f58:	2300      	movs	r3, #0
 8001f5a:	9301      	str	r3, [sp, #4]
 8001f5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f60:	9300      	str	r3, [sp, #0]
 8001f62:	f240 131d 	movw	r3, #285	; 0x11d
 8001f66:	2209      	movs	r2, #9
 8001f68:	491b      	ldr	r1, [pc, #108]	; (8001fd8 <getLCD+0x2c0>)
 8001f6a:	4822      	ldr	r0, [pc, #136]	; (8001ff4 <getLCD+0x2dc>)
 8001f6c:	f7ff f8b3 	bl	80010d6 <ILI9341_DrawText>
	  ILI9341_DrawText(data_lng, FONT2, 75, 285, WHITE, BLACK);
 8001f70:	2300      	movs	r3, #0
 8001f72:	9301      	str	r3, [sp, #4]
 8001f74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f78:	9300      	str	r3, [sp, #0]
 8001f7a:	f240 131d 	movw	r3, #285	; 0x11d
 8001f7e:	224b      	movs	r2, #75	; 0x4b
 8001f80:	4915      	ldr	r1, [pc, #84]	; (8001fd8 <getLCD+0x2c0>)
 8001f82:	68b8      	ldr	r0, [r7, #8]
 8001f84:	f7ff f8a7 	bl	80010d6 <ILI9341_DrawText>
	  ILI9341_DrawHLine(0, 300, 240, DARKGREEN);
 8001f88:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8001f8c:	22f0      	movs	r2, #240	; 0xf0
 8001f8e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001f92:	2000      	movs	r0, #0
 8001f94:	f7ff fcd6 	bl	8001944 <ILI9341_DrawHLine>
	  ILI9341_DrawHLine(0, 300, 240, DARKGREEN);
 8001f98:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8001f9c:	22f0      	movs	r2, #240	; 0xf0
 8001f9e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001fa2:	2000      	movs	r0, #0
 8001fa4:	f7ff fcce 	bl	8001944 <ILI9341_DrawHLine>
	  ILI9341_DrawText("Copyright : www.pens.ac.id", FONT2, 30, 305, WHITE, BLACK);
 8001fa8:	2300      	movs	r3, #0
 8001faa:	9301      	str	r3, [sp, #4]
 8001fac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fb0:	9300      	str	r3, [sp, #0]
 8001fb2:	f240 1331 	movw	r3, #305	; 0x131
 8001fb6:	221e      	movs	r2, #30
 8001fb8:	4907      	ldr	r1, [pc, #28]	; (8001fd8 <getLCD+0x2c0>)
 8001fba:	480f      	ldr	r0, [pc, #60]	; (8001ff8 <getLCD+0x2e0>)
 8001fbc:	f7ff f88b 	bl	80010d6 <ILI9341_DrawText>
}
 8001fc0:	bf00      	nop
 8001fc2:	3710      	adds	r7, #16
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	0800d7d4 	.word	0x0800d7d4
 8001fcc:	0800ce48 	.word	0x0800ce48
 8001fd0:	0800ce54 	.word	0x0800ce54
 8001fd4:	0800ce60 	.word	0x0800ce60
 8001fd8:	0800cff0 	.word	0x0800cff0
 8001fdc:	0800ce6c 	.word	0x0800ce6c
 8001fe0:	0800ce90 	.word	0x0800ce90
 8001fe4:	0800cea0 	.word	0x0800cea0
 8001fe8:	0800ceb8 	.word	0x0800ceb8
 8001fec:	0800cec8 	.word	0x0800cec8
 8001ff0:	0800ced4 	.word	0x0800ced4
 8001ff4:	0800cee0 	.word	0x0800cee0
 8001ff8:	0800cef0 	.word	0x0800cef0

08001ffc <get_ampere_volt>:
		 //printf("%02d:%02d:%02d || %02d-%02d-%2d\r\n",jam, menit, detik,tanggal, bulan, 2000 + tahun);
	}
}
/**Fungsi ini digunakan untuk membaca baterai
  */
void get_ampere_volt(void){
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
	setCalibration_16V_400mA();
 8002002:	f7ff fd77 	bl	8001af4 <setCalibration_16V_400mA>
	tegangan = getBusVoltage_V();
 8002006:	f7ff fddf 	bl	8001bc8 <getBusVoltage_V>
 800200a:	eef0 7a40 	vmov.f32	s15, s0
 800200e:	4b3d      	ldr	r3, [pc, #244]	; (8002104 <get_ampere_volt+0x108>)
 8002010:	edc3 7a00 	vstr	s15, [r3]
	Vshunt = getPower_mW();
 8002014:	f7ff fe1e 	bl	8001c54 <getPower_mW>
 8002018:	eef0 7a40 	vmov.f32	s15, s0
 800201c:	4b3a      	ldr	r3, [pc, #232]	; (8002108 <get_ampere_volt+0x10c>)
 800201e:	edc3 7a00 	vstr	s15, [r3]
	arus = getCurrent_mA() * (-1);
 8002022:	f7ff fdf5 	bl	8001c10 <getCurrent_mA>
 8002026:	eef0 7a40 	vmov.f32	s15, s0
 800202a:	eef1 7a67 	vneg.f32	s15, s15
 800202e:	4b37      	ldr	r3, [pc, #220]	; (800210c <get_ampere_volt+0x110>)
 8002030:	edc3 7a00 	vstr	s15, [r3]
	float maxVoltage = 12.4;
 8002034:	4b36      	ldr	r3, [pc, #216]	; (8002110 <get_ampere_volt+0x114>)
 8002036:	607b      	str	r3, [r7, #4]
	float minVoltage = 11.2;
 8002038:	4b36      	ldr	r3, [pc, #216]	; (8002114 <get_ampere_volt+0x118>)
 800203a:	603b      	str	r3, [r7, #0]
	batteryPercentage = (tegangan - minVoltage) / (maxVoltage - minVoltage) * 100;
 800203c:	4b31      	ldr	r3, [pc, #196]	; (8002104 <get_ampere_volt+0x108>)
 800203e:	ed93 7a00 	vldr	s14, [r3]
 8002042:	edd7 7a00 	vldr	s15, [r7]
 8002046:	ee77 6a67 	vsub.f32	s13, s14, s15
 800204a:	ed97 7a01 	vldr	s14, [r7, #4]
 800204e:	edd7 7a00 	vldr	s15, [r7]
 8002052:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002056:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800205a:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002118 <get_ampere_volt+0x11c>
 800205e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002062:	4b2e      	ldr	r3, [pc, #184]	; (800211c <get_ampere_volt+0x120>)
 8002064:	edc3 7a00 	vstr	s15, [r3]
	if (batteryPercentage > 100) batteryPercentage = 100;
 8002068:	4b2c      	ldr	r3, [pc, #176]	; (800211c <get_ampere_volt+0x120>)
 800206a:	edd3 7a00 	vldr	s15, [r3]
 800206e:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002118 <get_ampere_volt+0x11c>
 8002072:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800207a:	dd03      	ble.n	8002084 <get_ampere_volt+0x88>
 800207c:	4b27      	ldr	r3, [pc, #156]	; (800211c <get_ampere_volt+0x120>)
 800207e:	4a28      	ldr	r2, [pc, #160]	; (8002120 <get_ampere_volt+0x124>)
 8002080:	601a      	str	r2, [r3, #0]
 8002082:	e00b      	b.n	800209c <get_ampere_volt+0xa0>
	else if (batteryPercentage < 0) batteryPercentage = 0;
 8002084:	4b25      	ldr	r3, [pc, #148]	; (800211c <get_ampere_volt+0x120>)
 8002086:	edd3 7a00 	vldr	s15, [r3]
 800208a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800208e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002092:	d503      	bpl.n	800209c <get_ampere_volt+0xa0>
 8002094:	4b21      	ldr	r3, [pc, #132]	; (800211c <get_ampere_volt+0x120>)
 8002096:	f04f 0200 	mov.w	r2, #0
 800209a:	601a      	str	r2, [r3, #0]
	if (HAL_GetTick() - ina219_millis >= 500){
 800209c:	f001 fc88 	bl	80039b0 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	4b20      	ldr	r3, [pc, #128]	; (8002124 <get_ampere_volt+0x128>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80020ac:	d325      	bcc.n	80020fa <get_ampere_volt+0xfe>
		ina219_millis = HAL_GetTick();
 80020ae:	f001 fc7f 	bl	80039b0 <HAL_GetTick>
 80020b2:	4603      	mov	r3, r0
 80020b4:	4a1b      	ldr	r2, [pc, #108]	; (8002124 <get_ampere_volt+0x128>)
 80020b6:	6013      	str	r3, [r2, #0]
//		printf("Vbus: %.1f V| persen: %.1f percent | Ampere: %.1f mA\r\n",tegangan, batteryPercentage, arus);
		sprintf(volt, "%.4g", tegangan);
 80020b8:	4b12      	ldr	r3, [pc, #72]	; (8002104 <get_ampere_volt+0x108>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4618      	mov	r0, r3
 80020be:	f7fe fa43 	bl	8000548 <__aeabi_f2d>
 80020c2:	4602      	mov	r2, r0
 80020c4:	460b      	mov	r3, r1
 80020c6:	4918      	ldr	r1, [pc, #96]	; (8002128 <get_ampere_volt+0x12c>)
 80020c8:	4818      	ldr	r0, [pc, #96]	; (800212c <get_ampere_volt+0x130>)
 80020ca:	f007 f8ed 	bl	80092a8 <siprintf>
		sprintf(amper, "%.5g", arus);
 80020ce:	4b0f      	ldr	r3, [pc, #60]	; (800210c <get_ampere_volt+0x110>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7fe fa38 	bl	8000548 <__aeabi_f2d>
 80020d8:	4602      	mov	r2, r0
 80020da:	460b      	mov	r3, r1
 80020dc:	4914      	ldr	r1, [pc, #80]	; (8002130 <get_ampere_volt+0x134>)
 80020de:	4815      	ldr	r0, [pc, #84]	; (8002134 <get_ampere_volt+0x138>)
 80020e0:	f007 f8e2 	bl	80092a8 <siprintf>
		sprintf(persen, "%.2g", batteryPercentage);
 80020e4:	4b0d      	ldr	r3, [pc, #52]	; (800211c <get_ampere_volt+0x120>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7fe fa2d 	bl	8000548 <__aeabi_f2d>
 80020ee:	4602      	mov	r2, r0
 80020f0:	460b      	mov	r3, r1
 80020f2:	4911      	ldr	r1, [pc, #68]	; (8002138 <get_ampere_volt+0x13c>)
 80020f4:	4811      	ldr	r0, [pc, #68]	; (800213c <get_ampere_volt+0x140>)
 80020f6:	f007 f8d7 	bl	80092a8 <siprintf>
//
	}
}
 80020fa:	bf00      	nop
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	20000a20 	.word	0x20000a20
 8002108:	20000a24 	.word	0x20000a24
 800210c:	20000a28 	.word	0x20000a28
 8002110:	41466666 	.word	0x41466666
 8002114:	41333333 	.word	0x41333333
 8002118:	42c80000 	.word	0x42c80000
 800211c:	20000a2c 	.word	0x20000a2c
 8002120:	42c80000 	.word	0x42c80000
 8002124:	20000a14 	.word	0x20000a14
 8002128:	0800cf0c 	.word	0x0800cf0c
 800212c:	20003608 	.word	0x20003608
 8002130:	0800cf14 	.word	0x0800cf14
 8002134:	20002ca8 	.word	0x20002ca8
 8002138:	0800cf1c 	.word	0x0800cf1c
 800213c:	20002cdc 	.word	0x20002cdc

08002140 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002146:	f001 fbcd 	bl	80038e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800214a:	f000 f8cd 	bl	80022e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800214e:	f000 facd 	bl	80026ec <MX_GPIO_Init>
  MX_DMA_Init();
 8002152:	f000 fa8d 	bl	8002670 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002156:	f000 fa0d 	bl	8002574 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800215a:	f000 fa35 	bl	80025c8 <MX_USART2_UART_Init>
  MX_RTC_Init();
 800215e:	f000 f973 	bl	8002448 <MX_RTC_Init>
  MX_I2C1_Init();
 8002162:	f000 f943 	bl	80023ec <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8002166:	f000 fa59 	bl	800261c <MX_USART3_UART_Init>
  MX_SPI1_Init();
 800216a:	f000 f9cd 	bl	8002508 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart1);
 800216e:	4848      	ldr	r0, [pc, #288]	; (8002290 <main+0x150>)
 8002170:	f000 ffda 	bl	8003128 <RetargetInit>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, RxBuf, RxBuf_SIZE);
 8002174:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002178:	4946      	ldr	r1, [pc, #280]	; (8002294 <main+0x154>)
 800217a:	4847      	ldr	r0, [pc, #284]	; (8002298 <main+0x158>)
 800217c:	f005 f84d 	bl	800721a <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8002180:	4b46      	ldr	r3, [pc, #280]	; (800229c <main+0x15c>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	4b45      	ldr	r3, [pc, #276]	; (800229c <main+0x15c>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f022 0208 	bic.w	r2, r2, #8
 800218e:	601a      	str	r2, [r3, #0]
  HAL_UARTEx_ReceiveToIdle_DMA(&huart3, RxBuf_3, RxBuf_SIZE);
 8002190:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002194:	4942      	ldr	r1, [pc, #264]	; (80022a0 <main+0x160>)
 8002196:	4843      	ldr	r0, [pc, #268]	; (80022a4 <main+0x164>)
 8002198:	f005 f83f 	bl	800721a <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 800219c:	4b42      	ldr	r3, [pc, #264]	; (80022a8 <main+0x168>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	4b41      	ldr	r3, [pc, #260]	; (80022a8 <main+0x168>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f022 0208 	bic.w	r2, r2, #8
 80021aa:	601a      	str	r2, [r3, #0]
  //set m0 m1
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);
 80021ac:	2200      	movs	r2, #0
 80021ae:	2104      	movs	r1, #4
 80021b0:	483e      	ldr	r0, [pc, #248]	; (80022ac <main+0x16c>)
 80021b2:	f002 faf5 	bl	80047a0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, 0);
 80021b6:	2200      	movs	r2, #0
 80021b8:	2108      	movs	r1, #8
 80021ba:	483c      	ldr	r0, [pc, #240]	; (80022ac <main+0x16c>)
 80021bc:	f002 faf0 	bl	80047a0 <HAL_GPIO_WritePin>
  if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0x32F2){
 80021c0:	2101      	movs	r1, #1
 80021c2:	483b      	ldr	r0, [pc, #236]	; (80022b0 <main+0x170>)
 80021c4:	f004 fab5 	bl	8006732 <HAL_RTCEx_BKUPRead>
 80021c8:	4603      	mov	r3, r0
 80021ca:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d001      	beq.n	80021d6 <main+0x96>
	  set_time();
 80021d2:	f7ff fd61 	bl	8001c98 <set_time>
  }
  //begin LCD
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, 1);
 80021d6:	2201      	movs	r2, #1
 80021d8:	2110      	movs	r1, #16
 80021da:	4836      	ldr	r0, [pc, #216]	; (80022b4 <main+0x174>)
 80021dc:	f002 fae0 	bl	80047a0 <HAL_GPIO_WritePin>
  ILI9341_Init();
 80021e0:	f7ff f8d6 	bl	8001390 <ILI9341_Init>
  ILI9341_FillScreen(BLACK);
 80021e4:	2000      	movs	r0, #0
 80021e6:	f7ff fac5 	bl	8001774 <ILI9341_FillScreen>
  ILI9341_SetRotation(SCREEN_VERTICAL_2);
 80021ea:	2002      	movs	r0, #2
 80021ec:	f7ff f9da 	bl	80015a4 <ILI9341_SetRotation>
  //begin keypad
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, 1);
 80021f0:	2201      	movs	r2, #1
 80021f2:	2110      	movs	r1, #16
 80021f4:	482d      	ldr	r0, [pc, #180]	; (80022ac <main+0x16c>)
 80021f6:	f002 fad3 	bl	80047a0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, 1);
 80021fa:	2201      	movs	r2, #1
 80021fc:	2120      	movs	r1, #32
 80021fe:	482b      	ldr	r0, [pc, #172]	; (80022ac <main+0x16c>)
 8002200:	f002 face 	bl	80047a0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, 1);
 8002204:	2201      	movs	r2, #1
 8002206:	2140      	movs	r1, #64	; 0x40
 8002208:	4828      	ldr	r0, [pc, #160]	; (80022ac <main+0x16c>)
 800220a:	f002 fac9 	bl	80047a0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, 1);
 800220e:	2201      	movs	r2, #1
 8002210:	2180      	movs	r1, #128	; 0x80
 8002212:	4826      	ldr	r0, [pc, #152]	; (80022ac <main+0x16c>)
 8002214:	f002 fac4 	bl	80047a0 <HAL_GPIO_WritePin>
  //Millis second set
  rtc_millis = HAL_GetTick();
 8002218:	f001 fbca 	bl	80039b0 <HAL_GetTick>
 800221c:	4603      	mov	r3, r0
 800221e:	4a26      	ldr	r2, [pc, #152]	; (80022b8 <main+0x178>)
 8002220:	6013      	str	r3, [r2, #0]
  ina219_millis = HAL_GetTick();
 8002222:	f001 fbc5 	bl	80039b0 <HAL_GetTick>
 8002226:	4603      	mov	r3, r0
 8002228:	4a24      	ldr	r2, [pc, #144]	; (80022bc <main+0x17c>)
 800222a:	6013      	str	r3, [r2, #0]
  //kirim data dummy  *node,lat,long,data,jam, menit, detik, tegangan
  ukuranstring = sprintf((char*)buff_s, "*A,latitude,longitude,data,jam,menit,detik,baterai\r\n");
 800222c:	4924      	ldr	r1, [pc, #144]	; (80022c0 <main+0x180>)
 800222e:	4825      	ldr	r0, [pc, #148]	; (80022c4 <main+0x184>)
 8002230:	f007 f83a 	bl	80092a8 <siprintf>
 8002234:	4603      	mov	r3, r0
 8002236:	b29a      	uxth	r2, r3
 8002238:	4b23      	ldr	r3, [pc, #140]	; (80022c8 <main+0x188>)
 800223a:	801a      	strh	r2, [r3, #0]
  HAL_UART_Transmit(&huart2, buff_s, ukuranstring, 100);
 800223c:	4b22      	ldr	r3, [pc, #136]	; (80022c8 <main+0x188>)
 800223e:	881a      	ldrh	r2, [r3, #0]
 8002240:	2364      	movs	r3, #100	; 0x64
 8002242:	4920      	ldr	r1, [pc, #128]	; (80022c4 <main+0x184>)
 8002244:	4814      	ldr	r0, [pc, #80]	; (8002298 <main+0x158>)
 8002246:	f004 feb4 	bl	8006fb2 <HAL_UART_Transmit>
  led_reaction(100, 600);
 800224a:	f44f 7116 	mov.w	r1, #600	; 0x258
 800224e:	2064      	movs	r0, #100	; 0x64
 8002250:	f000 fdb2 	bl	8002db8 <led_reaction>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //get_time();
//	  get_keypad(keyPressed);
	  get_ampere_volt();
 8002254:	f7ff fed2 	bl	8001ffc <get_ampere_volt>
	  getLCD(lat, lon, volt, amper, strcat(persen, "%"));
 8002258:	481c      	ldr	r0, [pc, #112]	; (80022cc <main+0x18c>)
 800225a:	f7fe f809 	bl	8000270 <strlen>
 800225e:	4603      	mov	r3, r0
 8002260:	461a      	mov	r2, r3
 8002262:	4b1a      	ldr	r3, [pc, #104]	; (80022cc <main+0x18c>)
 8002264:	4413      	add	r3, r2
 8002266:	491a      	ldr	r1, [pc, #104]	; (80022d0 <main+0x190>)
 8002268:	461a      	mov	r2, r3
 800226a:	460b      	mov	r3, r1
 800226c:	881b      	ldrh	r3, [r3, #0]
 800226e:	8013      	strh	r3, [r2, #0]
 8002270:	4b16      	ldr	r3, [pc, #88]	; (80022cc <main+0x18c>)
 8002272:	9300      	str	r3, [sp, #0]
 8002274:	4b17      	ldr	r3, [pc, #92]	; (80022d4 <main+0x194>)
 8002276:	4a18      	ldr	r2, [pc, #96]	; (80022d8 <main+0x198>)
 8002278:	4918      	ldr	r1, [pc, #96]	; (80022dc <main+0x19c>)
 800227a:	4819      	ldr	r0, [pc, #100]	; (80022e0 <main+0x1a0>)
 800227c:	f7ff fd4c 	bl	8001d18 <getLCD>
	  printf("%s", lat);
 8002280:	4917      	ldr	r1, [pc, #92]	; (80022e0 <main+0x1a0>)
 8002282:	4818      	ldr	r0, [pc, #96]	; (80022e4 <main+0x1a4>)
 8002284:	f006 ff2c 	bl	80090e0 <iprintf>
	  get_gps();
 8002288:	f000 fdfe 	bl	8002e88 <get_gps>
	  get_ampere_volt();
 800228c:	e7e2      	b.n	8002254 <main+0x114>
 800228e:	bf00      	nop
 8002290:	20002d10 	.word	0x20002d10
 8002294:	20002db0 	.word	0x20002db0
 8002298:	2000363c 	.word	0x2000363c
 800229c:	20002a70 	.word	0x20002a70
 80022a0:	20000604 	.word	0x20000604
 80022a4:	20002bf8 	.word	0x20002bf8
 80022a8:	20002b98 	.word	0x20002b98
 80022ac:	40020c00 	.word	0x40020c00
 80022b0:	20002d74 	.word	0x20002d74
 80022b4:	40020800 	.word	0x40020800
 80022b8:	20000a10 	.word	0x20000a10
 80022bc:	20000a14 	.word	0x20000a14
 80022c0:	0800cf24 	.word	0x0800cf24
 80022c4:	20002ad0 	.word	0x20002ad0
 80022c8:	20002dac 	.word	0x20002dac
 80022cc:	20002cdc 	.word	0x20002cdc
 80022d0:	0800cf5c 	.word	0x0800cf5c
 80022d4:	20002ca8 	.word	0x20002ca8
 80022d8:	20003608 	.word	0x20003608
 80022dc:	20002d98 	.word	0x20002d98
 80022e0:	200036ec 	.word	0x200036ec
 80022e4:	0800cf60 	.word	0x0800cf60

080022e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b098      	sub	sp, #96	; 0x60
 80022ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80022f2:	2230      	movs	r2, #48	; 0x30
 80022f4:	2100      	movs	r1, #0
 80022f6:	4618      	mov	r0, r3
 80022f8:	f006 f870 	bl	80083dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022fc:	f107 031c 	add.w	r3, r7, #28
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]
 8002304:	605a      	str	r2, [r3, #4]
 8002306:	609a      	str	r2, [r3, #8]
 8002308:	60da      	str	r2, [r3, #12]
 800230a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800230c:	f107 030c 	add.w	r3, r7, #12
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]
 8002314:	605a      	str	r2, [r3, #4]
 8002316:	609a      	str	r2, [r3, #8]
 8002318:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800231a:	2300      	movs	r3, #0
 800231c:	60bb      	str	r3, [r7, #8]
 800231e:	4b31      	ldr	r3, [pc, #196]	; (80023e4 <SystemClock_Config+0xfc>)
 8002320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002322:	4a30      	ldr	r2, [pc, #192]	; (80023e4 <SystemClock_Config+0xfc>)
 8002324:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002328:	6413      	str	r3, [r2, #64]	; 0x40
 800232a:	4b2e      	ldr	r3, [pc, #184]	; (80023e4 <SystemClock_Config+0xfc>)
 800232c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002332:	60bb      	str	r3, [r7, #8]
 8002334:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002336:	2300      	movs	r3, #0
 8002338:	607b      	str	r3, [r7, #4]
 800233a:	4b2b      	ldr	r3, [pc, #172]	; (80023e8 <SystemClock_Config+0x100>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a2a      	ldr	r2, [pc, #168]	; (80023e8 <SystemClock_Config+0x100>)
 8002340:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002344:	6013      	str	r3, [r2, #0]
 8002346:	4b28      	ldr	r3, [pc, #160]	; (80023e8 <SystemClock_Config+0x100>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800234e:	607b      	str	r3, [r7, #4]
 8002350:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002352:	2309      	movs	r3, #9
 8002354:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002356:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800235a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800235c:	2301      	movs	r3, #1
 800235e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002360:	2302      	movs	r3, #2
 8002362:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002364:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002368:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800236a:	2304      	movs	r3, #4
 800236c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 800236e:	23a8      	movs	r3, #168	; 0xa8
 8002370:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002372:	2302      	movs	r3, #2
 8002374:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002376:	2304      	movs	r3, #4
 8002378:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800237a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800237e:	4618      	mov	r0, r3
 8002380:	f003 fa00 	bl	8005784 <HAL_RCC_OscConfig>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800238a:	f000 fec7 	bl	800311c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800238e:	230f      	movs	r3, #15
 8002390:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002392:	2302      	movs	r3, #2
 8002394:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002396:	2300      	movs	r3, #0
 8002398:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800239a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800239e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80023a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023a4:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80023a6:	f107 031c 	add.w	r3, r7, #28
 80023aa:	2105      	movs	r1, #5
 80023ac:	4618      	mov	r0, r3
 80023ae:	f003 fc61 	bl	8005c74 <HAL_RCC_ClockConfig>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d001      	beq.n	80023bc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80023b8:	f000 feb0 	bl	800311c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80023bc:	2302      	movs	r3, #2
 80023be:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80023c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023c4:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023c6:	f107 030c 	add.w	r3, r7, #12
 80023ca:	4618      	mov	r0, r3
 80023cc:	f003 fe4e 	bl	800606c <HAL_RCCEx_PeriphCLKConfig>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80023d6:	f000 fea1 	bl	800311c <Error_Handler>
  }
}
 80023da:	bf00      	nop
 80023dc:	3760      	adds	r7, #96	; 0x60
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	40023800 	.word	0x40023800
 80023e8:	40007000 	.word	0x40007000

080023ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80023f0:	4b12      	ldr	r3, [pc, #72]	; (800243c <MX_I2C1_Init+0x50>)
 80023f2:	4a13      	ldr	r2, [pc, #76]	; (8002440 <MX_I2C1_Init+0x54>)
 80023f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80023f6:	4b11      	ldr	r3, [pc, #68]	; (800243c <MX_I2C1_Init+0x50>)
 80023f8:	4a12      	ldr	r2, [pc, #72]	; (8002444 <MX_I2C1_Init+0x58>)
 80023fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80023fc:	4b0f      	ldr	r3, [pc, #60]	; (800243c <MX_I2C1_Init+0x50>)
 80023fe:	2200      	movs	r2, #0
 8002400:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002402:	4b0e      	ldr	r3, [pc, #56]	; (800243c <MX_I2C1_Init+0x50>)
 8002404:	2200      	movs	r2, #0
 8002406:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002408:	4b0c      	ldr	r3, [pc, #48]	; (800243c <MX_I2C1_Init+0x50>)
 800240a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800240e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002410:	4b0a      	ldr	r3, [pc, #40]	; (800243c <MX_I2C1_Init+0x50>)
 8002412:	2200      	movs	r2, #0
 8002414:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002416:	4b09      	ldr	r3, [pc, #36]	; (800243c <MX_I2C1_Init+0x50>)
 8002418:	2200      	movs	r2, #0
 800241a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800241c:	4b07      	ldr	r3, [pc, #28]	; (800243c <MX_I2C1_Init+0x50>)
 800241e:	2200      	movs	r2, #0
 8002420:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002422:	4b06      	ldr	r3, [pc, #24]	; (800243c <MX_I2C1_Init+0x50>)
 8002424:	2200      	movs	r2, #0
 8002426:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002428:	4804      	ldr	r0, [pc, #16]	; (800243c <MX_I2C1_Init+0x50>)
 800242a:	f002 f9eb 	bl	8004804 <HAL_I2C_Init>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002434:	f000 fe72 	bl	800311c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002438:	bf00      	nop
 800243a:	bd80      	pop	{r7, pc}
 800243c:	20002c3c 	.word	0x20002c3c
 8002440:	40005400 	.word	0x40005400
 8002444:	000186a0 	.word	0x000186a0

08002448 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */
	//JANGAN LUPA DIKOMEN YA
  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800244e:	1d3b      	adds	r3, r7, #4
 8002450:	2200      	movs	r2, #0
 8002452:	601a      	str	r2, [r3, #0]
 8002454:	605a      	str	r2, [r3, #4]
 8002456:	609a      	str	r2, [r3, #8]
 8002458:	60da      	str	r2, [r3, #12]
 800245a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800245c:	2300      	movs	r3, #0
 800245e:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002460:	4b27      	ldr	r3, [pc, #156]	; (8002500 <MX_RTC_Init+0xb8>)
 8002462:	4a28      	ldr	r2, [pc, #160]	; (8002504 <MX_RTC_Init+0xbc>)
 8002464:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002466:	4b26      	ldr	r3, [pc, #152]	; (8002500 <MX_RTC_Init+0xb8>)
 8002468:	2200      	movs	r2, #0
 800246a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800246c:	4b24      	ldr	r3, [pc, #144]	; (8002500 <MX_RTC_Init+0xb8>)
 800246e:	227f      	movs	r2, #127	; 0x7f
 8002470:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002472:	4b23      	ldr	r3, [pc, #140]	; (8002500 <MX_RTC_Init+0xb8>)
 8002474:	22ff      	movs	r2, #255	; 0xff
 8002476:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002478:	4b21      	ldr	r3, [pc, #132]	; (8002500 <MX_RTC_Init+0xb8>)
 800247a:	2200      	movs	r2, #0
 800247c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800247e:	4b20      	ldr	r3, [pc, #128]	; (8002500 <MX_RTC_Init+0xb8>)
 8002480:	2200      	movs	r2, #0
 8002482:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002484:	4b1e      	ldr	r3, [pc, #120]	; (8002500 <MX_RTC_Init+0xb8>)
 8002486:	2200      	movs	r2, #0
 8002488:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800248a:	481d      	ldr	r0, [pc, #116]	; (8002500 <MX_RTC_Init+0xb8>)
 800248c:	f003 fed0 	bl	8006230 <HAL_RTC_Init>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8002496:	f000 fe41 	bl	800311c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x11;
 800249a:	2311      	movs	r3, #17
 800249c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x35;
 800249e:	2335      	movs	r3, #53	; 0x35
 80024a0:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x5;
 80024a2:	2305      	movs	r3, #5
 80024a4:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80024a6:	2300      	movs	r3, #0
 80024a8:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80024aa:	2300      	movs	r3, #0
 80024ac:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80024ae:	1d3b      	adds	r3, r7, #4
 80024b0:	2201      	movs	r2, #1
 80024b2:	4619      	mov	r1, r3
 80024b4:	4812      	ldr	r0, [pc, #72]	; (8002500 <MX_RTC_Init+0xb8>)
 80024b6:	f003 ff4c 	bl	8006352 <HAL_RTC_SetTime>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d001      	beq.n	80024c4 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80024c0:	f000 fe2c 	bl	800311c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80024c4:	2301      	movs	r3, #1
 80024c6:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_OCTOBER;
 80024c8:	2310      	movs	r3, #16
 80024ca:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x18;
 80024cc:	2318      	movs	r3, #24
 80024ce:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x21;
 80024d0:	2321      	movs	r3, #33	; 0x21
 80024d2:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80024d4:	463b      	mov	r3, r7
 80024d6:	2201      	movs	r2, #1
 80024d8:	4619      	mov	r1, r3
 80024da:	4809      	ldr	r0, [pc, #36]	; (8002500 <MX_RTC_Init+0xb8>)
 80024dc:	f003 fff6 	bl	80064cc <HAL_RTC_SetDate>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80024e6:	f000 fe19 	bl	800311c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
	  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);
 80024ea:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80024ee:	2101      	movs	r1, #1
 80024f0:	4803      	ldr	r0, [pc, #12]	; (8002500 <MX_RTC_Init+0xb8>)
 80024f2:	f004 f904 	bl	80066fe <HAL_RTCEx_BKUPWrite>
  /* USER CODE END RTC_Init 2 */

}
 80024f6:	bf00      	nop
 80024f8:	3718      	adds	r7, #24
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	20002d74 	.word	0x20002d74
 8002504:	40002800 	.word	0x40002800

08002508 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800250c:	4b17      	ldr	r3, [pc, #92]	; (800256c <MX_SPI1_Init+0x64>)
 800250e:	4a18      	ldr	r2, [pc, #96]	; (8002570 <MX_SPI1_Init+0x68>)
 8002510:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002512:	4b16      	ldr	r3, [pc, #88]	; (800256c <MX_SPI1_Init+0x64>)
 8002514:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002518:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800251a:	4b14      	ldr	r3, [pc, #80]	; (800256c <MX_SPI1_Init+0x64>)
 800251c:	2200      	movs	r2, #0
 800251e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002520:	4b12      	ldr	r3, [pc, #72]	; (800256c <MX_SPI1_Init+0x64>)
 8002522:	2200      	movs	r2, #0
 8002524:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002526:	4b11      	ldr	r3, [pc, #68]	; (800256c <MX_SPI1_Init+0x64>)
 8002528:	2200      	movs	r2, #0
 800252a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800252c:	4b0f      	ldr	r3, [pc, #60]	; (800256c <MX_SPI1_Init+0x64>)
 800252e:	2200      	movs	r2, #0
 8002530:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002532:	4b0e      	ldr	r3, [pc, #56]	; (800256c <MX_SPI1_Init+0x64>)
 8002534:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002538:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800253a:	4b0c      	ldr	r3, [pc, #48]	; (800256c <MX_SPI1_Init+0x64>)
 800253c:	2208      	movs	r2, #8
 800253e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002540:	4b0a      	ldr	r3, [pc, #40]	; (800256c <MX_SPI1_Init+0x64>)
 8002542:	2200      	movs	r2, #0
 8002544:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002546:	4b09      	ldr	r3, [pc, #36]	; (800256c <MX_SPI1_Init+0x64>)
 8002548:	2200      	movs	r2, #0
 800254a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800254c:	4b07      	ldr	r3, [pc, #28]	; (800256c <MX_SPI1_Init+0x64>)
 800254e:	2200      	movs	r2, #0
 8002550:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002552:	4b06      	ldr	r3, [pc, #24]	; (800256c <MX_SPI1_Init+0x64>)
 8002554:	220a      	movs	r2, #10
 8002556:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002558:	4804      	ldr	r0, [pc, #16]	; (800256c <MX_SPI1_Init+0x64>)
 800255a:	f004 f902 	bl	8006762 <HAL_SPI_Init>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002564:	f000 fdda 	bl	800311c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002568:	bf00      	nop
 800256a:	bd80      	pop	{r7, pc}
 800256c:	200035b0 	.word	0x200035b0
 8002570:	40013000 	.word	0x40013000

08002574 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002578:	4b11      	ldr	r3, [pc, #68]	; (80025c0 <MX_USART1_UART_Init+0x4c>)
 800257a:	4a12      	ldr	r2, [pc, #72]	; (80025c4 <MX_USART1_UART_Init+0x50>)
 800257c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800257e:	4b10      	ldr	r3, [pc, #64]	; (80025c0 <MX_USART1_UART_Init+0x4c>)
 8002580:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002584:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002586:	4b0e      	ldr	r3, [pc, #56]	; (80025c0 <MX_USART1_UART_Init+0x4c>)
 8002588:	2200      	movs	r2, #0
 800258a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800258c:	4b0c      	ldr	r3, [pc, #48]	; (80025c0 <MX_USART1_UART_Init+0x4c>)
 800258e:	2200      	movs	r2, #0
 8002590:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002592:	4b0b      	ldr	r3, [pc, #44]	; (80025c0 <MX_USART1_UART_Init+0x4c>)
 8002594:	2200      	movs	r2, #0
 8002596:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002598:	4b09      	ldr	r3, [pc, #36]	; (80025c0 <MX_USART1_UART_Init+0x4c>)
 800259a:	220c      	movs	r2, #12
 800259c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800259e:	4b08      	ldr	r3, [pc, #32]	; (80025c0 <MX_USART1_UART_Init+0x4c>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80025a4:	4b06      	ldr	r3, [pc, #24]	; (80025c0 <MX_USART1_UART_Init+0x4c>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80025aa:	4805      	ldr	r0, [pc, #20]	; (80025c0 <MX_USART1_UART_Init+0x4c>)
 80025ac:	f004 fcb4 	bl	8006f18 <HAL_UART_Init>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80025b6:	f000 fdb1 	bl	800311c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80025ba:	bf00      	nop
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	20002d10 	.word	0x20002d10
 80025c4:	40011000 	.word	0x40011000

080025c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80025cc:	4b11      	ldr	r3, [pc, #68]	; (8002614 <MX_USART2_UART_Init+0x4c>)
 80025ce:	4a12      	ldr	r2, [pc, #72]	; (8002618 <MX_USART2_UART_Init+0x50>)
 80025d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80025d2:	4b10      	ldr	r3, [pc, #64]	; (8002614 <MX_USART2_UART_Init+0x4c>)
 80025d4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80025d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80025da:	4b0e      	ldr	r3, [pc, #56]	; (8002614 <MX_USART2_UART_Init+0x4c>)
 80025dc:	2200      	movs	r2, #0
 80025de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80025e0:	4b0c      	ldr	r3, [pc, #48]	; (8002614 <MX_USART2_UART_Init+0x4c>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80025e6:	4b0b      	ldr	r3, [pc, #44]	; (8002614 <MX_USART2_UART_Init+0x4c>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80025ec:	4b09      	ldr	r3, [pc, #36]	; (8002614 <MX_USART2_UART_Init+0x4c>)
 80025ee:	220c      	movs	r2, #12
 80025f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025f2:	4b08      	ldr	r3, [pc, #32]	; (8002614 <MX_USART2_UART_Init+0x4c>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80025f8:	4b06      	ldr	r3, [pc, #24]	; (8002614 <MX_USART2_UART_Init+0x4c>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80025fe:	4805      	ldr	r0, [pc, #20]	; (8002614 <MX_USART2_UART_Init+0x4c>)
 8002600:	f004 fc8a 	bl	8006f18 <HAL_UART_Init>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800260a:	f000 fd87 	bl	800311c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800260e:	bf00      	nop
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	2000363c 	.word	0x2000363c
 8002618:	40004400 	.word	0x40004400

0800261c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002620:	4b11      	ldr	r3, [pc, #68]	; (8002668 <MX_USART3_UART_Init+0x4c>)
 8002622:	4a12      	ldr	r2, [pc, #72]	; (800266c <MX_USART3_UART_Init+0x50>)
 8002624:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002626:	4b10      	ldr	r3, [pc, #64]	; (8002668 <MX_USART3_UART_Init+0x4c>)
 8002628:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800262c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800262e:	4b0e      	ldr	r3, [pc, #56]	; (8002668 <MX_USART3_UART_Init+0x4c>)
 8002630:	2200      	movs	r2, #0
 8002632:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002634:	4b0c      	ldr	r3, [pc, #48]	; (8002668 <MX_USART3_UART_Init+0x4c>)
 8002636:	2200      	movs	r2, #0
 8002638:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800263a:	4b0b      	ldr	r3, [pc, #44]	; (8002668 <MX_USART3_UART_Init+0x4c>)
 800263c:	2200      	movs	r2, #0
 800263e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002640:	4b09      	ldr	r3, [pc, #36]	; (8002668 <MX_USART3_UART_Init+0x4c>)
 8002642:	220c      	movs	r2, #12
 8002644:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002646:	4b08      	ldr	r3, [pc, #32]	; (8002668 <MX_USART3_UART_Init+0x4c>)
 8002648:	2200      	movs	r2, #0
 800264a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800264c:	4b06      	ldr	r3, [pc, #24]	; (8002668 <MX_USART3_UART_Init+0x4c>)
 800264e:	2200      	movs	r2, #0
 8002650:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002652:	4805      	ldr	r0, [pc, #20]	; (8002668 <MX_USART3_UART_Init+0x4c>)
 8002654:	f004 fc60 	bl	8006f18 <HAL_UART_Init>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800265e:	f000 fd5d 	bl	800311c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002662:	bf00      	nop
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	20002bf8 	.word	0x20002bf8
 800266c:	40004800 	.word	0x40004800

08002670 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002676:	2300      	movs	r3, #0
 8002678:	607b      	str	r3, [r7, #4]
 800267a:	4b1b      	ldr	r3, [pc, #108]	; (80026e8 <MX_DMA_Init+0x78>)
 800267c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267e:	4a1a      	ldr	r2, [pc, #104]	; (80026e8 <MX_DMA_Init+0x78>)
 8002680:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002684:	6313      	str	r3, [r2, #48]	; 0x30
 8002686:	4b18      	ldr	r3, [pc, #96]	; (80026e8 <MX_DMA_Init+0x78>)
 8002688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800268e:	607b      	str	r3, [r7, #4]
 8002690:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002692:	2300      	movs	r3, #0
 8002694:	603b      	str	r3, [r7, #0]
 8002696:	4b14      	ldr	r3, [pc, #80]	; (80026e8 <MX_DMA_Init+0x78>)
 8002698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269a:	4a13      	ldr	r2, [pc, #76]	; (80026e8 <MX_DMA_Init+0x78>)
 800269c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80026a0:	6313      	str	r3, [r2, #48]	; 0x30
 80026a2:	4b11      	ldr	r3, [pc, #68]	; (80026e8 <MX_DMA_Init+0x78>)
 80026a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026aa:	603b      	str	r3, [r7, #0]
 80026ac:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80026ae:	2200      	movs	r2, #0
 80026b0:	2100      	movs	r1, #0
 80026b2:	200c      	movs	r0, #12
 80026b4:	f001 fa87 	bl	8003bc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80026b8:	200c      	movs	r0, #12
 80026ba:	f001 faa0 	bl	8003bfe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80026be:	2200      	movs	r2, #0
 80026c0:	2100      	movs	r1, #0
 80026c2:	2010      	movs	r0, #16
 80026c4:	f001 fa7f 	bl	8003bc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80026c8:	2010      	movs	r0, #16
 80026ca:	f001 fa98 	bl	8003bfe <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80026ce:	2200      	movs	r2, #0
 80026d0:	2100      	movs	r1, #0
 80026d2:	203b      	movs	r0, #59	; 0x3b
 80026d4:	f001 fa77 	bl	8003bc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80026d8:	203b      	movs	r0, #59	; 0x3b
 80026da:	f001 fa90 	bl	8003bfe <HAL_NVIC_EnableIRQ>

}
 80026de:	bf00      	nop
 80026e0:	3708      	adds	r7, #8
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	40023800 	.word	0x40023800

080026ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b08c      	sub	sp, #48	; 0x30
 80026f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026f2:	f107 031c 	add.w	r3, r7, #28
 80026f6:	2200      	movs	r2, #0
 80026f8:	601a      	str	r2, [r3, #0]
 80026fa:	605a      	str	r2, [r3, #4]
 80026fc:	609a      	str	r2, [r3, #8]
 80026fe:	60da      	str	r2, [r3, #12]
 8002700:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002702:	2300      	movs	r3, #0
 8002704:	61bb      	str	r3, [r7, #24]
 8002706:	4b5d      	ldr	r3, [pc, #372]	; (800287c <MX_GPIO_Init+0x190>)
 8002708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270a:	4a5c      	ldr	r2, [pc, #368]	; (800287c <MX_GPIO_Init+0x190>)
 800270c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002710:	6313      	str	r3, [r2, #48]	; 0x30
 8002712:	4b5a      	ldr	r3, [pc, #360]	; (800287c <MX_GPIO_Init+0x190>)
 8002714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800271a:	61bb      	str	r3, [r7, #24]
 800271c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800271e:	2300      	movs	r3, #0
 8002720:	617b      	str	r3, [r7, #20]
 8002722:	4b56      	ldr	r3, [pc, #344]	; (800287c <MX_GPIO_Init+0x190>)
 8002724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002726:	4a55      	ldr	r2, [pc, #340]	; (800287c <MX_GPIO_Init+0x190>)
 8002728:	f043 0304 	orr.w	r3, r3, #4
 800272c:	6313      	str	r3, [r2, #48]	; 0x30
 800272e:	4b53      	ldr	r3, [pc, #332]	; (800287c <MX_GPIO_Init+0x190>)
 8002730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002732:	f003 0304 	and.w	r3, r3, #4
 8002736:	617b      	str	r3, [r7, #20]
 8002738:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800273a:	2300      	movs	r3, #0
 800273c:	613b      	str	r3, [r7, #16]
 800273e:	4b4f      	ldr	r3, [pc, #316]	; (800287c <MX_GPIO_Init+0x190>)
 8002740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002742:	4a4e      	ldr	r2, [pc, #312]	; (800287c <MX_GPIO_Init+0x190>)
 8002744:	f043 0301 	orr.w	r3, r3, #1
 8002748:	6313      	str	r3, [r2, #48]	; 0x30
 800274a:	4b4c      	ldr	r3, [pc, #304]	; (800287c <MX_GPIO_Init+0x190>)
 800274c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	613b      	str	r3, [r7, #16]
 8002754:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002756:	2300      	movs	r3, #0
 8002758:	60fb      	str	r3, [r7, #12]
 800275a:	4b48      	ldr	r3, [pc, #288]	; (800287c <MX_GPIO_Init+0x190>)
 800275c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275e:	4a47      	ldr	r2, [pc, #284]	; (800287c <MX_GPIO_Init+0x190>)
 8002760:	f043 0310 	orr.w	r3, r3, #16
 8002764:	6313      	str	r3, [r2, #48]	; 0x30
 8002766:	4b45      	ldr	r3, [pc, #276]	; (800287c <MX_GPIO_Init+0x190>)
 8002768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276a:	f003 0310 	and.w	r3, r3, #16
 800276e:	60fb      	str	r3, [r7, #12]
 8002770:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002772:	2300      	movs	r3, #0
 8002774:	60bb      	str	r3, [r7, #8]
 8002776:	4b41      	ldr	r3, [pc, #260]	; (800287c <MX_GPIO_Init+0x190>)
 8002778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277a:	4a40      	ldr	r2, [pc, #256]	; (800287c <MX_GPIO_Init+0x190>)
 800277c:	f043 0302 	orr.w	r3, r3, #2
 8002780:	6313      	str	r3, [r2, #48]	; 0x30
 8002782:	4b3e      	ldr	r3, [pc, #248]	; (800287c <MX_GPIO_Init+0x190>)
 8002784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	60bb      	str	r3, [r7, #8]
 800278c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800278e:	2300      	movs	r3, #0
 8002790:	607b      	str	r3, [r7, #4]
 8002792:	4b3a      	ldr	r3, [pc, #232]	; (800287c <MX_GPIO_Init+0x190>)
 8002794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002796:	4a39      	ldr	r2, [pc, #228]	; (800287c <MX_GPIO_Init+0x190>)
 8002798:	f043 0308 	orr.w	r3, r3, #8
 800279c:	6313      	str	r3, [r2, #48]	; 0x30
 800279e:	4b37      	ldr	r3, [pc, #220]	; (800287c <MX_GPIO_Init+0x190>)
 80027a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a2:	f003 0308 	and.w	r3, r3, #8
 80027a6:	607b      	str	r3, [r7, #4]
 80027a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_4, GPIO_PIN_RESET);
 80027aa:	2200      	movs	r2, #0
 80027ac:	2115      	movs	r1, #21
 80027ae:	4834      	ldr	r0, [pc, #208]	; (8002880 <MX_GPIO_Init+0x194>)
 80027b0:	f001 fff6 	bl	80047a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80027b4:	2200      	movs	r2, #0
 80027b6:	2103      	movs	r1, #3
 80027b8:	4832      	ldr	r0, [pc, #200]	; (8002884 <MX_GPIO_Init+0x198>)
 80027ba:	f001 fff1 	bl	80047a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14
 80027be:	2200      	movs	r2, #0
 80027c0:	f44f 4156 	mov.w	r1, #54784	; 0xd600
 80027c4:	4830      	ldr	r0, [pc, #192]	; (8002888 <MX_GPIO_Init+0x19c>)
 80027c6:	f001 ffeb 	bl	80047a0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80027ca:	2200      	movs	r2, #0
 80027cc:	21f0      	movs	r1, #240	; 0xf0
 80027ce:	482f      	ldr	r0, [pc, #188]	; (800288c <MX_GPIO_Init+0x1a0>)
 80027d0:	f001 ffe6 	bl	80047a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC2 PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_4;
 80027d4:	2315      	movs	r3, #21
 80027d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027d8:	2301      	movs	r3, #1
 80027da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027dc:	2300      	movs	r3, #0
 80027de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027e0:	2300      	movs	r3, #0
 80027e2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027e4:	f107 031c 	add.w	r3, r7, #28
 80027e8:	4619      	mov	r1, r3
 80027ea:	4825      	ldr	r0, [pc, #148]	; (8002880 <MX_GPIO_Init+0x194>)
 80027ec:	f001 fe24 	bl	8004438 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80027f0:	2303      	movs	r3, #3
 80027f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027f4:	2301      	movs	r3, #1
 80027f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f8:	2300      	movs	r3, #0
 80027fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027fc:	2300      	movs	r3, #0
 80027fe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002800:	f107 031c 	add.w	r3, r7, #28
 8002804:	4619      	mov	r1, r3
 8002806:	481f      	ldr	r0, [pc, #124]	; (8002884 <MX_GPIO_Init+0x198>)
 8002808:	f001 fe16 	bl	8004438 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE9 PE10 PE12 PE14
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14
 800280c:	f44f 4356 	mov.w	r3, #54784	; 0xd600
 8002810:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002812:	2301      	movs	r3, #1
 8002814:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002816:	2300      	movs	r3, #0
 8002818:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800281a:	2300      	movs	r3, #0
 800281c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800281e:	f107 031c 	add.w	r3, r7, #28
 8002822:	4619      	mov	r1, r3
 8002824:	4818      	ldr	r0, [pc, #96]	; (8002888 <MX_GPIO_Init+0x19c>)
 8002826:	f001 fe07 	bl	8004438 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800282a:	23f0      	movs	r3, #240	; 0xf0
 800282c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800282e:	2301      	movs	r3, #1
 8002830:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002832:	2300      	movs	r3, #0
 8002834:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002836:	2300      	movs	r3, #0
 8002838:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800283a:	f107 031c 	add.w	r3, r7, #28
 800283e:	4619      	mov	r1, r3
 8002840:	4812      	ldr	r0, [pc, #72]	; (800288c <MX_GPIO_Init+0x1a0>)
 8002842:	f001 fdf9 	bl	8004438 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
 8002846:	f44f 734a 	mov.w	r3, #808	; 0x328
 800284a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800284c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002850:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002852:	2300      	movs	r3, #0
 8002854:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002856:	f107 031c 	add.w	r3, r7, #28
 800285a:	4619      	mov	r1, r3
 800285c:	480c      	ldr	r0, [pc, #48]	; (8002890 <MX_GPIO_Init+0x1a4>)
 800285e:	f001 fdeb 	bl	8004438 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002862:	2200      	movs	r2, #0
 8002864:	2100      	movs	r1, #0
 8002866:	2017      	movs	r0, #23
 8002868:	f001 f9ad 	bl	8003bc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800286c:	2017      	movs	r0, #23
 800286e:	f001 f9c6 	bl	8003bfe <HAL_NVIC_EnableIRQ>

}
 8002872:	bf00      	nop
 8002874:	3730      	adds	r7, #48	; 0x30
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	40023800 	.word	0x40023800
 8002880:	40020800 	.word	0x40020800
 8002884:	40020000 	.word	0x40020000
 8002888:	40021000 	.word	0x40021000
 800288c:	40020c00 	.word	0x40020c00
 8002890:	40020400 	.word	0x40020400

08002894 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
/**Fungsi ini digunakan untuk interrupt LoRa E32 jika ada data masuk
  */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b086      	sub	sp, #24
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	460b      	mov	r3, r1
 800289e:	807b      	strh	r3, [r7, #2]
	//variable parse
	uint8_t new_Data[10];
	//uint8_t prev_Data;
	if (huart->Instance == USART2)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a62      	ldr	r2, [pc, #392]	; (8002a30 <HAL_UARTEx_RxEventCallback+0x19c>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d167      	bne.n	800297a <HAL_UARTEx_RxEventCallback+0xe6>
	{
		oldPos = newPos;  // Update the last position before copying new data
 80028aa:	4b62      	ldr	r3, [pc, #392]	; (8002a34 <HAL_UARTEx_RxEventCallback+0x1a0>)
 80028ac:	881a      	ldrh	r2, [r3, #0]
 80028ae:	4b62      	ldr	r3, [pc, #392]	; (8002a38 <HAL_UARTEx_RxEventCallback+0x1a4>)
 80028b0:	801a      	strh	r2, [r3, #0]

		/* If the data in large and it is about to exceed the buffer size, we have to route it to the start of the buffer
		 * This is to maintain the circular buffer
		 * The old data in the main buffer will be overlapped
		 */
		if (oldPos+Size > MainBuf_SIZE)  // If the current position + new data size is greater than the main buffer
 80028b2:	4b61      	ldr	r3, [pc, #388]	; (8002a38 <HAL_UARTEx_RxEventCallback+0x1a4>)
 80028b4:	881b      	ldrh	r3, [r3, #0]
 80028b6:	461a      	mov	r2, r3
 80028b8:	887b      	ldrh	r3, [r7, #2]
 80028ba:	4413      	add	r3, r2
 80028bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028c0:	dd22      	ble.n	8002908 <HAL_UARTEx_RxEventCallback+0x74>
		{
			uint16_t datatocopy = MainBuf_SIZE-oldPos;  // find out how much space is left in the main buffer
 80028c2:	4b5d      	ldr	r3, [pc, #372]	; (8002a38 <HAL_UARTEx_RxEventCallback+0x1a4>)
 80028c4:	881b      	ldrh	r3, [r3, #0]
 80028c6:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80028ca:	82bb      	strh	r3, [r7, #20]
			memcpy ((uint8_t *)MainBuf+oldPos, RxBuf, datatocopy);  // copy data in that remaining space
 80028cc:	4b5a      	ldr	r3, [pc, #360]	; (8002a38 <HAL_UARTEx_RxEventCallback+0x1a4>)
 80028ce:	881b      	ldrh	r3, [r3, #0]
 80028d0:	461a      	mov	r2, r3
 80028d2:	4b5a      	ldr	r3, [pc, #360]	; (8002a3c <HAL_UARTEx_RxEventCallback+0x1a8>)
 80028d4:	4413      	add	r3, r2
 80028d6:	8aba      	ldrh	r2, [r7, #20]
 80028d8:	4959      	ldr	r1, [pc, #356]	; (8002a40 <HAL_UARTEx_RxEventCallback+0x1ac>)
 80028da:	4618      	mov	r0, r3
 80028dc:	f005 fd70 	bl	80083c0 <memcpy>

			oldPos = 0;  // point to the start of the buffer
 80028e0:	4b55      	ldr	r3, [pc, #340]	; (8002a38 <HAL_UARTEx_RxEventCallback+0x1a4>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)MainBuf, (uint8_t *)RxBuf+datatocopy, (Size-datatocopy));  // copy the remaining data
 80028e6:	8abb      	ldrh	r3, [r7, #20]
 80028e8:	4a55      	ldr	r2, [pc, #340]	; (8002a40 <HAL_UARTEx_RxEventCallback+0x1ac>)
 80028ea:	1899      	adds	r1, r3, r2
 80028ec:	887a      	ldrh	r2, [r7, #2]
 80028ee:	8abb      	ldrh	r3, [r7, #20]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	461a      	mov	r2, r3
 80028f4:	4851      	ldr	r0, [pc, #324]	; (8002a3c <HAL_UARTEx_RxEventCallback+0x1a8>)
 80028f6:	f005 fd63 	bl	80083c0 <memcpy>
			newPos = (Size-datatocopy);  // update the position
 80028fa:	887a      	ldrh	r2, [r7, #2]
 80028fc:	8abb      	ldrh	r3, [r7, #20]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	b29a      	uxth	r2, r3
 8002902:	4b4c      	ldr	r3, [pc, #304]	; (8002a34 <HAL_UARTEx_RxEventCallback+0x1a0>)
 8002904:	801a      	strh	r2, [r3, #0]
 8002906:	e010      	b.n	800292a <HAL_UARTEx_RxEventCallback+0x96>
		/* if the current position + new data size is less than the main buffer
		 * we will simply copy the data into the buffer and update the position
		 */
		else
		{
			memcpy ((uint8_t *)MainBuf+newPos, RxBuf, Size);
 8002908:	4b4a      	ldr	r3, [pc, #296]	; (8002a34 <HAL_UARTEx_RxEventCallback+0x1a0>)
 800290a:	881b      	ldrh	r3, [r3, #0]
 800290c:	461a      	mov	r2, r3
 800290e:	4b4b      	ldr	r3, [pc, #300]	; (8002a3c <HAL_UARTEx_RxEventCallback+0x1a8>)
 8002910:	4413      	add	r3, r2
 8002912:	887a      	ldrh	r2, [r7, #2]
 8002914:	494a      	ldr	r1, [pc, #296]	; (8002a40 <HAL_UARTEx_RxEventCallback+0x1ac>)
 8002916:	4618      	mov	r0, r3
 8002918:	f005 fd52 	bl	80083c0 <memcpy>
			newPos = Size+oldPos;
 800291c:	4b46      	ldr	r3, [pc, #280]	; (8002a38 <HAL_UARTEx_RxEventCallback+0x1a4>)
 800291e:	881a      	ldrh	r2, [r3, #0]
 8002920:	887b      	ldrh	r3, [r7, #2]
 8002922:	4413      	add	r3, r2
 8002924:	b29a      	uxth	r2, r3
 8002926:	4b43      	ldr	r3, [pc, #268]	; (8002a34 <HAL_UARTEx_RxEventCallback+0x1a0>)
 8002928:	801a      	strh	r2, [r3, #0]
		}
		/* start the DMA again */
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *) RxBuf, RxBuf_SIZE);
 800292a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800292e:	4944      	ldr	r1, [pc, #272]	; (8002a40 <HAL_UARTEx_RxEventCallback+0x1ac>)
 8002930:	4844      	ldr	r0, [pc, #272]	; (8002a44 <HAL_UARTEx_RxEventCallback+0x1b0>)
 8002932:	f004 fc72 	bl	800721a <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8002936:	4b44      	ldr	r3, [pc, #272]	; (8002a48 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	4b42      	ldr	r3, [pc, #264]	; (8002a48 <HAL_UARTEx_RxEventCallback+0x1b4>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f022 0208 	bic.w	r2, r2, #8
 8002944:	601a      	str	r2, [r3, #0]

		if(RxBuf_3[0] == '*'){ //*node,lat,long,data,jam, menit, detik, tegangan
 8002946:	4b41      	ldr	r3, [pc, #260]	; (8002a4c <HAL_UARTEx_RxEventCallback+0x1b8>)
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	2b2a      	cmp	r3, #42	; 0x2a
 800294c:	d10b      	bne.n	8002966 <HAL_UARTEx_RxEventCallback+0xd2>
			new_Data[0] = MainBuf[1];
 800294e:	4b3b      	ldr	r3, [pc, #236]	; (8002a3c <HAL_UARTEx_RxEventCallback+0x1a8>)
 8002950:	785b      	ldrb	r3, [r3, #1]
 8002952:	723b      	strb	r3, [r7, #8]
			if (new_Data[0]){
 8002954:	7a3b      	ldrb	r3, [r7, #8]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d005      	beq.n	8002966 <HAL_UARTEx_RxEventCallback+0xd2>
				HAL_UART_Transmit(&huart2, MainBuf, Size, 100);
 800295a:	887a      	ldrh	r2, [r7, #2]
 800295c:	2364      	movs	r3, #100	; 0x64
 800295e:	4937      	ldr	r1, [pc, #220]	; (8002a3c <HAL_UARTEx_RxEventCallback+0x1a8>)
 8002960:	4838      	ldr	r0, [pc, #224]	; (8002a44 <HAL_UARTEx_RxEventCallback+0x1b0>)
 8002962:	f004 fb26 	bl	8006fb2 <HAL_UART_Transmit>
			}
			//prev_Data = new_Data[0];
		}
		printf("%s", MainBuf);
 8002966:	4935      	ldr	r1, [pc, #212]	; (8002a3c <HAL_UARTEx_RxEventCallback+0x1a8>)
 8002968:	4839      	ldr	r0, [pc, #228]	; (8002a50 <HAL_UARTEx_RxEventCallback+0x1bc>)
 800296a:	f006 fbb9 	bl	80090e0 <iprintf>
		led_reaction(100, 600);
 800296e:	f44f 7116 	mov.w	r1, #600	; 0x258
 8002972:	2064      	movs	r0, #100	; 0x64
 8002974:	f000 fa20 	bl	8002db8 <led_reaction>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t *) RxBuf_3, RxBuf_SIZE);
		__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
//		printf("%s", MainBuf_3); //gpsdata
		usart_3_state = true;
	}
}
 8002978:	e055      	b.n	8002a26 <HAL_UARTEx_RxEventCallback+0x192>
	}else if(huart->Instance == USART3){
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a35      	ldr	r2, [pc, #212]	; (8002a54 <HAL_UARTEx_RxEventCallback+0x1c0>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d150      	bne.n	8002a26 <HAL_UARTEx_RxEventCallback+0x192>
		oldPos_3 = newPos_3;
 8002984:	4b34      	ldr	r3, [pc, #208]	; (8002a58 <HAL_UARTEx_RxEventCallback+0x1c4>)
 8002986:	881a      	ldrh	r2, [r3, #0]
 8002988:	4b34      	ldr	r3, [pc, #208]	; (8002a5c <HAL_UARTEx_RxEventCallback+0x1c8>)
 800298a:	801a      	strh	r2, [r3, #0]
		if (oldPos_3+Size > MainBuf_SIZE)  // If the current position + new data size is greater than the main buffer
 800298c:	4b33      	ldr	r3, [pc, #204]	; (8002a5c <HAL_UARTEx_RxEventCallback+0x1c8>)
 800298e:	881b      	ldrh	r3, [r3, #0]
 8002990:	461a      	mov	r2, r3
 8002992:	887b      	ldrh	r3, [r7, #2]
 8002994:	4413      	add	r3, r2
 8002996:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800299a:	dd22      	ble.n	80029e2 <HAL_UARTEx_RxEventCallback+0x14e>
			uint16_t datatocopy_3 = MainBuf_SIZE-oldPos_3;  // find out how much space is left in the main buffer
 800299c:	4b2f      	ldr	r3, [pc, #188]	; (8002a5c <HAL_UARTEx_RxEventCallback+0x1c8>)
 800299e:	881b      	ldrh	r3, [r3, #0]
 80029a0:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80029a4:	82fb      	strh	r3, [r7, #22]
			memcpy ((uint8_t *)MainBuf_3+oldPos_3, RxBuf_3, datatocopy_3);  // copy data in that remaining space
 80029a6:	4b2d      	ldr	r3, [pc, #180]	; (8002a5c <HAL_UARTEx_RxEventCallback+0x1c8>)
 80029a8:	881b      	ldrh	r3, [r3, #0]
 80029aa:	461a      	mov	r2, r3
 80029ac:	4b2c      	ldr	r3, [pc, #176]	; (8002a60 <HAL_UARTEx_RxEventCallback+0x1cc>)
 80029ae:	4413      	add	r3, r2
 80029b0:	8afa      	ldrh	r2, [r7, #22]
 80029b2:	4926      	ldr	r1, [pc, #152]	; (8002a4c <HAL_UARTEx_RxEventCallback+0x1b8>)
 80029b4:	4618      	mov	r0, r3
 80029b6:	f005 fd03 	bl	80083c0 <memcpy>
			oldPos_3 = 0;  // point to the start of the buffer
 80029ba:	4b28      	ldr	r3, [pc, #160]	; (8002a5c <HAL_UARTEx_RxEventCallback+0x1c8>)
 80029bc:	2200      	movs	r2, #0
 80029be:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)MainBuf_3, (uint8_t *)RxBuf_3+datatocopy_3, (Size-datatocopy_3));  // copy the remaining data
 80029c0:	8afb      	ldrh	r3, [r7, #22]
 80029c2:	4a22      	ldr	r2, [pc, #136]	; (8002a4c <HAL_UARTEx_RxEventCallback+0x1b8>)
 80029c4:	1899      	adds	r1, r3, r2
 80029c6:	887a      	ldrh	r2, [r7, #2]
 80029c8:	8afb      	ldrh	r3, [r7, #22]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	461a      	mov	r2, r3
 80029ce:	4824      	ldr	r0, [pc, #144]	; (8002a60 <HAL_UARTEx_RxEventCallback+0x1cc>)
 80029d0:	f005 fcf6 	bl	80083c0 <memcpy>
			newPos_3 = (Size-datatocopy_3);
 80029d4:	887a      	ldrh	r2, [r7, #2]
 80029d6:	8afb      	ldrh	r3, [r7, #22]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	b29a      	uxth	r2, r3
 80029dc:	4b1e      	ldr	r3, [pc, #120]	; (8002a58 <HAL_UARTEx_RxEventCallback+0x1c4>)
 80029de:	801a      	strh	r2, [r3, #0]
 80029e0:	e010      	b.n	8002a04 <HAL_UARTEx_RxEventCallback+0x170>
			memcpy ((uint8_t *)MainBuf+newPos_3, RxBuf_3, Size);
 80029e2:	4b1d      	ldr	r3, [pc, #116]	; (8002a58 <HAL_UARTEx_RxEventCallback+0x1c4>)
 80029e4:	881b      	ldrh	r3, [r3, #0]
 80029e6:	461a      	mov	r2, r3
 80029e8:	4b14      	ldr	r3, [pc, #80]	; (8002a3c <HAL_UARTEx_RxEventCallback+0x1a8>)
 80029ea:	4413      	add	r3, r2
 80029ec:	887a      	ldrh	r2, [r7, #2]
 80029ee:	4917      	ldr	r1, [pc, #92]	; (8002a4c <HAL_UARTEx_RxEventCallback+0x1b8>)
 80029f0:	4618      	mov	r0, r3
 80029f2:	f005 fce5 	bl	80083c0 <memcpy>
			newPos_3 = Size+oldPos_3;
 80029f6:	4b19      	ldr	r3, [pc, #100]	; (8002a5c <HAL_UARTEx_RxEventCallback+0x1c8>)
 80029f8:	881a      	ldrh	r2, [r3, #0]
 80029fa:	887b      	ldrh	r3, [r7, #2]
 80029fc:	4413      	add	r3, r2
 80029fe:	b29a      	uxth	r2, r3
 8002a00:	4b15      	ldr	r3, [pc, #84]	; (8002a58 <HAL_UARTEx_RxEventCallback+0x1c4>)
 8002a02:	801a      	strh	r2, [r3, #0]
		HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t *) RxBuf_3, RxBuf_SIZE);
 8002a04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a08:	4910      	ldr	r1, [pc, #64]	; (8002a4c <HAL_UARTEx_RxEventCallback+0x1b8>)
 8002a0a:	4816      	ldr	r0, [pc, #88]	; (8002a64 <HAL_UARTEx_RxEventCallback+0x1d0>)
 8002a0c:	f004 fc05 	bl	800721a <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8002a10:	4b15      	ldr	r3, [pc, #84]	; (8002a68 <HAL_UARTEx_RxEventCallback+0x1d4>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	4b14      	ldr	r3, [pc, #80]	; (8002a68 <HAL_UARTEx_RxEventCallback+0x1d4>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f022 0208 	bic.w	r2, r2, #8
 8002a1e:	601a      	str	r2, [r3, #0]
		usart_3_state = true;
 8002a20:	4b12      	ldr	r3, [pc, #72]	; (8002a6c <HAL_UARTEx_RxEventCallback+0x1d8>)
 8002a22:	2201      	movs	r2, #1
 8002a24:	701a      	strb	r2, [r3, #0]
}
 8002a26:	bf00      	nop
 8002a28:	3718      	adds	r7, #24
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	40004400 	.word	0x40004400
 8002a34:	20000a08 	.word	0x20000a08
 8002a38:	20000a06 	.word	0x20000a06
 8002a3c:	200031b0 	.word	0x200031b0
 8002a40:	20002db0 	.word	0x20002db0
 8002a44:	2000363c 	.word	0x2000363c
 8002a48:	20002a70 	.word	0x20002a70
 8002a4c:	20000604 	.word	0x20000604
 8002a50:	0800cf60 	.word	0x0800cf60
 8002a54:	40004800 	.word	0x40004800
 8002a58:	20000a0c 	.word	0x20000a0c
 8002a5c:	20000a0a 	.word	0x20000a0a
 8002a60:	20000204 	.word	0x20000204
 8002a64:	20002bf8 	.word	0x20002bf8
 8002a68:	20002b98 	.word	0x20002b98
 8002a6c:	20000a04 	.word	0x20000a04

08002a70 <HAL_GPIO_EXTI_Callback>:
/**Fungsi ini digunakan untuk keypad untuk mengirim pesan dan juga di intrupsi jika ada data masuk dari keypad
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	4603      	mov	r3, r0
 8002a78:	80fb      	strh	r3, [r7, #6]
  currentMillis = HAL_GetTick();
 8002a7a:	f000 ff99 	bl	80039b0 <HAL_GetTick>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	4aa3      	ldr	r2, [pc, #652]	; (8002d10 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8002a82:	6013      	str	r3, [r2, #0]
  if (currentMillis - previousMillis > 10) {
 8002a84:	4ba2      	ldr	r3, [pc, #648]	; (8002d10 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	4ba2      	ldr	r3, [pc, #648]	; (8002d14 <HAL_GPIO_EXTI_Callback+0x2a4>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	2b0a      	cmp	r3, #10
 8002a90:	f240 817f 	bls.w	8002d92 <HAL_GPIO_EXTI_Callback+0x322>
    /*Configure GPIO pins : PB3 PB5 PB8 PB9 to GPIO_INPUT*/
    GPIO_InitStructPrivate.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
 8002a94:	4ba0      	ldr	r3, [pc, #640]	; (8002d18 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8002a96:	f44f 724a 	mov.w	r2, #808	; 0x328
 8002a9a:	601a      	str	r2, [r3, #0]
    GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 8002a9c:	4b9e      	ldr	r3, [pc, #632]	; (8002d18 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	605a      	str	r2, [r3, #4]
    GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8002aa2:	4b9d      	ldr	r3, [pc, #628]	; (8002d18 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	609a      	str	r2, [r3, #8]
    GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8002aa8:	4b9b      	ldr	r3, [pc, #620]	; (8002d18 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructPrivate);
 8002aae:	499a      	ldr	r1, [pc, #616]	; (8002d18 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8002ab0:	489a      	ldr	r0, [pc, #616]	; (8002d1c <HAL_GPIO_EXTI_Callback+0x2ac>)
 8002ab2:	f001 fcc1 	bl	8004438 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, 1);
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	2110      	movs	r1, #16
 8002aba:	4899      	ldr	r0, [pc, #612]	; (8002d20 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8002abc:	f001 fe70 	bl	80047a0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, 0);
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	2120      	movs	r1, #32
 8002ac4:	4896      	ldr	r0, [pc, #600]	; (8002d20 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8002ac6:	f001 fe6b 	bl	80047a0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, 0);
 8002aca:	2200      	movs	r2, #0
 8002acc:	2140      	movs	r1, #64	; 0x40
 8002ace:	4894      	ldr	r0, [pc, #592]	; (8002d20 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8002ad0:	f001 fe66 	bl	80047a0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, 0);
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	2180      	movs	r1, #128	; 0x80
 8002ad8:	4891      	ldr	r0, [pc, #580]	; (8002d20 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8002ada:	f001 fe61 	bl	80047a0 <HAL_GPIO_WritePin>
    if(GPIO_Pin == GPIO_PIN_3 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3))
 8002ade:	88fb      	ldrh	r3, [r7, #6]
 8002ae0:	2b08      	cmp	r3, #8
 8002ae2:	d10a      	bne.n	8002afa <HAL_GPIO_EXTI_Callback+0x8a>
 8002ae4:	2108      	movs	r1, #8
 8002ae6:	488d      	ldr	r0, [pc, #564]	; (8002d1c <HAL_GPIO_EXTI_Callback+0x2ac>)
 8002ae8:	f001 fe42 	bl	8004770 <HAL_GPIO_ReadPin>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d003      	beq.n	8002afa <HAL_GPIO_EXTI_Callback+0x8a>
    {
      keyPressed = 14; //ASCII value of D
 8002af2:	4b8c      	ldr	r3, [pc, #560]	; (8002d24 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8002af4:	220e      	movs	r2, #14
 8002af6:	701a      	strb	r2, [r3, #0]
 8002af8:	e02c      	b.n	8002b54 <HAL_GPIO_EXTI_Callback+0xe4>
    }
    else if(GPIO_Pin == GPIO_PIN_5 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5))
 8002afa:	88fb      	ldrh	r3, [r7, #6]
 8002afc:	2b20      	cmp	r3, #32
 8002afe:	d10a      	bne.n	8002b16 <HAL_GPIO_EXTI_Callback+0xa6>
 8002b00:	2120      	movs	r1, #32
 8002b02:	4886      	ldr	r0, [pc, #536]	; (8002d1c <HAL_GPIO_EXTI_Callback+0x2ac>)
 8002b04:	f001 fe34 	bl	8004770 <HAL_GPIO_ReadPin>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d003      	beq.n	8002b16 <HAL_GPIO_EXTI_Callback+0xa6>
    {
      keyPressed = 13; //ASCII value of C
 8002b0e:	4b85      	ldr	r3, [pc, #532]	; (8002d24 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8002b10:	220d      	movs	r2, #13
 8002b12:	701a      	strb	r2, [r3, #0]
 8002b14:	e01e      	b.n	8002b54 <HAL_GPIO_EXTI_Callback+0xe4>
    }
    else if(GPIO_Pin == GPIO_PIN_8 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))
 8002b16:	88fb      	ldrh	r3, [r7, #6]
 8002b18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b1c:	d10b      	bne.n	8002b36 <HAL_GPIO_EXTI_Callback+0xc6>
 8002b1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b22:	487e      	ldr	r0, [pc, #504]	; (8002d1c <HAL_GPIO_EXTI_Callback+0x2ac>)
 8002b24:	f001 fe24 	bl	8004770 <HAL_GPIO_ReadPin>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d003      	beq.n	8002b36 <HAL_GPIO_EXTI_Callback+0xc6>
    {
      keyPressed = 12; //ASCII value of B
 8002b2e:	4b7d      	ldr	r3, [pc, #500]	; (8002d24 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8002b30:	220c      	movs	r2, #12
 8002b32:	701a      	strb	r2, [r3, #0]
 8002b34:	e00e      	b.n	8002b54 <HAL_GPIO_EXTI_Callback+0xe4>
    }
    else if(GPIO_Pin == GPIO_PIN_9 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9))
 8002b36:	88fb      	ldrh	r3, [r7, #6]
 8002b38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b3c:	d10a      	bne.n	8002b54 <HAL_GPIO_EXTI_Callback+0xe4>
 8002b3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b42:	4876      	ldr	r0, [pc, #472]	; (8002d1c <HAL_GPIO_EXTI_Callback+0x2ac>)
 8002b44:	f001 fe14 	bl	8004770 <HAL_GPIO_ReadPin>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d002      	beq.n	8002b54 <HAL_GPIO_EXTI_Callback+0xe4>
    {
      keyPressed = 11; //ASCII value of A
 8002b4e:	4b75      	ldr	r3, [pc, #468]	; (8002d24 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8002b50:	220b      	movs	r2, #11
 8002b52:	701a      	strb	r2, [r3, #0]
    }

    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, 0);
 8002b54:	2200      	movs	r2, #0
 8002b56:	2110      	movs	r1, #16
 8002b58:	4871      	ldr	r0, [pc, #452]	; (8002d20 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8002b5a:	f001 fe21 	bl	80047a0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, 1);
 8002b5e:	2201      	movs	r2, #1
 8002b60:	2120      	movs	r1, #32
 8002b62:	486f      	ldr	r0, [pc, #444]	; (8002d20 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8002b64:	f001 fe1c 	bl	80047a0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, 0);
 8002b68:	2200      	movs	r2, #0
 8002b6a:	2140      	movs	r1, #64	; 0x40
 8002b6c:	486c      	ldr	r0, [pc, #432]	; (8002d20 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8002b6e:	f001 fe17 	bl	80047a0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, 0);
 8002b72:	2200      	movs	r2, #0
 8002b74:	2180      	movs	r1, #128	; 0x80
 8002b76:	486a      	ldr	r0, [pc, #424]	; (8002d20 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8002b78:	f001 fe12 	bl	80047a0 <HAL_GPIO_WritePin>

    if(GPIO_Pin == GPIO_PIN_3 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3))
 8002b7c:	88fb      	ldrh	r3, [r7, #6]
 8002b7e:	2b08      	cmp	r3, #8
 8002b80:	d10a      	bne.n	8002b98 <HAL_GPIO_EXTI_Callback+0x128>
 8002b82:	2108      	movs	r1, #8
 8002b84:	4865      	ldr	r0, [pc, #404]	; (8002d1c <HAL_GPIO_EXTI_Callback+0x2ac>)
 8002b86:	f001 fdf3 	bl	8004770 <HAL_GPIO_ReadPin>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d003      	beq.n	8002b98 <HAL_GPIO_EXTI_Callback+0x128>
    {
      keyPressed = 15; //ASCII value of #
 8002b90:	4b64      	ldr	r3, [pc, #400]	; (8002d24 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8002b92:	220f      	movs	r2, #15
 8002b94:	701a      	strb	r2, [r3, #0]
 8002b96:	e02c      	b.n	8002bf2 <HAL_GPIO_EXTI_Callback+0x182>
    }
    else if(GPIO_Pin == GPIO_PIN_5 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5))
 8002b98:	88fb      	ldrh	r3, [r7, #6]
 8002b9a:	2b20      	cmp	r3, #32
 8002b9c:	d10a      	bne.n	8002bb4 <HAL_GPIO_EXTI_Callback+0x144>
 8002b9e:	2120      	movs	r1, #32
 8002ba0:	485e      	ldr	r0, [pc, #376]	; (8002d1c <HAL_GPIO_EXTI_Callback+0x2ac>)
 8002ba2:	f001 fde5 	bl	8004770 <HAL_GPIO_ReadPin>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d003      	beq.n	8002bb4 <HAL_GPIO_EXTI_Callback+0x144>
    {
      keyPressed = 9; //ASCII value of 9
 8002bac:	4b5d      	ldr	r3, [pc, #372]	; (8002d24 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8002bae:	2209      	movs	r2, #9
 8002bb0:	701a      	strb	r2, [r3, #0]
 8002bb2:	e01e      	b.n	8002bf2 <HAL_GPIO_EXTI_Callback+0x182>
    }
    else if(GPIO_Pin == GPIO_PIN_8 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))
 8002bb4:	88fb      	ldrh	r3, [r7, #6]
 8002bb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bba:	d10b      	bne.n	8002bd4 <HAL_GPIO_EXTI_Callback+0x164>
 8002bbc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002bc0:	4856      	ldr	r0, [pc, #344]	; (8002d1c <HAL_GPIO_EXTI_Callback+0x2ac>)
 8002bc2:	f001 fdd5 	bl	8004770 <HAL_GPIO_ReadPin>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d003      	beq.n	8002bd4 <HAL_GPIO_EXTI_Callback+0x164>
    {
      keyPressed = 6; //ASCII value of 6
 8002bcc:	4b55      	ldr	r3, [pc, #340]	; (8002d24 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8002bce:	2206      	movs	r2, #6
 8002bd0:	701a      	strb	r2, [r3, #0]
 8002bd2:	e00e      	b.n	8002bf2 <HAL_GPIO_EXTI_Callback+0x182>
    }
    else if(GPIO_Pin == GPIO_PIN_9 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9))
 8002bd4:	88fb      	ldrh	r3, [r7, #6]
 8002bd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bda:	d10a      	bne.n	8002bf2 <HAL_GPIO_EXTI_Callback+0x182>
 8002bdc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002be0:	484e      	ldr	r0, [pc, #312]	; (8002d1c <HAL_GPIO_EXTI_Callback+0x2ac>)
 8002be2:	f001 fdc5 	bl	8004770 <HAL_GPIO_ReadPin>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d002      	beq.n	8002bf2 <HAL_GPIO_EXTI_Callback+0x182>
    {
      keyPressed = 3; //ASCII value of 3
 8002bec:	4b4d      	ldr	r3, [pc, #308]	; (8002d24 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8002bee:	2203      	movs	r2, #3
 8002bf0:	701a      	strb	r2, [r3, #0]
    }

    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, 0);
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	2110      	movs	r1, #16
 8002bf6:	484a      	ldr	r0, [pc, #296]	; (8002d20 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8002bf8:	f001 fdd2 	bl	80047a0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, 0);
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	2120      	movs	r1, #32
 8002c00:	4847      	ldr	r0, [pc, #284]	; (8002d20 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8002c02:	f001 fdcd 	bl	80047a0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, 1);
 8002c06:	2201      	movs	r2, #1
 8002c08:	2140      	movs	r1, #64	; 0x40
 8002c0a:	4845      	ldr	r0, [pc, #276]	; (8002d20 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8002c0c:	f001 fdc8 	bl	80047a0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, 0);
 8002c10:	2200      	movs	r2, #0
 8002c12:	2180      	movs	r1, #128	; 0x80
 8002c14:	4842      	ldr	r0, [pc, #264]	; (8002d20 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8002c16:	f001 fdc3 	bl	80047a0 <HAL_GPIO_WritePin>
    if(GPIO_Pin == GPIO_PIN_3 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3))
 8002c1a:	88fb      	ldrh	r3, [r7, #6]
 8002c1c:	2b08      	cmp	r3, #8
 8002c1e:	d10a      	bne.n	8002c36 <HAL_GPIO_EXTI_Callback+0x1c6>
 8002c20:	2108      	movs	r1, #8
 8002c22:	483e      	ldr	r0, [pc, #248]	; (8002d1c <HAL_GPIO_EXTI_Callback+0x2ac>)
 8002c24:	f001 fda4 	bl	8004770 <HAL_GPIO_ReadPin>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d003      	beq.n	8002c36 <HAL_GPIO_EXTI_Callback+0x1c6>
    {
      keyPressed = 16; //ASCII value of 0
 8002c2e:	4b3d      	ldr	r3, [pc, #244]	; (8002d24 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8002c30:	2210      	movs	r2, #16
 8002c32:	701a      	strb	r2, [r3, #0]
 8002c34:	e02c      	b.n	8002c90 <HAL_GPIO_EXTI_Callback+0x220>
    }
    else if(GPIO_Pin == GPIO_PIN_5 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5))
 8002c36:	88fb      	ldrh	r3, [r7, #6]
 8002c38:	2b20      	cmp	r3, #32
 8002c3a:	d10a      	bne.n	8002c52 <HAL_GPIO_EXTI_Callback+0x1e2>
 8002c3c:	2120      	movs	r1, #32
 8002c3e:	4837      	ldr	r0, [pc, #220]	; (8002d1c <HAL_GPIO_EXTI_Callback+0x2ac>)
 8002c40:	f001 fd96 	bl	8004770 <HAL_GPIO_ReadPin>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d003      	beq.n	8002c52 <HAL_GPIO_EXTI_Callback+0x1e2>
    {
      keyPressed = 8; //ASCII value of 8
 8002c4a:	4b36      	ldr	r3, [pc, #216]	; (8002d24 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8002c4c:	2208      	movs	r2, #8
 8002c4e:	701a      	strb	r2, [r3, #0]
 8002c50:	e01e      	b.n	8002c90 <HAL_GPIO_EXTI_Callback+0x220>
    }
    else if(GPIO_Pin == GPIO_PIN_8 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))
 8002c52:	88fb      	ldrh	r3, [r7, #6]
 8002c54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c58:	d10b      	bne.n	8002c72 <HAL_GPIO_EXTI_Callback+0x202>
 8002c5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c5e:	482f      	ldr	r0, [pc, #188]	; (8002d1c <HAL_GPIO_EXTI_Callback+0x2ac>)
 8002c60:	f001 fd86 	bl	8004770 <HAL_GPIO_ReadPin>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d003      	beq.n	8002c72 <HAL_GPIO_EXTI_Callback+0x202>
    {
      keyPressed = 5; //ASCII value of 5
 8002c6a:	4b2e      	ldr	r3, [pc, #184]	; (8002d24 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8002c6c:	2205      	movs	r2, #5
 8002c6e:	701a      	strb	r2, [r3, #0]
 8002c70:	e00e      	b.n	8002c90 <HAL_GPIO_EXTI_Callback+0x220>
    }
    else if(GPIO_Pin == GPIO_PIN_9 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9))
 8002c72:	88fb      	ldrh	r3, [r7, #6]
 8002c74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c78:	d10a      	bne.n	8002c90 <HAL_GPIO_EXTI_Callback+0x220>
 8002c7a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c7e:	4827      	ldr	r0, [pc, #156]	; (8002d1c <HAL_GPIO_EXTI_Callback+0x2ac>)
 8002c80:	f001 fd76 	bl	8004770 <HAL_GPIO_ReadPin>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d002      	beq.n	8002c90 <HAL_GPIO_EXTI_Callback+0x220>
    {
      keyPressed = 2; //ASCII value of 2
 8002c8a:	4b26      	ldr	r3, [pc, #152]	; (8002d24 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8002c8c:	2202      	movs	r2, #2
 8002c8e:	701a      	strb	r2, [r3, #0]
    }

    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, 0);
 8002c90:	2200      	movs	r2, #0
 8002c92:	2110      	movs	r1, #16
 8002c94:	4822      	ldr	r0, [pc, #136]	; (8002d20 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8002c96:	f001 fd83 	bl	80047a0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, 0);
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	2120      	movs	r1, #32
 8002c9e:	4820      	ldr	r0, [pc, #128]	; (8002d20 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8002ca0:	f001 fd7e 	bl	80047a0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, 0);
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	2140      	movs	r1, #64	; 0x40
 8002ca8:	481d      	ldr	r0, [pc, #116]	; (8002d20 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8002caa:	f001 fd79 	bl	80047a0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, 1);
 8002cae:	2201      	movs	r2, #1
 8002cb0:	2180      	movs	r1, #128	; 0x80
 8002cb2:	481b      	ldr	r0, [pc, #108]	; (8002d20 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8002cb4:	f001 fd74 	bl	80047a0 <HAL_GPIO_WritePin>
    if(GPIO_Pin == GPIO_PIN_3 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3))
 8002cb8:	88fb      	ldrh	r3, [r7, #6]
 8002cba:	2b08      	cmp	r3, #8
 8002cbc:	d10a      	bne.n	8002cd4 <HAL_GPIO_EXTI_Callback+0x264>
 8002cbe:	2108      	movs	r1, #8
 8002cc0:	4816      	ldr	r0, [pc, #88]	; (8002d1c <HAL_GPIO_EXTI_Callback+0x2ac>)
 8002cc2:	f001 fd55 	bl	8004770 <HAL_GPIO_ReadPin>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d003      	beq.n	8002cd4 <HAL_GPIO_EXTI_Callback+0x264>
    {
      keyPressed = 17; //ASCII value of *
 8002ccc:	4b15      	ldr	r3, [pc, #84]	; (8002d24 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8002cce:	2211      	movs	r2, #17
 8002cd0:	701a      	strb	r2, [r3, #0]
 8002cd2:	e038      	b.n	8002d46 <HAL_GPIO_EXTI_Callback+0x2d6>
    }
    else if(GPIO_Pin == GPIO_PIN_5 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5))
 8002cd4:	88fb      	ldrh	r3, [r7, #6]
 8002cd6:	2b20      	cmp	r3, #32
 8002cd8:	d10a      	bne.n	8002cf0 <HAL_GPIO_EXTI_Callback+0x280>
 8002cda:	2120      	movs	r1, #32
 8002cdc:	480f      	ldr	r0, [pc, #60]	; (8002d1c <HAL_GPIO_EXTI_Callback+0x2ac>)
 8002cde:	f001 fd47 	bl	8004770 <HAL_GPIO_ReadPin>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d003      	beq.n	8002cf0 <HAL_GPIO_EXTI_Callback+0x280>
    {
      keyPressed = 7; //ASCII value of 7
 8002ce8:	4b0e      	ldr	r3, [pc, #56]	; (8002d24 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8002cea:	2207      	movs	r2, #7
 8002cec:	701a      	strb	r2, [r3, #0]
 8002cee:	e02a      	b.n	8002d46 <HAL_GPIO_EXTI_Callback+0x2d6>
    }
    else if(GPIO_Pin == GPIO_PIN_8 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))
 8002cf0:	88fb      	ldrh	r3, [r7, #6]
 8002cf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cf6:	d117      	bne.n	8002d28 <HAL_GPIO_EXTI_Callback+0x2b8>
 8002cf8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002cfc:	4807      	ldr	r0, [pc, #28]	; (8002d1c <HAL_GPIO_EXTI_Callback+0x2ac>)
 8002cfe:	f001 fd37 	bl	8004770 <HAL_GPIO_ReadPin>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d00f      	beq.n	8002d28 <HAL_GPIO_EXTI_Callback+0x2b8>
    {
      keyPressed = 4; //ASCII value of 4
 8002d08:	4b06      	ldr	r3, [pc, #24]	; (8002d24 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8002d0a:	2204      	movs	r2, #4
 8002d0c:	701a      	strb	r2, [r3, #0]
 8002d0e:	e01a      	b.n	8002d46 <HAL_GPIO_EXTI_Callback+0x2d6>
 8002d10:	20000a48 	.word	0x20000a48
 8002d14:	20000a44 	.word	0x20000a44
 8002d18:	20000a30 	.word	0x20000a30
 8002d1c:	40020400 	.word	0x40020400
 8002d20:	40020c00 	.word	0x40020c00
 8002d24:	20000a4c 	.word	0x20000a4c
    }
    else if(GPIO_Pin == GPIO_PIN_9 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9))
 8002d28:	88fb      	ldrh	r3, [r7, #6]
 8002d2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d2e:	d10a      	bne.n	8002d46 <HAL_GPIO_EXTI_Callback+0x2d6>
 8002d30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d34:	4819      	ldr	r0, [pc, #100]	; (8002d9c <HAL_GPIO_EXTI_Callback+0x32c>)
 8002d36:	f001 fd1b 	bl	8004770 <HAL_GPIO_ReadPin>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d002      	beq.n	8002d46 <HAL_GPIO_EXTI_Callback+0x2d6>
    {
      keyPressed = 1; //ASCII value of 1
 8002d40:	4b17      	ldr	r3, [pc, #92]	; (8002da0 <HAL_GPIO_EXTI_Callback+0x330>)
 8002d42:	2201      	movs	r2, #1
 8002d44:	701a      	strb	r2, [r3, #0]
    }
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, 1);
 8002d46:	2201      	movs	r2, #1
 8002d48:	2110      	movs	r1, #16
 8002d4a:	4816      	ldr	r0, [pc, #88]	; (8002da4 <HAL_GPIO_EXTI_Callback+0x334>)
 8002d4c:	f001 fd28 	bl	80047a0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, 1);
 8002d50:	2201      	movs	r2, #1
 8002d52:	2120      	movs	r1, #32
 8002d54:	4813      	ldr	r0, [pc, #76]	; (8002da4 <HAL_GPIO_EXTI_Callback+0x334>)
 8002d56:	f001 fd23 	bl	80047a0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, 1);
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	2140      	movs	r1, #64	; 0x40
 8002d5e:	4811      	ldr	r0, [pc, #68]	; (8002da4 <HAL_GPIO_EXTI_Callback+0x334>)
 8002d60:	f001 fd1e 	bl	80047a0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, 1);
 8002d64:	2201      	movs	r2, #1
 8002d66:	2180      	movs	r1, #128	; 0x80
 8002d68:	480e      	ldr	r0, [pc, #56]	; (8002da4 <HAL_GPIO_EXTI_Callback+0x334>)
 8002d6a:	f001 fd19 	bl	80047a0 <HAL_GPIO_WritePin>
    /*Configure GPIO pins : PB6 PB7 PB8 PB9 back to EXTI*/
    GPIO_InitStructPrivate.Mode = GPIO_MODE_IT_RISING;
 8002d6e:	4b0e      	ldr	r3, [pc, #56]	; (8002da8 <HAL_GPIO_EXTI_Callback+0x338>)
 8002d70:	f44f 1288 	mov.w	r2, #1114112	; 0x110000
 8002d74:	605a      	str	r2, [r3, #4]
    GPIO_InitStructPrivate.Pull = GPIO_PULLDOWN;
 8002d76:	4b0c      	ldr	r3, [pc, #48]	; (8002da8 <HAL_GPIO_EXTI_Callback+0x338>)
 8002d78:	2202      	movs	r2, #2
 8002d7a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructPrivate);
 8002d7c:	490a      	ldr	r1, [pc, #40]	; (8002da8 <HAL_GPIO_EXTI_Callback+0x338>)
 8002d7e:	4807      	ldr	r0, [pc, #28]	; (8002d9c <HAL_GPIO_EXTI_Callback+0x32c>)
 8002d80:	f001 fb5a 	bl	8004438 <HAL_GPIO_Init>
    //printf("nilai key pad %d\r\n", keyPressed);
    previousMillis = currentMillis;
 8002d84:	4b09      	ldr	r3, [pc, #36]	; (8002dac <HAL_GPIO_EXTI_Callback+0x33c>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a09      	ldr	r2, [pc, #36]	; (8002db0 <HAL_GPIO_EXTI_Callback+0x340>)
 8002d8a:	6013      	str	r3, [r2, #0]
    key_kondisi = true;
 8002d8c:	4b09      	ldr	r3, [pc, #36]	; (8002db4 <HAL_GPIO_EXTI_Callback+0x344>)
 8002d8e:	2201      	movs	r2, #1
 8002d90:	701a      	strb	r2, [r3, #0]
  }
}
 8002d92:	bf00      	nop
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	40020400 	.word	0x40020400
 8002da0:	20000a4c 	.word	0x20000a4c
 8002da4:	40020c00 	.word	0x40020c00
 8002da8:	20000a30 	.word	0x20000a30
 8002dac:	20000a48 	.word	0x20000a48
 8002db0:	20000a44 	.word	0x20000a44
 8002db4:	20000a4d 	.word	0x20000a4d

08002db8 <led_reaction>:
		led_reaction(100,100);
	  }
}
/**Fungsi ini LED Blink untuk indikasi
  */
void led_reaction(uint16_t led_time, uint16_t time_loop){
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	460a      	mov	r2, r1
 8002dc2:	80fb      	strh	r3, [r7, #6]
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	80bb      	strh	r3, [r7, #4]
	led_loop_on = HAL_GetTick();
 8002dc8:	f000 fdf2 	bl	80039b0 <HAL_GetTick>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	4a29      	ldr	r2, [pc, #164]	; (8002e74 <led_reaction+0xbc>)
 8002dd0:	6013      	str	r3, [r2, #0]
	while ((unsigned long)HAL_GetTick() - led_loop_on <= time_loop){
 8002dd2:	e041      	b.n	8002e58 <led_reaction+0xa0>
		if (HAL_GetTick() - led_prev_on >= led_time){
 8002dd4:	f000 fdec 	bl	80039b0 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	4b27      	ldr	r3, [pc, #156]	; (8002e78 <led_reaction+0xc0>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	1ad2      	subs	r2, r2, r3
 8002de0:	88fb      	ldrh	r3, [r7, #6]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d338      	bcc.n	8002e58 <led_reaction+0xa0>
			led_prev_on = HAL_GetTick();
 8002de6:	f000 fde3 	bl	80039b0 <HAL_GetTick>
 8002dea:	4603      	mov	r3, r0
 8002dec:	4a22      	ldr	r2, [pc, #136]	; (8002e78 <led_reaction+0xc0>)
 8002dee:	6013      	str	r3, [r2, #0]
			if (led_hijau_kuning == 0){
 8002df0:	4b22      	ldr	r3, [pc, #136]	; (8002e7c <led_reaction+0xc4>)
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	f083 0301 	eor.w	r3, r3, #1
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d003      	beq.n	8002e06 <led_reaction+0x4e>
				led_hijau_kuning = 1;
 8002dfe:	4b1f      	ldr	r3, [pc, #124]	; (8002e7c <led_reaction+0xc4>)
 8002e00:	2201      	movs	r2, #1
 8002e02:	701a      	strb	r2, [r3, #0]
 8002e04:	e002      	b.n	8002e0c <led_reaction+0x54>
			} else {
				led_hijau_kuning = 0;
 8002e06:	4b1d      	ldr	r3, [pc, #116]	; (8002e7c <led_reaction+0xc4>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	701a      	strb	r2, [r3, #0]
			}
			if (led_merah == 0){
 8002e0c:	4b1c      	ldr	r3, [pc, #112]	; (8002e80 <led_reaction+0xc8>)
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	f083 0301 	eor.w	r3, r3, #1
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d003      	beq.n	8002e22 <led_reaction+0x6a>
				led_merah = 1;
 8002e1a:	4b19      	ldr	r3, [pc, #100]	; (8002e80 <led_reaction+0xc8>)
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	701a      	strb	r2, [r3, #0]
 8002e20:	e002      	b.n	8002e28 <led_reaction+0x70>
			} else {
				led_merah = 0;
 8002e22:	4b17      	ldr	r3, [pc, #92]	; (8002e80 <led_reaction+0xc8>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	701a      	strb	r2, [r3, #0]
			}
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, led_hijau_kuning);
 8002e28:	4b14      	ldr	r3, [pc, #80]	; (8002e7c <led_reaction+0xc4>)
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002e32:	4814      	ldr	r0, [pc, #80]	; (8002e84 <led_reaction+0xcc>)
 8002e34:	f001 fcb4 	bl	80047a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, led_merah);
 8002e38:	4b11      	ldr	r3, [pc, #68]	; (8002e80 <led_reaction+0xc8>)
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002e42:	4810      	ldr	r0, [pc, #64]	; (8002e84 <led_reaction+0xcc>)
 8002e44:	f001 fcac 	bl	80047a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, led_hijau_kuning);
 8002e48:	4b0c      	ldr	r3, [pc, #48]	; (8002e7c <led_reaction+0xc4>)
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002e52:	480c      	ldr	r0, [pc, #48]	; (8002e84 <led_reaction+0xcc>)
 8002e54:	f001 fca4 	bl	80047a0 <HAL_GPIO_WritePin>
	while ((unsigned long)HAL_GetTick() - led_loop_on <= time_loop){
 8002e58:	f000 fdaa 	bl	80039b0 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	4b05      	ldr	r3, [pc, #20]	; (8002e74 <led_reaction+0xbc>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	1ad2      	subs	r2, r2, r3
 8002e64:	88bb      	ldrh	r3, [r7, #4]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d9b4      	bls.n	8002dd4 <led_reaction+0x1c>
		}
	}
}
 8002e6a:	bf00      	nop
 8002e6c:	bf00      	nop
 8002e6e:	3708      	adds	r7, #8
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	20000a1c 	.word	0x20000a1c
 8002e78:	20000a18 	.word	0x20000a18
 8002e7c:	20000004 	.word	0x20000004
 8002e80:	20000a4e 	.word	0x20000a4e
 8002e84:	40021000 	.word	0x40021000

08002e88 <get_gps>:
/**Fungsi ini untuk memparsing data GPS yaitu latitude longitude digunakan untuk melihat lokaasi alat
  */
void get_gps(){
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b088      	sub	sp, #32
 8002e8c:	af02      	add	r7, sp, #8
	if (usart_3_state == true){
 8002e8e:	4b96      	ldr	r3, [pc, #600]	; (80030e8 <get_gps+0x260>)
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	f000 810e 	beq.w	80030b4 <get_gps+0x22c>
		//printf("%s", MainBuf_3);
//		printf("7.12122");
//		printf("test");
	  char *pointer;
		  int length = sizeof(MainBuf_3);
 8002e98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e9c:	603b      	str	r3, [r7, #0]

		  memset(lat, '\0', 20);
 8002e9e:	2214      	movs	r2, #20
 8002ea0:	2100      	movs	r1, #0
 8002ea2:	4892      	ldr	r0, [pc, #584]	; (80030ec <get_gps+0x264>)
 8002ea4:	f005 fa9a 	bl	80083dc <memset>
		  memset(lon, '\0', 20) ;
 8002ea8:	2214      	movs	r2, #20
 8002eaa:	2100      	movs	r1, #0
 8002eac:	4890      	ldr	r0, [pc, #576]	; (80030f0 <get_gps+0x268>)
 8002eae:	f005 fa95 	bl	80083dc <memset>
		  pointer = strchr((char*)MainBuf_3, '$');
 8002eb2:	2124      	movs	r1, #36	; 0x24
 8002eb4:	488f      	ldr	r0, [pc, #572]	; (80030f4 <get_gps+0x26c>)
 8002eb6:	f006 fa17 	bl	80092e8 <strchr>
 8002eba:	6178      	str	r0, [r7, #20]

		  do{
			  char *ptrstart;
			  char *ptrend;
			  if(strncmp(pointer, "$GNGGA" , 6) == 0){ //$GNGGA
 8002ebc:	2206      	movs	r2, #6
 8002ebe:	498e      	ldr	r1, [pc, #568]	; (80030f8 <get_gps+0x270>)
 8002ec0:	6978      	ldr	r0, [r7, #20]
 8002ec2:	f006 fa1e 	bl	8009302 <strncmp>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d118      	bne.n	8002efe <get_gps+0x76>
				  ptrstart = (char*)memchr(pointer + 1, ',', length);
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	3301      	adds	r3, #1
 8002ed0:	683a      	ldr	r2, [r7, #0]
 8002ed2:	212c      	movs	r1, #44	; 0x2c
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7fd f97b 	bl	80001d0 <memchr>
 8002eda:	6138      	str	r0, [r7, #16]
				  ptrstart = (char*)memchr(ptrstart + 1, ',', length);
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	3301      	adds	r3, #1
 8002ee0:	683a      	ldr	r2, [r7, #0]
 8002ee2:	212c      	movs	r1, #44	; 0x2c
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7fd f973 	bl	80001d0 <memchr>
 8002eea:	6138      	str	r0, [r7, #16]
				  ptrend = (char*)memchr(ptrstart + 1, ',', length);
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	3301      	adds	r3, #1
 8002ef0:	683a      	ldr	r2, [r7, #0]
 8002ef2:	212c      	movs	r1, #44	; 0x2c
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7fd f96b 	bl	80001d0 <memchr>
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	e049      	b.n	8002f92 <get_gps+0x10a>

			  } else if(strncmp(pointer, "$GNGLL", 6) == 0){ //$GNGLL
 8002efe:	2206      	movs	r2, #6
 8002f00:	497e      	ldr	r1, [pc, #504]	; (80030fc <get_gps+0x274>)
 8002f02:	6978      	ldr	r0, [r7, #20]
 8002f04:	f006 f9fd 	bl	8009302 <strncmp>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d110      	bne.n	8002f30 <get_gps+0xa8>
				  ptrstart = (char*)memchr(pointer + 1, ',', length);
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	3301      	adds	r3, #1
 8002f12:	683a      	ldr	r2, [r7, #0]
 8002f14:	212c      	movs	r1, #44	; 0x2c
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7fd f95a 	bl	80001d0 <memchr>
 8002f1c:	6138      	str	r0, [r7, #16]
				  ptrend = (char*)memchr(ptrstart + 1, ',', length);
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	3301      	adds	r3, #1
 8002f22:	683a      	ldr	r2, [r7, #0]
 8002f24:	212c      	movs	r1, #44	; 0x2c
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7fd f952 	bl	80001d0 <memchr>
 8002f2c:	60f8      	str	r0, [r7, #12]
 8002f2e:	e030      	b.n	8002f92 <get_gps+0x10a>

			  } else if(strncmp(pointer, "$GNRMC", 6) == 0){
 8002f30:	2206      	movs	r2, #6
 8002f32:	4973      	ldr	r1, [pc, #460]	; (8003100 <get_gps+0x278>)
 8002f34:	6978      	ldr	r0, [r7, #20]
 8002f36:	f006 f9e4 	bl	8009302 <strncmp>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d120      	bne.n	8002f82 <get_gps+0xfa>
				  ptrstart = (char*)memchr(pointer + 1, ',', length);
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	3301      	adds	r3, #1
 8002f44:	683a      	ldr	r2, [r7, #0]
 8002f46:	212c      	movs	r1, #44	; 0x2c
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7fd f941 	bl	80001d0 <memchr>
 8002f4e:	6138      	str	r0, [r7, #16]
				  ptrstart = (char*)memchr(ptrstart + 1, ',', length);
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	3301      	adds	r3, #1
 8002f54:	683a      	ldr	r2, [r7, #0]
 8002f56:	212c      	movs	r1, #44	; 0x2c
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7fd f939 	bl	80001d0 <memchr>
 8002f5e:	6138      	str	r0, [r7, #16]
				  ptrstart = (char*)memchr(ptrstart + 1, ',', length);
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	3301      	adds	r3, #1
 8002f64:	683a      	ldr	r2, [r7, #0]
 8002f66:	212c      	movs	r1, #44	; 0x2c
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7fd f931 	bl	80001d0 <memchr>
 8002f6e:	6138      	str	r0, [r7, #16]
				  ptrend = (char*)memchr(ptrstart + 1, ',', length);
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	3301      	adds	r3, #1
 8002f74:	683a      	ldr	r2, [r7, #0]
 8002f76:	212c      	movs	r1, #44	; 0x2c
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f7fd f929 	bl	80001d0 <memchr>
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	e007      	b.n	8002f92 <get_gps+0x10a>

			  } else {

				  pointer = strchr(pointer + 6, '$');
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	3306      	adds	r3, #6
 8002f86:	2124      	movs	r1, #36	; 0x24
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f006 f9ad 	bl	80092e8 <strchr>
 8002f8e:	6178      	str	r0, [r7, #20]
				  continue;
 8002f90:	e088      	b.n	80030a4 <get_gps+0x21c>
			  }

			  for(int i = 1; i < (ptrend - ptrstart); i++) lat[i - 1] = ptrstart[i];
 8002f92:	2301      	movs	r3, #1
 8002f94:	60bb      	str	r3, [r7, #8]
 8002f96:	e00a      	b.n	8002fae <get_gps+0x126>
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	693a      	ldr	r2, [r7, #16]
 8002f9c:	441a      	add	r2, r3
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	3b01      	subs	r3, #1
 8002fa2:	7811      	ldrb	r1, [r2, #0]
 8002fa4:	4a51      	ldr	r2, [pc, #324]	; (80030ec <get_gps+0x264>)
 8002fa6:	54d1      	strb	r1, [r2, r3]
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	3301      	adds	r3, #1
 8002fac:	60bb      	str	r3, [r7, #8]
 8002fae:	68fa      	ldr	r2, [r7, #12]
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	68ba      	ldr	r2, [r7, #8]
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	dbee      	blt.n	8002f98 <get_gps+0x110>
			  lat_a = *(ptrend + 1);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	785a      	ldrb	r2, [r3, #1]
 8002fbe:	4b51      	ldr	r3, [pc, #324]	; (8003104 <get_gps+0x27c>)
 8002fc0:	701a      	strb	r2, [r3, #0]

			  ptrstart = (char*)memchr(ptrend + 1, ',', length);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	683a      	ldr	r2, [r7, #0]
 8002fc8:	212c      	movs	r1, #44	; 0x2c
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7fd f900 	bl	80001d0 <memchr>
 8002fd0:	6138      	str	r0, [r7, #16]
			  ptrend = (char*)memchr(ptrstart + 1, ',', length);
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	683a      	ldr	r2, [r7, #0]
 8002fd8:	212c      	movs	r1, #44	; 0x2c
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7fd f8f8 	bl	80001d0 <memchr>
 8002fe0:	60f8      	str	r0, [r7, #12]

			  for(int i = 1; i < (ptrend - ptrstart); i++) lon[i - 1] = ptrstart[i];
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	607b      	str	r3, [r7, #4]
 8002fe6:	e00a      	b.n	8002ffe <get_gps+0x176>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	693a      	ldr	r2, [r7, #16]
 8002fec:	441a      	add	r2, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	3b01      	subs	r3, #1
 8002ff2:	7811      	ldrb	r1, [r2, #0]
 8002ff4:	4a3e      	ldr	r2, [pc, #248]	; (80030f0 <get_gps+0x268>)
 8002ff6:	54d1      	strb	r1, [r2, r3]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	607b      	str	r3, [r7, #4]
 8002ffe:	68fa      	ldr	r2, [r7, #12]
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	429a      	cmp	r2, r3
 8003008:	dbee      	blt.n	8002fe8 <get_gps+0x160>
			  lon_a = *(ptrend + 1);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	785a      	ldrb	r2, [r3, #1]
 800300e:	4b3e      	ldr	r3, [pc, #248]	; (8003108 <get_gps+0x280>)
 8003010:	701a      	strb	r2, [r3, #0]
			  if(lon[0] != '\0' && lat[0] != '\0'){
 8003012:	4b37      	ldr	r3, [pc, #220]	; (80030f0 <get_gps+0x268>)
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d03d      	beq.n	8003096 <get_gps+0x20e>
 800301a:	4b34      	ldr	r3, [pc, #208]	; (80030ec <get_gps+0x264>)
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d039      	beq.n	8003096 <get_gps+0x20e>
				  printf("Lat: %s | %c\tLon: %s | %c\r\n", lat, lat_a, lon, lon_a);
 8003022:	4b38      	ldr	r3, [pc, #224]	; (8003104 <get_gps+0x27c>)
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	461a      	mov	r2, r3
 8003028:	4b37      	ldr	r3, [pc, #220]	; (8003108 <get_gps+0x280>)
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	9300      	str	r3, [sp, #0]
 800302e:	4b30      	ldr	r3, [pc, #192]	; (80030f0 <get_gps+0x268>)
 8003030:	492e      	ldr	r1, [pc, #184]	; (80030ec <get_gps+0x264>)
 8003032:	4836      	ldr	r0, [pc, #216]	; (800310c <get_gps+0x284>)
 8003034:	f006 f854 	bl	80090e0 <iprintf>
				  lat_gps = atof((char*)lat);
 8003038:	482c      	ldr	r0, [pc, #176]	; (80030ec <get_gps+0x264>)
 800303a:	f005 f993 	bl	8008364 <atof>
 800303e:	ec53 2b10 	vmov	r2, r3, d0
 8003042:	4610      	mov	r0, r2
 8003044:	4619      	mov	r1, r3
 8003046:	f7fd fdcf 	bl	8000be8 <__aeabi_d2f>
 800304a:	4603      	mov	r3, r0
 800304c:	4a30      	ldr	r2, [pc, #192]	; (8003110 <get_gps+0x288>)
 800304e:	6013      	str	r3, [r2, #0]
				  lon_gps = atof((char*)lon);
 8003050:	4827      	ldr	r0, [pc, #156]	; (80030f0 <get_gps+0x268>)
 8003052:	f005 f987 	bl	8008364 <atof>
 8003056:	ec53 2b10 	vmov	r2, r3, d0
 800305a:	4610      	mov	r0, r2
 800305c:	4619      	mov	r1, r3
 800305e:	f7fd fdc3 	bl	8000be8 <__aeabi_d2f>
 8003062:	4603      	mov	r3, r0
 8003064:	4a2b      	ldr	r2, [pc, #172]	; (8003114 <get_gps+0x28c>)
 8003066:	6013      	str	r3, [r2, #0]
				  sprintf(lat, "%g", lat_gps);
 8003068:	4b29      	ldr	r3, [pc, #164]	; (8003110 <get_gps+0x288>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4618      	mov	r0, r3
 800306e:	f7fd fa6b 	bl	8000548 <__aeabi_f2d>
 8003072:	4602      	mov	r2, r0
 8003074:	460b      	mov	r3, r1
 8003076:	4928      	ldr	r1, [pc, #160]	; (8003118 <get_gps+0x290>)
 8003078:	481c      	ldr	r0, [pc, #112]	; (80030ec <get_gps+0x264>)
 800307a:	f006 f915 	bl	80092a8 <siprintf>
				  sprintf(lon, "%g", lon_gps);
 800307e:	4b25      	ldr	r3, [pc, #148]	; (8003114 <get_gps+0x28c>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4618      	mov	r0, r3
 8003084:	f7fd fa60 	bl	8000548 <__aeabi_f2d>
 8003088:	4602      	mov	r2, r0
 800308a:	460b      	mov	r3, r1
 800308c:	4922      	ldr	r1, [pc, #136]	; (8003118 <get_gps+0x290>)
 800308e:	4818      	ldr	r0, [pc, #96]	; (80030f0 <get_gps+0x268>)
 8003090:	f006 f90a 	bl	80092a8 <siprintf>
				  break;
 8003094:	e00a      	b.n	80030ac <get_gps+0x224>
			  }

			  pointer = strchr(pointer + 4, '$');
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	3304      	adds	r3, #4
 800309a:	2124      	movs	r1, #36	; 0x24
 800309c:	4618      	mov	r0, r3
 800309e:	f006 f923 	bl	80092e8 <strchr>
 80030a2:	6178      	str	r0, [r7, #20]
		  }
		  while(pointer != NULL);
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	f47f af08 	bne.w	8002ebc <get_gps+0x34>
		  usart_3_state = false;
 80030ac:	4b0e      	ldr	r3, [pc, #56]	; (80030e8 <get_gps+0x260>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	701a      	strb	r2, [r3, #0]
			else
			  {
				  sprintf(lat, "%g", -7.122323);
				  sprintf(lon, "%g", 122.32312);
			  }
}
 80030b2:	e00d      	b.n	80030d0 <get_gps+0x248>
				  sprintf(lat, "%g", -7.122323);
 80030b4:	a308      	add	r3, pc, #32	; (adr r3, 80030d8 <get_gps+0x250>)
 80030b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ba:	4917      	ldr	r1, [pc, #92]	; (8003118 <get_gps+0x290>)
 80030bc:	480b      	ldr	r0, [pc, #44]	; (80030ec <get_gps+0x264>)
 80030be:	f006 f8f3 	bl	80092a8 <siprintf>
				  sprintf(lon, "%g", 122.32312);
 80030c2:	a307      	add	r3, pc, #28	; (adr r3, 80030e0 <get_gps+0x258>)
 80030c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030c8:	4913      	ldr	r1, [pc, #76]	; (8003118 <get_gps+0x290>)
 80030ca:	4809      	ldr	r0, [pc, #36]	; (80030f0 <get_gps+0x268>)
 80030cc:	f006 f8ec 	bl	80092a8 <siprintf>
}
 80030d0:	bf00      	nop
 80030d2:	3718      	adds	r7, #24
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	3d9231c6 	.word	0x3d9231c6
 80030dc:	c01c7d42 	.word	0xc01c7d42
 80030e0:	ff822bbf 	.word	0xff822bbf
 80030e4:	405e94ad 	.word	0x405e94ad
 80030e8:	20000a04 	.word	0x20000a04
 80030ec:	200036ec 	.word	0x200036ec
 80030f0:	20002d98 	.word	0x20002d98
 80030f4:	20000204 	.word	0x20000204
 80030f8:	0800cfb8 	.word	0x0800cfb8
 80030fc:	0800cfc0 	.word	0x0800cfc0
 8003100:	0800cfc8 	.word	0x0800cfc8
 8003104:	20002d94 	.word	0x20002d94
 8003108:	20002c90 	.word	0x20002c90
 800310c:	0800cfd0 	.word	0x0800cfd0
 8003110:	20003684 	.word	0x20003684
 8003114:	20003700 	.word	0x20003700
 8003118:	0800cfec 	.word	0x0800cfec

0800311c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800311c:	b480      	push	{r7}
 800311e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003120:	b672      	cpsid	i
}
 8003122:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003124:	e7fe      	b.n	8003124 <Error_Handler+0x8>
	...

08003128 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8003130:	4a07      	ldr	r2, [pc, #28]	; (8003150 <RetargetInit+0x28>)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8003136:	4b07      	ldr	r3, [pc, #28]	; (8003154 <RetargetInit+0x2c>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	6898      	ldr	r0, [r3, #8]
 800313c:	2300      	movs	r3, #0
 800313e:	2202      	movs	r2, #2
 8003140:	2100      	movs	r1, #0
 8003142:	f005 ffe5 	bl	8009110 <setvbuf>
}
 8003146:	bf00      	nop
 8003148:	3708      	adds	r7, #8
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	20003704 	.word	0x20003704
 8003154:	20000014 	.word	0x20000014

08003158 <_isatty>:

int _isatty(int fd) {
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2b00      	cmp	r3, #0
 8003164:	db04      	blt.n	8003170 <_isatty+0x18>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2b02      	cmp	r3, #2
 800316a:	dc01      	bgt.n	8003170 <_isatty+0x18>
    return 1;
 800316c:	2301      	movs	r3, #1
 800316e:	e005      	b.n	800317c <_isatty+0x24>

  errno = EBADF;
 8003170:	f005 f8fc 	bl	800836c <__errno>
 8003174:	4603      	mov	r3, r0
 8003176:	2209      	movs	r2, #9
 8003178:	601a      	str	r2, [r3, #0]
  return 0;
 800317a:	2300      	movs	r3, #0
}
 800317c:	4618      	mov	r0, r3
 800317e:	3708      	adds	r7, #8
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}

08003184 <_write>:

int _write(int fd, char* ptr, int len) {
 8003184:	b580      	push	{r7, lr}
 8003186:	b086      	sub	sp, #24
 8003188:	af00      	add	r7, sp, #0
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	60b9      	str	r1, [r7, #8]
 800318e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2b01      	cmp	r3, #1
 8003194:	d002      	beq.n	800319c <_write+0x18>
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2b02      	cmp	r3, #2
 800319a:	d111      	bne.n	80031c0 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 800319c:	4b0e      	ldr	r3, [pc, #56]	; (80031d8 <_write+0x54>)
 800319e:	6818      	ldr	r0, [r3, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	b29a      	uxth	r2, r3
 80031a4:	f04f 33ff 	mov.w	r3, #4294967295
 80031a8:	68b9      	ldr	r1, [r7, #8]
 80031aa:	f003 ff02 	bl	8006fb2 <HAL_UART_Transmit>
 80031ae:	4603      	mov	r3, r0
 80031b0:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80031b2:	7dfb      	ldrb	r3, [r7, #23]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d101      	bne.n	80031bc <_write+0x38>
      return len;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	e008      	b.n	80031ce <_write+0x4a>
    else
      return EIO;
 80031bc:	2305      	movs	r3, #5
 80031be:	e006      	b.n	80031ce <_write+0x4a>
  }
  errno = EBADF;
 80031c0:	f005 f8d4 	bl	800836c <__errno>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2209      	movs	r2, #9
 80031c8:	601a      	str	r2, [r3, #0]
  return -1;
 80031ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3718      	adds	r7, #24
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	20003704 	.word	0x20003704

080031dc <_close>:

int _close(int fd) {
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	db04      	blt.n	80031f4 <_close+0x18>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	dc01      	bgt.n	80031f4 <_close+0x18>
    return 0;
 80031f0:	2300      	movs	r3, #0
 80031f2:	e006      	b.n	8003202 <_close+0x26>

  errno = EBADF;
 80031f4:	f005 f8ba 	bl	800836c <__errno>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2209      	movs	r2, #9
 80031fc:	601a      	str	r2, [r3, #0]
  return -1;
 80031fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003202:	4618      	mov	r0, r3
 8003204:	3708      	adds	r7, #8
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}

0800320a <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 800320a:	b580      	push	{r7, lr}
 800320c:	b084      	sub	sp, #16
 800320e:	af00      	add	r7, sp, #0
 8003210:	60f8      	str	r0, [r7, #12]
 8003212:	60b9      	str	r1, [r7, #8]
 8003214:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8003216:	f005 f8a9 	bl	800836c <__errno>
 800321a:	4603      	mov	r3, r0
 800321c:	2209      	movs	r2, #9
 800321e:	601a      	str	r2, [r3, #0]
  return -1;
 8003220:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003224:	4618      	mov	r0, r3
 8003226:	3710      	adds	r7, #16
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <_read>:

int _read(int fd, char* ptr, int len) {
 800322c:	b580      	push	{r7, lr}
 800322e:	b086      	sub	sp, #24
 8003230:	af00      	add	r7, sp, #0
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	60b9      	str	r1, [r7, #8]
 8003236:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d110      	bne.n	8003260 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 800323e:	4b0e      	ldr	r3, [pc, #56]	; (8003278 <_read+0x4c>)
 8003240:	6818      	ldr	r0, [r3, #0]
 8003242:	f04f 33ff 	mov.w	r3, #4294967295
 8003246:	2201      	movs	r2, #1
 8003248:	68b9      	ldr	r1, [r7, #8]
 800324a:	f003 ff44 	bl	80070d6 <HAL_UART_Receive>
 800324e:	4603      	mov	r3, r0
 8003250:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8003252:	7dfb      	ldrb	r3, [r7, #23]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d101      	bne.n	800325c <_read+0x30>
      return 1;
 8003258:	2301      	movs	r3, #1
 800325a:	e008      	b.n	800326e <_read+0x42>
    else
      return EIO;
 800325c:	2305      	movs	r3, #5
 800325e:	e006      	b.n	800326e <_read+0x42>
  }
  errno = EBADF;
 8003260:	f005 f884 	bl	800836c <__errno>
 8003264:	4603      	mov	r3, r0
 8003266:	2209      	movs	r2, #9
 8003268:	601a      	str	r2, [r3, #0]
  return -1;
 800326a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800326e:	4618      	mov	r0, r3
 8003270:	3718      	adds	r7, #24
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	20003704 	.word	0x20003704

0800327c <_fstat>:

int _fstat(int fd, struct stat* st) {
 800327c:	b580      	push	{r7, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2b00      	cmp	r3, #0
 800328a:	db08      	blt.n	800329e <_fstat+0x22>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2b02      	cmp	r3, #2
 8003290:	dc05      	bgt.n	800329e <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003298:	605a      	str	r2, [r3, #4]
    return 0;
 800329a:	2300      	movs	r3, #0
 800329c:	e005      	b.n	80032aa <_fstat+0x2e>
  }

  errno = EBADF;
 800329e:	f005 f865 	bl	800836c <__errno>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2209      	movs	r2, #9
 80032a6:	601a      	str	r2, [r3, #0]
  return 0;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3708      	adds	r7, #8
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
	...

080032b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032ba:	2300      	movs	r3, #0
 80032bc:	607b      	str	r3, [r7, #4]
 80032be:	4b10      	ldr	r3, [pc, #64]	; (8003300 <HAL_MspInit+0x4c>)
 80032c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c2:	4a0f      	ldr	r2, [pc, #60]	; (8003300 <HAL_MspInit+0x4c>)
 80032c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032c8:	6453      	str	r3, [r2, #68]	; 0x44
 80032ca:	4b0d      	ldr	r3, [pc, #52]	; (8003300 <HAL_MspInit+0x4c>)
 80032cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032d2:	607b      	str	r3, [r7, #4]
 80032d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80032d6:	2300      	movs	r3, #0
 80032d8:	603b      	str	r3, [r7, #0]
 80032da:	4b09      	ldr	r3, [pc, #36]	; (8003300 <HAL_MspInit+0x4c>)
 80032dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032de:	4a08      	ldr	r2, [pc, #32]	; (8003300 <HAL_MspInit+0x4c>)
 80032e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032e4:	6413      	str	r3, [r2, #64]	; 0x40
 80032e6:	4b06      	ldr	r3, [pc, #24]	; (8003300 <HAL_MspInit+0x4c>)
 80032e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ee:	603b      	str	r3, [r7, #0]
 80032f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032f2:	bf00      	nop
 80032f4:	370c      	adds	r7, #12
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	40023800 	.word	0x40023800

08003304 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b08a      	sub	sp, #40	; 0x28
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800330c:	f107 0314 	add.w	r3, r7, #20
 8003310:	2200      	movs	r2, #0
 8003312:	601a      	str	r2, [r3, #0]
 8003314:	605a      	str	r2, [r3, #4]
 8003316:	609a      	str	r2, [r3, #8]
 8003318:	60da      	str	r2, [r3, #12]
 800331a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a19      	ldr	r2, [pc, #100]	; (8003388 <HAL_I2C_MspInit+0x84>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d12b      	bne.n	800337e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003326:	2300      	movs	r3, #0
 8003328:	613b      	str	r3, [r7, #16]
 800332a:	4b18      	ldr	r3, [pc, #96]	; (800338c <HAL_I2C_MspInit+0x88>)
 800332c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332e:	4a17      	ldr	r2, [pc, #92]	; (800338c <HAL_I2C_MspInit+0x88>)
 8003330:	f043 0302 	orr.w	r3, r3, #2
 8003334:	6313      	str	r3, [r2, #48]	; 0x30
 8003336:	4b15      	ldr	r3, [pc, #84]	; (800338c <HAL_I2C_MspInit+0x88>)
 8003338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	613b      	str	r3, [r7, #16]
 8003340:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003342:	23c0      	movs	r3, #192	; 0xc0
 8003344:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003346:	2312      	movs	r3, #18
 8003348:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800334a:	2301      	movs	r3, #1
 800334c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800334e:	2303      	movs	r3, #3
 8003350:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003352:	2304      	movs	r3, #4
 8003354:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003356:	f107 0314 	add.w	r3, r7, #20
 800335a:	4619      	mov	r1, r3
 800335c:	480c      	ldr	r0, [pc, #48]	; (8003390 <HAL_I2C_MspInit+0x8c>)
 800335e:	f001 f86b 	bl	8004438 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003362:	2300      	movs	r3, #0
 8003364:	60fb      	str	r3, [r7, #12]
 8003366:	4b09      	ldr	r3, [pc, #36]	; (800338c <HAL_I2C_MspInit+0x88>)
 8003368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336a:	4a08      	ldr	r2, [pc, #32]	; (800338c <HAL_I2C_MspInit+0x88>)
 800336c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003370:	6413      	str	r3, [r2, #64]	; 0x40
 8003372:	4b06      	ldr	r3, [pc, #24]	; (800338c <HAL_I2C_MspInit+0x88>)
 8003374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003376:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800337a:	60fb      	str	r3, [r7, #12]
 800337c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800337e:	bf00      	nop
 8003380:	3728      	adds	r7, #40	; 0x28
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	40005400 	.word	0x40005400
 800338c:	40023800 	.word	0x40023800
 8003390:	40020400 	.word	0x40020400

08003394 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a05      	ldr	r2, [pc, #20]	; (80033b8 <HAL_RTC_MspInit+0x24>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d102      	bne.n	80033ac <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80033a6:	4b05      	ldr	r3, [pc, #20]	; (80033bc <HAL_RTC_MspInit+0x28>)
 80033a8:	2201      	movs	r2, #1
 80033aa:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80033ac:	bf00      	nop
 80033ae:	370c      	adds	r7, #12
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr
 80033b8:	40002800 	.word	0x40002800
 80033bc:	42470e3c 	.word	0x42470e3c

080033c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b08a      	sub	sp, #40	; 0x28
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033c8:	f107 0314 	add.w	r3, r7, #20
 80033cc:	2200      	movs	r2, #0
 80033ce:	601a      	str	r2, [r3, #0]
 80033d0:	605a      	str	r2, [r3, #4]
 80033d2:	609a      	str	r2, [r3, #8]
 80033d4:	60da      	str	r2, [r3, #12]
 80033d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a30      	ldr	r2, [pc, #192]	; (80034a0 <HAL_SPI_MspInit+0xe0>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d159      	bne.n	8003496 <HAL_SPI_MspInit+0xd6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80033e2:	2300      	movs	r3, #0
 80033e4:	613b      	str	r3, [r7, #16]
 80033e6:	4b2f      	ldr	r3, [pc, #188]	; (80034a4 <HAL_SPI_MspInit+0xe4>)
 80033e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ea:	4a2e      	ldr	r2, [pc, #184]	; (80034a4 <HAL_SPI_MspInit+0xe4>)
 80033ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80033f0:	6453      	str	r3, [r2, #68]	; 0x44
 80033f2:	4b2c      	ldr	r3, [pc, #176]	; (80034a4 <HAL_SPI_MspInit+0xe4>)
 80033f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033fa:	613b      	str	r3, [r7, #16]
 80033fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033fe:	2300      	movs	r3, #0
 8003400:	60fb      	str	r3, [r7, #12]
 8003402:	4b28      	ldr	r3, [pc, #160]	; (80034a4 <HAL_SPI_MspInit+0xe4>)
 8003404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003406:	4a27      	ldr	r2, [pc, #156]	; (80034a4 <HAL_SPI_MspInit+0xe4>)
 8003408:	f043 0301 	orr.w	r3, r3, #1
 800340c:	6313      	str	r3, [r2, #48]	; 0x30
 800340e:	4b25      	ldr	r3, [pc, #148]	; (80034a4 <HAL_SPI_MspInit+0xe4>)
 8003410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003412:	f003 0301 	and.w	r3, r3, #1
 8003416:	60fb      	str	r3, [r7, #12]
 8003418:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800341a:	23a0      	movs	r3, #160	; 0xa0
 800341c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800341e:	2302      	movs	r3, #2
 8003420:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003422:	2300      	movs	r3, #0
 8003424:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003426:	2303      	movs	r3, #3
 8003428:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800342a:	2305      	movs	r3, #5
 800342c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800342e:	f107 0314 	add.w	r3, r7, #20
 8003432:	4619      	mov	r1, r3
 8003434:	481c      	ldr	r0, [pc, #112]	; (80034a8 <HAL_SPI_MspInit+0xe8>)
 8003436:	f000 ffff 	bl	8004438 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800343a:	4b1c      	ldr	r3, [pc, #112]	; (80034ac <HAL_SPI_MspInit+0xec>)
 800343c:	4a1c      	ldr	r2, [pc, #112]	; (80034b0 <HAL_SPI_MspInit+0xf0>)
 800343e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8003440:	4b1a      	ldr	r3, [pc, #104]	; (80034ac <HAL_SPI_MspInit+0xec>)
 8003442:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8003446:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003448:	4b18      	ldr	r3, [pc, #96]	; (80034ac <HAL_SPI_MspInit+0xec>)
 800344a:	2240      	movs	r2, #64	; 0x40
 800344c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800344e:	4b17      	ldr	r3, [pc, #92]	; (80034ac <HAL_SPI_MspInit+0xec>)
 8003450:	2200      	movs	r2, #0
 8003452:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003454:	4b15      	ldr	r3, [pc, #84]	; (80034ac <HAL_SPI_MspInit+0xec>)
 8003456:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800345a:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800345c:	4b13      	ldr	r3, [pc, #76]	; (80034ac <HAL_SPI_MspInit+0xec>)
 800345e:	2200      	movs	r2, #0
 8003460:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003462:	4b12      	ldr	r3, [pc, #72]	; (80034ac <HAL_SPI_MspInit+0xec>)
 8003464:	2200      	movs	r2, #0
 8003466:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8003468:	4b10      	ldr	r3, [pc, #64]	; (80034ac <HAL_SPI_MspInit+0xec>)
 800346a:	2200      	movs	r2, #0
 800346c:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800346e:	4b0f      	ldr	r3, [pc, #60]	; (80034ac <HAL_SPI_MspInit+0xec>)
 8003470:	2200      	movs	r2, #0
 8003472:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003474:	4b0d      	ldr	r3, [pc, #52]	; (80034ac <HAL_SPI_MspInit+0xec>)
 8003476:	2200      	movs	r2, #0
 8003478:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800347a:	480c      	ldr	r0, [pc, #48]	; (80034ac <HAL_SPI_MspInit+0xec>)
 800347c:	f000 fbda 	bl	8003c34 <HAL_DMA_Init>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d001      	beq.n	800348a <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 8003486:	f7ff fe49 	bl	800311c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a07      	ldr	r2, [pc, #28]	; (80034ac <HAL_SPI_MspInit+0xec>)
 800348e:	649a      	str	r2, [r3, #72]	; 0x48
 8003490:	4a06      	ldr	r2, [pc, #24]	; (80034ac <HAL_SPI_MspInit+0xec>)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003496:	bf00      	nop
 8003498:	3728      	adds	r7, #40	; 0x28
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	40013000 	.word	0x40013000
 80034a4:	40023800 	.word	0x40023800
 80034a8:	40020000 	.word	0x40020000
 80034ac:	2000368c 	.word	0x2000368c
 80034b0:	40026458 	.word	0x40026458

080034b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b08e      	sub	sp, #56	; 0x38
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034c0:	2200      	movs	r2, #0
 80034c2:	601a      	str	r2, [r3, #0]
 80034c4:	605a      	str	r2, [r3, #4]
 80034c6:	609a      	str	r2, [r3, #8]
 80034c8:	60da      	str	r2, [r3, #12]
 80034ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a86      	ldr	r2, [pc, #536]	; (80036ec <HAL_UART_MspInit+0x238>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d135      	bne.n	8003542 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80034d6:	2300      	movs	r3, #0
 80034d8:	623b      	str	r3, [r7, #32]
 80034da:	4b85      	ldr	r3, [pc, #532]	; (80036f0 <HAL_UART_MspInit+0x23c>)
 80034dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034de:	4a84      	ldr	r2, [pc, #528]	; (80036f0 <HAL_UART_MspInit+0x23c>)
 80034e0:	f043 0310 	orr.w	r3, r3, #16
 80034e4:	6453      	str	r3, [r2, #68]	; 0x44
 80034e6:	4b82      	ldr	r3, [pc, #520]	; (80036f0 <HAL_UART_MspInit+0x23c>)
 80034e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ea:	f003 0310 	and.w	r3, r3, #16
 80034ee:	623b      	str	r3, [r7, #32]
 80034f0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034f2:	2300      	movs	r3, #0
 80034f4:	61fb      	str	r3, [r7, #28]
 80034f6:	4b7e      	ldr	r3, [pc, #504]	; (80036f0 <HAL_UART_MspInit+0x23c>)
 80034f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fa:	4a7d      	ldr	r2, [pc, #500]	; (80036f0 <HAL_UART_MspInit+0x23c>)
 80034fc:	f043 0301 	orr.w	r3, r3, #1
 8003500:	6313      	str	r3, [r2, #48]	; 0x30
 8003502:	4b7b      	ldr	r3, [pc, #492]	; (80036f0 <HAL_UART_MspInit+0x23c>)
 8003504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003506:	f003 0301 	and.w	r3, r3, #1
 800350a:	61fb      	str	r3, [r7, #28]
 800350c:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800350e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003512:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003514:	2302      	movs	r3, #2
 8003516:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003518:	2300      	movs	r3, #0
 800351a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800351c:	2303      	movs	r3, #3
 800351e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003520:	2307      	movs	r3, #7
 8003522:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003524:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003528:	4619      	mov	r1, r3
 800352a:	4872      	ldr	r0, [pc, #456]	; (80036f4 <HAL_UART_MspInit+0x240>)
 800352c:	f000 ff84 	bl	8004438 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003530:	2200      	movs	r2, #0
 8003532:	2100      	movs	r1, #0
 8003534:	2025      	movs	r0, #37	; 0x25
 8003536:	f000 fb46 	bl	8003bc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800353a:	2025      	movs	r0, #37	; 0x25
 800353c:	f000 fb5f 	bl	8003bfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003540:	e0cf      	b.n	80036e2 <HAL_UART_MspInit+0x22e>
  else if(huart->Instance==USART2)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a6c      	ldr	r2, [pc, #432]	; (80036f8 <HAL_UART_MspInit+0x244>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d162      	bne.n	8003612 <HAL_UART_MspInit+0x15e>
    __HAL_RCC_USART2_CLK_ENABLE();
 800354c:	2300      	movs	r3, #0
 800354e:	61bb      	str	r3, [r7, #24]
 8003550:	4b67      	ldr	r3, [pc, #412]	; (80036f0 <HAL_UART_MspInit+0x23c>)
 8003552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003554:	4a66      	ldr	r2, [pc, #408]	; (80036f0 <HAL_UART_MspInit+0x23c>)
 8003556:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800355a:	6413      	str	r3, [r2, #64]	; 0x40
 800355c:	4b64      	ldr	r3, [pc, #400]	; (80036f0 <HAL_UART_MspInit+0x23c>)
 800355e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003564:	61bb      	str	r3, [r7, #24]
 8003566:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003568:	2300      	movs	r3, #0
 800356a:	617b      	str	r3, [r7, #20]
 800356c:	4b60      	ldr	r3, [pc, #384]	; (80036f0 <HAL_UART_MspInit+0x23c>)
 800356e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003570:	4a5f      	ldr	r2, [pc, #380]	; (80036f0 <HAL_UART_MspInit+0x23c>)
 8003572:	f043 0301 	orr.w	r3, r3, #1
 8003576:	6313      	str	r3, [r2, #48]	; 0x30
 8003578:	4b5d      	ldr	r3, [pc, #372]	; (80036f0 <HAL_UART_MspInit+0x23c>)
 800357a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357c:	f003 0301 	and.w	r3, r3, #1
 8003580:	617b      	str	r3, [r7, #20]
 8003582:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003584:	230c      	movs	r3, #12
 8003586:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003588:	2302      	movs	r3, #2
 800358a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800358c:	2300      	movs	r3, #0
 800358e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003590:	2303      	movs	r3, #3
 8003592:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003594:	2307      	movs	r3, #7
 8003596:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003598:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800359c:	4619      	mov	r1, r3
 800359e:	4855      	ldr	r0, [pc, #340]	; (80036f4 <HAL_UART_MspInit+0x240>)
 80035a0:	f000 ff4a 	bl	8004438 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80035a4:	4b55      	ldr	r3, [pc, #340]	; (80036fc <HAL_UART_MspInit+0x248>)
 80035a6:	4a56      	ldr	r2, [pc, #344]	; (8003700 <HAL_UART_MspInit+0x24c>)
 80035a8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80035aa:	4b54      	ldr	r3, [pc, #336]	; (80036fc <HAL_UART_MspInit+0x248>)
 80035ac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80035b0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80035b2:	4b52      	ldr	r3, [pc, #328]	; (80036fc <HAL_UART_MspInit+0x248>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80035b8:	4b50      	ldr	r3, [pc, #320]	; (80036fc <HAL_UART_MspInit+0x248>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80035be:	4b4f      	ldr	r3, [pc, #316]	; (80036fc <HAL_UART_MspInit+0x248>)
 80035c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035c4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80035c6:	4b4d      	ldr	r3, [pc, #308]	; (80036fc <HAL_UART_MspInit+0x248>)
 80035c8:	2200      	movs	r2, #0
 80035ca:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80035cc:	4b4b      	ldr	r3, [pc, #300]	; (80036fc <HAL_UART_MspInit+0x248>)
 80035ce:	2200      	movs	r2, #0
 80035d0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80035d2:	4b4a      	ldr	r3, [pc, #296]	; (80036fc <HAL_UART_MspInit+0x248>)
 80035d4:	2200      	movs	r2, #0
 80035d6:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80035d8:	4b48      	ldr	r3, [pc, #288]	; (80036fc <HAL_UART_MspInit+0x248>)
 80035da:	2200      	movs	r2, #0
 80035dc:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80035de:	4b47      	ldr	r3, [pc, #284]	; (80036fc <HAL_UART_MspInit+0x248>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80035e4:	4845      	ldr	r0, [pc, #276]	; (80036fc <HAL_UART_MspInit+0x248>)
 80035e6:	f000 fb25 	bl	8003c34 <HAL_DMA_Init>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d001      	beq.n	80035f4 <HAL_UART_MspInit+0x140>
      Error_Handler();
 80035f0:	f7ff fd94 	bl	800311c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	4a41      	ldr	r2, [pc, #260]	; (80036fc <HAL_UART_MspInit+0x248>)
 80035f8:	639a      	str	r2, [r3, #56]	; 0x38
 80035fa:	4a40      	ldr	r2, [pc, #256]	; (80036fc <HAL_UART_MspInit+0x248>)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003600:	2200      	movs	r2, #0
 8003602:	2100      	movs	r1, #0
 8003604:	2026      	movs	r0, #38	; 0x26
 8003606:	f000 fade 	bl	8003bc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800360a:	2026      	movs	r0, #38	; 0x26
 800360c:	f000 faf7 	bl	8003bfe <HAL_NVIC_EnableIRQ>
}
 8003610:	e067      	b.n	80036e2 <HAL_UART_MspInit+0x22e>
  else if(huart->Instance==USART3)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a3b      	ldr	r2, [pc, #236]	; (8003704 <HAL_UART_MspInit+0x250>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d162      	bne.n	80036e2 <HAL_UART_MspInit+0x22e>
    __HAL_RCC_USART3_CLK_ENABLE();
 800361c:	2300      	movs	r3, #0
 800361e:	613b      	str	r3, [r7, #16]
 8003620:	4b33      	ldr	r3, [pc, #204]	; (80036f0 <HAL_UART_MspInit+0x23c>)
 8003622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003624:	4a32      	ldr	r2, [pc, #200]	; (80036f0 <HAL_UART_MspInit+0x23c>)
 8003626:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800362a:	6413      	str	r3, [r2, #64]	; 0x40
 800362c:	4b30      	ldr	r3, [pc, #192]	; (80036f0 <HAL_UART_MspInit+0x23c>)
 800362e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003630:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003634:	613b      	str	r3, [r7, #16]
 8003636:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003638:	2300      	movs	r3, #0
 800363a:	60fb      	str	r3, [r7, #12]
 800363c:	4b2c      	ldr	r3, [pc, #176]	; (80036f0 <HAL_UART_MspInit+0x23c>)
 800363e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003640:	4a2b      	ldr	r2, [pc, #172]	; (80036f0 <HAL_UART_MspInit+0x23c>)
 8003642:	f043 0302 	orr.w	r3, r3, #2
 8003646:	6313      	str	r3, [r2, #48]	; 0x30
 8003648:	4b29      	ldr	r3, [pc, #164]	; (80036f0 <HAL_UART_MspInit+0x23c>)
 800364a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364c:	f003 0302 	and.w	r3, r3, #2
 8003650:	60fb      	str	r3, [r7, #12]
 8003652:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003654:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003658:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800365a:	2302      	movs	r3, #2
 800365c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800365e:	2300      	movs	r3, #0
 8003660:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003662:	2303      	movs	r3, #3
 8003664:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003666:	2307      	movs	r3, #7
 8003668:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800366a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800366e:	4619      	mov	r1, r3
 8003670:	4825      	ldr	r0, [pc, #148]	; (8003708 <HAL_UART_MspInit+0x254>)
 8003672:	f000 fee1 	bl	8004438 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8003676:	4b25      	ldr	r3, [pc, #148]	; (800370c <HAL_UART_MspInit+0x258>)
 8003678:	4a25      	ldr	r2, [pc, #148]	; (8003710 <HAL_UART_MspInit+0x25c>)
 800367a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800367c:	4b23      	ldr	r3, [pc, #140]	; (800370c <HAL_UART_MspInit+0x258>)
 800367e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003682:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003684:	4b21      	ldr	r3, [pc, #132]	; (800370c <HAL_UART_MspInit+0x258>)
 8003686:	2200      	movs	r2, #0
 8003688:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800368a:	4b20      	ldr	r3, [pc, #128]	; (800370c <HAL_UART_MspInit+0x258>)
 800368c:	2200      	movs	r2, #0
 800368e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003690:	4b1e      	ldr	r3, [pc, #120]	; (800370c <HAL_UART_MspInit+0x258>)
 8003692:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003696:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003698:	4b1c      	ldr	r3, [pc, #112]	; (800370c <HAL_UART_MspInit+0x258>)
 800369a:	2200      	movs	r2, #0
 800369c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800369e:	4b1b      	ldr	r3, [pc, #108]	; (800370c <HAL_UART_MspInit+0x258>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80036a4:	4b19      	ldr	r3, [pc, #100]	; (800370c <HAL_UART_MspInit+0x258>)
 80036a6:	2200      	movs	r2, #0
 80036a8:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80036aa:	4b18      	ldr	r3, [pc, #96]	; (800370c <HAL_UART_MspInit+0x258>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80036b0:	4b16      	ldr	r3, [pc, #88]	; (800370c <HAL_UART_MspInit+0x258>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80036b6:	4815      	ldr	r0, [pc, #84]	; (800370c <HAL_UART_MspInit+0x258>)
 80036b8:	f000 fabc 	bl	8003c34 <HAL_DMA_Init>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d001      	beq.n	80036c6 <HAL_UART_MspInit+0x212>
      Error_Handler();
 80036c2:	f7ff fd2b 	bl	800311c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a10      	ldr	r2, [pc, #64]	; (800370c <HAL_UART_MspInit+0x258>)
 80036ca:	639a      	str	r2, [r3, #56]	; 0x38
 80036cc:	4a0f      	ldr	r2, [pc, #60]	; (800370c <HAL_UART_MspInit+0x258>)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80036d2:	2200      	movs	r2, #0
 80036d4:	2100      	movs	r1, #0
 80036d6:	2027      	movs	r0, #39	; 0x27
 80036d8:	f000 fa75 	bl	8003bc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80036dc:	2027      	movs	r0, #39	; 0x27
 80036de:	f000 fa8e 	bl	8003bfe <HAL_NVIC_EnableIRQ>
}
 80036e2:	bf00      	nop
 80036e4:	3738      	adds	r7, #56	; 0x38
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	40011000 	.word	0x40011000
 80036f0:	40023800 	.word	0x40023800
 80036f4:	40020000 	.word	0x40020000
 80036f8:	40004400 	.word	0x40004400
 80036fc:	20002a70 	.word	0x20002a70
 8003700:	40026088 	.word	0x40026088
 8003704:	40004800 	.word	0x40004800
 8003708:	40020400 	.word	0x40020400
 800370c:	20002b98 	.word	0x20002b98
 8003710:	40026028 	.word	0x40026028

08003714 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003714:	b480      	push	{r7}
 8003716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003718:	e7fe      	b.n	8003718 <NMI_Handler+0x4>

0800371a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800371a:	b480      	push	{r7}
 800371c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800371e:	e7fe      	b.n	800371e <HardFault_Handler+0x4>

08003720 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003720:	b480      	push	{r7}
 8003722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003724:	e7fe      	b.n	8003724 <MemManage_Handler+0x4>

08003726 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003726:	b480      	push	{r7}
 8003728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800372a:	e7fe      	b.n	800372a <BusFault_Handler+0x4>

0800372c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800372c:	b480      	push	{r7}
 800372e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003730:	e7fe      	b.n	8003730 <UsageFault_Handler+0x4>

08003732 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003732:	b480      	push	{r7}
 8003734:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003736:	bf00      	nop
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr

08003740 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003740:	b480      	push	{r7}
 8003742:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003744:	bf00      	nop
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr

0800374e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800374e:	b480      	push	{r7}
 8003750:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003752:	bf00      	nop
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr

0800375c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003760:	f000 f912 	bl	8003988 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003764:	bf00      	nop
 8003766:	bd80      	pop	{r7, pc}

08003768 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800376c:	4802      	ldr	r0, [pc, #8]	; (8003778 <DMA1_Stream1_IRQHandler+0x10>)
 800376e:	f000 fbf9 	bl	8003f64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003772:	bf00      	nop
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	20002b98 	.word	0x20002b98

0800377c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003780:	4802      	ldr	r0, [pc, #8]	; (800378c <DMA1_Stream5_IRQHandler+0x10>)
 8003782:	f000 fbef 	bl	8003f64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003786:	bf00      	nop
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	20002a70 	.word	0x20002a70

08003790 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8003794:	2020      	movs	r0, #32
 8003796:	f001 f81d 	bl	80047d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800379a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800379e:	f001 f819 	bl	80047d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80037a2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80037a6:	f001 f815 	bl	80047d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80037aa:	bf00      	nop
 80037ac:	bd80      	pop	{r7, pc}
	...

080037b0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80037b4:	4802      	ldr	r0, [pc, #8]	; (80037c0 <USART1_IRQHandler+0x10>)
 80037b6:	f003 fd95 	bl	80072e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80037ba:	bf00      	nop
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	20002d10 	.word	0x20002d10

080037c4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80037c8:	4802      	ldr	r0, [pc, #8]	; (80037d4 <USART2_IRQHandler+0x10>)
 80037ca:	f003 fd8b 	bl	80072e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80037ce:	bf00      	nop
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	2000363c 	.word	0x2000363c

080037d8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80037dc:	4802      	ldr	r0, [pc, #8]	; (80037e8 <USART3_IRQHandler+0x10>)
 80037de:	f003 fd81 	bl	80072e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80037e2:	bf00      	nop
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	20002bf8 	.word	0x20002bf8

080037ec <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80037f0:	4802      	ldr	r0, [pc, #8]	; (80037fc <DMA2_Stream3_IRQHandler+0x10>)
 80037f2:	f000 fbb7 	bl	8003f64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80037f6:	bf00      	nop
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	2000368c 	.word	0x2000368c

08003800 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b086      	sub	sp, #24
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003808:	4a14      	ldr	r2, [pc, #80]	; (800385c <_sbrk+0x5c>)
 800380a:	4b15      	ldr	r3, [pc, #84]	; (8003860 <_sbrk+0x60>)
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003814:	4b13      	ldr	r3, [pc, #76]	; (8003864 <_sbrk+0x64>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d102      	bne.n	8003822 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800381c:	4b11      	ldr	r3, [pc, #68]	; (8003864 <_sbrk+0x64>)
 800381e:	4a12      	ldr	r2, [pc, #72]	; (8003868 <_sbrk+0x68>)
 8003820:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003822:	4b10      	ldr	r3, [pc, #64]	; (8003864 <_sbrk+0x64>)
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4413      	add	r3, r2
 800382a:	693a      	ldr	r2, [r7, #16]
 800382c:	429a      	cmp	r2, r3
 800382e:	d207      	bcs.n	8003840 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003830:	f004 fd9c 	bl	800836c <__errno>
 8003834:	4603      	mov	r3, r0
 8003836:	220c      	movs	r2, #12
 8003838:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800383a:	f04f 33ff 	mov.w	r3, #4294967295
 800383e:	e009      	b.n	8003854 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003840:	4b08      	ldr	r3, [pc, #32]	; (8003864 <_sbrk+0x64>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003846:	4b07      	ldr	r3, [pc, #28]	; (8003864 <_sbrk+0x64>)
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4413      	add	r3, r2
 800384e:	4a05      	ldr	r2, [pc, #20]	; (8003864 <_sbrk+0x64>)
 8003850:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003852:	68fb      	ldr	r3, [r7, #12]
}
 8003854:	4618      	mov	r0, r3
 8003856:	3718      	adds	r7, #24
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	20020000 	.word	0x20020000
 8003860:	00000400 	.word	0x00000400
 8003864:	20000a50 	.word	0x20000a50
 8003868:	20003720 	.word	0x20003720

0800386c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800386c:	b480      	push	{r7}
 800386e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003870:	4b06      	ldr	r3, [pc, #24]	; (800388c <SystemInit+0x20>)
 8003872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003876:	4a05      	ldr	r2, [pc, #20]	; (800388c <SystemInit+0x20>)
 8003878:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800387c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003880:	bf00      	nop
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	e000ed00 	.word	0xe000ed00

08003890 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003890:	f8df d034 	ldr.w	sp, [pc, #52]	; 80038c8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003894:	480d      	ldr	r0, [pc, #52]	; (80038cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003896:	490e      	ldr	r1, [pc, #56]	; (80038d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003898:	4a0e      	ldr	r2, [pc, #56]	; (80038d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800389a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800389c:	e002      	b.n	80038a4 <LoopCopyDataInit>

0800389e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800389e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80038a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80038a2:	3304      	adds	r3, #4

080038a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80038a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80038a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80038a8:	d3f9      	bcc.n	800389e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80038aa:	4a0b      	ldr	r2, [pc, #44]	; (80038d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80038ac:	4c0b      	ldr	r4, [pc, #44]	; (80038dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80038ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80038b0:	e001      	b.n	80038b6 <LoopFillZerobss>

080038b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80038b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80038b4:	3204      	adds	r2, #4

080038b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80038b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80038b8:	d3fb      	bcc.n	80038b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80038ba:	f7ff ffd7 	bl	800386c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80038be:	f004 fd5b 	bl	8008378 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80038c2:	f7fe fc3d 	bl	8002140 <main>
  bx  lr    
 80038c6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80038c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80038cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80038d0:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80038d4:	0800e61c 	.word	0x0800e61c
  ldr r2, =_sbss
 80038d8:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80038dc:	2000371c 	.word	0x2000371c

080038e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80038e0:	e7fe      	b.n	80038e0 <ADC_IRQHandler>
	...

080038e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80038e8:	4b0e      	ldr	r3, [pc, #56]	; (8003924 <HAL_Init+0x40>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a0d      	ldr	r2, [pc, #52]	; (8003924 <HAL_Init+0x40>)
 80038ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80038f4:	4b0b      	ldr	r3, [pc, #44]	; (8003924 <HAL_Init+0x40>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a0a      	ldr	r2, [pc, #40]	; (8003924 <HAL_Init+0x40>)
 80038fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003900:	4b08      	ldr	r3, [pc, #32]	; (8003924 <HAL_Init+0x40>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a07      	ldr	r2, [pc, #28]	; (8003924 <HAL_Init+0x40>)
 8003906:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800390a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800390c:	2003      	movs	r0, #3
 800390e:	f000 f94f 	bl	8003bb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003912:	2000      	movs	r0, #0
 8003914:	f000 f808 	bl	8003928 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003918:	f7ff fccc 	bl	80032b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	40023c00 	.word	0x40023c00

08003928 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003930:	4b12      	ldr	r3, [pc, #72]	; (800397c <HAL_InitTick+0x54>)
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	4b12      	ldr	r3, [pc, #72]	; (8003980 <HAL_InitTick+0x58>)
 8003936:	781b      	ldrb	r3, [r3, #0]
 8003938:	4619      	mov	r1, r3
 800393a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800393e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003942:	fbb2 f3f3 	udiv	r3, r2, r3
 8003946:	4618      	mov	r0, r3
 8003948:	f000 f967 	bl	8003c1a <HAL_SYSTICK_Config>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d001      	beq.n	8003956 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e00e      	b.n	8003974 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2b0f      	cmp	r3, #15
 800395a:	d80a      	bhi.n	8003972 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800395c:	2200      	movs	r2, #0
 800395e:	6879      	ldr	r1, [r7, #4]
 8003960:	f04f 30ff 	mov.w	r0, #4294967295
 8003964:	f000 f92f 	bl	8003bc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003968:	4a06      	ldr	r2, [pc, #24]	; (8003984 <HAL_InitTick+0x5c>)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800396e:	2300      	movs	r3, #0
 8003970:	e000      	b.n	8003974 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
}
 8003974:	4618      	mov	r0, r3
 8003976:	3708      	adds	r7, #8
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	20000008 	.word	0x20000008
 8003980:	20000010 	.word	0x20000010
 8003984:	2000000c 	.word	0x2000000c

08003988 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003988:	b480      	push	{r7}
 800398a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800398c:	4b06      	ldr	r3, [pc, #24]	; (80039a8 <HAL_IncTick+0x20>)
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	461a      	mov	r2, r3
 8003992:	4b06      	ldr	r3, [pc, #24]	; (80039ac <HAL_IncTick+0x24>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4413      	add	r3, r2
 8003998:	4a04      	ldr	r2, [pc, #16]	; (80039ac <HAL_IncTick+0x24>)
 800399a:	6013      	str	r3, [r2, #0]
}
 800399c:	bf00      	nop
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop
 80039a8:	20000010 	.word	0x20000010
 80039ac:	20003708 	.word	0x20003708

080039b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039b0:	b480      	push	{r7}
 80039b2:	af00      	add	r7, sp, #0
  return uwTick;
 80039b4:	4b03      	ldr	r3, [pc, #12]	; (80039c4 <HAL_GetTick+0x14>)
 80039b6:	681b      	ldr	r3, [r3, #0]
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr
 80039c2:	bf00      	nop
 80039c4:	20003708 	.word	0x20003708

080039c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80039d0:	f7ff ffee 	bl	80039b0 <HAL_GetTick>
 80039d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039e0:	d005      	beq.n	80039ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80039e2:	4b0a      	ldr	r3, [pc, #40]	; (8003a0c <HAL_Delay+0x44>)
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	461a      	mov	r2, r3
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	4413      	add	r3, r2
 80039ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80039ee:	bf00      	nop
 80039f0:	f7ff ffde 	bl	80039b0 <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	68fa      	ldr	r2, [r7, #12]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d8f7      	bhi.n	80039f0 <HAL_Delay+0x28>
  {
  }
}
 8003a00:	bf00      	nop
 8003a02:	bf00      	nop
 8003a04:	3710      	adds	r7, #16
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	20000010 	.word	0x20000010

08003a10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b085      	sub	sp, #20
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f003 0307 	and.w	r3, r3, #7
 8003a1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a20:	4b0c      	ldr	r3, [pc, #48]	; (8003a54 <__NVIC_SetPriorityGrouping+0x44>)
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a26:	68ba      	ldr	r2, [r7, #8]
 8003a28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a42:	4a04      	ldr	r2, [pc, #16]	; (8003a54 <__NVIC_SetPriorityGrouping+0x44>)
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	60d3      	str	r3, [r2, #12]
}
 8003a48:	bf00      	nop
 8003a4a:	3714      	adds	r7, #20
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr
 8003a54:	e000ed00 	.word	0xe000ed00

08003a58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a5c:	4b04      	ldr	r3, [pc, #16]	; (8003a70 <__NVIC_GetPriorityGrouping+0x18>)
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	0a1b      	lsrs	r3, r3, #8
 8003a62:	f003 0307 	and.w	r3, r3, #7
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr
 8003a70:	e000ed00 	.word	0xe000ed00

08003a74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	db0b      	blt.n	8003a9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a86:	79fb      	ldrb	r3, [r7, #7]
 8003a88:	f003 021f 	and.w	r2, r3, #31
 8003a8c:	4907      	ldr	r1, [pc, #28]	; (8003aac <__NVIC_EnableIRQ+0x38>)
 8003a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a92:	095b      	lsrs	r3, r3, #5
 8003a94:	2001      	movs	r0, #1
 8003a96:	fa00 f202 	lsl.w	r2, r0, r2
 8003a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003a9e:	bf00      	nop
 8003aa0:	370c      	adds	r7, #12
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr
 8003aaa:	bf00      	nop
 8003aac:	e000e100 	.word	0xe000e100

08003ab0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	6039      	str	r1, [r7, #0]
 8003aba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	db0a      	blt.n	8003ada <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	b2da      	uxtb	r2, r3
 8003ac8:	490c      	ldr	r1, [pc, #48]	; (8003afc <__NVIC_SetPriority+0x4c>)
 8003aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ace:	0112      	lsls	r2, r2, #4
 8003ad0:	b2d2      	uxtb	r2, r2
 8003ad2:	440b      	add	r3, r1
 8003ad4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ad8:	e00a      	b.n	8003af0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	b2da      	uxtb	r2, r3
 8003ade:	4908      	ldr	r1, [pc, #32]	; (8003b00 <__NVIC_SetPriority+0x50>)
 8003ae0:	79fb      	ldrb	r3, [r7, #7]
 8003ae2:	f003 030f 	and.w	r3, r3, #15
 8003ae6:	3b04      	subs	r3, #4
 8003ae8:	0112      	lsls	r2, r2, #4
 8003aea:	b2d2      	uxtb	r2, r2
 8003aec:	440b      	add	r3, r1
 8003aee:	761a      	strb	r2, [r3, #24]
}
 8003af0:	bf00      	nop
 8003af2:	370c      	adds	r7, #12
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr
 8003afc:	e000e100 	.word	0xe000e100
 8003b00:	e000ed00 	.word	0xe000ed00

08003b04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b089      	sub	sp, #36	; 0x24
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f003 0307 	and.w	r3, r3, #7
 8003b16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	f1c3 0307 	rsb	r3, r3, #7
 8003b1e:	2b04      	cmp	r3, #4
 8003b20:	bf28      	it	cs
 8003b22:	2304      	movcs	r3, #4
 8003b24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	3304      	adds	r3, #4
 8003b2a:	2b06      	cmp	r3, #6
 8003b2c:	d902      	bls.n	8003b34 <NVIC_EncodePriority+0x30>
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	3b03      	subs	r3, #3
 8003b32:	e000      	b.n	8003b36 <NVIC_EncodePriority+0x32>
 8003b34:	2300      	movs	r3, #0
 8003b36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b38:	f04f 32ff 	mov.w	r2, #4294967295
 8003b3c:	69bb      	ldr	r3, [r7, #24]
 8003b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b42:	43da      	mvns	r2, r3
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	401a      	ands	r2, r3
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b4c:	f04f 31ff 	mov.w	r1, #4294967295
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	fa01 f303 	lsl.w	r3, r1, r3
 8003b56:	43d9      	mvns	r1, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b5c:	4313      	orrs	r3, r2
         );
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3724      	adds	r7, #36	; 0x24
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr
	...

08003b6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b082      	sub	sp, #8
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	3b01      	subs	r3, #1
 8003b78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b7c:	d301      	bcc.n	8003b82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e00f      	b.n	8003ba2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b82:	4a0a      	ldr	r2, [pc, #40]	; (8003bac <SysTick_Config+0x40>)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	3b01      	subs	r3, #1
 8003b88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b8a:	210f      	movs	r1, #15
 8003b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b90:	f7ff ff8e 	bl	8003ab0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b94:	4b05      	ldr	r3, [pc, #20]	; (8003bac <SysTick_Config+0x40>)
 8003b96:	2200      	movs	r2, #0
 8003b98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b9a:	4b04      	ldr	r3, [pc, #16]	; (8003bac <SysTick_Config+0x40>)
 8003b9c:	2207      	movs	r2, #7
 8003b9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3708      	adds	r7, #8
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	e000e010 	.word	0xe000e010

08003bb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f7ff ff29 	bl	8003a10 <__NVIC_SetPriorityGrouping>
}
 8003bbe:	bf00      	nop
 8003bc0:	3708      	adds	r7, #8
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}

08003bc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003bc6:	b580      	push	{r7, lr}
 8003bc8:	b086      	sub	sp, #24
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	4603      	mov	r3, r0
 8003bce:	60b9      	str	r1, [r7, #8]
 8003bd0:	607a      	str	r2, [r7, #4]
 8003bd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003bd8:	f7ff ff3e 	bl	8003a58 <__NVIC_GetPriorityGrouping>
 8003bdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	68b9      	ldr	r1, [r7, #8]
 8003be2:	6978      	ldr	r0, [r7, #20]
 8003be4:	f7ff ff8e 	bl	8003b04 <NVIC_EncodePriority>
 8003be8:	4602      	mov	r2, r0
 8003bea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bee:	4611      	mov	r1, r2
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f7ff ff5d 	bl	8003ab0 <__NVIC_SetPriority>
}
 8003bf6:	bf00      	nop
 8003bf8:	3718      	adds	r7, #24
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}

08003bfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bfe:	b580      	push	{r7, lr}
 8003c00:	b082      	sub	sp, #8
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	4603      	mov	r3, r0
 8003c06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f7ff ff31 	bl	8003a74 <__NVIC_EnableIRQ>
}
 8003c12:	bf00      	nop
 8003c14:	3708      	adds	r7, #8
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}

08003c1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c1a:	b580      	push	{r7, lr}
 8003c1c:	b082      	sub	sp, #8
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f7ff ffa2 	bl	8003b6c <SysTick_Config>
 8003c28:	4603      	mov	r3, r0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3708      	adds	r7, #8
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
	...

08003c34 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b086      	sub	sp, #24
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003c40:	f7ff feb6 	bl	80039b0 <HAL_GetTick>
 8003c44:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d101      	bne.n	8003c50 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e099      	b.n	8003d84 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2202      	movs	r2, #2
 8003c54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f022 0201 	bic.w	r2, r2, #1
 8003c6e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c70:	e00f      	b.n	8003c92 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c72:	f7ff fe9d 	bl	80039b0 <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	2b05      	cmp	r3, #5
 8003c7e:	d908      	bls.n	8003c92 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2220      	movs	r2, #32
 8003c84:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2203      	movs	r2, #3
 8003c8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e078      	b.n	8003d84 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0301 	and.w	r3, r3, #1
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d1e8      	bne.n	8003c72 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003ca8:	697a      	ldr	r2, [r7, #20]
 8003caa:	4b38      	ldr	r3, [pc, #224]	; (8003d8c <HAL_DMA_Init+0x158>)
 8003cac:	4013      	ands	r3, r2
 8003cae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	685a      	ldr	r2, [r3, #4]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003cbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	691b      	ldr	r3, [r3, #16]
 8003cc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	699b      	ldr	r3, [r3, #24]
 8003cd0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cd6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a1b      	ldr	r3, [r3, #32]
 8003cdc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003cde:	697a      	ldr	r2, [r7, #20]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce8:	2b04      	cmp	r3, #4
 8003cea:	d107      	bne.n	8003cfc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	697a      	ldr	r2, [r7, #20]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	697a      	ldr	r2, [r7, #20]
 8003d02:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	695b      	ldr	r3, [r3, #20]
 8003d0a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	f023 0307 	bic.w	r3, r3, #7
 8003d12:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d18:	697a      	ldr	r2, [r7, #20]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d22:	2b04      	cmp	r3, #4
 8003d24:	d117      	bne.n	8003d56 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d2a:	697a      	ldr	r2, [r7, #20]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d00e      	beq.n	8003d56 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f000 fb01 	bl	8004340 <DMA_CheckFifoParam>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d008      	beq.n	8003d56 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2240      	movs	r2, #64	; 0x40
 8003d48:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003d52:	2301      	movs	r3, #1
 8003d54:	e016      	b.n	8003d84 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	697a      	ldr	r2, [r7, #20]
 8003d5c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 fab8 	bl	80042d4 <DMA_CalcBaseAndBitshift>
 8003d64:	4603      	mov	r3, r0
 8003d66:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d6c:	223f      	movs	r2, #63	; 0x3f
 8003d6e:	409a      	lsls	r2, r3
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003d82:	2300      	movs	r3, #0
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3718      	adds	r7, #24
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	f010803f 	.word	0xf010803f

08003d90 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b086      	sub	sp, #24
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	607a      	str	r2, [r7, #4]
 8003d9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003da6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d101      	bne.n	8003db6 <HAL_DMA_Start_IT+0x26>
 8003db2:	2302      	movs	r3, #2
 8003db4:	e040      	b.n	8003e38 <HAL_DMA_Start_IT+0xa8>
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2201      	movs	r2, #1
 8003dba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d12f      	bne.n	8003e2a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2202      	movs	r2, #2
 8003dce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	68b9      	ldr	r1, [r7, #8]
 8003dde:	68f8      	ldr	r0, [r7, #12]
 8003de0:	f000 fa4a 	bl	8004278 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003de8:	223f      	movs	r2, #63	; 0x3f
 8003dea:	409a      	lsls	r2, r3
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f042 0216 	orr.w	r2, r2, #22
 8003dfe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d007      	beq.n	8003e18 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f042 0208 	orr.w	r2, r2, #8
 8003e16:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f042 0201 	orr.w	r2, r2, #1
 8003e26:	601a      	str	r2, [r3, #0]
 8003e28:	e005      	b.n	8003e36 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003e32:	2302      	movs	r3, #2
 8003e34:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003e36:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3718      	adds	r7, #24
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e4c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003e4e:	f7ff fdaf 	bl	80039b0 <HAL_GetTick>
 8003e52:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d008      	beq.n	8003e72 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2280      	movs	r2, #128	; 0x80
 8003e64:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e052      	b.n	8003f18 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f022 0216 	bic.w	r2, r2, #22
 8003e80:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	695a      	ldr	r2, [r3, #20]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e90:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d103      	bne.n	8003ea2 <HAL_DMA_Abort+0x62>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d007      	beq.n	8003eb2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f022 0208 	bic.w	r2, r2, #8
 8003eb0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f022 0201 	bic.w	r2, r2, #1
 8003ec0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ec2:	e013      	b.n	8003eec <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ec4:	f7ff fd74 	bl	80039b0 <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	2b05      	cmp	r3, #5
 8003ed0:	d90c      	bls.n	8003eec <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2220      	movs	r2, #32
 8003ed6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2203      	movs	r2, #3
 8003edc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e015      	b.n	8003f18 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0301 	and.w	r3, r3, #1
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1e4      	bne.n	8003ec4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003efe:	223f      	movs	r2, #63	; 0x3f
 8003f00:	409a      	lsls	r2, r3
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2201      	movs	r2, #1
 8003f0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003f16:	2300      	movs	r3, #0
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3710      	adds	r7, #16
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d004      	beq.n	8003f3e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2280      	movs	r2, #128	; 0x80
 8003f38:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e00c      	b.n	8003f58 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2205      	movs	r2, #5
 8003f42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f022 0201 	bic.w	r2, r2, #1
 8003f54:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003f56:	2300      	movs	r3, #0
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b086      	sub	sp, #24
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003f70:	4b92      	ldr	r3, [pc, #584]	; (80041bc <HAL_DMA_IRQHandler+0x258>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a92      	ldr	r2, [pc, #584]	; (80041c0 <HAL_DMA_IRQHandler+0x25c>)
 8003f76:	fba2 2303 	umull	r2, r3, r2, r3
 8003f7a:	0a9b      	lsrs	r3, r3, #10
 8003f7c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f82:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f8e:	2208      	movs	r2, #8
 8003f90:	409a      	lsls	r2, r3
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	4013      	ands	r3, r2
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d01a      	beq.n	8003fd0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0304 	and.w	r3, r3, #4
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d013      	beq.n	8003fd0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f022 0204 	bic.w	r2, r2, #4
 8003fb6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fbc:	2208      	movs	r2, #8
 8003fbe:	409a      	lsls	r2, r3
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fc8:	f043 0201 	orr.w	r2, r3, #1
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	409a      	lsls	r2, r3
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	4013      	ands	r3, r2
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d012      	beq.n	8004006 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	695b      	ldr	r3, [r3, #20]
 8003fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00b      	beq.n	8004006 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	409a      	lsls	r2, r3
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ffe:	f043 0202 	orr.w	r2, r3, #2
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800400a:	2204      	movs	r2, #4
 800400c:	409a      	lsls	r2, r3
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	4013      	ands	r3, r2
 8004012:	2b00      	cmp	r3, #0
 8004014:	d012      	beq.n	800403c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0302 	and.w	r3, r3, #2
 8004020:	2b00      	cmp	r3, #0
 8004022:	d00b      	beq.n	800403c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004028:	2204      	movs	r2, #4
 800402a:	409a      	lsls	r2, r3
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004034:	f043 0204 	orr.w	r2, r3, #4
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004040:	2210      	movs	r2, #16
 8004042:	409a      	lsls	r2, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	4013      	ands	r3, r2
 8004048:	2b00      	cmp	r3, #0
 800404a:	d043      	beq.n	80040d4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 0308 	and.w	r3, r3, #8
 8004056:	2b00      	cmp	r3, #0
 8004058:	d03c      	beq.n	80040d4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800405e:	2210      	movs	r2, #16
 8004060:	409a      	lsls	r2, r3
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004070:	2b00      	cmp	r3, #0
 8004072:	d018      	beq.n	80040a6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d108      	bne.n	8004094 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004086:	2b00      	cmp	r3, #0
 8004088:	d024      	beq.n	80040d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	4798      	blx	r3
 8004092:	e01f      	b.n	80040d4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004098:	2b00      	cmp	r3, #0
 800409a:	d01b      	beq.n	80040d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	4798      	blx	r3
 80040a4:	e016      	b.n	80040d4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d107      	bne.n	80040c4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f022 0208 	bic.w	r2, r2, #8
 80040c2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d003      	beq.n	80040d4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040d8:	2220      	movs	r2, #32
 80040da:	409a      	lsls	r2, r3
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	4013      	ands	r3, r2
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	f000 808e 	beq.w	8004202 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0310 	and.w	r3, r3, #16
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	f000 8086 	beq.w	8004202 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040fa:	2220      	movs	r2, #32
 80040fc:	409a      	lsls	r2, r3
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004108:	b2db      	uxtb	r3, r3
 800410a:	2b05      	cmp	r3, #5
 800410c:	d136      	bne.n	800417c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f022 0216 	bic.w	r2, r2, #22
 800411c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	695a      	ldr	r2, [r3, #20]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800412c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004132:	2b00      	cmp	r3, #0
 8004134:	d103      	bne.n	800413e <HAL_DMA_IRQHandler+0x1da>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800413a:	2b00      	cmp	r3, #0
 800413c:	d007      	beq.n	800414e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f022 0208 	bic.w	r2, r2, #8
 800414c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004152:	223f      	movs	r2, #63	; 0x3f
 8004154:	409a      	lsls	r2, r3
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2201      	movs	r2, #1
 800415e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800416e:	2b00      	cmp	r3, #0
 8004170:	d07d      	beq.n	800426e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	4798      	blx	r3
        }
        return;
 800417a:	e078      	b.n	800426e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d01c      	beq.n	80041c4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d108      	bne.n	80041aa <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800419c:	2b00      	cmp	r3, #0
 800419e:	d030      	beq.n	8004202 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	4798      	blx	r3
 80041a8:	e02b      	b.n	8004202 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d027      	beq.n	8004202 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	4798      	blx	r3
 80041ba:	e022      	b.n	8004202 <HAL_DMA_IRQHandler+0x29e>
 80041bc:	20000008 	.word	0x20000008
 80041c0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10f      	bne.n	80041f2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f022 0210 	bic.w	r2, r2, #16
 80041e0:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2201      	movs	r2, #1
 80041e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d003      	beq.n	8004202 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004206:	2b00      	cmp	r3, #0
 8004208:	d032      	beq.n	8004270 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800420e:	f003 0301 	and.w	r3, r3, #1
 8004212:	2b00      	cmp	r3, #0
 8004214:	d022      	beq.n	800425c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2205      	movs	r2, #5
 800421a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f022 0201 	bic.w	r2, r2, #1
 800422c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	3301      	adds	r3, #1
 8004232:	60bb      	str	r3, [r7, #8]
 8004234:	697a      	ldr	r2, [r7, #20]
 8004236:	429a      	cmp	r2, r3
 8004238:	d307      	bcc.n	800424a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0301 	and.w	r3, r3, #1
 8004244:	2b00      	cmp	r3, #0
 8004246:	d1f2      	bne.n	800422e <HAL_DMA_IRQHandler+0x2ca>
 8004248:	e000      	b.n	800424c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800424a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004260:	2b00      	cmp	r3, #0
 8004262:	d005      	beq.n	8004270 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	4798      	blx	r3
 800426c:	e000      	b.n	8004270 <HAL_DMA_IRQHandler+0x30c>
        return;
 800426e:	bf00      	nop
    }
  }
}
 8004270:	3718      	adds	r7, #24
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop

08004278 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004278:	b480      	push	{r7}
 800427a:	b085      	sub	sp, #20
 800427c:	af00      	add	r7, sp, #0
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	60b9      	str	r1, [r7, #8]
 8004282:	607a      	str	r2, [r7, #4]
 8004284:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004294:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	683a      	ldr	r2, [r7, #0]
 800429c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	2b40      	cmp	r3, #64	; 0x40
 80042a4:	d108      	bne.n	80042b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	68ba      	ldr	r2, [r7, #8]
 80042b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80042b6:	e007      	b.n	80042c8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	68ba      	ldr	r2, [r7, #8]
 80042be:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	60da      	str	r2, [r3, #12]
}
 80042c8:	bf00      	nop
 80042ca:	3714      	adds	r7, #20
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b085      	sub	sp, #20
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	3b10      	subs	r3, #16
 80042e4:	4a14      	ldr	r2, [pc, #80]	; (8004338 <DMA_CalcBaseAndBitshift+0x64>)
 80042e6:	fba2 2303 	umull	r2, r3, r2, r3
 80042ea:	091b      	lsrs	r3, r3, #4
 80042ec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80042ee:	4a13      	ldr	r2, [pc, #76]	; (800433c <DMA_CalcBaseAndBitshift+0x68>)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	4413      	add	r3, r2
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	461a      	mov	r2, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2b03      	cmp	r3, #3
 8004300:	d909      	bls.n	8004316 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800430a:	f023 0303 	bic.w	r3, r3, #3
 800430e:	1d1a      	adds	r2, r3, #4
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	659a      	str	r2, [r3, #88]	; 0x58
 8004314:	e007      	b.n	8004326 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800431e:	f023 0303 	bic.w	r3, r3, #3
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800432a:	4618      	mov	r0, r3
 800432c:	3714      	adds	r7, #20
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr
 8004336:	bf00      	nop
 8004338:	aaaaaaab 	.word	0xaaaaaaab
 800433c:	0800e150 	.word	0x0800e150

08004340 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004340:	b480      	push	{r7}
 8004342:	b085      	sub	sp, #20
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004348:	2300      	movs	r3, #0
 800434a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004350:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	699b      	ldr	r3, [r3, #24]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d11f      	bne.n	800439a <DMA_CheckFifoParam+0x5a>
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	2b03      	cmp	r3, #3
 800435e:	d856      	bhi.n	800440e <DMA_CheckFifoParam+0xce>
 8004360:	a201      	add	r2, pc, #4	; (adr r2, 8004368 <DMA_CheckFifoParam+0x28>)
 8004362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004366:	bf00      	nop
 8004368:	08004379 	.word	0x08004379
 800436c:	0800438b 	.word	0x0800438b
 8004370:	08004379 	.word	0x08004379
 8004374:	0800440f 	.word	0x0800440f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800437c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004380:	2b00      	cmp	r3, #0
 8004382:	d046      	beq.n	8004412 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004388:	e043      	b.n	8004412 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800438e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004392:	d140      	bne.n	8004416 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004398:	e03d      	b.n	8004416 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	699b      	ldr	r3, [r3, #24]
 800439e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043a2:	d121      	bne.n	80043e8 <DMA_CheckFifoParam+0xa8>
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	2b03      	cmp	r3, #3
 80043a8:	d837      	bhi.n	800441a <DMA_CheckFifoParam+0xda>
 80043aa:	a201      	add	r2, pc, #4	; (adr r2, 80043b0 <DMA_CheckFifoParam+0x70>)
 80043ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043b0:	080043c1 	.word	0x080043c1
 80043b4:	080043c7 	.word	0x080043c7
 80043b8:	080043c1 	.word	0x080043c1
 80043bc:	080043d9 	.word	0x080043d9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	73fb      	strb	r3, [r7, #15]
      break;
 80043c4:	e030      	b.n	8004428 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d025      	beq.n	800441e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043d6:	e022      	b.n	800441e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043dc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80043e0:	d11f      	bne.n	8004422 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80043e6:	e01c      	b.n	8004422 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	2b02      	cmp	r3, #2
 80043ec:	d903      	bls.n	80043f6 <DMA_CheckFifoParam+0xb6>
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	2b03      	cmp	r3, #3
 80043f2:	d003      	beq.n	80043fc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80043f4:	e018      	b.n	8004428 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	73fb      	strb	r3, [r7, #15]
      break;
 80043fa:	e015      	b.n	8004428 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004400:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d00e      	beq.n	8004426 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	73fb      	strb	r3, [r7, #15]
      break;
 800440c:	e00b      	b.n	8004426 <DMA_CheckFifoParam+0xe6>
      break;
 800440e:	bf00      	nop
 8004410:	e00a      	b.n	8004428 <DMA_CheckFifoParam+0xe8>
      break;
 8004412:	bf00      	nop
 8004414:	e008      	b.n	8004428 <DMA_CheckFifoParam+0xe8>
      break;
 8004416:	bf00      	nop
 8004418:	e006      	b.n	8004428 <DMA_CheckFifoParam+0xe8>
      break;
 800441a:	bf00      	nop
 800441c:	e004      	b.n	8004428 <DMA_CheckFifoParam+0xe8>
      break;
 800441e:	bf00      	nop
 8004420:	e002      	b.n	8004428 <DMA_CheckFifoParam+0xe8>
      break;   
 8004422:	bf00      	nop
 8004424:	e000      	b.n	8004428 <DMA_CheckFifoParam+0xe8>
      break;
 8004426:	bf00      	nop
    }
  } 
  
  return status; 
 8004428:	7bfb      	ldrb	r3, [r7, #15]
}
 800442a:	4618      	mov	r0, r3
 800442c:	3714      	adds	r7, #20
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop

08004438 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004438:	b480      	push	{r7}
 800443a:	b089      	sub	sp, #36	; 0x24
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004442:	2300      	movs	r3, #0
 8004444:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004446:	2300      	movs	r3, #0
 8004448:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800444a:	2300      	movs	r3, #0
 800444c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800444e:	2300      	movs	r3, #0
 8004450:	61fb      	str	r3, [r7, #28]
 8004452:	e16b      	b.n	800472c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004454:	2201      	movs	r2, #1
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	fa02 f303 	lsl.w	r3, r2, r3
 800445c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	697a      	ldr	r2, [r7, #20]
 8004464:	4013      	ands	r3, r2
 8004466:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004468:	693a      	ldr	r2, [r7, #16]
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	429a      	cmp	r2, r3
 800446e:	f040 815a 	bne.w	8004726 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	f003 0303 	and.w	r3, r3, #3
 800447a:	2b01      	cmp	r3, #1
 800447c:	d005      	beq.n	800448a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004486:	2b02      	cmp	r3, #2
 8004488:	d130      	bne.n	80044ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	005b      	lsls	r3, r3, #1
 8004494:	2203      	movs	r2, #3
 8004496:	fa02 f303 	lsl.w	r3, r2, r3
 800449a:	43db      	mvns	r3, r3
 800449c:	69ba      	ldr	r2, [r7, #24]
 800449e:	4013      	ands	r3, r2
 80044a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	68da      	ldr	r2, [r3, #12]
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	005b      	lsls	r3, r3, #1
 80044aa:	fa02 f303 	lsl.w	r3, r2, r3
 80044ae:	69ba      	ldr	r2, [r7, #24]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	69ba      	ldr	r2, [r7, #24]
 80044b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80044c0:	2201      	movs	r2, #1
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	fa02 f303 	lsl.w	r3, r2, r3
 80044c8:	43db      	mvns	r3, r3
 80044ca:	69ba      	ldr	r2, [r7, #24]
 80044cc:	4013      	ands	r3, r2
 80044ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	091b      	lsrs	r3, r3, #4
 80044d6:	f003 0201 	and.w	r2, r3, #1
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	fa02 f303 	lsl.w	r3, r2, r3
 80044e0:	69ba      	ldr	r2, [r7, #24]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	69ba      	ldr	r2, [r7, #24]
 80044ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	f003 0303 	and.w	r3, r3, #3
 80044f4:	2b03      	cmp	r3, #3
 80044f6:	d017      	beq.n	8004528 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80044fe:	69fb      	ldr	r3, [r7, #28]
 8004500:	005b      	lsls	r3, r3, #1
 8004502:	2203      	movs	r2, #3
 8004504:	fa02 f303 	lsl.w	r3, r2, r3
 8004508:	43db      	mvns	r3, r3
 800450a:	69ba      	ldr	r2, [r7, #24]
 800450c:	4013      	ands	r3, r2
 800450e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	689a      	ldr	r2, [r3, #8]
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	005b      	lsls	r3, r3, #1
 8004518:	fa02 f303 	lsl.w	r3, r2, r3
 800451c:	69ba      	ldr	r2, [r7, #24]
 800451e:	4313      	orrs	r3, r2
 8004520:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	69ba      	ldr	r2, [r7, #24]
 8004526:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f003 0303 	and.w	r3, r3, #3
 8004530:	2b02      	cmp	r3, #2
 8004532:	d123      	bne.n	800457c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	08da      	lsrs	r2, r3, #3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	3208      	adds	r2, #8
 800453c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004540:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004542:	69fb      	ldr	r3, [r7, #28]
 8004544:	f003 0307 	and.w	r3, r3, #7
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	220f      	movs	r2, #15
 800454c:	fa02 f303 	lsl.w	r3, r2, r3
 8004550:	43db      	mvns	r3, r3
 8004552:	69ba      	ldr	r2, [r7, #24]
 8004554:	4013      	ands	r3, r2
 8004556:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	691a      	ldr	r2, [r3, #16]
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	f003 0307 	and.w	r3, r3, #7
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	fa02 f303 	lsl.w	r3, r2, r3
 8004568:	69ba      	ldr	r2, [r7, #24]
 800456a:	4313      	orrs	r3, r2
 800456c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	08da      	lsrs	r2, r3, #3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	3208      	adds	r2, #8
 8004576:	69b9      	ldr	r1, [r7, #24]
 8004578:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	005b      	lsls	r3, r3, #1
 8004586:	2203      	movs	r2, #3
 8004588:	fa02 f303 	lsl.w	r3, r2, r3
 800458c:	43db      	mvns	r3, r3
 800458e:	69ba      	ldr	r2, [r7, #24]
 8004590:	4013      	ands	r3, r2
 8004592:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	f003 0203 	and.w	r2, r3, #3
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	005b      	lsls	r3, r3, #1
 80045a0:	fa02 f303 	lsl.w	r3, r2, r3
 80045a4:	69ba      	ldr	r2, [r7, #24]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	69ba      	ldr	r2, [r7, #24]
 80045ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	f000 80b4 	beq.w	8004726 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045be:	2300      	movs	r3, #0
 80045c0:	60fb      	str	r3, [r7, #12]
 80045c2:	4b60      	ldr	r3, [pc, #384]	; (8004744 <HAL_GPIO_Init+0x30c>)
 80045c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045c6:	4a5f      	ldr	r2, [pc, #380]	; (8004744 <HAL_GPIO_Init+0x30c>)
 80045c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80045cc:	6453      	str	r3, [r2, #68]	; 0x44
 80045ce:	4b5d      	ldr	r3, [pc, #372]	; (8004744 <HAL_GPIO_Init+0x30c>)
 80045d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045d6:	60fb      	str	r3, [r7, #12]
 80045d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80045da:	4a5b      	ldr	r2, [pc, #364]	; (8004748 <HAL_GPIO_Init+0x310>)
 80045dc:	69fb      	ldr	r3, [r7, #28]
 80045de:	089b      	lsrs	r3, r3, #2
 80045e0:	3302      	adds	r3, #2
 80045e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	f003 0303 	and.w	r3, r3, #3
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	220f      	movs	r2, #15
 80045f2:	fa02 f303 	lsl.w	r3, r2, r3
 80045f6:	43db      	mvns	r3, r3
 80045f8:	69ba      	ldr	r2, [r7, #24]
 80045fa:	4013      	ands	r3, r2
 80045fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a52      	ldr	r2, [pc, #328]	; (800474c <HAL_GPIO_Init+0x314>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d02b      	beq.n	800465e <HAL_GPIO_Init+0x226>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a51      	ldr	r2, [pc, #324]	; (8004750 <HAL_GPIO_Init+0x318>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d025      	beq.n	800465a <HAL_GPIO_Init+0x222>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a50      	ldr	r2, [pc, #320]	; (8004754 <HAL_GPIO_Init+0x31c>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d01f      	beq.n	8004656 <HAL_GPIO_Init+0x21e>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a4f      	ldr	r2, [pc, #316]	; (8004758 <HAL_GPIO_Init+0x320>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d019      	beq.n	8004652 <HAL_GPIO_Init+0x21a>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a4e      	ldr	r2, [pc, #312]	; (800475c <HAL_GPIO_Init+0x324>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d013      	beq.n	800464e <HAL_GPIO_Init+0x216>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a4d      	ldr	r2, [pc, #308]	; (8004760 <HAL_GPIO_Init+0x328>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d00d      	beq.n	800464a <HAL_GPIO_Init+0x212>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a4c      	ldr	r2, [pc, #304]	; (8004764 <HAL_GPIO_Init+0x32c>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d007      	beq.n	8004646 <HAL_GPIO_Init+0x20e>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a4b      	ldr	r2, [pc, #300]	; (8004768 <HAL_GPIO_Init+0x330>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d101      	bne.n	8004642 <HAL_GPIO_Init+0x20a>
 800463e:	2307      	movs	r3, #7
 8004640:	e00e      	b.n	8004660 <HAL_GPIO_Init+0x228>
 8004642:	2308      	movs	r3, #8
 8004644:	e00c      	b.n	8004660 <HAL_GPIO_Init+0x228>
 8004646:	2306      	movs	r3, #6
 8004648:	e00a      	b.n	8004660 <HAL_GPIO_Init+0x228>
 800464a:	2305      	movs	r3, #5
 800464c:	e008      	b.n	8004660 <HAL_GPIO_Init+0x228>
 800464e:	2304      	movs	r3, #4
 8004650:	e006      	b.n	8004660 <HAL_GPIO_Init+0x228>
 8004652:	2303      	movs	r3, #3
 8004654:	e004      	b.n	8004660 <HAL_GPIO_Init+0x228>
 8004656:	2302      	movs	r3, #2
 8004658:	e002      	b.n	8004660 <HAL_GPIO_Init+0x228>
 800465a:	2301      	movs	r3, #1
 800465c:	e000      	b.n	8004660 <HAL_GPIO_Init+0x228>
 800465e:	2300      	movs	r3, #0
 8004660:	69fa      	ldr	r2, [r7, #28]
 8004662:	f002 0203 	and.w	r2, r2, #3
 8004666:	0092      	lsls	r2, r2, #2
 8004668:	4093      	lsls	r3, r2
 800466a:	69ba      	ldr	r2, [r7, #24]
 800466c:	4313      	orrs	r3, r2
 800466e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004670:	4935      	ldr	r1, [pc, #212]	; (8004748 <HAL_GPIO_Init+0x310>)
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	089b      	lsrs	r3, r3, #2
 8004676:	3302      	adds	r3, #2
 8004678:	69ba      	ldr	r2, [r7, #24]
 800467a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800467e:	4b3b      	ldr	r3, [pc, #236]	; (800476c <HAL_GPIO_Init+0x334>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	43db      	mvns	r3, r3
 8004688:	69ba      	ldr	r2, [r7, #24]
 800468a:	4013      	ands	r3, r2
 800468c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d003      	beq.n	80046a2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800469a:	69ba      	ldr	r2, [r7, #24]
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	4313      	orrs	r3, r2
 80046a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80046a2:	4a32      	ldr	r2, [pc, #200]	; (800476c <HAL_GPIO_Init+0x334>)
 80046a4:	69bb      	ldr	r3, [r7, #24]
 80046a6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80046a8:	4b30      	ldr	r3, [pc, #192]	; (800476c <HAL_GPIO_Init+0x334>)
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	43db      	mvns	r3, r3
 80046b2:	69ba      	ldr	r2, [r7, #24]
 80046b4:	4013      	ands	r3, r2
 80046b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d003      	beq.n	80046cc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80046c4:	69ba      	ldr	r2, [r7, #24]
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80046cc:	4a27      	ldr	r2, [pc, #156]	; (800476c <HAL_GPIO_Init+0x334>)
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80046d2:	4b26      	ldr	r3, [pc, #152]	; (800476c <HAL_GPIO_Init+0x334>)
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	43db      	mvns	r3, r3
 80046dc:	69ba      	ldr	r2, [r7, #24]
 80046de:	4013      	ands	r3, r2
 80046e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d003      	beq.n	80046f6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80046ee:	69ba      	ldr	r2, [r7, #24]
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80046f6:	4a1d      	ldr	r2, [pc, #116]	; (800476c <HAL_GPIO_Init+0x334>)
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80046fc:	4b1b      	ldr	r3, [pc, #108]	; (800476c <HAL_GPIO_Init+0x334>)
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	43db      	mvns	r3, r3
 8004706:	69ba      	ldr	r2, [r7, #24]
 8004708:	4013      	ands	r3, r2
 800470a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d003      	beq.n	8004720 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004718:	69ba      	ldr	r2, [r7, #24]
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	4313      	orrs	r3, r2
 800471e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004720:	4a12      	ldr	r2, [pc, #72]	; (800476c <HAL_GPIO_Init+0x334>)
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	3301      	adds	r3, #1
 800472a:	61fb      	str	r3, [r7, #28]
 800472c:	69fb      	ldr	r3, [r7, #28]
 800472e:	2b0f      	cmp	r3, #15
 8004730:	f67f ae90 	bls.w	8004454 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004734:	bf00      	nop
 8004736:	bf00      	nop
 8004738:	3724      	adds	r7, #36	; 0x24
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr
 8004742:	bf00      	nop
 8004744:	40023800 	.word	0x40023800
 8004748:	40013800 	.word	0x40013800
 800474c:	40020000 	.word	0x40020000
 8004750:	40020400 	.word	0x40020400
 8004754:	40020800 	.word	0x40020800
 8004758:	40020c00 	.word	0x40020c00
 800475c:	40021000 	.word	0x40021000
 8004760:	40021400 	.word	0x40021400
 8004764:	40021800 	.word	0x40021800
 8004768:	40021c00 	.word	0x40021c00
 800476c:	40013c00 	.word	0x40013c00

08004770 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004770:	b480      	push	{r7}
 8004772:	b085      	sub	sp, #20
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	460b      	mov	r3, r1
 800477a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	691a      	ldr	r2, [r3, #16]
 8004780:	887b      	ldrh	r3, [r7, #2]
 8004782:	4013      	ands	r3, r2
 8004784:	2b00      	cmp	r3, #0
 8004786:	d002      	beq.n	800478e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004788:	2301      	movs	r3, #1
 800478a:	73fb      	strb	r3, [r7, #15]
 800478c:	e001      	b.n	8004792 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800478e:	2300      	movs	r3, #0
 8004790:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004792:	7bfb      	ldrb	r3, [r7, #15]
}
 8004794:	4618      	mov	r0, r3
 8004796:	3714      	adds	r7, #20
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	460b      	mov	r3, r1
 80047aa:	807b      	strh	r3, [r7, #2]
 80047ac:	4613      	mov	r3, r2
 80047ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80047b0:	787b      	ldrb	r3, [r7, #1]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d003      	beq.n	80047be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80047b6:	887a      	ldrh	r2, [r7, #2]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80047bc:	e003      	b.n	80047c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80047be:	887b      	ldrh	r3, [r7, #2]
 80047c0:	041a      	lsls	r2, r3, #16
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	619a      	str	r2, [r3, #24]
}
 80047c6:	bf00      	nop
 80047c8:	370c      	adds	r7, #12
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr
	...

080047d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b082      	sub	sp, #8
 80047d8:	af00      	add	r7, sp, #0
 80047da:	4603      	mov	r3, r0
 80047dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80047de:	4b08      	ldr	r3, [pc, #32]	; (8004800 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80047e0:	695a      	ldr	r2, [r3, #20]
 80047e2:	88fb      	ldrh	r3, [r7, #6]
 80047e4:	4013      	ands	r3, r2
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d006      	beq.n	80047f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80047ea:	4a05      	ldr	r2, [pc, #20]	; (8004800 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80047ec:	88fb      	ldrh	r3, [r7, #6]
 80047ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80047f0:	88fb      	ldrh	r3, [r7, #6]
 80047f2:	4618      	mov	r0, r3
 80047f4:	f7fe f93c 	bl	8002a70 <HAL_GPIO_EXTI_Callback>
  }
}
 80047f8:	bf00      	nop
 80047fa:	3708      	adds	r7, #8
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}
 8004800:	40013c00 	.word	0x40013c00

08004804 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d101      	bne.n	8004816 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e12b      	b.n	8004a6e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800481c:	b2db      	uxtb	r3, r3
 800481e:	2b00      	cmp	r3, #0
 8004820:	d106      	bne.n	8004830 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f7fe fd6a 	bl	8003304 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2224      	movs	r2, #36	; 0x24
 8004834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f022 0201 	bic.w	r2, r2, #1
 8004846:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004856:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004866:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004868:	f001 fbd8 	bl	800601c <HAL_RCC_GetPCLK1Freq>
 800486c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	4a81      	ldr	r2, [pc, #516]	; (8004a78 <HAL_I2C_Init+0x274>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d807      	bhi.n	8004888 <HAL_I2C_Init+0x84>
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	4a80      	ldr	r2, [pc, #512]	; (8004a7c <HAL_I2C_Init+0x278>)
 800487c:	4293      	cmp	r3, r2
 800487e:	bf94      	ite	ls
 8004880:	2301      	movls	r3, #1
 8004882:	2300      	movhi	r3, #0
 8004884:	b2db      	uxtb	r3, r3
 8004886:	e006      	b.n	8004896 <HAL_I2C_Init+0x92>
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	4a7d      	ldr	r2, [pc, #500]	; (8004a80 <HAL_I2C_Init+0x27c>)
 800488c:	4293      	cmp	r3, r2
 800488e:	bf94      	ite	ls
 8004890:	2301      	movls	r3, #1
 8004892:	2300      	movhi	r3, #0
 8004894:	b2db      	uxtb	r3, r3
 8004896:	2b00      	cmp	r3, #0
 8004898:	d001      	beq.n	800489e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e0e7      	b.n	8004a6e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	4a78      	ldr	r2, [pc, #480]	; (8004a84 <HAL_I2C_Init+0x280>)
 80048a2:	fba2 2303 	umull	r2, r3, r2, r3
 80048a6:	0c9b      	lsrs	r3, r3, #18
 80048a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	68ba      	ldr	r2, [r7, #8]
 80048ba:	430a      	orrs	r2, r1
 80048bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	6a1b      	ldr	r3, [r3, #32]
 80048c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	4a6a      	ldr	r2, [pc, #424]	; (8004a78 <HAL_I2C_Init+0x274>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d802      	bhi.n	80048d8 <HAL_I2C_Init+0xd4>
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	3301      	adds	r3, #1
 80048d6:	e009      	b.n	80048ec <HAL_I2C_Init+0xe8>
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80048de:	fb02 f303 	mul.w	r3, r2, r3
 80048e2:	4a69      	ldr	r2, [pc, #420]	; (8004a88 <HAL_I2C_Init+0x284>)
 80048e4:	fba2 2303 	umull	r2, r3, r2, r3
 80048e8:	099b      	lsrs	r3, r3, #6
 80048ea:	3301      	adds	r3, #1
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	6812      	ldr	r2, [r2, #0]
 80048f0:	430b      	orrs	r3, r1
 80048f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	69db      	ldr	r3, [r3, #28]
 80048fa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80048fe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	495c      	ldr	r1, [pc, #368]	; (8004a78 <HAL_I2C_Init+0x274>)
 8004908:	428b      	cmp	r3, r1
 800490a:	d819      	bhi.n	8004940 <HAL_I2C_Init+0x13c>
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	1e59      	subs	r1, r3, #1
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	005b      	lsls	r3, r3, #1
 8004916:	fbb1 f3f3 	udiv	r3, r1, r3
 800491a:	1c59      	adds	r1, r3, #1
 800491c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004920:	400b      	ands	r3, r1
 8004922:	2b00      	cmp	r3, #0
 8004924:	d00a      	beq.n	800493c <HAL_I2C_Init+0x138>
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	1e59      	subs	r1, r3, #1
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	005b      	lsls	r3, r3, #1
 8004930:	fbb1 f3f3 	udiv	r3, r1, r3
 8004934:	3301      	adds	r3, #1
 8004936:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800493a:	e051      	b.n	80049e0 <HAL_I2C_Init+0x1dc>
 800493c:	2304      	movs	r3, #4
 800493e:	e04f      	b.n	80049e0 <HAL_I2C_Init+0x1dc>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d111      	bne.n	800496c <HAL_I2C_Init+0x168>
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	1e58      	subs	r0, r3, #1
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6859      	ldr	r1, [r3, #4]
 8004950:	460b      	mov	r3, r1
 8004952:	005b      	lsls	r3, r3, #1
 8004954:	440b      	add	r3, r1
 8004956:	fbb0 f3f3 	udiv	r3, r0, r3
 800495a:	3301      	adds	r3, #1
 800495c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004960:	2b00      	cmp	r3, #0
 8004962:	bf0c      	ite	eq
 8004964:	2301      	moveq	r3, #1
 8004966:	2300      	movne	r3, #0
 8004968:	b2db      	uxtb	r3, r3
 800496a:	e012      	b.n	8004992 <HAL_I2C_Init+0x18e>
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	1e58      	subs	r0, r3, #1
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6859      	ldr	r1, [r3, #4]
 8004974:	460b      	mov	r3, r1
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	440b      	add	r3, r1
 800497a:	0099      	lsls	r1, r3, #2
 800497c:	440b      	add	r3, r1
 800497e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004982:	3301      	adds	r3, #1
 8004984:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004988:	2b00      	cmp	r3, #0
 800498a:	bf0c      	ite	eq
 800498c:	2301      	moveq	r3, #1
 800498e:	2300      	movne	r3, #0
 8004990:	b2db      	uxtb	r3, r3
 8004992:	2b00      	cmp	r3, #0
 8004994:	d001      	beq.n	800499a <HAL_I2C_Init+0x196>
 8004996:	2301      	movs	r3, #1
 8004998:	e022      	b.n	80049e0 <HAL_I2C_Init+0x1dc>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d10e      	bne.n	80049c0 <HAL_I2C_Init+0x1bc>
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	1e58      	subs	r0, r3, #1
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6859      	ldr	r1, [r3, #4]
 80049aa:	460b      	mov	r3, r1
 80049ac:	005b      	lsls	r3, r3, #1
 80049ae:	440b      	add	r3, r1
 80049b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80049b4:	3301      	adds	r3, #1
 80049b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049be:	e00f      	b.n	80049e0 <HAL_I2C_Init+0x1dc>
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	1e58      	subs	r0, r3, #1
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6859      	ldr	r1, [r3, #4]
 80049c8:	460b      	mov	r3, r1
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	440b      	add	r3, r1
 80049ce:	0099      	lsls	r1, r3, #2
 80049d0:	440b      	add	r3, r1
 80049d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80049d6:	3301      	adds	r3, #1
 80049d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049e0:	6879      	ldr	r1, [r7, #4]
 80049e2:	6809      	ldr	r1, [r1, #0]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	69da      	ldr	r2, [r3, #28]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a1b      	ldr	r3, [r3, #32]
 80049fa:	431a      	orrs	r2, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	430a      	orrs	r2, r1
 8004a02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004a0e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	6911      	ldr	r1, [r2, #16]
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	68d2      	ldr	r2, [r2, #12]
 8004a1a:	4311      	orrs	r1, r2
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	6812      	ldr	r2, [r2, #0]
 8004a20:	430b      	orrs	r3, r1
 8004a22:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	695a      	ldr	r2, [r3, #20]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	699b      	ldr	r3, [r3, #24]
 8004a36:	431a      	orrs	r2, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	430a      	orrs	r2, r1
 8004a3e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f042 0201 	orr.w	r2, r2, #1
 8004a4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2220      	movs	r2, #32
 8004a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a6c:	2300      	movs	r3, #0
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3710      	adds	r7, #16
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	000186a0 	.word	0x000186a0
 8004a7c:	001e847f 	.word	0x001e847f
 8004a80:	003d08ff 	.word	0x003d08ff
 8004a84:	431bde83 	.word	0x431bde83
 8004a88:	10624dd3 	.word	0x10624dd3

08004a8c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b088      	sub	sp, #32
 8004a90:	af02      	add	r7, sp, #8
 8004a92:	60f8      	str	r0, [r7, #12]
 8004a94:	4608      	mov	r0, r1
 8004a96:	4611      	mov	r1, r2
 8004a98:	461a      	mov	r2, r3
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	817b      	strh	r3, [r7, #10]
 8004a9e:	460b      	mov	r3, r1
 8004aa0:	813b      	strh	r3, [r7, #8]
 8004aa2:	4613      	mov	r3, r2
 8004aa4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004aa6:	f7fe ff83 	bl	80039b0 <HAL_GetTick>
 8004aaa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	2b20      	cmp	r3, #32
 8004ab6:	f040 80d9 	bne.w	8004c6c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	9300      	str	r3, [sp, #0]
 8004abe:	2319      	movs	r3, #25
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	496d      	ldr	r1, [pc, #436]	; (8004c78 <HAL_I2C_Mem_Write+0x1ec>)
 8004ac4:	68f8      	ldr	r0, [r7, #12]
 8004ac6:	f000 fc7f 	bl	80053c8 <I2C_WaitOnFlagUntilTimeout>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d001      	beq.n	8004ad4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004ad0:	2302      	movs	r3, #2
 8004ad2:	e0cc      	b.n	8004c6e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d101      	bne.n	8004ae2 <HAL_I2C_Mem_Write+0x56>
 8004ade:	2302      	movs	r3, #2
 8004ae0:	e0c5      	b.n	8004c6e <HAL_I2C_Mem_Write+0x1e2>
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0301 	and.w	r3, r3, #1
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d007      	beq.n	8004b08 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f042 0201 	orr.w	r2, r2, #1
 8004b06:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b16:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2221      	movs	r2, #33	; 0x21
 8004b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2240      	movs	r2, #64	; 0x40
 8004b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6a3a      	ldr	r2, [r7, #32]
 8004b32:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004b38:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b3e:	b29a      	uxth	r2, r3
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	4a4d      	ldr	r2, [pc, #308]	; (8004c7c <HAL_I2C_Mem_Write+0x1f0>)
 8004b48:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b4a:	88f8      	ldrh	r0, [r7, #6]
 8004b4c:	893a      	ldrh	r2, [r7, #8]
 8004b4e:	8979      	ldrh	r1, [r7, #10]
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	9301      	str	r3, [sp, #4]
 8004b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b56:	9300      	str	r3, [sp, #0]
 8004b58:	4603      	mov	r3, r0
 8004b5a:	68f8      	ldr	r0, [r7, #12]
 8004b5c:	f000 fab6 	bl	80050cc <I2C_RequestMemoryWrite>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d052      	beq.n	8004c0c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e081      	b.n	8004c6e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b6a:	697a      	ldr	r2, [r7, #20]
 8004b6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b6e:	68f8      	ldr	r0, [r7, #12]
 8004b70:	f000 fd00 	bl	8005574 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d00d      	beq.n	8004b96 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7e:	2b04      	cmp	r3, #4
 8004b80:	d107      	bne.n	8004b92 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b90:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e06b      	b.n	8004c6e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9a:	781a      	ldrb	r2, [r3, #0]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba6:	1c5a      	adds	r2, r3, #1
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bb0:	3b01      	subs	r3, #1
 8004bb2:	b29a      	uxth	r2, r3
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	b29a      	uxth	r2, r3
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	695b      	ldr	r3, [r3, #20]
 8004bcc:	f003 0304 	and.w	r3, r3, #4
 8004bd0:	2b04      	cmp	r3, #4
 8004bd2:	d11b      	bne.n	8004c0c <HAL_I2C_Mem_Write+0x180>
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d017      	beq.n	8004c0c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be0:	781a      	ldrb	r2, [r3, #0]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bec:	1c5a      	adds	r2, r3, #1
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bf6:	3b01      	subs	r3, #1
 8004bf8:	b29a      	uxth	r2, r3
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	3b01      	subs	r3, #1
 8004c06:	b29a      	uxth	r2, r3
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d1aa      	bne.n	8004b6a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c14:	697a      	ldr	r2, [r7, #20]
 8004c16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c18:	68f8      	ldr	r0, [r7, #12]
 8004c1a:	f000 fcec 	bl	80055f6 <I2C_WaitOnBTFFlagUntilTimeout>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d00d      	beq.n	8004c40 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c28:	2b04      	cmp	r3, #4
 8004c2a:	d107      	bne.n	8004c3c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c3a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e016      	b.n	8004c6e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2220      	movs	r2, #32
 8004c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2200      	movs	r2, #0
 8004c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	e000      	b.n	8004c6e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004c6c:	2302      	movs	r3, #2
  }
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3718      	adds	r7, #24
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	00100002 	.word	0x00100002
 8004c7c:	ffff0000 	.word	0xffff0000

08004c80 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b08c      	sub	sp, #48	; 0x30
 8004c84:	af02      	add	r7, sp, #8
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	4608      	mov	r0, r1
 8004c8a:	4611      	mov	r1, r2
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	4603      	mov	r3, r0
 8004c90:	817b      	strh	r3, [r7, #10]
 8004c92:	460b      	mov	r3, r1
 8004c94:	813b      	strh	r3, [r7, #8]
 8004c96:	4613      	mov	r3, r2
 8004c98:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004c9a:	f7fe fe89 	bl	80039b0 <HAL_GetTick>
 8004c9e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	2b20      	cmp	r3, #32
 8004caa:	f040 8208 	bne.w	80050be <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb0:	9300      	str	r3, [sp, #0]
 8004cb2:	2319      	movs	r3, #25
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	497b      	ldr	r1, [pc, #492]	; (8004ea4 <HAL_I2C_Mem_Read+0x224>)
 8004cb8:	68f8      	ldr	r0, [r7, #12]
 8004cba:	f000 fb85 	bl	80053c8 <I2C_WaitOnFlagUntilTimeout>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d001      	beq.n	8004cc8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004cc4:	2302      	movs	r3, #2
 8004cc6:	e1fb      	b.n	80050c0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d101      	bne.n	8004cd6 <HAL_I2C_Mem_Read+0x56>
 8004cd2:	2302      	movs	r3, #2
 8004cd4:	e1f4      	b.n	80050c0 <HAL_I2C_Mem_Read+0x440>
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2201      	movs	r2, #1
 8004cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0301 	and.w	r3, r3, #1
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d007      	beq.n	8004cfc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f042 0201 	orr.w	r2, r2, #1
 8004cfa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d0a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2222      	movs	r2, #34	; 0x22
 8004d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2240      	movs	r2, #64	; 0x40
 8004d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d26:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004d2c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d32:	b29a      	uxth	r2, r3
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	4a5b      	ldr	r2, [pc, #364]	; (8004ea8 <HAL_I2C_Mem_Read+0x228>)
 8004d3c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d3e:	88f8      	ldrh	r0, [r7, #6]
 8004d40:	893a      	ldrh	r2, [r7, #8]
 8004d42:	8979      	ldrh	r1, [r7, #10]
 8004d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d46:	9301      	str	r3, [sp, #4]
 8004d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d4a:	9300      	str	r3, [sp, #0]
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	68f8      	ldr	r0, [r7, #12]
 8004d50:	f000 fa52 	bl	80051f8 <I2C_RequestMemoryRead>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d001      	beq.n	8004d5e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e1b0      	b.n	80050c0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d113      	bne.n	8004d8e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d66:	2300      	movs	r3, #0
 8004d68:	623b      	str	r3, [r7, #32]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	695b      	ldr	r3, [r3, #20]
 8004d70:	623b      	str	r3, [r7, #32]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	699b      	ldr	r3, [r3, #24]
 8004d78:	623b      	str	r3, [r7, #32]
 8004d7a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d8a:	601a      	str	r2, [r3, #0]
 8004d8c:	e184      	b.n	8005098 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d11b      	bne.n	8004dce <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004da4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004da6:	2300      	movs	r3, #0
 8004da8:	61fb      	str	r3, [r7, #28]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	695b      	ldr	r3, [r3, #20]
 8004db0:	61fb      	str	r3, [r7, #28]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	699b      	ldr	r3, [r3, #24]
 8004db8:	61fb      	str	r3, [r7, #28]
 8004dba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dca:	601a      	str	r2, [r3, #0]
 8004dcc:	e164      	b.n	8005098 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	d11b      	bne.n	8004e0e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004de4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004df4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004df6:	2300      	movs	r3, #0
 8004df8:	61bb      	str	r3, [r7, #24]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	695b      	ldr	r3, [r3, #20]
 8004e00:	61bb      	str	r3, [r7, #24]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	699b      	ldr	r3, [r3, #24]
 8004e08:	61bb      	str	r3, [r7, #24]
 8004e0a:	69bb      	ldr	r3, [r7, #24]
 8004e0c:	e144      	b.n	8005098 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e0e:	2300      	movs	r3, #0
 8004e10:	617b      	str	r3, [r7, #20]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	695b      	ldr	r3, [r3, #20]
 8004e18:	617b      	str	r3, [r7, #20]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	699b      	ldr	r3, [r3, #24]
 8004e20:	617b      	str	r3, [r7, #20]
 8004e22:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004e24:	e138      	b.n	8005098 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e2a:	2b03      	cmp	r3, #3
 8004e2c:	f200 80f1 	bhi.w	8005012 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d123      	bne.n	8004e80 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e3a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004e3c:	68f8      	ldr	r0, [r7, #12]
 8004e3e:	f000 fc1b 	bl	8005678 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004e42:	4603      	mov	r3, r0
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d001      	beq.n	8004e4c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e139      	b.n	80050c0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	691a      	ldr	r2, [r3, #16]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e56:	b2d2      	uxtb	r2, r2
 8004e58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5e:	1c5a      	adds	r2, r3, #1
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e68:	3b01      	subs	r3, #1
 8004e6a:	b29a      	uxth	r2, r3
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	3b01      	subs	r3, #1
 8004e78:	b29a      	uxth	r2, r3
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e7e:	e10b      	b.n	8005098 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e84:	2b02      	cmp	r3, #2
 8004e86:	d14e      	bne.n	8004f26 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8a:	9300      	str	r3, [sp, #0]
 8004e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e8e:	2200      	movs	r2, #0
 8004e90:	4906      	ldr	r1, [pc, #24]	; (8004eac <HAL_I2C_Mem_Read+0x22c>)
 8004e92:	68f8      	ldr	r0, [r7, #12]
 8004e94:	f000 fa98 	bl	80053c8 <I2C_WaitOnFlagUntilTimeout>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d008      	beq.n	8004eb0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e10e      	b.n	80050c0 <HAL_I2C_Mem_Read+0x440>
 8004ea2:	bf00      	nop
 8004ea4:	00100002 	.word	0x00100002
 8004ea8:	ffff0000 	.word	0xffff0000
 8004eac:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ebe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	691a      	ldr	r2, [r3, #16]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eca:	b2d2      	uxtb	r2, r2
 8004ecc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed2:	1c5a      	adds	r2, r3, #1
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004edc:	3b01      	subs	r3, #1
 8004ede:	b29a      	uxth	r2, r3
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	3b01      	subs	r3, #1
 8004eec:	b29a      	uxth	r2, r3
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	691a      	ldr	r2, [r3, #16]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efc:	b2d2      	uxtb	r2, r2
 8004efe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f04:	1c5a      	adds	r2, r3, #1
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f0e:	3b01      	subs	r3, #1
 8004f10:	b29a      	uxth	r2, r3
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	3b01      	subs	r3, #1
 8004f1e:	b29a      	uxth	r2, r3
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f24:	e0b8      	b.n	8005098 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f28:	9300      	str	r3, [sp, #0]
 8004f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	4966      	ldr	r1, [pc, #408]	; (80050c8 <HAL_I2C_Mem_Read+0x448>)
 8004f30:	68f8      	ldr	r0, [r7, #12]
 8004f32:	f000 fa49 	bl	80053c8 <I2C_WaitOnFlagUntilTimeout>
 8004f36:	4603      	mov	r3, r0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d001      	beq.n	8004f40 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e0bf      	b.n	80050c0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	691a      	ldr	r2, [r3, #16]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5a:	b2d2      	uxtb	r2, r2
 8004f5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f62:	1c5a      	adds	r2, r3, #1
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f6c:	3b01      	subs	r3, #1
 8004f6e:	b29a      	uxth	r2, r3
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	b29a      	uxth	r2, r3
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f84:	9300      	str	r3, [sp, #0]
 8004f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f88:	2200      	movs	r2, #0
 8004f8a:	494f      	ldr	r1, [pc, #316]	; (80050c8 <HAL_I2C_Mem_Read+0x448>)
 8004f8c:	68f8      	ldr	r0, [r7, #12]
 8004f8e:	f000 fa1b 	bl	80053c8 <I2C_WaitOnFlagUntilTimeout>
 8004f92:	4603      	mov	r3, r0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d001      	beq.n	8004f9c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e091      	b.n	80050c0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004faa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	691a      	ldr	r2, [r3, #16]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb6:	b2d2      	uxtb	r2, r2
 8004fb8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fbe:	1c5a      	adds	r2, r3, #1
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fc8:	3b01      	subs	r3, #1
 8004fca:	b29a      	uxth	r2, r3
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	b29a      	uxth	r2, r3
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	691a      	ldr	r2, [r3, #16]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe8:	b2d2      	uxtb	r2, r2
 8004fea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff0:	1c5a      	adds	r2, r3, #1
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	b29a      	uxth	r2, r3
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005006:	b29b      	uxth	r3, r3
 8005008:	3b01      	subs	r3, #1
 800500a:	b29a      	uxth	r2, r3
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005010:	e042      	b.n	8005098 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005014:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005016:	68f8      	ldr	r0, [r7, #12]
 8005018:	f000 fb2e 	bl	8005678 <I2C_WaitOnRXNEFlagUntilTimeout>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d001      	beq.n	8005026 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e04c      	b.n	80050c0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	691a      	ldr	r2, [r3, #16]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005030:	b2d2      	uxtb	r2, r2
 8005032:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005038:	1c5a      	adds	r2, r3, #1
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005042:	3b01      	subs	r3, #1
 8005044:	b29a      	uxth	r2, r3
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800504e:	b29b      	uxth	r3, r3
 8005050:	3b01      	subs	r3, #1
 8005052:	b29a      	uxth	r2, r3
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	695b      	ldr	r3, [r3, #20]
 800505e:	f003 0304 	and.w	r3, r3, #4
 8005062:	2b04      	cmp	r3, #4
 8005064:	d118      	bne.n	8005098 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	691a      	ldr	r2, [r3, #16]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005070:	b2d2      	uxtb	r2, r2
 8005072:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005078:	1c5a      	adds	r2, r3, #1
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005082:	3b01      	subs	r3, #1
 8005084:	b29a      	uxth	r2, r3
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800508e:	b29b      	uxth	r3, r3
 8005090:	3b01      	subs	r3, #1
 8005092:	b29a      	uxth	r2, r3
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800509c:	2b00      	cmp	r3, #0
 800509e:	f47f aec2 	bne.w	8004e26 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2220      	movs	r2, #32
 80050a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80050ba:	2300      	movs	r3, #0
 80050bc:	e000      	b.n	80050c0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80050be:	2302      	movs	r3, #2
  }
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3728      	adds	r7, #40	; 0x28
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	00010004 	.word	0x00010004

080050cc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b088      	sub	sp, #32
 80050d0:	af02      	add	r7, sp, #8
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	4608      	mov	r0, r1
 80050d6:	4611      	mov	r1, r2
 80050d8:	461a      	mov	r2, r3
 80050da:	4603      	mov	r3, r0
 80050dc:	817b      	strh	r3, [r7, #10]
 80050de:	460b      	mov	r3, r1
 80050e0:	813b      	strh	r3, [r7, #8]
 80050e2:	4613      	mov	r3, r2
 80050e4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050f4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f8:	9300      	str	r3, [sp, #0]
 80050fa:	6a3b      	ldr	r3, [r7, #32]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005102:	68f8      	ldr	r0, [r7, #12]
 8005104:	f000 f960 	bl	80053c8 <I2C_WaitOnFlagUntilTimeout>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d00d      	beq.n	800512a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005118:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800511c:	d103      	bne.n	8005126 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005124:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005126:	2303      	movs	r3, #3
 8005128:	e05f      	b.n	80051ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800512a:	897b      	ldrh	r3, [r7, #10]
 800512c:	b2db      	uxtb	r3, r3
 800512e:	461a      	mov	r2, r3
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005138:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800513a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513c:	6a3a      	ldr	r2, [r7, #32]
 800513e:	492d      	ldr	r1, [pc, #180]	; (80051f4 <I2C_RequestMemoryWrite+0x128>)
 8005140:	68f8      	ldr	r0, [r7, #12]
 8005142:	f000 f998 	bl	8005476 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005146:	4603      	mov	r3, r0
 8005148:	2b00      	cmp	r3, #0
 800514a:	d001      	beq.n	8005150 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	e04c      	b.n	80051ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005150:	2300      	movs	r3, #0
 8005152:	617b      	str	r3, [r7, #20]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	695b      	ldr	r3, [r3, #20]
 800515a:	617b      	str	r3, [r7, #20]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	699b      	ldr	r3, [r3, #24]
 8005162:	617b      	str	r3, [r7, #20]
 8005164:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005168:	6a39      	ldr	r1, [r7, #32]
 800516a:	68f8      	ldr	r0, [r7, #12]
 800516c:	f000 fa02 	bl	8005574 <I2C_WaitOnTXEFlagUntilTimeout>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d00d      	beq.n	8005192 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800517a:	2b04      	cmp	r3, #4
 800517c:	d107      	bne.n	800518e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800518c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e02b      	b.n	80051ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005192:	88fb      	ldrh	r3, [r7, #6]
 8005194:	2b01      	cmp	r3, #1
 8005196:	d105      	bne.n	80051a4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005198:	893b      	ldrh	r3, [r7, #8]
 800519a:	b2da      	uxtb	r2, r3
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	611a      	str	r2, [r3, #16]
 80051a2:	e021      	b.n	80051e8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80051a4:	893b      	ldrh	r3, [r7, #8]
 80051a6:	0a1b      	lsrs	r3, r3, #8
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	b2da      	uxtb	r2, r3
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051b4:	6a39      	ldr	r1, [r7, #32]
 80051b6:	68f8      	ldr	r0, [r7, #12]
 80051b8:	f000 f9dc 	bl	8005574 <I2C_WaitOnTXEFlagUntilTimeout>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d00d      	beq.n	80051de <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c6:	2b04      	cmp	r3, #4
 80051c8:	d107      	bne.n	80051da <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051d8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	e005      	b.n	80051ea <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80051de:	893b      	ldrh	r3, [r7, #8]
 80051e0:	b2da      	uxtb	r2, r3
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80051e8:	2300      	movs	r3, #0
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3718      	adds	r7, #24
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
 80051f2:	bf00      	nop
 80051f4:	00010002 	.word	0x00010002

080051f8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b088      	sub	sp, #32
 80051fc:	af02      	add	r7, sp, #8
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	4608      	mov	r0, r1
 8005202:	4611      	mov	r1, r2
 8005204:	461a      	mov	r2, r3
 8005206:	4603      	mov	r3, r0
 8005208:	817b      	strh	r3, [r7, #10]
 800520a:	460b      	mov	r3, r1
 800520c:	813b      	strh	r3, [r7, #8]
 800520e:	4613      	mov	r3, r2
 8005210:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005220:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005230:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005234:	9300      	str	r3, [sp, #0]
 8005236:	6a3b      	ldr	r3, [r7, #32]
 8005238:	2200      	movs	r2, #0
 800523a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800523e:	68f8      	ldr	r0, [r7, #12]
 8005240:	f000 f8c2 	bl	80053c8 <I2C_WaitOnFlagUntilTimeout>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d00d      	beq.n	8005266 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005254:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005258:	d103      	bne.n	8005262 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005260:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005262:	2303      	movs	r3, #3
 8005264:	e0aa      	b.n	80053bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005266:	897b      	ldrh	r3, [r7, #10]
 8005268:	b2db      	uxtb	r3, r3
 800526a:	461a      	mov	r2, r3
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005274:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005278:	6a3a      	ldr	r2, [r7, #32]
 800527a:	4952      	ldr	r1, [pc, #328]	; (80053c4 <I2C_RequestMemoryRead+0x1cc>)
 800527c:	68f8      	ldr	r0, [r7, #12]
 800527e:	f000 f8fa 	bl	8005476 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005282:	4603      	mov	r3, r0
 8005284:	2b00      	cmp	r3, #0
 8005286:	d001      	beq.n	800528c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	e097      	b.n	80053bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800528c:	2300      	movs	r3, #0
 800528e:	617b      	str	r3, [r7, #20]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	695b      	ldr	r3, [r3, #20]
 8005296:	617b      	str	r3, [r7, #20]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	699b      	ldr	r3, [r3, #24]
 800529e:	617b      	str	r3, [r7, #20]
 80052a0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052a4:	6a39      	ldr	r1, [r7, #32]
 80052a6:	68f8      	ldr	r0, [r7, #12]
 80052a8:	f000 f964 	bl	8005574 <I2C_WaitOnTXEFlagUntilTimeout>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d00d      	beq.n	80052ce <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b6:	2b04      	cmp	r3, #4
 80052b8:	d107      	bne.n	80052ca <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052c8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e076      	b.n	80053bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80052ce:	88fb      	ldrh	r3, [r7, #6]
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d105      	bne.n	80052e0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80052d4:	893b      	ldrh	r3, [r7, #8]
 80052d6:	b2da      	uxtb	r2, r3
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	611a      	str	r2, [r3, #16]
 80052de:	e021      	b.n	8005324 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80052e0:	893b      	ldrh	r3, [r7, #8]
 80052e2:	0a1b      	lsrs	r3, r3, #8
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	b2da      	uxtb	r2, r3
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052f0:	6a39      	ldr	r1, [r7, #32]
 80052f2:	68f8      	ldr	r0, [r7, #12]
 80052f4:	f000 f93e 	bl	8005574 <I2C_WaitOnTXEFlagUntilTimeout>
 80052f8:	4603      	mov	r3, r0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d00d      	beq.n	800531a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005302:	2b04      	cmp	r3, #4
 8005304:	d107      	bne.n	8005316 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005314:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e050      	b.n	80053bc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800531a:	893b      	ldrh	r3, [r7, #8]
 800531c:	b2da      	uxtb	r2, r3
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005324:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005326:	6a39      	ldr	r1, [r7, #32]
 8005328:	68f8      	ldr	r0, [r7, #12]
 800532a:	f000 f923 	bl	8005574 <I2C_WaitOnTXEFlagUntilTimeout>
 800532e:	4603      	mov	r3, r0
 8005330:	2b00      	cmp	r3, #0
 8005332:	d00d      	beq.n	8005350 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005338:	2b04      	cmp	r3, #4
 800533a:	d107      	bne.n	800534c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800534a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	e035      	b.n	80053bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800535e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005362:	9300      	str	r3, [sp, #0]
 8005364:	6a3b      	ldr	r3, [r7, #32]
 8005366:	2200      	movs	r2, #0
 8005368:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800536c:	68f8      	ldr	r0, [r7, #12]
 800536e:	f000 f82b 	bl	80053c8 <I2C_WaitOnFlagUntilTimeout>
 8005372:	4603      	mov	r3, r0
 8005374:	2b00      	cmp	r3, #0
 8005376:	d00d      	beq.n	8005394 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005382:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005386:	d103      	bne.n	8005390 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800538e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005390:	2303      	movs	r3, #3
 8005392:	e013      	b.n	80053bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005394:	897b      	ldrh	r3, [r7, #10]
 8005396:	b2db      	uxtb	r3, r3
 8005398:	f043 0301 	orr.w	r3, r3, #1
 800539c:	b2da      	uxtb	r2, r3
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80053a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a6:	6a3a      	ldr	r2, [r7, #32]
 80053a8:	4906      	ldr	r1, [pc, #24]	; (80053c4 <I2C_RequestMemoryRead+0x1cc>)
 80053aa:	68f8      	ldr	r0, [r7, #12]
 80053ac:	f000 f863 	bl	8005476 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053b0:	4603      	mov	r3, r0
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d001      	beq.n	80053ba <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e000      	b.n	80053bc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80053ba:	2300      	movs	r3, #0
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3718      	adds	r7, #24
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}
 80053c4:	00010002 	.word	0x00010002

080053c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b084      	sub	sp, #16
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	60b9      	str	r1, [r7, #8]
 80053d2:	603b      	str	r3, [r7, #0]
 80053d4:	4613      	mov	r3, r2
 80053d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053d8:	e025      	b.n	8005426 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053e0:	d021      	beq.n	8005426 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053e2:	f7fe fae5 	bl	80039b0 <HAL_GetTick>
 80053e6:	4602      	mov	r2, r0
 80053e8:	69bb      	ldr	r3, [r7, #24]
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	683a      	ldr	r2, [r7, #0]
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d302      	bcc.n	80053f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d116      	bne.n	8005426 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2200      	movs	r2, #0
 80053fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2220      	movs	r2, #32
 8005402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2200      	movs	r2, #0
 800540a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005412:	f043 0220 	orr.w	r2, r3, #32
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2200      	movs	r2, #0
 800541e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e023      	b.n	800546e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	0c1b      	lsrs	r3, r3, #16
 800542a:	b2db      	uxtb	r3, r3
 800542c:	2b01      	cmp	r3, #1
 800542e:	d10d      	bne.n	800544c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	695b      	ldr	r3, [r3, #20]
 8005436:	43da      	mvns	r2, r3
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	4013      	ands	r3, r2
 800543c:	b29b      	uxth	r3, r3
 800543e:	2b00      	cmp	r3, #0
 8005440:	bf0c      	ite	eq
 8005442:	2301      	moveq	r3, #1
 8005444:	2300      	movne	r3, #0
 8005446:	b2db      	uxtb	r3, r3
 8005448:	461a      	mov	r2, r3
 800544a:	e00c      	b.n	8005466 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	699b      	ldr	r3, [r3, #24]
 8005452:	43da      	mvns	r2, r3
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	4013      	ands	r3, r2
 8005458:	b29b      	uxth	r3, r3
 800545a:	2b00      	cmp	r3, #0
 800545c:	bf0c      	ite	eq
 800545e:	2301      	moveq	r3, #1
 8005460:	2300      	movne	r3, #0
 8005462:	b2db      	uxtb	r3, r3
 8005464:	461a      	mov	r2, r3
 8005466:	79fb      	ldrb	r3, [r7, #7]
 8005468:	429a      	cmp	r2, r3
 800546a:	d0b6      	beq.n	80053da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800546c:	2300      	movs	r3, #0
}
 800546e:	4618      	mov	r0, r3
 8005470:	3710      	adds	r7, #16
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}

08005476 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005476:	b580      	push	{r7, lr}
 8005478:	b084      	sub	sp, #16
 800547a:	af00      	add	r7, sp, #0
 800547c:	60f8      	str	r0, [r7, #12]
 800547e:	60b9      	str	r1, [r7, #8]
 8005480:	607a      	str	r2, [r7, #4]
 8005482:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005484:	e051      	b.n	800552a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	695b      	ldr	r3, [r3, #20]
 800548c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005490:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005494:	d123      	bne.n	80054de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054a4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80054ae:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2200      	movs	r2, #0
 80054b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2220      	movs	r2, #32
 80054ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2200      	movs	r2, #0
 80054c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ca:	f043 0204 	orr.w	r2, r3, #4
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2200      	movs	r2, #0
 80054d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e046      	b.n	800556c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054e4:	d021      	beq.n	800552a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054e6:	f7fe fa63 	bl	80039b0 <HAL_GetTick>
 80054ea:	4602      	mov	r2, r0
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	1ad3      	subs	r3, r2, r3
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d302      	bcc.n	80054fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d116      	bne.n	800552a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2200      	movs	r2, #0
 8005500:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2220      	movs	r2, #32
 8005506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2200      	movs	r2, #0
 800550e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005516:	f043 0220 	orr.w	r2, r3, #32
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2200      	movs	r2, #0
 8005522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e020      	b.n	800556c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	0c1b      	lsrs	r3, r3, #16
 800552e:	b2db      	uxtb	r3, r3
 8005530:	2b01      	cmp	r3, #1
 8005532:	d10c      	bne.n	800554e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	695b      	ldr	r3, [r3, #20]
 800553a:	43da      	mvns	r2, r3
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	4013      	ands	r3, r2
 8005540:	b29b      	uxth	r3, r3
 8005542:	2b00      	cmp	r3, #0
 8005544:	bf14      	ite	ne
 8005546:	2301      	movne	r3, #1
 8005548:	2300      	moveq	r3, #0
 800554a:	b2db      	uxtb	r3, r3
 800554c:	e00b      	b.n	8005566 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	699b      	ldr	r3, [r3, #24]
 8005554:	43da      	mvns	r2, r3
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	4013      	ands	r3, r2
 800555a:	b29b      	uxth	r3, r3
 800555c:	2b00      	cmp	r3, #0
 800555e:	bf14      	ite	ne
 8005560:	2301      	movne	r3, #1
 8005562:	2300      	moveq	r3, #0
 8005564:	b2db      	uxtb	r3, r3
 8005566:	2b00      	cmp	r3, #0
 8005568:	d18d      	bne.n	8005486 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800556a:	2300      	movs	r3, #0
}
 800556c:	4618      	mov	r0, r3
 800556e:	3710      	adds	r7, #16
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}

08005574 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b084      	sub	sp, #16
 8005578:	af00      	add	r7, sp, #0
 800557a:	60f8      	str	r0, [r7, #12]
 800557c:	60b9      	str	r1, [r7, #8]
 800557e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005580:	e02d      	b.n	80055de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005582:	68f8      	ldr	r0, [r7, #12]
 8005584:	f000 f8ce 	bl	8005724 <I2C_IsAcknowledgeFailed>
 8005588:	4603      	mov	r3, r0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d001      	beq.n	8005592 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	e02d      	b.n	80055ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005598:	d021      	beq.n	80055de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800559a:	f7fe fa09 	bl	80039b0 <HAL_GetTick>
 800559e:	4602      	mov	r2, r0
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	1ad3      	subs	r3, r2, r3
 80055a4:	68ba      	ldr	r2, [r7, #8]
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d302      	bcc.n	80055b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d116      	bne.n	80055de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2200      	movs	r2, #0
 80055b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2220      	movs	r2, #32
 80055ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ca:	f043 0220 	orr.w	r2, r3, #32
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e007      	b.n	80055ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	695b      	ldr	r3, [r3, #20]
 80055e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055e8:	2b80      	cmp	r3, #128	; 0x80
 80055ea:	d1ca      	bne.n	8005582 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80055ec:	2300      	movs	r3, #0
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3710      	adds	r7, #16
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}

080055f6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055f6:	b580      	push	{r7, lr}
 80055f8:	b084      	sub	sp, #16
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	60f8      	str	r0, [r7, #12]
 80055fe:	60b9      	str	r1, [r7, #8]
 8005600:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005602:	e02d      	b.n	8005660 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005604:	68f8      	ldr	r0, [r7, #12]
 8005606:	f000 f88d 	bl	8005724 <I2C_IsAcknowledgeFailed>
 800560a:	4603      	mov	r3, r0
 800560c:	2b00      	cmp	r3, #0
 800560e:	d001      	beq.n	8005614 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	e02d      	b.n	8005670 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800561a:	d021      	beq.n	8005660 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800561c:	f7fe f9c8 	bl	80039b0 <HAL_GetTick>
 8005620:	4602      	mov	r2, r0
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	68ba      	ldr	r2, [r7, #8]
 8005628:	429a      	cmp	r2, r3
 800562a:	d302      	bcc.n	8005632 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d116      	bne.n	8005660 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2200      	movs	r2, #0
 8005636:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2220      	movs	r2, #32
 800563c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2200      	movs	r2, #0
 8005644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800564c:	f043 0220 	orr.w	r2, r3, #32
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2200      	movs	r2, #0
 8005658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	e007      	b.n	8005670 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	695b      	ldr	r3, [r3, #20]
 8005666:	f003 0304 	and.w	r3, r3, #4
 800566a:	2b04      	cmp	r3, #4
 800566c:	d1ca      	bne.n	8005604 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800566e:	2300      	movs	r3, #0
}
 8005670:	4618      	mov	r0, r3
 8005672:	3710      	adds	r7, #16
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}

08005678 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b084      	sub	sp, #16
 800567c:	af00      	add	r7, sp, #0
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	60b9      	str	r1, [r7, #8]
 8005682:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005684:	e042      	b.n	800570c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	695b      	ldr	r3, [r3, #20]
 800568c:	f003 0310 	and.w	r3, r3, #16
 8005690:	2b10      	cmp	r3, #16
 8005692:	d119      	bne.n	80056c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f06f 0210 	mvn.w	r2, #16
 800569c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2200      	movs	r2, #0
 80056a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2220      	movs	r2, #32
 80056a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2200      	movs	r2, #0
 80056b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2200      	movs	r2, #0
 80056c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	e029      	b.n	800571c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056c8:	f7fe f972 	bl	80039b0 <HAL_GetTick>
 80056cc:	4602      	mov	r2, r0
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	68ba      	ldr	r2, [r7, #8]
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d302      	bcc.n	80056de <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d116      	bne.n	800570c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2200      	movs	r2, #0
 80056e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2220      	movs	r2, #32
 80056e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f8:	f043 0220 	orr.w	r2, r3, #32
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2200      	movs	r2, #0
 8005704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	e007      	b.n	800571c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	695b      	ldr	r3, [r3, #20]
 8005712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005716:	2b40      	cmp	r3, #64	; 0x40
 8005718:	d1b5      	bne.n	8005686 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800571a:	2300      	movs	r3, #0
}
 800571c:	4618      	mov	r0, r3
 800571e:	3710      	adds	r7, #16
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}

08005724 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005724:	b480      	push	{r7}
 8005726:	b083      	sub	sp, #12
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	695b      	ldr	r3, [r3, #20]
 8005732:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005736:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800573a:	d11b      	bne.n	8005774 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005744:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2200      	movs	r2, #0
 800574a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2220      	movs	r2, #32
 8005750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005760:	f043 0204 	orr.w	r2, r3, #4
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	e000      	b.n	8005776 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005774:	2300      	movs	r3, #0
}
 8005776:	4618      	mov	r0, r3
 8005778:	370c      	adds	r7, #12
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr
	...

08005784 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b086      	sub	sp, #24
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d101      	bne.n	8005796 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	e264      	b.n	8005c60 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f003 0301 	and.w	r3, r3, #1
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d075      	beq.n	800588e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80057a2:	4ba3      	ldr	r3, [pc, #652]	; (8005a30 <HAL_RCC_OscConfig+0x2ac>)
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	f003 030c 	and.w	r3, r3, #12
 80057aa:	2b04      	cmp	r3, #4
 80057ac:	d00c      	beq.n	80057c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057ae:	4ba0      	ldr	r3, [pc, #640]	; (8005a30 <HAL_RCC_OscConfig+0x2ac>)
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80057b6:	2b08      	cmp	r3, #8
 80057b8:	d112      	bne.n	80057e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057ba:	4b9d      	ldr	r3, [pc, #628]	; (8005a30 <HAL_RCC_OscConfig+0x2ac>)
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057c6:	d10b      	bne.n	80057e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057c8:	4b99      	ldr	r3, [pc, #612]	; (8005a30 <HAL_RCC_OscConfig+0x2ac>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d05b      	beq.n	800588c <HAL_RCC_OscConfig+0x108>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d157      	bne.n	800588c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	e23f      	b.n	8005c60 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057e8:	d106      	bne.n	80057f8 <HAL_RCC_OscConfig+0x74>
 80057ea:	4b91      	ldr	r3, [pc, #580]	; (8005a30 <HAL_RCC_OscConfig+0x2ac>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a90      	ldr	r2, [pc, #576]	; (8005a30 <HAL_RCC_OscConfig+0x2ac>)
 80057f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057f4:	6013      	str	r3, [r2, #0]
 80057f6:	e01d      	b.n	8005834 <HAL_RCC_OscConfig+0xb0>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005800:	d10c      	bne.n	800581c <HAL_RCC_OscConfig+0x98>
 8005802:	4b8b      	ldr	r3, [pc, #556]	; (8005a30 <HAL_RCC_OscConfig+0x2ac>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a8a      	ldr	r2, [pc, #552]	; (8005a30 <HAL_RCC_OscConfig+0x2ac>)
 8005808:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800580c:	6013      	str	r3, [r2, #0]
 800580e:	4b88      	ldr	r3, [pc, #544]	; (8005a30 <HAL_RCC_OscConfig+0x2ac>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a87      	ldr	r2, [pc, #540]	; (8005a30 <HAL_RCC_OscConfig+0x2ac>)
 8005814:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005818:	6013      	str	r3, [r2, #0]
 800581a:	e00b      	b.n	8005834 <HAL_RCC_OscConfig+0xb0>
 800581c:	4b84      	ldr	r3, [pc, #528]	; (8005a30 <HAL_RCC_OscConfig+0x2ac>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a83      	ldr	r2, [pc, #524]	; (8005a30 <HAL_RCC_OscConfig+0x2ac>)
 8005822:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005826:	6013      	str	r3, [r2, #0]
 8005828:	4b81      	ldr	r3, [pc, #516]	; (8005a30 <HAL_RCC_OscConfig+0x2ac>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a80      	ldr	r2, [pc, #512]	; (8005a30 <HAL_RCC_OscConfig+0x2ac>)
 800582e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005832:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d013      	beq.n	8005864 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800583c:	f7fe f8b8 	bl	80039b0 <HAL_GetTick>
 8005840:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005842:	e008      	b.n	8005856 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005844:	f7fe f8b4 	bl	80039b0 <HAL_GetTick>
 8005848:	4602      	mov	r2, r0
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	2b64      	cmp	r3, #100	; 0x64
 8005850:	d901      	bls.n	8005856 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005852:	2303      	movs	r3, #3
 8005854:	e204      	b.n	8005c60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005856:	4b76      	ldr	r3, [pc, #472]	; (8005a30 <HAL_RCC_OscConfig+0x2ac>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800585e:	2b00      	cmp	r3, #0
 8005860:	d0f0      	beq.n	8005844 <HAL_RCC_OscConfig+0xc0>
 8005862:	e014      	b.n	800588e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005864:	f7fe f8a4 	bl	80039b0 <HAL_GetTick>
 8005868:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800586a:	e008      	b.n	800587e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800586c:	f7fe f8a0 	bl	80039b0 <HAL_GetTick>
 8005870:	4602      	mov	r2, r0
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	1ad3      	subs	r3, r2, r3
 8005876:	2b64      	cmp	r3, #100	; 0x64
 8005878:	d901      	bls.n	800587e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800587a:	2303      	movs	r3, #3
 800587c:	e1f0      	b.n	8005c60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800587e:	4b6c      	ldr	r3, [pc, #432]	; (8005a30 <HAL_RCC_OscConfig+0x2ac>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005886:	2b00      	cmp	r3, #0
 8005888:	d1f0      	bne.n	800586c <HAL_RCC_OscConfig+0xe8>
 800588a:	e000      	b.n	800588e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800588c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 0302 	and.w	r3, r3, #2
 8005896:	2b00      	cmp	r3, #0
 8005898:	d063      	beq.n	8005962 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800589a:	4b65      	ldr	r3, [pc, #404]	; (8005a30 <HAL_RCC_OscConfig+0x2ac>)
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	f003 030c 	and.w	r3, r3, #12
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d00b      	beq.n	80058be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80058a6:	4b62      	ldr	r3, [pc, #392]	; (8005a30 <HAL_RCC_OscConfig+0x2ac>)
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80058ae:	2b08      	cmp	r3, #8
 80058b0:	d11c      	bne.n	80058ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80058b2:	4b5f      	ldr	r3, [pc, #380]	; (8005a30 <HAL_RCC_OscConfig+0x2ac>)
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d116      	bne.n	80058ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058be:	4b5c      	ldr	r3, [pc, #368]	; (8005a30 <HAL_RCC_OscConfig+0x2ac>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 0302 	and.w	r3, r3, #2
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d005      	beq.n	80058d6 <HAL_RCC_OscConfig+0x152>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	68db      	ldr	r3, [r3, #12]
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d001      	beq.n	80058d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	e1c4      	b.n	8005c60 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058d6:	4b56      	ldr	r3, [pc, #344]	; (8005a30 <HAL_RCC_OscConfig+0x2ac>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	00db      	lsls	r3, r3, #3
 80058e4:	4952      	ldr	r1, [pc, #328]	; (8005a30 <HAL_RCC_OscConfig+0x2ac>)
 80058e6:	4313      	orrs	r3, r2
 80058e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058ea:	e03a      	b.n	8005962 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	68db      	ldr	r3, [r3, #12]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d020      	beq.n	8005936 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80058f4:	4b4f      	ldr	r3, [pc, #316]	; (8005a34 <HAL_RCC_OscConfig+0x2b0>)
 80058f6:	2201      	movs	r2, #1
 80058f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058fa:	f7fe f859 	bl	80039b0 <HAL_GetTick>
 80058fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005900:	e008      	b.n	8005914 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005902:	f7fe f855 	bl	80039b0 <HAL_GetTick>
 8005906:	4602      	mov	r2, r0
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	1ad3      	subs	r3, r2, r3
 800590c:	2b02      	cmp	r3, #2
 800590e:	d901      	bls.n	8005914 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005910:	2303      	movs	r3, #3
 8005912:	e1a5      	b.n	8005c60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005914:	4b46      	ldr	r3, [pc, #280]	; (8005a30 <HAL_RCC_OscConfig+0x2ac>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f003 0302 	and.w	r3, r3, #2
 800591c:	2b00      	cmp	r3, #0
 800591e:	d0f0      	beq.n	8005902 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005920:	4b43      	ldr	r3, [pc, #268]	; (8005a30 <HAL_RCC_OscConfig+0x2ac>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	691b      	ldr	r3, [r3, #16]
 800592c:	00db      	lsls	r3, r3, #3
 800592e:	4940      	ldr	r1, [pc, #256]	; (8005a30 <HAL_RCC_OscConfig+0x2ac>)
 8005930:	4313      	orrs	r3, r2
 8005932:	600b      	str	r3, [r1, #0]
 8005934:	e015      	b.n	8005962 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005936:	4b3f      	ldr	r3, [pc, #252]	; (8005a34 <HAL_RCC_OscConfig+0x2b0>)
 8005938:	2200      	movs	r2, #0
 800593a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800593c:	f7fe f838 	bl	80039b0 <HAL_GetTick>
 8005940:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005942:	e008      	b.n	8005956 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005944:	f7fe f834 	bl	80039b0 <HAL_GetTick>
 8005948:	4602      	mov	r2, r0
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	1ad3      	subs	r3, r2, r3
 800594e:	2b02      	cmp	r3, #2
 8005950:	d901      	bls.n	8005956 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005952:	2303      	movs	r3, #3
 8005954:	e184      	b.n	8005c60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005956:	4b36      	ldr	r3, [pc, #216]	; (8005a30 <HAL_RCC_OscConfig+0x2ac>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 0302 	and.w	r3, r3, #2
 800595e:	2b00      	cmp	r3, #0
 8005960:	d1f0      	bne.n	8005944 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f003 0308 	and.w	r3, r3, #8
 800596a:	2b00      	cmp	r3, #0
 800596c:	d030      	beq.n	80059d0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	695b      	ldr	r3, [r3, #20]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d016      	beq.n	80059a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005976:	4b30      	ldr	r3, [pc, #192]	; (8005a38 <HAL_RCC_OscConfig+0x2b4>)
 8005978:	2201      	movs	r2, #1
 800597a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800597c:	f7fe f818 	bl	80039b0 <HAL_GetTick>
 8005980:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005982:	e008      	b.n	8005996 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005984:	f7fe f814 	bl	80039b0 <HAL_GetTick>
 8005988:	4602      	mov	r2, r0
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	1ad3      	subs	r3, r2, r3
 800598e:	2b02      	cmp	r3, #2
 8005990:	d901      	bls.n	8005996 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005992:	2303      	movs	r3, #3
 8005994:	e164      	b.n	8005c60 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005996:	4b26      	ldr	r3, [pc, #152]	; (8005a30 <HAL_RCC_OscConfig+0x2ac>)
 8005998:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800599a:	f003 0302 	and.w	r3, r3, #2
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d0f0      	beq.n	8005984 <HAL_RCC_OscConfig+0x200>
 80059a2:	e015      	b.n	80059d0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059a4:	4b24      	ldr	r3, [pc, #144]	; (8005a38 <HAL_RCC_OscConfig+0x2b4>)
 80059a6:	2200      	movs	r2, #0
 80059a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059aa:	f7fe f801 	bl	80039b0 <HAL_GetTick>
 80059ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059b0:	e008      	b.n	80059c4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80059b2:	f7fd fffd 	bl	80039b0 <HAL_GetTick>
 80059b6:	4602      	mov	r2, r0
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	1ad3      	subs	r3, r2, r3
 80059bc:	2b02      	cmp	r3, #2
 80059be:	d901      	bls.n	80059c4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80059c0:	2303      	movs	r3, #3
 80059c2:	e14d      	b.n	8005c60 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059c4:	4b1a      	ldr	r3, [pc, #104]	; (8005a30 <HAL_RCC_OscConfig+0x2ac>)
 80059c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059c8:	f003 0302 	and.w	r3, r3, #2
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d1f0      	bne.n	80059b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f003 0304 	and.w	r3, r3, #4
 80059d8:	2b00      	cmp	r3, #0
 80059da:	f000 80a0 	beq.w	8005b1e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059de:	2300      	movs	r3, #0
 80059e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059e2:	4b13      	ldr	r3, [pc, #76]	; (8005a30 <HAL_RCC_OscConfig+0x2ac>)
 80059e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d10f      	bne.n	8005a0e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059ee:	2300      	movs	r3, #0
 80059f0:	60bb      	str	r3, [r7, #8]
 80059f2:	4b0f      	ldr	r3, [pc, #60]	; (8005a30 <HAL_RCC_OscConfig+0x2ac>)
 80059f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f6:	4a0e      	ldr	r2, [pc, #56]	; (8005a30 <HAL_RCC_OscConfig+0x2ac>)
 80059f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059fc:	6413      	str	r3, [r2, #64]	; 0x40
 80059fe:	4b0c      	ldr	r3, [pc, #48]	; (8005a30 <HAL_RCC_OscConfig+0x2ac>)
 8005a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a06:	60bb      	str	r3, [r7, #8]
 8005a08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a0e:	4b0b      	ldr	r3, [pc, #44]	; (8005a3c <HAL_RCC_OscConfig+0x2b8>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d121      	bne.n	8005a5e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a1a:	4b08      	ldr	r3, [pc, #32]	; (8005a3c <HAL_RCC_OscConfig+0x2b8>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a07      	ldr	r2, [pc, #28]	; (8005a3c <HAL_RCC_OscConfig+0x2b8>)
 8005a20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a26:	f7fd ffc3 	bl	80039b0 <HAL_GetTick>
 8005a2a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a2c:	e011      	b.n	8005a52 <HAL_RCC_OscConfig+0x2ce>
 8005a2e:	bf00      	nop
 8005a30:	40023800 	.word	0x40023800
 8005a34:	42470000 	.word	0x42470000
 8005a38:	42470e80 	.word	0x42470e80
 8005a3c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a40:	f7fd ffb6 	bl	80039b0 <HAL_GetTick>
 8005a44:	4602      	mov	r2, r0
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	1ad3      	subs	r3, r2, r3
 8005a4a:	2b02      	cmp	r3, #2
 8005a4c:	d901      	bls.n	8005a52 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005a4e:	2303      	movs	r3, #3
 8005a50:	e106      	b.n	8005c60 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a52:	4b85      	ldr	r3, [pc, #532]	; (8005c68 <HAL_RCC_OscConfig+0x4e4>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d0f0      	beq.n	8005a40 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d106      	bne.n	8005a74 <HAL_RCC_OscConfig+0x2f0>
 8005a66:	4b81      	ldr	r3, [pc, #516]	; (8005c6c <HAL_RCC_OscConfig+0x4e8>)
 8005a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a6a:	4a80      	ldr	r2, [pc, #512]	; (8005c6c <HAL_RCC_OscConfig+0x4e8>)
 8005a6c:	f043 0301 	orr.w	r3, r3, #1
 8005a70:	6713      	str	r3, [r2, #112]	; 0x70
 8005a72:	e01c      	b.n	8005aae <HAL_RCC_OscConfig+0x32a>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	2b05      	cmp	r3, #5
 8005a7a:	d10c      	bne.n	8005a96 <HAL_RCC_OscConfig+0x312>
 8005a7c:	4b7b      	ldr	r3, [pc, #492]	; (8005c6c <HAL_RCC_OscConfig+0x4e8>)
 8005a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a80:	4a7a      	ldr	r2, [pc, #488]	; (8005c6c <HAL_RCC_OscConfig+0x4e8>)
 8005a82:	f043 0304 	orr.w	r3, r3, #4
 8005a86:	6713      	str	r3, [r2, #112]	; 0x70
 8005a88:	4b78      	ldr	r3, [pc, #480]	; (8005c6c <HAL_RCC_OscConfig+0x4e8>)
 8005a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a8c:	4a77      	ldr	r2, [pc, #476]	; (8005c6c <HAL_RCC_OscConfig+0x4e8>)
 8005a8e:	f043 0301 	orr.w	r3, r3, #1
 8005a92:	6713      	str	r3, [r2, #112]	; 0x70
 8005a94:	e00b      	b.n	8005aae <HAL_RCC_OscConfig+0x32a>
 8005a96:	4b75      	ldr	r3, [pc, #468]	; (8005c6c <HAL_RCC_OscConfig+0x4e8>)
 8005a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a9a:	4a74      	ldr	r2, [pc, #464]	; (8005c6c <HAL_RCC_OscConfig+0x4e8>)
 8005a9c:	f023 0301 	bic.w	r3, r3, #1
 8005aa0:	6713      	str	r3, [r2, #112]	; 0x70
 8005aa2:	4b72      	ldr	r3, [pc, #456]	; (8005c6c <HAL_RCC_OscConfig+0x4e8>)
 8005aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aa6:	4a71      	ldr	r2, [pc, #452]	; (8005c6c <HAL_RCC_OscConfig+0x4e8>)
 8005aa8:	f023 0304 	bic.w	r3, r3, #4
 8005aac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d015      	beq.n	8005ae2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ab6:	f7fd ff7b 	bl	80039b0 <HAL_GetTick>
 8005aba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005abc:	e00a      	b.n	8005ad4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005abe:	f7fd ff77 	bl	80039b0 <HAL_GetTick>
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	1ad3      	subs	r3, r2, r3
 8005ac8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d901      	bls.n	8005ad4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005ad0:	2303      	movs	r3, #3
 8005ad2:	e0c5      	b.n	8005c60 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ad4:	4b65      	ldr	r3, [pc, #404]	; (8005c6c <HAL_RCC_OscConfig+0x4e8>)
 8005ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ad8:	f003 0302 	and.w	r3, r3, #2
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d0ee      	beq.n	8005abe <HAL_RCC_OscConfig+0x33a>
 8005ae0:	e014      	b.n	8005b0c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ae2:	f7fd ff65 	bl	80039b0 <HAL_GetTick>
 8005ae6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ae8:	e00a      	b.n	8005b00 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005aea:	f7fd ff61 	bl	80039b0 <HAL_GetTick>
 8005aee:	4602      	mov	r2, r0
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	1ad3      	subs	r3, r2, r3
 8005af4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d901      	bls.n	8005b00 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005afc:	2303      	movs	r3, #3
 8005afe:	e0af      	b.n	8005c60 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b00:	4b5a      	ldr	r3, [pc, #360]	; (8005c6c <HAL_RCC_OscConfig+0x4e8>)
 8005b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b04:	f003 0302 	and.w	r3, r3, #2
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d1ee      	bne.n	8005aea <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005b0c:	7dfb      	ldrb	r3, [r7, #23]
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d105      	bne.n	8005b1e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b12:	4b56      	ldr	r3, [pc, #344]	; (8005c6c <HAL_RCC_OscConfig+0x4e8>)
 8005b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b16:	4a55      	ldr	r2, [pc, #340]	; (8005c6c <HAL_RCC_OscConfig+0x4e8>)
 8005b18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b1c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	699b      	ldr	r3, [r3, #24]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	f000 809b 	beq.w	8005c5e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005b28:	4b50      	ldr	r3, [pc, #320]	; (8005c6c <HAL_RCC_OscConfig+0x4e8>)
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	f003 030c 	and.w	r3, r3, #12
 8005b30:	2b08      	cmp	r3, #8
 8005b32:	d05c      	beq.n	8005bee <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	699b      	ldr	r3, [r3, #24]
 8005b38:	2b02      	cmp	r3, #2
 8005b3a:	d141      	bne.n	8005bc0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b3c:	4b4c      	ldr	r3, [pc, #304]	; (8005c70 <HAL_RCC_OscConfig+0x4ec>)
 8005b3e:	2200      	movs	r2, #0
 8005b40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b42:	f7fd ff35 	bl	80039b0 <HAL_GetTick>
 8005b46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b48:	e008      	b.n	8005b5c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b4a:	f7fd ff31 	bl	80039b0 <HAL_GetTick>
 8005b4e:	4602      	mov	r2, r0
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	1ad3      	subs	r3, r2, r3
 8005b54:	2b02      	cmp	r3, #2
 8005b56:	d901      	bls.n	8005b5c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005b58:	2303      	movs	r3, #3
 8005b5a:	e081      	b.n	8005c60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b5c:	4b43      	ldr	r3, [pc, #268]	; (8005c6c <HAL_RCC_OscConfig+0x4e8>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d1f0      	bne.n	8005b4a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	69da      	ldr	r2, [r3, #28]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6a1b      	ldr	r3, [r3, #32]
 8005b70:	431a      	orrs	r2, r3
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b76:	019b      	lsls	r3, r3, #6
 8005b78:	431a      	orrs	r2, r3
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b7e:	085b      	lsrs	r3, r3, #1
 8005b80:	3b01      	subs	r3, #1
 8005b82:	041b      	lsls	r3, r3, #16
 8005b84:	431a      	orrs	r2, r3
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b8a:	061b      	lsls	r3, r3, #24
 8005b8c:	4937      	ldr	r1, [pc, #220]	; (8005c6c <HAL_RCC_OscConfig+0x4e8>)
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b92:	4b37      	ldr	r3, [pc, #220]	; (8005c70 <HAL_RCC_OscConfig+0x4ec>)
 8005b94:	2201      	movs	r2, #1
 8005b96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b98:	f7fd ff0a 	bl	80039b0 <HAL_GetTick>
 8005b9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b9e:	e008      	b.n	8005bb2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ba0:	f7fd ff06 	bl	80039b0 <HAL_GetTick>
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	1ad3      	subs	r3, r2, r3
 8005baa:	2b02      	cmp	r3, #2
 8005bac:	d901      	bls.n	8005bb2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005bae:	2303      	movs	r3, #3
 8005bb0:	e056      	b.n	8005c60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bb2:	4b2e      	ldr	r3, [pc, #184]	; (8005c6c <HAL_RCC_OscConfig+0x4e8>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d0f0      	beq.n	8005ba0 <HAL_RCC_OscConfig+0x41c>
 8005bbe:	e04e      	b.n	8005c5e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bc0:	4b2b      	ldr	r3, [pc, #172]	; (8005c70 <HAL_RCC_OscConfig+0x4ec>)
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bc6:	f7fd fef3 	bl	80039b0 <HAL_GetTick>
 8005bca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bcc:	e008      	b.n	8005be0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bce:	f7fd feef 	bl	80039b0 <HAL_GetTick>
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	1ad3      	subs	r3, r2, r3
 8005bd8:	2b02      	cmp	r3, #2
 8005bda:	d901      	bls.n	8005be0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005bdc:	2303      	movs	r3, #3
 8005bde:	e03f      	b.n	8005c60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005be0:	4b22      	ldr	r3, [pc, #136]	; (8005c6c <HAL_RCC_OscConfig+0x4e8>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d1f0      	bne.n	8005bce <HAL_RCC_OscConfig+0x44a>
 8005bec:	e037      	b.n	8005c5e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	699b      	ldr	r3, [r3, #24]
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d101      	bne.n	8005bfa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e032      	b.n	8005c60 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005bfa:	4b1c      	ldr	r3, [pc, #112]	; (8005c6c <HAL_RCC_OscConfig+0x4e8>)
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	699b      	ldr	r3, [r3, #24]
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d028      	beq.n	8005c5a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d121      	bne.n	8005c5a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d11a      	bne.n	8005c5a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c24:	68fa      	ldr	r2, [r7, #12]
 8005c26:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	687a      	ldr	r2, [r7, #4]
 8005c2e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005c30:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d111      	bne.n	8005c5a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c40:	085b      	lsrs	r3, r3, #1
 8005c42:	3b01      	subs	r3, #1
 8005c44:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d107      	bne.n	8005c5a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c54:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d001      	beq.n	8005c5e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e000      	b.n	8005c60 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005c5e:	2300      	movs	r3, #0
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3718      	adds	r7, #24
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}
 8005c68:	40007000 	.word	0x40007000
 8005c6c:	40023800 	.word	0x40023800
 8005c70:	42470060 	.word	0x42470060

08005c74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d101      	bne.n	8005c88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c84:	2301      	movs	r3, #1
 8005c86:	e0cc      	b.n	8005e22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c88:	4b68      	ldr	r3, [pc, #416]	; (8005e2c <HAL_RCC_ClockConfig+0x1b8>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 0307 	and.w	r3, r3, #7
 8005c90:	683a      	ldr	r2, [r7, #0]
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d90c      	bls.n	8005cb0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c96:	4b65      	ldr	r3, [pc, #404]	; (8005e2c <HAL_RCC_ClockConfig+0x1b8>)
 8005c98:	683a      	ldr	r2, [r7, #0]
 8005c9a:	b2d2      	uxtb	r2, r2
 8005c9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c9e:	4b63      	ldr	r3, [pc, #396]	; (8005e2c <HAL_RCC_ClockConfig+0x1b8>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f003 0307 	and.w	r3, r3, #7
 8005ca6:	683a      	ldr	r2, [r7, #0]
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d001      	beq.n	8005cb0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
 8005cae:	e0b8      	b.n	8005e22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f003 0302 	and.w	r3, r3, #2
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d020      	beq.n	8005cfe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f003 0304 	and.w	r3, r3, #4
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d005      	beq.n	8005cd4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005cc8:	4b59      	ldr	r3, [pc, #356]	; (8005e30 <HAL_RCC_ClockConfig+0x1bc>)
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	4a58      	ldr	r2, [pc, #352]	; (8005e30 <HAL_RCC_ClockConfig+0x1bc>)
 8005cce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005cd2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f003 0308 	and.w	r3, r3, #8
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d005      	beq.n	8005cec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005ce0:	4b53      	ldr	r3, [pc, #332]	; (8005e30 <HAL_RCC_ClockConfig+0x1bc>)
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	4a52      	ldr	r2, [pc, #328]	; (8005e30 <HAL_RCC_ClockConfig+0x1bc>)
 8005ce6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005cea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cec:	4b50      	ldr	r3, [pc, #320]	; (8005e30 <HAL_RCC_ClockConfig+0x1bc>)
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	494d      	ldr	r1, [pc, #308]	; (8005e30 <HAL_RCC_ClockConfig+0x1bc>)
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 0301 	and.w	r3, r3, #1
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d044      	beq.n	8005d94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	2b01      	cmp	r3, #1
 8005d10:	d107      	bne.n	8005d22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d12:	4b47      	ldr	r3, [pc, #284]	; (8005e30 <HAL_RCC_ClockConfig+0x1bc>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d119      	bne.n	8005d52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e07f      	b.n	8005e22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	2b02      	cmp	r3, #2
 8005d28:	d003      	beq.n	8005d32 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d2e:	2b03      	cmp	r3, #3
 8005d30:	d107      	bne.n	8005d42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d32:	4b3f      	ldr	r3, [pc, #252]	; (8005e30 <HAL_RCC_ClockConfig+0x1bc>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d109      	bne.n	8005d52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e06f      	b.n	8005e22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d42:	4b3b      	ldr	r3, [pc, #236]	; (8005e30 <HAL_RCC_ClockConfig+0x1bc>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 0302 	and.w	r3, r3, #2
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d101      	bne.n	8005d52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	e067      	b.n	8005e22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d52:	4b37      	ldr	r3, [pc, #220]	; (8005e30 <HAL_RCC_ClockConfig+0x1bc>)
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	f023 0203 	bic.w	r2, r3, #3
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	4934      	ldr	r1, [pc, #208]	; (8005e30 <HAL_RCC_ClockConfig+0x1bc>)
 8005d60:	4313      	orrs	r3, r2
 8005d62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d64:	f7fd fe24 	bl	80039b0 <HAL_GetTick>
 8005d68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d6a:	e00a      	b.n	8005d82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d6c:	f7fd fe20 	bl	80039b0 <HAL_GetTick>
 8005d70:	4602      	mov	r2, r0
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	1ad3      	subs	r3, r2, r3
 8005d76:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d901      	bls.n	8005d82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005d7e:	2303      	movs	r3, #3
 8005d80:	e04f      	b.n	8005e22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d82:	4b2b      	ldr	r3, [pc, #172]	; (8005e30 <HAL_RCC_ClockConfig+0x1bc>)
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	f003 020c 	and.w	r2, r3, #12
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	009b      	lsls	r3, r3, #2
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d1eb      	bne.n	8005d6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d94:	4b25      	ldr	r3, [pc, #148]	; (8005e2c <HAL_RCC_ClockConfig+0x1b8>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f003 0307 	and.w	r3, r3, #7
 8005d9c:	683a      	ldr	r2, [r7, #0]
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d20c      	bcs.n	8005dbc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005da2:	4b22      	ldr	r3, [pc, #136]	; (8005e2c <HAL_RCC_ClockConfig+0x1b8>)
 8005da4:	683a      	ldr	r2, [r7, #0]
 8005da6:	b2d2      	uxtb	r2, r2
 8005da8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005daa:	4b20      	ldr	r3, [pc, #128]	; (8005e2c <HAL_RCC_ClockConfig+0x1b8>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f003 0307 	and.w	r3, r3, #7
 8005db2:	683a      	ldr	r2, [r7, #0]
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d001      	beq.n	8005dbc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	e032      	b.n	8005e22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f003 0304 	and.w	r3, r3, #4
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d008      	beq.n	8005dda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005dc8:	4b19      	ldr	r3, [pc, #100]	; (8005e30 <HAL_RCC_ClockConfig+0x1bc>)
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	4916      	ldr	r1, [pc, #88]	; (8005e30 <HAL_RCC_ClockConfig+0x1bc>)
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f003 0308 	and.w	r3, r3, #8
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d009      	beq.n	8005dfa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005de6:	4b12      	ldr	r3, [pc, #72]	; (8005e30 <HAL_RCC_ClockConfig+0x1bc>)
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	691b      	ldr	r3, [r3, #16]
 8005df2:	00db      	lsls	r3, r3, #3
 8005df4:	490e      	ldr	r1, [pc, #56]	; (8005e30 <HAL_RCC_ClockConfig+0x1bc>)
 8005df6:	4313      	orrs	r3, r2
 8005df8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005dfa:	f000 f821 	bl	8005e40 <HAL_RCC_GetSysClockFreq>
 8005dfe:	4602      	mov	r2, r0
 8005e00:	4b0b      	ldr	r3, [pc, #44]	; (8005e30 <HAL_RCC_ClockConfig+0x1bc>)
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	091b      	lsrs	r3, r3, #4
 8005e06:	f003 030f 	and.w	r3, r3, #15
 8005e0a:	490a      	ldr	r1, [pc, #40]	; (8005e34 <HAL_RCC_ClockConfig+0x1c0>)
 8005e0c:	5ccb      	ldrb	r3, [r1, r3]
 8005e0e:	fa22 f303 	lsr.w	r3, r2, r3
 8005e12:	4a09      	ldr	r2, [pc, #36]	; (8005e38 <HAL_RCC_ClockConfig+0x1c4>)
 8005e14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005e16:	4b09      	ldr	r3, [pc, #36]	; (8005e3c <HAL_RCC_ClockConfig+0x1c8>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f7fd fd84 	bl	8003928 <HAL_InitTick>

  return HAL_OK;
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3710      	adds	r7, #16
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
 8005e2a:	bf00      	nop
 8005e2c:	40023c00 	.word	0x40023c00
 8005e30:	40023800 	.word	0x40023800
 8005e34:	0800e138 	.word	0x0800e138
 8005e38:	20000008 	.word	0x20000008
 8005e3c:	2000000c 	.word	0x2000000c

08005e40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e40:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005e44:	b084      	sub	sp, #16
 8005e46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	607b      	str	r3, [r7, #4]
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	60fb      	str	r3, [r7, #12]
 8005e50:	2300      	movs	r3, #0
 8005e52:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005e54:	2300      	movs	r3, #0
 8005e56:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e58:	4b67      	ldr	r3, [pc, #412]	; (8005ff8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	f003 030c 	and.w	r3, r3, #12
 8005e60:	2b08      	cmp	r3, #8
 8005e62:	d00d      	beq.n	8005e80 <HAL_RCC_GetSysClockFreq+0x40>
 8005e64:	2b08      	cmp	r3, #8
 8005e66:	f200 80bd 	bhi.w	8005fe4 <HAL_RCC_GetSysClockFreq+0x1a4>
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d002      	beq.n	8005e74 <HAL_RCC_GetSysClockFreq+0x34>
 8005e6e:	2b04      	cmp	r3, #4
 8005e70:	d003      	beq.n	8005e7a <HAL_RCC_GetSysClockFreq+0x3a>
 8005e72:	e0b7      	b.n	8005fe4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005e74:	4b61      	ldr	r3, [pc, #388]	; (8005ffc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005e76:	60bb      	str	r3, [r7, #8]
       break;
 8005e78:	e0b7      	b.n	8005fea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005e7a:	4b61      	ldr	r3, [pc, #388]	; (8006000 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005e7c:	60bb      	str	r3, [r7, #8]
      break;
 8005e7e:	e0b4      	b.n	8005fea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005e80:	4b5d      	ldr	r3, [pc, #372]	; (8005ff8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e88:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005e8a:	4b5b      	ldr	r3, [pc, #364]	; (8005ff8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d04d      	beq.n	8005f32 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e96:	4b58      	ldr	r3, [pc, #352]	; (8005ff8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	099b      	lsrs	r3, r3, #6
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	f04f 0300 	mov.w	r3, #0
 8005ea2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005ea6:	f04f 0100 	mov.w	r1, #0
 8005eaa:	ea02 0800 	and.w	r8, r2, r0
 8005eae:	ea03 0901 	and.w	r9, r3, r1
 8005eb2:	4640      	mov	r0, r8
 8005eb4:	4649      	mov	r1, r9
 8005eb6:	f04f 0200 	mov.w	r2, #0
 8005eba:	f04f 0300 	mov.w	r3, #0
 8005ebe:	014b      	lsls	r3, r1, #5
 8005ec0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005ec4:	0142      	lsls	r2, r0, #5
 8005ec6:	4610      	mov	r0, r2
 8005ec8:	4619      	mov	r1, r3
 8005eca:	ebb0 0008 	subs.w	r0, r0, r8
 8005ece:	eb61 0109 	sbc.w	r1, r1, r9
 8005ed2:	f04f 0200 	mov.w	r2, #0
 8005ed6:	f04f 0300 	mov.w	r3, #0
 8005eda:	018b      	lsls	r3, r1, #6
 8005edc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005ee0:	0182      	lsls	r2, r0, #6
 8005ee2:	1a12      	subs	r2, r2, r0
 8005ee4:	eb63 0301 	sbc.w	r3, r3, r1
 8005ee8:	f04f 0000 	mov.w	r0, #0
 8005eec:	f04f 0100 	mov.w	r1, #0
 8005ef0:	00d9      	lsls	r1, r3, #3
 8005ef2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005ef6:	00d0      	lsls	r0, r2, #3
 8005ef8:	4602      	mov	r2, r0
 8005efa:	460b      	mov	r3, r1
 8005efc:	eb12 0208 	adds.w	r2, r2, r8
 8005f00:	eb43 0309 	adc.w	r3, r3, r9
 8005f04:	f04f 0000 	mov.w	r0, #0
 8005f08:	f04f 0100 	mov.w	r1, #0
 8005f0c:	0259      	lsls	r1, r3, #9
 8005f0e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005f12:	0250      	lsls	r0, r2, #9
 8005f14:	4602      	mov	r2, r0
 8005f16:	460b      	mov	r3, r1
 8005f18:	4610      	mov	r0, r2
 8005f1a:	4619      	mov	r1, r3
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	461a      	mov	r2, r3
 8005f20:	f04f 0300 	mov.w	r3, #0
 8005f24:	f7fa feb0 	bl	8000c88 <__aeabi_uldivmod>
 8005f28:	4602      	mov	r2, r0
 8005f2a:	460b      	mov	r3, r1
 8005f2c:	4613      	mov	r3, r2
 8005f2e:	60fb      	str	r3, [r7, #12]
 8005f30:	e04a      	b.n	8005fc8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f32:	4b31      	ldr	r3, [pc, #196]	; (8005ff8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	099b      	lsrs	r3, r3, #6
 8005f38:	461a      	mov	r2, r3
 8005f3a:	f04f 0300 	mov.w	r3, #0
 8005f3e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005f42:	f04f 0100 	mov.w	r1, #0
 8005f46:	ea02 0400 	and.w	r4, r2, r0
 8005f4a:	ea03 0501 	and.w	r5, r3, r1
 8005f4e:	4620      	mov	r0, r4
 8005f50:	4629      	mov	r1, r5
 8005f52:	f04f 0200 	mov.w	r2, #0
 8005f56:	f04f 0300 	mov.w	r3, #0
 8005f5a:	014b      	lsls	r3, r1, #5
 8005f5c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005f60:	0142      	lsls	r2, r0, #5
 8005f62:	4610      	mov	r0, r2
 8005f64:	4619      	mov	r1, r3
 8005f66:	1b00      	subs	r0, r0, r4
 8005f68:	eb61 0105 	sbc.w	r1, r1, r5
 8005f6c:	f04f 0200 	mov.w	r2, #0
 8005f70:	f04f 0300 	mov.w	r3, #0
 8005f74:	018b      	lsls	r3, r1, #6
 8005f76:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005f7a:	0182      	lsls	r2, r0, #6
 8005f7c:	1a12      	subs	r2, r2, r0
 8005f7e:	eb63 0301 	sbc.w	r3, r3, r1
 8005f82:	f04f 0000 	mov.w	r0, #0
 8005f86:	f04f 0100 	mov.w	r1, #0
 8005f8a:	00d9      	lsls	r1, r3, #3
 8005f8c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005f90:	00d0      	lsls	r0, r2, #3
 8005f92:	4602      	mov	r2, r0
 8005f94:	460b      	mov	r3, r1
 8005f96:	1912      	adds	r2, r2, r4
 8005f98:	eb45 0303 	adc.w	r3, r5, r3
 8005f9c:	f04f 0000 	mov.w	r0, #0
 8005fa0:	f04f 0100 	mov.w	r1, #0
 8005fa4:	0299      	lsls	r1, r3, #10
 8005fa6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005faa:	0290      	lsls	r0, r2, #10
 8005fac:	4602      	mov	r2, r0
 8005fae:	460b      	mov	r3, r1
 8005fb0:	4610      	mov	r0, r2
 8005fb2:	4619      	mov	r1, r3
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	f04f 0300 	mov.w	r3, #0
 8005fbc:	f7fa fe64 	bl	8000c88 <__aeabi_uldivmod>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	460b      	mov	r3, r1
 8005fc4:	4613      	mov	r3, r2
 8005fc6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005fc8:	4b0b      	ldr	r3, [pc, #44]	; (8005ff8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	0c1b      	lsrs	r3, r3, #16
 8005fce:	f003 0303 	and.w	r3, r3, #3
 8005fd2:	3301      	adds	r3, #1
 8005fd4:	005b      	lsls	r3, r3, #1
 8005fd6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005fd8:	68fa      	ldr	r2, [r7, #12]
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fe0:	60bb      	str	r3, [r7, #8]
      break;
 8005fe2:	e002      	b.n	8005fea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005fe4:	4b05      	ldr	r3, [pc, #20]	; (8005ffc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005fe6:	60bb      	str	r3, [r7, #8]
      break;
 8005fe8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005fea:	68bb      	ldr	r3, [r7, #8]
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3710      	adds	r7, #16
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005ff6:	bf00      	nop
 8005ff8:	40023800 	.word	0x40023800
 8005ffc:	00f42400 	.word	0x00f42400
 8006000:	007a1200 	.word	0x007a1200

08006004 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006004:	b480      	push	{r7}
 8006006:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006008:	4b03      	ldr	r3, [pc, #12]	; (8006018 <HAL_RCC_GetHCLKFreq+0x14>)
 800600a:	681b      	ldr	r3, [r3, #0]
}
 800600c:	4618      	mov	r0, r3
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr
 8006016:	bf00      	nop
 8006018:	20000008 	.word	0x20000008

0800601c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006020:	f7ff fff0 	bl	8006004 <HAL_RCC_GetHCLKFreq>
 8006024:	4602      	mov	r2, r0
 8006026:	4b05      	ldr	r3, [pc, #20]	; (800603c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	0a9b      	lsrs	r3, r3, #10
 800602c:	f003 0307 	and.w	r3, r3, #7
 8006030:	4903      	ldr	r1, [pc, #12]	; (8006040 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006032:	5ccb      	ldrb	r3, [r1, r3]
 8006034:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006038:	4618      	mov	r0, r3
 800603a:	bd80      	pop	{r7, pc}
 800603c:	40023800 	.word	0x40023800
 8006040:	0800e148 	.word	0x0800e148

08006044 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006048:	f7ff ffdc 	bl	8006004 <HAL_RCC_GetHCLKFreq>
 800604c:	4602      	mov	r2, r0
 800604e:	4b05      	ldr	r3, [pc, #20]	; (8006064 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	0b5b      	lsrs	r3, r3, #13
 8006054:	f003 0307 	and.w	r3, r3, #7
 8006058:	4903      	ldr	r1, [pc, #12]	; (8006068 <HAL_RCC_GetPCLK2Freq+0x24>)
 800605a:	5ccb      	ldrb	r3, [r1, r3]
 800605c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006060:	4618      	mov	r0, r3
 8006062:	bd80      	pop	{r7, pc}
 8006064:	40023800 	.word	0x40023800
 8006068:	0800e148 	.word	0x0800e148

0800606c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b086      	sub	sp, #24
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006074:	2300      	movs	r3, #0
 8006076:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006078:	2300      	movs	r3, #0
 800607a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f003 0301 	and.w	r3, r3, #1
 8006084:	2b00      	cmp	r3, #0
 8006086:	d105      	bne.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006090:	2b00      	cmp	r3, #0
 8006092:	d035      	beq.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006094:	4b62      	ldr	r3, [pc, #392]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006096:	2200      	movs	r2, #0
 8006098:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800609a:	f7fd fc89 	bl	80039b0 <HAL_GetTick>
 800609e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80060a0:	e008      	b.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80060a2:	f7fd fc85 	bl	80039b0 <HAL_GetTick>
 80060a6:	4602      	mov	r2, r0
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	1ad3      	subs	r3, r2, r3
 80060ac:	2b02      	cmp	r3, #2
 80060ae:	d901      	bls.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80060b0:	2303      	movs	r3, #3
 80060b2:	e0b0      	b.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80060b4:	4b5b      	ldr	r3, [pc, #364]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d1f0      	bne.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	019a      	lsls	r2, r3, #6
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	071b      	lsls	r3, r3, #28
 80060cc:	4955      	ldr	r1, [pc, #340]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80060ce:	4313      	orrs	r3, r2
 80060d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80060d4:	4b52      	ldr	r3, [pc, #328]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80060d6:	2201      	movs	r2, #1
 80060d8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80060da:	f7fd fc69 	bl	80039b0 <HAL_GetTick>
 80060de:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80060e0:	e008      	b.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80060e2:	f7fd fc65 	bl	80039b0 <HAL_GetTick>
 80060e6:	4602      	mov	r2, r0
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	1ad3      	subs	r3, r2, r3
 80060ec:	2b02      	cmp	r3, #2
 80060ee:	d901      	bls.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80060f0:	2303      	movs	r3, #3
 80060f2:	e090      	b.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80060f4:	4b4b      	ldr	r3, [pc, #300]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d0f0      	beq.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f003 0302 	and.w	r3, r3, #2
 8006108:	2b00      	cmp	r3, #0
 800610a:	f000 8083 	beq.w	8006214 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800610e:	2300      	movs	r3, #0
 8006110:	60fb      	str	r3, [r7, #12]
 8006112:	4b44      	ldr	r3, [pc, #272]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006116:	4a43      	ldr	r2, [pc, #268]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006118:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800611c:	6413      	str	r3, [r2, #64]	; 0x40
 800611e:	4b41      	ldr	r3, [pc, #260]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006126:	60fb      	str	r3, [r7, #12]
 8006128:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800612a:	4b3f      	ldr	r3, [pc, #252]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a3e      	ldr	r2, [pc, #248]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006130:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006134:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006136:	f7fd fc3b 	bl	80039b0 <HAL_GetTick>
 800613a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800613c:	e008      	b.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800613e:	f7fd fc37 	bl	80039b0 <HAL_GetTick>
 8006142:	4602      	mov	r2, r0
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	1ad3      	subs	r3, r2, r3
 8006148:	2b02      	cmp	r3, #2
 800614a:	d901      	bls.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800614c:	2303      	movs	r3, #3
 800614e:	e062      	b.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006150:	4b35      	ldr	r3, [pc, #212]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006158:	2b00      	cmp	r3, #0
 800615a:	d0f0      	beq.n	800613e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800615c:	4b31      	ldr	r3, [pc, #196]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800615e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006160:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006164:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d02f      	beq.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x160>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006174:	693a      	ldr	r2, [r7, #16]
 8006176:	429a      	cmp	r2, r3
 8006178:	d028      	beq.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800617a:	4b2a      	ldr	r3, [pc, #168]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800617c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800617e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006182:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006184:	4b29      	ldr	r3, [pc, #164]	; (800622c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006186:	2201      	movs	r2, #1
 8006188:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800618a:	4b28      	ldr	r3, [pc, #160]	; (800622c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800618c:	2200      	movs	r2, #0
 800618e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006190:	4a24      	ldr	r2, [pc, #144]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006196:	4b23      	ldr	r3, [pc, #140]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800619a:	f003 0301 	and.w	r3, r3, #1
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d114      	bne.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80061a2:	f7fd fc05 	bl	80039b0 <HAL_GetTick>
 80061a6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061a8:	e00a      	b.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80061aa:	f7fd fc01 	bl	80039b0 <HAL_GetTick>
 80061ae:	4602      	mov	r2, r0
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	1ad3      	subs	r3, r2, r3
 80061b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d901      	bls.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80061bc:	2303      	movs	r3, #3
 80061be:	e02a      	b.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061c0:	4b18      	ldr	r3, [pc, #96]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80061c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061c4:	f003 0302 	and.w	r3, r3, #2
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d0ee      	beq.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	68db      	ldr	r3, [r3, #12]
 80061d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061d8:	d10d      	bne.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80061da:	4b12      	ldr	r3, [pc, #72]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80061ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061ee:	490d      	ldr	r1, [pc, #52]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80061f0:	4313      	orrs	r3, r2
 80061f2:	608b      	str	r3, [r1, #8]
 80061f4:	e005      	b.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80061f6:	4b0b      	ldr	r3, [pc, #44]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80061f8:	689b      	ldr	r3, [r3, #8]
 80061fa:	4a0a      	ldr	r2, [pc, #40]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80061fc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006200:	6093      	str	r3, [r2, #8]
 8006202:	4b08      	ldr	r3, [pc, #32]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006204:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	68db      	ldr	r3, [r3, #12]
 800620a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800620e:	4905      	ldr	r1, [pc, #20]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006210:	4313      	orrs	r3, r2
 8006212:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006214:	2300      	movs	r3, #0
}
 8006216:	4618      	mov	r0, r3
 8006218:	3718      	adds	r7, #24
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}
 800621e:	bf00      	nop
 8006220:	42470068 	.word	0x42470068
 8006224:	40023800 	.word	0x40023800
 8006228:	40007000 	.word	0x40007000
 800622c:	42470e40 	.word	0x42470e40

08006230 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b082      	sub	sp, #8
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d101      	bne.n	8006242 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800623e:	2301      	movs	r3, #1
 8006240:	e083      	b.n	800634a <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	7f5b      	ldrb	r3, [r3, #29]
 8006246:	b2db      	uxtb	r3, r3
 8006248:	2b00      	cmp	r3, #0
 800624a:	d105      	bne.n	8006258 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2200      	movs	r2, #0
 8006250:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f7fd f89e 	bl	8003394 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2202      	movs	r2, #2
 800625c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	22ca      	movs	r2, #202	; 0xca
 8006264:	625a      	str	r2, [r3, #36]	; 0x24
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	2253      	movs	r2, #83	; 0x53
 800626c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 f9fb 	bl	800666a <RTC_EnterInitMode>
 8006274:	4603      	mov	r3, r0
 8006276:	2b00      	cmp	r3, #0
 8006278:	d008      	beq.n	800628c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	22ff      	movs	r2, #255	; 0xff
 8006280:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2204      	movs	r2, #4
 8006286:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	e05e      	b.n	800634a <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	687a      	ldr	r2, [r7, #4]
 8006294:	6812      	ldr	r2, [r2, #0]
 8006296:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800629a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800629e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	6899      	ldr	r1, [r3, #8]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	685a      	ldr	r2, [r3, #4]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	691b      	ldr	r3, [r3, #16]
 80062ae:	431a      	orrs	r2, r3
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	695b      	ldr	r3, [r3, #20]
 80062b4:	431a      	orrs	r2, r3
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	430a      	orrs	r2, r1
 80062bc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	687a      	ldr	r2, [r7, #4]
 80062c4:	68d2      	ldr	r2, [r2, #12]
 80062c6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	6919      	ldr	r1, [r3, #16]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	041a      	lsls	r2, r3, #16
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	430a      	orrs	r2, r1
 80062da:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	68da      	ldr	r2, [r3, #12]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80062ea:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	f003 0320 	and.w	r3, r3, #32
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d10e      	bne.n	8006318 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f000 f98d 	bl	800661a <HAL_RTC_WaitForSynchro>
 8006300:	4603      	mov	r3, r0
 8006302:	2b00      	cmp	r3, #0
 8006304:	d008      	beq.n	8006318 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	22ff      	movs	r2, #255	; 0xff
 800630c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2204      	movs	r2, #4
 8006312:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8006314:	2301      	movs	r3, #1
 8006316:	e018      	b.n	800634a <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006326:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	699a      	ldr	r2, [r3, #24]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	430a      	orrs	r2, r1
 8006338:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	22ff      	movs	r2, #255	; 0xff
 8006340:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2201      	movs	r2, #1
 8006346:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8006348:	2300      	movs	r3, #0
  }
}
 800634a:	4618      	mov	r0, r3
 800634c:	3708      	adds	r7, #8
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}

08006352 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006352:	b590      	push	{r4, r7, lr}
 8006354:	b087      	sub	sp, #28
 8006356:	af00      	add	r7, sp, #0
 8006358:	60f8      	str	r0, [r7, #12]
 800635a:	60b9      	str	r1, [r7, #8]
 800635c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800635e:	2300      	movs	r3, #0
 8006360:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	7f1b      	ldrb	r3, [r3, #28]
 8006366:	2b01      	cmp	r3, #1
 8006368:	d101      	bne.n	800636e <HAL_RTC_SetTime+0x1c>
 800636a:	2302      	movs	r3, #2
 800636c:	e0aa      	b.n	80064c4 <HAL_RTC_SetTime+0x172>
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2201      	movs	r2, #1
 8006372:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2202      	movs	r2, #2
 8006378:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d126      	bne.n	80063ce <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800638a:	2b00      	cmp	r3, #0
 800638c:	d102      	bne.n	8006394 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	2200      	movs	r2, #0
 8006392:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	4618      	mov	r0, r3
 800639a:	f000 f992 	bl	80066c2 <RTC_ByteToBcd2>
 800639e:	4603      	mov	r3, r0
 80063a0:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	785b      	ldrb	r3, [r3, #1]
 80063a6:	4618      	mov	r0, r3
 80063a8:	f000 f98b 	bl	80066c2 <RTC_ByteToBcd2>
 80063ac:	4603      	mov	r3, r0
 80063ae:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80063b0:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	789b      	ldrb	r3, [r3, #2]
 80063b6:	4618      	mov	r0, r3
 80063b8:	f000 f983 	bl	80066c2 <RTC_ByteToBcd2>
 80063bc:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80063be:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	78db      	ldrb	r3, [r3, #3]
 80063c6:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80063c8:	4313      	orrs	r3, r2
 80063ca:	617b      	str	r3, [r7, #20]
 80063cc:	e018      	b.n	8006400 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d102      	bne.n	80063e2 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	2200      	movs	r2, #0
 80063e0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	781b      	ldrb	r3, [r3, #0]
 80063e6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	785b      	ldrb	r3, [r3, #1]
 80063ec:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80063ee:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80063f0:	68ba      	ldr	r2, [r7, #8]
 80063f2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80063f4:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	78db      	ldrb	r3, [r3, #3]
 80063fa:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80063fc:	4313      	orrs	r3, r2
 80063fe:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	22ca      	movs	r2, #202	; 0xca
 8006406:	625a      	str	r2, [r3, #36]	; 0x24
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	2253      	movs	r2, #83	; 0x53
 800640e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006410:	68f8      	ldr	r0, [r7, #12]
 8006412:	f000 f92a 	bl	800666a <RTC_EnterInitMode>
 8006416:	4603      	mov	r3, r0
 8006418:	2b00      	cmp	r3, #0
 800641a:	d00b      	beq.n	8006434 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	22ff      	movs	r2, #255	; 0xff
 8006422:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2204      	movs	r2, #4
 8006428:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2200      	movs	r2, #0
 800642e:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	e047      	b.n	80064c4 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681a      	ldr	r2, [r3, #0]
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800643e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006442:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	689a      	ldr	r2, [r3, #8]
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006452:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	6899      	ldr	r1, [r3, #8]
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	68da      	ldr	r2, [r3, #12]
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	691b      	ldr	r3, [r3, #16]
 8006462:	431a      	orrs	r2, r3
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	430a      	orrs	r2, r1
 800646a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	68da      	ldr	r2, [r3, #12]
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800647a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	f003 0320 	and.w	r3, r3, #32
 8006486:	2b00      	cmp	r3, #0
 8006488:	d111      	bne.n	80064ae <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800648a:	68f8      	ldr	r0, [r7, #12]
 800648c:	f000 f8c5 	bl	800661a <HAL_RTC_WaitForSynchro>
 8006490:	4603      	mov	r3, r0
 8006492:	2b00      	cmp	r3, #0
 8006494:	d00b      	beq.n	80064ae <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	22ff      	movs	r2, #255	; 0xff
 800649c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2204      	movs	r2, #4
 80064a2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2200      	movs	r2, #0
 80064a8:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80064aa:	2301      	movs	r3, #1
 80064ac:	e00a      	b.n	80064c4 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	22ff      	movs	r2, #255	; 0xff
 80064b4:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2201      	movs	r2, #1
 80064ba:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2200      	movs	r2, #0
 80064c0:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80064c2:	2300      	movs	r3, #0
  }
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	371c      	adds	r7, #28
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd90      	pop	{r4, r7, pc}

080064cc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80064cc:	b590      	push	{r4, r7, lr}
 80064ce:	b087      	sub	sp, #28
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	60f8      	str	r0, [r7, #12]
 80064d4:	60b9      	str	r1, [r7, #8]
 80064d6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80064d8:	2300      	movs	r3, #0
 80064da:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	7f1b      	ldrb	r3, [r3, #28]
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d101      	bne.n	80064e8 <HAL_RTC_SetDate+0x1c>
 80064e4:	2302      	movs	r3, #2
 80064e6:	e094      	b.n	8006612 <HAL_RTC_SetDate+0x146>
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2201      	movs	r2, #1
 80064ec:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2202      	movs	r2, #2
 80064f2:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d10e      	bne.n	8006518 <HAL_RTC_SetDate+0x4c>
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	785b      	ldrb	r3, [r3, #1]
 80064fe:	f003 0310 	and.w	r3, r3, #16
 8006502:	2b00      	cmp	r3, #0
 8006504:	d008      	beq.n	8006518 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	785b      	ldrb	r3, [r3, #1]
 800650a:	f023 0310 	bic.w	r3, r3, #16
 800650e:	b2db      	uxtb	r3, r3
 8006510:	330a      	adds	r3, #10
 8006512:	b2da      	uxtb	r2, r3
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d11c      	bne.n	8006558 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	78db      	ldrb	r3, [r3, #3]
 8006522:	4618      	mov	r0, r3
 8006524:	f000 f8cd 	bl	80066c2 <RTC_ByteToBcd2>
 8006528:	4603      	mov	r3, r0
 800652a:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	785b      	ldrb	r3, [r3, #1]
 8006530:	4618      	mov	r0, r3
 8006532:	f000 f8c6 	bl	80066c2 <RTC_ByteToBcd2>
 8006536:	4603      	mov	r3, r0
 8006538:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800653a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	789b      	ldrb	r3, [r3, #2]
 8006540:	4618      	mov	r0, r3
 8006542:	f000 f8be 	bl	80066c2 <RTC_ByteToBcd2>
 8006546:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006548:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	781b      	ldrb	r3, [r3, #0]
 8006550:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006552:	4313      	orrs	r3, r2
 8006554:	617b      	str	r3, [r7, #20]
 8006556:	e00e      	b.n	8006576 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	78db      	ldrb	r3, [r3, #3]
 800655c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	785b      	ldrb	r3, [r3, #1]
 8006562:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006564:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8006566:	68ba      	ldr	r2, [r7, #8]
 8006568:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800656a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006572:	4313      	orrs	r3, r2
 8006574:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	22ca      	movs	r2, #202	; 0xca
 800657c:	625a      	str	r2, [r3, #36]	; 0x24
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	2253      	movs	r2, #83	; 0x53
 8006584:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006586:	68f8      	ldr	r0, [r7, #12]
 8006588:	f000 f86f 	bl	800666a <RTC_EnterInitMode>
 800658c:	4603      	mov	r3, r0
 800658e:	2b00      	cmp	r3, #0
 8006590:	d00b      	beq.n	80065aa <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	22ff      	movs	r2, #255	; 0xff
 8006598:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2204      	movs	r2, #4
 800659e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2200      	movs	r2, #0
 80065a4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	e033      	b.n	8006612 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80065b4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80065b8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	68da      	ldr	r2, [r3, #12]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80065c8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	f003 0320 	and.w	r3, r3, #32
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d111      	bne.n	80065fc <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80065d8:	68f8      	ldr	r0, [r7, #12]
 80065da:	f000 f81e 	bl	800661a <HAL_RTC_WaitForSynchro>
 80065de:	4603      	mov	r3, r0
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d00b      	beq.n	80065fc <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	22ff      	movs	r2, #255	; 0xff
 80065ea:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2204      	movs	r2, #4
 80065f0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2200      	movs	r2, #0
 80065f6:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80065f8:	2301      	movs	r3, #1
 80065fa:	e00a      	b.n	8006612 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	22ff      	movs	r2, #255	; 0xff
 8006602:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2201      	movs	r2, #1
 8006608:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2200      	movs	r2, #0
 800660e:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8006610:	2300      	movs	r3, #0
  }
}
 8006612:	4618      	mov	r0, r3
 8006614:	371c      	adds	r7, #28
 8006616:	46bd      	mov	sp, r7
 8006618:	bd90      	pop	{r4, r7, pc}

0800661a <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800661a:	b580      	push	{r7, lr}
 800661c:	b084      	sub	sp, #16
 800661e:	af00      	add	r7, sp, #0
 8006620:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006622:	2300      	movs	r3, #0
 8006624:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	68da      	ldr	r2, [r3, #12]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006634:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006636:	f7fd f9bb 	bl	80039b0 <HAL_GetTick>
 800663a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800663c:	e009      	b.n	8006652 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800663e:	f7fd f9b7 	bl	80039b0 <HAL_GetTick>
 8006642:	4602      	mov	r2, r0
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	1ad3      	subs	r3, r2, r3
 8006648:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800664c:	d901      	bls.n	8006652 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800664e:	2303      	movs	r3, #3
 8006650:	e007      	b.n	8006662 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	68db      	ldr	r3, [r3, #12]
 8006658:	f003 0320 	and.w	r3, r3, #32
 800665c:	2b00      	cmp	r3, #0
 800665e:	d0ee      	beq.n	800663e <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006660:	2300      	movs	r3, #0
}
 8006662:	4618      	mov	r0, r3
 8006664:	3710      	adds	r7, #16
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}

0800666a <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800666a:	b580      	push	{r7, lr}
 800666c:	b084      	sub	sp, #16
 800666e:	af00      	add	r7, sp, #0
 8006670:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006672:	2300      	movs	r3, #0
 8006674:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	68db      	ldr	r3, [r3, #12]
 800667c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006680:	2b00      	cmp	r3, #0
 8006682:	d119      	bne.n	80066b8 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f04f 32ff 	mov.w	r2, #4294967295
 800668c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800668e:	f7fd f98f 	bl	80039b0 <HAL_GetTick>
 8006692:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006694:	e009      	b.n	80066aa <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006696:	f7fd f98b 	bl	80039b0 <HAL_GetTick>
 800669a:	4602      	mov	r2, r0
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	1ad3      	subs	r3, r2, r3
 80066a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80066a4:	d901      	bls.n	80066aa <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80066a6:	2303      	movs	r3, #3
 80066a8:	e007      	b.n	80066ba <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	68db      	ldr	r3, [r3, #12]
 80066b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d0ee      	beq.n	8006696 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80066b8:	2300      	movs	r3, #0
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3710      	adds	r7, #16
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}

080066c2 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80066c2:	b480      	push	{r7}
 80066c4:	b085      	sub	sp, #20
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	4603      	mov	r3, r0
 80066ca:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80066cc:	2300      	movs	r3, #0
 80066ce:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 80066d0:	e005      	b.n	80066de <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	3301      	adds	r3, #1
 80066d6:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80066d8:	79fb      	ldrb	r3, [r7, #7]
 80066da:	3b0a      	subs	r3, #10
 80066dc:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 80066de:	79fb      	ldrb	r3, [r7, #7]
 80066e0:	2b09      	cmp	r3, #9
 80066e2:	d8f6      	bhi.n	80066d2 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	011b      	lsls	r3, r3, #4
 80066ea:	b2da      	uxtb	r2, r3
 80066ec:	79fb      	ldrb	r3, [r7, #7]
 80066ee:	4313      	orrs	r3, r2
 80066f0:	b2db      	uxtb	r3, r3
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3714      	adds	r7, #20
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr

080066fe <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80066fe:	b480      	push	{r7}
 8006700:	b087      	sub	sp, #28
 8006702:	af00      	add	r7, sp, #0
 8006704:	60f8      	str	r0, [r7, #12]
 8006706:	60b9      	str	r1, [r7, #8]
 8006708:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800670a:	2300      	movs	r3, #0
 800670c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	3350      	adds	r3, #80	; 0x50
 8006714:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	697a      	ldr	r2, [r7, #20]
 800671c:	4413      	add	r3, r2
 800671e:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	687a      	ldr	r2, [r7, #4]
 8006724:	601a      	str	r2, [r3, #0]
}
 8006726:	bf00      	nop
 8006728:	371c      	adds	r7, #28
 800672a:	46bd      	mov	sp, r7
 800672c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006730:	4770      	bx	lr

08006732 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8006732:	b480      	push	{r7}
 8006734:	b085      	sub	sp, #20
 8006736:	af00      	add	r7, sp, #0
 8006738:	6078      	str	r0, [r7, #4]
 800673a:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800673c:	2300      	movs	r3, #0
 800673e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	3350      	adds	r3, #80	; 0x50
 8006746:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	009b      	lsls	r3, r3, #2
 800674c:	68fa      	ldr	r2, [r7, #12]
 800674e:	4413      	add	r3, r2
 8006750:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
}
 8006756:	4618      	mov	r0, r3
 8006758:	3714      	adds	r7, #20
 800675a:	46bd      	mov	sp, r7
 800675c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006760:	4770      	bx	lr

08006762 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006762:	b580      	push	{r7, lr}
 8006764:	b082      	sub	sp, #8
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d101      	bne.n	8006774 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006770:	2301      	movs	r3, #1
 8006772:	e07b      	b.n	800686c <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006778:	2b00      	cmp	r3, #0
 800677a:	d108      	bne.n	800678e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006784:	d009      	beq.n	800679a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2200      	movs	r2, #0
 800678a:	61da      	str	r2, [r3, #28]
 800678c:	e005      	b.n	800679a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2200      	movs	r2, #0
 8006798:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2200      	movs	r2, #0
 800679e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80067a6:	b2db      	uxtb	r3, r3
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d106      	bne.n	80067ba <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2200      	movs	r2, #0
 80067b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f7fc fe03 	bl	80033c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2202      	movs	r2, #2
 80067be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067d0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80067e2:	431a      	orrs	r2, r3
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	68db      	ldr	r3, [r3, #12]
 80067e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067ec:	431a      	orrs	r2, r3
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	691b      	ldr	r3, [r3, #16]
 80067f2:	f003 0302 	and.w	r3, r3, #2
 80067f6:	431a      	orrs	r2, r3
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	695b      	ldr	r3, [r3, #20]
 80067fc:	f003 0301 	and.w	r3, r3, #1
 8006800:	431a      	orrs	r2, r3
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	699b      	ldr	r3, [r3, #24]
 8006806:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800680a:	431a      	orrs	r2, r3
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	69db      	ldr	r3, [r3, #28]
 8006810:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006814:	431a      	orrs	r2, r3
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6a1b      	ldr	r3, [r3, #32]
 800681a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800681e:	ea42 0103 	orr.w	r1, r2, r3
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006826:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	430a      	orrs	r2, r1
 8006830:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	699b      	ldr	r3, [r3, #24]
 8006836:	0c1b      	lsrs	r3, r3, #16
 8006838:	f003 0104 	and.w	r1, r3, #4
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006840:	f003 0210 	and.w	r2, r3, #16
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	430a      	orrs	r2, r1
 800684a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	69da      	ldr	r2, [r3, #28]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800685a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2201      	movs	r2, #1
 8006866:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800686a:	2300      	movs	r3, #0
}
 800686c:	4618      	mov	r0, r3
 800686e:	3708      	adds	r7, #8
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}

08006874 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b088      	sub	sp, #32
 8006878:	af00      	add	r7, sp, #0
 800687a:	60f8      	str	r0, [r7, #12]
 800687c:	60b9      	str	r1, [r7, #8]
 800687e:	603b      	str	r3, [r7, #0]
 8006880:	4613      	mov	r3, r2
 8006882:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006884:	2300      	movs	r3, #0
 8006886:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800688e:	2b01      	cmp	r3, #1
 8006890:	d101      	bne.n	8006896 <HAL_SPI_Transmit+0x22>
 8006892:	2302      	movs	r3, #2
 8006894:	e126      	b.n	8006ae4 <HAL_SPI_Transmit+0x270>
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2201      	movs	r2, #1
 800689a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800689e:	f7fd f887 	bl	80039b0 <HAL_GetTick>
 80068a2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80068a4:	88fb      	ldrh	r3, [r7, #6]
 80068a6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80068ae:	b2db      	uxtb	r3, r3
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d002      	beq.n	80068ba <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80068b4:	2302      	movs	r3, #2
 80068b6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80068b8:	e10b      	b.n	8006ad2 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d002      	beq.n	80068c6 <HAL_SPI_Transmit+0x52>
 80068c0:	88fb      	ldrh	r3, [r7, #6]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d102      	bne.n	80068cc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80068c6:	2301      	movs	r3, #1
 80068c8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80068ca:	e102      	b.n	8006ad2 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2203      	movs	r2, #3
 80068d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2200      	movs	r2, #0
 80068d8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	68ba      	ldr	r2, [r7, #8]
 80068de:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	88fa      	ldrh	r2, [r7, #6]
 80068e4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	88fa      	ldrh	r2, [r7, #6]
 80068ea:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2200      	movs	r2, #0
 80068f0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2200      	movs	r2, #0
 80068f6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2200      	movs	r2, #0
 80068fc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2200      	movs	r2, #0
 8006902:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2200      	movs	r2, #0
 8006908:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006912:	d10f      	bne.n	8006934 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	681a      	ldr	r2, [r3, #0]
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006922:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006932:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800693e:	2b40      	cmp	r3, #64	; 0x40
 8006940:	d007      	beq.n	8006952 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	681a      	ldr	r2, [r3, #0]
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006950:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	68db      	ldr	r3, [r3, #12]
 8006956:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800695a:	d14b      	bne.n	80069f4 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d002      	beq.n	800696a <HAL_SPI_Transmit+0xf6>
 8006964:	8afb      	ldrh	r3, [r7, #22]
 8006966:	2b01      	cmp	r3, #1
 8006968:	d13e      	bne.n	80069e8 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800696e:	881a      	ldrh	r2, [r3, #0]
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800697a:	1c9a      	adds	r2, r3, #2
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006984:	b29b      	uxth	r3, r3
 8006986:	3b01      	subs	r3, #1
 8006988:	b29a      	uxth	r2, r3
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800698e:	e02b      	b.n	80069e8 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	f003 0302 	and.w	r3, r3, #2
 800699a:	2b02      	cmp	r3, #2
 800699c:	d112      	bne.n	80069c4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069a2:	881a      	ldrh	r2, [r3, #0]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ae:	1c9a      	adds	r2, r3, #2
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	3b01      	subs	r3, #1
 80069bc:	b29a      	uxth	r2, r3
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	86da      	strh	r2, [r3, #54]	; 0x36
 80069c2:	e011      	b.n	80069e8 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80069c4:	f7fc fff4 	bl	80039b0 <HAL_GetTick>
 80069c8:	4602      	mov	r2, r0
 80069ca:	69bb      	ldr	r3, [r7, #24]
 80069cc:	1ad3      	subs	r3, r2, r3
 80069ce:	683a      	ldr	r2, [r7, #0]
 80069d0:	429a      	cmp	r2, r3
 80069d2:	d803      	bhi.n	80069dc <HAL_SPI_Transmit+0x168>
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069da:	d102      	bne.n	80069e2 <HAL_SPI_Transmit+0x16e>
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d102      	bne.n	80069e8 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80069e2:	2303      	movs	r3, #3
 80069e4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80069e6:	e074      	b.n	8006ad2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d1ce      	bne.n	8006990 <HAL_SPI_Transmit+0x11c>
 80069f2:	e04c      	b.n	8006a8e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d002      	beq.n	8006a02 <HAL_SPI_Transmit+0x18e>
 80069fc:	8afb      	ldrh	r3, [r7, #22]
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d140      	bne.n	8006a84 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	330c      	adds	r3, #12
 8006a0c:	7812      	ldrb	r2, [r2, #0]
 8006a0e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a14:	1c5a      	adds	r2, r3, #1
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	3b01      	subs	r3, #1
 8006a22:	b29a      	uxth	r2, r3
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006a28:	e02c      	b.n	8006a84 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	f003 0302 	and.w	r3, r3, #2
 8006a34:	2b02      	cmp	r3, #2
 8006a36:	d113      	bne.n	8006a60 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	330c      	adds	r3, #12
 8006a42:	7812      	ldrb	r2, [r2, #0]
 8006a44:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a4a:	1c5a      	adds	r2, r3, #1
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a54:	b29b      	uxth	r3, r3
 8006a56:	3b01      	subs	r3, #1
 8006a58:	b29a      	uxth	r2, r3
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	86da      	strh	r2, [r3, #54]	; 0x36
 8006a5e:	e011      	b.n	8006a84 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a60:	f7fc ffa6 	bl	80039b0 <HAL_GetTick>
 8006a64:	4602      	mov	r2, r0
 8006a66:	69bb      	ldr	r3, [r7, #24]
 8006a68:	1ad3      	subs	r3, r2, r3
 8006a6a:	683a      	ldr	r2, [r7, #0]
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d803      	bhi.n	8006a78 <HAL_SPI_Transmit+0x204>
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a76:	d102      	bne.n	8006a7e <HAL_SPI_Transmit+0x20a>
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d102      	bne.n	8006a84 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006a7e:	2303      	movs	r3, #3
 8006a80:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006a82:	e026      	b.n	8006ad2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a88:	b29b      	uxth	r3, r3
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d1cd      	bne.n	8006a2a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006a8e:	69ba      	ldr	r2, [r7, #24]
 8006a90:	6839      	ldr	r1, [r7, #0]
 8006a92:	68f8      	ldr	r0, [r7, #12]
 8006a94:	f000 f9fe 	bl	8006e94 <SPI_EndRxTxTransaction>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d002      	beq.n	8006aa4 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2220      	movs	r2, #32
 8006aa2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	689b      	ldr	r3, [r3, #8]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d10a      	bne.n	8006ac2 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006aac:	2300      	movs	r3, #0
 8006aae:	613b      	str	r3, [r7, #16]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	68db      	ldr	r3, [r3, #12]
 8006ab6:	613b      	str	r3, [r7, #16]
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	613b      	str	r3, [r7, #16]
 8006ac0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d002      	beq.n	8006ad0 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006aca:	2301      	movs	r3, #1
 8006acc:	77fb      	strb	r3, [r7, #31]
 8006ace:	e000      	b.n	8006ad2 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006ad0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2200      	movs	r2, #0
 8006ade:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006ae2:	7ffb      	ldrb	r3, [r7, #31]
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3720      	adds	r7, #32
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}

08006aec <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b086      	sub	sp, #24
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	60f8      	str	r0, [r7, #12]
 8006af4:	60b9      	str	r1, [r7, #8]
 8006af6:	4613      	mov	r3, r2
 8006af8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006afa:	2300      	movs	r3, #0
 8006afc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	d101      	bne.n	8006b0c <HAL_SPI_Transmit_DMA+0x20>
 8006b08:	2302      	movs	r3, #2
 8006b0a:	e09b      	b.n	8006c44 <HAL_SPI_Transmit_DMA+0x158>
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2201      	movs	r2, #1
 8006b10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b1a:	b2db      	uxtb	r3, r3
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d002      	beq.n	8006b26 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8006b20:	2302      	movs	r3, #2
 8006b22:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006b24:	e089      	b.n	8006c3a <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d002      	beq.n	8006b32 <HAL_SPI_Transmit_DMA+0x46>
 8006b2c:	88fb      	ldrh	r3, [r7, #6]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d102      	bne.n	8006b38 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8006b32:	2301      	movs	r3, #1
 8006b34:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006b36:	e080      	b.n	8006c3a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2203      	movs	r2, #3
 8006b3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2200      	movs	r2, #0
 8006b44:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	68ba      	ldr	r2, [r7, #8]
 8006b4a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	88fa      	ldrh	r2, [r7, #6]
 8006b50:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	88fa      	ldrh	r2, [r7, #6]
 8006b56:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	2200      	movs	r2, #0
 8006b62:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2200      	movs	r2, #0
 8006b68:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	2200      	movs	r2, #0
 8006b74:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b7e:	d10f      	bne.n	8006ba0 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	681a      	ldr	r2, [r3, #0]
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b8e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	681a      	ldr	r2, [r3, #0]
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b9e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ba4:	4a29      	ldr	r2, [pc, #164]	; (8006c4c <HAL_SPI_Transmit_DMA+0x160>)
 8006ba6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bac:	4a28      	ldr	r2, [pc, #160]	; (8006c50 <HAL_SPI_Transmit_DMA+0x164>)
 8006bae:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bb4:	4a27      	ldr	r2, [pc, #156]	; (8006c54 <HAL_SPI_Transmit_DMA+0x168>)
 8006bb6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bc8:	4619      	mov	r1, r3
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	330c      	adds	r3, #12
 8006bd0:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006bd6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006bd8:	f7fd f8da 	bl	8003d90 <HAL_DMA_Start_IT>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d00c      	beq.n	8006bfc <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006be6:	f043 0210 	orr.w	r2, r3, #16
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8006bfa:	e01e      	b.n	8006c3a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c06:	2b40      	cmp	r3, #64	; 0x40
 8006c08:	d007      	beq.n	8006c1a <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	681a      	ldr	r2, [r3, #0]
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c18:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	685a      	ldr	r2, [r3, #4]
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f042 0220 	orr.w	r2, r2, #32
 8006c28:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	685a      	ldr	r2, [r3, #4]
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f042 0202 	orr.w	r2, r2, #2
 8006c38:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006c42:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3718      	adds	r7, #24
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}
 8006c4c:	08006d29 	.word	0x08006d29
 8006c50:	08006c81 	.word	0x08006c81
 8006c54:	08006d45 	.word	0x08006d45

08006c58 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b083      	sub	sp, #12
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8006c60:	bf00      	nop
 8006c62:	370c      	adds	r7, #12
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr

08006c6c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b083      	sub	sp, #12
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006c74:	bf00      	nop
 8006c76:	370c      	adds	r7, #12
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7e:	4770      	bx	lr

08006c80 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b086      	sub	sp, #24
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c8c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c8e:	f7fc fe8f 	bl	80039b0 <HAL_GetTick>
 8006c92:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ca2:	d03b      	beq.n	8006d1c <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	685a      	ldr	r2, [r3, #4]
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f022 0220 	bic.w	r2, r2, #32
 8006cb2:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	685a      	ldr	r2, [r3, #4]
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f022 0202 	bic.w	r2, r2, #2
 8006cc2:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006cc4:	693a      	ldr	r2, [r7, #16]
 8006cc6:	2164      	movs	r1, #100	; 0x64
 8006cc8:	6978      	ldr	r0, [r7, #20]
 8006cca:	f000 f8e3 	bl	8006e94 <SPI_EndRxTxTransaction>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d005      	beq.n	8006ce0 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cd8:	f043 0220 	orr.w	r2, r3, #32
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	689b      	ldr	r3, [r3, #8]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d10a      	bne.n	8006cfe <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006ce8:	2300      	movs	r3, #0
 8006cea:	60fb      	str	r3, [r7, #12]
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	68db      	ldr	r3, [r3, #12]
 8006cf2:	60fb      	str	r3, [r7, #12]
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	689b      	ldr	r3, [r3, #8]
 8006cfa:	60fb      	str	r3, [r7, #12]
 8006cfc:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	2200      	movs	r2, #0
 8006d02:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	2201      	movs	r2, #1
 8006d08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d003      	beq.n	8006d1c <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006d14:	6978      	ldr	r0, [r7, #20]
 8006d16:	f7ff ffa9 	bl	8006c6c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006d1a:	e002      	b.n	8006d22 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8006d1c:	6978      	ldr	r0, [r7, #20]
 8006d1e:	f7fa fa23 	bl	8001168 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006d22:	3718      	adds	r7, #24
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}

08006d28 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b084      	sub	sp, #16
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d34:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8006d36:	68f8      	ldr	r0, [r7, #12]
 8006d38:	f7ff ff8e 	bl	8006c58 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006d3c:	bf00      	nop
 8006d3e:	3710      	adds	r7, #16
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b084      	sub	sp, #16
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d50:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	685a      	ldr	r2, [r3, #4]
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f022 0203 	bic.w	r2, r2, #3
 8006d60:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d66:	f043 0210 	orr.w	r2, r3, #16
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2201      	movs	r2, #1
 8006d72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006d76:	68f8      	ldr	r0, [r7, #12]
 8006d78:	f7ff ff78 	bl	8006c6c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006d7c:	bf00      	nop
 8006d7e:	3710      	adds	r7, #16
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}

08006d84 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b088      	sub	sp, #32
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	60f8      	str	r0, [r7, #12]
 8006d8c:	60b9      	str	r1, [r7, #8]
 8006d8e:	603b      	str	r3, [r7, #0]
 8006d90:	4613      	mov	r3, r2
 8006d92:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006d94:	f7fc fe0c 	bl	80039b0 <HAL_GetTick>
 8006d98:	4602      	mov	r2, r0
 8006d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d9c:	1a9b      	subs	r3, r3, r2
 8006d9e:	683a      	ldr	r2, [r7, #0]
 8006da0:	4413      	add	r3, r2
 8006da2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006da4:	f7fc fe04 	bl	80039b0 <HAL_GetTick>
 8006da8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006daa:	4b39      	ldr	r3, [pc, #228]	; (8006e90 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	015b      	lsls	r3, r3, #5
 8006db0:	0d1b      	lsrs	r3, r3, #20
 8006db2:	69fa      	ldr	r2, [r7, #28]
 8006db4:	fb02 f303 	mul.w	r3, r2, r3
 8006db8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006dba:	e054      	b.n	8006e66 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dc2:	d050      	beq.n	8006e66 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006dc4:	f7fc fdf4 	bl	80039b0 <HAL_GetTick>
 8006dc8:	4602      	mov	r2, r0
 8006dca:	69bb      	ldr	r3, [r7, #24]
 8006dcc:	1ad3      	subs	r3, r2, r3
 8006dce:	69fa      	ldr	r2, [r7, #28]
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d902      	bls.n	8006dda <SPI_WaitFlagStateUntilTimeout+0x56>
 8006dd4:	69fb      	ldr	r3, [r7, #28]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d13d      	bne.n	8006e56 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	685a      	ldr	r2, [r3, #4]
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006de8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006df2:	d111      	bne.n	8006e18 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	689b      	ldr	r3, [r3, #8]
 8006df8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006dfc:	d004      	beq.n	8006e08 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e06:	d107      	bne.n	8006e18 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	681a      	ldr	r2, [r3, #0]
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e16:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e20:	d10f      	bne.n	8006e42 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006e30:	601a      	str	r2, [r3, #0]
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	681a      	ldr	r2, [r3, #0]
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006e40:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2201      	movs	r2, #1
 8006e46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006e52:	2303      	movs	r3, #3
 8006e54:	e017      	b.n	8006e86 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d101      	bne.n	8006e60 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	3b01      	subs	r3, #1
 8006e64:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	689a      	ldr	r2, [r3, #8]
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	4013      	ands	r3, r2
 8006e70:	68ba      	ldr	r2, [r7, #8]
 8006e72:	429a      	cmp	r2, r3
 8006e74:	bf0c      	ite	eq
 8006e76:	2301      	moveq	r3, #1
 8006e78:	2300      	movne	r3, #0
 8006e7a:	b2db      	uxtb	r3, r3
 8006e7c:	461a      	mov	r2, r3
 8006e7e:	79fb      	ldrb	r3, [r7, #7]
 8006e80:	429a      	cmp	r2, r3
 8006e82:	d19b      	bne.n	8006dbc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006e84:	2300      	movs	r3, #0
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3720      	adds	r7, #32
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}
 8006e8e:	bf00      	nop
 8006e90:	20000008 	.word	0x20000008

08006e94 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b088      	sub	sp, #32
 8006e98:	af02      	add	r7, sp, #8
 8006e9a:	60f8      	str	r0, [r7, #12]
 8006e9c:	60b9      	str	r1, [r7, #8]
 8006e9e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006ea0:	4b1b      	ldr	r3, [pc, #108]	; (8006f10 <SPI_EndRxTxTransaction+0x7c>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a1b      	ldr	r2, [pc, #108]	; (8006f14 <SPI_EndRxTxTransaction+0x80>)
 8006ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8006eaa:	0d5b      	lsrs	r3, r3, #21
 8006eac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006eb0:	fb02 f303 	mul.w	r3, r2, r3
 8006eb4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ebe:	d112      	bne.n	8006ee6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	9300      	str	r3, [sp, #0]
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	2180      	movs	r1, #128	; 0x80
 8006eca:	68f8      	ldr	r0, [r7, #12]
 8006ecc:	f7ff ff5a 	bl	8006d84 <SPI_WaitFlagStateUntilTimeout>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d016      	beq.n	8006f04 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eda:	f043 0220 	orr.w	r2, r3, #32
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006ee2:	2303      	movs	r3, #3
 8006ee4:	e00f      	b.n	8006f06 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d00a      	beq.n	8006f02 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	3b01      	subs	r3, #1
 8006ef0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	689b      	ldr	r3, [r3, #8]
 8006ef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006efc:	2b80      	cmp	r3, #128	; 0x80
 8006efe:	d0f2      	beq.n	8006ee6 <SPI_EndRxTxTransaction+0x52>
 8006f00:	e000      	b.n	8006f04 <SPI_EndRxTxTransaction+0x70>
        break;
 8006f02:	bf00      	nop
  }

  return HAL_OK;
 8006f04:	2300      	movs	r3, #0
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3718      	adds	r7, #24
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}
 8006f0e:	bf00      	nop
 8006f10:	20000008 	.word	0x20000008
 8006f14:	165e9f81 	.word	0x165e9f81

08006f18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b082      	sub	sp, #8
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d101      	bne.n	8006f2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f26:	2301      	movs	r3, #1
 8006f28:	e03f      	b.n	8006faa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f30:	b2db      	uxtb	r3, r3
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d106      	bne.n	8006f44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f7fc fab8 	bl	80034b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2224      	movs	r2, #36	; 0x24
 8006f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	68da      	ldr	r2, [r3, #12]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f001 f839 	bl	8007fd4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	691a      	ldr	r2, [r3, #16]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	695a      	ldr	r2, [r3, #20]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006f80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	68da      	ldr	r2, [r3, #12]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006f90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2220      	movs	r2, #32
 8006f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2220      	movs	r2, #32
 8006fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006fa8:	2300      	movs	r3, #0
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3708      	adds	r7, #8
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}

08006fb2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fb2:	b580      	push	{r7, lr}
 8006fb4:	b08a      	sub	sp, #40	; 0x28
 8006fb6:	af02      	add	r7, sp, #8
 8006fb8:	60f8      	str	r0, [r7, #12]
 8006fba:	60b9      	str	r1, [r7, #8]
 8006fbc:	603b      	str	r3, [r7, #0]
 8006fbe:	4613      	mov	r3, r2
 8006fc0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fcc:	b2db      	uxtb	r3, r3
 8006fce:	2b20      	cmp	r3, #32
 8006fd0:	d17c      	bne.n	80070cc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d002      	beq.n	8006fde <HAL_UART_Transmit+0x2c>
 8006fd8:	88fb      	ldrh	r3, [r7, #6]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d101      	bne.n	8006fe2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	e075      	b.n	80070ce <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	d101      	bne.n	8006ff0 <HAL_UART_Transmit+0x3e>
 8006fec:	2302      	movs	r3, #2
 8006fee:	e06e      	b.n	80070ce <HAL_UART_Transmit+0x11c>
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2221      	movs	r2, #33	; 0x21
 8007002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007006:	f7fc fcd3 	bl	80039b0 <HAL_GetTick>
 800700a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	88fa      	ldrh	r2, [r7, #6]
 8007010:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	88fa      	ldrh	r2, [r7, #6]
 8007016:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	689b      	ldr	r3, [r3, #8]
 800701c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007020:	d108      	bne.n	8007034 <HAL_UART_Transmit+0x82>
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	691b      	ldr	r3, [r3, #16]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d104      	bne.n	8007034 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800702a:	2300      	movs	r3, #0
 800702c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	61bb      	str	r3, [r7, #24]
 8007032:	e003      	b.n	800703c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007038:	2300      	movs	r3, #0
 800703a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2200      	movs	r2, #0
 8007040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007044:	e02a      	b.n	800709c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	9300      	str	r3, [sp, #0]
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	2200      	movs	r2, #0
 800704e:	2180      	movs	r1, #128	; 0x80
 8007050:	68f8      	ldr	r0, [r7, #12]
 8007052:	f000 fcf5 	bl	8007a40 <UART_WaitOnFlagUntilTimeout>
 8007056:	4603      	mov	r3, r0
 8007058:	2b00      	cmp	r3, #0
 800705a:	d001      	beq.n	8007060 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800705c:	2303      	movs	r3, #3
 800705e:	e036      	b.n	80070ce <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007060:	69fb      	ldr	r3, [r7, #28]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d10b      	bne.n	800707e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007066:	69bb      	ldr	r3, [r7, #24]
 8007068:	881b      	ldrh	r3, [r3, #0]
 800706a:	461a      	mov	r2, r3
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007074:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007076:	69bb      	ldr	r3, [r7, #24]
 8007078:	3302      	adds	r3, #2
 800707a:	61bb      	str	r3, [r7, #24]
 800707c:	e007      	b.n	800708e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800707e:	69fb      	ldr	r3, [r7, #28]
 8007080:	781a      	ldrb	r2, [r3, #0]
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007088:	69fb      	ldr	r3, [r7, #28]
 800708a:	3301      	adds	r3, #1
 800708c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007092:	b29b      	uxth	r3, r3
 8007094:	3b01      	subs	r3, #1
 8007096:	b29a      	uxth	r2, r3
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80070a0:	b29b      	uxth	r3, r3
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d1cf      	bne.n	8007046 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	9300      	str	r3, [sp, #0]
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	2200      	movs	r2, #0
 80070ae:	2140      	movs	r1, #64	; 0x40
 80070b0:	68f8      	ldr	r0, [r7, #12]
 80070b2:	f000 fcc5 	bl	8007a40 <UART_WaitOnFlagUntilTimeout>
 80070b6:	4603      	mov	r3, r0
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d001      	beq.n	80070c0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80070bc:	2303      	movs	r3, #3
 80070be:	e006      	b.n	80070ce <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	2220      	movs	r2, #32
 80070c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80070c8:	2300      	movs	r3, #0
 80070ca:	e000      	b.n	80070ce <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80070cc:	2302      	movs	r3, #2
  }
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3720      	adds	r7, #32
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}

080070d6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070d6:	b580      	push	{r7, lr}
 80070d8:	b08a      	sub	sp, #40	; 0x28
 80070da:	af02      	add	r7, sp, #8
 80070dc:	60f8      	str	r0, [r7, #12]
 80070de:	60b9      	str	r1, [r7, #8]
 80070e0:	603b      	str	r3, [r7, #0]
 80070e2:	4613      	mov	r3, r2
 80070e4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80070e6:	2300      	movs	r3, #0
 80070e8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80070f0:	b2db      	uxtb	r3, r3
 80070f2:	2b20      	cmp	r3, #32
 80070f4:	f040 808c 	bne.w	8007210 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d002      	beq.n	8007104 <HAL_UART_Receive+0x2e>
 80070fe:	88fb      	ldrh	r3, [r7, #6]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d101      	bne.n	8007108 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8007104:	2301      	movs	r3, #1
 8007106:	e084      	b.n	8007212 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800710e:	2b01      	cmp	r3, #1
 8007110:	d101      	bne.n	8007116 <HAL_UART_Receive+0x40>
 8007112:	2302      	movs	r3, #2
 8007114:	e07d      	b.n	8007212 <HAL_UART_Receive+0x13c>
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2201      	movs	r2, #1
 800711a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	2200      	movs	r2, #0
 8007122:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2222      	movs	r2, #34	; 0x22
 8007128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2200      	movs	r2, #0
 8007130:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007132:	f7fc fc3d 	bl	80039b0 <HAL_GetTick>
 8007136:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	88fa      	ldrh	r2, [r7, #6]
 800713c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	88fa      	ldrh	r2, [r7, #6]
 8007142:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800714c:	d108      	bne.n	8007160 <HAL_UART_Receive+0x8a>
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	691b      	ldr	r3, [r3, #16]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d104      	bne.n	8007160 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8007156:	2300      	movs	r3, #0
 8007158:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	61bb      	str	r3, [r7, #24]
 800715e:	e003      	b.n	8007168 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007164:	2300      	movs	r3, #0
 8007166:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2200      	movs	r2, #0
 800716c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8007170:	e043      	b.n	80071fa <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	9300      	str	r3, [sp, #0]
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	2200      	movs	r2, #0
 800717a:	2120      	movs	r1, #32
 800717c:	68f8      	ldr	r0, [r7, #12]
 800717e:	f000 fc5f 	bl	8007a40 <UART_WaitOnFlagUntilTimeout>
 8007182:	4603      	mov	r3, r0
 8007184:	2b00      	cmp	r3, #0
 8007186:	d001      	beq.n	800718c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8007188:	2303      	movs	r3, #3
 800718a:	e042      	b.n	8007212 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800718c:	69fb      	ldr	r3, [r7, #28]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d10c      	bne.n	80071ac <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	b29b      	uxth	r3, r3
 800719a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800719e:	b29a      	uxth	r2, r3
 80071a0:	69bb      	ldr	r3, [r7, #24]
 80071a2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80071a4:	69bb      	ldr	r3, [r7, #24]
 80071a6:	3302      	adds	r3, #2
 80071a8:	61bb      	str	r3, [r7, #24]
 80071aa:	e01f      	b.n	80071ec <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	689b      	ldr	r3, [r3, #8]
 80071b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071b4:	d007      	beq.n	80071c6 <HAL_UART_Receive+0xf0>
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	689b      	ldr	r3, [r3, #8]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d10a      	bne.n	80071d4 <HAL_UART_Receive+0xfe>
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	691b      	ldr	r3, [r3, #16]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d106      	bne.n	80071d4 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	b2da      	uxtb	r2, r3
 80071ce:	69fb      	ldr	r3, [r7, #28]
 80071d0:	701a      	strb	r2, [r3, #0]
 80071d2:	e008      	b.n	80071e6 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	685b      	ldr	r3, [r3, #4]
 80071da:	b2db      	uxtb	r3, r3
 80071dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071e0:	b2da      	uxtb	r2, r3
 80071e2:	69fb      	ldr	r3, [r7, #28]
 80071e4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80071e6:	69fb      	ldr	r3, [r7, #28]
 80071e8:	3301      	adds	r3, #1
 80071ea:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80071f0:	b29b      	uxth	r3, r3
 80071f2:	3b01      	subs	r3, #1
 80071f4:	b29a      	uxth	r2, r3
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80071fe:	b29b      	uxth	r3, r3
 8007200:	2b00      	cmp	r3, #0
 8007202:	d1b6      	bne.n	8007172 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	2220      	movs	r2, #32
 8007208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800720c:	2300      	movs	r3, #0
 800720e:	e000      	b.n	8007212 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8007210:	2302      	movs	r3, #2
  }
}
 8007212:	4618      	mov	r0, r3
 8007214:	3720      	adds	r7, #32
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}

0800721a <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800721a:	b580      	push	{r7, lr}
 800721c:	b08c      	sub	sp, #48	; 0x30
 800721e:	af00      	add	r7, sp, #0
 8007220:	60f8      	str	r0, [r7, #12]
 8007222:	60b9      	str	r1, [r7, #8]
 8007224:	4613      	mov	r3, r2
 8007226:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800722e:	b2db      	uxtb	r3, r3
 8007230:	2b20      	cmp	r3, #32
 8007232:	d152      	bne.n	80072da <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d002      	beq.n	8007240 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800723a:	88fb      	ldrh	r3, [r7, #6]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d101      	bne.n	8007244 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8007240:	2301      	movs	r3, #1
 8007242:	e04b      	b.n	80072dc <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800724a:	2b01      	cmp	r3, #1
 800724c:	d101      	bne.n	8007252 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 800724e:	2302      	movs	r3, #2
 8007250:	e044      	b.n	80072dc <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2201      	movs	r2, #1
 8007256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2201      	movs	r2, #1
 800725e:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8007260:	88fb      	ldrh	r3, [r7, #6]
 8007262:	461a      	mov	r2, r3
 8007264:	68b9      	ldr	r1, [r7, #8]
 8007266:	68f8      	ldr	r0, [r7, #12]
 8007268:	f000 fc58 	bl	8007b1c <UART_Start_Receive_DMA>
 800726c:	4603      	mov	r3, r0
 800726e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8007272:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007276:	2b00      	cmp	r3, #0
 8007278:	d12c      	bne.n	80072d4 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800727e:	2b01      	cmp	r3, #1
 8007280:	d125      	bne.n	80072ce <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007282:	2300      	movs	r3, #0
 8007284:	613b      	str	r3, [r7, #16]
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	613b      	str	r3, [r7, #16]
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	613b      	str	r3, [r7, #16]
 8007296:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	330c      	adds	r3, #12
 800729e:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072a0:	69bb      	ldr	r3, [r7, #24]
 80072a2:	e853 3f00 	ldrex	r3, [r3]
 80072a6:	617b      	str	r3, [r7, #20]
   return(result);
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	f043 0310 	orr.w	r3, r3, #16
 80072ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	330c      	adds	r3, #12
 80072b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072b8:	627a      	str	r2, [r7, #36]	; 0x24
 80072ba:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072bc:	6a39      	ldr	r1, [r7, #32]
 80072be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072c0:	e841 2300 	strex	r3, r2, [r1]
 80072c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80072c6:	69fb      	ldr	r3, [r7, #28]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d1e5      	bne.n	8007298 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 80072cc:	e002      	b.n	80072d4 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80072ce:	2301      	movs	r3, #1
 80072d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80072d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80072d8:	e000      	b.n	80072dc <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 80072da:	2302      	movs	r3, #2
  }
}
 80072dc:	4618      	mov	r0, r3
 80072de:	3730      	adds	r7, #48	; 0x30
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}

080072e4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b0ba      	sub	sp, #232	; 0xe8
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	68db      	ldr	r3, [r3, #12]
 80072fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	695b      	ldr	r3, [r3, #20]
 8007306:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800730a:	2300      	movs	r3, #0
 800730c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007310:	2300      	movs	r3, #0
 8007312:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007316:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800731a:	f003 030f 	and.w	r3, r3, #15
 800731e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007322:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007326:	2b00      	cmp	r3, #0
 8007328:	d10f      	bne.n	800734a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800732a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800732e:	f003 0320 	and.w	r3, r3, #32
 8007332:	2b00      	cmp	r3, #0
 8007334:	d009      	beq.n	800734a <HAL_UART_IRQHandler+0x66>
 8007336:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800733a:	f003 0320 	and.w	r3, r3, #32
 800733e:	2b00      	cmp	r3, #0
 8007340:	d003      	beq.n	800734a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f000 fd8b 	bl	8007e5e <UART_Receive_IT>
      return;
 8007348:	e256      	b.n	80077f8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800734a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800734e:	2b00      	cmp	r3, #0
 8007350:	f000 80de 	beq.w	8007510 <HAL_UART_IRQHandler+0x22c>
 8007354:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007358:	f003 0301 	and.w	r3, r3, #1
 800735c:	2b00      	cmp	r3, #0
 800735e:	d106      	bne.n	800736e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007360:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007364:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007368:	2b00      	cmp	r3, #0
 800736a:	f000 80d1 	beq.w	8007510 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800736e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007372:	f003 0301 	and.w	r3, r3, #1
 8007376:	2b00      	cmp	r3, #0
 8007378:	d00b      	beq.n	8007392 <HAL_UART_IRQHandler+0xae>
 800737a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800737e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007382:	2b00      	cmp	r3, #0
 8007384:	d005      	beq.n	8007392 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800738a:	f043 0201 	orr.w	r2, r3, #1
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007396:	f003 0304 	and.w	r3, r3, #4
 800739a:	2b00      	cmp	r3, #0
 800739c:	d00b      	beq.n	80073b6 <HAL_UART_IRQHandler+0xd2>
 800739e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073a2:	f003 0301 	and.w	r3, r3, #1
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d005      	beq.n	80073b6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ae:	f043 0202 	orr.w	r2, r3, #2
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80073b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073ba:	f003 0302 	and.w	r3, r3, #2
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d00b      	beq.n	80073da <HAL_UART_IRQHandler+0xf6>
 80073c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073c6:	f003 0301 	and.w	r3, r3, #1
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d005      	beq.n	80073da <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073d2:	f043 0204 	orr.w	r2, r3, #4
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80073da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073de:	f003 0308 	and.w	r3, r3, #8
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d011      	beq.n	800740a <HAL_UART_IRQHandler+0x126>
 80073e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073ea:	f003 0320 	and.w	r3, r3, #32
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d105      	bne.n	80073fe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80073f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073f6:	f003 0301 	and.w	r3, r3, #1
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d005      	beq.n	800740a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007402:	f043 0208 	orr.w	r2, r3, #8
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800740e:	2b00      	cmp	r3, #0
 8007410:	f000 81ed 	beq.w	80077ee <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007414:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007418:	f003 0320 	and.w	r3, r3, #32
 800741c:	2b00      	cmp	r3, #0
 800741e:	d008      	beq.n	8007432 <HAL_UART_IRQHandler+0x14e>
 8007420:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007424:	f003 0320 	and.w	r3, r3, #32
 8007428:	2b00      	cmp	r3, #0
 800742a:	d002      	beq.n	8007432 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f000 fd16 	bl	8007e5e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	695b      	ldr	r3, [r3, #20]
 8007438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800743c:	2b40      	cmp	r3, #64	; 0x40
 800743e:	bf0c      	ite	eq
 8007440:	2301      	moveq	r3, #1
 8007442:	2300      	movne	r3, #0
 8007444:	b2db      	uxtb	r3, r3
 8007446:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800744e:	f003 0308 	and.w	r3, r3, #8
 8007452:	2b00      	cmp	r3, #0
 8007454:	d103      	bne.n	800745e <HAL_UART_IRQHandler+0x17a>
 8007456:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800745a:	2b00      	cmp	r3, #0
 800745c:	d04f      	beq.n	80074fe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 fc1e 	bl	8007ca0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	695b      	ldr	r3, [r3, #20]
 800746a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800746e:	2b40      	cmp	r3, #64	; 0x40
 8007470:	d141      	bne.n	80074f6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	3314      	adds	r3, #20
 8007478:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800747c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007480:	e853 3f00 	ldrex	r3, [r3]
 8007484:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007488:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800748c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007490:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	3314      	adds	r3, #20
 800749a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800749e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80074a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80074aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80074ae:	e841 2300 	strex	r3, r2, [r1]
 80074b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80074b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d1d9      	bne.n	8007472 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d013      	beq.n	80074ee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ca:	4a7d      	ldr	r2, [pc, #500]	; (80076c0 <HAL_UART_IRQHandler+0x3dc>)
 80074cc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074d2:	4618      	mov	r0, r3
 80074d4:	f7fc fd24 	bl	8003f20 <HAL_DMA_Abort_IT>
 80074d8:	4603      	mov	r3, r0
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d016      	beq.n	800750c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074e4:	687a      	ldr	r2, [r7, #4]
 80074e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80074e8:	4610      	mov	r0, r2
 80074ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074ec:	e00e      	b.n	800750c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f000 f9a4 	bl	800783c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074f4:	e00a      	b.n	800750c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f000 f9a0 	bl	800783c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074fc:	e006      	b.n	800750c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f000 f99c 	bl	800783c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800750a:	e170      	b.n	80077ee <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800750c:	bf00      	nop
    return;
 800750e:	e16e      	b.n	80077ee <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007514:	2b01      	cmp	r3, #1
 8007516:	f040 814a 	bne.w	80077ae <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800751a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800751e:	f003 0310 	and.w	r3, r3, #16
 8007522:	2b00      	cmp	r3, #0
 8007524:	f000 8143 	beq.w	80077ae <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007528:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800752c:	f003 0310 	and.w	r3, r3, #16
 8007530:	2b00      	cmp	r3, #0
 8007532:	f000 813c 	beq.w	80077ae <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007536:	2300      	movs	r3, #0
 8007538:	60bb      	str	r3, [r7, #8]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	60bb      	str	r3, [r7, #8]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	60bb      	str	r3, [r7, #8]
 800754a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	695b      	ldr	r3, [r3, #20]
 8007552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007556:	2b40      	cmp	r3, #64	; 0x40
 8007558:	f040 80b4 	bne.w	80076c4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007568:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800756c:	2b00      	cmp	r3, #0
 800756e:	f000 8140 	beq.w	80077f2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007576:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800757a:	429a      	cmp	r2, r3
 800757c:	f080 8139 	bcs.w	80077f2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007586:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800758c:	69db      	ldr	r3, [r3, #28]
 800758e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007592:	f000 8088 	beq.w	80076a6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	330c      	adds	r3, #12
 800759c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80075a4:	e853 3f00 	ldrex	r3, [r3]
 80075a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80075ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80075b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	330c      	adds	r3, #12
 80075be:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80075c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80075c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80075ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80075d2:	e841 2300 	strex	r3, r2, [r1]
 80075d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80075da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d1d9      	bne.n	8007596 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	3314      	adds	r3, #20
 80075e8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075ec:	e853 3f00 	ldrex	r3, [r3]
 80075f0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80075f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80075f4:	f023 0301 	bic.w	r3, r3, #1
 80075f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	3314      	adds	r3, #20
 8007602:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007606:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800760a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800760c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800760e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007612:	e841 2300 	strex	r3, r2, [r1]
 8007616:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007618:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800761a:	2b00      	cmp	r3, #0
 800761c:	d1e1      	bne.n	80075e2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	3314      	adds	r3, #20
 8007624:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007626:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007628:	e853 3f00 	ldrex	r3, [r3]
 800762c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800762e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007630:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007634:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	3314      	adds	r3, #20
 800763e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007642:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007644:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007646:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007648:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800764a:	e841 2300 	strex	r3, r2, [r1]
 800764e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007650:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007652:	2b00      	cmp	r3, #0
 8007654:	d1e3      	bne.n	800761e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2220      	movs	r2, #32
 800765a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2200      	movs	r2, #0
 8007662:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	330c      	adds	r3, #12
 800766a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800766c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800766e:	e853 3f00 	ldrex	r3, [r3]
 8007672:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007674:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007676:	f023 0310 	bic.w	r3, r3, #16
 800767a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	330c      	adds	r3, #12
 8007684:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007688:	65ba      	str	r2, [r7, #88]	; 0x58
 800768a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800768c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800768e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007690:	e841 2300 	strex	r3, r2, [r1]
 8007694:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007696:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007698:	2b00      	cmp	r3, #0
 800769a:	d1e3      	bne.n	8007664 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076a0:	4618      	mov	r0, r3
 80076a2:	f7fc fbcd 	bl	8003e40 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	1ad3      	subs	r3, r2, r3
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	4619      	mov	r1, r3
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f7fb f8ec 	bl	8002894 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80076bc:	e099      	b.n	80077f2 <HAL_UART_IRQHandler+0x50e>
 80076be:	bf00      	nop
 80076c0:	08007d67 	.word	0x08007d67
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80076cc:	b29b      	uxth	r3, r3
 80076ce:	1ad3      	subs	r3, r2, r3
 80076d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80076d8:	b29b      	uxth	r3, r3
 80076da:	2b00      	cmp	r3, #0
 80076dc:	f000 808b 	beq.w	80077f6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80076e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	f000 8086 	beq.w	80077f6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	330c      	adds	r3, #12
 80076f0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076f4:	e853 3f00 	ldrex	r3, [r3]
 80076f8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80076fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007700:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	330c      	adds	r3, #12
 800770a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800770e:	647a      	str	r2, [r7, #68]	; 0x44
 8007710:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007712:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007714:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007716:	e841 2300 	strex	r3, r2, [r1]
 800771a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800771c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800771e:	2b00      	cmp	r3, #0
 8007720:	d1e3      	bne.n	80076ea <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	3314      	adds	r3, #20
 8007728:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800772a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800772c:	e853 3f00 	ldrex	r3, [r3]
 8007730:	623b      	str	r3, [r7, #32]
   return(result);
 8007732:	6a3b      	ldr	r3, [r7, #32]
 8007734:	f023 0301 	bic.w	r3, r3, #1
 8007738:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	3314      	adds	r3, #20
 8007742:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007746:	633a      	str	r2, [r7, #48]	; 0x30
 8007748:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800774a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800774c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800774e:	e841 2300 	strex	r3, r2, [r1]
 8007752:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007756:	2b00      	cmp	r3, #0
 8007758:	d1e3      	bne.n	8007722 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2220      	movs	r2, #32
 800775e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2200      	movs	r2, #0
 8007766:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	330c      	adds	r3, #12
 800776e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	e853 3f00 	ldrex	r3, [r3]
 8007776:	60fb      	str	r3, [r7, #12]
   return(result);
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f023 0310 	bic.w	r3, r3, #16
 800777e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	330c      	adds	r3, #12
 8007788:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800778c:	61fa      	str	r2, [r7, #28]
 800778e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007790:	69b9      	ldr	r1, [r7, #24]
 8007792:	69fa      	ldr	r2, [r7, #28]
 8007794:	e841 2300 	strex	r3, r2, [r1]
 8007798:	617b      	str	r3, [r7, #20]
   return(result);
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d1e3      	bne.n	8007768 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80077a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80077a4:	4619      	mov	r1, r3
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f7fb f874 	bl	8002894 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80077ac:	e023      	b.n	80077f6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80077ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d009      	beq.n	80077ce <HAL_UART_IRQHandler+0x4ea>
 80077ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d003      	beq.n	80077ce <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f000 fae1 	bl	8007d8e <UART_Transmit_IT>
    return;
 80077cc:	e014      	b.n	80077f8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80077ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d00e      	beq.n	80077f8 <HAL_UART_IRQHandler+0x514>
 80077da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d008      	beq.n	80077f8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f000 fb21 	bl	8007e2e <UART_EndTransmit_IT>
    return;
 80077ec:	e004      	b.n	80077f8 <HAL_UART_IRQHandler+0x514>
    return;
 80077ee:	bf00      	nop
 80077f0:	e002      	b.n	80077f8 <HAL_UART_IRQHandler+0x514>
      return;
 80077f2:	bf00      	nop
 80077f4:	e000      	b.n	80077f8 <HAL_UART_IRQHandler+0x514>
      return;
 80077f6:	bf00      	nop
  }
}
 80077f8:	37e8      	adds	r7, #232	; 0xe8
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}
 80077fe:	bf00      	nop

08007800 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007800:	b480      	push	{r7}
 8007802:	b083      	sub	sp, #12
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007808:	bf00      	nop
 800780a:	370c      	adds	r7, #12
 800780c:	46bd      	mov	sp, r7
 800780e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007812:	4770      	bx	lr

08007814 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007814:	b480      	push	{r7}
 8007816:	b083      	sub	sp, #12
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800781c:	bf00      	nop
 800781e:	370c      	adds	r7, #12
 8007820:	46bd      	mov	sp, r7
 8007822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007826:	4770      	bx	lr

08007828 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007828:	b480      	push	{r7}
 800782a:	b083      	sub	sp, #12
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007830:	bf00      	nop
 8007832:	370c      	adds	r7, #12
 8007834:	46bd      	mov	sp, r7
 8007836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783a:	4770      	bx	lr

0800783c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800783c:	b480      	push	{r7}
 800783e:	b083      	sub	sp, #12
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007844:	bf00      	nop
 8007846:	370c      	adds	r7, #12
 8007848:	46bd      	mov	sp, r7
 800784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784e:	4770      	bx	lr

08007850 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b09c      	sub	sp, #112	; 0x70
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800785c:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007868:	2b00      	cmp	r3, #0
 800786a:	d172      	bne.n	8007952 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800786c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800786e:	2200      	movs	r2, #0
 8007870:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007872:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	330c      	adds	r3, #12
 8007878:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800787a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800787c:	e853 3f00 	ldrex	r3, [r3]
 8007880:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007882:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007884:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007888:	66bb      	str	r3, [r7, #104]	; 0x68
 800788a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	330c      	adds	r3, #12
 8007890:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007892:	65ba      	str	r2, [r7, #88]	; 0x58
 8007894:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007896:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007898:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800789a:	e841 2300 	strex	r3, r2, [r1]
 800789e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80078a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d1e5      	bne.n	8007872 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	3314      	adds	r3, #20
 80078ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078b0:	e853 3f00 	ldrex	r3, [r3]
 80078b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80078b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078b8:	f023 0301 	bic.w	r3, r3, #1
 80078bc:	667b      	str	r3, [r7, #100]	; 0x64
 80078be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	3314      	adds	r3, #20
 80078c4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80078c6:	647a      	str	r2, [r7, #68]	; 0x44
 80078c8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80078cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80078ce:	e841 2300 	strex	r3, r2, [r1]
 80078d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80078d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d1e5      	bne.n	80078a6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	3314      	adds	r3, #20
 80078e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e4:	e853 3f00 	ldrex	r3, [r3]
 80078e8:	623b      	str	r3, [r7, #32]
   return(result);
 80078ea:	6a3b      	ldr	r3, [r7, #32]
 80078ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078f0:	663b      	str	r3, [r7, #96]	; 0x60
 80078f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	3314      	adds	r3, #20
 80078f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80078fa:	633a      	str	r2, [r7, #48]	; 0x30
 80078fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007900:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007902:	e841 2300 	strex	r3, r2, [r1]
 8007906:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800790a:	2b00      	cmp	r3, #0
 800790c:	d1e5      	bne.n	80078da <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800790e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007910:	2220      	movs	r2, #32
 8007912:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007916:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800791a:	2b01      	cmp	r3, #1
 800791c:	d119      	bne.n	8007952 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800791e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	330c      	adds	r3, #12
 8007924:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	e853 3f00 	ldrex	r3, [r3]
 800792c:	60fb      	str	r3, [r7, #12]
   return(result);
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	f023 0310 	bic.w	r3, r3, #16
 8007934:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007936:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	330c      	adds	r3, #12
 800793c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800793e:	61fa      	str	r2, [r7, #28]
 8007940:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007942:	69b9      	ldr	r1, [r7, #24]
 8007944:	69fa      	ldr	r2, [r7, #28]
 8007946:	e841 2300 	strex	r3, r2, [r1]
 800794a:	617b      	str	r3, [r7, #20]
   return(result);
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d1e5      	bne.n	800791e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007952:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007956:	2b01      	cmp	r3, #1
 8007958:	d106      	bne.n	8007968 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800795a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800795c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800795e:	4619      	mov	r1, r3
 8007960:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007962:	f7fa ff97 	bl	8002894 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007966:	e002      	b.n	800796e <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8007968:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800796a:	f7ff ff53 	bl	8007814 <HAL_UART_RxCpltCallback>
}
 800796e:	bf00      	nop
 8007970:	3770      	adds	r7, #112	; 0x70
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}

08007976 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007976:	b580      	push	{r7, lr}
 8007978:	b084      	sub	sp, #16
 800797a:	af00      	add	r7, sp, #0
 800797c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007982:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007988:	2b01      	cmp	r3, #1
 800798a:	d108      	bne.n	800799e <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007990:	085b      	lsrs	r3, r3, #1
 8007992:	b29b      	uxth	r3, r3
 8007994:	4619      	mov	r1, r3
 8007996:	68f8      	ldr	r0, [r7, #12]
 8007998:	f7fa ff7c 	bl	8002894 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800799c:	e002      	b.n	80079a4 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800799e:	68f8      	ldr	r0, [r7, #12]
 80079a0:	f7ff ff42 	bl	8007828 <HAL_UART_RxHalfCpltCallback>
}
 80079a4:	bf00      	nop
 80079a6:	3710      	adds	r7, #16
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}

080079ac <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b084      	sub	sp, #16
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80079b4:	2300      	movs	r3, #0
 80079b6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079bc:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	695b      	ldr	r3, [r3, #20]
 80079c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079c8:	2b80      	cmp	r3, #128	; 0x80
 80079ca:	bf0c      	ite	eq
 80079cc:	2301      	moveq	r3, #1
 80079ce:	2300      	movne	r3, #0
 80079d0:	b2db      	uxtb	r3, r3
 80079d2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079da:	b2db      	uxtb	r3, r3
 80079dc:	2b21      	cmp	r3, #33	; 0x21
 80079de:	d108      	bne.n	80079f2 <UART_DMAError+0x46>
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d005      	beq.n	80079f2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	2200      	movs	r2, #0
 80079ea:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80079ec:	68b8      	ldr	r0, [r7, #8]
 80079ee:	f000 f92f 	bl	8007c50 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	695b      	ldr	r3, [r3, #20]
 80079f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079fc:	2b40      	cmp	r3, #64	; 0x40
 80079fe:	bf0c      	ite	eq
 8007a00:	2301      	moveq	r3, #1
 8007a02:	2300      	movne	r3, #0
 8007a04:	b2db      	uxtb	r3, r3
 8007a06:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007a0e:	b2db      	uxtb	r3, r3
 8007a10:	2b22      	cmp	r3, #34	; 0x22
 8007a12:	d108      	bne.n	8007a26 <UART_DMAError+0x7a>
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d005      	beq.n	8007a26 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007a20:	68b8      	ldr	r0, [r7, #8]
 8007a22:	f000 f93d 	bl	8007ca0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a2a:	f043 0210 	orr.w	r2, r3, #16
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007a32:	68b8      	ldr	r0, [r7, #8]
 8007a34:	f7ff ff02 	bl	800783c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a38:	bf00      	nop
 8007a3a:	3710      	adds	r7, #16
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}

08007a40 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b090      	sub	sp, #64	; 0x40
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	60f8      	str	r0, [r7, #12]
 8007a48:	60b9      	str	r1, [r7, #8]
 8007a4a:	603b      	str	r3, [r7, #0]
 8007a4c:	4613      	mov	r3, r2
 8007a4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a50:	e050      	b.n	8007af4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a58:	d04c      	beq.n	8007af4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007a5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d007      	beq.n	8007a70 <UART_WaitOnFlagUntilTimeout+0x30>
 8007a60:	f7fb ffa6 	bl	80039b0 <HAL_GetTick>
 8007a64:	4602      	mov	r2, r0
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	1ad3      	subs	r3, r2, r3
 8007a6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a6c:	429a      	cmp	r2, r3
 8007a6e:	d241      	bcs.n	8007af4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	330c      	adds	r3, #12
 8007a76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a7a:	e853 3f00 	ldrex	r3, [r3]
 8007a7e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a82:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007a86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	330c      	adds	r3, #12
 8007a8e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007a90:	637a      	str	r2, [r7, #52]	; 0x34
 8007a92:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a94:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007a96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a98:	e841 2300 	strex	r3, r2, [r1]
 8007a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d1e5      	bne.n	8007a70 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	3314      	adds	r3, #20
 8007aaa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	e853 3f00 	ldrex	r3, [r3]
 8007ab2:	613b      	str	r3, [r7, #16]
   return(result);
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	f023 0301 	bic.w	r3, r3, #1
 8007aba:	63bb      	str	r3, [r7, #56]	; 0x38
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	3314      	adds	r3, #20
 8007ac2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ac4:	623a      	str	r2, [r7, #32]
 8007ac6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ac8:	69f9      	ldr	r1, [r7, #28]
 8007aca:	6a3a      	ldr	r2, [r7, #32]
 8007acc:	e841 2300 	strex	r3, r2, [r1]
 8007ad0:	61bb      	str	r3, [r7, #24]
   return(result);
 8007ad2:	69bb      	ldr	r3, [r7, #24]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d1e5      	bne.n	8007aa4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	2220      	movs	r2, #32
 8007adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	2220      	movs	r2, #32
 8007ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	2200      	movs	r2, #0
 8007aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007af0:	2303      	movs	r3, #3
 8007af2:	e00f      	b.n	8007b14 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	681a      	ldr	r2, [r3, #0]
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	4013      	ands	r3, r2
 8007afe:	68ba      	ldr	r2, [r7, #8]
 8007b00:	429a      	cmp	r2, r3
 8007b02:	bf0c      	ite	eq
 8007b04:	2301      	moveq	r3, #1
 8007b06:	2300      	movne	r3, #0
 8007b08:	b2db      	uxtb	r3, r3
 8007b0a:	461a      	mov	r2, r3
 8007b0c:	79fb      	ldrb	r3, [r7, #7]
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	d09f      	beq.n	8007a52 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007b12:	2300      	movs	r3, #0
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	3740      	adds	r7, #64	; 0x40
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}

08007b1c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b098      	sub	sp, #96	; 0x60
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	60f8      	str	r0, [r7, #12]
 8007b24:	60b9      	str	r1, [r7, #8]
 8007b26:	4613      	mov	r3, r2
 8007b28:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007b2a:	68ba      	ldr	r2, [r7, #8]
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	88fa      	ldrh	r2, [r7, #6]
 8007b34:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	2222      	movs	r2, #34	; 0x22
 8007b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b48:	4a3e      	ldr	r2, [pc, #248]	; (8007c44 <UART_Start_Receive_DMA+0x128>)
 8007b4a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b50:	4a3d      	ldr	r2, [pc, #244]	; (8007c48 <UART_Start_Receive_DMA+0x12c>)
 8007b52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b58:	4a3c      	ldr	r2, [pc, #240]	; (8007c4c <UART_Start_Receive_DMA+0x130>)
 8007b5a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b60:	2200      	movs	r2, #0
 8007b62:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007b64:	f107 0308 	add.w	r3, r7, #8
 8007b68:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	3304      	adds	r3, #4
 8007b74:	4619      	mov	r1, r3
 8007b76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b78:	681a      	ldr	r2, [r3, #0]
 8007b7a:	88fb      	ldrh	r3, [r7, #6]
 8007b7c:	f7fc f908 	bl	8003d90 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007b80:	2300      	movs	r3, #0
 8007b82:	613b      	str	r3, [r7, #16]
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	613b      	str	r3, [r7, #16]
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	613b      	str	r3, [r7, #16]
 8007b94:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	330c      	adds	r3, #12
 8007ba4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ba6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ba8:	e853 3f00 	ldrex	r3, [r3]
 8007bac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007bae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007bb4:	65bb      	str	r3, [r7, #88]	; 0x58
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	330c      	adds	r3, #12
 8007bbc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007bbe:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007bc0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007bc4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007bc6:	e841 2300 	strex	r3, r2, [r1]
 8007bca:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007bcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d1e5      	bne.n	8007b9e <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	3314      	adds	r3, #20
 8007bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bdc:	e853 3f00 	ldrex	r3, [r3]
 8007be0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007be4:	f043 0301 	orr.w	r3, r3, #1
 8007be8:	657b      	str	r3, [r7, #84]	; 0x54
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	3314      	adds	r3, #20
 8007bf0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007bf2:	63ba      	str	r2, [r7, #56]	; 0x38
 8007bf4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007bf8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007bfa:	e841 2300 	strex	r3, r2, [r1]
 8007bfe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d1e5      	bne.n	8007bd2 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	3314      	adds	r3, #20
 8007c0c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c0e:	69bb      	ldr	r3, [r7, #24]
 8007c10:	e853 3f00 	ldrex	r3, [r3]
 8007c14:	617b      	str	r3, [r7, #20]
   return(result);
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c1c:	653b      	str	r3, [r7, #80]	; 0x50
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	3314      	adds	r3, #20
 8007c24:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007c26:	627a      	str	r2, [r7, #36]	; 0x24
 8007c28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c2a:	6a39      	ldr	r1, [r7, #32]
 8007c2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c2e:	e841 2300 	strex	r3, r2, [r1]
 8007c32:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c34:	69fb      	ldr	r3, [r7, #28]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d1e5      	bne.n	8007c06 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8007c3a:	2300      	movs	r3, #0
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3760      	adds	r7, #96	; 0x60
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}
 8007c44:	08007851 	.word	0x08007851
 8007c48:	08007977 	.word	0x08007977
 8007c4c:	080079ad 	.word	0x080079ad

08007c50 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b089      	sub	sp, #36	; 0x24
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	330c      	adds	r3, #12
 8007c5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	e853 3f00 	ldrex	r3, [r3]
 8007c66:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007c6e:	61fb      	str	r3, [r7, #28]
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	330c      	adds	r3, #12
 8007c76:	69fa      	ldr	r2, [r7, #28]
 8007c78:	61ba      	str	r2, [r7, #24]
 8007c7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c7c:	6979      	ldr	r1, [r7, #20]
 8007c7e:	69ba      	ldr	r2, [r7, #24]
 8007c80:	e841 2300 	strex	r3, r2, [r1]
 8007c84:	613b      	str	r3, [r7, #16]
   return(result);
 8007c86:	693b      	ldr	r3, [r7, #16]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d1e5      	bne.n	8007c58 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2220      	movs	r2, #32
 8007c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007c94:	bf00      	nop
 8007c96:	3724      	adds	r7, #36	; 0x24
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr

08007ca0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b095      	sub	sp, #84	; 0x54
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	330c      	adds	r3, #12
 8007cae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cb2:	e853 3f00 	ldrex	r3, [r3]
 8007cb6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007cbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	330c      	adds	r3, #12
 8007cc6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007cc8:	643a      	str	r2, [r7, #64]	; 0x40
 8007cca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ccc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007cce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007cd0:	e841 2300 	strex	r3, r2, [r1]
 8007cd4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d1e5      	bne.n	8007ca8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	3314      	adds	r3, #20
 8007ce2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ce4:	6a3b      	ldr	r3, [r7, #32]
 8007ce6:	e853 3f00 	ldrex	r3, [r3]
 8007cea:	61fb      	str	r3, [r7, #28]
   return(result);
 8007cec:	69fb      	ldr	r3, [r7, #28]
 8007cee:	f023 0301 	bic.w	r3, r3, #1
 8007cf2:	64bb      	str	r3, [r7, #72]	; 0x48
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	3314      	adds	r3, #20
 8007cfa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007cfc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007cfe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d04:	e841 2300 	strex	r3, r2, [r1]
 8007d08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d1e5      	bne.n	8007cdc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d14:	2b01      	cmp	r3, #1
 8007d16:	d119      	bne.n	8007d4c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	330c      	adds	r3, #12
 8007d1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	e853 3f00 	ldrex	r3, [r3]
 8007d26:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	f023 0310 	bic.w	r3, r3, #16
 8007d2e:	647b      	str	r3, [r7, #68]	; 0x44
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	330c      	adds	r3, #12
 8007d36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d38:	61ba      	str	r2, [r7, #24]
 8007d3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d3c:	6979      	ldr	r1, [r7, #20]
 8007d3e:	69ba      	ldr	r2, [r7, #24]
 8007d40:	e841 2300 	strex	r3, r2, [r1]
 8007d44:	613b      	str	r3, [r7, #16]
   return(result);
 8007d46:	693b      	ldr	r3, [r7, #16]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d1e5      	bne.n	8007d18 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2220      	movs	r2, #32
 8007d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2200      	movs	r2, #0
 8007d58:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007d5a:	bf00      	nop
 8007d5c:	3754      	adds	r7, #84	; 0x54
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d64:	4770      	bx	lr

08007d66 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007d66:	b580      	push	{r7, lr}
 8007d68:	b084      	sub	sp, #16
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d72:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2200      	movs	r2, #0
 8007d78:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007d80:	68f8      	ldr	r0, [r7, #12]
 8007d82:	f7ff fd5b 	bl	800783c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d86:	bf00      	nop
 8007d88:	3710      	adds	r7, #16
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}

08007d8e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007d8e:	b480      	push	{r7}
 8007d90:	b085      	sub	sp, #20
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d9c:	b2db      	uxtb	r3, r3
 8007d9e:	2b21      	cmp	r3, #33	; 0x21
 8007da0:	d13e      	bne.n	8007e20 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	689b      	ldr	r3, [r3, #8]
 8007da6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007daa:	d114      	bne.n	8007dd6 <UART_Transmit_IT+0x48>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	691b      	ldr	r3, [r3, #16]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d110      	bne.n	8007dd6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6a1b      	ldr	r3, [r3, #32]
 8007db8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	881b      	ldrh	r3, [r3, #0]
 8007dbe:	461a      	mov	r2, r3
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007dc8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6a1b      	ldr	r3, [r3, #32]
 8007dce:	1c9a      	adds	r2, r3, #2
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	621a      	str	r2, [r3, #32]
 8007dd4:	e008      	b.n	8007de8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6a1b      	ldr	r3, [r3, #32]
 8007dda:	1c59      	adds	r1, r3, #1
 8007ddc:	687a      	ldr	r2, [r7, #4]
 8007dde:	6211      	str	r1, [r2, #32]
 8007de0:	781a      	ldrb	r2, [r3, #0]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007dec:	b29b      	uxth	r3, r3
 8007dee:	3b01      	subs	r3, #1
 8007df0:	b29b      	uxth	r3, r3
 8007df2:	687a      	ldr	r2, [r7, #4]
 8007df4:	4619      	mov	r1, r3
 8007df6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d10f      	bne.n	8007e1c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	68da      	ldr	r2, [r3, #12]
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007e0a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	68da      	ldr	r2, [r3, #12]
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e1a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	e000      	b.n	8007e22 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007e20:	2302      	movs	r3, #2
  }
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3714      	adds	r7, #20
 8007e26:	46bd      	mov	sp, r7
 8007e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2c:	4770      	bx	lr

08007e2e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007e2e:	b580      	push	{r7, lr}
 8007e30:	b082      	sub	sp, #8
 8007e32:	af00      	add	r7, sp, #0
 8007e34:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	68da      	ldr	r2, [r3, #12]
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e44:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2220      	movs	r2, #32
 8007e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f7ff fcd6 	bl	8007800 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007e54:	2300      	movs	r3, #0
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3708      	adds	r7, #8
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}

08007e5e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007e5e:	b580      	push	{r7, lr}
 8007e60:	b08c      	sub	sp, #48	; 0x30
 8007e62:	af00      	add	r7, sp, #0
 8007e64:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e6c:	b2db      	uxtb	r3, r3
 8007e6e:	2b22      	cmp	r3, #34	; 0x22
 8007e70:	f040 80ab 	bne.w	8007fca <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	689b      	ldr	r3, [r3, #8]
 8007e78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e7c:	d117      	bne.n	8007eae <UART_Receive_IT+0x50>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	691b      	ldr	r3, [r3, #16]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d113      	bne.n	8007eae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007e86:	2300      	movs	r3, #0
 8007e88:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e8e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	b29b      	uxth	r3, r3
 8007e98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e9c:	b29a      	uxth	r2, r3
 8007e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ea0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ea6:	1c9a      	adds	r2, r3, #2
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	629a      	str	r2, [r3, #40]	; 0x28
 8007eac:	e026      	b.n	8007efc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	689b      	ldr	r3, [r3, #8]
 8007ebc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ec0:	d007      	beq.n	8007ed2 <UART_Receive_IT+0x74>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	689b      	ldr	r3, [r3, #8]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d10a      	bne.n	8007ee0 <UART_Receive_IT+0x82>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	691b      	ldr	r3, [r3, #16]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d106      	bne.n	8007ee0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	685b      	ldr	r3, [r3, #4]
 8007ed8:	b2da      	uxtb	r2, r3
 8007eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007edc:	701a      	strb	r2, [r3, #0]
 8007ede:	e008      	b.n	8007ef2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	b2db      	uxtb	r3, r3
 8007ee8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007eec:	b2da      	uxtb	r2, r3
 8007eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ef0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ef6:	1c5a      	adds	r2, r3, #1
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007f00:	b29b      	uxth	r3, r3
 8007f02:	3b01      	subs	r3, #1
 8007f04:	b29b      	uxth	r3, r3
 8007f06:	687a      	ldr	r2, [r7, #4]
 8007f08:	4619      	mov	r1, r3
 8007f0a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d15a      	bne.n	8007fc6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	68da      	ldr	r2, [r3, #12]
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f022 0220 	bic.w	r2, r2, #32
 8007f1e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	68da      	ldr	r2, [r3, #12]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007f2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	695a      	ldr	r2, [r3, #20]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f022 0201 	bic.w	r2, r2, #1
 8007f3e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2220      	movs	r2, #32
 8007f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f4c:	2b01      	cmp	r3, #1
 8007f4e:	d135      	bne.n	8007fbc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2200      	movs	r2, #0
 8007f54:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	330c      	adds	r3, #12
 8007f5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	e853 3f00 	ldrex	r3, [r3]
 8007f64:	613b      	str	r3, [r7, #16]
   return(result);
 8007f66:	693b      	ldr	r3, [r7, #16]
 8007f68:	f023 0310 	bic.w	r3, r3, #16
 8007f6c:	627b      	str	r3, [r7, #36]	; 0x24
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	330c      	adds	r3, #12
 8007f74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f76:	623a      	str	r2, [r7, #32]
 8007f78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f7a:	69f9      	ldr	r1, [r7, #28]
 8007f7c:	6a3a      	ldr	r2, [r7, #32]
 8007f7e:	e841 2300 	strex	r3, r2, [r1]
 8007f82:	61bb      	str	r3, [r7, #24]
   return(result);
 8007f84:	69bb      	ldr	r3, [r7, #24]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d1e5      	bne.n	8007f56 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f003 0310 	and.w	r3, r3, #16
 8007f94:	2b10      	cmp	r3, #16
 8007f96:	d10a      	bne.n	8007fae <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007f98:	2300      	movs	r3, #0
 8007f9a:	60fb      	str	r3, [r7, #12]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	60fb      	str	r3, [r7, #12]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	685b      	ldr	r3, [r3, #4]
 8007faa:	60fb      	str	r3, [r7, #12]
 8007fac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007fb2:	4619      	mov	r1, r3
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f7fa fc6d 	bl	8002894 <HAL_UARTEx_RxEventCallback>
 8007fba:	e002      	b.n	8007fc2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f7ff fc29 	bl	8007814 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	e002      	b.n	8007fcc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	e000      	b.n	8007fcc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007fca:	2302      	movs	r3, #2
  }
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	3730      	adds	r7, #48	; 0x30
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}

08007fd4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fd8:	b09f      	sub	sp, #124	; 0x7c
 8007fda:	af00      	add	r7, sp, #0
 8007fdc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007fde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	691b      	ldr	r3, [r3, #16]
 8007fe4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007fe8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fea:	68d9      	ldr	r1, [r3, #12]
 8007fec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fee:	681a      	ldr	r2, [r3, #0]
 8007ff0:	ea40 0301 	orr.w	r3, r0, r1
 8007ff4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007ff6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ff8:	689a      	ldr	r2, [r3, #8]
 8007ffa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ffc:	691b      	ldr	r3, [r3, #16]
 8007ffe:	431a      	orrs	r2, r3
 8008000:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008002:	695b      	ldr	r3, [r3, #20]
 8008004:	431a      	orrs	r2, r3
 8008006:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008008:	69db      	ldr	r3, [r3, #28]
 800800a:	4313      	orrs	r3, r2
 800800c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800800e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	68db      	ldr	r3, [r3, #12]
 8008014:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008018:	f021 010c 	bic.w	r1, r1, #12
 800801c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800801e:	681a      	ldr	r2, [r3, #0]
 8008020:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008022:	430b      	orrs	r3, r1
 8008024:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008026:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	695b      	ldr	r3, [r3, #20]
 800802c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008030:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008032:	6999      	ldr	r1, [r3, #24]
 8008034:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008036:	681a      	ldr	r2, [r3, #0]
 8008038:	ea40 0301 	orr.w	r3, r0, r1
 800803c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800803e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008040:	681a      	ldr	r2, [r3, #0]
 8008042:	4bc5      	ldr	r3, [pc, #788]	; (8008358 <UART_SetConfig+0x384>)
 8008044:	429a      	cmp	r2, r3
 8008046:	d004      	beq.n	8008052 <UART_SetConfig+0x7e>
 8008048:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800804a:	681a      	ldr	r2, [r3, #0]
 800804c:	4bc3      	ldr	r3, [pc, #780]	; (800835c <UART_SetConfig+0x388>)
 800804e:	429a      	cmp	r2, r3
 8008050:	d103      	bne.n	800805a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008052:	f7fd fff7 	bl	8006044 <HAL_RCC_GetPCLK2Freq>
 8008056:	6778      	str	r0, [r7, #116]	; 0x74
 8008058:	e002      	b.n	8008060 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800805a:	f7fd ffdf 	bl	800601c <HAL_RCC_GetPCLK1Freq>
 800805e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008060:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008062:	69db      	ldr	r3, [r3, #28]
 8008064:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008068:	f040 80b6 	bne.w	80081d8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800806c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800806e:	461c      	mov	r4, r3
 8008070:	f04f 0500 	mov.w	r5, #0
 8008074:	4622      	mov	r2, r4
 8008076:	462b      	mov	r3, r5
 8008078:	1891      	adds	r1, r2, r2
 800807a:	6439      	str	r1, [r7, #64]	; 0x40
 800807c:	415b      	adcs	r3, r3
 800807e:	647b      	str	r3, [r7, #68]	; 0x44
 8008080:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008084:	1912      	adds	r2, r2, r4
 8008086:	eb45 0303 	adc.w	r3, r5, r3
 800808a:	f04f 0000 	mov.w	r0, #0
 800808e:	f04f 0100 	mov.w	r1, #0
 8008092:	00d9      	lsls	r1, r3, #3
 8008094:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008098:	00d0      	lsls	r0, r2, #3
 800809a:	4602      	mov	r2, r0
 800809c:	460b      	mov	r3, r1
 800809e:	1911      	adds	r1, r2, r4
 80080a0:	6639      	str	r1, [r7, #96]	; 0x60
 80080a2:	416b      	adcs	r3, r5
 80080a4:	667b      	str	r3, [r7, #100]	; 0x64
 80080a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080a8:	685b      	ldr	r3, [r3, #4]
 80080aa:	461a      	mov	r2, r3
 80080ac:	f04f 0300 	mov.w	r3, #0
 80080b0:	1891      	adds	r1, r2, r2
 80080b2:	63b9      	str	r1, [r7, #56]	; 0x38
 80080b4:	415b      	adcs	r3, r3
 80080b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80080bc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80080c0:	f7f8 fde2 	bl	8000c88 <__aeabi_uldivmod>
 80080c4:	4602      	mov	r2, r0
 80080c6:	460b      	mov	r3, r1
 80080c8:	4ba5      	ldr	r3, [pc, #660]	; (8008360 <UART_SetConfig+0x38c>)
 80080ca:	fba3 2302 	umull	r2, r3, r3, r2
 80080ce:	095b      	lsrs	r3, r3, #5
 80080d0:	011e      	lsls	r6, r3, #4
 80080d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80080d4:	461c      	mov	r4, r3
 80080d6:	f04f 0500 	mov.w	r5, #0
 80080da:	4622      	mov	r2, r4
 80080dc:	462b      	mov	r3, r5
 80080de:	1891      	adds	r1, r2, r2
 80080e0:	6339      	str	r1, [r7, #48]	; 0x30
 80080e2:	415b      	adcs	r3, r3
 80080e4:	637b      	str	r3, [r7, #52]	; 0x34
 80080e6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80080ea:	1912      	adds	r2, r2, r4
 80080ec:	eb45 0303 	adc.w	r3, r5, r3
 80080f0:	f04f 0000 	mov.w	r0, #0
 80080f4:	f04f 0100 	mov.w	r1, #0
 80080f8:	00d9      	lsls	r1, r3, #3
 80080fa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80080fe:	00d0      	lsls	r0, r2, #3
 8008100:	4602      	mov	r2, r0
 8008102:	460b      	mov	r3, r1
 8008104:	1911      	adds	r1, r2, r4
 8008106:	65b9      	str	r1, [r7, #88]	; 0x58
 8008108:	416b      	adcs	r3, r5
 800810a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800810c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800810e:	685b      	ldr	r3, [r3, #4]
 8008110:	461a      	mov	r2, r3
 8008112:	f04f 0300 	mov.w	r3, #0
 8008116:	1891      	adds	r1, r2, r2
 8008118:	62b9      	str	r1, [r7, #40]	; 0x28
 800811a:	415b      	adcs	r3, r3
 800811c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800811e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008122:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008126:	f7f8 fdaf 	bl	8000c88 <__aeabi_uldivmod>
 800812a:	4602      	mov	r2, r0
 800812c:	460b      	mov	r3, r1
 800812e:	4b8c      	ldr	r3, [pc, #560]	; (8008360 <UART_SetConfig+0x38c>)
 8008130:	fba3 1302 	umull	r1, r3, r3, r2
 8008134:	095b      	lsrs	r3, r3, #5
 8008136:	2164      	movs	r1, #100	; 0x64
 8008138:	fb01 f303 	mul.w	r3, r1, r3
 800813c:	1ad3      	subs	r3, r2, r3
 800813e:	00db      	lsls	r3, r3, #3
 8008140:	3332      	adds	r3, #50	; 0x32
 8008142:	4a87      	ldr	r2, [pc, #540]	; (8008360 <UART_SetConfig+0x38c>)
 8008144:	fba2 2303 	umull	r2, r3, r2, r3
 8008148:	095b      	lsrs	r3, r3, #5
 800814a:	005b      	lsls	r3, r3, #1
 800814c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008150:	441e      	add	r6, r3
 8008152:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008154:	4618      	mov	r0, r3
 8008156:	f04f 0100 	mov.w	r1, #0
 800815a:	4602      	mov	r2, r0
 800815c:	460b      	mov	r3, r1
 800815e:	1894      	adds	r4, r2, r2
 8008160:	623c      	str	r4, [r7, #32]
 8008162:	415b      	adcs	r3, r3
 8008164:	627b      	str	r3, [r7, #36]	; 0x24
 8008166:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800816a:	1812      	adds	r2, r2, r0
 800816c:	eb41 0303 	adc.w	r3, r1, r3
 8008170:	f04f 0400 	mov.w	r4, #0
 8008174:	f04f 0500 	mov.w	r5, #0
 8008178:	00dd      	lsls	r5, r3, #3
 800817a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800817e:	00d4      	lsls	r4, r2, #3
 8008180:	4622      	mov	r2, r4
 8008182:	462b      	mov	r3, r5
 8008184:	1814      	adds	r4, r2, r0
 8008186:	653c      	str	r4, [r7, #80]	; 0x50
 8008188:	414b      	adcs	r3, r1
 800818a:	657b      	str	r3, [r7, #84]	; 0x54
 800818c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	461a      	mov	r2, r3
 8008192:	f04f 0300 	mov.w	r3, #0
 8008196:	1891      	adds	r1, r2, r2
 8008198:	61b9      	str	r1, [r7, #24]
 800819a:	415b      	adcs	r3, r3
 800819c:	61fb      	str	r3, [r7, #28]
 800819e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80081a2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80081a6:	f7f8 fd6f 	bl	8000c88 <__aeabi_uldivmod>
 80081aa:	4602      	mov	r2, r0
 80081ac:	460b      	mov	r3, r1
 80081ae:	4b6c      	ldr	r3, [pc, #432]	; (8008360 <UART_SetConfig+0x38c>)
 80081b0:	fba3 1302 	umull	r1, r3, r3, r2
 80081b4:	095b      	lsrs	r3, r3, #5
 80081b6:	2164      	movs	r1, #100	; 0x64
 80081b8:	fb01 f303 	mul.w	r3, r1, r3
 80081bc:	1ad3      	subs	r3, r2, r3
 80081be:	00db      	lsls	r3, r3, #3
 80081c0:	3332      	adds	r3, #50	; 0x32
 80081c2:	4a67      	ldr	r2, [pc, #412]	; (8008360 <UART_SetConfig+0x38c>)
 80081c4:	fba2 2303 	umull	r2, r3, r2, r3
 80081c8:	095b      	lsrs	r3, r3, #5
 80081ca:	f003 0207 	and.w	r2, r3, #7
 80081ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	4432      	add	r2, r6
 80081d4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80081d6:	e0b9      	b.n	800834c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80081d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80081da:	461c      	mov	r4, r3
 80081dc:	f04f 0500 	mov.w	r5, #0
 80081e0:	4622      	mov	r2, r4
 80081e2:	462b      	mov	r3, r5
 80081e4:	1891      	adds	r1, r2, r2
 80081e6:	6139      	str	r1, [r7, #16]
 80081e8:	415b      	adcs	r3, r3
 80081ea:	617b      	str	r3, [r7, #20]
 80081ec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80081f0:	1912      	adds	r2, r2, r4
 80081f2:	eb45 0303 	adc.w	r3, r5, r3
 80081f6:	f04f 0000 	mov.w	r0, #0
 80081fa:	f04f 0100 	mov.w	r1, #0
 80081fe:	00d9      	lsls	r1, r3, #3
 8008200:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008204:	00d0      	lsls	r0, r2, #3
 8008206:	4602      	mov	r2, r0
 8008208:	460b      	mov	r3, r1
 800820a:	eb12 0804 	adds.w	r8, r2, r4
 800820e:	eb43 0905 	adc.w	r9, r3, r5
 8008212:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008214:	685b      	ldr	r3, [r3, #4]
 8008216:	4618      	mov	r0, r3
 8008218:	f04f 0100 	mov.w	r1, #0
 800821c:	f04f 0200 	mov.w	r2, #0
 8008220:	f04f 0300 	mov.w	r3, #0
 8008224:	008b      	lsls	r3, r1, #2
 8008226:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800822a:	0082      	lsls	r2, r0, #2
 800822c:	4640      	mov	r0, r8
 800822e:	4649      	mov	r1, r9
 8008230:	f7f8 fd2a 	bl	8000c88 <__aeabi_uldivmod>
 8008234:	4602      	mov	r2, r0
 8008236:	460b      	mov	r3, r1
 8008238:	4b49      	ldr	r3, [pc, #292]	; (8008360 <UART_SetConfig+0x38c>)
 800823a:	fba3 2302 	umull	r2, r3, r3, r2
 800823e:	095b      	lsrs	r3, r3, #5
 8008240:	011e      	lsls	r6, r3, #4
 8008242:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008244:	4618      	mov	r0, r3
 8008246:	f04f 0100 	mov.w	r1, #0
 800824a:	4602      	mov	r2, r0
 800824c:	460b      	mov	r3, r1
 800824e:	1894      	adds	r4, r2, r2
 8008250:	60bc      	str	r4, [r7, #8]
 8008252:	415b      	adcs	r3, r3
 8008254:	60fb      	str	r3, [r7, #12]
 8008256:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800825a:	1812      	adds	r2, r2, r0
 800825c:	eb41 0303 	adc.w	r3, r1, r3
 8008260:	f04f 0400 	mov.w	r4, #0
 8008264:	f04f 0500 	mov.w	r5, #0
 8008268:	00dd      	lsls	r5, r3, #3
 800826a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800826e:	00d4      	lsls	r4, r2, #3
 8008270:	4622      	mov	r2, r4
 8008272:	462b      	mov	r3, r5
 8008274:	1814      	adds	r4, r2, r0
 8008276:	64bc      	str	r4, [r7, #72]	; 0x48
 8008278:	414b      	adcs	r3, r1
 800827a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800827c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800827e:	685b      	ldr	r3, [r3, #4]
 8008280:	4618      	mov	r0, r3
 8008282:	f04f 0100 	mov.w	r1, #0
 8008286:	f04f 0200 	mov.w	r2, #0
 800828a:	f04f 0300 	mov.w	r3, #0
 800828e:	008b      	lsls	r3, r1, #2
 8008290:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008294:	0082      	lsls	r2, r0, #2
 8008296:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800829a:	f7f8 fcf5 	bl	8000c88 <__aeabi_uldivmod>
 800829e:	4602      	mov	r2, r0
 80082a0:	460b      	mov	r3, r1
 80082a2:	4b2f      	ldr	r3, [pc, #188]	; (8008360 <UART_SetConfig+0x38c>)
 80082a4:	fba3 1302 	umull	r1, r3, r3, r2
 80082a8:	095b      	lsrs	r3, r3, #5
 80082aa:	2164      	movs	r1, #100	; 0x64
 80082ac:	fb01 f303 	mul.w	r3, r1, r3
 80082b0:	1ad3      	subs	r3, r2, r3
 80082b2:	011b      	lsls	r3, r3, #4
 80082b4:	3332      	adds	r3, #50	; 0x32
 80082b6:	4a2a      	ldr	r2, [pc, #168]	; (8008360 <UART_SetConfig+0x38c>)
 80082b8:	fba2 2303 	umull	r2, r3, r2, r3
 80082bc:	095b      	lsrs	r3, r3, #5
 80082be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80082c2:	441e      	add	r6, r3
 80082c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80082c6:	4618      	mov	r0, r3
 80082c8:	f04f 0100 	mov.w	r1, #0
 80082cc:	4602      	mov	r2, r0
 80082ce:	460b      	mov	r3, r1
 80082d0:	1894      	adds	r4, r2, r2
 80082d2:	603c      	str	r4, [r7, #0]
 80082d4:	415b      	adcs	r3, r3
 80082d6:	607b      	str	r3, [r7, #4]
 80082d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082dc:	1812      	adds	r2, r2, r0
 80082de:	eb41 0303 	adc.w	r3, r1, r3
 80082e2:	f04f 0400 	mov.w	r4, #0
 80082e6:	f04f 0500 	mov.w	r5, #0
 80082ea:	00dd      	lsls	r5, r3, #3
 80082ec:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80082f0:	00d4      	lsls	r4, r2, #3
 80082f2:	4622      	mov	r2, r4
 80082f4:	462b      	mov	r3, r5
 80082f6:	eb12 0a00 	adds.w	sl, r2, r0
 80082fa:	eb43 0b01 	adc.w	fp, r3, r1
 80082fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008300:	685b      	ldr	r3, [r3, #4]
 8008302:	4618      	mov	r0, r3
 8008304:	f04f 0100 	mov.w	r1, #0
 8008308:	f04f 0200 	mov.w	r2, #0
 800830c:	f04f 0300 	mov.w	r3, #0
 8008310:	008b      	lsls	r3, r1, #2
 8008312:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008316:	0082      	lsls	r2, r0, #2
 8008318:	4650      	mov	r0, sl
 800831a:	4659      	mov	r1, fp
 800831c:	f7f8 fcb4 	bl	8000c88 <__aeabi_uldivmod>
 8008320:	4602      	mov	r2, r0
 8008322:	460b      	mov	r3, r1
 8008324:	4b0e      	ldr	r3, [pc, #56]	; (8008360 <UART_SetConfig+0x38c>)
 8008326:	fba3 1302 	umull	r1, r3, r3, r2
 800832a:	095b      	lsrs	r3, r3, #5
 800832c:	2164      	movs	r1, #100	; 0x64
 800832e:	fb01 f303 	mul.w	r3, r1, r3
 8008332:	1ad3      	subs	r3, r2, r3
 8008334:	011b      	lsls	r3, r3, #4
 8008336:	3332      	adds	r3, #50	; 0x32
 8008338:	4a09      	ldr	r2, [pc, #36]	; (8008360 <UART_SetConfig+0x38c>)
 800833a:	fba2 2303 	umull	r2, r3, r2, r3
 800833e:	095b      	lsrs	r3, r3, #5
 8008340:	f003 020f 	and.w	r2, r3, #15
 8008344:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4432      	add	r2, r6
 800834a:	609a      	str	r2, [r3, #8]
}
 800834c:	bf00      	nop
 800834e:	377c      	adds	r7, #124	; 0x7c
 8008350:	46bd      	mov	sp, r7
 8008352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008356:	bf00      	nop
 8008358:	40011000 	.word	0x40011000
 800835c:	40011400 	.word	0x40011400
 8008360:	51eb851f 	.word	0x51eb851f

08008364 <atof>:
 8008364:	2100      	movs	r1, #0
 8008366:	f001 be0b 	b.w	8009f80 <strtod>
	...

0800836c <__errno>:
 800836c:	4b01      	ldr	r3, [pc, #4]	; (8008374 <__errno+0x8>)
 800836e:	6818      	ldr	r0, [r3, #0]
 8008370:	4770      	bx	lr
 8008372:	bf00      	nop
 8008374:	20000014 	.word	0x20000014

08008378 <__libc_init_array>:
 8008378:	b570      	push	{r4, r5, r6, lr}
 800837a:	4d0d      	ldr	r5, [pc, #52]	; (80083b0 <__libc_init_array+0x38>)
 800837c:	4c0d      	ldr	r4, [pc, #52]	; (80083b4 <__libc_init_array+0x3c>)
 800837e:	1b64      	subs	r4, r4, r5
 8008380:	10a4      	asrs	r4, r4, #2
 8008382:	2600      	movs	r6, #0
 8008384:	42a6      	cmp	r6, r4
 8008386:	d109      	bne.n	800839c <__libc_init_array+0x24>
 8008388:	4d0b      	ldr	r5, [pc, #44]	; (80083b8 <__libc_init_array+0x40>)
 800838a:	4c0c      	ldr	r4, [pc, #48]	; (80083bc <__libc_init_array+0x44>)
 800838c:	f004 fd50 	bl	800ce30 <_init>
 8008390:	1b64      	subs	r4, r4, r5
 8008392:	10a4      	asrs	r4, r4, #2
 8008394:	2600      	movs	r6, #0
 8008396:	42a6      	cmp	r6, r4
 8008398:	d105      	bne.n	80083a6 <__libc_init_array+0x2e>
 800839a:	bd70      	pop	{r4, r5, r6, pc}
 800839c:	f855 3b04 	ldr.w	r3, [r5], #4
 80083a0:	4798      	blx	r3
 80083a2:	3601      	adds	r6, #1
 80083a4:	e7ee      	b.n	8008384 <__libc_init_array+0xc>
 80083a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80083aa:	4798      	blx	r3
 80083ac:	3601      	adds	r6, #1
 80083ae:	e7f2      	b.n	8008396 <__libc_init_array+0x1e>
 80083b0:	0800e614 	.word	0x0800e614
 80083b4:	0800e614 	.word	0x0800e614
 80083b8:	0800e614 	.word	0x0800e614
 80083bc:	0800e618 	.word	0x0800e618

080083c0 <memcpy>:
 80083c0:	440a      	add	r2, r1
 80083c2:	4291      	cmp	r1, r2
 80083c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80083c8:	d100      	bne.n	80083cc <memcpy+0xc>
 80083ca:	4770      	bx	lr
 80083cc:	b510      	push	{r4, lr}
 80083ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083d6:	4291      	cmp	r1, r2
 80083d8:	d1f9      	bne.n	80083ce <memcpy+0xe>
 80083da:	bd10      	pop	{r4, pc}

080083dc <memset>:
 80083dc:	4402      	add	r2, r0
 80083de:	4603      	mov	r3, r0
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d100      	bne.n	80083e6 <memset+0xa>
 80083e4:	4770      	bx	lr
 80083e6:	f803 1b01 	strb.w	r1, [r3], #1
 80083ea:	e7f9      	b.n	80083e0 <memset+0x4>

080083ec <__cvt>:
 80083ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80083f0:	ec55 4b10 	vmov	r4, r5, d0
 80083f4:	2d00      	cmp	r5, #0
 80083f6:	460e      	mov	r6, r1
 80083f8:	4619      	mov	r1, r3
 80083fa:	462b      	mov	r3, r5
 80083fc:	bfbb      	ittet	lt
 80083fe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008402:	461d      	movlt	r5, r3
 8008404:	2300      	movge	r3, #0
 8008406:	232d      	movlt	r3, #45	; 0x2d
 8008408:	700b      	strb	r3, [r1, #0]
 800840a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800840c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008410:	4691      	mov	r9, r2
 8008412:	f023 0820 	bic.w	r8, r3, #32
 8008416:	bfbc      	itt	lt
 8008418:	4622      	movlt	r2, r4
 800841a:	4614      	movlt	r4, r2
 800841c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008420:	d005      	beq.n	800842e <__cvt+0x42>
 8008422:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008426:	d100      	bne.n	800842a <__cvt+0x3e>
 8008428:	3601      	adds	r6, #1
 800842a:	2102      	movs	r1, #2
 800842c:	e000      	b.n	8008430 <__cvt+0x44>
 800842e:	2103      	movs	r1, #3
 8008430:	ab03      	add	r3, sp, #12
 8008432:	9301      	str	r3, [sp, #4]
 8008434:	ab02      	add	r3, sp, #8
 8008436:	9300      	str	r3, [sp, #0]
 8008438:	ec45 4b10 	vmov	d0, r4, r5
 800843c:	4653      	mov	r3, sl
 800843e:	4632      	mov	r2, r6
 8008440:	f001 febe 	bl	800a1c0 <_dtoa_r>
 8008444:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008448:	4607      	mov	r7, r0
 800844a:	d102      	bne.n	8008452 <__cvt+0x66>
 800844c:	f019 0f01 	tst.w	r9, #1
 8008450:	d022      	beq.n	8008498 <__cvt+0xac>
 8008452:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008456:	eb07 0906 	add.w	r9, r7, r6
 800845a:	d110      	bne.n	800847e <__cvt+0x92>
 800845c:	783b      	ldrb	r3, [r7, #0]
 800845e:	2b30      	cmp	r3, #48	; 0x30
 8008460:	d10a      	bne.n	8008478 <__cvt+0x8c>
 8008462:	2200      	movs	r2, #0
 8008464:	2300      	movs	r3, #0
 8008466:	4620      	mov	r0, r4
 8008468:	4629      	mov	r1, r5
 800846a:	f7f8 fb2d 	bl	8000ac8 <__aeabi_dcmpeq>
 800846e:	b918      	cbnz	r0, 8008478 <__cvt+0x8c>
 8008470:	f1c6 0601 	rsb	r6, r6, #1
 8008474:	f8ca 6000 	str.w	r6, [sl]
 8008478:	f8da 3000 	ldr.w	r3, [sl]
 800847c:	4499      	add	r9, r3
 800847e:	2200      	movs	r2, #0
 8008480:	2300      	movs	r3, #0
 8008482:	4620      	mov	r0, r4
 8008484:	4629      	mov	r1, r5
 8008486:	f7f8 fb1f 	bl	8000ac8 <__aeabi_dcmpeq>
 800848a:	b108      	cbz	r0, 8008490 <__cvt+0xa4>
 800848c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008490:	2230      	movs	r2, #48	; 0x30
 8008492:	9b03      	ldr	r3, [sp, #12]
 8008494:	454b      	cmp	r3, r9
 8008496:	d307      	bcc.n	80084a8 <__cvt+0xbc>
 8008498:	9b03      	ldr	r3, [sp, #12]
 800849a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800849c:	1bdb      	subs	r3, r3, r7
 800849e:	4638      	mov	r0, r7
 80084a0:	6013      	str	r3, [r2, #0]
 80084a2:	b004      	add	sp, #16
 80084a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084a8:	1c59      	adds	r1, r3, #1
 80084aa:	9103      	str	r1, [sp, #12]
 80084ac:	701a      	strb	r2, [r3, #0]
 80084ae:	e7f0      	b.n	8008492 <__cvt+0xa6>

080084b0 <__exponent>:
 80084b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80084b2:	4603      	mov	r3, r0
 80084b4:	2900      	cmp	r1, #0
 80084b6:	bfb8      	it	lt
 80084b8:	4249      	neglt	r1, r1
 80084ba:	f803 2b02 	strb.w	r2, [r3], #2
 80084be:	bfb4      	ite	lt
 80084c0:	222d      	movlt	r2, #45	; 0x2d
 80084c2:	222b      	movge	r2, #43	; 0x2b
 80084c4:	2909      	cmp	r1, #9
 80084c6:	7042      	strb	r2, [r0, #1]
 80084c8:	dd2a      	ble.n	8008520 <__exponent+0x70>
 80084ca:	f10d 0407 	add.w	r4, sp, #7
 80084ce:	46a4      	mov	ip, r4
 80084d0:	270a      	movs	r7, #10
 80084d2:	46a6      	mov	lr, r4
 80084d4:	460a      	mov	r2, r1
 80084d6:	fb91 f6f7 	sdiv	r6, r1, r7
 80084da:	fb07 1516 	mls	r5, r7, r6, r1
 80084de:	3530      	adds	r5, #48	; 0x30
 80084e0:	2a63      	cmp	r2, #99	; 0x63
 80084e2:	f104 34ff 	add.w	r4, r4, #4294967295
 80084e6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80084ea:	4631      	mov	r1, r6
 80084ec:	dcf1      	bgt.n	80084d2 <__exponent+0x22>
 80084ee:	3130      	adds	r1, #48	; 0x30
 80084f0:	f1ae 0502 	sub.w	r5, lr, #2
 80084f4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80084f8:	1c44      	adds	r4, r0, #1
 80084fa:	4629      	mov	r1, r5
 80084fc:	4561      	cmp	r1, ip
 80084fe:	d30a      	bcc.n	8008516 <__exponent+0x66>
 8008500:	f10d 0209 	add.w	r2, sp, #9
 8008504:	eba2 020e 	sub.w	r2, r2, lr
 8008508:	4565      	cmp	r5, ip
 800850a:	bf88      	it	hi
 800850c:	2200      	movhi	r2, #0
 800850e:	4413      	add	r3, r2
 8008510:	1a18      	subs	r0, r3, r0
 8008512:	b003      	add	sp, #12
 8008514:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008516:	f811 2b01 	ldrb.w	r2, [r1], #1
 800851a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800851e:	e7ed      	b.n	80084fc <__exponent+0x4c>
 8008520:	2330      	movs	r3, #48	; 0x30
 8008522:	3130      	adds	r1, #48	; 0x30
 8008524:	7083      	strb	r3, [r0, #2]
 8008526:	70c1      	strb	r1, [r0, #3]
 8008528:	1d03      	adds	r3, r0, #4
 800852a:	e7f1      	b.n	8008510 <__exponent+0x60>

0800852c <_printf_float>:
 800852c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008530:	ed2d 8b02 	vpush	{d8}
 8008534:	b08d      	sub	sp, #52	; 0x34
 8008536:	460c      	mov	r4, r1
 8008538:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800853c:	4616      	mov	r6, r2
 800853e:	461f      	mov	r7, r3
 8008540:	4605      	mov	r5, r0
 8008542:	f003 f94f 	bl	800b7e4 <_localeconv_r>
 8008546:	f8d0 a000 	ldr.w	sl, [r0]
 800854a:	4650      	mov	r0, sl
 800854c:	f7f7 fe90 	bl	8000270 <strlen>
 8008550:	2300      	movs	r3, #0
 8008552:	930a      	str	r3, [sp, #40]	; 0x28
 8008554:	6823      	ldr	r3, [r4, #0]
 8008556:	9305      	str	r3, [sp, #20]
 8008558:	f8d8 3000 	ldr.w	r3, [r8]
 800855c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008560:	3307      	adds	r3, #7
 8008562:	f023 0307 	bic.w	r3, r3, #7
 8008566:	f103 0208 	add.w	r2, r3, #8
 800856a:	f8c8 2000 	str.w	r2, [r8]
 800856e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008572:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008576:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800857a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800857e:	9307      	str	r3, [sp, #28]
 8008580:	f8cd 8018 	str.w	r8, [sp, #24]
 8008584:	ee08 0a10 	vmov	s16, r0
 8008588:	4b9f      	ldr	r3, [pc, #636]	; (8008808 <_printf_float+0x2dc>)
 800858a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800858e:	f04f 32ff 	mov.w	r2, #4294967295
 8008592:	f7f8 facb 	bl	8000b2c <__aeabi_dcmpun>
 8008596:	bb88      	cbnz	r0, 80085fc <_printf_float+0xd0>
 8008598:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800859c:	4b9a      	ldr	r3, [pc, #616]	; (8008808 <_printf_float+0x2dc>)
 800859e:	f04f 32ff 	mov.w	r2, #4294967295
 80085a2:	f7f8 faa5 	bl	8000af0 <__aeabi_dcmple>
 80085a6:	bb48      	cbnz	r0, 80085fc <_printf_float+0xd0>
 80085a8:	2200      	movs	r2, #0
 80085aa:	2300      	movs	r3, #0
 80085ac:	4640      	mov	r0, r8
 80085ae:	4649      	mov	r1, r9
 80085b0:	f7f8 fa94 	bl	8000adc <__aeabi_dcmplt>
 80085b4:	b110      	cbz	r0, 80085bc <_printf_float+0x90>
 80085b6:	232d      	movs	r3, #45	; 0x2d
 80085b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085bc:	4b93      	ldr	r3, [pc, #588]	; (800880c <_printf_float+0x2e0>)
 80085be:	4894      	ldr	r0, [pc, #592]	; (8008810 <_printf_float+0x2e4>)
 80085c0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80085c4:	bf94      	ite	ls
 80085c6:	4698      	movls	r8, r3
 80085c8:	4680      	movhi	r8, r0
 80085ca:	2303      	movs	r3, #3
 80085cc:	6123      	str	r3, [r4, #16]
 80085ce:	9b05      	ldr	r3, [sp, #20]
 80085d0:	f023 0204 	bic.w	r2, r3, #4
 80085d4:	6022      	str	r2, [r4, #0]
 80085d6:	f04f 0900 	mov.w	r9, #0
 80085da:	9700      	str	r7, [sp, #0]
 80085dc:	4633      	mov	r3, r6
 80085de:	aa0b      	add	r2, sp, #44	; 0x2c
 80085e0:	4621      	mov	r1, r4
 80085e2:	4628      	mov	r0, r5
 80085e4:	f000 f9d8 	bl	8008998 <_printf_common>
 80085e8:	3001      	adds	r0, #1
 80085ea:	f040 8090 	bne.w	800870e <_printf_float+0x1e2>
 80085ee:	f04f 30ff 	mov.w	r0, #4294967295
 80085f2:	b00d      	add	sp, #52	; 0x34
 80085f4:	ecbd 8b02 	vpop	{d8}
 80085f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085fc:	4642      	mov	r2, r8
 80085fe:	464b      	mov	r3, r9
 8008600:	4640      	mov	r0, r8
 8008602:	4649      	mov	r1, r9
 8008604:	f7f8 fa92 	bl	8000b2c <__aeabi_dcmpun>
 8008608:	b140      	cbz	r0, 800861c <_printf_float+0xf0>
 800860a:	464b      	mov	r3, r9
 800860c:	2b00      	cmp	r3, #0
 800860e:	bfbc      	itt	lt
 8008610:	232d      	movlt	r3, #45	; 0x2d
 8008612:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008616:	487f      	ldr	r0, [pc, #508]	; (8008814 <_printf_float+0x2e8>)
 8008618:	4b7f      	ldr	r3, [pc, #508]	; (8008818 <_printf_float+0x2ec>)
 800861a:	e7d1      	b.n	80085c0 <_printf_float+0x94>
 800861c:	6863      	ldr	r3, [r4, #4]
 800861e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008622:	9206      	str	r2, [sp, #24]
 8008624:	1c5a      	adds	r2, r3, #1
 8008626:	d13f      	bne.n	80086a8 <_printf_float+0x17c>
 8008628:	2306      	movs	r3, #6
 800862a:	6063      	str	r3, [r4, #4]
 800862c:	9b05      	ldr	r3, [sp, #20]
 800862e:	6861      	ldr	r1, [r4, #4]
 8008630:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008634:	2300      	movs	r3, #0
 8008636:	9303      	str	r3, [sp, #12]
 8008638:	ab0a      	add	r3, sp, #40	; 0x28
 800863a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800863e:	ab09      	add	r3, sp, #36	; 0x24
 8008640:	ec49 8b10 	vmov	d0, r8, r9
 8008644:	9300      	str	r3, [sp, #0]
 8008646:	6022      	str	r2, [r4, #0]
 8008648:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800864c:	4628      	mov	r0, r5
 800864e:	f7ff fecd 	bl	80083ec <__cvt>
 8008652:	9b06      	ldr	r3, [sp, #24]
 8008654:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008656:	2b47      	cmp	r3, #71	; 0x47
 8008658:	4680      	mov	r8, r0
 800865a:	d108      	bne.n	800866e <_printf_float+0x142>
 800865c:	1cc8      	adds	r0, r1, #3
 800865e:	db02      	blt.n	8008666 <_printf_float+0x13a>
 8008660:	6863      	ldr	r3, [r4, #4]
 8008662:	4299      	cmp	r1, r3
 8008664:	dd41      	ble.n	80086ea <_printf_float+0x1be>
 8008666:	f1ab 0b02 	sub.w	fp, fp, #2
 800866a:	fa5f fb8b 	uxtb.w	fp, fp
 800866e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008672:	d820      	bhi.n	80086b6 <_printf_float+0x18a>
 8008674:	3901      	subs	r1, #1
 8008676:	465a      	mov	r2, fp
 8008678:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800867c:	9109      	str	r1, [sp, #36]	; 0x24
 800867e:	f7ff ff17 	bl	80084b0 <__exponent>
 8008682:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008684:	1813      	adds	r3, r2, r0
 8008686:	2a01      	cmp	r2, #1
 8008688:	4681      	mov	r9, r0
 800868a:	6123      	str	r3, [r4, #16]
 800868c:	dc02      	bgt.n	8008694 <_printf_float+0x168>
 800868e:	6822      	ldr	r2, [r4, #0]
 8008690:	07d2      	lsls	r2, r2, #31
 8008692:	d501      	bpl.n	8008698 <_printf_float+0x16c>
 8008694:	3301      	adds	r3, #1
 8008696:	6123      	str	r3, [r4, #16]
 8008698:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800869c:	2b00      	cmp	r3, #0
 800869e:	d09c      	beq.n	80085da <_printf_float+0xae>
 80086a0:	232d      	movs	r3, #45	; 0x2d
 80086a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086a6:	e798      	b.n	80085da <_printf_float+0xae>
 80086a8:	9a06      	ldr	r2, [sp, #24]
 80086aa:	2a47      	cmp	r2, #71	; 0x47
 80086ac:	d1be      	bne.n	800862c <_printf_float+0x100>
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d1bc      	bne.n	800862c <_printf_float+0x100>
 80086b2:	2301      	movs	r3, #1
 80086b4:	e7b9      	b.n	800862a <_printf_float+0xfe>
 80086b6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80086ba:	d118      	bne.n	80086ee <_printf_float+0x1c2>
 80086bc:	2900      	cmp	r1, #0
 80086be:	6863      	ldr	r3, [r4, #4]
 80086c0:	dd0b      	ble.n	80086da <_printf_float+0x1ae>
 80086c2:	6121      	str	r1, [r4, #16]
 80086c4:	b913      	cbnz	r3, 80086cc <_printf_float+0x1a0>
 80086c6:	6822      	ldr	r2, [r4, #0]
 80086c8:	07d0      	lsls	r0, r2, #31
 80086ca:	d502      	bpl.n	80086d2 <_printf_float+0x1a6>
 80086cc:	3301      	adds	r3, #1
 80086ce:	440b      	add	r3, r1
 80086d0:	6123      	str	r3, [r4, #16]
 80086d2:	65a1      	str	r1, [r4, #88]	; 0x58
 80086d4:	f04f 0900 	mov.w	r9, #0
 80086d8:	e7de      	b.n	8008698 <_printf_float+0x16c>
 80086da:	b913      	cbnz	r3, 80086e2 <_printf_float+0x1b6>
 80086dc:	6822      	ldr	r2, [r4, #0]
 80086de:	07d2      	lsls	r2, r2, #31
 80086e0:	d501      	bpl.n	80086e6 <_printf_float+0x1ba>
 80086e2:	3302      	adds	r3, #2
 80086e4:	e7f4      	b.n	80086d0 <_printf_float+0x1a4>
 80086e6:	2301      	movs	r3, #1
 80086e8:	e7f2      	b.n	80086d0 <_printf_float+0x1a4>
 80086ea:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80086ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086f0:	4299      	cmp	r1, r3
 80086f2:	db05      	blt.n	8008700 <_printf_float+0x1d4>
 80086f4:	6823      	ldr	r3, [r4, #0]
 80086f6:	6121      	str	r1, [r4, #16]
 80086f8:	07d8      	lsls	r0, r3, #31
 80086fa:	d5ea      	bpl.n	80086d2 <_printf_float+0x1a6>
 80086fc:	1c4b      	adds	r3, r1, #1
 80086fe:	e7e7      	b.n	80086d0 <_printf_float+0x1a4>
 8008700:	2900      	cmp	r1, #0
 8008702:	bfd4      	ite	le
 8008704:	f1c1 0202 	rsble	r2, r1, #2
 8008708:	2201      	movgt	r2, #1
 800870a:	4413      	add	r3, r2
 800870c:	e7e0      	b.n	80086d0 <_printf_float+0x1a4>
 800870e:	6823      	ldr	r3, [r4, #0]
 8008710:	055a      	lsls	r2, r3, #21
 8008712:	d407      	bmi.n	8008724 <_printf_float+0x1f8>
 8008714:	6923      	ldr	r3, [r4, #16]
 8008716:	4642      	mov	r2, r8
 8008718:	4631      	mov	r1, r6
 800871a:	4628      	mov	r0, r5
 800871c:	47b8      	blx	r7
 800871e:	3001      	adds	r0, #1
 8008720:	d12c      	bne.n	800877c <_printf_float+0x250>
 8008722:	e764      	b.n	80085ee <_printf_float+0xc2>
 8008724:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008728:	f240 80e0 	bls.w	80088ec <_printf_float+0x3c0>
 800872c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008730:	2200      	movs	r2, #0
 8008732:	2300      	movs	r3, #0
 8008734:	f7f8 f9c8 	bl	8000ac8 <__aeabi_dcmpeq>
 8008738:	2800      	cmp	r0, #0
 800873a:	d034      	beq.n	80087a6 <_printf_float+0x27a>
 800873c:	4a37      	ldr	r2, [pc, #220]	; (800881c <_printf_float+0x2f0>)
 800873e:	2301      	movs	r3, #1
 8008740:	4631      	mov	r1, r6
 8008742:	4628      	mov	r0, r5
 8008744:	47b8      	blx	r7
 8008746:	3001      	adds	r0, #1
 8008748:	f43f af51 	beq.w	80085ee <_printf_float+0xc2>
 800874c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008750:	429a      	cmp	r2, r3
 8008752:	db02      	blt.n	800875a <_printf_float+0x22e>
 8008754:	6823      	ldr	r3, [r4, #0]
 8008756:	07d8      	lsls	r0, r3, #31
 8008758:	d510      	bpl.n	800877c <_printf_float+0x250>
 800875a:	ee18 3a10 	vmov	r3, s16
 800875e:	4652      	mov	r2, sl
 8008760:	4631      	mov	r1, r6
 8008762:	4628      	mov	r0, r5
 8008764:	47b8      	blx	r7
 8008766:	3001      	adds	r0, #1
 8008768:	f43f af41 	beq.w	80085ee <_printf_float+0xc2>
 800876c:	f04f 0800 	mov.w	r8, #0
 8008770:	f104 091a 	add.w	r9, r4, #26
 8008774:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008776:	3b01      	subs	r3, #1
 8008778:	4543      	cmp	r3, r8
 800877a:	dc09      	bgt.n	8008790 <_printf_float+0x264>
 800877c:	6823      	ldr	r3, [r4, #0]
 800877e:	079b      	lsls	r3, r3, #30
 8008780:	f100 8105 	bmi.w	800898e <_printf_float+0x462>
 8008784:	68e0      	ldr	r0, [r4, #12]
 8008786:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008788:	4298      	cmp	r0, r3
 800878a:	bfb8      	it	lt
 800878c:	4618      	movlt	r0, r3
 800878e:	e730      	b.n	80085f2 <_printf_float+0xc6>
 8008790:	2301      	movs	r3, #1
 8008792:	464a      	mov	r2, r9
 8008794:	4631      	mov	r1, r6
 8008796:	4628      	mov	r0, r5
 8008798:	47b8      	blx	r7
 800879a:	3001      	adds	r0, #1
 800879c:	f43f af27 	beq.w	80085ee <_printf_float+0xc2>
 80087a0:	f108 0801 	add.w	r8, r8, #1
 80087a4:	e7e6      	b.n	8008774 <_printf_float+0x248>
 80087a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	dc39      	bgt.n	8008820 <_printf_float+0x2f4>
 80087ac:	4a1b      	ldr	r2, [pc, #108]	; (800881c <_printf_float+0x2f0>)
 80087ae:	2301      	movs	r3, #1
 80087b0:	4631      	mov	r1, r6
 80087b2:	4628      	mov	r0, r5
 80087b4:	47b8      	blx	r7
 80087b6:	3001      	adds	r0, #1
 80087b8:	f43f af19 	beq.w	80085ee <_printf_float+0xc2>
 80087bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80087c0:	4313      	orrs	r3, r2
 80087c2:	d102      	bne.n	80087ca <_printf_float+0x29e>
 80087c4:	6823      	ldr	r3, [r4, #0]
 80087c6:	07d9      	lsls	r1, r3, #31
 80087c8:	d5d8      	bpl.n	800877c <_printf_float+0x250>
 80087ca:	ee18 3a10 	vmov	r3, s16
 80087ce:	4652      	mov	r2, sl
 80087d0:	4631      	mov	r1, r6
 80087d2:	4628      	mov	r0, r5
 80087d4:	47b8      	blx	r7
 80087d6:	3001      	adds	r0, #1
 80087d8:	f43f af09 	beq.w	80085ee <_printf_float+0xc2>
 80087dc:	f04f 0900 	mov.w	r9, #0
 80087e0:	f104 0a1a 	add.w	sl, r4, #26
 80087e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087e6:	425b      	negs	r3, r3
 80087e8:	454b      	cmp	r3, r9
 80087ea:	dc01      	bgt.n	80087f0 <_printf_float+0x2c4>
 80087ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087ee:	e792      	b.n	8008716 <_printf_float+0x1ea>
 80087f0:	2301      	movs	r3, #1
 80087f2:	4652      	mov	r2, sl
 80087f4:	4631      	mov	r1, r6
 80087f6:	4628      	mov	r0, r5
 80087f8:	47b8      	blx	r7
 80087fa:	3001      	adds	r0, #1
 80087fc:	f43f aef7 	beq.w	80085ee <_printf_float+0xc2>
 8008800:	f109 0901 	add.w	r9, r9, #1
 8008804:	e7ee      	b.n	80087e4 <_printf_float+0x2b8>
 8008806:	bf00      	nop
 8008808:	7fefffff 	.word	0x7fefffff
 800880c:	0800e15c 	.word	0x0800e15c
 8008810:	0800e160 	.word	0x0800e160
 8008814:	0800e168 	.word	0x0800e168
 8008818:	0800e164 	.word	0x0800e164
 800881c:	0800e16c 	.word	0x0800e16c
 8008820:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008822:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008824:	429a      	cmp	r2, r3
 8008826:	bfa8      	it	ge
 8008828:	461a      	movge	r2, r3
 800882a:	2a00      	cmp	r2, #0
 800882c:	4691      	mov	r9, r2
 800882e:	dc37      	bgt.n	80088a0 <_printf_float+0x374>
 8008830:	f04f 0b00 	mov.w	fp, #0
 8008834:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008838:	f104 021a 	add.w	r2, r4, #26
 800883c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800883e:	9305      	str	r3, [sp, #20]
 8008840:	eba3 0309 	sub.w	r3, r3, r9
 8008844:	455b      	cmp	r3, fp
 8008846:	dc33      	bgt.n	80088b0 <_printf_float+0x384>
 8008848:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800884c:	429a      	cmp	r2, r3
 800884e:	db3b      	blt.n	80088c8 <_printf_float+0x39c>
 8008850:	6823      	ldr	r3, [r4, #0]
 8008852:	07da      	lsls	r2, r3, #31
 8008854:	d438      	bmi.n	80088c8 <_printf_float+0x39c>
 8008856:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008858:	9b05      	ldr	r3, [sp, #20]
 800885a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800885c:	1ad3      	subs	r3, r2, r3
 800885e:	eba2 0901 	sub.w	r9, r2, r1
 8008862:	4599      	cmp	r9, r3
 8008864:	bfa8      	it	ge
 8008866:	4699      	movge	r9, r3
 8008868:	f1b9 0f00 	cmp.w	r9, #0
 800886c:	dc35      	bgt.n	80088da <_printf_float+0x3ae>
 800886e:	f04f 0800 	mov.w	r8, #0
 8008872:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008876:	f104 0a1a 	add.w	sl, r4, #26
 800887a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800887e:	1a9b      	subs	r3, r3, r2
 8008880:	eba3 0309 	sub.w	r3, r3, r9
 8008884:	4543      	cmp	r3, r8
 8008886:	f77f af79 	ble.w	800877c <_printf_float+0x250>
 800888a:	2301      	movs	r3, #1
 800888c:	4652      	mov	r2, sl
 800888e:	4631      	mov	r1, r6
 8008890:	4628      	mov	r0, r5
 8008892:	47b8      	blx	r7
 8008894:	3001      	adds	r0, #1
 8008896:	f43f aeaa 	beq.w	80085ee <_printf_float+0xc2>
 800889a:	f108 0801 	add.w	r8, r8, #1
 800889e:	e7ec      	b.n	800887a <_printf_float+0x34e>
 80088a0:	4613      	mov	r3, r2
 80088a2:	4631      	mov	r1, r6
 80088a4:	4642      	mov	r2, r8
 80088a6:	4628      	mov	r0, r5
 80088a8:	47b8      	blx	r7
 80088aa:	3001      	adds	r0, #1
 80088ac:	d1c0      	bne.n	8008830 <_printf_float+0x304>
 80088ae:	e69e      	b.n	80085ee <_printf_float+0xc2>
 80088b0:	2301      	movs	r3, #1
 80088b2:	4631      	mov	r1, r6
 80088b4:	4628      	mov	r0, r5
 80088b6:	9205      	str	r2, [sp, #20]
 80088b8:	47b8      	blx	r7
 80088ba:	3001      	adds	r0, #1
 80088bc:	f43f ae97 	beq.w	80085ee <_printf_float+0xc2>
 80088c0:	9a05      	ldr	r2, [sp, #20]
 80088c2:	f10b 0b01 	add.w	fp, fp, #1
 80088c6:	e7b9      	b.n	800883c <_printf_float+0x310>
 80088c8:	ee18 3a10 	vmov	r3, s16
 80088cc:	4652      	mov	r2, sl
 80088ce:	4631      	mov	r1, r6
 80088d0:	4628      	mov	r0, r5
 80088d2:	47b8      	blx	r7
 80088d4:	3001      	adds	r0, #1
 80088d6:	d1be      	bne.n	8008856 <_printf_float+0x32a>
 80088d8:	e689      	b.n	80085ee <_printf_float+0xc2>
 80088da:	9a05      	ldr	r2, [sp, #20]
 80088dc:	464b      	mov	r3, r9
 80088de:	4442      	add	r2, r8
 80088e0:	4631      	mov	r1, r6
 80088e2:	4628      	mov	r0, r5
 80088e4:	47b8      	blx	r7
 80088e6:	3001      	adds	r0, #1
 80088e8:	d1c1      	bne.n	800886e <_printf_float+0x342>
 80088ea:	e680      	b.n	80085ee <_printf_float+0xc2>
 80088ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80088ee:	2a01      	cmp	r2, #1
 80088f0:	dc01      	bgt.n	80088f6 <_printf_float+0x3ca>
 80088f2:	07db      	lsls	r3, r3, #31
 80088f4:	d538      	bpl.n	8008968 <_printf_float+0x43c>
 80088f6:	2301      	movs	r3, #1
 80088f8:	4642      	mov	r2, r8
 80088fa:	4631      	mov	r1, r6
 80088fc:	4628      	mov	r0, r5
 80088fe:	47b8      	blx	r7
 8008900:	3001      	adds	r0, #1
 8008902:	f43f ae74 	beq.w	80085ee <_printf_float+0xc2>
 8008906:	ee18 3a10 	vmov	r3, s16
 800890a:	4652      	mov	r2, sl
 800890c:	4631      	mov	r1, r6
 800890e:	4628      	mov	r0, r5
 8008910:	47b8      	blx	r7
 8008912:	3001      	adds	r0, #1
 8008914:	f43f ae6b 	beq.w	80085ee <_printf_float+0xc2>
 8008918:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800891c:	2200      	movs	r2, #0
 800891e:	2300      	movs	r3, #0
 8008920:	f7f8 f8d2 	bl	8000ac8 <__aeabi_dcmpeq>
 8008924:	b9d8      	cbnz	r0, 800895e <_printf_float+0x432>
 8008926:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008928:	f108 0201 	add.w	r2, r8, #1
 800892c:	3b01      	subs	r3, #1
 800892e:	4631      	mov	r1, r6
 8008930:	4628      	mov	r0, r5
 8008932:	47b8      	blx	r7
 8008934:	3001      	adds	r0, #1
 8008936:	d10e      	bne.n	8008956 <_printf_float+0x42a>
 8008938:	e659      	b.n	80085ee <_printf_float+0xc2>
 800893a:	2301      	movs	r3, #1
 800893c:	4652      	mov	r2, sl
 800893e:	4631      	mov	r1, r6
 8008940:	4628      	mov	r0, r5
 8008942:	47b8      	blx	r7
 8008944:	3001      	adds	r0, #1
 8008946:	f43f ae52 	beq.w	80085ee <_printf_float+0xc2>
 800894a:	f108 0801 	add.w	r8, r8, #1
 800894e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008950:	3b01      	subs	r3, #1
 8008952:	4543      	cmp	r3, r8
 8008954:	dcf1      	bgt.n	800893a <_printf_float+0x40e>
 8008956:	464b      	mov	r3, r9
 8008958:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800895c:	e6dc      	b.n	8008718 <_printf_float+0x1ec>
 800895e:	f04f 0800 	mov.w	r8, #0
 8008962:	f104 0a1a 	add.w	sl, r4, #26
 8008966:	e7f2      	b.n	800894e <_printf_float+0x422>
 8008968:	2301      	movs	r3, #1
 800896a:	4642      	mov	r2, r8
 800896c:	e7df      	b.n	800892e <_printf_float+0x402>
 800896e:	2301      	movs	r3, #1
 8008970:	464a      	mov	r2, r9
 8008972:	4631      	mov	r1, r6
 8008974:	4628      	mov	r0, r5
 8008976:	47b8      	blx	r7
 8008978:	3001      	adds	r0, #1
 800897a:	f43f ae38 	beq.w	80085ee <_printf_float+0xc2>
 800897e:	f108 0801 	add.w	r8, r8, #1
 8008982:	68e3      	ldr	r3, [r4, #12]
 8008984:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008986:	1a5b      	subs	r3, r3, r1
 8008988:	4543      	cmp	r3, r8
 800898a:	dcf0      	bgt.n	800896e <_printf_float+0x442>
 800898c:	e6fa      	b.n	8008784 <_printf_float+0x258>
 800898e:	f04f 0800 	mov.w	r8, #0
 8008992:	f104 0919 	add.w	r9, r4, #25
 8008996:	e7f4      	b.n	8008982 <_printf_float+0x456>

08008998 <_printf_common>:
 8008998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800899c:	4616      	mov	r6, r2
 800899e:	4699      	mov	r9, r3
 80089a0:	688a      	ldr	r2, [r1, #8]
 80089a2:	690b      	ldr	r3, [r1, #16]
 80089a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80089a8:	4293      	cmp	r3, r2
 80089aa:	bfb8      	it	lt
 80089ac:	4613      	movlt	r3, r2
 80089ae:	6033      	str	r3, [r6, #0]
 80089b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80089b4:	4607      	mov	r7, r0
 80089b6:	460c      	mov	r4, r1
 80089b8:	b10a      	cbz	r2, 80089be <_printf_common+0x26>
 80089ba:	3301      	adds	r3, #1
 80089bc:	6033      	str	r3, [r6, #0]
 80089be:	6823      	ldr	r3, [r4, #0]
 80089c0:	0699      	lsls	r1, r3, #26
 80089c2:	bf42      	ittt	mi
 80089c4:	6833      	ldrmi	r3, [r6, #0]
 80089c6:	3302      	addmi	r3, #2
 80089c8:	6033      	strmi	r3, [r6, #0]
 80089ca:	6825      	ldr	r5, [r4, #0]
 80089cc:	f015 0506 	ands.w	r5, r5, #6
 80089d0:	d106      	bne.n	80089e0 <_printf_common+0x48>
 80089d2:	f104 0a19 	add.w	sl, r4, #25
 80089d6:	68e3      	ldr	r3, [r4, #12]
 80089d8:	6832      	ldr	r2, [r6, #0]
 80089da:	1a9b      	subs	r3, r3, r2
 80089dc:	42ab      	cmp	r3, r5
 80089de:	dc26      	bgt.n	8008a2e <_printf_common+0x96>
 80089e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80089e4:	1e13      	subs	r3, r2, #0
 80089e6:	6822      	ldr	r2, [r4, #0]
 80089e8:	bf18      	it	ne
 80089ea:	2301      	movne	r3, #1
 80089ec:	0692      	lsls	r2, r2, #26
 80089ee:	d42b      	bmi.n	8008a48 <_printf_common+0xb0>
 80089f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80089f4:	4649      	mov	r1, r9
 80089f6:	4638      	mov	r0, r7
 80089f8:	47c0      	blx	r8
 80089fa:	3001      	adds	r0, #1
 80089fc:	d01e      	beq.n	8008a3c <_printf_common+0xa4>
 80089fe:	6823      	ldr	r3, [r4, #0]
 8008a00:	68e5      	ldr	r5, [r4, #12]
 8008a02:	6832      	ldr	r2, [r6, #0]
 8008a04:	f003 0306 	and.w	r3, r3, #6
 8008a08:	2b04      	cmp	r3, #4
 8008a0a:	bf08      	it	eq
 8008a0c:	1aad      	subeq	r5, r5, r2
 8008a0e:	68a3      	ldr	r3, [r4, #8]
 8008a10:	6922      	ldr	r2, [r4, #16]
 8008a12:	bf0c      	ite	eq
 8008a14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a18:	2500      	movne	r5, #0
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	bfc4      	itt	gt
 8008a1e:	1a9b      	subgt	r3, r3, r2
 8008a20:	18ed      	addgt	r5, r5, r3
 8008a22:	2600      	movs	r6, #0
 8008a24:	341a      	adds	r4, #26
 8008a26:	42b5      	cmp	r5, r6
 8008a28:	d11a      	bne.n	8008a60 <_printf_common+0xc8>
 8008a2a:	2000      	movs	r0, #0
 8008a2c:	e008      	b.n	8008a40 <_printf_common+0xa8>
 8008a2e:	2301      	movs	r3, #1
 8008a30:	4652      	mov	r2, sl
 8008a32:	4649      	mov	r1, r9
 8008a34:	4638      	mov	r0, r7
 8008a36:	47c0      	blx	r8
 8008a38:	3001      	adds	r0, #1
 8008a3a:	d103      	bne.n	8008a44 <_printf_common+0xac>
 8008a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a44:	3501      	adds	r5, #1
 8008a46:	e7c6      	b.n	80089d6 <_printf_common+0x3e>
 8008a48:	18e1      	adds	r1, r4, r3
 8008a4a:	1c5a      	adds	r2, r3, #1
 8008a4c:	2030      	movs	r0, #48	; 0x30
 8008a4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008a52:	4422      	add	r2, r4
 8008a54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008a58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008a5c:	3302      	adds	r3, #2
 8008a5e:	e7c7      	b.n	80089f0 <_printf_common+0x58>
 8008a60:	2301      	movs	r3, #1
 8008a62:	4622      	mov	r2, r4
 8008a64:	4649      	mov	r1, r9
 8008a66:	4638      	mov	r0, r7
 8008a68:	47c0      	blx	r8
 8008a6a:	3001      	adds	r0, #1
 8008a6c:	d0e6      	beq.n	8008a3c <_printf_common+0xa4>
 8008a6e:	3601      	adds	r6, #1
 8008a70:	e7d9      	b.n	8008a26 <_printf_common+0x8e>
	...

08008a74 <_printf_i>:
 8008a74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a78:	460c      	mov	r4, r1
 8008a7a:	4691      	mov	r9, r2
 8008a7c:	7e27      	ldrb	r7, [r4, #24]
 8008a7e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008a80:	2f78      	cmp	r7, #120	; 0x78
 8008a82:	4680      	mov	r8, r0
 8008a84:	469a      	mov	sl, r3
 8008a86:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008a8a:	d807      	bhi.n	8008a9c <_printf_i+0x28>
 8008a8c:	2f62      	cmp	r7, #98	; 0x62
 8008a8e:	d80a      	bhi.n	8008aa6 <_printf_i+0x32>
 8008a90:	2f00      	cmp	r7, #0
 8008a92:	f000 80d8 	beq.w	8008c46 <_printf_i+0x1d2>
 8008a96:	2f58      	cmp	r7, #88	; 0x58
 8008a98:	f000 80a3 	beq.w	8008be2 <_printf_i+0x16e>
 8008a9c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008aa0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008aa4:	e03a      	b.n	8008b1c <_printf_i+0xa8>
 8008aa6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008aaa:	2b15      	cmp	r3, #21
 8008aac:	d8f6      	bhi.n	8008a9c <_printf_i+0x28>
 8008aae:	a001      	add	r0, pc, #4	; (adr r0, 8008ab4 <_printf_i+0x40>)
 8008ab0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008ab4:	08008b0d 	.word	0x08008b0d
 8008ab8:	08008b21 	.word	0x08008b21
 8008abc:	08008a9d 	.word	0x08008a9d
 8008ac0:	08008a9d 	.word	0x08008a9d
 8008ac4:	08008a9d 	.word	0x08008a9d
 8008ac8:	08008a9d 	.word	0x08008a9d
 8008acc:	08008b21 	.word	0x08008b21
 8008ad0:	08008a9d 	.word	0x08008a9d
 8008ad4:	08008a9d 	.word	0x08008a9d
 8008ad8:	08008a9d 	.word	0x08008a9d
 8008adc:	08008a9d 	.word	0x08008a9d
 8008ae0:	08008c2d 	.word	0x08008c2d
 8008ae4:	08008b51 	.word	0x08008b51
 8008ae8:	08008c0f 	.word	0x08008c0f
 8008aec:	08008a9d 	.word	0x08008a9d
 8008af0:	08008a9d 	.word	0x08008a9d
 8008af4:	08008c4f 	.word	0x08008c4f
 8008af8:	08008a9d 	.word	0x08008a9d
 8008afc:	08008b51 	.word	0x08008b51
 8008b00:	08008a9d 	.word	0x08008a9d
 8008b04:	08008a9d 	.word	0x08008a9d
 8008b08:	08008c17 	.word	0x08008c17
 8008b0c:	680b      	ldr	r3, [r1, #0]
 8008b0e:	1d1a      	adds	r2, r3, #4
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	600a      	str	r2, [r1, #0]
 8008b14:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008b18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	e0a3      	b.n	8008c68 <_printf_i+0x1f4>
 8008b20:	6825      	ldr	r5, [r4, #0]
 8008b22:	6808      	ldr	r0, [r1, #0]
 8008b24:	062e      	lsls	r6, r5, #24
 8008b26:	f100 0304 	add.w	r3, r0, #4
 8008b2a:	d50a      	bpl.n	8008b42 <_printf_i+0xce>
 8008b2c:	6805      	ldr	r5, [r0, #0]
 8008b2e:	600b      	str	r3, [r1, #0]
 8008b30:	2d00      	cmp	r5, #0
 8008b32:	da03      	bge.n	8008b3c <_printf_i+0xc8>
 8008b34:	232d      	movs	r3, #45	; 0x2d
 8008b36:	426d      	negs	r5, r5
 8008b38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b3c:	485e      	ldr	r0, [pc, #376]	; (8008cb8 <_printf_i+0x244>)
 8008b3e:	230a      	movs	r3, #10
 8008b40:	e019      	b.n	8008b76 <_printf_i+0x102>
 8008b42:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008b46:	6805      	ldr	r5, [r0, #0]
 8008b48:	600b      	str	r3, [r1, #0]
 8008b4a:	bf18      	it	ne
 8008b4c:	b22d      	sxthne	r5, r5
 8008b4e:	e7ef      	b.n	8008b30 <_printf_i+0xbc>
 8008b50:	680b      	ldr	r3, [r1, #0]
 8008b52:	6825      	ldr	r5, [r4, #0]
 8008b54:	1d18      	adds	r0, r3, #4
 8008b56:	6008      	str	r0, [r1, #0]
 8008b58:	0628      	lsls	r0, r5, #24
 8008b5a:	d501      	bpl.n	8008b60 <_printf_i+0xec>
 8008b5c:	681d      	ldr	r5, [r3, #0]
 8008b5e:	e002      	b.n	8008b66 <_printf_i+0xf2>
 8008b60:	0669      	lsls	r1, r5, #25
 8008b62:	d5fb      	bpl.n	8008b5c <_printf_i+0xe8>
 8008b64:	881d      	ldrh	r5, [r3, #0]
 8008b66:	4854      	ldr	r0, [pc, #336]	; (8008cb8 <_printf_i+0x244>)
 8008b68:	2f6f      	cmp	r7, #111	; 0x6f
 8008b6a:	bf0c      	ite	eq
 8008b6c:	2308      	moveq	r3, #8
 8008b6e:	230a      	movne	r3, #10
 8008b70:	2100      	movs	r1, #0
 8008b72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008b76:	6866      	ldr	r6, [r4, #4]
 8008b78:	60a6      	str	r6, [r4, #8]
 8008b7a:	2e00      	cmp	r6, #0
 8008b7c:	bfa2      	ittt	ge
 8008b7e:	6821      	ldrge	r1, [r4, #0]
 8008b80:	f021 0104 	bicge.w	r1, r1, #4
 8008b84:	6021      	strge	r1, [r4, #0]
 8008b86:	b90d      	cbnz	r5, 8008b8c <_printf_i+0x118>
 8008b88:	2e00      	cmp	r6, #0
 8008b8a:	d04d      	beq.n	8008c28 <_printf_i+0x1b4>
 8008b8c:	4616      	mov	r6, r2
 8008b8e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008b92:	fb03 5711 	mls	r7, r3, r1, r5
 8008b96:	5dc7      	ldrb	r7, [r0, r7]
 8008b98:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008b9c:	462f      	mov	r7, r5
 8008b9e:	42bb      	cmp	r3, r7
 8008ba0:	460d      	mov	r5, r1
 8008ba2:	d9f4      	bls.n	8008b8e <_printf_i+0x11a>
 8008ba4:	2b08      	cmp	r3, #8
 8008ba6:	d10b      	bne.n	8008bc0 <_printf_i+0x14c>
 8008ba8:	6823      	ldr	r3, [r4, #0]
 8008baa:	07df      	lsls	r7, r3, #31
 8008bac:	d508      	bpl.n	8008bc0 <_printf_i+0x14c>
 8008bae:	6923      	ldr	r3, [r4, #16]
 8008bb0:	6861      	ldr	r1, [r4, #4]
 8008bb2:	4299      	cmp	r1, r3
 8008bb4:	bfde      	ittt	le
 8008bb6:	2330      	movle	r3, #48	; 0x30
 8008bb8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008bbc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008bc0:	1b92      	subs	r2, r2, r6
 8008bc2:	6122      	str	r2, [r4, #16]
 8008bc4:	f8cd a000 	str.w	sl, [sp]
 8008bc8:	464b      	mov	r3, r9
 8008bca:	aa03      	add	r2, sp, #12
 8008bcc:	4621      	mov	r1, r4
 8008bce:	4640      	mov	r0, r8
 8008bd0:	f7ff fee2 	bl	8008998 <_printf_common>
 8008bd4:	3001      	adds	r0, #1
 8008bd6:	d14c      	bne.n	8008c72 <_printf_i+0x1fe>
 8008bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8008bdc:	b004      	add	sp, #16
 8008bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008be2:	4835      	ldr	r0, [pc, #212]	; (8008cb8 <_printf_i+0x244>)
 8008be4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008be8:	6823      	ldr	r3, [r4, #0]
 8008bea:	680e      	ldr	r6, [r1, #0]
 8008bec:	061f      	lsls	r7, r3, #24
 8008bee:	f856 5b04 	ldr.w	r5, [r6], #4
 8008bf2:	600e      	str	r6, [r1, #0]
 8008bf4:	d514      	bpl.n	8008c20 <_printf_i+0x1ac>
 8008bf6:	07d9      	lsls	r1, r3, #31
 8008bf8:	bf44      	itt	mi
 8008bfa:	f043 0320 	orrmi.w	r3, r3, #32
 8008bfe:	6023      	strmi	r3, [r4, #0]
 8008c00:	b91d      	cbnz	r5, 8008c0a <_printf_i+0x196>
 8008c02:	6823      	ldr	r3, [r4, #0]
 8008c04:	f023 0320 	bic.w	r3, r3, #32
 8008c08:	6023      	str	r3, [r4, #0]
 8008c0a:	2310      	movs	r3, #16
 8008c0c:	e7b0      	b.n	8008b70 <_printf_i+0xfc>
 8008c0e:	6823      	ldr	r3, [r4, #0]
 8008c10:	f043 0320 	orr.w	r3, r3, #32
 8008c14:	6023      	str	r3, [r4, #0]
 8008c16:	2378      	movs	r3, #120	; 0x78
 8008c18:	4828      	ldr	r0, [pc, #160]	; (8008cbc <_printf_i+0x248>)
 8008c1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008c1e:	e7e3      	b.n	8008be8 <_printf_i+0x174>
 8008c20:	065e      	lsls	r6, r3, #25
 8008c22:	bf48      	it	mi
 8008c24:	b2ad      	uxthmi	r5, r5
 8008c26:	e7e6      	b.n	8008bf6 <_printf_i+0x182>
 8008c28:	4616      	mov	r6, r2
 8008c2a:	e7bb      	b.n	8008ba4 <_printf_i+0x130>
 8008c2c:	680b      	ldr	r3, [r1, #0]
 8008c2e:	6826      	ldr	r6, [r4, #0]
 8008c30:	6960      	ldr	r0, [r4, #20]
 8008c32:	1d1d      	adds	r5, r3, #4
 8008c34:	600d      	str	r5, [r1, #0]
 8008c36:	0635      	lsls	r5, r6, #24
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	d501      	bpl.n	8008c40 <_printf_i+0x1cc>
 8008c3c:	6018      	str	r0, [r3, #0]
 8008c3e:	e002      	b.n	8008c46 <_printf_i+0x1d2>
 8008c40:	0671      	lsls	r1, r6, #25
 8008c42:	d5fb      	bpl.n	8008c3c <_printf_i+0x1c8>
 8008c44:	8018      	strh	r0, [r3, #0]
 8008c46:	2300      	movs	r3, #0
 8008c48:	6123      	str	r3, [r4, #16]
 8008c4a:	4616      	mov	r6, r2
 8008c4c:	e7ba      	b.n	8008bc4 <_printf_i+0x150>
 8008c4e:	680b      	ldr	r3, [r1, #0]
 8008c50:	1d1a      	adds	r2, r3, #4
 8008c52:	600a      	str	r2, [r1, #0]
 8008c54:	681e      	ldr	r6, [r3, #0]
 8008c56:	6862      	ldr	r2, [r4, #4]
 8008c58:	2100      	movs	r1, #0
 8008c5a:	4630      	mov	r0, r6
 8008c5c:	f7f7 fab8 	bl	80001d0 <memchr>
 8008c60:	b108      	cbz	r0, 8008c66 <_printf_i+0x1f2>
 8008c62:	1b80      	subs	r0, r0, r6
 8008c64:	6060      	str	r0, [r4, #4]
 8008c66:	6863      	ldr	r3, [r4, #4]
 8008c68:	6123      	str	r3, [r4, #16]
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c70:	e7a8      	b.n	8008bc4 <_printf_i+0x150>
 8008c72:	6923      	ldr	r3, [r4, #16]
 8008c74:	4632      	mov	r2, r6
 8008c76:	4649      	mov	r1, r9
 8008c78:	4640      	mov	r0, r8
 8008c7a:	47d0      	blx	sl
 8008c7c:	3001      	adds	r0, #1
 8008c7e:	d0ab      	beq.n	8008bd8 <_printf_i+0x164>
 8008c80:	6823      	ldr	r3, [r4, #0]
 8008c82:	079b      	lsls	r3, r3, #30
 8008c84:	d413      	bmi.n	8008cae <_printf_i+0x23a>
 8008c86:	68e0      	ldr	r0, [r4, #12]
 8008c88:	9b03      	ldr	r3, [sp, #12]
 8008c8a:	4298      	cmp	r0, r3
 8008c8c:	bfb8      	it	lt
 8008c8e:	4618      	movlt	r0, r3
 8008c90:	e7a4      	b.n	8008bdc <_printf_i+0x168>
 8008c92:	2301      	movs	r3, #1
 8008c94:	4632      	mov	r2, r6
 8008c96:	4649      	mov	r1, r9
 8008c98:	4640      	mov	r0, r8
 8008c9a:	47d0      	blx	sl
 8008c9c:	3001      	adds	r0, #1
 8008c9e:	d09b      	beq.n	8008bd8 <_printf_i+0x164>
 8008ca0:	3501      	adds	r5, #1
 8008ca2:	68e3      	ldr	r3, [r4, #12]
 8008ca4:	9903      	ldr	r1, [sp, #12]
 8008ca6:	1a5b      	subs	r3, r3, r1
 8008ca8:	42ab      	cmp	r3, r5
 8008caa:	dcf2      	bgt.n	8008c92 <_printf_i+0x21e>
 8008cac:	e7eb      	b.n	8008c86 <_printf_i+0x212>
 8008cae:	2500      	movs	r5, #0
 8008cb0:	f104 0619 	add.w	r6, r4, #25
 8008cb4:	e7f5      	b.n	8008ca2 <_printf_i+0x22e>
 8008cb6:	bf00      	nop
 8008cb8:	0800e16e 	.word	0x0800e16e
 8008cbc:	0800e17f 	.word	0x0800e17f

08008cc0 <_scanf_float>:
 8008cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cc4:	b087      	sub	sp, #28
 8008cc6:	4617      	mov	r7, r2
 8008cc8:	9303      	str	r3, [sp, #12]
 8008cca:	688b      	ldr	r3, [r1, #8]
 8008ccc:	1e5a      	subs	r2, r3, #1
 8008cce:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008cd2:	bf83      	ittte	hi
 8008cd4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008cd8:	195b      	addhi	r3, r3, r5
 8008cda:	9302      	strhi	r3, [sp, #8]
 8008cdc:	2300      	movls	r3, #0
 8008cde:	bf86      	itte	hi
 8008ce0:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008ce4:	608b      	strhi	r3, [r1, #8]
 8008ce6:	9302      	strls	r3, [sp, #8]
 8008ce8:	680b      	ldr	r3, [r1, #0]
 8008cea:	468b      	mov	fp, r1
 8008cec:	2500      	movs	r5, #0
 8008cee:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008cf2:	f84b 3b1c 	str.w	r3, [fp], #28
 8008cf6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008cfa:	4680      	mov	r8, r0
 8008cfc:	460c      	mov	r4, r1
 8008cfe:	465e      	mov	r6, fp
 8008d00:	46aa      	mov	sl, r5
 8008d02:	46a9      	mov	r9, r5
 8008d04:	9501      	str	r5, [sp, #4]
 8008d06:	68a2      	ldr	r2, [r4, #8]
 8008d08:	b152      	cbz	r2, 8008d20 <_scanf_float+0x60>
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	781b      	ldrb	r3, [r3, #0]
 8008d0e:	2b4e      	cmp	r3, #78	; 0x4e
 8008d10:	d864      	bhi.n	8008ddc <_scanf_float+0x11c>
 8008d12:	2b40      	cmp	r3, #64	; 0x40
 8008d14:	d83c      	bhi.n	8008d90 <_scanf_float+0xd0>
 8008d16:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008d1a:	b2c8      	uxtb	r0, r1
 8008d1c:	280e      	cmp	r0, #14
 8008d1e:	d93a      	bls.n	8008d96 <_scanf_float+0xd6>
 8008d20:	f1b9 0f00 	cmp.w	r9, #0
 8008d24:	d003      	beq.n	8008d2e <_scanf_float+0x6e>
 8008d26:	6823      	ldr	r3, [r4, #0]
 8008d28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d2c:	6023      	str	r3, [r4, #0]
 8008d2e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008d32:	f1ba 0f01 	cmp.w	sl, #1
 8008d36:	f200 8113 	bhi.w	8008f60 <_scanf_float+0x2a0>
 8008d3a:	455e      	cmp	r6, fp
 8008d3c:	f200 8105 	bhi.w	8008f4a <_scanf_float+0x28a>
 8008d40:	2501      	movs	r5, #1
 8008d42:	4628      	mov	r0, r5
 8008d44:	b007      	add	sp, #28
 8008d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d4a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008d4e:	2a0d      	cmp	r2, #13
 8008d50:	d8e6      	bhi.n	8008d20 <_scanf_float+0x60>
 8008d52:	a101      	add	r1, pc, #4	; (adr r1, 8008d58 <_scanf_float+0x98>)
 8008d54:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008d58:	08008e97 	.word	0x08008e97
 8008d5c:	08008d21 	.word	0x08008d21
 8008d60:	08008d21 	.word	0x08008d21
 8008d64:	08008d21 	.word	0x08008d21
 8008d68:	08008ef7 	.word	0x08008ef7
 8008d6c:	08008ecf 	.word	0x08008ecf
 8008d70:	08008d21 	.word	0x08008d21
 8008d74:	08008d21 	.word	0x08008d21
 8008d78:	08008ea5 	.word	0x08008ea5
 8008d7c:	08008d21 	.word	0x08008d21
 8008d80:	08008d21 	.word	0x08008d21
 8008d84:	08008d21 	.word	0x08008d21
 8008d88:	08008d21 	.word	0x08008d21
 8008d8c:	08008e5d 	.word	0x08008e5d
 8008d90:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008d94:	e7db      	b.n	8008d4e <_scanf_float+0x8e>
 8008d96:	290e      	cmp	r1, #14
 8008d98:	d8c2      	bhi.n	8008d20 <_scanf_float+0x60>
 8008d9a:	a001      	add	r0, pc, #4	; (adr r0, 8008da0 <_scanf_float+0xe0>)
 8008d9c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008da0:	08008e4f 	.word	0x08008e4f
 8008da4:	08008d21 	.word	0x08008d21
 8008da8:	08008e4f 	.word	0x08008e4f
 8008dac:	08008ee3 	.word	0x08008ee3
 8008db0:	08008d21 	.word	0x08008d21
 8008db4:	08008dfd 	.word	0x08008dfd
 8008db8:	08008e39 	.word	0x08008e39
 8008dbc:	08008e39 	.word	0x08008e39
 8008dc0:	08008e39 	.word	0x08008e39
 8008dc4:	08008e39 	.word	0x08008e39
 8008dc8:	08008e39 	.word	0x08008e39
 8008dcc:	08008e39 	.word	0x08008e39
 8008dd0:	08008e39 	.word	0x08008e39
 8008dd4:	08008e39 	.word	0x08008e39
 8008dd8:	08008e39 	.word	0x08008e39
 8008ddc:	2b6e      	cmp	r3, #110	; 0x6e
 8008dde:	d809      	bhi.n	8008df4 <_scanf_float+0x134>
 8008de0:	2b60      	cmp	r3, #96	; 0x60
 8008de2:	d8b2      	bhi.n	8008d4a <_scanf_float+0x8a>
 8008de4:	2b54      	cmp	r3, #84	; 0x54
 8008de6:	d077      	beq.n	8008ed8 <_scanf_float+0x218>
 8008de8:	2b59      	cmp	r3, #89	; 0x59
 8008dea:	d199      	bne.n	8008d20 <_scanf_float+0x60>
 8008dec:	2d07      	cmp	r5, #7
 8008dee:	d197      	bne.n	8008d20 <_scanf_float+0x60>
 8008df0:	2508      	movs	r5, #8
 8008df2:	e029      	b.n	8008e48 <_scanf_float+0x188>
 8008df4:	2b74      	cmp	r3, #116	; 0x74
 8008df6:	d06f      	beq.n	8008ed8 <_scanf_float+0x218>
 8008df8:	2b79      	cmp	r3, #121	; 0x79
 8008dfa:	e7f6      	b.n	8008dea <_scanf_float+0x12a>
 8008dfc:	6821      	ldr	r1, [r4, #0]
 8008dfe:	05c8      	lsls	r0, r1, #23
 8008e00:	d51a      	bpl.n	8008e38 <_scanf_float+0x178>
 8008e02:	9b02      	ldr	r3, [sp, #8]
 8008e04:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008e08:	6021      	str	r1, [r4, #0]
 8008e0a:	f109 0901 	add.w	r9, r9, #1
 8008e0e:	b11b      	cbz	r3, 8008e18 <_scanf_float+0x158>
 8008e10:	3b01      	subs	r3, #1
 8008e12:	3201      	adds	r2, #1
 8008e14:	9302      	str	r3, [sp, #8]
 8008e16:	60a2      	str	r2, [r4, #8]
 8008e18:	68a3      	ldr	r3, [r4, #8]
 8008e1a:	3b01      	subs	r3, #1
 8008e1c:	60a3      	str	r3, [r4, #8]
 8008e1e:	6923      	ldr	r3, [r4, #16]
 8008e20:	3301      	adds	r3, #1
 8008e22:	6123      	str	r3, [r4, #16]
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	3b01      	subs	r3, #1
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	607b      	str	r3, [r7, #4]
 8008e2c:	f340 8084 	ble.w	8008f38 <_scanf_float+0x278>
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	3301      	adds	r3, #1
 8008e34:	603b      	str	r3, [r7, #0]
 8008e36:	e766      	b.n	8008d06 <_scanf_float+0x46>
 8008e38:	eb1a 0f05 	cmn.w	sl, r5
 8008e3c:	f47f af70 	bne.w	8008d20 <_scanf_float+0x60>
 8008e40:	6822      	ldr	r2, [r4, #0]
 8008e42:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008e46:	6022      	str	r2, [r4, #0]
 8008e48:	f806 3b01 	strb.w	r3, [r6], #1
 8008e4c:	e7e4      	b.n	8008e18 <_scanf_float+0x158>
 8008e4e:	6822      	ldr	r2, [r4, #0]
 8008e50:	0610      	lsls	r0, r2, #24
 8008e52:	f57f af65 	bpl.w	8008d20 <_scanf_float+0x60>
 8008e56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008e5a:	e7f4      	b.n	8008e46 <_scanf_float+0x186>
 8008e5c:	f1ba 0f00 	cmp.w	sl, #0
 8008e60:	d10e      	bne.n	8008e80 <_scanf_float+0x1c0>
 8008e62:	f1b9 0f00 	cmp.w	r9, #0
 8008e66:	d10e      	bne.n	8008e86 <_scanf_float+0x1c6>
 8008e68:	6822      	ldr	r2, [r4, #0]
 8008e6a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008e6e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008e72:	d108      	bne.n	8008e86 <_scanf_float+0x1c6>
 8008e74:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008e78:	6022      	str	r2, [r4, #0]
 8008e7a:	f04f 0a01 	mov.w	sl, #1
 8008e7e:	e7e3      	b.n	8008e48 <_scanf_float+0x188>
 8008e80:	f1ba 0f02 	cmp.w	sl, #2
 8008e84:	d055      	beq.n	8008f32 <_scanf_float+0x272>
 8008e86:	2d01      	cmp	r5, #1
 8008e88:	d002      	beq.n	8008e90 <_scanf_float+0x1d0>
 8008e8a:	2d04      	cmp	r5, #4
 8008e8c:	f47f af48 	bne.w	8008d20 <_scanf_float+0x60>
 8008e90:	3501      	adds	r5, #1
 8008e92:	b2ed      	uxtb	r5, r5
 8008e94:	e7d8      	b.n	8008e48 <_scanf_float+0x188>
 8008e96:	f1ba 0f01 	cmp.w	sl, #1
 8008e9a:	f47f af41 	bne.w	8008d20 <_scanf_float+0x60>
 8008e9e:	f04f 0a02 	mov.w	sl, #2
 8008ea2:	e7d1      	b.n	8008e48 <_scanf_float+0x188>
 8008ea4:	b97d      	cbnz	r5, 8008ec6 <_scanf_float+0x206>
 8008ea6:	f1b9 0f00 	cmp.w	r9, #0
 8008eaa:	f47f af3c 	bne.w	8008d26 <_scanf_float+0x66>
 8008eae:	6822      	ldr	r2, [r4, #0]
 8008eb0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008eb4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008eb8:	f47f af39 	bne.w	8008d2e <_scanf_float+0x6e>
 8008ebc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008ec0:	6022      	str	r2, [r4, #0]
 8008ec2:	2501      	movs	r5, #1
 8008ec4:	e7c0      	b.n	8008e48 <_scanf_float+0x188>
 8008ec6:	2d03      	cmp	r5, #3
 8008ec8:	d0e2      	beq.n	8008e90 <_scanf_float+0x1d0>
 8008eca:	2d05      	cmp	r5, #5
 8008ecc:	e7de      	b.n	8008e8c <_scanf_float+0x1cc>
 8008ece:	2d02      	cmp	r5, #2
 8008ed0:	f47f af26 	bne.w	8008d20 <_scanf_float+0x60>
 8008ed4:	2503      	movs	r5, #3
 8008ed6:	e7b7      	b.n	8008e48 <_scanf_float+0x188>
 8008ed8:	2d06      	cmp	r5, #6
 8008eda:	f47f af21 	bne.w	8008d20 <_scanf_float+0x60>
 8008ede:	2507      	movs	r5, #7
 8008ee0:	e7b2      	b.n	8008e48 <_scanf_float+0x188>
 8008ee2:	6822      	ldr	r2, [r4, #0]
 8008ee4:	0591      	lsls	r1, r2, #22
 8008ee6:	f57f af1b 	bpl.w	8008d20 <_scanf_float+0x60>
 8008eea:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008eee:	6022      	str	r2, [r4, #0]
 8008ef0:	f8cd 9004 	str.w	r9, [sp, #4]
 8008ef4:	e7a8      	b.n	8008e48 <_scanf_float+0x188>
 8008ef6:	6822      	ldr	r2, [r4, #0]
 8008ef8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008efc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008f00:	d006      	beq.n	8008f10 <_scanf_float+0x250>
 8008f02:	0550      	lsls	r0, r2, #21
 8008f04:	f57f af0c 	bpl.w	8008d20 <_scanf_float+0x60>
 8008f08:	f1b9 0f00 	cmp.w	r9, #0
 8008f0c:	f43f af0f 	beq.w	8008d2e <_scanf_float+0x6e>
 8008f10:	0591      	lsls	r1, r2, #22
 8008f12:	bf58      	it	pl
 8008f14:	9901      	ldrpl	r1, [sp, #4]
 8008f16:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008f1a:	bf58      	it	pl
 8008f1c:	eba9 0101 	subpl.w	r1, r9, r1
 8008f20:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008f24:	bf58      	it	pl
 8008f26:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008f2a:	6022      	str	r2, [r4, #0]
 8008f2c:	f04f 0900 	mov.w	r9, #0
 8008f30:	e78a      	b.n	8008e48 <_scanf_float+0x188>
 8008f32:	f04f 0a03 	mov.w	sl, #3
 8008f36:	e787      	b.n	8008e48 <_scanf_float+0x188>
 8008f38:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008f3c:	4639      	mov	r1, r7
 8008f3e:	4640      	mov	r0, r8
 8008f40:	4798      	blx	r3
 8008f42:	2800      	cmp	r0, #0
 8008f44:	f43f aedf 	beq.w	8008d06 <_scanf_float+0x46>
 8008f48:	e6ea      	b.n	8008d20 <_scanf_float+0x60>
 8008f4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008f4e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008f52:	463a      	mov	r2, r7
 8008f54:	4640      	mov	r0, r8
 8008f56:	4798      	blx	r3
 8008f58:	6923      	ldr	r3, [r4, #16]
 8008f5a:	3b01      	subs	r3, #1
 8008f5c:	6123      	str	r3, [r4, #16]
 8008f5e:	e6ec      	b.n	8008d3a <_scanf_float+0x7a>
 8008f60:	1e6b      	subs	r3, r5, #1
 8008f62:	2b06      	cmp	r3, #6
 8008f64:	d825      	bhi.n	8008fb2 <_scanf_float+0x2f2>
 8008f66:	2d02      	cmp	r5, #2
 8008f68:	d836      	bhi.n	8008fd8 <_scanf_float+0x318>
 8008f6a:	455e      	cmp	r6, fp
 8008f6c:	f67f aee8 	bls.w	8008d40 <_scanf_float+0x80>
 8008f70:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008f74:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008f78:	463a      	mov	r2, r7
 8008f7a:	4640      	mov	r0, r8
 8008f7c:	4798      	blx	r3
 8008f7e:	6923      	ldr	r3, [r4, #16]
 8008f80:	3b01      	subs	r3, #1
 8008f82:	6123      	str	r3, [r4, #16]
 8008f84:	e7f1      	b.n	8008f6a <_scanf_float+0x2aa>
 8008f86:	9802      	ldr	r0, [sp, #8]
 8008f88:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008f8c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008f90:	9002      	str	r0, [sp, #8]
 8008f92:	463a      	mov	r2, r7
 8008f94:	4640      	mov	r0, r8
 8008f96:	4798      	blx	r3
 8008f98:	6923      	ldr	r3, [r4, #16]
 8008f9a:	3b01      	subs	r3, #1
 8008f9c:	6123      	str	r3, [r4, #16]
 8008f9e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008fa2:	fa5f fa8a 	uxtb.w	sl, sl
 8008fa6:	f1ba 0f02 	cmp.w	sl, #2
 8008faa:	d1ec      	bne.n	8008f86 <_scanf_float+0x2c6>
 8008fac:	3d03      	subs	r5, #3
 8008fae:	b2ed      	uxtb	r5, r5
 8008fb0:	1b76      	subs	r6, r6, r5
 8008fb2:	6823      	ldr	r3, [r4, #0]
 8008fb4:	05da      	lsls	r2, r3, #23
 8008fb6:	d52f      	bpl.n	8009018 <_scanf_float+0x358>
 8008fb8:	055b      	lsls	r3, r3, #21
 8008fba:	d510      	bpl.n	8008fde <_scanf_float+0x31e>
 8008fbc:	455e      	cmp	r6, fp
 8008fbe:	f67f aebf 	bls.w	8008d40 <_scanf_float+0x80>
 8008fc2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008fc6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008fca:	463a      	mov	r2, r7
 8008fcc:	4640      	mov	r0, r8
 8008fce:	4798      	blx	r3
 8008fd0:	6923      	ldr	r3, [r4, #16]
 8008fd2:	3b01      	subs	r3, #1
 8008fd4:	6123      	str	r3, [r4, #16]
 8008fd6:	e7f1      	b.n	8008fbc <_scanf_float+0x2fc>
 8008fd8:	46aa      	mov	sl, r5
 8008fda:	9602      	str	r6, [sp, #8]
 8008fdc:	e7df      	b.n	8008f9e <_scanf_float+0x2de>
 8008fde:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008fe2:	6923      	ldr	r3, [r4, #16]
 8008fe4:	2965      	cmp	r1, #101	; 0x65
 8008fe6:	f103 33ff 	add.w	r3, r3, #4294967295
 8008fea:	f106 35ff 	add.w	r5, r6, #4294967295
 8008fee:	6123      	str	r3, [r4, #16]
 8008ff0:	d00c      	beq.n	800900c <_scanf_float+0x34c>
 8008ff2:	2945      	cmp	r1, #69	; 0x45
 8008ff4:	d00a      	beq.n	800900c <_scanf_float+0x34c>
 8008ff6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008ffa:	463a      	mov	r2, r7
 8008ffc:	4640      	mov	r0, r8
 8008ffe:	4798      	blx	r3
 8009000:	6923      	ldr	r3, [r4, #16]
 8009002:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009006:	3b01      	subs	r3, #1
 8009008:	1eb5      	subs	r5, r6, #2
 800900a:	6123      	str	r3, [r4, #16]
 800900c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009010:	463a      	mov	r2, r7
 8009012:	4640      	mov	r0, r8
 8009014:	4798      	blx	r3
 8009016:	462e      	mov	r6, r5
 8009018:	6825      	ldr	r5, [r4, #0]
 800901a:	f015 0510 	ands.w	r5, r5, #16
 800901e:	d158      	bne.n	80090d2 <_scanf_float+0x412>
 8009020:	7035      	strb	r5, [r6, #0]
 8009022:	6823      	ldr	r3, [r4, #0]
 8009024:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009028:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800902c:	d11c      	bne.n	8009068 <_scanf_float+0x3a8>
 800902e:	9b01      	ldr	r3, [sp, #4]
 8009030:	454b      	cmp	r3, r9
 8009032:	eba3 0209 	sub.w	r2, r3, r9
 8009036:	d124      	bne.n	8009082 <_scanf_float+0x3c2>
 8009038:	2200      	movs	r2, #0
 800903a:	4659      	mov	r1, fp
 800903c:	4640      	mov	r0, r8
 800903e:	f000 ff99 	bl	8009f74 <_strtod_r>
 8009042:	9b03      	ldr	r3, [sp, #12]
 8009044:	6821      	ldr	r1, [r4, #0]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f011 0f02 	tst.w	r1, #2
 800904c:	ec57 6b10 	vmov	r6, r7, d0
 8009050:	f103 0204 	add.w	r2, r3, #4
 8009054:	d020      	beq.n	8009098 <_scanf_float+0x3d8>
 8009056:	9903      	ldr	r1, [sp, #12]
 8009058:	600a      	str	r2, [r1, #0]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	e9c3 6700 	strd	r6, r7, [r3]
 8009060:	68e3      	ldr	r3, [r4, #12]
 8009062:	3301      	adds	r3, #1
 8009064:	60e3      	str	r3, [r4, #12]
 8009066:	e66c      	b.n	8008d42 <_scanf_float+0x82>
 8009068:	9b04      	ldr	r3, [sp, #16]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d0e4      	beq.n	8009038 <_scanf_float+0x378>
 800906e:	9905      	ldr	r1, [sp, #20]
 8009070:	230a      	movs	r3, #10
 8009072:	462a      	mov	r2, r5
 8009074:	3101      	adds	r1, #1
 8009076:	4640      	mov	r0, r8
 8009078:	f001 f812 	bl	800a0a0 <_strtol_r>
 800907c:	9b04      	ldr	r3, [sp, #16]
 800907e:	9e05      	ldr	r6, [sp, #20]
 8009080:	1ac2      	subs	r2, r0, r3
 8009082:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009086:	429e      	cmp	r6, r3
 8009088:	bf28      	it	cs
 800908a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800908e:	4912      	ldr	r1, [pc, #72]	; (80090d8 <_scanf_float+0x418>)
 8009090:	4630      	mov	r0, r6
 8009092:	f000 f909 	bl	80092a8 <siprintf>
 8009096:	e7cf      	b.n	8009038 <_scanf_float+0x378>
 8009098:	f011 0f04 	tst.w	r1, #4
 800909c:	9903      	ldr	r1, [sp, #12]
 800909e:	600a      	str	r2, [r1, #0]
 80090a0:	d1db      	bne.n	800905a <_scanf_float+0x39a>
 80090a2:	f8d3 8000 	ldr.w	r8, [r3]
 80090a6:	ee10 2a10 	vmov	r2, s0
 80090aa:	ee10 0a10 	vmov	r0, s0
 80090ae:	463b      	mov	r3, r7
 80090b0:	4639      	mov	r1, r7
 80090b2:	f7f7 fd3b 	bl	8000b2c <__aeabi_dcmpun>
 80090b6:	b128      	cbz	r0, 80090c4 <_scanf_float+0x404>
 80090b8:	4808      	ldr	r0, [pc, #32]	; (80090dc <_scanf_float+0x41c>)
 80090ba:	f000 f8ef 	bl	800929c <nanf>
 80090be:	ed88 0a00 	vstr	s0, [r8]
 80090c2:	e7cd      	b.n	8009060 <_scanf_float+0x3a0>
 80090c4:	4630      	mov	r0, r6
 80090c6:	4639      	mov	r1, r7
 80090c8:	f7f7 fd8e 	bl	8000be8 <__aeabi_d2f>
 80090cc:	f8c8 0000 	str.w	r0, [r8]
 80090d0:	e7c6      	b.n	8009060 <_scanf_float+0x3a0>
 80090d2:	2500      	movs	r5, #0
 80090d4:	e635      	b.n	8008d42 <_scanf_float+0x82>
 80090d6:	bf00      	nop
 80090d8:	0800e190 	.word	0x0800e190
 80090dc:	0800e608 	.word	0x0800e608

080090e0 <iprintf>:
 80090e0:	b40f      	push	{r0, r1, r2, r3}
 80090e2:	4b0a      	ldr	r3, [pc, #40]	; (800910c <iprintf+0x2c>)
 80090e4:	b513      	push	{r0, r1, r4, lr}
 80090e6:	681c      	ldr	r4, [r3, #0]
 80090e8:	b124      	cbz	r4, 80090f4 <iprintf+0x14>
 80090ea:	69a3      	ldr	r3, [r4, #24]
 80090ec:	b913      	cbnz	r3, 80090f4 <iprintf+0x14>
 80090ee:	4620      	mov	r0, r4
 80090f0:	f001 ff6c 	bl	800afcc <__sinit>
 80090f4:	ab05      	add	r3, sp, #20
 80090f6:	9a04      	ldr	r2, [sp, #16]
 80090f8:	68a1      	ldr	r1, [r4, #8]
 80090fa:	9301      	str	r3, [sp, #4]
 80090fc:	4620      	mov	r0, r4
 80090fe:	f003 faf1 	bl	800c6e4 <_vfiprintf_r>
 8009102:	b002      	add	sp, #8
 8009104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009108:	b004      	add	sp, #16
 800910a:	4770      	bx	lr
 800910c:	20000014 	.word	0x20000014

08009110 <setvbuf>:
 8009110:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009114:	461d      	mov	r5, r3
 8009116:	4b5d      	ldr	r3, [pc, #372]	; (800928c <setvbuf+0x17c>)
 8009118:	681f      	ldr	r7, [r3, #0]
 800911a:	4604      	mov	r4, r0
 800911c:	460e      	mov	r6, r1
 800911e:	4690      	mov	r8, r2
 8009120:	b127      	cbz	r7, 800912c <setvbuf+0x1c>
 8009122:	69bb      	ldr	r3, [r7, #24]
 8009124:	b913      	cbnz	r3, 800912c <setvbuf+0x1c>
 8009126:	4638      	mov	r0, r7
 8009128:	f001 ff50 	bl	800afcc <__sinit>
 800912c:	4b58      	ldr	r3, [pc, #352]	; (8009290 <setvbuf+0x180>)
 800912e:	429c      	cmp	r4, r3
 8009130:	d167      	bne.n	8009202 <setvbuf+0xf2>
 8009132:	687c      	ldr	r4, [r7, #4]
 8009134:	f1b8 0f02 	cmp.w	r8, #2
 8009138:	d006      	beq.n	8009148 <setvbuf+0x38>
 800913a:	f1b8 0f01 	cmp.w	r8, #1
 800913e:	f200 809f 	bhi.w	8009280 <setvbuf+0x170>
 8009142:	2d00      	cmp	r5, #0
 8009144:	f2c0 809c 	blt.w	8009280 <setvbuf+0x170>
 8009148:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800914a:	07db      	lsls	r3, r3, #31
 800914c:	d405      	bmi.n	800915a <setvbuf+0x4a>
 800914e:	89a3      	ldrh	r3, [r4, #12]
 8009150:	0598      	lsls	r0, r3, #22
 8009152:	d402      	bmi.n	800915a <setvbuf+0x4a>
 8009154:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009156:	f002 fb4a 	bl	800b7ee <__retarget_lock_acquire_recursive>
 800915a:	4621      	mov	r1, r4
 800915c:	4638      	mov	r0, r7
 800915e:	f001 fea1 	bl	800aea4 <_fflush_r>
 8009162:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009164:	b141      	cbz	r1, 8009178 <setvbuf+0x68>
 8009166:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800916a:	4299      	cmp	r1, r3
 800916c:	d002      	beq.n	8009174 <setvbuf+0x64>
 800916e:	4638      	mov	r0, r7
 8009170:	f003 f888 	bl	800c284 <_free_r>
 8009174:	2300      	movs	r3, #0
 8009176:	6363      	str	r3, [r4, #52]	; 0x34
 8009178:	2300      	movs	r3, #0
 800917a:	61a3      	str	r3, [r4, #24]
 800917c:	6063      	str	r3, [r4, #4]
 800917e:	89a3      	ldrh	r3, [r4, #12]
 8009180:	0619      	lsls	r1, r3, #24
 8009182:	d503      	bpl.n	800918c <setvbuf+0x7c>
 8009184:	6921      	ldr	r1, [r4, #16]
 8009186:	4638      	mov	r0, r7
 8009188:	f003 f87c 	bl	800c284 <_free_r>
 800918c:	89a3      	ldrh	r3, [r4, #12]
 800918e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8009192:	f023 0303 	bic.w	r3, r3, #3
 8009196:	f1b8 0f02 	cmp.w	r8, #2
 800919a:	81a3      	strh	r3, [r4, #12]
 800919c:	d06c      	beq.n	8009278 <setvbuf+0x168>
 800919e:	ab01      	add	r3, sp, #4
 80091a0:	466a      	mov	r2, sp
 80091a2:	4621      	mov	r1, r4
 80091a4:	4638      	mov	r0, r7
 80091a6:	f002 fb24 	bl	800b7f2 <__swhatbuf_r>
 80091aa:	89a3      	ldrh	r3, [r4, #12]
 80091ac:	4318      	orrs	r0, r3
 80091ae:	81a0      	strh	r0, [r4, #12]
 80091b0:	2d00      	cmp	r5, #0
 80091b2:	d130      	bne.n	8009216 <setvbuf+0x106>
 80091b4:	9d00      	ldr	r5, [sp, #0]
 80091b6:	4628      	mov	r0, r5
 80091b8:	f002 fb80 	bl	800b8bc <malloc>
 80091bc:	4606      	mov	r6, r0
 80091be:	2800      	cmp	r0, #0
 80091c0:	d155      	bne.n	800926e <setvbuf+0x15e>
 80091c2:	f8dd 9000 	ldr.w	r9, [sp]
 80091c6:	45a9      	cmp	r9, r5
 80091c8:	d14a      	bne.n	8009260 <setvbuf+0x150>
 80091ca:	f04f 35ff 	mov.w	r5, #4294967295
 80091ce:	2200      	movs	r2, #0
 80091d0:	60a2      	str	r2, [r4, #8]
 80091d2:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80091d6:	6022      	str	r2, [r4, #0]
 80091d8:	6122      	str	r2, [r4, #16]
 80091da:	2201      	movs	r2, #1
 80091dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091e0:	6162      	str	r2, [r4, #20]
 80091e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80091e4:	f043 0302 	orr.w	r3, r3, #2
 80091e8:	07d2      	lsls	r2, r2, #31
 80091ea:	81a3      	strh	r3, [r4, #12]
 80091ec:	d405      	bmi.n	80091fa <setvbuf+0xea>
 80091ee:	f413 7f00 	tst.w	r3, #512	; 0x200
 80091f2:	d102      	bne.n	80091fa <setvbuf+0xea>
 80091f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80091f6:	f002 fafb 	bl	800b7f0 <__retarget_lock_release_recursive>
 80091fa:	4628      	mov	r0, r5
 80091fc:	b003      	add	sp, #12
 80091fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009202:	4b24      	ldr	r3, [pc, #144]	; (8009294 <setvbuf+0x184>)
 8009204:	429c      	cmp	r4, r3
 8009206:	d101      	bne.n	800920c <setvbuf+0xfc>
 8009208:	68bc      	ldr	r4, [r7, #8]
 800920a:	e793      	b.n	8009134 <setvbuf+0x24>
 800920c:	4b22      	ldr	r3, [pc, #136]	; (8009298 <setvbuf+0x188>)
 800920e:	429c      	cmp	r4, r3
 8009210:	bf08      	it	eq
 8009212:	68fc      	ldreq	r4, [r7, #12]
 8009214:	e78e      	b.n	8009134 <setvbuf+0x24>
 8009216:	2e00      	cmp	r6, #0
 8009218:	d0cd      	beq.n	80091b6 <setvbuf+0xa6>
 800921a:	69bb      	ldr	r3, [r7, #24]
 800921c:	b913      	cbnz	r3, 8009224 <setvbuf+0x114>
 800921e:	4638      	mov	r0, r7
 8009220:	f001 fed4 	bl	800afcc <__sinit>
 8009224:	f1b8 0f01 	cmp.w	r8, #1
 8009228:	bf08      	it	eq
 800922a:	89a3      	ldrheq	r3, [r4, #12]
 800922c:	6026      	str	r6, [r4, #0]
 800922e:	bf04      	itt	eq
 8009230:	f043 0301 	orreq.w	r3, r3, #1
 8009234:	81a3      	strheq	r3, [r4, #12]
 8009236:	89a2      	ldrh	r2, [r4, #12]
 8009238:	f012 0308 	ands.w	r3, r2, #8
 800923c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8009240:	d01c      	beq.n	800927c <setvbuf+0x16c>
 8009242:	07d3      	lsls	r3, r2, #31
 8009244:	bf41      	itttt	mi
 8009246:	2300      	movmi	r3, #0
 8009248:	426d      	negmi	r5, r5
 800924a:	60a3      	strmi	r3, [r4, #8]
 800924c:	61a5      	strmi	r5, [r4, #24]
 800924e:	bf58      	it	pl
 8009250:	60a5      	strpl	r5, [r4, #8]
 8009252:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8009254:	f015 0501 	ands.w	r5, r5, #1
 8009258:	d115      	bne.n	8009286 <setvbuf+0x176>
 800925a:	f412 7f00 	tst.w	r2, #512	; 0x200
 800925e:	e7c8      	b.n	80091f2 <setvbuf+0xe2>
 8009260:	4648      	mov	r0, r9
 8009262:	f002 fb2b 	bl	800b8bc <malloc>
 8009266:	4606      	mov	r6, r0
 8009268:	2800      	cmp	r0, #0
 800926a:	d0ae      	beq.n	80091ca <setvbuf+0xba>
 800926c:	464d      	mov	r5, r9
 800926e:	89a3      	ldrh	r3, [r4, #12]
 8009270:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009274:	81a3      	strh	r3, [r4, #12]
 8009276:	e7d0      	b.n	800921a <setvbuf+0x10a>
 8009278:	2500      	movs	r5, #0
 800927a:	e7a8      	b.n	80091ce <setvbuf+0xbe>
 800927c:	60a3      	str	r3, [r4, #8]
 800927e:	e7e8      	b.n	8009252 <setvbuf+0x142>
 8009280:	f04f 35ff 	mov.w	r5, #4294967295
 8009284:	e7b9      	b.n	80091fa <setvbuf+0xea>
 8009286:	2500      	movs	r5, #0
 8009288:	e7b7      	b.n	80091fa <setvbuf+0xea>
 800928a:	bf00      	nop
 800928c:	20000014 	.word	0x20000014
 8009290:	0800e3a0 	.word	0x0800e3a0
 8009294:	0800e3c0 	.word	0x0800e3c0
 8009298:	0800e380 	.word	0x0800e380

0800929c <nanf>:
 800929c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80092a4 <nanf+0x8>
 80092a0:	4770      	bx	lr
 80092a2:	bf00      	nop
 80092a4:	7fc00000 	.word	0x7fc00000

080092a8 <siprintf>:
 80092a8:	b40e      	push	{r1, r2, r3}
 80092aa:	b500      	push	{lr}
 80092ac:	b09c      	sub	sp, #112	; 0x70
 80092ae:	ab1d      	add	r3, sp, #116	; 0x74
 80092b0:	9002      	str	r0, [sp, #8]
 80092b2:	9006      	str	r0, [sp, #24]
 80092b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80092b8:	4809      	ldr	r0, [pc, #36]	; (80092e0 <siprintf+0x38>)
 80092ba:	9107      	str	r1, [sp, #28]
 80092bc:	9104      	str	r1, [sp, #16]
 80092be:	4909      	ldr	r1, [pc, #36]	; (80092e4 <siprintf+0x3c>)
 80092c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80092c4:	9105      	str	r1, [sp, #20]
 80092c6:	6800      	ldr	r0, [r0, #0]
 80092c8:	9301      	str	r3, [sp, #4]
 80092ca:	a902      	add	r1, sp, #8
 80092cc:	f003 f8e0 	bl	800c490 <_svfiprintf_r>
 80092d0:	9b02      	ldr	r3, [sp, #8]
 80092d2:	2200      	movs	r2, #0
 80092d4:	701a      	strb	r2, [r3, #0]
 80092d6:	b01c      	add	sp, #112	; 0x70
 80092d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80092dc:	b003      	add	sp, #12
 80092de:	4770      	bx	lr
 80092e0:	20000014 	.word	0x20000014
 80092e4:	ffff0208 	.word	0xffff0208

080092e8 <strchr>:
 80092e8:	b2c9      	uxtb	r1, r1
 80092ea:	4603      	mov	r3, r0
 80092ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092f0:	b11a      	cbz	r2, 80092fa <strchr+0x12>
 80092f2:	428a      	cmp	r2, r1
 80092f4:	d1f9      	bne.n	80092ea <strchr+0x2>
 80092f6:	4618      	mov	r0, r3
 80092f8:	4770      	bx	lr
 80092fa:	2900      	cmp	r1, #0
 80092fc:	bf18      	it	ne
 80092fe:	2300      	movne	r3, #0
 8009300:	e7f9      	b.n	80092f6 <strchr+0xe>

08009302 <strncmp>:
 8009302:	b510      	push	{r4, lr}
 8009304:	b16a      	cbz	r2, 8009322 <strncmp+0x20>
 8009306:	3901      	subs	r1, #1
 8009308:	1884      	adds	r4, r0, r2
 800930a:	f810 3b01 	ldrb.w	r3, [r0], #1
 800930e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009312:	4293      	cmp	r3, r2
 8009314:	d103      	bne.n	800931e <strncmp+0x1c>
 8009316:	42a0      	cmp	r0, r4
 8009318:	d001      	beq.n	800931e <strncmp+0x1c>
 800931a:	2b00      	cmp	r3, #0
 800931c:	d1f5      	bne.n	800930a <strncmp+0x8>
 800931e:	1a98      	subs	r0, r3, r2
 8009320:	bd10      	pop	{r4, pc}
 8009322:	4610      	mov	r0, r2
 8009324:	e7fc      	b.n	8009320 <strncmp+0x1e>

08009326 <sulp>:
 8009326:	b570      	push	{r4, r5, r6, lr}
 8009328:	4604      	mov	r4, r0
 800932a:	460d      	mov	r5, r1
 800932c:	ec45 4b10 	vmov	d0, r4, r5
 8009330:	4616      	mov	r6, r2
 8009332:	f002 fe49 	bl	800bfc8 <__ulp>
 8009336:	ec51 0b10 	vmov	r0, r1, d0
 800933a:	b17e      	cbz	r6, 800935c <sulp+0x36>
 800933c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009340:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009344:	2b00      	cmp	r3, #0
 8009346:	dd09      	ble.n	800935c <sulp+0x36>
 8009348:	051b      	lsls	r3, r3, #20
 800934a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800934e:	2400      	movs	r4, #0
 8009350:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009354:	4622      	mov	r2, r4
 8009356:	462b      	mov	r3, r5
 8009358:	f7f7 f94e 	bl	80005f8 <__aeabi_dmul>
 800935c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009360 <_strtod_l>:
 8009360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009364:	b0a3      	sub	sp, #140	; 0x8c
 8009366:	461f      	mov	r7, r3
 8009368:	2300      	movs	r3, #0
 800936a:	931e      	str	r3, [sp, #120]	; 0x78
 800936c:	4ba4      	ldr	r3, [pc, #656]	; (8009600 <_strtod_l+0x2a0>)
 800936e:	9219      	str	r2, [sp, #100]	; 0x64
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	9307      	str	r3, [sp, #28]
 8009374:	4604      	mov	r4, r0
 8009376:	4618      	mov	r0, r3
 8009378:	4688      	mov	r8, r1
 800937a:	f7f6 ff79 	bl	8000270 <strlen>
 800937e:	f04f 0a00 	mov.w	sl, #0
 8009382:	4605      	mov	r5, r0
 8009384:	f04f 0b00 	mov.w	fp, #0
 8009388:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800938c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800938e:	781a      	ldrb	r2, [r3, #0]
 8009390:	2a2b      	cmp	r2, #43	; 0x2b
 8009392:	d04c      	beq.n	800942e <_strtod_l+0xce>
 8009394:	d839      	bhi.n	800940a <_strtod_l+0xaa>
 8009396:	2a0d      	cmp	r2, #13
 8009398:	d832      	bhi.n	8009400 <_strtod_l+0xa0>
 800939a:	2a08      	cmp	r2, #8
 800939c:	d832      	bhi.n	8009404 <_strtod_l+0xa4>
 800939e:	2a00      	cmp	r2, #0
 80093a0:	d03c      	beq.n	800941c <_strtod_l+0xbc>
 80093a2:	2300      	movs	r3, #0
 80093a4:	930e      	str	r3, [sp, #56]	; 0x38
 80093a6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80093a8:	7833      	ldrb	r3, [r6, #0]
 80093aa:	2b30      	cmp	r3, #48	; 0x30
 80093ac:	f040 80b4 	bne.w	8009518 <_strtod_l+0x1b8>
 80093b0:	7873      	ldrb	r3, [r6, #1]
 80093b2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80093b6:	2b58      	cmp	r3, #88	; 0x58
 80093b8:	d16c      	bne.n	8009494 <_strtod_l+0x134>
 80093ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80093bc:	9301      	str	r3, [sp, #4]
 80093be:	ab1e      	add	r3, sp, #120	; 0x78
 80093c0:	9702      	str	r7, [sp, #8]
 80093c2:	9300      	str	r3, [sp, #0]
 80093c4:	4a8f      	ldr	r2, [pc, #572]	; (8009604 <_strtod_l+0x2a4>)
 80093c6:	ab1f      	add	r3, sp, #124	; 0x7c
 80093c8:	a91d      	add	r1, sp, #116	; 0x74
 80093ca:	4620      	mov	r0, r4
 80093cc:	f001 ff02 	bl	800b1d4 <__gethex>
 80093d0:	f010 0707 	ands.w	r7, r0, #7
 80093d4:	4605      	mov	r5, r0
 80093d6:	d005      	beq.n	80093e4 <_strtod_l+0x84>
 80093d8:	2f06      	cmp	r7, #6
 80093da:	d12a      	bne.n	8009432 <_strtod_l+0xd2>
 80093dc:	3601      	adds	r6, #1
 80093de:	2300      	movs	r3, #0
 80093e0:	961d      	str	r6, [sp, #116]	; 0x74
 80093e2:	930e      	str	r3, [sp, #56]	; 0x38
 80093e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	f040 8596 	bne.w	8009f18 <_strtod_l+0xbb8>
 80093ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80093ee:	b1db      	cbz	r3, 8009428 <_strtod_l+0xc8>
 80093f0:	4652      	mov	r2, sl
 80093f2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80093f6:	ec43 2b10 	vmov	d0, r2, r3
 80093fa:	b023      	add	sp, #140	; 0x8c
 80093fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009400:	2a20      	cmp	r2, #32
 8009402:	d1ce      	bne.n	80093a2 <_strtod_l+0x42>
 8009404:	3301      	adds	r3, #1
 8009406:	931d      	str	r3, [sp, #116]	; 0x74
 8009408:	e7c0      	b.n	800938c <_strtod_l+0x2c>
 800940a:	2a2d      	cmp	r2, #45	; 0x2d
 800940c:	d1c9      	bne.n	80093a2 <_strtod_l+0x42>
 800940e:	2201      	movs	r2, #1
 8009410:	920e      	str	r2, [sp, #56]	; 0x38
 8009412:	1c5a      	adds	r2, r3, #1
 8009414:	921d      	str	r2, [sp, #116]	; 0x74
 8009416:	785b      	ldrb	r3, [r3, #1]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d1c4      	bne.n	80093a6 <_strtod_l+0x46>
 800941c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800941e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8009422:	2b00      	cmp	r3, #0
 8009424:	f040 8576 	bne.w	8009f14 <_strtod_l+0xbb4>
 8009428:	4652      	mov	r2, sl
 800942a:	465b      	mov	r3, fp
 800942c:	e7e3      	b.n	80093f6 <_strtod_l+0x96>
 800942e:	2200      	movs	r2, #0
 8009430:	e7ee      	b.n	8009410 <_strtod_l+0xb0>
 8009432:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009434:	b13a      	cbz	r2, 8009446 <_strtod_l+0xe6>
 8009436:	2135      	movs	r1, #53	; 0x35
 8009438:	a820      	add	r0, sp, #128	; 0x80
 800943a:	f002 fed0 	bl	800c1de <__copybits>
 800943e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009440:	4620      	mov	r0, r4
 8009442:	f002 fa95 	bl	800b970 <_Bfree>
 8009446:	3f01      	subs	r7, #1
 8009448:	2f05      	cmp	r7, #5
 800944a:	d807      	bhi.n	800945c <_strtod_l+0xfc>
 800944c:	e8df f007 	tbb	[pc, r7]
 8009450:	1d180b0e 	.word	0x1d180b0e
 8009454:	030e      	.short	0x030e
 8009456:	f04f 0b00 	mov.w	fp, #0
 800945a:	46da      	mov	sl, fp
 800945c:	0728      	lsls	r0, r5, #28
 800945e:	d5c1      	bpl.n	80093e4 <_strtod_l+0x84>
 8009460:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8009464:	e7be      	b.n	80093e4 <_strtod_l+0x84>
 8009466:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800946a:	e7f7      	b.n	800945c <_strtod_l+0xfc>
 800946c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8009470:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8009472:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009476:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800947a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800947e:	e7ed      	b.n	800945c <_strtod_l+0xfc>
 8009480:	f8df b184 	ldr.w	fp, [pc, #388]	; 8009608 <_strtod_l+0x2a8>
 8009484:	f04f 0a00 	mov.w	sl, #0
 8009488:	e7e8      	b.n	800945c <_strtod_l+0xfc>
 800948a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800948e:	f04f 3aff 	mov.w	sl, #4294967295
 8009492:	e7e3      	b.n	800945c <_strtod_l+0xfc>
 8009494:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009496:	1c5a      	adds	r2, r3, #1
 8009498:	921d      	str	r2, [sp, #116]	; 0x74
 800949a:	785b      	ldrb	r3, [r3, #1]
 800949c:	2b30      	cmp	r3, #48	; 0x30
 800949e:	d0f9      	beq.n	8009494 <_strtod_l+0x134>
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d09f      	beq.n	80093e4 <_strtod_l+0x84>
 80094a4:	2301      	movs	r3, #1
 80094a6:	f04f 0900 	mov.w	r9, #0
 80094aa:	9304      	str	r3, [sp, #16]
 80094ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80094ae:	930a      	str	r3, [sp, #40]	; 0x28
 80094b0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80094b4:	464f      	mov	r7, r9
 80094b6:	220a      	movs	r2, #10
 80094b8:	981d      	ldr	r0, [sp, #116]	; 0x74
 80094ba:	7806      	ldrb	r6, [r0, #0]
 80094bc:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80094c0:	b2d9      	uxtb	r1, r3
 80094c2:	2909      	cmp	r1, #9
 80094c4:	d92a      	bls.n	800951c <_strtod_l+0x1bc>
 80094c6:	9907      	ldr	r1, [sp, #28]
 80094c8:	462a      	mov	r2, r5
 80094ca:	f7ff ff1a 	bl	8009302 <strncmp>
 80094ce:	b398      	cbz	r0, 8009538 <_strtod_l+0x1d8>
 80094d0:	2000      	movs	r0, #0
 80094d2:	4633      	mov	r3, r6
 80094d4:	463d      	mov	r5, r7
 80094d6:	9007      	str	r0, [sp, #28]
 80094d8:	4602      	mov	r2, r0
 80094da:	2b65      	cmp	r3, #101	; 0x65
 80094dc:	d001      	beq.n	80094e2 <_strtod_l+0x182>
 80094de:	2b45      	cmp	r3, #69	; 0x45
 80094e0:	d118      	bne.n	8009514 <_strtod_l+0x1b4>
 80094e2:	b91d      	cbnz	r5, 80094ec <_strtod_l+0x18c>
 80094e4:	9b04      	ldr	r3, [sp, #16]
 80094e6:	4303      	orrs	r3, r0
 80094e8:	d098      	beq.n	800941c <_strtod_l+0xbc>
 80094ea:	2500      	movs	r5, #0
 80094ec:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 80094f0:	f108 0301 	add.w	r3, r8, #1
 80094f4:	931d      	str	r3, [sp, #116]	; 0x74
 80094f6:	f898 3001 	ldrb.w	r3, [r8, #1]
 80094fa:	2b2b      	cmp	r3, #43	; 0x2b
 80094fc:	d075      	beq.n	80095ea <_strtod_l+0x28a>
 80094fe:	2b2d      	cmp	r3, #45	; 0x2d
 8009500:	d07b      	beq.n	80095fa <_strtod_l+0x29a>
 8009502:	f04f 0c00 	mov.w	ip, #0
 8009506:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800950a:	2909      	cmp	r1, #9
 800950c:	f240 8082 	bls.w	8009614 <_strtod_l+0x2b4>
 8009510:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8009514:	2600      	movs	r6, #0
 8009516:	e09d      	b.n	8009654 <_strtod_l+0x2f4>
 8009518:	2300      	movs	r3, #0
 800951a:	e7c4      	b.n	80094a6 <_strtod_l+0x146>
 800951c:	2f08      	cmp	r7, #8
 800951e:	bfd8      	it	le
 8009520:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8009522:	f100 0001 	add.w	r0, r0, #1
 8009526:	bfda      	itte	le
 8009528:	fb02 3301 	mlale	r3, r2, r1, r3
 800952c:	9309      	strle	r3, [sp, #36]	; 0x24
 800952e:	fb02 3909 	mlagt	r9, r2, r9, r3
 8009532:	3701      	adds	r7, #1
 8009534:	901d      	str	r0, [sp, #116]	; 0x74
 8009536:	e7bf      	b.n	80094b8 <_strtod_l+0x158>
 8009538:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800953a:	195a      	adds	r2, r3, r5
 800953c:	921d      	str	r2, [sp, #116]	; 0x74
 800953e:	5d5b      	ldrb	r3, [r3, r5]
 8009540:	2f00      	cmp	r7, #0
 8009542:	d037      	beq.n	80095b4 <_strtod_l+0x254>
 8009544:	9007      	str	r0, [sp, #28]
 8009546:	463d      	mov	r5, r7
 8009548:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800954c:	2a09      	cmp	r2, #9
 800954e:	d912      	bls.n	8009576 <_strtod_l+0x216>
 8009550:	2201      	movs	r2, #1
 8009552:	e7c2      	b.n	80094da <_strtod_l+0x17a>
 8009554:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009556:	1c5a      	adds	r2, r3, #1
 8009558:	921d      	str	r2, [sp, #116]	; 0x74
 800955a:	785b      	ldrb	r3, [r3, #1]
 800955c:	3001      	adds	r0, #1
 800955e:	2b30      	cmp	r3, #48	; 0x30
 8009560:	d0f8      	beq.n	8009554 <_strtod_l+0x1f4>
 8009562:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8009566:	2a08      	cmp	r2, #8
 8009568:	f200 84db 	bhi.w	8009f22 <_strtod_l+0xbc2>
 800956c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800956e:	9007      	str	r0, [sp, #28]
 8009570:	2000      	movs	r0, #0
 8009572:	920a      	str	r2, [sp, #40]	; 0x28
 8009574:	4605      	mov	r5, r0
 8009576:	3b30      	subs	r3, #48	; 0x30
 8009578:	f100 0201 	add.w	r2, r0, #1
 800957c:	d014      	beq.n	80095a8 <_strtod_l+0x248>
 800957e:	9907      	ldr	r1, [sp, #28]
 8009580:	4411      	add	r1, r2
 8009582:	9107      	str	r1, [sp, #28]
 8009584:	462a      	mov	r2, r5
 8009586:	eb00 0e05 	add.w	lr, r0, r5
 800958a:	210a      	movs	r1, #10
 800958c:	4572      	cmp	r2, lr
 800958e:	d113      	bne.n	80095b8 <_strtod_l+0x258>
 8009590:	182a      	adds	r2, r5, r0
 8009592:	2a08      	cmp	r2, #8
 8009594:	f105 0501 	add.w	r5, r5, #1
 8009598:	4405      	add	r5, r0
 800959a:	dc1c      	bgt.n	80095d6 <_strtod_l+0x276>
 800959c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800959e:	220a      	movs	r2, #10
 80095a0:	fb02 3301 	mla	r3, r2, r1, r3
 80095a4:	9309      	str	r3, [sp, #36]	; 0x24
 80095a6:	2200      	movs	r2, #0
 80095a8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80095aa:	1c59      	adds	r1, r3, #1
 80095ac:	911d      	str	r1, [sp, #116]	; 0x74
 80095ae:	785b      	ldrb	r3, [r3, #1]
 80095b0:	4610      	mov	r0, r2
 80095b2:	e7c9      	b.n	8009548 <_strtod_l+0x1e8>
 80095b4:	4638      	mov	r0, r7
 80095b6:	e7d2      	b.n	800955e <_strtod_l+0x1fe>
 80095b8:	2a08      	cmp	r2, #8
 80095ba:	dc04      	bgt.n	80095c6 <_strtod_l+0x266>
 80095bc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80095be:	434e      	muls	r6, r1
 80095c0:	9609      	str	r6, [sp, #36]	; 0x24
 80095c2:	3201      	adds	r2, #1
 80095c4:	e7e2      	b.n	800958c <_strtod_l+0x22c>
 80095c6:	f102 0c01 	add.w	ip, r2, #1
 80095ca:	f1bc 0f10 	cmp.w	ip, #16
 80095ce:	bfd8      	it	le
 80095d0:	fb01 f909 	mulle.w	r9, r1, r9
 80095d4:	e7f5      	b.n	80095c2 <_strtod_l+0x262>
 80095d6:	2d10      	cmp	r5, #16
 80095d8:	bfdc      	itt	le
 80095da:	220a      	movle	r2, #10
 80095dc:	fb02 3909 	mlale	r9, r2, r9, r3
 80095e0:	e7e1      	b.n	80095a6 <_strtod_l+0x246>
 80095e2:	2300      	movs	r3, #0
 80095e4:	9307      	str	r3, [sp, #28]
 80095e6:	2201      	movs	r2, #1
 80095e8:	e77c      	b.n	80094e4 <_strtod_l+0x184>
 80095ea:	f04f 0c00 	mov.w	ip, #0
 80095ee:	f108 0302 	add.w	r3, r8, #2
 80095f2:	931d      	str	r3, [sp, #116]	; 0x74
 80095f4:	f898 3002 	ldrb.w	r3, [r8, #2]
 80095f8:	e785      	b.n	8009506 <_strtod_l+0x1a6>
 80095fa:	f04f 0c01 	mov.w	ip, #1
 80095fe:	e7f6      	b.n	80095ee <_strtod_l+0x28e>
 8009600:	0800e44c 	.word	0x0800e44c
 8009604:	0800e198 	.word	0x0800e198
 8009608:	7ff00000 	.word	0x7ff00000
 800960c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800960e:	1c59      	adds	r1, r3, #1
 8009610:	911d      	str	r1, [sp, #116]	; 0x74
 8009612:	785b      	ldrb	r3, [r3, #1]
 8009614:	2b30      	cmp	r3, #48	; 0x30
 8009616:	d0f9      	beq.n	800960c <_strtod_l+0x2ac>
 8009618:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800961c:	2908      	cmp	r1, #8
 800961e:	f63f af79 	bhi.w	8009514 <_strtod_l+0x1b4>
 8009622:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8009626:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009628:	9308      	str	r3, [sp, #32]
 800962a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800962c:	1c59      	adds	r1, r3, #1
 800962e:	911d      	str	r1, [sp, #116]	; 0x74
 8009630:	785b      	ldrb	r3, [r3, #1]
 8009632:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8009636:	2e09      	cmp	r6, #9
 8009638:	d937      	bls.n	80096aa <_strtod_l+0x34a>
 800963a:	9e08      	ldr	r6, [sp, #32]
 800963c:	1b89      	subs	r1, r1, r6
 800963e:	2908      	cmp	r1, #8
 8009640:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009644:	dc02      	bgt.n	800964c <_strtod_l+0x2ec>
 8009646:	4576      	cmp	r6, lr
 8009648:	bfa8      	it	ge
 800964a:	4676      	movge	r6, lr
 800964c:	f1bc 0f00 	cmp.w	ip, #0
 8009650:	d000      	beq.n	8009654 <_strtod_l+0x2f4>
 8009652:	4276      	negs	r6, r6
 8009654:	2d00      	cmp	r5, #0
 8009656:	d14f      	bne.n	80096f8 <_strtod_l+0x398>
 8009658:	9904      	ldr	r1, [sp, #16]
 800965a:	4301      	orrs	r1, r0
 800965c:	f47f aec2 	bne.w	80093e4 <_strtod_l+0x84>
 8009660:	2a00      	cmp	r2, #0
 8009662:	f47f aedb 	bne.w	800941c <_strtod_l+0xbc>
 8009666:	2b69      	cmp	r3, #105	; 0x69
 8009668:	d027      	beq.n	80096ba <_strtod_l+0x35a>
 800966a:	dc24      	bgt.n	80096b6 <_strtod_l+0x356>
 800966c:	2b49      	cmp	r3, #73	; 0x49
 800966e:	d024      	beq.n	80096ba <_strtod_l+0x35a>
 8009670:	2b4e      	cmp	r3, #78	; 0x4e
 8009672:	f47f aed3 	bne.w	800941c <_strtod_l+0xbc>
 8009676:	499e      	ldr	r1, [pc, #632]	; (80098f0 <_strtod_l+0x590>)
 8009678:	a81d      	add	r0, sp, #116	; 0x74
 800967a:	f002 f803 	bl	800b684 <__match>
 800967e:	2800      	cmp	r0, #0
 8009680:	f43f aecc 	beq.w	800941c <_strtod_l+0xbc>
 8009684:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009686:	781b      	ldrb	r3, [r3, #0]
 8009688:	2b28      	cmp	r3, #40	; 0x28
 800968a:	d12d      	bne.n	80096e8 <_strtod_l+0x388>
 800968c:	4999      	ldr	r1, [pc, #612]	; (80098f4 <_strtod_l+0x594>)
 800968e:	aa20      	add	r2, sp, #128	; 0x80
 8009690:	a81d      	add	r0, sp, #116	; 0x74
 8009692:	f002 f80b 	bl	800b6ac <__hexnan>
 8009696:	2805      	cmp	r0, #5
 8009698:	d126      	bne.n	80096e8 <_strtod_l+0x388>
 800969a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800969c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 80096a0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80096a4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80096a8:	e69c      	b.n	80093e4 <_strtod_l+0x84>
 80096aa:	210a      	movs	r1, #10
 80096ac:	fb01 3e0e 	mla	lr, r1, lr, r3
 80096b0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80096b4:	e7b9      	b.n	800962a <_strtod_l+0x2ca>
 80096b6:	2b6e      	cmp	r3, #110	; 0x6e
 80096b8:	e7db      	b.n	8009672 <_strtod_l+0x312>
 80096ba:	498f      	ldr	r1, [pc, #572]	; (80098f8 <_strtod_l+0x598>)
 80096bc:	a81d      	add	r0, sp, #116	; 0x74
 80096be:	f001 ffe1 	bl	800b684 <__match>
 80096c2:	2800      	cmp	r0, #0
 80096c4:	f43f aeaa 	beq.w	800941c <_strtod_l+0xbc>
 80096c8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80096ca:	498c      	ldr	r1, [pc, #560]	; (80098fc <_strtod_l+0x59c>)
 80096cc:	3b01      	subs	r3, #1
 80096ce:	a81d      	add	r0, sp, #116	; 0x74
 80096d0:	931d      	str	r3, [sp, #116]	; 0x74
 80096d2:	f001 ffd7 	bl	800b684 <__match>
 80096d6:	b910      	cbnz	r0, 80096de <_strtod_l+0x37e>
 80096d8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80096da:	3301      	adds	r3, #1
 80096dc:	931d      	str	r3, [sp, #116]	; 0x74
 80096de:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800990c <_strtod_l+0x5ac>
 80096e2:	f04f 0a00 	mov.w	sl, #0
 80096e6:	e67d      	b.n	80093e4 <_strtod_l+0x84>
 80096e8:	4885      	ldr	r0, [pc, #532]	; (8009900 <_strtod_l+0x5a0>)
 80096ea:	f003 f92d 	bl	800c948 <nan>
 80096ee:	ed8d 0b04 	vstr	d0, [sp, #16]
 80096f2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80096f6:	e675      	b.n	80093e4 <_strtod_l+0x84>
 80096f8:	9b07      	ldr	r3, [sp, #28]
 80096fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80096fc:	1af3      	subs	r3, r6, r3
 80096fe:	2f00      	cmp	r7, #0
 8009700:	bf08      	it	eq
 8009702:	462f      	moveq	r7, r5
 8009704:	2d10      	cmp	r5, #16
 8009706:	9308      	str	r3, [sp, #32]
 8009708:	46a8      	mov	r8, r5
 800970a:	bfa8      	it	ge
 800970c:	f04f 0810 	movge.w	r8, #16
 8009710:	f7f6 fef8 	bl	8000504 <__aeabi_ui2d>
 8009714:	2d09      	cmp	r5, #9
 8009716:	4682      	mov	sl, r0
 8009718:	468b      	mov	fp, r1
 800971a:	dd13      	ble.n	8009744 <_strtod_l+0x3e4>
 800971c:	4b79      	ldr	r3, [pc, #484]	; (8009904 <_strtod_l+0x5a4>)
 800971e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009722:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009726:	f7f6 ff67 	bl	80005f8 <__aeabi_dmul>
 800972a:	4682      	mov	sl, r0
 800972c:	4648      	mov	r0, r9
 800972e:	468b      	mov	fp, r1
 8009730:	f7f6 fee8 	bl	8000504 <__aeabi_ui2d>
 8009734:	4602      	mov	r2, r0
 8009736:	460b      	mov	r3, r1
 8009738:	4650      	mov	r0, sl
 800973a:	4659      	mov	r1, fp
 800973c:	f7f6 fda6 	bl	800028c <__adddf3>
 8009740:	4682      	mov	sl, r0
 8009742:	468b      	mov	fp, r1
 8009744:	2d0f      	cmp	r5, #15
 8009746:	dc38      	bgt.n	80097ba <_strtod_l+0x45a>
 8009748:	9b08      	ldr	r3, [sp, #32]
 800974a:	2b00      	cmp	r3, #0
 800974c:	f43f ae4a 	beq.w	80093e4 <_strtod_l+0x84>
 8009750:	dd24      	ble.n	800979c <_strtod_l+0x43c>
 8009752:	2b16      	cmp	r3, #22
 8009754:	dc0b      	bgt.n	800976e <_strtod_l+0x40e>
 8009756:	4d6b      	ldr	r5, [pc, #428]	; (8009904 <_strtod_l+0x5a4>)
 8009758:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800975c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8009760:	4652      	mov	r2, sl
 8009762:	465b      	mov	r3, fp
 8009764:	f7f6 ff48 	bl	80005f8 <__aeabi_dmul>
 8009768:	4682      	mov	sl, r0
 800976a:	468b      	mov	fp, r1
 800976c:	e63a      	b.n	80093e4 <_strtod_l+0x84>
 800976e:	9a08      	ldr	r2, [sp, #32]
 8009770:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8009774:	4293      	cmp	r3, r2
 8009776:	db20      	blt.n	80097ba <_strtod_l+0x45a>
 8009778:	4c62      	ldr	r4, [pc, #392]	; (8009904 <_strtod_l+0x5a4>)
 800977a:	f1c5 050f 	rsb	r5, r5, #15
 800977e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009782:	4652      	mov	r2, sl
 8009784:	465b      	mov	r3, fp
 8009786:	e9d1 0100 	ldrd	r0, r1, [r1]
 800978a:	f7f6 ff35 	bl	80005f8 <__aeabi_dmul>
 800978e:	9b08      	ldr	r3, [sp, #32]
 8009790:	1b5d      	subs	r5, r3, r5
 8009792:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009796:	e9d4 2300 	ldrd	r2, r3, [r4]
 800979a:	e7e3      	b.n	8009764 <_strtod_l+0x404>
 800979c:	9b08      	ldr	r3, [sp, #32]
 800979e:	3316      	adds	r3, #22
 80097a0:	db0b      	blt.n	80097ba <_strtod_l+0x45a>
 80097a2:	9b07      	ldr	r3, [sp, #28]
 80097a4:	4a57      	ldr	r2, [pc, #348]	; (8009904 <_strtod_l+0x5a4>)
 80097a6:	1b9e      	subs	r6, r3, r6
 80097a8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80097ac:	e9d6 2300 	ldrd	r2, r3, [r6]
 80097b0:	4650      	mov	r0, sl
 80097b2:	4659      	mov	r1, fp
 80097b4:	f7f7 f84a 	bl	800084c <__aeabi_ddiv>
 80097b8:	e7d6      	b.n	8009768 <_strtod_l+0x408>
 80097ba:	9b08      	ldr	r3, [sp, #32]
 80097bc:	eba5 0808 	sub.w	r8, r5, r8
 80097c0:	4498      	add	r8, r3
 80097c2:	f1b8 0f00 	cmp.w	r8, #0
 80097c6:	dd71      	ble.n	80098ac <_strtod_l+0x54c>
 80097c8:	f018 030f 	ands.w	r3, r8, #15
 80097cc:	d00a      	beq.n	80097e4 <_strtod_l+0x484>
 80097ce:	494d      	ldr	r1, [pc, #308]	; (8009904 <_strtod_l+0x5a4>)
 80097d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80097d4:	4652      	mov	r2, sl
 80097d6:	465b      	mov	r3, fp
 80097d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80097dc:	f7f6 ff0c 	bl	80005f8 <__aeabi_dmul>
 80097e0:	4682      	mov	sl, r0
 80097e2:	468b      	mov	fp, r1
 80097e4:	f038 080f 	bics.w	r8, r8, #15
 80097e8:	d04d      	beq.n	8009886 <_strtod_l+0x526>
 80097ea:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80097ee:	dd22      	ble.n	8009836 <_strtod_l+0x4d6>
 80097f0:	2500      	movs	r5, #0
 80097f2:	462e      	mov	r6, r5
 80097f4:	9509      	str	r5, [sp, #36]	; 0x24
 80097f6:	9507      	str	r5, [sp, #28]
 80097f8:	2322      	movs	r3, #34	; 0x22
 80097fa:	f8df b110 	ldr.w	fp, [pc, #272]	; 800990c <_strtod_l+0x5ac>
 80097fe:	6023      	str	r3, [r4, #0]
 8009800:	f04f 0a00 	mov.w	sl, #0
 8009804:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009806:	2b00      	cmp	r3, #0
 8009808:	f43f adec 	beq.w	80093e4 <_strtod_l+0x84>
 800980c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800980e:	4620      	mov	r0, r4
 8009810:	f002 f8ae 	bl	800b970 <_Bfree>
 8009814:	9907      	ldr	r1, [sp, #28]
 8009816:	4620      	mov	r0, r4
 8009818:	f002 f8aa 	bl	800b970 <_Bfree>
 800981c:	4631      	mov	r1, r6
 800981e:	4620      	mov	r0, r4
 8009820:	f002 f8a6 	bl	800b970 <_Bfree>
 8009824:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009826:	4620      	mov	r0, r4
 8009828:	f002 f8a2 	bl	800b970 <_Bfree>
 800982c:	4629      	mov	r1, r5
 800982e:	4620      	mov	r0, r4
 8009830:	f002 f89e 	bl	800b970 <_Bfree>
 8009834:	e5d6      	b.n	80093e4 <_strtod_l+0x84>
 8009836:	2300      	movs	r3, #0
 8009838:	ea4f 1828 	mov.w	r8, r8, asr #4
 800983c:	4650      	mov	r0, sl
 800983e:	4659      	mov	r1, fp
 8009840:	4699      	mov	r9, r3
 8009842:	f1b8 0f01 	cmp.w	r8, #1
 8009846:	dc21      	bgt.n	800988c <_strtod_l+0x52c>
 8009848:	b10b      	cbz	r3, 800984e <_strtod_l+0x4ee>
 800984a:	4682      	mov	sl, r0
 800984c:	468b      	mov	fp, r1
 800984e:	4b2e      	ldr	r3, [pc, #184]	; (8009908 <_strtod_l+0x5a8>)
 8009850:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009854:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8009858:	4652      	mov	r2, sl
 800985a:	465b      	mov	r3, fp
 800985c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8009860:	f7f6 feca 	bl	80005f8 <__aeabi_dmul>
 8009864:	4b29      	ldr	r3, [pc, #164]	; (800990c <_strtod_l+0x5ac>)
 8009866:	460a      	mov	r2, r1
 8009868:	400b      	ands	r3, r1
 800986a:	4929      	ldr	r1, [pc, #164]	; (8009910 <_strtod_l+0x5b0>)
 800986c:	428b      	cmp	r3, r1
 800986e:	4682      	mov	sl, r0
 8009870:	d8be      	bhi.n	80097f0 <_strtod_l+0x490>
 8009872:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009876:	428b      	cmp	r3, r1
 8009878:	bf86      	itte	hi
 800987a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8009914 <_strtod_l+0x5b4>
 800987e:	f04f 3aff 	movhi.w	sl, #4294967295
 8009882:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8009886:	2300      	movs	r3, #0
 8009888:	9304      	str	r3, [sp, #16]
 800988a:	e081      	b.n	8009990 <_strtod_l+0x630>
 800988c:	f018 0f01 	tst.w	r8, #1
 8009890:	d007      	beq.n	80098a2 <_strtod_l+0x542>
 8009892:	4b1d      	ldr	r3, [pc, #116]	; (8009908 <_strtod_l+0x5a8>)
 8009894:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8009898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800989c:	f7f6 feac 	bl	80005f8 <__aeabi_dmul>
 80098a0:	2301      	movs	r3, #1
 80098a2:	f109 0901 	add.w	r9, r9, #1
 80098a6:	ea4f 0868 	mov.w	r8, r8, asr #1
 80098aa:	e7ca      	b.n	8009842 <_strtod_l+0x4e2>
 80098ac:	d0eb      	beq.n	8009886 <_strtod_l+0x526>
 80098ae:	f1c8 0800 	rsb	r8, r8, #0
 80098b2:	f018 020f 	ands.w	r2, r8, #15
 80098b6:	d00a      	beq.n	80098ce <_strtod_l+0x56e>
 80098b8:	4b12      	ldr	r3, [pc, #72]	; (8009904 <_strtod_l+0x5a4>)
 80098ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80098be:	4650      	mov	r0, sl
 80098c0:	4659      	mov	r1, fp
 80098c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098c6:	f7f6 ffc1 	bl	800084c <__aeabi_ddiv>
 80098ca:	4682      	mov	sl, r0
 80098cc:	468b      	mov	fp, r1
 80098ce:	ea5f 1828 	movs.w	r8, r8, asr #4
 80098d2:	d0d8      	beq.n	8009886 <_strtod_l+0x526>
 80098d4:	f1b8 0f1f 	cmp.w	r8, #31
 80098d8:	dd1e      	ble.n	8009918 <_strtod_l+0x5b8>
 80098da:	2500      	movs	r5, #0
 80098dc:	462e      	mov	r6, r5
 80098de:	9509      	str	r5, [sp, #36]	; 0x24
 80098e0:	9507      	str	r5, [sp, #28]
 80098e2:	2322      	movs	r3, #34	; 0x22
 80098e4:	f04f 0a00 	mov.w	sl, #0
 80098e8:	f04f 0b00 	mov.w	fp, #0
 80098ec:	6023      	str	r3, [r4, #0]
 80098ee:	e789      	b.n	8009804 <_strtod_l+0x4a4>
 80098f0:	0800e169 	.word	0x0800e169
 80098f4:	0800e1ac 	.word	0x0800e1ac
 80098f8:	0800e161 	.word	0x0800e161
 80098fc:	0800e2ec 	.word	0x0800e2ec
 8009900:	0800e608 	.word	0x0800e608
 8009904:	0800e4e8 	.word	0x0800e4e8
 8009908:	0800e4c0 	.word	0x0800e4c0
 800990c:	7ff00000 	.word	0x7ff00000
 8009910:	7ca00000 	.word	0x7ca00000
 8009914:	7fefffff 	.word	0x7fefffff
 8009918:	f018 0310 	ands.w	r3, r8, #16
 800991c:	bf18      	it	ne
 800991e:	236a      	movne	r3, #106	; 0x6a
 8009920:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8009cd8 <_strtod_l+0x978>
 8009924:	9304      	str	r3, [sp, #16]
 8009926:	4650      	mov	r0, sl
 8009928:	4659      	mov	r1, fp
 800992a:	2300      	movs	r3, #0
 800992c:	f018 0f01 	tst.w	r8, #1
 8009930:	d004      	beq.n	800993c <_strtod_l+0x5dc>
 8009932:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009936:	f7f6 fe5f 	bl	80005f8 <__aeabi_dmul>
 800993a:	2301      	movs	r3, #1
 800993c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009940:	f109 0908 	add.w	r9, r9, #8
 8009944:	d1f2      	bne.n	800992c <_strtod_l+0x5cc>
 8009946:	b10b      	cbz	r3, 800994c <_strtod_l+0x5ec>
 8009948:	4682      	mov	sl, r0
 800994a:	468b      	mov	fp, r1
 800994c:	9b04      	ldr	r3, [sp, #16]
 800994e:	b1bb      	cbz	r3, 8009980 <_strtod_l+0x620>
 8009950:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8009954:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009958:	2b00      	cmp	r3, #0
 800995a:	4659      	mov	r1, fp
 800995c:	dd10      	ble.n	8009980 <_strtod_l+0x620>
 800995e:	2b1f      	cmp	r3, #31
 8009960:	f340 8128 	ble.w	8009bb4 <_strtod_l+0x854>
 8009964:	2b34      	cmp	r3, #52	; 0x34
 8009966:	bfde      	ittt	le
 8009968:	3b20      	suble	r3, #32
 800996a:	f04f 32ff 	movle.w	r2, #4294967295
 800996e:	fa02 f303 	lslle.w	r3, r2, r3
 8009972:	f04f 0a00 	mov.w	sl, #0
 8009976:	bfcc      	ite	gt
 8009978:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800997c:	ea03 0b01 	andle.w	fp, r3, r1
 8009980:	2200      	movs	r2, #0
 8009982:	2300      	movs	r3, #0
 8009984:	4650      	mov	r0, sl
 8009986:	4659      	mov	r1, fp
 8009988:	f7f7 f89e 	bl	8000ac8 <__aeabi_dcmpeq>
 800998c:	2800      	cmp	r0, #0
 800998e:	d1a4      	bne.n	80098da <_strtod_l+0x57a>
 8009990:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009992:	9300      	str	r3, [sp, #0]
 8009994:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009996:	462b      	mov	r3, r5
 8009998:	463a      	mov	r2, r7
 800999a:	4620      	mov	r0, r4
 800999c:	f002 f854 	bl	800ba48 <__s2b>
 80099a0:	9009      	str	r0, [sp, #36]	; 0x24
 80099a2:	2800      	cmp	r0, #0
 80099a4:	f43f af24 	beq.w	80097f0 <_strtod_l+0x490>
 80099a8:	9b07      	ldr	r3, [sp, #28]
 80099aa:	1b9e      	subs	r6, r3, r6
 80099ac:	9b08      	ldr	r3, [sp, #32]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	bfb4      	ite	lt
 80099b2:	4633      	movlt	r3, r6
 80099b4:	2300      	movge	r3, #0
 80099b6:	9310      	str	r3, [sp, #64]	; 0x40
 80099b8:	9b08      	ldr	r3, [sp, #32]
 80099ba:	2500      	movs	r5, #0
 80099bc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80099c0:	9318      	str	r3, [sp, #96]	; 0x60
 80099c2:	462e      	mov	r6, r5
 80099c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099c6:	4620      	mov	r0, r4
 80099c8:	6859      	ldr	r1, [r3, #4]
 80099ca:	f001 ff91 	bl	800b8f0 <_Balloc>
 80099ce:	9007      	str	r0, [sp, #28]
 80099d0:	2800      	cmp	r0, #0
 80099d2:	f43f af11 	beq.w	80097f8 <_strtod_l+0x498>
 80099d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099d8:	691a      	ldr	r2, [r3, #16]
 80099da:	3202      	adds	r2, #2
 80099dc:	f103 010c 	add.w	r1, r3, #12
 80099e0:	0092      	lsls	r2, r2, #2
 80099e2:	300c      	adds	r0, #12
 80099e4:	f7fe fcec 	bl	80083c0 <memcpy>
 80099e8:	ec4b ab10 	vmov	d0, sl, fp
 80099ec:	aa20      	add	r2, sp, #128	; 0x80
 80099ee:	a91f      	add	r1, sp, #124	; 0x7c
 80099f0:	4620      	mov	r0, r4
 80099f2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80099f6:	f002 fb63 	bl	800c0c0 <__d2b>
 80099fa:	901e      	str	r0, [sp, #120]	; 0x78
 80099fc:	2800      	cmp	r0, #0
 80099fe:	f43f aefb 	beq.w	80097f8 <_strtod_l+0x498>
 8009a02:	2101      	movs	r1, #1
 8009a04:	4620      	mov	r0, r4
 8009a06:	f002 f8b9 	bl	800bb7c <__i2b>
 8009a0a:	4606      	mov	r6, r0
 8009a0c:	2800      	cmp	r0, #0
 8009a0e:	f43f aef3 	beq.w	80097f8 <_strtod_l+0x498>
 8009a12:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009a14:	9904      	ldr	r1, [sp, #16]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	bfab      	itete	ge
 8009a1a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8009a1c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8009a1e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8009a20:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8009a24:	bfac      	ite	ge
 8009a26:	eb03 0902 	addge.w	r9, r3, r2
 8009a2a:	1ad7      	sublt	r7, r2, r3
 8009a2c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009a2e:	eba3 0801 	sub.w	r8, r3, r1
 8009a32:	4490      	add	r8, r2
 8009a34:	4ba3      	ldr	r3, [pc, #652]	; (8009cc4 <_strtod_l+0x964>)
 8009a36:	f108 38ff 	add.w	r8, r8, #4294967295
 8009a3a:	4598      	cmp	r8, r3
 8009a3c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009a40:	f280 80cc 	bge.w	8009bdc <_strtod_l+0x87c>
 8009a44:	eba3 0308 	sub.w	r3, r3, r8
 8009a48:	2b1f      	cmp	r3, #31
 8009a4a:	eba2 0203 	sub.w	r2, r2, r3
 8009a4e:	f04f 0101 	mov.w	r1, #1
 8009a52:	f300 80b6 	bgt.w	8009bc2 <_strtod_l+0x862>
 8009a56:	fa01 f303 	lsl.w	r3, r1, r3
 8009a5a:	9311      	str	r3, [sp, #68]	; 0x44
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	930c      	str	r3, [sp, #48]	; 0x30
 8009a60:	eb09 0802 	add.w	r8, r9, r2
 8009a64:	9b04      	ldr	r3, [sp, #16]
 8009a66:	45c1      	cmp	r9, r8
 8009a68:	4417      	add	r7, r2
 8009a6a:	441f      	add	r7, r3
 8009a6c:	464b      	mov	r3, r9
 8009a6e:	bfa8      	it	ge
 8009a70:	4643      	movge	r3, r8
 8009a72:	42bb      	cmp	r3, r7
 8009a74:	bfa8      	it	ge
 8009a76:	463b      	movge	r3, r7
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	bfc2      	ittt	gt
 8009a7c:	eba8 0803 	subgt.w	r8, r8, r3
 8009a80:	1aff      	subgt	r7, r7, r3
 8009a82:	eba9 0903 	subgt.w	r9, r9, r3
 8009a86:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	dd17      	ble.n	8009abc <_strtod_l+0x75c>
 8009a8c:	4631      	mov	r1, r6
 8009a8e:	461a      	mov	r2, r3
 8009a90:	4620      	mov	r0, r4
 8009a92:	f002 f92f 	bl	800bcf4 <__pow5mult>
 8009a96:	4606      	mov	r6, r0
 8009a98:	2800      	cmp	r0, #0
 8009a9a:	f43f aead 	beq.w	80097f8 <_strtod_l+0x498>
 8009a9e:	4601      	mov	r1, r0
 8009aa0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009aa2:	4620      	mov	r0, r4
 8009aa4:	f002 f880 	bl	800bba8 <__multiply>
 8009aa8:	900f      	str	r0, [sp, #60]	; 0x3c
 8009aaa:	2800      	cmp	r0, #0
 8009aac:	f43f aea4 	beq.w	80097f8 <_strtod_l+0x498>
 8009ab0:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009ab2:	4620      	mov	r0, r4
 8009ab4:	f001 ff5c 	bl	800b970 <_Bfree>
 8009ab8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009aba:	931e      	str	r3, [sp, #120]	; 0x78
 8009abc:	f1b8 0f00 	cmp.w	r8, #0
 8009ac0:	f300 8091 	bgt.w	8009be6 <_strtod_l+0x886>
 8009ac4:	9b08      	ldr	r3, [sp, #32]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	dd08      	ble.n	8009adc <_strtod_l+0x77c>
 8009aca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009acc:	9907      	ldr	r1, [sp, #28]
 8009ace:	4620      	mov	r0, r4
 8009ad0:	f002 f910 	bl	800bcf4 <__pow5mult>
 8009ad4:	9007      	str	r0, [sp, #28]
 8009ad6:	2800      	cmp	r0, #0
 8009ad8:	f43f ae8e 	beq.w	80097f8 <_strtod_l+0x498>
 8009adc:	2f00      	cmp	r7, #0
 8009ade:	dd08      	ble.n	8009af2 <_strtod_l+0x792>
 8009ae0:	9907      	ldr	r1, [sp, #28]
 8009ae2:	463a      	mov	r2, r7
 8009ae4:	4620      	mov	r0, r4
 8009ae6:	f002 f95f 	bl	800bda8 <__lshift>
 8009aea:	9007      	str	r0, [sp, #28]
 8009aec:	2800      	cmp	r0, #0
 8009aee:	f43f ae83 	beq.w	80097f8 <_strtod_l+0x498>
 8009af2:	f1b9 0f00 	cmp.w	r9, #0
 8009af6:	dd08      	ble.n	8009b0a <_strtod_l+0x7aa>
 8009af8:	4631      	mov	r1, r6
 8009afa:	464a      	mov	r2, r9
 8009afc:	4620      	mov	r0, r4
 8009afe:	f002 f953 	bl	800bda8 <__lshift>
 8009b02:	4606      	mov	r6, r0
 8009b04:	2800      	cmp	r0, #0
 8009b06:	f43f ae77 	beq.w	80097f8 <_strtod_l+0x498>
 8009b0a:	9a07      	ldr	r2, [sp, #28]
 8009b0c:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009b0e:	4620      	mov	r0, r4
 8009b10:	f002 f9d2 	bl	800beb8 <__mdiff>
 8009b14:	4605      	mov	r5, r0
 8009b16:	2800      	cmp	r0, #0
 8009b18:	f43f ae6e 	beq.w	80097f8 <_strtod_l+0x498>
 8009b1c:	68c3      	ldr	r3, [r0, #12]
 8009b1e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009b20:	2300      	movs	r3, #0
 8009b22:	60c3      	str	r3, [r0, #12]
 8009b24:	4631      	mov	r1, r6
 8009b26:	f002 f9ab 	bl	800be80 <__mcmp>
 8009b2a:	2800      	cmp	r0, #0
 8009b2c:	da65      	bge.n	8009bfa <_strtod_l+0x89a>
 8009b2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009b30:	ea53 030a 	orrs.w	r3, r3, sl
 8009b34:	f040 8087 	bne.w	8009c46 <_strtod_l+0x8e6>
 8009b38:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	f040 8082 	bne.w	8009c46 <_strtod_l+0x8e6>
 8009b42:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009b46:	0d1b      	lsrs	r3, r3, #20
 8009b48:	051b      	lsls	r3, r3, #20
 8009b4a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009b4e:	d97a      	bls.n	8009c46 <_strtod_l+0x8e6>
 8009b50:	696b      	ldr	r3, [r5, #20]
 8009b52:	b913      	cbnz	r3, 8009b5a <_strtod_l+0x7fa>
 8009b54:	692b      	ldr	r3, [r5, #16]
 8009b56:	2b01      	cmp	r3, #1
 8009b58:	dd75      	ble.n	8009c46 <_strtod_l+0x8e6>
 8009b5a:	4629      	mov	r1, r5
 8009b5c:	2201      	movs	r2, #1
 8009b5e:	4620      	mov	r0, r4
 8009b60:	f002 f922 	bl	800bda8 <__lshift>
 8009b64:	4631      	mov	r1, r6
 8009b66:	4605      	mov	r5, r0
 8009b68:	f002 f98a 	bl	800be80 <__mcmp>
 8009b6c:	2800      	cmp	r0, #0
 8009b6e:	dd6a      	ble.n	8009c46 <_strtod_l+0x8e6>
 8009b70:	9904      	ldr	r1, [sp, #16]
 8009b72:	4a55      	ldr	r2, [pc, #340]	; (8009cc8 <_strtod_l+0x968>)
 8009b74:	465b      	mov	r3, fp
 8009b76:	2900      	cmp	r1, #0
 8009b78:	f000 8085 	beq.w	8009c86 <_strtod_l+0x926>
 8009b7c:	ea02 010b 	and.w	r1, r2, fp
 8009b80:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009b84:	dc7f      	bgt.n	8009c86 <_strtod_l+0x926>
 8009b86:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009b8a:	f77f aeaa 	ble.w	80098e2 <_strtod_l+0x582>
 8009b8e:	4a4f      	ldr	r2, [pc, #316]	; (8009ccc <_strtod_l+0x96c>)
 8009b90:	2300      	movs	r3, #0
 8009b92:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8009b96:	4650      	mov	r0, sl
 8009b98:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8009b9c:	4659      	mov	r1, fp
 8009b9e:	f7f6 fd2b 	bl	80005f8 <__aeabi_dmul>
 8009ba2:	460b      	mov	r3, r1
 8009ba4:	4303      	orrs	r3, r0
 8009ba6:	bf08      	it	eq
 8009ba8:	2322      	moveq	r3, #34	; 0x22
 8009baa:	4682      	mov	sl, r0
 8009bac:	468b      	mov	fp, r1
 8009bae:	bf08      	it	eq
 8009bb0:	6023      	streq	r3, [r4, #0]
 8009bb2:	e62b      	b.n	800980c <_strtod_l+0x4ac>
 8009bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8009bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8009bbc:	ea03 0a0a 	and.w	sl, r3, sl
 8009bc0:	e6de      	b.n	8009980 <_strtod_l+0x620>
 8009bc2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8009bc6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8009bca:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8009bce:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8009bd2:	fa01 f308 	lsl.w	r3, r1, r8
 8009bd6:	930c      	str	r3, [sp, #48]	; 0x30
 8009bd8:	9111      	str	r1, [sp, #68]	; 0x44
 8009bda:	e741      	b.n	8009a60 <_strtod_l+0x700>
 8009bdc:	2300      	movs	r3, #0
 8009bde:	930c      	str	r3, [sp, #48]	; 0x30
 8009be0:	2301      	movs	r3, #1
 8009be2:	9311      	str	r3, [sp, #68]	; 0x44
 8009be4:	e73c      	b.n	8009a60 <_strtod_l+0x700>
 8009be6:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009be8:	4642      	mov	r2, r8
 8009bea:	4620      	mov	r0, r4
 8009bec:	f002 f8dc 	bl	800bda8 <__lshift>
 8009bf0:	901e      	str	r0, [sp, #120]	; 0x78
 8009bf2:	2800      	cmp	r0, #0
 8009bf4:	f47f af66 	bne.w	8009ac4 <_strtod_l+0x764>
 8009bf8:	e5fe      	b.n	80097f8 <_strtod_l+0x498>
 8009bfa:	465f      	mov	r7, fp
 8009bfc:	d16e      	bne.n	8009cdc <_strtod_l+0x97c>
 8009bfe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009c00:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009c04:	b342      	cbz	r2, 8009c58 <_strtod_l+0x8f8>
 8009c06:	4a32      	ldr	r2, [pc, #200]	; (8009cd0 <_strtod_l+0x970>)
 8009c08:	4293      	cmp	r3, r2
 8009c0a:	d128      	bne.n	8009c5e <_strtod_l+0x8fe>
 8009c0c:	9b04      	ldr	r3, [sp, #16]
 8009c0e:	4650      	mov	r0, sl
 8009c10:	b1eb      	cbz	r3, 8009c4e <_strtod_l+0x8ee>
 8009c12:	4a2d      	ldr	r2, [pc, #180]	; (8009cc8 <_strtod_l+0x968>)
 8009c14:	403a      	ands	r2, r7
 8009c16:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8009c1a:	f04f 31ff 	mov.w	r1, #4294967295
 8009c1e:	d819      	bhi.n	8009c54 <_strtod_l+0x8f4>
 8009c20:	0d12      	lsrs	r2, r2, #20
 8009c22:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009c26:	fa01 f303 	lsl.w	r3, r1, r3
 8009c2a:	4298      	cmp	r0, r3
 8009c2c:	d117      	bne.n	8009c5e <_strtod_l+0x8fe>
 8009c2e:	4b29      	ldr	r3, [pc, #164]	; (8009cd4 <_strtod_l+0x974>)
 8009c30:	429f      	cmp	r7, r3
 8009c32:	d102      	bne.n	8009c3a <_strtod_l+0x8da>
 8009c34:	3001      	adds	r0, #1
 8009c36:	f43f addf 	beq.w	80097f8 <_strtod_l+0x498>
 8009c3a:	4b23      	ldr	r3, [pc, #140]	; (8009cc8 <_strtod_l+0x968>)
 8009c3c:	403b      	ands	r3, r7
 8009c3e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009c42:	f04f 0a00 	mov.w	sl, #0
 8009c46:	9b04      	ldr	r3, [sp, #16]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d1a0      	bne.n	8009b8e <_strtod_l+0x82e>
 8009c4c:	e5de      	b.n	800980c <_strtod_l+0x4ac>
 8009c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8009c52:	e7ea      	b.n	8009c2a <_strtod_l+0x8ca>
 8009c54:	460b      	mov	r3, r1
 8009c56:	e7e8      	b.n	8009c2a <_strtod_l+0x8ca>
 8009c58:	ea53 030a 	orrs.w	r3, r3, sl
 8009c5c:	d088      	beq.n	8009b70 <_strtod_l+0x810>
 8009c5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009c60:	b1db      	cbz	r3, 8009c9a <_strtod_l+0x93a>
 8009c62:	423b      	tst	r3, r7
 8009c64:	d0ef      	beq.n	8009c46 <_strtod_l+0x8e6>
 8009c66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009c68:	9a04      	ldr	r2, [sp, #16]
 8009c6a:	4650      	mov	r0, sl
 8009c6c:	4659      	mov	r1, fp
 8009c6e:	b1c3      	cbz	r3, 8009ca2 <_strtod_l+0x942>
 8009c70:	f7ff fb59 	bl	8009326 <sulp>
 8009c74:	4602      	mov	r2, r0
 8009c76:	460b      	mov	r3, r1
 8009c78:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009c7c:	f7f6 fb06 	bl	800028c <__adddf3>
 8009c80:	4682      	mov	sl, r0
 8009c82:	468b      	mov	fp, r1
 8009c84:	e7df      	b.n	8009c46 <_strtod_l+0x8e6>
 8009c86:	4013      	ands	r3, r2
 8009c88:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009c8c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009c90:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009c94:	f04f 3aff 	mov.w	sl, #4294967295
 8009c98:	e7d5      	b.n	8009c46 <_strtod_l+0x8e6>
 8009c9a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009c9c:	ea13 0f0a 	tst.w	r3, sl
 8009ca0:	e7e0      	b.n	8009c64 <_strtod_l+0x904>
 8009ca2:	f7ff fb40 	bl	8009326 <sulp>
 8009ca6:	4602      	mov	r2, r0
 8009ca8:	460b      	mov	r3, r1
 8009caa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009cae:	f7f6 faeb 	bl	8000288 <__aeabi_dsub>
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	4682      	mov	sl, r0
 8009cb8:	468b      	mov	fp, r1
 8009cba:	f7f6 ff05 	bl	8000ac8 <__aeabi_dcmpeq>
 8009cbe:	2800      	cmp	r0, #0
 8009cc0:	d0c1      	beq.n	8009c46 <_strtod_l+0x8e6>
 8009cc2:	e60e      	b.n	80098e2 <_strtod_l+0x582>
 8009cc4:	fffffc02 	.word	0xfffffc02
 8009cc8:	7ff00000 	.word	0x7ff00000
 8009ccc:	39500000 	.word	0x39500000
 8009cd0:	000fffff 	.word	0x000fffff
 8009cd4:	7fefffff 	.word	0x7fefffff
 8009cd8:	0800e1c0 	.word	0x0800e1c0
 8009cdc:	4631      	mov	r1, r6
 8009cde:	4628      	mov	r0, r5
 8009ce0:	f002 fa4a 	bl	800c178 <__ratio>
 8009ce4:	ec59 8b10 	vmov	r8, r9, d0
 8009ce8:	ee10 0a10 	vmov	r0, s0
 8009cec:	2200      	movs	r2, #0
 8009cee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009cf2:	4649      	mov	r1, r9
 8009cf4:	f7f6 fefc 	bl	8000af0 <__aeabi_dcmple>
 8009cf8:	2800      	cmp	r0, #0
 8009cfa:	d07c      	beq.n	8009df6 <_strtod_l+0xa96>
 8009cfc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d04c      	beq.n	8009d9c <_strtod_l+0xa3c>
 8009d02:	4b95      	ldr	r3, [pc, #596]	; (8009f58 <_strtod_l+0xbf8>)
 8009d04:	2200      	movs	r2, #0
 8009d06:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8009d0a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009f58 <_strtod_l+0xbf8>
 8009d0e:	f04f 0800 	mov.w	r8, #0
 8009d12:	4b92      	ldr	r3, [pc, #584]	; (8009f5c <_strtod_l+0xbfc>)
 8009d14:	403b      	ands	r3, r7
 8009d16:	9311      	str	r3, [sp, #68]	; 0x44
 8009d18:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009d1a:	4b91      	ldr	r3, [pc, #580]	; (8009f60 <_strtod_l+0xc00>)
 8009d1c:	429a      	cmp	r2, r3
 8009d1e:	f040 80b2 	bne.w	8009e86 <_strtod_l+0xb26>
 8009d22:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009d26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009d2a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8009d2e:	ec4b ab10 	vmov	d0, sl, fp
 8009d32:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8009d36:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009d3a:	f002 f945 	bl	800bfc8 <__ulp>
 8009d3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009d42:	ec53 2b10 	vmov	r2, r3, d0
 8009d46:	f7f6 fc57 	bl	80005f8 <__aeabi_dmul>
 8009d4a:	4652      	mov	r2, sl
 8009d4c:	465b      	mov	r3, fp
 8009d4e:	f7f6 fa9d 	bl	800028c <__adddf3>
 8009d52:	460b      	mov	r3, r1
 8009d54:	4981      	ldr	r1, [pc, #516]	; (8009f5c <_strtod_l+0xbfc>)
 8009d56:	4a83      	ldr	r2, [pc, #524]	; (8009f64 <_strtod_l+0xc04>)
 8009d58:	4019      	ands	r1, r3
 8009d5a:	4291      	cmp	r1, r2
 8009d5c:	4682      	mov	sl, r0
 8009d5e:	d95e      	bls.n	8009e1e <_strtod_l+0xabe>
 8009d60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d62:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009d66:	4293      	cmp	r3, r2
 8009d68:	d103      	bne.n	8009d72 <_strtod_l+0xa12>
 8009d6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d6c:	3301      	adds	r3, #1
 8009d6e:	f43f ad43 	beq.w	80097f8 <_strtod_l+0x498>
 8009d72:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8009f70 <_strtod_l+0xc10>
 8009d76:	f04f 3aff 	mov.w	sl, #4294967295
 8009d7a:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009d7c:	4620      	mov	r0, r4
 8009d7e:	f001 fdf7 	bl	800b970 <_Bfree>
 8009d82:	9907      	ldr	r1, [sp, #28]
 8009d84:	4620      	mov	r0, r4
 8009d86:	f001 fdf3 	bl	800b970 <_Bfree>
 8009d8a:	4631      	mov	r1, r6
 8009d8c:	4620      	mov	r0, r4
 8009d8e:	f001 fdef 	bl	800b970 <_Bfree>
 8009d92:	4629      	mov	r1, r5
 8009d94:	4620      	mov	r0, r4
 8009d96:	f001 fdeb 	bl	800b970 <_Bfree>
 8009d9a:	e613      	b.n	80099c4 <_strtod_l+0x664>
 8009d9c:	f1ba 0f00 	cmp.w	sl, #0
 8009da0:	d11b      	bne.n	8009dda <_strtod_l+0xa7a>
 8009da2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009da6:	b9f3      	cbnz	r3, 8009de6 <_strtod_l+0xa86>
 8009da8:	4b6b      	ldr	r3, [pc, #428]	; (8009f58 <_strtod_l+0xbf8>)
 8009daa:	2200      	movs	r2, #0
 8009dac:	4640      	mov	r0, r8
 8009dae:	4649      	mov	r1, r9
 8009db0:	f7f6 fe94 	bl	8000adc <__aeabi_dcmplt>
 8009db4:	b9d0      	cbnz	r0, 8009dec <_strtod_l+0xa8c>
 8009db6:	4640      	mov	r0, r8
 8009db8:	4649      	mov	r1, r9
 8009dba:	4b6b      	ldr	r3, [pc, #428]	; (8009f68 <_strtod_l+0xc08>)
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	f7f6 fc1b 	bl	80005f8 <__aeabi_dmul>
 8009dc2:	4680      	mov	r8, r0
 8009dc4:	4689      	mov	r9, r1
 8009dc6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009dca:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8009dce:	931b      	str	r3, [sp, #108]	; 0x6c
 8009dd0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8009dd4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8009dd8:	e79b      	b.n	8009d12 <_strtod_l+0x9b2>
 8009dda:	f1ba 0f01 	cmp.w	sl, #1
 8009dde:	d102      	bne.n	8009de6 <_strtod_l+0xa86>
 8009de0:	2f00      	cmp	r7, #0
 8009de2:	f43f ad7e 	beq.w	80098e2 <_strtod_l+0x582>
 8009de6:	4b61      	ldr	r3, [pc, #388]	; (8009f6c <_strtod_l+0xc0c>)
 8009de8:	2200      	movs	r2, #0
 8009dea:	e78c      	b.n	8009d06 <_strtod_l+0x9a6>
 8009dec:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009f68 <_strtod_l+0xc08>
 8009df0:	f04f 0800 	mov.w	r8, #0
 8009df4:	e7e7      	b.n	8009dc6 <_strtod_l+0xa66>
 8009df6:	4b5c      	ldr	r3, [pc, #368]	; (8009f68 <_strtod_l+0xc08>)
 8009df8:	4640      	mov	r0, r8
 8009dfa:	4649      	mov	r1, r9
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	f7f6 fbfb 	bl	80005f8 <__aeabi_dmul>
 8009e02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009e04:	4680      	mov	r8, r0
 8009e06:	4689      	mov	r9, r1
 8009e08:	b933      	cbnz	r3, 8009e18 <_strtod_l+0xab8>
 8009e0a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009e0e:	9012      	str	r0, [sp, #72]	; 0x48
 8009e10:	9313      	str	r3, [sp, #76]	; 0x4c
 8009e12:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8009e16:	e7dd      	b.n	8009dd4 <_strtod_l+0xa74>
 8009e18:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8009e1c:	e7f9      	b.n	8009e12 <_strtod_l+0xab2>
 8009e1e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8009e22:	9b04      	ldr	r3, [sp, #16]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d1a8      	bne.n	8009d7a <_strtod_l+0xa1a>
 8009e28:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009e2c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009e2e:	0d1b      	lsrs	r3, r3, #20
 8009e30:	051b      	lsls	r3, r3, #20
 8009e32:	429a      	cmp	r2, r3
 8009e34:	d1a1      	bne.n	8009d7a <_strtod_l+0xa1a>
 8009e36:	4640      	mov	r0, r8
 8009e38:	4649      	mov	r1, r9
 8009e3a:	f7f6 ff3d 	bl	8000cb8 <__aeabi_d2lz>
 8009e3e:	f7f6 fbad 	bl	800059c <__aeabi_l2d>
 8009e42:	4602      	mov	r2, r0
 8009e44:	460b      	mov	r3, r1
 8009e46:	4640      	mov	r0, r8
 8009e48:	4649      	mov	r1, r9
 8009e4a:	f7f6 fa1d 	bl	8000288 <__aeabi_dsub>
 8009e4e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009e50:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009e54:	ea43 030a 	orr.w	r3, r3, sl
 8009e58:	4313      	orrs	r3, r2
 8009e5a:	4680      	mov	r8, r0
 8009e5c:	4689      	mov	r9, r1
 8009e5e:	d053      	beq.n	8009f08 <_strtod_l+0xba8>
 8009e60:	a335      	add	r3, pc, #212	; (adr r3, 8009f38 <_strtod_l+0xbd8>)
 8009e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e66:	f7f6 fe39 	bl	8000adc <__aeabi_dcmplt>
 8009e6a:	2800      	cmp	r0, #0
 8009e6c:	f47f acce 	bne.w	800980c <_strtod_l+0x4ac>
 8009e70:	a333      	add	r3, pc, #204	; (adr r3, 8009f40 <_strtod_l+0xbe0>)
 8009e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e76:	4640      	mov	r0, r8
 8009e78:	4649      	mov	r1, r9
 8009e7a:	f7f6 fe4d 	bl	8000b18 <__aeabi_dcmpgt>
 8009e7e:	2800      	cmp	r0, #0
 8009e80:	f43f af7b 	beq.w	8009d7a <_strtod_l+0xa1a>
 8009e84:	e4c2      	b.n	800980c <_strtod_l+0x4ac>
 8009e86:	9b04      	ldr	r3, [sp, #16]
 8009e88:	b333      	cbz	r3, 8009ed8 <_strtod_l+0xb78>
 8009e8a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009e8c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009e90:	d822      	bhi.n	8009ed8 <_strtod_l+0xb78>
 8009e92:	a32d      	add	r3, pc, #180	; (adr r3, 8009f48 <_strtod_l+0xbe8>)
 8009e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e98:	4640      	mov	r0, r8
 8009e9a:	4649      	mov	r1, r9
 8009e9c:	f7f6 fe28 	bl	8000af0 <__aeabi_dcmple>
 8009ea0:	b1a0      	cbz	r0, 8009ecc <_strtod_l+0xb6c>
 8009ea2:	4649      	mov	r1, r9
 8009ea4:	4640      	mov	r0, r8
 8009ea6:	f7f6 fe7f 	bl	8000ba8 <__aeabi_d2uiz>
 8009eaa:	2801      	cmp	r0, #1
 8009eac:	bf38      	it	cc
 8009eae:	2001      	movcc	r0, #1
 8009eb0:	f7f6 fb28 	bl	8000504 <__aeabi_ui2d>
 8009eb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009eb6:	4680      	mov	r8, r0
 8009eb8:	4689      	mov	r9, r1
 8009eba:	bb13      	cbnz	r3, 8009f02 <_strtod_l+0xba2>
 8009ebc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009ec0:	9014      	str	r0, [sp, #80]	; 0x50
 8009ec2:	9315      	str	r3, [sp, #84]	; 0x54
 8009ec4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009ec8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8009ecc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ece:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009ed0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009ed4:	1a9b      	subs	r3, r3, r2
 8009ed6:	930d      	str	r3, [sp, #52]	; 0x34
 8009ed8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009edc:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009ee0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009ee4:	f002 f870 	bl	800bfc8 <__ulp>
 8009ee8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009eec:	ec53 2b10 	vmov	r2, r3, d0
 8009ef0:	f7f6 fb82 	bl	80005f8 <__aeabi_dmul>
 8009ef4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009ef8:	f7f6 f9c8 	bl	800028c <__adddf3>
 8009efc:	4682      	mov	sl, r0
 8009efe:	468b      	mov	fp, r1
 8009f00:	e78f      	b.n	8009e22 <_strtod_l+0xac2>
 8009f02:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8009f06:	e7dd      	b.n	8009ec4 <_strtod_l+0xb64>
 8009f08:	a311      	add	r3, pc, #68	; (adr r3, 8009f50 <_strtod_l+0xbf0>)
 8009f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f0e:	f7f6 fde5 	bl	8000adc <__aeabi_dcmplt>
 8009f12:	e7b4      	b.n	8009e7e <_strtod_l+0xb1e>
 8009f14:	2300      	movs	r3, #0
 8009f16:	930e      	str	r3, [sp, #56]	; 0x38
 8009f18:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009f1a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009f1c:	6013      	str	r3, [r2, #0]
 8009f1e:	f7ff ba65 	b.w	80093ec <_strtod_l+0x8c>
 8009f22:	2b65      	cmp	r3, #101	; 0x65
 8009f24:	f43f ab5d 	beq.w	80095e2 <_strtod_l+0x282>
 8009f28:	2b45      	cmp	r3, #69	; 0x45
 8009f2a:	f43f ab5a 	beq.w	80095e2 <_strtod_l+0x282>
 8009f2e:	2201      	movs	r2, #1
 8009f30:	f7ff bb92 	b.w	8009658 <_strtod_l+0x2f8>
 8009f34:	f3af 8000 	nop.w
 8009f38:	94a03595 	.word	0x94a03595
 8009f3c:	3fdfffff 	.word	0x3fdfffff
 8009f40:	35afe535 	.word	0x35afe535
 8009f44:	3fe00000 	.word	0x3fe00000
 8009f48:	ffc00000 	.word	0xffc00000
 8009f4c:	41dfffff 	.word	0x41dfffff
 8009f50:	94a03595 	.word	0x94a03595
 8009f54:	3fcfffff 	.word	0x3fcfffff
 8009f58:	3ff00000 	.word	0x3ff00000
 8009f5c:	7ff00000 	.word	0x7ff00000
 8009f60:	7fe00000 	.word	0x7fe00000
 8009f64:	7c9fffff 	.word	0x7c9fffff
 8009f68:	3fe00000 	.word	0x3fe00000
 8009f6c:	bff00000 	.word	0xbff00000
 8009f70:	7fefffff 	.word	0x7fefffff

08009f74 <_strtod_r>:
 8009f74:	4b01      	ldr	r3, [pc, #4]	; (8009f7c <_strtod_r+0x8>)
 8009f76:	f7ff b9f3 	b.w	8009360 <_strtod_l>
 8009f7a:	bf00      	nop
 8009f7c:	2000007c 	.word	0x2000007c

08009f80 <strtod>:
 8009f80:	460a      	mov	r2, r1
 8009f82:	4601      	mov	r1, r0
 8009f84:	4802      	ldr	r0, [pc, #8]	; (8009f90 <strtod+0x10>)
 8009f86:	4b03      	ldr	r3, [pc, #12]	; (8009f94 <strtod+0x14>)
 8009f88:	6800      	ldr	r0, [r0, #0]
 8009f8a:	f7ff b9e9 	b.w	8009360 <_strtod_l>
 8009f8e:	bf00      	nop
 8009f90:	20000014 	.word	0x20000014
 8009f94:	2000007c 	.word	0x2000007c

08009f98 <_strtol_l.isra.0>:
 8009f98:	2b01      	cmp	r3, #1
 8009f9a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f9e:	d001      	beq.n	8009fa4 <_strtol_l.isra.0+0xc>
 8009fa0:	2b24      	cmp	r3, #36	; 0x24
 8009fa2:	d906      	bls.n	8009fb2 <_strtol_l.isra.0+0x1a>
 8009fa4:	f7fe f9e2 	bl	800836c <__errno>
 8009fa8:	2316      	movs	r3, #22
 8009faa:	6003      	str	r3, [r0, #0]
 8009fac:	2000      	movs	r0, #0
 8009fae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fb2:	4f3a      	ldr	r7, [pc, #232]	; (800a09c <_strtol_l.isra.0+0x104>)
 8009fb4:	468e      	mov	lr, r1
 8009fb6:	4676      	mov	r6, lr
 8009fb8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8009fbc:	5de5      	ldrb	r5, [r4, r7]
 8009fbe:	f015 0508 	ands.w	r5, r5, #8
 8009fc2:	d1f8      	bne.n	8009fb6 <_strtol_l.isra.0+0x1e>
 8009fc4:	2c2d      	cmp	r4, #45	; 0x2d
 8009fc6:	d134      	bne.n	800a032 <_strtol_l.isra.0+0x9a>
 8009fc8:	f89e 4000 	ldrb.w	r4, [lr]
 8009fcc:	f04f 0801 	mov.w	r8, #1
 8009fd0:	f106 0e02 	add.w	lr, r6, #2
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d05c      	beq.n	800a092 <_strtol_l.isra.0+0xfa>
 8009fd8:	2b10      	cmp	r3, #16
 8009fda:	d10c      	bne.n	8009ff6 <_strtol_l.isra.0+0x5e>
 8009fdc:	2c30      	cmp	r4, #48	; 0x30
 8009fde:	d10a      	bne.n	8009ff6 <_strtol_l.isra.0+0x5e>
 8009fe0:	f89e 4000 	ldrb.w	r4, [lr]
 8009fe4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009fe8:	2c58      	cmp	r4, #88	; 0x58
 8009fea:	d14d      	bne.n	800a088 <_strtol_l.isra.0+0xf0>
 8009fec:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8009ff0:	2310      	movs	r3, #16
 8009ff2:	f10e 0e02 	add.w	lr, lr, #2
 8009ff6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8009ffa:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009ffe:	2600      	movs	r6, #0
 800a000:	fbbc f9f3 	udiv	r9, ip, r3
 800a004:	4635      	mov	r5, r6
 800a006:	fb03 ca19 	mls	sl, r3, r9, ip
 800a00a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800a00e:	2f09      	cmp	r7, #9
 800a010:	d818      	bhi.n	800a044 <_strtol_l.isra.0+0xac>
 800a012:	463c      	mov	r4, r7
 800a014:	42a3      	cmp	r3, r4
 800a016:	dd24      	ble.n	800a062 <_strtol_l.isra.0+0xca>
 800a018:	2e00      	cmp	r6, #0
 800a01a:	db1f      	blt.n	800a05c <_strtol_l.isra.0+0xc4>
 800a01c:	45a9      	cmp	r9, r5
 800a01e:	d31d      	bcc.n	800a05c <_strtol_l.isra.0+0xc4>
 800a020:	d101      	bne.n	800a026 <_strtol_l.isra.0+0x8e>
 800a022:	45a2      	cmp	sl, r4
 800a024:	db1a      	blt.n	800a05c <_strtol_l.isra.0+0xc4>
 800a026:	fb05 4503 	mla	r5, r5, r3, r4
 800a02a:	2601      	movs	r6, #1
 800a02c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800a030:	e7eb      	b.n	800a00a <_strtol_l.isra.0+0x72>
 800a032:	2c2b      	cmp	r4, #43	; 0x2b
 800a034:	bf08      	it	eq
 800a036:	f89e 4000 	ldrbeq.w	r4, [lr]
 800a03a:	46a8      	mov	r8, r5
 800a03c:	bf08      	it	eq
 800a03e:	f106 0e02 	addeq.w	lr, r6, #2
 800a042:	e7c7      	b.n	8009fd4 <_strtol_l.isra.0+0x3c>
 800a044:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800a048:	2f19      	cmp	r7, #25
 800a04a:	d801      	bhi.n	800a050 <_strtol_l.isra.0+0xb8>
 800a04c:	3c37      	subs	r4, #55	; 0x37
 800a04e:	e7e1      	b.n	800a014 <_strtol_l.isra.0+0x7c>
 800a050:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800a054:	2f19      	cmp	r7, #25
 800a056:	d804      	bhi.n	800a062 <_strtol_l.isra.0+0xca>
 800a058:	3c57      	subs	r4, #87	; 0x57
 800a05a:	e7db      	b.n	800a014 <_strtol_l.isra.0+0x7c>
 800a05c:	f04f 36ff 	mov.w	r6, #4294967295
 800a060:	e7e4      	b.n	800a02c <_strtol_l.isra.0+0x94>
 800a062:	2e00      	cmp	r6, #0
 800a064:	da05      	bge.n	800a072 <_strtol_l.isra.0+0xda>
 800a066:	2322      	movs	r3, #34	; 0x22
 800a068:	6003      	str	r3, [r0, #0]
 800a06a:	4665      	mov	r5, ip
 800a06c:	b942      	cbnz	r2, 800a080 <_strtol_l.isra.0+0xe8>
 800a06e:	4628      	mov	r0, r5
 800a070:	e79d      	b.n	8009fae <_strtol_l.isra.0+0x16>
 800a072:	f1b8 0f00 	cmp.w	r8, #0
 800a076:	d000      	beq.n	800a07a <_strtol_l.isra.0+0xe2>
 800a078:	426d      	negs	r5, r5
 800a07a:	2a00      	cmp	r2, #0
 800a07c:	d0f7      	beq.n	800a06e <_strtol_l.isra.0+0xd6>
 800a07e:	b10e      	cbz	r6, 800a084 <_strtol_l.isra.0+0xec>
 800a080:	f10e 31ff 	add.w	r1, lr, #4294967295
 800a084:	6011      	str	r1, [r2, #0]
 800a086:	e7f2      	b.n	800a06e <_strtol_l.isra.0+0xd6>
 800a088:	2430      	movs	r4, #48	; 0x30
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d1b3      	bne.n	8009ff6 <_strtol_l.isra.0+0x5e>
 800a08e:	2308      	movs	r3, #8
 800a090:	e7b1      	b.n	8009ff6 <_strtol_l.isra.0+0x5e>
 800a092:	2c30      	cmp	r4, #48	; 0x30
 800a094:	d0a4      	beq.n	8009fe0 <_strtol_l.isra.0+0x48>
 800a096:	230a      	movs	r3, #10
 800a098:	e7ad      	b.n	8009ff6 <_strtol_l.isra.0+0x5e>
 800a09a:	bf00      	nop
 800a09c:	0800e1e9 	.word	0x0800e1e9

0800a0a0 <_strtol_r>:
 800a0a0:	f7ff bf7a 	b.w	8009f98 <_strtol_l.isra.0>

0800a0a4 <quorem>:
 800a0a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0a8:	6903      	ldr	r3, [r0, #16]
 800a0aa:	690c      	ldr	r4, [r1, #16]
 800a0ac:	42a3      	cmp	r3, r4
 800a0ae:	4607      	mov	r7, r0
 800a0b0:	f2c0 8081 	blt.w	800a1b6 <quorem+0x112>
 800a0b4:	3c01      	subs	r4, #1
 800a0b6:	f101 0814 	add.w	r8, r1, #20
 800a0ba:	f100 0514 	add.w	r5, r0, #20
 800a0be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a0c2:	9301      	str	r3, [sp, #4]
 800a0c4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a0c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a0cc:	3301      	adds	r3, #1
 800a0ce:	429a      	cmp	r2, r3
 800a0d0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a0d4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a0d8:	fbb2 f6f3 	udiv	r6, r2, r3
 800a0dc:	d331      	bcc.n	800a142 <quorem+0x9e>
 800a0de:	f04f 0e00 	mov.w	lr, #0
 800a0e2:	4640      	mov	r0, r8
 800a0e4:	46ac      	mov	ip, r5
 800a0e6:	46f2      	mov	sl, lr
 800a0e8:	f850 2b04 	ldr.w	r2, [r0], #4
 800a0ec:	b293      	uxth	r3, r2
 800a0ee:	fb06 e303 	mla	r3, r6, r3, lr
 800a0f2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a0f6:	b29b      	uxth	r3, r3
 800a0f8:	ebaa 0303 	sub.w	r3, sl, r3
 800a0fc:	0c12      	lsrs	r2, r2, #16
 800a0fe:	f8dc a000 	ldr.w	sl, [ip]
 800a102:	fb06 e202 	mla	r2, r6, r2, lr
 800a106:	fa13 f38a 	uxtah	r3, r3, sl
 800a10a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a10e:	fa1f fa82 	uxth.w	sl, r2
 800a112:	f8dc 2000 	ldr.w	r2, [ip]
 800a116:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800a11a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a11e:	b29b      	uxth	r3, r3
 800a120:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a124:	4581      	cmp	r9, r0
 800a126:	f84c 3b04 	str.w	r3, [ip], #4
 800a12a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a12e:	d2db      	bcs.n	800a0e8 <quorem+0x44>
 800a130:	f855 300b 	ldr.w	r3, [r5, fp]
 800a134:	b92b      	cbnz	r3, 800a142 <quorem+0x9e>
 800a136:	9b01      	ldr	r3, [sp, #4]
 800a138:	3b04      	subs	r3, #4
 800a13a:	429d      	cmp	r5, r3
 800a13c:	461a      	mov	r2, r3
 800a13e:	d32e      	bcc.n	800a19e <quorem+0xfa>
 800a140:	613c      	str	r4, [r7, #16]
 800a142:	4638      	mov	r0, r7
 800a144:	f001 fe9c 	bl	800be80 <__mcmp>
 800a148:	2800      	cmp	r0, #0
 800a14a:	db24      	blt.n	800a196 <quorem+0xf2>
 800a14c:	3601      	adds	r6, #1
 800a14e:	4628      	mov	r0, r5
 800a150:	f04f 0c00 	mov.w	ip, #0
 800a154:	f858 2b04 	ldr.w	r2, [r8], #4
 800a158:	f8d0 e000 	ldr.w	lr, [r0]
 800a15c:	b293      	uxth	r3, r2
 800a15e:	ebac 0303 	sub.w	r3, ip, r3
 800a162:	0c12      	lsrs	r2, r2, #16
 800a164:	fa13 f38e 	uxtah	r3, r3, lr
 800a168:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a16c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a170:	b29b      	uxth	r3, r3
 800a172:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a176:	45c1      	cmp	r9, r8
 800a178:	f840 3b04 	str.w	r3, [r0], #4
 800a17c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a180:	d2e8      	bcs.n	800a154 <quorem+0xb0>
 800a182:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a186:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a18a:	b922      	cbnz	r2, 800a196 <quorem+0xf2>
 800a18c:	3b04      	subs	r3, #4
 800a18e:	429d      	cmp	r5, r3
 800a190:	461a      	mov	r2, r3
 800a192:	d30a      	bcc.n	800a1aa <quorem+0x106>
 800a194:	613c      	str	r4, [r7, #16]
 800a196:	4630      	mov	r0, r6
 800a198:	b003      	add	sp, #12
 800a19a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a19e:	6812      	ldr	r2, [r2, #0]
 800a1a0:	3b04      	subs	r3, #4
 800a1a2:	2a00      	cmp	r2, #0
 800a1a4:	d1cc      	bne.n	800a140 <quorem+0x9c>
 800a1a6:	3c01      	subs	r4, #1
 800a1a8:	e7c7      	b.n	800a13a <quorem+0x96>
 800a1aa:	6812      	ldr	r2, [r2, #0]
 800a1ac:	3b04      	subs	r3, #4
 800a1ae:	2a00      	cmp	r2, #0
 800a1b0:	d1f0      	bne.n	800a194 <quorem+0xf0>
 800a1b2:	3c01      	subs	r4, #1
 800a1b4:	e7eb      	b.n	800a18e <quorem+0xea>
 800a1b6:	2000      	movs	r0, #0
 800a1b8:	e7ee      	b.n	800a198 <quorem+0xf4>
 800a1ba:	0000      	movs	r0, r0
 800a1bc:	0000      	movs	r0, r0
	...

0800a1c0 <_dtoa_r>:
 800a1c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1c4:	ed2d 8b02 	vpush	{d8}
 800a1c8:	ec57 6b10 	vmov	r6, r7, d0
 800a1cc:	b095      	sub	sp, #84	; 0x54
 800a1ce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a1d0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a1d4:	9105      	str	r1, [sp, #20]
 800a1d6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800a1da:	4604      	mov	r4, r0
 800a1dc:	9209      	str	r2, [sp, #36]	; 0x24
 800a1de:	930f      	str	r3, [sp, #60]	; 0x3c
 800a1e0:	b975      	cbnz	r5, 800a200 <_dtoa_r+0x40>
 800a1e2:	2010      	movs	r0, #16
 800a1e4:	f001 fb6a 	bl	800b8bc <malloc>
 800a1e8:	4602      	mov	r2, r0
 800a1ea:	6260      	str	r0, [r4, #36]	; 0x24
 800a1ec:	b920      	cbnz	r0, 800a1f8 <_dtoa_r+0x38>
 800a1ee:	4bb2      	ldr	r3, [pc, #712]	; (800a4b8 <_dtoa_r+0x2f8>)
 800a1f0:	21ea      	movs	r1, #234	; 0xea
 800a1f2:	48b2      	ldr	r0, [pc, #712]	; (800a4bc <_dtoa_r+0x2fc>)
 800a1f4:	f002 fce4 	bl	800cbc0 <__assert_func>
 800a1f8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a1fc:	6005      	str	r5, [r0, #0]
 800a1fe:	60c5      	str	r5, [r0, #12]
 800a200:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a202:	6819      	ldr	r1, [r3, #0]
 800a204:	b151      	cbz	r1, 800a21c <_dtoa_r+0x5c>
 800a206:	685a      	ldr	r2, [r3, #4]
 800a208:	604a      	str	r2, [r1, #4]
 800a20a:	2301      	movs	r3, #1
 800a20c:	4093      	lsls	r3, r2
 800a20e:	608b      	str	r3, [r1, #8]
 800a210:	4620      	mov	r0, r4
 800a212:	f001 fbad 	bl	800b970 <_Bfree>
 800a216:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a218:	2200      	movs	r2, #0
 800a21a:	601a      	str	r2, [r3, #0]
 800a21c:	1e3b      	subs	r3, r7, #0
 800a21e:	bfb9      	ittee	lt
 800a220:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a224:	9303      	strlt	r3, [sp, #12]
 800a226:	2300      	movge	r3, #0
 800a228:	f8c8 3000 	strge.w	r3, [r8]
 800a22c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800a230:	4ba3      	ldr	r3, [pc, #652]	; (800a4c0 <_dtoa_r+0x300>)
 800a232:	bfbc      	itt	lt
 800a234:	2201      	movlt	r2, #1
 800a236:	f8c8 2000 	strlt.w	r2, [r8]
 800a23a:	ea33 0309 	bics.w	r3, r3, r9
 800a23e:	d11b      	bne.n	800a278 <_dtoa_r+0xb8>
 800a240:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a242:	f242 730f 	movw	r3, #9999	; 0x270f
 800a246:	6013      	str	r3, [r2, #0]
 800a248:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a24c:	4333      	orrs	r3, r6
 800a24e:	f000 857a 	beq.w	800ad46 <_dtoa_r+0xb86>
 800a252:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a254:	b963      	cbnz	r3, 800a270 <_dtoa_r+0xb0>
 800a256:	4b9b      	ldr	r3, [pc, #620]	; (800a4c4 <_dtoa_r+0x304>)
 800a258:	e024      	b.n	800a2a4 <_dtoa_r+0xe4>
 800a25a:	4b9b      	ldr	r3, [pc, #620]	; (800a4c8 <_dtoa_r+0x308>)
 800a25c:	9300      	str	r3, [sp, #0]
 800a25e:	3308      	adds	r3, #8
 800a260:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a262:	6013      	str	r3, [r2, #0]
 800a264:	9800      	ldr	r0, [sp, #0]
 800a266:	b015      	add	sp, #84	; 0x54
 800a268:	ecbd 8b02 	vpop	{d8}
 800a26c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a270:	4b94      	ldr	r3, [pc, #592]	; (800a4c4 <_dtoa_r+0x304>)
 800a272:	9300      	str	r3, [sp, #0]
 800a274:	3303      	adds	r3, #3
 800a276:	e7f3      	b.n	800a260 <_dtoa_r+0xa0>
 800a278:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a27c:	2200      	movs	r2, #0
 800a27e:	ec51 0b17 	vmov	r0, r1, d7
 800a282:	2300      	movs	r3, #0
 800a284:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800a288:	f7f6 fc1e 	bl	8000ac8 <__aeabi_dcmpeq>
 800a28c:	4680      	mov	r8, r0
 800a28e:	b158      	cbz	r0, 800a2a8 <_dtoa_r+0xe8>
 800a290:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a292:	2301      	movs	r3, #1
 800a294:	6013      	str	r3, [r2, #0]
 800a296:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a298:	2b00      	cmp	r3, #0
 800a29a:	f000 8551 	beq.w	800ad40 <_dtoa_r+0xb80>
 800a29e:	488b      	ldr	r0, [pc, #556]	; (800a4cc <_dtoa_r+0x30c>)
 800a2a0:	6018      	str	r0, [r3, #0]
 800a2a2:	1e43      	subs	r3, r0, #1
 800a2a4:	9300      	str	r3, [sp, #0]
 800a2a6:	e7dd      	b.n	800a264 <_dtoa_r+0xa4>
 800a2a8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a2ac:	aa12      	add	r2, sp, #72	; 0x48
 800a2ae:	a913      	add	r1, sp, #76	; 0x4c
 800a2b0:	4620      	mov	r0, r4
 800a2b2:	f001 ff05 	bl	800c0c0 <__d2b>
 800a2b6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a2ba:	4683      	mov	fp, r0
 800a2bc:	2d00      	cmp	r5, #0
 800a2be:	d07c      	beq.n	800a3ba <_dtoa_r+0x1fa>
 800a2c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2c2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800a2c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a2ca:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800a2ce:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a2d2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a2d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a2da:	4b7d      	ldr	r3, [pc, #500]	; (800a4d0 <_dtoa_r+0x310>)
 800a2dc:	2200      	movs	r2, #0
 800a2de:	4630      	mov	r0, r6
 800a2e0:	4639      	mov	r1, r7
 800a2e2:	f7f5 ffd1 	bl	8000288 <__aeabi_dsub>
 800a2e6:	a36e      	add	r3, pc, #440	; (adr r3, 800a4a0 <_dtoa_r+0x2e0>)
 800a2e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ec:	f7f6 f984 	bl	80005f8 <__aeabi_dmul>
 800a2f0:	a36d      	add	r3, pc, #436	; (adr r3, 800a4a8 <_dtoa_r+0x2e8>)
 800a2f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2f6:	f7f5 ffc9 	bl	800028c <__adddf3>
 800a2fa:	4606      	mov	r6, r0
 800a2fc:	4628      	mov	r0, r5
 800a2fe:	460f      	mov	r7, r1
 800a300:	f7f6 f910 	bl	8000524 <__aeabi_i2d>
 800a304:	a36a      	add	r3, pc, #424	; (adr r3, 800a4b0 <_dtoa_r+0x2f0>)
 800a306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a30a:	f7f6 f975 	bl	80005f8 <__aeabi_dmul>
 800a30e:	4602      	mov	r2, r0
 800a310:	460b      	mov	r3, r1
 800a312:	4630      	mov	r0, r6
 800a314:	4639      	mov	r1, r7
 800a316:	f7f5 ffb9 	bl	800028c <__adddf3>
 800a31a:	4606      	mov	r6, r0
 800a31c:	460f      	mov	r7, r1
 800a31e:	f7f6 fc1b 	bl	8000b58 <__aeabi_d2iz>
 800a322:	2200      	movs	r2, #0
 800a324:	4682      	mov	sl, r0
 800a326:	2300      	movs	r3, #0
 800a328:	4630      	mov	r0, r6
 800a32a:	4639      	mov	r1, r7
 800a32c:	f7f6 fbd6 	bl	8000adc <__aeabi_dcmplt>
 800a330:	b148      	cbz	r0, 800a346 <_dtoa_r+0x186>
 800a332:	4650      	mov	r0, sl
 800a334:	f7f6 f8f6 	bl	8000524 <__aeabi_i2d>
 800a338:	4632      	mov	r2, r6
 800a33a:	463b      	mov	r3, r7
 800a33c:	f7f6 fbc4 	bl	8000ac8 <__aeabi_dcmpeq>
 800a340:	b908      	cbnz	r0, 800a346 <_dtoa_r+0x186>
 800a342:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a346:	f1ba 0f16 	cmp.w	sl, #22
 800a34a:	d854      	bhi.n	800a3f6 <_dtoa_r+0x236>
 800a34c:	4b61      	ldr	r3, [pc, #388]	; (800a4d4 <_dtoa_r+0x314>)
 800a34e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a352:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a356:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a35a:	f7f6 fbbf 	bl	8000adc <__aeabi_dcmplt>
 800a35e:	2800      	cmp	r0, #0
 800a360:	d04b      	beq.n	800a3fa <_dtoa_r+0x23a>
 800a362:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a366:	2300      	movs	r3, #0
 800a368:	930e      	str	r3, [sp, #56]	; 0x38
 800a36a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a36c:	1b5d      	subs	r5, r3, r5
 800a36e:	1e6b      	subs	r3, r5, #1
 800a370:	9304      	str	r3, [sp, #16]
 800a372:	bf43      	ittte	mi
 800a374:	2300      	movmi	r3, #0
 800a376:	f1c5 0801 	rsbmi	r8, r5, #1
 800a37a:	9304      	strmi	r3, [sp, #16]
 800a37c:	f04f 0800 	movpl.w	r8, #0
 800a380:	f1ba 0f00 	cmp.w	sl, #0
 800a384:	db3b      	blt.n	800a3fe <_dtoa_r+0x23e>
 800a386:	9b04      	ldr	r3, [sp, #16]
 800a388:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800a38c:	4453      	add	r3, sl
 800a38e:	9304      	str	r3, [sp, #16]
 800a390:	2300      	movs	r3, #0
 800a392:	9306      	str	r3, [sp, #24]
 800a394:	9b05      	ldr	r3, [sp, #20]
 800a396:	2b09      	cmp	r3, #9
 800a398:	d869      	bhi.n	800a46e <_dtoa_r+0x2ae>
 800a39a:	2b05      	cmp	r3, #5
 800a39c:	bfc4      	itt	gt
 800a39e:	3b04      	subgt	r3, #4
 800a3a0:	9305      	strgt	r3, [sp, #20]
 800a3a2:	9b05      	ldr	r3, [sp, #20]
 800a3a4:	f1a3 0302 	sub.w	r3, r3, #2
 800a3a8:	bfcc      	ite	gt
 800a3aa:	2500      	movgt	r5, #0
 800a3ac:	2501      	movle	r5, #1
 800a3ae:	2b03      	cmp	r3, #3
 800a3b0:	d869      	bhi.n	800a486 <_dtoa_r+0x2c6>
 800a3b2:	e8df f003 	tbb	[pc, r3]
 800a3b6:	4e2c      	.short	0x4e2c
 800a3b8:	5a4c      	.short	0x5a4c
 800a3ba:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800a3be:	441d      	add	r5, r3
 800a3c0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a3c4:	2b20      	cmp	r3, #32
 800a3c6:	bfc1      	itttt	gt
 800a3c8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a3cc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a3d0:	fa09 f303 	lslgt.w	r3, r9, r3
 800a3d4:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a3d8:	bfda      	itte	le
 800a3da:	f1c3 0320 	rsble	r3, r3, #32
 800a3de:	fa06 f003 	lslle.w	r0, r6, r3
 800a3e2:	4318      	orrgt	r0, r3
 800a3e4:	f7f6 f88e 	bl	8000504 <__aeabi_ui2d>
 800a3e8:	2301      	movs	r3, #1
 800a3ea:	4606      	mov	r6, r0
 800a3ec:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a3f0:	3d01      	subs	r5, #1
 800a3f2:	9310      	str	r3, [sp, #64]	; 0x40
 800a3f4:	e771      	b.n	800a2da <_dtoa_r+0x11a>
 800a3f6:	2301      	movs	r3, #1
 800a3f8:	e7b6      	b.n	800a368 <_dtoa_r+0x1a8>
 800a3fa:	900e      	str	r0, [sp, #56]	; 0x38
 800a3fc:	e7b5      	b.n	800a36a <_dtoa_r+0x1aa>
 800a3fe:	f1ca 0300 	rsb	r3, sl, #0
 800a402:	9306      	str	r3, [sp, #24]
 800a404:	2300      	movs	r3, #0
 800a406:	eba8 080a 	sub.w	r8, r8, sl
 800a40a:	930d      	str	r3, [sp, #52]	; 0x34
 800a40c:	e7c2      	b.n	800a394 <_dtoa_r+0x1d4>
 800a40e:	2300      	movs	r3, #0
 800a410:	9308      	str	r3, [sp, #32]
 800a412:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a414:	2b00      	cmp	r3, #0
 800a416:	dc39      	bgt.n	800a48c <_dtoa_r+0x2cc>
 800a418:	f04f 0901 	mov.w	r9, #1
 800a41c:	f8cd 9004 	str.w	r9, [sp, #4]
 800a420:	464b      	mov	r3, r9
 800a422:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a426:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a428:	2200      	movs	r2, #0
 800a42a:	6042      	str	r2, [r0, #4]
 800a42c:	2204      	movs	r2, #4
 800a42e:	f102 0614 	add.w	r6, r2, #20
 800a432:	429e      	cmp	r6, r3
 800a434:	6841      	ldr	r1, [r0, #4]
 800a436:	d92f      	bls.n	800a498 <_dtoa_r+0x2d8>
 800a438:	4620      	mov	r0, r4
 800a43a:	f001 fa59 	bl	800b8f0 <_Balloc>
 800a43e:	9000      	str	r0, [sp, #0]
 800a440:	2800      	cmp	r0, #0
 800a442:	d14b      	bne.n	800a4dc <_dtoa_r+0x31c>
 800a444:	4b24      	ldr	r3, [pc, #144]	; (800a4d8 <_dtoa_r+0x318>)
 800a446:	4602      	mov	r2, r0
 800a448:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a44c:	e6d1      	b.n	800a1f2 <_dtoa_r+0x32>
 800a44e:	2301      	movs	r3, #1
 800a450:	e7de      	b.n	800a410 <_dtoa_r+0x250>
 800a452:	2300      	movs	r3, #0
 800a454:	9308      	str	r3, [sp, #32]
 800a456:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a458:	eb0a 0903 	add.w	r9, sl, r3
 800a45c:	f109 0301 	add.w	r3, r9, #1
 800a460:	2b01      	cmp	r3, #1
 800a462:	9301      	str	r3, [sp, #4]
 800a464:	bfb8      	it	lt
 800a466:	2301      	movlt	r3, #1
 800a468:	e7dd      	b.n	800a426 <_dtoa_r+0x266>
 800a46a:	2301      	movs	r3, #1
 800a46c:	e7f2      	b.n	800a454 <_dtoa_r+0x294>
 800a46e:	2501      	movs	r5, #1
 800a470:	2300      	movs	r3, #0
 800a472:	9305      	str	r3, [sp, #20]
 800a474:	9508      	str	r5, [sp, #32]
 800a476:	f04f 39ff 	mov.w	r9, #4294967295
 800a47a:	2200      	movs	r2, #0
 800a47c:	f8cd 9004 	str.w	r9, [sp, #4]
 800a480:	2312      	movs	r3, #18
 800a482:	9209      	str	r2, [sp, #36]	; 0x24
 800a484:	e7cf      	b.n	800a426 <_dtoa_r+0x266>
 800a486:	2301      	movs	r3, #1
 800a488:	9308      	str	r3, [sp, #32]
 800a48a:	e7f4      	b.n	800a476 <_dtoa_r+0x2b6>
 800a48c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800a490:	f8cd 9004 	str.w	r9, [sp, #4]
 800a494:	464b      	mov	r3, r9
 800a496:	e7c6      	b.n	800a426 <_dtoa_r+0x266>
 800a498:	3101      	adds	r1, #1
 800a49a:	6041      	str	r1, [r0, #4]
 800a49c:	0052      	lsls	r2, r2, #1
 800a49e:	e7c6      	b.n	800a42e <_dtoa_r+0x26e>
 800a4a0:	636f4361 	.word	0x636f4361
 800a4a4:	3fd287a7 	.word	0x3fd287a7
 800a4a8:	8b60c8b3 	.word	0x8b60c8b3
 800a4ac:	3fc68a28 	.word	0x3fc68a28
 800a4b0:	509f79fb 	.word	0x509f79fb
 800a4b4:	3fd34413 	.word	0x3fd34413
 800a4b8:	0800e2f6 	.word	0x0800e2f6
 800a4bc:	0800e30d 	.word	0x0800e30d
 800a4c0:	7ff00000 	.word	0x7ff00000
 800a4c4:	0800e2f2 	.word	0x0800e2f2
 800a4c8:	0800e2e9 	.word	0x0800e2e9
 800a4cc:	0800e16d 	.word	0x0800e16d
 800a4d0:	3ff80000 	.word	0x3ff80000
 800a4d4:	0800e4e8 	.word	0x0800e4e8
 800a4d8:	0800e36c 	.word	0x0800e36c
 800a4dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a4de:	9a00      	ldr	r2, [sp, #0]
 800a4e0:	601a      	str	r2, [r3, #0]
 800a4e2:	9b01      	ldr	r3, [sp, #4]
 800a4e4:	2b0e      	cmp	r3, #14
 800a4e6:	f200 80ad 	bhi.w	800a644 <_dtoa_r+0x484>
 800a4ea:	2d00      	cmp	r5, #0
 800a4ec:	f000 80aa 	beq.w	800a644 <_dtoa_r+0x484>
 800a4f0:	f1ba 0f00 	cmp.w	sl, #0
 800a4f4:	dd36      	ble.n	800a564 <_dtoa_r+0x3a4>
 800a4f6:	4ac3      	ldr	r2, [pc, #780]	; (800a804 <_dtoa_r+0x644>)
 800a4f8:	f00a 030f 	and.w	r3, sl, #15
 800a4fc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a500:	ed93 7b00 	vldr	d7, [r3]
 800a504:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a508:	ea4f 172a 	mov.w	r7, sl, asr #4
 800a50c:	eeb0 8a47 	vmov.f32	s16, s14
 800a510:	eef0 8a67 	vmov.f32	s17, s15
 800a514:	d016      	beq.n	800a544 <_dtoa_r+0x384>
 800a516:	4bbc      	ldr	r3, [pc, #752]	; (800a808 <_dtoa_r+0x648>)
 800a518:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a51c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a520:	f7f6 f994 	bl	800084c <__aeabi_ddiv>
 800a524:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a528:	f007 070f 	and.w	r7, r7, #15
 800a52c:	2503      	movs	r5, #3
 800a52e:	4eb6      	ldr	r6, [pc, #728]	; (800a808 <_dtoa_r+0x648>)
 800a530:	b957      	cbnz	r7, 800a548 <_dtoa_r+0x388>
 800a532:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a536:	ec53 2b18 	vmov	r2, r3, d8
 800a53a:	f7f6 f987 	bl	800084c <__aeabi_ddiv>
 800a53e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a542:	e029      	b.n	800a598 <_dtoa_r+0x3d8>
 800a544:	2502      	movs	r5, #2
 800a546:	e7f2      	b.n	800a52e <_dtoa_r+0x36e>
 800a548:	07f9      	lsls	r1, r7, #31
 800a54a:	d508      	bpl.n	800a55e <_dtoa_r+0x39e>
 800a54c:	ec51 0b18 	vmov	r0, r1, d8
 800a550:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a554:	f7f6 f850 	bl	80005f8 <__aeabi_dmul>
 800a558:	ec41 0b18 	vmov	d8, r0, r1
 800a55c:	3501      	adds	r5, #1
 800a55e:	107f      	asrs	r7, r7, #1
 800a560:	3608      	adds	r6, #8
 800a562:	e7e5      	b.n	800a530 <_dtoa_r+0x370>
 800a564:	f000 80a6 	beq.w	800a6b4 <_dtoa_r+0x4f4>
 800a568:	f1ca 0600 	rsb	r6, sl, #0
 800a56c:	4ba5      	ldr	r3, [pc, #660]	; (800a804 <_dtoa_r+0x644>)
 800a56e:	4fa6      	ldr	r7, [pc, #664]	; (800a808 <_dtoa_r+0x648>)
 800a570:	f006 020f 	and.w	r2, r6, #15
 800a574:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a57c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a580:	f7f6 f83a 	bl	80005f8 <__aeabi_dmul>
 800a584:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a588:	1136      	asrs	r6, r6, #4
 800a58a:	2300      	movs	r3, #0
 800a58c:	2502      	movs	r5, #2
 800a58e:	2e00      	cmp	r6, #0
 800a590:	f040 8085 	bne.w	800a69e <_dtoa_r+0x4de>
 800a594:	2b00      	cmp	r3, #0
 800a596:	d1d2      	bne.n	800a53e <_dtoa_r+0x37e>
 800a598:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	f000 808c 	beq.w	800a6b8 <_dtoa_r+0x4f8>
 800a5a0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a5a4:	4b99      	ldr	r3, [pc, #612]	; (800a80c <_dtoa_r+0x64c>)
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	4630      	mov	r0, r6
 800a5aa:	4639      	mov	r1, r7
 800a5ac:	f7f6 fa96 	bl	8000adc <__aeabi_dcmplt>
 800a5b0:	2800      	cmp	r0, #0
 800a5b2:	f000 8081 	beq.w	800a6b8 <_dtoa_r+0x4f8>
 800a5b6:	9b01      	ldr	r3, [sp, #4]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d07d      	beq.n	800a6b8 <_dtoa_r+0x4f8>
 800a5bc:	f1b9 0f00 	cmp.w	r9, #0
 800a5c0:	dd3c      	ble.n	800a63c <_dtoa_r+0x47c>
 800a5c2:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a5c6:	9307      	str	r3, [sp, #28]
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	4b91      	ldr	r3, [pc, #580]	; (800a810 <_dtoa_r+0x650>)
 800a5cc:	4630      	mov	r0, r6
 800a5ce:	4639      	mov	r1, r7
 800a5d0:	f7f6 f812 	bl	80005f8 <__aeabi_dmul>
 800a5d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a5d8:	3501      	adds	r5, #1
 800a5da:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800a5de:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a5e2:	4628      	mov	r0, r5
 800a5e4:	f7f5 ff9e 	bl	8000524 <__aeabi_i2d>
 800a5e8:	4632      	mov	r2, r6
 800a5ea:	463b      	mov	r3, r7
 800a5ec:	f7f6 f804 	bl	80005f8 <__aeabi_dmul>
 800a5f0:	4b88      	ldr	r3, [pc, #544]	; (800a814 <_dtoa_r+0x654>)
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	f7f5 fe4a 	bl	800028c <__adddf3>
 800a5f8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a5fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a600:	9303      	str	r3, [sp, #12]
 800a602:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a604:	2b00      	cmp	r3, #0
 800a606:	d15c      	bne.n	800a6c2 <_dtoa_r+0x502>
 800a608:	4b83      	ldr	r3, [pc, #524]	; (800a818 <_dtoa_r+0x658>)
 800a60a:	2200      	movs	r2, #0
 800a60c:	4630      	mov	r0, r6
 800a60e:	4639      	mov	r1, r7
 800a610:	f7f5 fe3a 	bl	8000288 <__aeabi_dsub>
 800a614:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a618:	4606      	mov	r6, r0
 800a61a:	460f      	mov	r7, r1
 800a61c:	f7f6 fa7c 	bl	8000b18 <__aeabi_dcmpgt>
 800a620:	2800      	cmp	r0, #0
 800a622:	f040 8296 	bne.w	800ab52 <_dtoa_r+0x992>
 800a626:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a62a:	4630      	mov	r0, r6
 800a62c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a630:	4639      	mov	r1, r7
 800a632:	f7f6 fa53 	bl	8000adc <__aeabi_dcmplt>
 800a636:	2800      	cmp	r0, #0
 800a638:	f040 8288 	bne.w	800ab4c <_dtoa_r+0x98c>
 800a63c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a640:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a644:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a646:	2b00      	cmp	r3, #0
 800a648:	f2c0 8158 	blt.w	800a8fc <_dtoa_r+0x73c>
 800a64c:	f1ba 0f0e 	cmp.w	sl, #14
 800a650:	f300 8154 	bgt.w	800a8fc <_dtoa_r+0x73c>
 800a654:	4b6b      	ldr	r3, [pc, #428]	; (800a804 <_dtoa_r+0x644>)
 800a656:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a65a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a65e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a660:	2b00      	cmp	r3, #0
 800a662:	f280 80e3 	bge.w	800a82c <_dtoa_r+0x66c>
 800a666:	9b01      	ldr	r3, [sp, #4]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	f300 80df 	bgt.w	800a82c <_dtoa_r+0x66c>
 800a66e:	f040 826d 	bne.w	800ab4c <_dtoa_r+0x98c>
 800a672:	4b69      	ldr	r3, [pc, #420]	; (800a818 <_dtoa_r+0x658>)
 800a674:	2200      	movs	r2, #0
 800a676:	4640      	mov	r0, r8
 800a678:	4649      	mov	r1, r9
 800a67a:	f7f5 ffbd 	bl	80005f8 <__aeabi_dmul>
 800a67e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a682:	f7f6 fa3f 	bl	8000b04 <__aeabi_dcmpge>
 800a686:	9e01      	ldr	r6, [sp, #4]
 800a688:	4637      	mov	r7, r6
 800a68a:	2800      	cmp	r0, #0
 800a68c:	f040 8243 	bne.w	800ab16 <_dtoa_r+0x956>
 800a690:	9d00      	ldr	r5, [sp, #0]
 800a692:	2331      	movs	r3, #49	; 0x31
 800a694:	f805 3b01 	strb.w	r3, [r5], #1
 800a698:	f10a 0a01 	add.w	sl, sl, #1
 800a69c:	e23f      	b.n	800ab1e <_dtoa_r+0x95e>
 800a69e:	07f2      	lsls	r2, r6, #31
 800a6a0:	d505      	bpl.n	800a6ae <_dtoa_r+0x4ee>
 800a6a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a6a6:	f7f5 ffa7 	bl	80005f8 <__aeabi_dmul>
 800a6aa:	3501      	adds	r5, #1
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	1076      	asrs	r6, r6, #1
 800a6b0:	3708      	adds	r7, #8
 800a6b2:	e76c      	b.n	800a58e <_dtoa_r+0x3ce>
 800a6b4:	2502      	movs	r5, #2
 800a6b6:	e76f      	b.n	800a598 <_dtoa_r+0x3d8>
 800a6b8:	9b01      	ldr	r3, [sp, #4]
 800a6ba:	f8cd a01c 	str.w	sl, [sp, #28]
 800a6be:	930c      	str	r3, [sp, #48]	; 0x30
 800a6c0:	e78d      	b.n	800a5de <_dtoa_r+0x41e>
 800a6c2:	9900      	ldr	r1, [sp, #0]
 800a6c4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a6c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a6c8:	4b4e      	ldr	r3, [pc, #312]	; (800a804 <_dtoa_r+0x644>)
 800a6ca:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a6ce:	4401      	add	r1, r0
 800a6d0:	9102      	str	r1, [sp, #8]
 800a6d2:	9908      	ldr	r1, [sp, #32]
 800a6d4:	eeb0 8a47 	vmov.f32	s16, s14
 800a6d8:	eef0 8a67 	vmov.f32	s17, s15
 800a6dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a6e0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a6e4:	2900      	cmp	r1, #0
 800a6e6:	d045      	beq.n	800a774 <_dtoa_r+0x5b4>
 800a6e8:	494c      	ldr	r1, [pc, #304]	; (800a81c <_dtoa_r+0x65c>)
 800a6ea:	2000      	movs	r0, #0
 800a6ec:	f7f6 f8ae 	bl	800084c <__aeabi_ddiv>
 800a6f0:	ec53 2b18 	vmov	r2, r3, d8
 800a6f4:	f7f5 fdc8 	bl	8000288 <__aeabi_dsub>
 800a6f8:	9d00      	ldr	r5, [sp, #0]
 800a6fa:	ec41 0b18 	vmov	d8, r0, r1
 800a6fe:	4639      	mov	r1, r7
 800a700:	4630      	mov	r0, r6
 800a702:	f7f6 fa29 	bl	8000b58 <__aeabi_d2iz>
 800a706:	900c      	str	r0, [sp, #48]	; 0x30
 800a708:	f7f5 ff0c 	bl	8000524 <__aeabi_i2d>
 800a70c:	4602      	mov	r2, r0
 800a70e:	460b      	mov	r3, r1
 800a710:	4630      	mov	r0, r6
 800a712:	4639      	mov	r1, r7
 800a714:	f7f5 fdb8 	bl	8000288 <__aeabi_dsub>
 800a718:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a71a:	3330      	adds	r3, #48	; 0x30
 800a71c:	f805 3b01 	strb.w	r3, [r5], #1
 800a720:	ec53 2b18 	vmov	r2, r3, d8
 800a724:	4606      	mov	r6, r0
 800a726:	460f      	mov	r7, r1
 800a728:	f7f6 f9d8 	bl	8000adc <__aeabi_dcmplt>
 800a72c:	2800      	cmp	r0, #0
 800a72e:	d165      	bne.n	800a7fc <_dtoa_r+0x63c>
 800a730:	4632      	mov	r2, r6
 800a732:	463b      	mov	r3, r7
 800a734:	4935      	ldr	r1, [pc, #212]	; (800a80c <_dtoa_r+0x64c>)
 800a736:	2000      	movs	r0, #0
 800a738:	f7f5 fda6 	bl	8000288 <__aeabi_dsub>
 800a73c:	ec53 2b18 	vmov	r2, r3, d8
 800a740:	f7f6 f9cc 	bl	8000adc <__aeabi_dcmplt>
 800a744:	2800      	cmp	r0, #0
 800a746:	f040 80b9 	bne.w	800a8bc <_dtoa_r+0x6fc>
 800a74a:	9b02      	ldr	r3, [sp, #8]
 800a74c:	429d      	cmp	r5, r3
 800a74e:	f43f af75 	beq.w	800a63c <_dtoa_r+0x47c>
 800a752:	4b2f      	ldr	r3, [pc, #188]	; (800a810 <_dtoa_r+0x650>)
 800a754:	ec51 0b18 	vmov	r0, r1, d8
 800a758:	2200      	movs	r2, #0
 800a75a:	f7f5 ff4d 	bl	80005f8 <__aeabi_dmul>
 800a75e:	4b2c      	ldr	r3, [pc, #176]	; (800a810 <_dtoa_r+0x650>)
 800a760:	ec41 0b18 	vmov	d8, r0, r1
 800a764:	2200      	movs	r2, #0
 800a766:	4630      	mov	r0, r6
 800a768:	4639      	mov	r1, r7
 800a76a:	f7f5 ff45 	bl	80005f8 <__aeabi_dmul>
 800a76e:	4606      	mov	r6, r0
 800a770:	460f      	mov	r7, r1
 800a772:	e7c4      	b.n	800a6fe <_dtoa_r+0x53e>
 800a774:	ec51 0b17 	vmov	r0, r1, d7
 800a778:	f7f5 ff3e 	bl	80005f8 <__aeabi_dmul>
 800a77c:	9b02      	ldr	r3, [sp, #8]
 800a77e:	9d00      	ldr	r5, [sp, #0]
 800a780:	930c      	str	r3, [sp, #48]	; 0x30
 800a782:	ec41 0b18 	vmov	d8, r0, r1
 800a786:	4639      	mov	r1, r7
 800a788:	4630      	mov	r0, r6
 800a78a:	f7f6 f9e5 	bl	8000b58 <__aeabi_d2iz>
 800a78e:	9011      	str	r0, [sp, #68]	; 0x44
 800a790:	f7f5 fec8 	bl	8000524 <__aeabi_i2d>
 800a794:	4602      	mov	r2, r0
 800a796:	460b      	mov	r3, r1
 800a798:	4630      	mov	r0, r6
 800a79a:	4639      	mov	r1, r7
 800a79c:	f7f5 fd74 	bl	8000288 <__aeabi_dsub>
 800a7a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a7a2:	3330      	adds	r3, #48	; 0x30
 800a7a4:	f805 3b01 	strb.w	r3, [r5], #1
 800a7a8:	9b02      	ldr	r3, [sp, #8]
 800a7aa:	429d      	cmp	r5, r3
 800a7ac:	4606      	mov	r6, r0
 800a7ae:	460f      	mov	r7, r1
 800a7b0:	f04f 0200 	mov.w	r2, #0
 800a7b4:	d134      	bne.n	800a820 <_dtoa_r+0x660>
 800a7b6:	4b19      	ldr	r3, [pc, #100]	; (800a81c <_dtoa_r+0x65c>)
 800a7b8:	ec51 0b18 	vmov	r0, r1, d8
 800a7bc:	f7f5 fd66 	bl	800028c <__adddf3>
 800a7c0:	4602      	mov	r2, r0
 800a7c2:	460b      	mov	r3, r1
 800a7c4:	4630      	mov	r0, r6
 800a7c6:	4639      	mov	r1, r7
 800a7c8:	f7f6 f9a6 	bl	8000b18 <__aeabi_dcmpgt>
 800a7cc:	2800      	cmp	r0, #0
 800a7ce:	d175      	bne.n	800a8bc <_dtoa_r+0x6fc>
 800a7d0:	ec53 2b18 	vmov	r2, r3, d8
 800a7d4:	4911      	ldr	r1, [pc, #68]	; (800a81c <_dtoa_r+0x65c>)
 800a7d6:	2000      	movs	r0, #0
 800a7d8:	f7f5 fd56 	bl	8000288 <__aeabi_dsub>
 800a7dc:	4602      	mov	r2, r0
 800a7de:	460b      	mov	r3, r1
 800a7e0:	4630      	mov	r0, r6
 800a7e2:	4639      	mov	r1, r7
 800a7e4:	f7f6 f97a 	bl	8000adc <__aeabi_dcmplt>
 800a7e8:	2800      	cmp	r0, #0
 800a7ea:	f43f af27 	beq.w	800a63c <_dtoa_r+0x47c>
 800a7ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a7f0:	1e6b      	subs	r3, r5, #1
 800a7f2:	930c      	str	r3, [sp, #48]	; 0x30
 800a7f4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a7f8:	2b30      	cmp	r3, #48	; 0x30
 800a7fa:	d0f8      	beq.n	800a7ee <_dtoa_r+0x62e>
 800a7fc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a800:	e04a      	b.n	800a898 <_dtoa_r+0x6d8>
 800a802:	bf00      	nop
 800a804:	0800e4e8 	.word	0x0800e4e8
 800a808:	0800e4c0 	.word	0x0800e4c0
 800a80c:	3ff00000 	.word	0x3ff00000
 800a810:	40240000 	.word	0x40240000
 800a814:	401c0000 	.word	0x401c0000
 800a818:	40140000 	.word	0x40140000
 800a81c:	3fe00000 	.word	0x3fe00000
 800a820:	4baf      	ldr	r3, [pc, #700]	; (800aae0 <_dtoa_r+0x920>)
 800a822:	f7f5 fee9 	bl	80005f8 <__aeabi_dmul>
 800a826:	4606      	mov	r6, r0
 800a828:	460f      	mov	r7, r1
 800a82a:	e7ac      	b.n	800a786 <_dtoa_r+0x5c6>
 800a82c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a830:	9d00      	ldr	r5, [sp, #0]
 800a832:	4642      	mov	r2, r8
 800a834:	464b      	mov	r3, r9
 800a836:	4630      	mov	r0, r6
 800a838:	4639      	mov	r1, r7
 800a83a:	f7f6 f807 	bl	800084c <__aeabi_ddiv>
 800a83e:	f7f6 f98b 	bl	8000b58 <__aeabi_d2iz>
 800a842:	9002      	str	r0, [sp, #8]
 800a844:	f7f5 fe6e 	bl	8000524 <__aeabi_i2d>
 800a848:	4642      	mov	r2, r8
 800a84a:	464b      	mov	r3, r9
 800a84c:	f7f5 fed4 	bl	80005f8 <__aeabi_dmul>
 800a850:	4602      	mov	r2, r0
 800a852:	460b      	mov	r3, r1
 800a854:	4630      	mov	r0, r6
 800a856:	4639      	mov	r1, r7
 800a858:	f7f5 fd16 	bl	8000288 <__aeabi_dsub>
 800a85c:	9e02      	ldr	r6, [sp, #8]
 800a85e:	9f01      	ldr	r7, [sp, #4]
 800a860:	3630      	adds	r6, #48	; 0x30
 800a862:	f805 6b01 	strb.w	r6, [r5], #1
 800a866:	9e00      	ldr	r6, [sp, #0]
 800a868:	1bae      	subs	r6, r5, r6
 800a86a:	42b7      	cmp	r7, r6
 800a86c:	4602      	mov	r2, r0
 800a86e:	460b      	mov	r3, r1
 800a870:	d137      	bne.n	800a8e2 <_dtoa_r+0x722>
 800a872:	f7f5 fd0b 	bl	800028c <__adddf3>
 800a876:	4642      	mov	r2, r8
 800a878:	464b      	mov	r3, r9
 800a87a:	4606      	mov	r6, r0
 800a87c:	460f      	mov	r7, r1
 800a87e:	f7f6 f94b 	bl	8000b18 <__aeabi_dcmpgt>
 800a882:	b9c8      	cbnz	r0, 800a8b8 <_dtoa_r+0x6f8>
 800a884:	4642      	mov	r2, r8
 800a886:	464b      	mov	r3, r9
 800a888:	4630      	mov	r0, r6
 800a88a:	4639      	mov	r1, r7
 800a88c:	f7f6 f91c 	bl	8000ac8 <__aeabi_dcmpeq>
 800a890:	b110      	cbz	r0, 800a898 <_dtoa_r+0x6d8>
 800a892:	9b02      	ldr	r3, [sp, #8]
 800a894:	07d9      	lsls	r1, r3, #31
 800a896:	d40f      	bmi.n	800a8b8 <_dtoa_r+0x6f8>
 800a898:	4620      	mov	r0, r4
 800a89a:	4659      	mov	r1, fp
 800a89c:	f001 f868 	bl	800b970 <_Bfree>
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	702b      	strb	r3, [r5, #0]
 800a8a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a8a6:	f10a 0001 	add.w	r0, sl, #1
 800a8aa:	6018      	str	r0, [r3, #0]
 800a8ac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	f43f acd8 	beq.w	800a264 <_dtoa_r+0xa4>
 800a8b4:	601d      	str	r5, [r3, #0]
 800a8b6:	e4d5      	b.n	800a264 <_dtoa_r+0xa4>
 800a8b8:	f8cd a01c 	str.w	sl, [sp, #28]
 800a8bc:	462b      	mov	r3, r5
 800a8be:	461d      	mov	r5, r3
 800a8c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a8c4:	2a39      	cmp	r2, #57	; 0x39
 800a8c6:	d108      	bne.n	800a8da <_dtoa_r+0x71a>
 800a8c8:	9a00      	ldr	r2, [sp, #0]
 800a8ca:	429a      	cmp	r2, r3
 800a8cc:	d1f7      	bne.n	800a8be <_dtoa_r+0x6fe>
 800a8ce:	9a07      	ldr	r2, [sp, #28]
 800a8d0:	9900      	ldr	r1, [sp, #0]
 800a8d2:	3201      	adds	r2, #1
 800a8d4:	9207      	str	r2, [sp, #28]
 800a8d6:	2230      	movs	r2, #48	; 0x30
 800a8d8:	700a      	strb	r2, [r1, #0]
 800a8da:	781a      	ldrb	r2, [r3, #0]
 800a8dc:	3201      	adds	r2, #1
 800a8de:	701a      	strb	r2, [r3, #0]
 800a8e0:	e78c      	b.n	800a7fc <_dtoa_r+0x63c>
 800a8e2:	4b7f      	ldr	r3, [pc, #508]	; (800aae0 <_dtoa_r+0x920>)
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	f7f5 fe87 	bl	80005f8 <__aeabi_dmul>
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	4606      	mov	r6, r0
 800a8f0:	460f      	mov	r7, r1
 800a8f2:	f7f6 f8e9 	bl	8000ac8 <__aeabi_dcmpeq>
 800a8f6:	2800      	cmp	r0, #0
 800a8f8:	d09b      	beq.n	800a832 <_dtoa_r+0x672>
 800a8fa:	e7cd      	b.n	800a898 <_dtoa_r+0x6d8>
 800a8fc:	9a08      	ldr	r2, [sp, #32]
 800a8fe:	2a00      	cmp	r2, #0
 800a900:	f000 80c4 	beq.w	800aa8c <_dtoa_r+0x8cc>
 800a904:	9a05      	ldr	r2, [sp, #20]
 800a906:	2a01      	cmp	r2, #1
 800a908:	f300 80a8 	bgt.w	800aa5c <_dtoa_r+0x89c>
 800a90c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a90e:	2a00      	cmp	r2, #0
 800a910:	f000 80a0 	beq.w	800aa54 <_dtoa_r+0x894>
 800a914:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a918:	9e06      	ldr	r6, [sp, #24]
 800a91a:	4645      	mov	r5, r8
 800a91c:	9a04      	ldr	r2, [sp, #16]
 800a91e:	2101      	movs	r1, #1
 800a920:	441a      	add	r2, r3
 800a922:	4620      	mov	r0, r4
 800a924:	4498      	add	r8, r3
 800a926:	9204      	str	r2, [sp, #16]
 800a928:	f001 f928 	bl	800bb7c <__i2b>
 800a92c:	4607      	mov	r7, r0
 800a92e:	2d00      	cmp	r5, #0
 800a930:	dd0b      	ble.n	800a94a <_dtoa_r+0x78a>
 800a932:	9b04      	ldr	r3, [sp, #16]
 800a934:	2b00      	cmp	r3, #0
 800a936:	dd08      	ble.n	800a94a <_dtoa_r+0x78a>
 800a938:	42ab      	cmp	r3, r5
 800a93a:	9a04      	ldr	r2, [sp, #16]
 800a93c:	bfa8      	it	ge
 800a93e:	462b      	movge	r3, r5
 800a940:	eba8 0803 	sub.w	r8, r8, r3
 800a944:	1aed      	subs	r5, r5, r3
 800a946:	1ad3      	subs	r3, r2, r3
 800a948:	9304      	str	r3, [sp, #16]
 800a94a:	9b06      	ldr	r3, [sp, #24]
 800a94c:	b1fb      	cbz	r3, 800a98e <_dtoa_r+0x7ce>
 800a94e:	9b08      	ldr	r3, [sp, #32]
 800a950:	2b00      	cmp	r3, #0
 800a952:	f000 809f 	beq.w	800aa94 <_dtoa_r+0x8d4>
 800a956:	2e00      	cmp	r6, #0
 800a958:	dd11      	ble.n	800a97e <_dtoa_r+0x7be>
 800a95a:	4639      	mov	r1, r7
 800a95c:	4632      	mov	r2, r6
 800a95e:	4620      	mov	r0, r4
 800a960:	f001 f9c8 	bl	800bcf4 <__pow5mult>
 800a964:	465a      	mov	r2, fp
 800a966:	4601      	mov	r1, r0
 800a968:	4607      	mov	r7, r0
 800a96a:	4620      	mov	r0, r4
 800a96c:	f001 f91c 	bl	800bba8 <__multiply>
 800a970:	4659      	mov	r1, fp
 800a972:	9007      	str	r0, [sp, #28]
 800a974:	4620      	mov	r0, r4
 800a976:	f000 fffb 	bl	800b970 <_Bfree>
 800a97a:	9b07      	ldr	r3, [sp, #28]
 800a97c:	469b      	mov	fp, r3
 800a97e:	9b06      	ldr	r3, [sp, #24]
 800a980:	1b9a      	subs	r2, r3, r6
 800a982:	d004      	beq.n	800a98e <_dtoa_r+0x7ce>
 800a984:	4659      	mov	r1, fp
 800a986:	4620      	mov	r0, r4
 800a988:	f001 f9b4 	bl	800bcf4 <__pow5mult>
 800a98c:	4683      	mov	fp, r0
 800a98e:	2101      	movs	r1, #1
 800a990:	4620      	mov	r0, r4
 800a992:	f001 f8f3 	bl	800bb7c <__i2b>
 800a996:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a998:	2b00      	cmp	r3, #0
 800a99a:	4606      	mov	r6, r0
 800a99c:	dd7c      	ble.n	800aa98 <_dtoa_r+0x8d8>
 800a99e:	461a      	mov	r2, r3
 800a9a0:	4601      	mov	r1, r0
 800a9a2:	4620      	mov	r0, r4
 800a9a4:	f001 f9a6 	bl	800bcf4 <__pow5mult>
 800a9a8:	9b05      	ldr	r3, [sp, #20]
 800a9aa:	2b01      	cmp	r3, #1
 800a9ac:	4606      	mov	r6, r0
 800a9ae:	dd76      	ble.n	800aa9e <_dtoa_r+0x8de>
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	9306      	str	r3, [sp, #24]
 800a9b4:	6933      	ldr	r3, [r6, #16]
 800a9b6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a9ba:	6918      	ldr	r0, [r3, #16]
 800a9bc:	f001 f88e 	bl	800badc <__hi0bits>
 800a9c0:	f1c0 0020 	rsb	r0, r0, #32
 800a9c4:	9b04      	ldr	r3, [sp, #16]
 800a9c6:	4418      	add	r0, r3
 800a9c8:	f010 001f 	ands.w	r0, r0, #31
 800a9cc:	f000 8086 	beq.w	800aadc <_dtoa_r+0x91c>
 800a9d0:	f1c0 0320 	rsb	r3, r0, #32
 800a9d4:	2b04      	cmp	r3, #4
 800a9d6:	dd7f      	ble.n	800aad8 <_dtoa_r+0x918>
 800a9d8:	f1c0 001c 	rsb	r0, r0, #28
 800a9dc:	9b04      	ldr	r3, [sp, #16]
 800a9de:	4403      	add	r3, r0
 800a9e0:	4480      	add	r8, r0
 800a9e2:	4405      	add	r5, r0
 800a9e4:	9304      	str	r3, [sp, #16]
 800a9e6:	f1b8 0f00 	cmp.w	r8, #0
 800a9ea:	dd05      	ble.n	800a9f8 <_dtoa_r+0x838>
 800a9ec:	4659      	mov	r1, fp
 800a9ee:	4642      	mov	r2, r8
 800a9f0:	4620      	mov	r0, r4
 800a9f2:	f001 f9d9 	bl	800bda8 <__lshift>
 800a9f6:	4683      	mov	fp, r0
 800a9f8:	9b04      	ldr	r3, [sp, #16]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	dd05      	ble.n	800aa0a <_dtoa_r+0x84a>
 800a9fe:	4631      	mov	r1, r6
 800aa00:	461a      	mov	r2, r3
 800aa02:	4620      	mov	r0, r4
 800aa04:	f001 f9d0 	bl	800bda8 <__lshift>
 800aa08:	4606      	mov	r6, r0
 800aa0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d069      	beq.n	800aae4 <_dtoa_r+0x924>
 800aa10:	4631      	mov	r1, r6
 800aa12:	4658      	mov	r0, fp
 800aa14:	f001 fa34 	bl	800be80 <__mcmp>
 800aa18:	2800      	cmp	r0, #0
 800aa1a:	da63      	bge.n	800aae4 <_dtoa_r+0x924>
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	4659      	mov	r1, fp
 800aa20:	220a      	movs	r2, #10
 800aa22:	4620      	mov	r0, r4
 800aa24:	f000 ffc6 	bl	800b9b4 <__multadd>
 800aa28:	9b08      	ldr	r3, [sp, #32]
 800aa2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aa2e:	4683      	mov	fp, r0
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	f000 818f 	beq.w	800ad54 <_dtoa_r+0xb94>
 800aa36:	4639      	mov	r1, r7
 800aa38:	2300      	movs	r3, #0
 800aa3a:	220a      	movs	r2, #10
 800aa3c:	4620      	mov	r0, r4
 800aa3e:	f000 ffb9 	bl	800b9b4 <__multadd>
 800aa42:	f1b9 0f00 	cmp.w	r9, #0
 800aa46:	4607      	mov	r7, r0
 800aa48:	f300 808e 	bgt.w	800ab68 <_dtoa_r+0x9a8>
 800aa4c:	9b05      	ldr	r3, [sp, #20]
 800aa4e:	2b02      	cmp	r3, #2
 800aa50:	dc50      	bgt.n	800aaf4 <_dtoa_r+0x934>
 800aa52:	e089      	b.n	800ab68 <_dtoa_r+0x9a8>
 800aa54:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800aa56:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800aa5a:	e75d      	b.n	800a918 <_dtoa_r+0x758>
 800aa5c:	9b01      	ldr	r3, [sp, #4]
 800aa5e:	1e5e      	subs	r6, r3, #1
 800aa60:	9b06      	ldr	r3, [sp, #24]
 800aa62:	42b3      	cmp	r3, r6
 800aa64:	bfbf      	itttt	lt
 800aa66:	9b06      	ldrlt	r3, [sp, #24]
 800aa68:	9606      	strlt	r6, [sp, #24]
 800aa6a:	1af2      	sublt	r2, r6, r3
 800aa6c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800aa6e:	bfb6      	itet	lt
 800aa70:	189b      	addlt	r3, r3, r2
 800aa72:	1b9e      	subge	r6, r3, r6
 800aa74:	930d      	strlt	r3, [sp, #52]	; 0x34
 800aa76:	9b01      	ldr	r3, [sp, #4]
 800aa78:	bfb8      	it	lt
 800aa7a:	2600      	movlt	r6, #0
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	bfb5      	itete	lt
 800aa80:	eba8 0503 	sublt.w	r5, r8, r3
 800aa84:	9b01      	ldrge	r3, [sp, #4]
 800aa86:	2300      	movlt	r3, #0
 800aa88:	4645      	movge	r5, r8
 800aa8a:	e747      	b.n	800a91c <_dtoa_r+0x75c>
 800aa8c:	9e06      	ldr	r6, [sp, #24]
 800aa8e:	9f08      	ldr	r7, [sp, #32]
 800aa90:	4645      	mov	r5, r8
 800aa92:	e74c      	b.n	800a92e <_dtoa_r+0x76e>
 800aa94:	9a06      	ldr	r2, [sp, #24]
 800aa96:	e775      	b.n	800a984 <_dtoa_r+0x7c4>
 800aa98:	9b05      	ldr	r3, [sp, #20]
 800aa9a:	2b01      	cmp	r3, #1
 800aa9c:	dc18      	bgt.n	800aad0 <_dtoa_r+0x910>
 800aa9e:	9b02      	ldr	r3, [sp, #8]
 800aaa0:	b9b3      	cbnz	r3, 800aad0 <_dtoa_r+0x910>
 800aaa2:	9b03      	ldr	r3, [sp, #12]
 800aaa4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aaa8:	b9a3      	cbnz	r3, 800aad4 <_dtoa_r+0x914>
 800aaaa:	9b03      	ldr	r3, [sp, #12]
 800aaac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aab0:	0d1b      	lsrs	r3, r3, #20
 800aab2:	051b      	lsls	r3, r3, #20
 800aab4:	b12b      	cbz	r3, 800aac2 <_dtoa_r+0x902>
 800aab6:	9b04      	ldr	r3, [sp, #16]
 800aab8:	3301      	adds	r3, #1
 800aaba:	9304      	str	r3, [sp, #16]
 800aabc:	f108 0801 	add.w	r8, r8, #1
 800aac0:	2301      	movs	r3, #1
 800aac2:	9306      	str	r3, [sp, #24]
 800aac4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	f47f af74 	bne.w	800a9b4 <_dtoa_r+0x7f4>
 800aacc:	2001      	movs	r0, #1
 800aace:	e779      	b.n	800a9c4 <_dtoa_r+0x804>
 800aad0:	2300      	movs	r3, #0
 800aad2:	e7f6      	b.n	800aac2 <_dtoa_r+0x902>
 800aad4:	9b02      	ldr	r3, [sp, #8]
 800aad6:	e7f4      	b.n	800aac2 <_dtoa_r+0x902>
 800aad8:	d085      	beq.n	800a9e6 <_dtoa_r+0x826>
 800aada:	4618      	mov	r0, r3
 800aadc:	301c      	adds	r0, #28
 800aade:	e77d      	b.n	800a9dc <_dtoa_r+0x81c>
 800aae0:	40240000 	.word	0x40240000
 800aae4:	9b01      	ldr	r3, [sp, #4]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	dc38      	bgt.n	800ab5c <_dtoa_r+0x99c>
 800aaea:	9b05      	ldr	r3, [sp, #20]
 800aaec:	2b02      	cmp	r3, #2
 800aaee:	dd35      	ble.n	800ab5c <_dtoa_r+0x99c>
 800aaf0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800aaf4:	f1b9 0f00 	cmp.w	r9, #0
 800aaf8:	d10d      	bne.n	800ab16 <_dtoa_r+0x956>
 800aafa:	4631      	mov	r1, r6
 800aafc:	464b      	mov	r3, r9
 800aafe:	2205      	movs	r2, #5
 800ab00:	4620      	mov	r0, r4
 800ab02:	f000 ff57 	bl	800b9b4 <__multadd>
 800ab06:	4601      	mov	r1, r0
 800ab08:	4606      	mov	r6, r0
 800ab0a:	4658      	mov	r0, fp
 800ab0c:	f001 f9b8 	bl	800be80 <__mcmp>
 800ab10:	2800      	cmp	r0, #0
 800ab12:	f73f adbd 	bgt.w	800a690 <_dtoa_r+0x4d0>
 800ab16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab18:	9d00      	ldr	r5, [sp, #0]
 800ab1a:	ea6f 0a03 	mvn.w	sl, r3
 800ab1e:	f04f 0800 	mov.w	r8, #0
 800ab22:	4631      	mov	r1, r6
 800ab24:	4620      	mov	r0, r4
 800ab26:	f000 ff23 	bl	800b970 <_Bfree>
 800ab2a:	2f00      	cmp	r7, #0
 800ab2c:	f43f aeb4 	beq.w	800a898 <_dtoa_r+0x6d8>
 800ab30:	f1b8 0f00 	cmp.w	r8, #0
 800ab34:	d005      	beq.n	800ab42 <_dtoa_r+0x982>
 800ab36:	45b8      	cmp	r8, r7
 800ab38:	d003      	beq.n	800ab42 <_dtoa_r+0x982>
 800ab3a:	4641      	mov	r1, r8
 800ab3c:	4620      	mov	r0, r4
 800ab3e:	f000 ff17 	bl	800b970 <_Bfree>
 800ab42:	4639      	mov	r1, r7
 800ab44:	4620      	mov	r0, r4
 800ab46:	f000 ff13 	bl	800b970 <_Bfree>
 800ab4a:	e6a5      	b.n	800a898 <_dtoa_r+0x6d8>
 800ab4c:	2600      	movs	r6, #0
 800ab4e:	4637      	mov	r7, r6
 800ab50:	e7e1      	b.n	800ab16 <_dtoa_r+0x956>
 800ab52:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800ab54:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800ab58:	4637      	mov	r7, r6
 800ab5a:	e599      	b.n	800a690 <_dtoa_r+0x4d0>
 800ab5c:	9b08      	ldr	r3, [sp, #32]
 800ab5e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	f000 80fd 	beq.w	800ad62 <_dtoa_r+0xba2>
 800ab68:	2d00      	cmp	r5, #0
 800ab6a:	dd05      	ble.n	800ab78 <_dtoa_r+0x9b8>
 800ab6c:	4639      	mov	r1, r7
 800ab6e:	462a      	mov	r2, r5
 800ab70:	4620      	mov	r0, r4
 800ab72:	f001 f919 	bl	800bda8 <__lshift>
 800ab76:	4607      	mov	r7, r0
 800ab78:	9b06      	ldr	r3, [sp, #24]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d05c      	beq.n	800ac38 <_dtoa_r+0xa78>
 800ab7e:	6879      	ldr	r1, [r7, #4]
 800ab80:	4620      	mov	r0, r4
 800ab82:	f000 feb5 	bl	800b8f0 <_Balloc>
 800ab86:	4605      	mov	r5, r0
 800ab88:	b928      	cbnz	r0, 800ab96 <_dtoa_r+0x9d6>
 800ab8a:	4b80      	ldr	r3, [pc, #512]	; (800ad8c <_dtoa_r+0xbcc>)
 800ab8c:	4602      	mov	r2, r0
 800ab8e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ab92:	f7ff bb2e 	b.w	800a1f2 <_dtoa_r+0x32>
 800ab96:	693a      	ldr	r2, [r7, #16]
 800ab98:	3202      	adds	r2, #2
 800ab9a:	0092      	lsls	r2, r2, #2
 800ab9c:	f107 010c 	add.w	r1, r7, #12
 800aba0:	300c      	adds	r0, #12
 800aba2:	f7fd fc0d 	bl	80083c0 <memcpy>
 800aba6:	2201      	movs	r2, #1
 800aba8:	4629      	mov	r1, r5
 800abaa:	4620      	mov	r0, r4
 800abac:	f001 f8fc 	bl	800bda8 <__lshift>
 800abb0:	9b00      	ldr	r3, [sp, #0]
 800abb2:	3301      	adds	r3, #1
 800abb4:	9301      	str	r3, [sp, #4]
 800abb6:	9b00      	ldr	r3, [sp, #0]
 800abb8:	444b      	add	r3, r9
 800abba:	9307      	str	r3, [sp, #28]
 800abbc:	9b02      	ldr	r3, [sp, #8]
 800abbe:	f003 0301 	and.w	r3, r3, #1
 800abc2:	46b8      	mov	r8, r7
 800abc4:	9306      	str	r3, [sp, #24]
 800abc6:	4607      	mov	r7, r0
 800abc8:	9b01      	ldr	r3, [sp, #4]
 800abca:	4631      	mov	r1, r6
 800abcc:	3b01      	subs	r3, #1
 800abce:	4658      	mov	r0, fp
 800abd0:	9302      	str	r3, [sp, #8]
 800abd2:	f7ff fa67 	bl	800a0a4 <quorem>
 800abd6:	4603      	mov	r3, r0
 800abd8:	3330      	adds	r3, #48	; 0x30
 800abda:	9004      	str	r0, [sp, #16]
 800abdc:	4641      	mov	r1, r8
 800abde:	4658      	mov	r0, fp
 800abe0:	9308      	str	r3, [sp, #32]
 800abe2:	f001 f94d 	bl	800be80 <__mcmp>
 800abe6:	463a      	mov	r2, r7
 800abe8:	4681      	mov	r9, r0
 800abea:	4631      	mov	r1, r6
 800abec:	4620      	mov	r0, r4
 800abee:	f001 f963 	bl	800beb8 <__mdiff>
 800abf2:	68c2      	ldr	r2, [r0, #12]
 800abf4:	9b08      	ldr	r3, [sp, #32]
 800abf6:	4605      	mov	r5, r0
 800abf8:	bb02      	cbnz	r2, 800ac3c <_dtoa_r+0xa7c>
 800abfa:	4601      	mov	r1, r0
 800abfc:	4658      	mov	r0, fp
 800abfe:	f001 f93f 	bl	800be80 <__mcmp>
 800ac02:	9b08      	ldr	r3, [sp, #32]
 800ac04:	4602      	mov	r2, r0
 800ac06:	4629      	mov	r1, r5
 800ac08:	4620      	mov	r0, r4
 800ac0a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800ac0e:	f000 feaf 	bl	800b970 <_Bfree>
 800ac12:	9b05      	ldr	r3, [sp, #20]
 800ac14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac16:	9d01      	ldr	r5, [sp, #4]
 800ac18:	ea43 0102 	orr.w	r1, r3, r2
 800ac1c:	9b06      	ldr	r3, [sp, #24]
 800ac1e:	430b      	orrs	r3, r1
 800ac20:	9b08      	ldr	r3, [sp, #32]
 800ac22:	d10d      	bne.n	800ac40 <_dtoa_r+0xa80>
 800ac24:	2b39      	cmp	r3, #57	; 0x39
 800ac26:	d029      	beq.n	800ac7c <_dtoa_r+0xabc>
 800ac28:	f1b9 0f00 	cmp.w	r9, #0
 800ac2c:	dd01      	ble.n	800ac32 <_dtoa_r+0xa72>
 800ac2e:	9b04      	ldr	r3, [sp, #16]
 800ac30:	3331      	adds	r3, #49	; 0x31
 800ac32:	9a02      	ldr	r2, [sp, #8]
 800ac34:	7013      	strb	r3, [r2, #0]
 800ac36:	e774      	b.n	800ab22 <_dtoa_r+0x962>
 800ac38:	4638      	mov	r0, r7
 800ac3a:	e7b9      	b.n	800abb0 <_dtoa_r+0x9f0>
 800ac3c:	2201      	movs	r2, #1
 800ac3e:	e7e2      	b.n	800ac06 <_dtoa_r+0xa46>
 800ac40:	f1b9 0f00 	cmp.w	r9, #0
 800ac44:	db06      	blt.n	800ac54 <_dtoa_r+0xa94>
 800ac46:	9905      	ldr	r1, [sp, #20]
 800ac48:	ea41 0909 	orr.w	r9, r1, r9
 800ac4c:	9906      	ldr	r1, [sp, #24]
 800ac4e:	ea59 0101 	orrs.w	r1, r9, r1
 800ac52:	d120      	bne.n	800ac96 <_dtoa_r+0xad6>
 800ac54:	2a00      	cmp	r2, #0
 800ac56:	ddec      	ble.n	800ac32 <_dtoa_r+0xa72>
 800ac58:	4659      	mov	r1, fp
 800ac5a:	2201      	movs	r2, #1
 800ac5c:	4620      	mov	r0, r4
 800ac5e:	9301      	str	r3, [sp, #4]
 800ac60:	f001 f8a2 	bl	800bda8 <__lshift>
 800ac64:	4631      	mov	r1, r6
 800ac66:	4683      	mov	fp, r0
 800ac68:	f001 f90a 	bl	800be80 <__mcmp>
 800ac6c:	2800      	cmp	r0, #0
 800ac6e:	9b01      	ldr	r3, [sp, #4]
 800ac70:	dc02      	bgt.n	800ac78 <_dtoa_r+0xab8>
 800ac72:	d1de      	bne.n	800ac32 <_dtoa_r+0xa72>
 800ac74:	07da      	lsls	r2, r3, #31
 800ac76:	d5dc      	bpl.n	800ac32 <_dtoa_r+0xa72>
 800ac78:	2b39      	cmp	r3, #57	; 0x39
 800ac7a:	d1d8      	bne.n	800ac2e <_dtoa_r+0xa6e>
 800ac7c:	9a02      	ldr	r2, [sp, #8]
 800ac7e:	2339      	movs	r3, #57	; 0x39
 800ac80:	7013      	strb	r3, [r2, #0]
 800ac82:	462b      	mov	r3, r5
 800ac84:	461d      	mov	r5, r3
 800ac86:	3b01      	subs	r3, #1
 800ac88:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ac8c:	2a39      	cmp	r2, #57	; 0x39
 800ac8e:	d050      	beq.n	800ad32 <_dtoa_r+0xb72>
 800ac90:	3201      	adds	r2, #1
 800ac92:	701a      	strb	r2, [r3, #0]
 800ac94:	e745      	b.n	800ab22 <_dtoa_r+0x962>
 800ac96:	2a00      	cmp	r2, #0
 800ac98:	dd03      	ble.n	800aca2 <_dtoa_r+0xae2>
 800ac9a:	2b39      	cmp	r3, #57	; 0x39
 800ac9c:	d0ee      	beq.n	800ac7c <_dtoa_r+0xabc>
 800ac9e:	3301      	adds	r3, #1
 800aca0:	e7c7      	b.n	800ac32 <_dtoa_r+0xa72>
 800aca2:	9a01      	ldr	r2, [sp, #4]
 800aca4:	9907      	ldr	r1, [sp, #28]
 800aca6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800acaa:	428a      	cmp	r2, r1
 800acac:	d02a      	beq.n	800ad04 <_dtoa_r+0xb44>
 800acae:	4659      	mov	r1, fp
 800acb0:	2300      	movs	r3, #0
 800acb2:	220a      	movs	r2, #10
 800acb4:	4620      	mov	r0, r4
 800acb6:	f000 fe7d 	bl	800b9b4 <__multadd>
 800acba:	45b8      	cmp	r8, r7
 800acbc:	4683      	mov	fp, r0
 800acbe:	f04f 0300 	mov.w	r3, #0
 800acc2:	f04f 020a 	mov.w	r2, #10
 800acc6:	4641      	mov	r1, r8
 800acc8:	4620      	mov	r0, r4
 800acca:	d107      	bne.n	800acdc <_dtoa_r+0xb1c>
 800accc:	f000 fe72 	bl	800b9b4 <__multadd>
 800acd0:	4680      	mov	r8, r0
 800acd2:	4607      	mov	r7, r0
 800acd4:	9b01      	ldr	r3, [sp, #4]
 800acd6:	3301      	adds	r3, #1
 800acd8:	9301      	str	r3, [sp, #4]
 800acda:	e775      	b.n	800abc8 <_dtoa_r+0xa08>
 800acdc:	f000 fe6a 	bl	800b9b4 <__multadd>
 800ace0:	4639      	mov	r1, r7
 800ace2:	4680      	mov	r8, r0
 800ace4:	2300      	movs	r3, #0
 800ace6:	220a      	movs	r2, #10
 800ace8:	4620      	mov	r0, r4
 800acea:	f000 fe63 	bl	800b9b4 <__multadd>
 800acee:	4607      	mov	r7, r0
 800acf0:	e7f0      	b.n	800acd4 <_dtoa_r+0xb14>
 800acf2:	f1b9 0f00 	cmp.w	r9, #0
 800acf6:	9a00      	ldr	r2, [sp, #0]
 800acf8:	bfcc      	ite	gt
 800acfa:	464d      	movgt	r5, r9
 800acfc:	2501      	movle	r5, #1
 800acfe:	4415      	add	r5, r2
 800ad00:	f04f 0800 	mov.w	r8, #0
 800ad04:	4659      	mov	r1, fp
 800ad06:	2201      	movs	r2, #1
 800ad08:	4620      	mov	r0, r4
 800ad0a:	9301      	str	r3, [sp, #4]
 800ad0c:	f001 f84c 	bl	800bda8 <__lshift>
 800ad10:	4631      	mov	r1, r6
 800ad12:	4683      	mov	fp, r0
 800ad14:	f001 f8b4 	bl	800be80 <__mcmp>
 800ad18:	2800      	cmp	r0, #0
 800ad1a:	dcb2      	bgt.n	800ac82 <_dtoa_r+0xac2>
 800ad1c:	d102      	bne.n	800ad24 <_dtoa_r+0xb64>
 800ad1e:	9b01      	ldr	r3, [sp, #4]
 800ad20:	07db      	lsls	r3, r3, #31
 800ad22:	d4ae      	bmi.n	800ac82 <_dtoa_r+0xac2>
 800ad24:	462b      	mov	r3, r5
 800ad26:	461d      	mov	r5, r3
 800ad28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ad2c:	2a30      	cmp	r2, #48	; 0x30
 800ad2e:	d0fa      	beq.n	800ad26 <_dtoa_r+0xb66>
 800ad30:	e6f7      	b.n	800ab22 <_dtoa_r+0x962>
 800ad32:	9a00      	ldr	r2, [sp, #0]
 800ad34:	429a      	cmp	r2, r3
 800ad36:	d1a5      	bne.n	800ac84 <_dtoa_r+0xac4>
 800ad38:	f10a 0a01 	add.w	sl, sl, #1
 800ad3c:	2331      	movs	r3, #49	; 0x31
 800ad3e:	e779      	b.n	800ac34 <_dtoa_r+0xa74>
 800ad40:	4b13      	ldr	r3, [pc, #76]	; (800ad90 <_dtoa_r+0xbd0>)
 800ad42:	f7ff baaf 	b.w	800a2a4 <_dtoa_r+0xe4>
 800ad46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	f47f aa86 	bne.w	800a25a <_dtoa_r+0x9a>
 800ad4e:	4b11      	ldr	r3, [pc, #68]	; (800ad94 <_dtoa_r+0xbd4>)
 800ad50:	f7ff baa8 	b.w	800a2a4 <_dtoa_r+0xe4>
 800ad54:	f1b9 0f00 	cmp.w	r9, #0
 800ad58:	dc03      	bgt.n	800ad62 <_dtoa_r+0xba2>
 800ad5a:	9b05      	ldr	r3, [sp, #20]
 800ad5c:	2b02      	cmp	r3, #2
 800ad5e:	f73f aec9 	bgt.w	800aaf4 <_dtoa_r+0x934>
 800ad62:	9d00      	ldr	r5, [sp, #0]
 800ad64:	4631      	mov	r1, r6
 800ad66:	4658      	mov	r0, fp
 800ad68:	f7ff f99c 	bl	800a0a4 <quorem>
 800ad6c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ad70:	f805 3b01 	strb.w	r3, [r5], #1
 800ad74:	9a00      	ldr	r2, [sp, #0]
 800ad76:	1aaa      	subs	r2, r5, r2
 800ad78:	4591      	cmp	r9, r2
 800ad7a:	ddba      	ble.n	800acf2 <_dtoa_r+0xb32>
 800ad7c:	4659      	mov	r1, fp
 800ad7e:	2300      	movs	r3, #0
 800ad80:	220a      	movs	r2, #10
 800ad82:	4620      	mov	r0, r4
 800ad84:	f000 fe16 	bl	800b9b4 <__multadd>
 800ad88:	4683      	mov	fp, r0
 800ad8a:	e7eb      	b.n	800ad64 <_dtoa_r+0xba4>
 800ad8c:	0800e36c 	.word	0x0800e36c
 800ad90:	0800e16c 	.word	0x0800e16c
 800ad94:	0800e2e9 	.word	0x0800e2e9

0800ad98 <__sflush_r>:
 800ad98:	898a      	ldrh	r2, [r1, #12]
 800ad9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad9e:	4605      	mov	r5, r0
 800ada0:	0710      	lsls	r0, r2, #28
 800ada2:	460c      	mov	r4, r1
 800ada4:	d458      	bmi.n	800ae58 <__sflush_r+0xc0>
 800ada6:	684b      	ldr	r3, [r1, #4]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	dc05      	bgt.n	800adb8 <__sflush_r+0x20>
 800adac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800adae:	2b00      	cmp	r3, #0
 800adb0:	dc02      	bgt.n	800adb8 <__sflush_r+0x20>
 800adb2:	2000      	movs	r0, #0
 800adb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800adba:	2e00      	cmp	r6, #0
 800adbc:	d0f9      	beq.n	800adb2 <__sflush_r+0x1a>
 800adbe:	2300      	movs	r3, #0
 800adc0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800adc4:	682f      	ldr	r7, [r5, #0]
 800adc6:	602b      	str	r3, [r5, #0]
 800adc8:	d032      	beq.n	800ae30 <__sflush_r+0x98>
 800adca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800adcc:	89a3      	ldrh	r3, [r4, #12]
 800adce:	075a      	lsls	r2, r3, #29
 800add0:	d505      	bpl.n	800adde <__sflush_r+0x46>
 800add2:	6863      	ldr	r3, [r4, #4]
 800add4:	1ac0      	subs	r0, r0, r3
 800add6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800add8:	b10b      	cbz	r3, 800adde <__sflush_r+0x46>
 800adda:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800addc:	1ac0      	subs	r0, r0, r3
 800adde:	2300      	movs	r3, #0
 800ade0:	4602      	mov	r2, r0
 800ade2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ade4:	6a21      	ldr	r1, [r4, #32]
 800ade6:	4628      	mov	r0, r5
 800ade8:	47b0      	blx	r6
 800adea:	1c43      	adds	r3, r0, #1
 800adec:	89a3      	ldrh	r3, [r4, #12]
 800adee:	d106      	bne.n	800adfe <__sflush_r+0x66>
 800adf0:	6829      	ldr	r1, [r5, #0]
 800adf2:	291d      	cmp	r1, #29
 800adf4:	d82c      	bhi.n	800ae50 <__sflush_r+0xb8>
 800adf6:	4a2a      	ldr	r2, [pc, #168]	; (800aea0 <__sflush_r+0x108>)
 800adf8:	40ca      	lsrs	r2, r1
 800adfa:	07d6      	lsls	r6, r2, #31
 800adfc:	d528      	bpl.n	800ae50 <__sflush_r+0xb8>
 800adfe:	2200      	movs	r2, #0
 800ae00:	6062      	str	r2, [r4, #4]
 800ae02:	04d9      	lsls	r1, r3, #19
 800ae04:	6922      	ldr	r2, [r4, #16]
 800ae06:	6022      	str	r2, [r4, #0]
 800ae08:	d504      	bpl.n	800ae14 <__sflush_r+0x7c>
 800ae0a:	1c42      	adds	r2, r0, #1
 800ae0c:	d101      	bne.n	800ae12 <__sflush_r+0x7a>
 800ae0e:	682b      	ldr	r3, [r5, #0]
 800ae10:	b903      	cbnz	r3, 800ae14 <__sflush_r+0x7c>
 800ae12:	6560      	str	r0, [r4, #84]	; 0x54
 800ae14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ae16:	602f      	str	r7, [r5, #0]
 800ae18:	2900      	cmp	r1, #0
 800ae1a:	d0ca      	beq.n	800adb2 <__sflush_r+0x1a>
 800ae1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ae20:	4299      	cmp	r1, r3
 800ae22:	d002      	beq.n	800ae2a <__sflush_r+0x92>
 800ae24:	4628      	mov	r0, r5
 800ae26:	f001 fa2d 	bl	800c284 <_free_r>
 800ae2a:	2000      	movs	r0, #0
 800ae2c:	6360      	str	r0, [r4, #52]	; 0x34
 800ae2e:	e7c1      	b.n	800adb4 <__sflush_r+0x1c>
 800ae30:	6a21      	ldr	r1, [r4, #32]
 800ae32:	2301      	movs	r3, #1
 800ae34:	4628      	mov	r0, r5
 800ae36:	47b0      	blx	r6
 800ae38:	1c41      	adds	r1, r0, #1
 800ae3a:	d1c7      	bne.n	800adcc <__sflush_r+0x34>
 800ae3c:	682b      	ldr	r3, [r5, #0]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d0c4      	beq.n	800adcc <__sflush_r+0x34>
 800ae42:	2b1d      	cmp	r3, #29
 800ae44:	d001      	beq.n	800ae4a <__sflush_r+0xb2>
 800ae46:	2b16      	cmp	r3, #22
 800ae48:	d101      	bne.n	800ae4e <__sflush_r+0xb6>
 800ae4a:	602f      	str	r7, [r5, #0]
 800ae4c:	e7b1      	b.n	800adb2 <__sflush_r+0x1a>
 800ae4e:	89a3      	ldrh	r3, [r4, #12]
 800ae50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae54:	81a3      	strh	r3, [r4, #12]
 800ae56:	e7ad      	b.n	800adb4 <__sflush_r+0x1c>
 800ae58:	690f      	ldr	r7, [r1, #16]
 800ae5a:	2f00      	cmp	r7, #0
 800ae5c:	d0a9      	beq.n	800adb2 <__sflush_r+0x1a>
 800ae5e:	0793      	lsls	r3, r2, #30
 800ae60:	680e      	ldr	r6, [r1, #0]
 800ae62:	bf08      	it	eq
 800ae64:	694b      	ldreq	r3, [r1, #20]
 800ae66:	600f      	str	r7, [r1, #0]
 800ae68:	bf18      	it	ne
 800ae6a:	2300      	movne	r3, #0
 800ae6c:	eba6 0807 	sub.w	r8, r6, r7
 800ae70:	608b      	str	r3, [r1, #8]
 800ae72:	f1b8 0f00 	cmp.w	r8, #0
 800ae76:	dd9c      	ble.n	800adb2 <__sflush_r+0x1a>
 800ae78:	6a21      	ldr	r1, [r4, #32]
 800ae7a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ae7c:	4643      	mov	r3, r8
 800ae7e:	463a      	mov	r2, r7
 800ae80:	4628      	mov	r0, r5
 800ae82:	47b0      	blx	r6
 800ae84:	2800      	cmp	r0, #0
 800ae86:	dc06      	bgt.n	800ae96 <__sflush_r+0xfe>
 800ae88:	89a3      	ldrh	r3, [r4, #12]
 800ae8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae8e:	81a3      	strh	r3, [r4, #12]
 800ae90:	f04f 30ff 	mov.w	r0, #4294967295
 800ae94:	e78e      	b.n	800adb4 <__sflush_r+0x1c>
 800ae96:	4407      	add	r7, r0
 800ae98:	eba8 0800 	sub.w	r8, r8, r0
 800ae9c:	e7e9      	b.n	800ae72 <__sflush_r+0xda>
 800ae9e:	bf00      	nop
 800aea0:	20400001 	.word	0x20400001

0800aea4 <_fflush_r>:
 800aea4:	b538      	push	{r3, r4, r5, lr}
 800aea6:	690b      	ldr	r3, [r1, #16]
 800aea8:	4605      	mov	r5, r0
 800aeaa:	460c      	mov	r4, r1
 800aeac:	b913      	cbnz	r3, 800aeb4 <_fflush_r+0x10>
 800aeae:	2500      	movs	r5, #0
 800aeb0:	4628      	mov	r0, r5
 800aeb2:	bd38      	pop	{r3, r4, r5, pc}
 800aeb4:	b118      	cbz	r0, 800aebe <_fflush_r+0x1a>
 800aeb6:	6983      	ldr	r3, [r0, #24]
 800aeb8:	b90b      	cbnz	r3, 800aebe <_fflush_r+0x1a>
 800aeba:	f000 f887 	bl	800afcc <__sinit>
 800aebe:	4b14      	ldr	r3, [pc, #80]	; (800af10 <_fflush_r+0x6c>)
 800aec0:	429c      	cmp	r4, r3
 800aec2:	d11b      	bne.n	800aefc <_fflush_r+0x58>
 800aec4:	686c      	ldr	r4, [r5, #4]
 800aec6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d0ef      	beq.n	800aeae <_fflush_r+0xa>
 800aece:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aed0:	07d0      	lsls	r0, r2, #31
 800aed2:	d404      	bmi.n	800aede <_fflush_r+0x3a>
 800aed4:	0599      	lsls	r1, r3, #22
 800aed6:	d402      	bmi.n	800aede <_fflush_r+0x3a>
 800aed8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aeda:	f000 fc88 	bl	800b7ee <__retarget_lock_acquire_recursive>
 800aede:	4628      	mov	r0, r5
 800aee0:	4621      	mov	r1, r4
 800aee2:	f7ff ff59 	bl	800ad98 <__sflush_r>
 800aee6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aee8:	07da      	lsls	r2, r3, #31
 800aeea:	4605      	mov	r5, r0
 800aeec:	d4e0      	bmi.n	800aeb0 <_fflush_r+0xc>
 800aeee:	89a3      	ldrh	r3, [r4, #12]
 800aef0:	059b      	lsls	r3, r3, #22
 800aef2:	d4dd      	bmi.n	800aeb0 <_fflush_r+0xc>
 800aef4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aef6:	f000 fc7b 	bl	800b7f0 <__retarget_lock_release_recursive>
 800aefa:	e7d9      	b.n	800aeb0 <_fflush_r+0xc>
 800aefc:	4b05      	ldr	r3, [pc, #20]	; (800af14 <_fflush_r+0x70>)
 800aefe:	429c      	cmp	r4, r3
 800af00:	d101      	bne.n	800af06 <_fflush_r+0x62>
 800af02:	68ac      	ldr	r4, [r5, #8]
 800af04:	e7df      	b.n	800aec6 <_fflush_r+0x22>
 800af06:	4b04      	ldr	r3, [pc, #16]	; (800af18 <_fflush_r+0x74>)
 800af08:	429c      	cmp	r4, r3
 800af0a:	bf08      	it	eq
 800af0c:	68ec      	ldreq	r4, [r5, #12]
 800af0e:	e7da      	b.n	800aec6 <_fflush_r+0x22>
 800af10:	0800e3a0 	.word	0x0800e3a0
 800af14:	0800e3c0 	.word	0x0800e3c0
 800af18:	0800e380 	.word	0x0800e380

0800af1c <std>:
 800af1c:	2300      	movs	r3, #0
 800af1e:	b510      	push	{r4, lr}
 800af20:	4604      	mov	r4, r0
 800af22:	e9c0 3300 	strd	r3, r3, [r0]
 800af26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800af2a:	6083      	str	r3, [r0, #8]
 800af2c:	8181      	strh	r1, [r0, #12]
 800af2e:	6643      	str	r3, [r0, #100]	; 0x64
 800af30:	81c2      	strh	r2, [r0, #14]
 800af32:	6183      	str	r3, [r0, #24]
 800af34:	4619      	mov	r1, r3
 800af36:	2208      	movs	r2, #8
 800af38:	305c      	adds	r0, #92	; 0x5c
 800af3a:	f7fd fa4f 	bl	80083dc <memset>
 800af3e:	4b05      	ldr	r3, [pc, #20]	; (800af54 <std+0x38>)
 800af40:	6263      	str	r3, [r4, #36]	; 0x24
 800af42:	4b05      	ldr	r3, [pc, #20]	; (800af58 <std+0x3c>)
 800af44:	62a3      	str	r3, [r4, #40]	; 0x28
 800af46:	4b05      	ldr	r3, [pc, #20]	; (800af5c <std+0x40>)
 800af48:	62e3      	str	r3, [r4, #44]	; 0x2c
 800af4a:	4b05      	ldr	r3, [pc, #20]	; (800af60 <std+0x44>)
 800af4c:	6224      	str	r4, [r4, #32]
 800af4e:	6323      	str	r3, [r4, #48]	; 0x30
 800af50:	bd10      	pop	{r4, pc}
 800af52:	bf00      	nop
 800af54:	0800c979 	.word	0x0800c979
 800af58:	0800c99b 	.word	0x0800c99b
 800af5c:	0800c9d3 	.word	0x0800c9d3
 800af60:	0800c9f7 	.word	0x0800c9f7

0800af64 <_cleanup_r>:
 800af64:	4901      	ldr	r1, [pc, #4]	; (800af6c <_cleanup_r+0x8>)
 800af66:	f000 b8af 	b.w	800b0c8 <_fwalk_reent>
 800af6a:	bf00      	nop
 800af6c:	0800aea5 	.word	0x0800aea5

0800af70 <__sfmoreglue>:
 800af70:	b570      	push	{r4, r5, r6, lr}
 800af72:	1e4a      	subs	r2, r1, #1
 800af74:	2568      	movs	r5, #104	; 0x68
 800af76:	4355      	muls	r5, r2
 800af78:	460e      	mov	r6, r1
 800af7a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800af7e:	f001 f9d1 	bl	800c324 <_malloc_r>
 800af82:	4604      	mov	r4, r0
 800af84:	b140      	cbz	r0, 800af98 <__sfmoreglue+0x28>
 800af86:	2100      	movs	r1, #0
 800af88:	e9c0 1600 	strd	r1, r6, [r0]
 800af8c:	300c      	adds	r0, #12
 800af8e:	60a0      	str	r0, [r4, #8]
 800af90:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800af94:	f7fd fa22 	bl	80083dc <memset>
 800af98:	4620      	mov	r0, r4
 800af9a:	bd70      	pop	{r4, r5, r6, pc}

0800af9c <__sfp_lock_acquire>:
 800af9c:	4801      	ldr	r0, [pc, #4]	; (800afa4 <__sfp_lock_acquire+0x8>)
 800af9e:	f000 bc26 	b.w	800b7ee <__retarget_lock_acquire_recursive>
 800afa2:	bf00      	nop
 800afa4:	20003714 	.word	0x20003714

0800afa8 <__sfp_lock_release>:
 800afa8:	4801      	ldr	r0, [pc, #4]	; (800afb0 <__sfp_lock_release+0x8>)
 800afaa:	f000 bc21 	b.w	800b7f0 <__retarget_lock_release_recursive>
 800afae:	bf00      	nop
 800afb0:	20003714 	.word	0x20003714

0800afb4 <__sinit_lock_acquire>:
 800afb4:	4801      	ldr	r0, [pc, #4]	; (800afbc <__sinit_lock_acquire+0x8>)
 800afb6:	f000 bc1a 	b.w	800b7ee <__retarget_lock_acquire_recursive>
 800afba:	bf00      	nop
 800afbc:	2000370f 	.word	0x2000370f

0800afc0 <__sinit_lock_release>:
 800afc0:	4801      	ldr	r0, [pc, #4]	; (800afc8 <__sinit_lock_release+0x8>)
 800afc2:	f000 bc15 	b.w	800b7f0 <__retarget_lock_release_recursive>
 800afc6:	bf00      	nop
 800afc8:	2000370f 	.word	0x2000370f

0800afcc <__sinit>:
 800afcc:	b510      	push	{r4, lr}
 800afce:	4604      	mov	r4, r0
 800afd0:	f7ff fff0 	bl	800afb4 <__sinit_lock_acquire>
 800afd4:	69a3      	ldr	r3, [r4, #24]
 800afd6:	b11b      	cbz	r3, 800afe0 <__sinit+0x14>
 800afd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800afdc:	f7ff bff0 	b.w	800afc0 <__sinit_lock_release>
 800afe0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800afe4:	6523      	str	r3, [r4, #80]	; 0x50
 800afe6:	4b13      	ldr	r3, [pc, #76]	; (800b034 <__sinit+0x68>)
 800afe8:	4a13      	ldr	r2, [pc, #76]	; (800b038 <__sinit+0x6c>)
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	62a2      	str	r2, [r4, #40]	; 0x28
 800afee:	42a3      	cmp	r3, r4
 800aff0:	bf04      	itt	eq
 800aff2:	2301      	moveq	r3, #1
 800aff4:	61a3      	streq	r3, [r4, #24]
 800aff6:	4620      	mov	r0, r4
 800aff8:	f000 f820 	bl	800b03c <__sfp>
 800affc:	6060      	str	r0, [r4, #4]
 800affe:	4620      	mov	r0, r4
 800b000:	f000 f81c 	bl	800b03c <__sfp>
 800b004:	60a0      	str	r0, [r4, #8]
 800b006:	4620      	mov	r0, r4
 800b008:	f000 f818 	bl	800b03c <__sfp>
 800b00c:	2200      	movs	r2, #0
 800b00e:	60e0      	str	r0, [r4, #12]
 800b010:	2104      	movs	r1, #4
 800b012:	6860      	ldr	r0, [r4, #4]
 800b014:	f7ff ff82 	bl	800af1c <std>
 800b018:	68a0      	ldr	r0, [r4, #8]
 800b01a:	2201      	movs	r2, #1
 800b01c:	2109      	movs	r1, #9
 800b01e:	f7ff ff7d 	bl	800af1c <std>
 800b022:	68e0      	ldr	r0, [r4, #12]
 800b024:	2202      	movs	r2, #2
 800b026:	2112      	movs	r1, #18
 800b028:	f7ff ff78 	bl	800af1c <std>
 800b02c:	2301      	movs	r3, #1
 800b02e:	61a3      	str	r3, [r4, #24]
 800b030:	e7d2      	b.n	800afd8 <__sinit+0xc>
 800b032:	bf00      	nop
 800b034:	0800e158 	.word	0x0800e158
 800b038:	0800af65 	.word	0x0800af65

0800b03c <__sfp>:
 800b03c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b03e:	4607      	mov	r7, r0
 800b040:	f7ff ffac 	bl	800af9c <__sfp_lock_acquire>
 800b044:	4b1e      	ldr	r3, [pc, #120]	; (800b0c0 <__sfp+0x84>)
 800b046:	681e      	ldr	r6, [r3, #0]
 800b048:	69b3      	ldr	r3, [r6, #24]
 800b04a:	b913      	cbnz	r3, 800b052 <__sfp+0x16>
 800b04c:	4630      	mov	r0, r6
 800b04e:	f7ff ffbd 	bl	800afcc <__sinit>
 800b052:	3648      	adds	r6, #72	; 0x48
 800b054:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b058:	3b01      	subs	r3, #1
 800b05a:	d503      	bpl.n	800b064 <__sfp+0x28>
 800b05c:	6833      	ldr	r3, [r6, #0]
 800b05e:	b30b      	cbz	r3, 800b0a4 <__sfp+0x68>
 800b060:	6836      	ldr	r6, [r6, #0]
 800b062:	e7f7      	b.n	800b054 <__sfp+0x18>
 800b064:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b068:	b9d5      	cbnz	r5, 800b0a0 <__sfp+0x64>
 800b06a:	4b16      	ldr	r3, [pc, #88]	; (800b0c4 <__sfp+0x88>)
 800b06c:	60e3      	str	r3, [r4, #12]
 800b06e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b072:	6665      	str	r5, [r4, #100]	; 0x64
 800b074:	f000 fbba 	bl	800b7ec <__retarget_lock_init_recursive>
 800b078:	f7ff ff96 	bl	800afa8 <__sfp_lock_release>
 800b07c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b080:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b084:	6025      	str	r5, [r4, #0]
 800b086:	61a5      	str	r5, [r4, #24]
 800b088:	2208      	movs	r2, #8
 800b08a:	4629      	mov	r1, r5
 800b08c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b090:	f7fd f9a4 	bl	80083dc <memset>
 800b094:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b098:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b09c:	4620      	mov	r0, r4
 800b09e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0a0:	3468      	adds	r4, #104	; 0x68
 800b0a2:	e7d9      	b.n	800b058 <__sfp+0x1c>
 800b0a4:	2104      	movs	r1, #4
 800b0a6:	4638      	mov	r0, r7
 800b0a8:	f7ff ff62 	bl	800af70 <__sfmoreglue>
 800b0ac:	4604      	mov	r4, r0
 800b0ae:	6030      	str	r0, [r6, #0]
 800b0b0:	2800      	cmp	r0, #0
 800b0b2:	d1d5      	bne.n	800b060 <__sfp+0x24>
 800b0b4:	f7ff ff78 	bl	800afa8 <__sfp_lock_release>
 800b0b8:	230c      	movs	r3, #12
 800b0ba:	603b      	str	r3, [r7, #0]
 800b0bc:	e7ee      	b.n	800b09c <__sfp+0x60>
 800b0be:	bf00      	nop
 800b0c0:	0800e158 	.word	0x0800e158
 800b0c4:	ffff0001 	.word	0xffff0001

0800b0c8 <_fwalk_reent>:
 800b0c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0cc:	4606      	mov	r6, r0
 800b0ce:	4688      	mov	r8, r1
 800b0d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b0d4:	2700      	movs	r7, #0
 800b0d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b0da:	f1b9 0901 	subs.w	r9, r9, #1
 800b0de:	d505      	bpl.n	800b0ec <_fwalk_reent+0x24>
 800b0e0:	6824      	ldr	r4, [r4, #0]
 800b0e2:	2c00      	cmp	r4, #0
 800b0e4:	d1f7      	bne.n	800b0d6 <_fwalk_reent+0xe>
 800b0e6:	4638      	mov	r0, r7
 800b0e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0ec:	89ab      	ldrh	r3, [r5, #12]
 800b0ee:	2b01      	cmp	r3, #1
 800b0f0:	d907      	bls.n	800b102 <_fwalk_reent+0x3a>
 800b0f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b0f6:	3301      	adds	r3, #1
 800b0f8:	d003      	beq.n	800b102 <_fwalk_reent+0x3a>
 800b0fa:	4629      	mov	r1, r5
 800b0fc:	4630      	mov	r0, r6
 800b0fe:	47c0      	blx	r8
 800b100:	4307      	orrs	r7, r0
 800b102:	3568      	adds	r5, #104	; 0x68
 800b104:	e7e9      	b.n	800b0da <_fwalk_reent+0x12>

0800b106 <rshift>:
 800b106:	6903      	ldr	r3, [r0, #16]
 800b108:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b10c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b110:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b114:	f100 0414 	add.w	r4, r0, #20
 800b118:	dd45      	ble.n	800b1a6 <rshift+0xa0>
 800b11a:	f011 011f 	ands.w	r1, r1, #31
 800b11e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b122:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b126:	d10c      	bne.n	800b142 <rshift+0x3c>
 800b128:	f100 0710 	add.w	r7, r0, #16
 800b12c:	4629      	mov	r1, r5
 800b12e:	42b1      	cmp	r1, r6
 800b130:	d334      	bcc.n	800b19c <rshift+0x96>
 800b132:	1a9b      	subs	r3, r3, r2
 800b134:	009b      	lsls	r3, r3, #2
 800b136:	1eea      	subs	r2, r5, #3
 800b138:	4296      	cmp	r6, r2
 800b13a:	bf38      	it	cc
 800b13c:	2300      	movcc	r3, #0
 800b13e:	4423      	add	r3, r4
 800b140:	e015      	b.n	800b16e <rshift+0x68>
 800b142:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b146:	f1c1 0820 	rsb	r8, r1, #32
 800b14a:	40cf      	lsrs	r7, r1
 800b14c:	f105 0e04 	add.w	lr, r5, #4
 800b150:	46a1      	mov	r9, r4
 800b152:	4576      	cmp	r6, lr
 800b154:	46f4      	mov	ip, lr
 800b156:	d815      	bhi.n	800b184 <rshift+0x7e>
 800b158:	1a9b      	subs	r3, r3, r2
 800b15a:	009a      	lsls	r2, r3, #2
 800b15c:	3a04      	subs	r2, #4
 800b15e:	3501      	adds	r5, #1
 800b160:	42ae      	cmp	r6, r5
 800b162:	bf38      	it	cc
 800b164:	2200      	movcc	r2, #0
 800b166:	18a3      	adds	r3, r4, r2
 800b168:	50a7      	str	r7, [r4, r2]
 800b16a:	b107      	cbz	r7, 800b16e <rshift+0x68>
 800b16c:	3304      	adds	r3, #4
 800b16e:	1b1a      	subs	r2, r3, r4
 800b170:	42a3      	cmp	r3, r4
 800b172:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b176:	bf08      	it	eq
 800b178:	2300      	moveq	r3, #0
 800b17a:	6102      	str	r2, [r0, #16]
 800b17c:	bf08      	it	eq
 800b17e:	6143      	streq	r3, [r0, #20]
 800b180:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b184:	f8dc c000 	ldr.w	ip, [ip]
 800b188:	fa0c fc08 	lsl.w	ip, ip, r8
 800b18c:	ea4c 0707 	orr.w	r7, ip, r7
 800b190:	f849 7b04 	str.w	r7, [r9], #4
 800b194:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b198:	40cf      	lsrs	r7, r1
 800b19a:	e7da      	b.n	800b152 <rshift+0x4c>
 800b19c:	f851 cb04 	ldr.w	ip, [r1], #4
 800b1a0:	f847 cf04 	str.w	ip, [r7, #4]!
 800b1a4:	e7c3      	b.n	800b12e <rshift+0x28>
 800b1a6:	4623      	mov	r3, r4
 800b1a8:	e7e1      	b.n	800b16e <rshift+0x68>

0800b1aa <__hexdig_fun>:
 800b1aa:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b1ae:	2b09      	cmp	r3, #9
 800b1b0:	d802      	bhi.n	800b1b8 <__hexdig_fun+0xe>
 800b1b2:	3820      	subs	r0, #32
 800b1b4:	b2c0      	uxtb	r0, r0
 800b1b6:	4770      	bx	lr
 800b1b8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b1bc:	2b05      	cmp	r3, #5
 800b1be:	d801      	bhi.n	800b1c4 <__hexdig_fun+0x1a>
 800b1c0:	3847      	subs	r0, #71	; 0x47
 800b1c2:	e7f7      	b.n	800b1b4 <__hexdig_fun+0xa>
 800b1c4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b1c8:	2b05      	cmp	r3, #5
 800b1ca:	d801      	bhi.n	800b1d0 <__hexdig_fun+0x26>
 800b1cc:	3827      	subs	r0, #39	; 0x27
 800b1ce:	e7f1      	b.n	800b1b4 <__hexdig_fun+0xa>
 800b1d0:	2000      	movs	r0, #0
 800b1d2:	4770      	bx	lr

0800b1d4 <__gethex>:
 800b1d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1d8:	ed2d 8b02 	vpush	{d8}
 800b1dc:	b089      	sub	sp, #36	; 0x24
 800b1de:	ee08 0a10 	vmov	s16, r0
 800b1e2:	9304      	str	r3, [sp, #16]
 800b1e4:	4bbc      	ldr	r3, [pc, #752]	; (800b4d8 <__gethex+0x304>)
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	9301      	str	r3, [sp, #4]
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	468b      	mov	fp, r1
 800b1ee:	4690      	mov	r8, r2
 800b1f0:	f7f5 f83e 	bl	8000270 <strlen>
 800b1f4:	9b01      	ldr	r3, [sp, #4]
 800b1f6:	f8db 2000 	ldr.w	r2, [fp]
 800b1fa:	4403      	add	r3, r0
 800b1fc:	4682      	mov	sl, r0
 800b1fe:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b202:	9305      	str	r3, [sp, #20]
 800b204:	1c93      	adds	r3, r2, #2
 800b206:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b20a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b20e:	32fe      	adds	r2, #254	; 0xfe
 800b210:	18d1      	adds	r1, r2, r3
 800b212:	461f      	mov	r7, r3
 800b214:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b218:	9100      	str	r1, [sp, #0]
 800b21a:	2830      	cmp	r0, #48	; 0x30
 800b21c:	d0f8      	beq.n	800b210 <__gethex+0x3c>
 800b21e:	f7ff ffc4 	bl	800b1aa <__hexdig_fun>
 800b222:	4604      	mov	r4, r0
 800b224:	2800      	cmp	r0, #0
 800b226:	d13a      	bne.n	800b29e <__gethex+0xca>
 800b228:	9901      	ldr	r1, [sp, #4]
 800b22a:	4652      	mov	r2, sl
 800b22c:	4638      	mov	r0, r7
 800b22e:	f7fe f868 	bl	8009302 <strncmp>
 800b232:	4605      	mov	r5, r0
 800b234:	2800      	cmp	r0, #0
 800b236:	d168      	bne.n	800b30a <__gethex+0x136>
 800b238:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b23c:	eb07 060a 	add.w	r6, r7, sl
 800b240:	f7ff ffb3 	bl	800b1aa <__hexdig_fun>
 800b244:	2800      	cmp	r0, #0
 800b246:	d062      	beq.n	800b30e <__gethex+0x13a>
 800b248:	4633      	mov	r3, r6
 800b24a:	7818      	ldrb	r0, [r3, #0]
 800b24c:	2830      	cmp	r0, #48	; 0x30
 800b24e:	461f      	mov	r7, r3
 800b250:	f103 0301 	add.w	r3, r3, #1
 800b254:	d0f9      	beq.n	800b24a <__gethex+0x76>
 800b256:	f7ff ffa8 	bl	800b1aa <__hexdig_fun>
 800b25a:	2301      	movs	r3, #1
 800b25c:	fab0 f480 	clz	r4, r0
 800b260:	0964      	lsrs	r4, r4, #5
 800b262:	4635      	mov	r5, r6
 800b264:	9300      	str	r3, [sp, #0]
 800b266:	463a      	mov	r2, r7
 800b268:	4616      	mov	r6, r2
 800b26a:	3201      	adds	r2, #1
 800b26c:	7830      	ldrb	r0, [r6, #0]
 800b26e:	f7ff ff9c 	bl	800b1aa <__hexdig_fun>
 800b272:	2800      	cmp	r0, #0
 800b274:	d1f8      	bne.n	800b268 <__gethex+0x94>
 800b276:	9901      	ldr	r1, [sp, #4]
 800b278:	4652      	mov	r2, sl
 800b27a:	4630      	mov	r0, r6
 800b27c:	f7fe f841 	bl	8009302 <strncmp>
 800b280:	b980      	cbnz	r0, 800b2a4 <__gethex+0xd0>
 800b282:	b94d      	cbnz	r5, 800b298 <__gethex+0xc4>
 800b284:	eb06 050a 	add.w	r5, r6, sl
 800b288:	462a      	mov	r2, r5
 800b28a:	4616      	mov	r6, r2
 800b28c:	3201      	adds	r2, #1
 800b28e:	7830      	ldrb	r0, [r6, #0]
 800b290:	f7ff ff8b 	bl	800b1aa <__hexdig_fun>
 800b294:	2800      	cmp	r0, #0
 800b296:	d1f8      	bne.n	800b28a <__gethex+0xb6>
 800b298:	1bad      	subs	r5, r5, r6
 800b29a:	00ad      	lsls	r5, r5, #2
 800b29c:	e004      	b.n	800b2a8 <__gethex+0xd4>
 800b29e:	2400      	movs	r4, #0
 800b2a0:	4625      	mov	r5, r4
 800b2a2:	e7e0      	b.n	800b266 <__gethex+0x92>
 800b2a4:	2d00      	cmp	r5, #0
 800b2a6:	d1f7      	bne.n	800b298 <__gethex+0xc4>
 800b2a8:	7833      	ldrb	r3, [r6, #0]
 800b2aa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b2ae:	2b50      	cmp	r3, #80	; 0x50
 800b2b0:	d13b      	bne.n	800b32a <__gethex+0x156>
 800b2b2:	7873      	ldrb	r3, [r6, #1]
 800b2b4:	2b2b      	cmp	r3, #43	; 0x2b
 800b2b6:	d02c      	beq.n	800b312 <__gethex+0x13e>
 800b2b8:	2b2d      	cmp	r3, #45	; 0x2d
 800b2ba:	d02e      	beq.n	800b31a <__gethex+0x146>
 800b2bc:	1c71      	adds	r1, r6, #1
 800b2be:	f04f 0900 	mov.w	r9, #0
 800b2c2:	7808      	ldrb	r0, [r1, #0]
 800b2c4:	f7ff ff71 	bl	800b1aa <__hexdig_fun>
 800b2c8:	1e43      	subs	r3, r0, #1
 800b2ca:	b2db      	uxtb	r3, r3
 800b2cc:	2b18      	cmp	r3, #24
 800b2ce:	d82c      	bhi.n	800b32a <__gethex+0x156>
 800b2d0:	f1a0 0210 	sub.w	r2, r0, #16
 800b2d4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b2d8:	f7ff ff67 	bl	800b1aa <__hexdig_fun>
 800b2dc:	1e43      	subs	r3, r0, #1
 800b2de:	b2db      	uxtb	r3, r3
 800b2e0:	2b18      	cmp	r3, #24
 800b2e2:	d91d      	bls.n	800b320 <__gethex+0x14c>
 800b2e4:	f1b9 0f00 	cmp.w	r9, #0
 800b2e8:	d000      	beq.n	800b2ec <__gethex+0x118>
 800b2ea:	4252      	negs	r2, r2
 800b2ec:	4415      	add	r5, r2
 800b2ee:	f8cb 1000 	str.w	r1, [fp]
 800b2f2:	b1e4      	cbz	r4, 800b32e <__gethex+0x15a>
 800b2f4:	9b00      	ldr	r3, [sp, #0]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	bf14      	ite	ne
 800b2fa:	2700      	movne	r7, #0
 800b2fc:	2706      	moveq	r7, #6
 800b2fe:	4638      	mov	r0, r7
 800b300:	b009      	add	sp, #36	; 0x24
 800b302:	ecbd 8b02 	vpop	{d8}
 800b306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b30a:	463e      	mov	r6, r7
 800b30c:	4625      	mov	r5, r4
 800b30e:	2401      	movs	r4, #1
 800b310:	e7ca      	b.n	800b2a8 <__gethex+0xd4>
 800b312:	f04f 0900 	mov.w	r9, #0
 800b316:	1cb1      	adds	r1, r6, #2
 800b318:	e7d3      	b.n	800b2c2 <__gethex+0xee>
 800b31a:	f04f 0901 	mov.w	r9, #1
 800b31e:	e7fa      	b.n	800b316 <__gethex+0x142>
 800b320:	230a      	movs	r3, #10
 800b322:	fb03 0202 	mla	r2, r3, r2, r0
 800b326:	3a10      	subs	r2, #16
 800b328:	e7d4      	b.n	800b2d4 <__gethex+0x100>
 800b32a:	4631      	mov	r1, r6
 800b32c:	e7df      	b.n	800b2ee <__gethex+0x11a>
 800b32e:	1bf3      	subs	r3, r6, r7
 800b330:	3b01      	subs	r3, #1
 800b332:	4621      	mov	r1, r4
 800b334:	2b07      	cmp	r3, #7
 800b336:	dc0b      	bgt.n	800b350 <__gethex+0x17c>
 800b338:	ee18 0a10 	vmov	r0, s16
 800b33c:	f000 fad8 	bl	800b8f0 <_Balloc>
 800b340:	4604      	mov	r4, r0
 800b342:	b940      	cbnz	r0, 800b356 <__gethex+0x182>
 800b344:	4b65      	ldr	r3, [pc, #404]	; (800b4dc <__gethex+0x308>)
 800b346:	4602      	mov	r2, r0
 800b348:	21de      	movs	r1, #222	; 0xde
 800b34a:	4865      	ldr	r0, [pc, #404]	; (800b4e0 <__gethex+0x30c>)
 800b34c:	f001 fc38 	bl	800cbc0 <__assert_func>
 800b350:	3101      	adds	r1, #1
 800b352:	105b      	asrs	r3, r3, #1
 800b354:	e7ee      	b.n	800b334 <__gethex+0x160>
 800b356:	f100 0914 	add.w	r9, r0, #20
 800b35a:	f04f 0b00 	mov.w	fp, #0
 800b35e:	f1ca 0301 	rsb	r3, sl, #1
 800b362:	f8cd 9008 	str.w	r9, [sp, #8]
 800b366:	f8cd b000 	str.w	fp, [sp]
 800b36a:	9306      	str	r3, [sp, #24]
 800b36c:	42b7      	cmp	r7, r6
 800b36e:	d340      	bcc.n	800b3f2 <__gethex+0x21e>
 800b370:	9802      	ldr	r0, [sp, #8]
 800b372:	9b00      	ldr	r3, [sp, #0]
 800b374:	f840 3b04 	str.w	r3, [r0], #4
 800b378:	eba0 0009 	sub.w	r0, r0, r9
 800b37c:	1080      	asrs	r0, r0, #2
 800b37e:	0146      	lsls	r6, r0, #5
 800b380:	6120      	str	r0, [r4, #16]
 800b382:	4618      	mov	r0, r3
 800b384:	f000 fbaa 	bl	800badc <__hi0bits>
 800b388:	1a30      	subs	r0, r6, r0
 800b38a:	f8d8 6000 	ldr.w	r6, [r8]
 800b38e:	42b0      	cmp	r0, r6
 800b390:	dd63      	ble.n	800b45a <__gethex+0x286>
 800b392:	1b87      	subs	r7, r0, r6
 800b394:	4639      	mov	r1, r7
 800b396:	4620      	mov	r0, r4
 800b398:	f000 ff44 	bl	800c224 <__any_on>
 800b39c:	4682      	mov	sl, r0
 800b39e:	b1a8      	cbz	r0, 800b3cc <__gethex+0x1f8>
 800b3a0:	1e7b      	subs	r3, r7, #1
 800b3a2:	1159      	asrs	r1, r3, #5
 800b3a4:	f003 021f 	and.w	r2, r3, #31
 800b3a8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b3ac:	f04f 0a01 	mov.w	sl, #1
 800b3b0:	fa0a f202 	lsl.w	r2, sl, r2
 800b3b4:	420a      	tst	r2, r1
 800b3b6:	d009      	beq.n	800b3cc <__gethex+0x1f8>
 800b3b8:	4553      	cmp	r3, sl
 800b3ba:	dd05      	ble.n	800b3c8 <__gethex+0x1f4>
 800b3bc:	1eb9      	subs	r1, r7, #2
 800b3be:	4620      	mov	r0, r4
 800b3c0:	f000 ff30 	bl	800c224 <__any_on>
 800b3c4:	2800      	cmp	r0, #0
 800b3c6:	d145      	bne.n	800b454 <__gethex+0x280>
 800b3c8:	f04f 0a02 	mov.w	sl, #2
 800b3cc:	4639      	mov	r1, r7
 800b3ce:	4620      	mov	r0, r4
 800b3d0:	f7ff fe99 	bl	800b106 <rshift>
 800b3d4:	443d      	add	r5, r7
 800b3d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b3da:	42ab      	cmp	r3, r5
 800b3dc:	da4c      	bge.n	800b478 <__gethex+0x2a4>
 800b3de:	ee18 0a10 	vmov	r0, s16
 800b3e2:	4621      	mov	r1, r4
 800b3e4:	f000 fac4 	bl	800b970 <_Bfree>
 800b3e8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	6013      	str	r3, [r2, #0]
 800b3ee:	27a3      	movs	r7, #163	; 0xa3
 800b3f0:	e785      	b.n	800b2fe <__gethex+0x12a>
 800b3f2:	1e73      	subs	r3, r6, #1
 800b3f4:	9a05      	ldr	r2, [sp, #20]
 800b3f6:	9303      	str	r3, [sp, #12]
 800b3f8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b3fc:	4293      	cmp	r3, r2
 800b3fe:	d019      	beq.n	800b434 <__gethex+0x260>
 800b400:	f1bb 0f20 	cmp.w	fp, #32
 800b404:	d107      	bne.n	800b416 <__gethex+0x242>
 800b406:	9b02      	ldr	r3, [sp, #8]
 800b408:	9a00      	ldr	r2, [sp, #0]
 800b40a:	f843 2b04 	str.w	r2, [r3], #4
 800b40e:	9302      	str	r3, [sp, #8]
 800b410:	2300      	movs	r3, #0
 800b412:	9300      	str	r3, [sp, #0]
 800b414:	469b      	mov	fp, r3
 800b416:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b41a:	f7ff fec6 	bl	800b1aa <__hexdig_fun>
 800b41e:	9b00      	ldr	r3, [sp, #0]
 800b420:	f000 000f 	and.w	r0, r0, #15
 800b424:	fa00 f00b 	lsl.w	r0, r0, fp
 800b428:	4303      	orrs	r3, r0
 800b42a:	9300      	str	r3, [sp, #0]
 800b42c:	f10b 0b04 	add.w	fp, fp, #4
 800b430:	9b03      	ldr	r3, [sp, #12]
 800b432:	e00d      	b.n	800b450 <__gethex+0x27c>
 800b434:	9b03      	ldr	r3, [sp, #12]
 800b436:	9a06      	ldr	r2, [sp, #24]
 800b438:	4413      	add	r3, r2
 800b43a:	42bb      	cmp	r3, r7
 800b43c:	d3e0      	bcc.n	800b400 <__gethex+0x22c>
 800b43e:	4618      	mov	r0, r3
 800b440:	9901      	ldr	r1, [sp, #4]
 800b442:	9307      	str	r3, [sp, #28]
 800b444:	4652      	mov	r2, sl
 800b446:	f7fd ff5c 	bl	8009302 <strncmp>
 800b44a:	9b07      	ldr	r3, [sp, #28]
 800b44c:	2800      	cmp	r0, #0
 800b44e:	d1d7      	bne.n	800b400 <__gethex+0x22c>
 800b450:	461e      	mov	r6, r3
 800b452:	e78b      	b.n	800b36c <__gethex+0x198>
 800b454:	f04f 0a03 	mov.w	sl, #3
 800b458:	e7b8      	b.n	800b3cc <__gethex+0x1f8>
 800b45a:	da0a      	bge.n	800b472 <__gethex+0x29e>
 800b45c:	1a37      	subs	r7, r6, r0
 800b45e:	4621      	mov	r1, r4
 800b460:	ee18 0a10 	vmov	r0, s16
 800b464:	463a      	mov	r2, r7
 800b466:	f000 fc9f 	bl	800bda8 <__lshift>
 800b46a:	1bed      	subs	r5, r5, r7
 800b46c:	4604      	mov	r4, r0
 800b46e:	f100 0914 	add.w	r9, r0, #20
 800b472:	f04f 0a00 	mov.w	sl, #0
 800b476:	e7ae      	b.n	800b3d6 <__gethex+0x202>
 800b478:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b47c:	42a8      	cmp	r0, r5
 800b47e:	dd72      	ble.n	800b566 <__gethex+0x392>
 800b480:	1b45      	subs	r5, r0, r5
 800b482:	42ae      	cmp	r6, r5
 800b484:	dc36      	bgt.n	800b4f4 <__gethex+0x320>
 800b486:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b48a:	2b02      	cmp	r3, #2
 800b48c:	d02a      	beq.n	800b4e4 <__gethex+0x310>
 800b48e:	2b03      	cmp	r3, #3
 800b490:	d02c      	beq.n	800b4ec <__gethex+0x318>
 800b492:	2b01      	cmp	r3, #1
 800b494:	d115      	bne.n	800b4c2 <__gethex+0x2ee>
 800b496:	42ae      	cmp	r6, r5
 800b498:	d113      	bne.n	800b4c2 <__gethex+0x2ee>
 800b49a:	2e01      	cmp	r6, #1
 800b49c:	d10b      	bne.n	800b4b6 <__gethex+0x2e2>
 800b49e:	9a04      	ldr	r2, [sp, #16]
 800b4a0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b4a4:	6013      	str	r3, [r2, #0]
 800b4a6:	2301      	movs	r3, #1
 800b4a8:	6123      	str	r3, [r4, #16]
 800b4aa:	f8c9 3000 	str.w	r3, [r9]
 800b4ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b4b0:	2762      	movs	r7, #98	; 0x62
 800b4b2:	601c      	str	r4, [r3, #0]
 800b4b4:	e723      	b.n	800b2fe <__gethex+0x12a>
 800b4b6:	1e71      	subs	r1, r6, #1
 800b4b8:	4620      	mov	r0, r4
 800b4ba:	f000 feb3 	bl	800c224 <__any_on>
 800b4be:	2800      	cmp	r0, #0
 800b4c0:	d1ed      	bne.n	800b49e <__gethex+0x2ca>
 800b4c2:	ee18 0a10 	vmov	r0, s16
 800b4c6:	4621      	mov	r1, r4
 800b4c8:	f000 fa52 	bl	800b970 <_Bfree>
 800b4cc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	6013      	str	r3, [r2, #0]
 800b4d2:	2750      	movs	r7, #80	; 0x50
 800b4d4:	e713      	b.n	800b2fe <__gethex+0x12a>
 800b4d6:	bf00      	nop
 800b4d8:	0800e44c 	.word	0x0800e44c
 800b4dc:	0800e36c 	.word	0x0800e36c
 800b4e0:	0800e3e0 	.word	0x0800e3e0
 800b4e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d1eb      	bne.n	800b4c2 <__gethex+0x2ee>
 800b4ea:	e7d8      	b.n	800b49e <__gethex+0x2ca>
 800b4ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d1d5      	bne.n	800b49e <__gethex+0x2ca>
 800b4f2:	e7e6      	b.n	800b4c2 <__gethex+0x2ee>
 800b4f4:	1e6f      	subs	r7, r5, #1
 800b4f6:	f1ba 0f00 	cmp.w	sl, #0
 800b4fa:	d131      	bne.n	800b560 <__gethex+0x38c>
 800b4fc:	b127      	cbz	r7, 800b508 <__gethex+0x334>
 800b4fe:	4639      	mov	r1, r7
 800b500:	4620      	mov	r0, r4
 800b502:	f000 fe8f 	bl	800c224 <__any_on>
 800b506:	4682      	mov	sl, r0
 800b508:	117b      	asrs	r3, r7, #5
 800b50a:	2101      	movs	r1, #1
 800b50c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b510:	f007 071f 	and.w	r7, r7, #31
 800b514:	fa01 f707 	lsl.w	r7, r1, r7
 800b518:	421f      	tst	r7, r3
 800b51a:	4629      	mov	r1, r5
 800b51c:	4620      	mov	r0, r4
 800b51e:	bf18      	it	ne
 800b520:	f04a 0a02 	orrne.w	sl, sl, #2
 800b524:	1b76      	subs	r6, r6, r5
 800b526:	f7ff fdee 	bl	800b106 <rshift>
 800b52a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b52e:	2702      	movs	r7, #2
 800b530:	f1ba 0f00 	cmp.w	sl, #0
 800b534:	d048      	beq.n	800b5c8 <__gethex+0x3f4>
 800b536:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b53a:	2b02      	cmp	r3, #2
 800b53c:	d015      	beq.n	800b56a <__gethex+0x396>
 800b53e:	2b03      	cmp	r3, #3
 800b540:	d017      	beq.n	800b572 <__gethex+0x39e>
 800b542:	2b01      	cmp	r3, #1
 800b544:	d109      	bne.n	800b55a <__gethex+0x386>
 800b546:	f01a 0f02 	tst.w	sl, #2
 800b54a:	d006      	beq.n	800b55a <__gethex+0x386>
 800b54c:	f8d9 0000 	ldr.w	r0, [r9]
 800b550:	ea4a 0a00 	orr.w	sl, sl, r0
 800b554:	f01a 0f01 	tst.w	sl, #1
 800b558:	d10e      	bne.n	800b578 <__gethex+0x3a4>
 800b55a:	f047 0710 	orr.w	r7, r7, #16
 800b55e:	e033      	b.n	800b5c8 <__gethex+0x3f4>
 800b560:	f04f 0a01 	mov.w	sl, #1
 800b564:	e7d0      	b.n	800b508 <__gethex+0x334>
 800b566:	2701      	movs	r7, #1
 800b568:	e7e2      	b.n	800b530 <__gethex+0x35c>
 800b56a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b56c:	f1c3 0301 	rsb	r3, r3, #1
 800b570:	9315      	str	r3, [sp, #84]	; 0x54
 800b572:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b574:	2b00      	cmp	r3, #0
 800b576:	d0f0      	beq.n	800b55a <__gethex+0x386>
 800b578:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b57c:	f104 0314 	add.w	r3, r4, #20
 800b580:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b584:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b588:	f04f 0c00 	mov.w	ip, #0
 800b58c:	4618      	mov	r0, r3
 800b58e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b592:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b596:	d01c      	beq.n	800b5d2 <__gethex+0x3fe>
 800b598:	3201      	adds	r2, #1
 800b59a:	6002      	str	r2, [r0, #0]
 800b59c:	2f02      	cmp	r7, #2
 800b59e:	f104 0314 	add.w	r3, r4, #20
 800b5a2:	d13f      	bne.n	800b624 <__gethex+0x450>
 800b5a4:	f8d8 2000 	ldr.w	r2, [r8]
 800b5a8:	3a01      	subs	r2, #1
 800b5aa:	42b2      	cmp	r2, r6
 800b5ac:	d10a      	bne.n	800b5c4 <__gethex+0x3f0>
 800b5ae:	1171      	asrs	r1, r6, #5
 800b5b0:	2201      	movs	r2, #1
 800b5b2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b5b6:	f006 061f 	and.w	r6, r6, #31
 800b5ba:	fa02 f606 	lsl.w	r6, r2, r6
 800b5be:	421e      	tst	r6, r3
 800b5c0:	bf18      	it	ne
 800b5c2:	4617      	movne	r7, r2
 800b5c4:	f047 0720 	orr.w	r7, r7, #32
 800b5c8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b5ca:	601c      	str	r4, [r3, #0]
 800b5cc:	9b04      	ldr	r3, [sp, #16]
 800b5ce:	601d      	str	r5, [r3, #0]
 800b5d0:	e695      	b.n	800b2fe <__gethex+0x12a>
 800b5d2:	4299      	cmp	r1, r3
 800b5d4:	f843 cc04 	str.w	ip, [r3, #-4]
 800b5d8:	d8d8      	bhi.n	800b58c <__gethex+0x3b8>
 800b5da:	68a3      	ldr	r3, [r4, #8]
 800b5dc:	459b      	cmp	fp, r3
 800b5de:	db19      	blt.n	800b614 <__gethex+0x440>
 800b5e0:	6861      	ldr	r1, [r4, #4]
 800b5e2:	ee18 0a10 	vmov	r0, s16
 800b5e6:	3101      	adds	r1, #1
 800b5e8:	f000 f982 	bl	800b8f0 <_Balloc>
 800b5ec:	4681      	mov	r9, r0
 800b5ee:	b918      	cbnz	r0, 800b5f8 <__gethex+0x424>
 800b5f0:	4b1a      	ldr	r3, [pc, #104]	; (800b65c <__gethex+0x488>)
 800b5f2:	4602      	mov	r2, r0
 800b5f4:	2184      	movs	r1, #132	; 0x84
 800b5f6:	e6a8      	b.n	800b34a <__gethex+0x176>
 800b5f8:	6922      	ldr	r2, [r4, #16]
 800b5fa:	3202      	adds	r2, #2
 800b5fc:	f104 010c 	add.w	r1, r4, #12
 800b600:	0092      	lsls	r2, r2, #2
 800b602:	300c      	adds	r0, #12
 800b604:	f7fc fedc 	bl	80083c0 <memcpy>
 800b608:	4621      	mov	r1, r4
 800b60a:	ee18 0a10 	vmov	r0, s16
 800b60e:	f000 f9af 	bl	800b970 <_Bfree>
 800b612:	464c      	mov	r4, r9
 800b614:	6923      	ldr	r3, [r4, #16]
 800b616:	1c5a      	adds	r2, r3, #1
 800b618:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b61c:	6122      	str	r2, [r4, #16]
 800b61e:	2201      	movs	r2, #1
 800b620:	615a      	str	r2, [r3, #20]
 800b622:	e7bb      	b.n	800b59c <__gethex+0x3c8>
 800b624:	6922      	ldr	r2, [r4, #16]
 800b626:	455a      	cmp	r2, fp
 800b628:	dd0b      	ble.n	800b642 <__gethex+0x46e>
 800b62a:	2101      	movs	r1, #1
 800b62c:	4620      	mov	r0, r4
 800b62e:	f7ff fd6a 	bl	800b106 <rshift>
 800b632:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b636:	3501      	adds	r5, #1
 800b638:	42ab      	cmp	r3, r5
 800b63a:	f6ff aed0 	blt.w	800b3de <__gethex+0x20a>
 800b63e:	2701      	movs	r7, #1
 800b640:	e7c0      	b.n	800b5c4 <__gethex+0x3f0>
 800b642:	f016 061f 	ands.w	r6, r6, #31
 800b646:	d0fa      	beq.n	800b63e <__gethex+0x46a>
 800b648:	449a      	add	sl, r3
 800b64a:	f1c6 0620 	rsb	r6, r6, #32
 800b64e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800b652:	f000 fa43 	bl	800badc <__hi0bits>
 800b656:	42b0      	cmp	r0, r6
 800b658:	dbe7      	blt.n	800b62a <__gethex+0x456>
 800b65a:	e7f0      	b.n	800b63e <__gethex+0x46a>
 800b65c:	0800e36c 	.word	0x0800e36c

0800b660 <L_shift>:
 800b660:	f1c2 0208 	rsb	r2, r2, #8
 800b664:	0092      	lsls	r2, r2, #2
 800b666:	b570      	push	{r4, r5, r6, lr}
 800b668:	f1c2 0620 	rsb	r6, r2, #32
 800b66c:	6843      	ldr	r3, [r0, #4]
 800b66e:	6804      	ldr	r4, [r0, #0]
 800b670:	fa03 f506 	lsl.w	r5, r3, r6
 800b674:	432c      	orrs	r4, r5
 800b676:	40d3      	lsrs	r3, r2
 800b678:	6004      	str	r4, [r0, #0]
 800b67a:	f840 3f04 	str.w	r3, [r0, #4]!
 800b67e:	4288      	cmp	r0, r1
 800b680:	d3f4      	bcc.n	800b66c <L_shift+0xc>
 800b682:	bd70      	pop	{r4, r5, r6, pc}

0800b684 <__match>:
 800b684:	b530      	push	{r4, r5, lr}
 800b686:	6803      	ldr	r3, [r0, #0]
 800b688:	3301      	adds	r3, #1
 800b68a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b68e:	b914      	cbnz	r4, 800b696 <__match+0x12>
 800b690:	6003      	str	r3, [r0, #0]
 800b692:	2001      	movs	r0, #1
 800b694:	bd30      	pop	{r4, r5, pc}
 800b696:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b69a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b69e:	2d19      	cmp	r5, #25
 800b6a0:	bf98      	it	ls
 800b6a2:	3220      	addls	r2, #32
 800b6a4:	42a2      	cmp	r2, r4
 800b6a6:	d0f0      	beq.n	800b68a <__match+0x6>
 800b6a8:	2000      	movs	r0, #0
 800b6aa:	e7f3      	b.n	800b694 <__match+0x10>

0800b6ac <__hexnan>:
 800b6ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6b0:	680b      	ldr	r3, [r1, #0]
 800b6b2:	6801      	ldr	r1, [r0, #0]
 800b6b4:	115e      	asrs	r6, r3, #5
 800b6b6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b6ba:	f013 031f 	ands.w	r3, r3, #31
 800b6be:	b087      	sub	sp, #28
 800b6c0:	bf18      	it	ne
 800b6c2:	3604      	addne	r6, #4
 800b6c4:	2500      	movs	r5, #0
 800b6c6:	1f37      	subs	r7, r6, #4
 800b6c8:	4682      	mov	sl, r0
 800b6ca:	4690      	mov	r8, r2
 800b6cc:	9301      	str	r3, [sp, #4]
 800b6ce:	f846 5c04 	str.w	r5, [r6, #-4]
 800b6d2:	46b9      	mov	r9, r7
 800b6d4:	463c      	mov	r4, r7
 800b6d6:	9502      	str	r5, [sp, #8]
 800b6d8:	46ab      	mov	fp, r5
 800b6da:	784a      	ldrb	r2, [r1, #1]
 800b6dc:	1c4b      	adds	r3, r1, #1
 800b6de:	9303      	str	r3, [sp, #12]
 800b6e0:	b342      	cbz	r2, 800b734 <__hexnan+0x88>
 800b6e2:	4610      	mov	r0, r2
 800b6e4:	9105      	str	r1, [sp, #20]
 800b6e6:	9204      	str	r2, [sp, #16]
 800b6e8:	f7ff fd5f 	bl	800b1aa <__hexdig_fun>
 800b6ec:	2800      	cmp	r0, #0
 800b6ee:	d14f      	bne.n	800b790 <__hexnan+0xe4>
 800b6f0:	9a04      	ldr	r2, [sp, #16]
 800b6f2:	9905      	ldr	r1, [sp, #20]
 800b6f4:	2a20      	cmp	r2, #32
 800b6f6:	d818      	bhi.n	800b72a <__hexnan+0x7e>
 800b6f8:	9b02      	ldr	r3, [sp, #8]
 800b6fa:	459b      	cmp	fp, r3
 800b6fc:	dd13      	ble.n	800b726 <__hexnan+0x7a>
 800b6fe:	454c      	cmp	r4, r9
 800b700:	d206      	bcs.n	800b710 <__hexnan+0x64>
 800b702:	2d07      	cmp	r5, #7
 800b704:	dc04      	bgt.n	800b710 <__hexnan+0x64>
 800b706:	462a      	mov	r2, r5
 800b708:	4649      	mov	r1, r9
 800b70a:	4620      	mov	r0, r4
 800b70c:	f7ff ffa8 	bl	800b660 <L_shift>
 800b710:	4544      	cmp	r4, r8
 800b712:	d950      	bls.n	800b7b6 <__hexnan+0x10a>
 800b714:	2300      	movs	r3, #0
 800b716:	f1a4 0904 	sub.w	r9, r4, #4
 800b71a:	f844 3c04 	str.w	r3, [r4, #-4]
 800b71e:	f8cd b008 	str.w	fp, [sp, #8]
 800b722:	464c      	mov	r4, r9
 800b724:	461d      	mov	r5, r3
 800b726:	9903      	ldr	r1, [sp, #12]
 800b728:	e7d7      	b.n	800b6da <__hexnan+0x2e>
 800b72a:	2a29      	cmp	r2, #41	; 0x29
 800b72c:	d156      	bne.n	800b7dc <__hexnan+0x130>
 800b72e:	3102      	adds	r1, #2
 800b730:	f8ca 1000 	str.w	r1, [sl]
 800b734:	f1bb 0f00 	cmp.w	fp, #0
 800b738:	d050      	beq.n	800b7dc <__hexnan+0x130>
 800b73a:	454c      	cmp	r4, r9
 800b73c:	d206      	bcs.n	800b74c <__hexnan+0xa0>
 800b73e:	2d07      	cmp	r5, #7
 800b740:	dc04      	bgt.n	800b74c <__hexnan+0xa0>
 800b742:	462a      	mov	r2, r5
 800b744:	4649      	mov	r1, r9
 800b746:	4620      	mov	r0, r4
 800b748:	f7ff ff8a 	bl	800b660 <L_shift>
 800b74c:	4544      	cmp	r4, r8
 800b74e:	d934      	bls.n	800b7ba <__hexnan+0x10e>
 800b750:	f1a8 0204 	sub.w	r2, r8, #4
 800b754:	4623      	mov	r3, r4
 800b756:	f853 1b04 	ldr.w	r1, [r3], #4
 800b75a:	f842 1f04 	str.w	r1, [r2, #4]!
 800b75e:	429f      	cmp	r7, r3
 800b760:	d2f9      	bcs.n	800b756 <__hexnan+0xaa>
 800b762:	1b3b      	subs	r3, r7, r4
 800b764:	f023 0303 	bic.w	r3, r3, #3
 800b768:	3304      	adds	r3, #4
 800b76a:	3401      	adds	r4, #1
 800b76c:	3e03      	subs	r6, #3
 800b76e:	42b4      	cmp	r4, r6
 800b770:	bf88      	it	hi
 800b772:	2304      	movhi	r3, #4
 800b774:	4443      	add	r3, r8
 800b776:	2200      	movs	r2, #0
 800b778:	f843 2b04 	str.w	r2, [r3], #4
 800b77c:	429f      	cmp	r7, r3
 800b77e:	d2fb      	bcs.n	800b778 <__hexnan+0xcc>
 800b780:	683b      	ldr	r3, [r7, #0]
 800b782:	b91b      	cbnz	r3, 800b78c <__hexnan+0xe0>
 800b784:	4547      	cmp	r7, r8
 800b786:	d127      	bne.n	800b7d8 <__hexnan+0x12c>
 800b788:	2301      	movs	r3, #1
 800b78a:	603b      	str	r3, [r7, #0]
 800b78c:	2005      	movs	r0, #5
 800b78e:	e026      	b.n	800b7de <__hexnan+0x132>
 800b790:	3501      	adds	r5, #1
 800b792:	2d08      	cmp	r5, #8
 800b794:	f10b 0b01 	add.w	fp, fp, #1
 800b798:	dd06      	ble.n	800b7a8 <__hexnan+0xfc>
 800b79a:	4544      	cmp	r4, r8
 800b79c:	d9c3      	bls.n	800b726 <__hexnan+0x7a>
 800b79e:	2300      	movs	r3, #0
 800b7a0:	f844 3c04 	str.w	r3, [r4, #-4]
 800b7a4:	2501      	movs	r5, #1
 800b7a6:	3c04      	subs	r4, #4
 800b7a8:	6822      	ldr	r2, [r4, #0]
 800b7aa:	f000 000f 	and.w	r0, r0, #15
 800b7ae:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b7b2:	6022      	str	r2, [r4, #0]
 800b7b4:	e7b7      	b.n	800b726 <__hexnan+0x7a>
 800b7b6:	2508      	movs	r5, #8
 800b7b8:	e7b5      	b.n	800b726 <__hexnan+0x7a>
 800b7ba:	9b01      	ldr	r3, [sp, #4]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d0df      	beq.n	800b780 <__hexnan+0xd4>
 800b7c0:	f04f 32ff 	mov.w	r2, #4294967295
 800b7c4:	f1c3 0320 	rsb	r3, r3, #32
 800b7c8:	fa22 f303 	lsr.w	r3, r2, r3
 800b7cc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b7d0:	401a      	ands	r2, r3
 800b7d2:	f846 2c04 	str.w	r2, [r6, #-4]
 800b7d6:	e7d3      	b.n	800b780 <__hexnan+0xd4>
 800b7d8:	3f04      	subs	r7, #4
 800b7da:	e7d1      	b.n	800b780 <__hexnan+0xd4>
 800b7dc:	2004      	movs	r0, #4
 800b7de:	b007      	add	sp, #28
 800b7e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b7e4 <_localeconv_r>:
 800b7e4:	4800      	ldr	r0, [pc, #0]	; (800b7e8 <_localeconv_r+0x4>)
 800b7e6:	4770      	bx	lr
 800b7e8:	2000016c 	.word	0x2000016c

0800b7ec <__retarget_lock_init_recursive>:
 800b7ec:	4770      	bx	lr

0800b7ee <__retarget_lock_acquire_recursive>:
 800b7ee:	4770      	bx	lr

0800b7f0 <__retarget_lock_release_recursive>:
 800b7f0:	4770      	bx	lr

0800b7f2 <__swhatbuf_r>:
 800b7f2:	b570      	push	{r4, r5, r6, lr}
 800b7f4:	460e      	mov	r6, r1
 800b7f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7fa:	2900      	cmp	r1, #0
 800b7fc:	b096      	sub	sp, #88	; 0x58
 800b7fe:	4614      	mov	r4, r2
 800b800:	461d      	mov	r5, r3
 800b802:	da07      	bge.n	800b814 <__swhatbuf_r+0x22>
 800b804:	2300      	movs	r3, #0
 800b806:	602b      	str	r3, [r5, #0]
 800b808:	89b3      	ldrh	r3, [r6, #12]
 800b80a:	061a      	lsls	r2, r3, #24
 800b80c:	d410      	bmi.n	800b830 <__swhatbuf_r+0x3e>
 800b80e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b812:	e00e      	b.n	800b832 <__swhatbuf_r+0x40>
 800b814:	466a      	mov	r2, sp
 800b816:	f001 fa13 	bl	800cc40 <_fstat_r>
 800b81a:	2800      	cmp	r0, #0
 800b81c:	dbf2      	blt.n	800b804 <__swhatbuf_r+0x12>
 800b81e:	9a01      	ldr	r2, [sp, #4]
 800b820:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b824:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b828:	425a      	negs	r2, r3
 800b82a:	415a      	adcs	r2, r3
 800b82c:	602a      	str	r2, [r5, #0]
 800b82e:	e7ee      	b.n	800b80e <__swhatbuf_r+0x1c>
 800b830:	2340      	movs	r3, #64	; 0x40
 800b832:	2000      	movs	r0, #0
 800b834:	6023      	str	r3, [r4, #0]
 800b836:	b016      	add	sp, #88	; 0x58
 800b838:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b83c <__smakebuf_r>:
 800b83c:	898b      	ldrh	r3, [r1, #12]
 800b83e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b840:	079d      	lsls	r5, r3, #30
 800b842:	4606      	mov	r6, r0
 800b844:	460c      	mov	r4, r1
 800b846:	d507      	bpl.n	800b858 <__smakebuf_r+0x1c>
 800b848:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b84c:	6023      	str	r3, [r4, #0]
 800b84e:	6123      	str	r3, [r4, #16]
 800b850:	2301      	movs	r3, #1
 800b852:	6163      	str	r3, [r4, #20]
 800b854:	b002      	add	sp, #8
 800b856:	bd70      	pop	{r4, r5, r6, pc}
 800b858:	ab01      	add	r3, sp, #4
 800b85a:	466a      	mov	r2, sp
 800b85c:	f7ff ffc9 	bl	800b7f2 <__swhatbuf_r>
 800b860:	9900      	ldr	r1, [sp, #0]
 800b862:	4605      	mov	r5, r0
 800b864:	4630      	mov	r0, r6
 800b866:	f000 fd5d 	bl	800c324 <_malloc_r>
 800b86a:	b948      	cbnz	r0, 800b880 <__smakebuf_r+0x44>
 800b86c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b870:	059a      	lsls	r2, r3, #22
 800b872:	d4ef      	bmi.n	800b854 <__smakebuf_r+0x18>
 800b874:	f023 0303 	bic.w	r3, r3, #3
 800b878:	f043 0302 	orr.w	r3, r3, #2
 800b87c:	81a3      	strh	r3, [r4, #12]
 800b87e:	e7e3      	b.n	800b848 <__smakebuf_r+0xc>
 800b880:	4b0d      	ldr	r3, [pc, #52]	; (800b8b8 <__smakebuf_r+0x7c>)
 800b882:	62b3      	str	r3, [r6, #40]	; 0x28
 800b884:	89a3      	ldrh	r3, [r4, #12]
 800b886:	6020      	str	r0, [r4, #0]
 800b888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b88c:	81a3      	strh	r3, [r4, #12]
 800b88e:	9b00      	ldr	r3, [sp, #0]
 800b890:	6163      	str	r3, [r4, #20]
 800b892:	9b01      	ldr	r3, [sp, #4]
 800b894:	6120      	str	r0, [r4, #16]
 800b896:	b15b      	cbz	r3, 800b8b0 <__smakebuf_r+0x74>
 800b898:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b89c:	4630      	mov	r0, r6
 800b89e:	f001 f9e1 	bl	800cc64 <_isatty_r>
 800b8a2:	b128      	cbz	r0, 800b8b0 <__smakebuf_r+0x74>
 800b8a4:	89a3      	ldrh	r3, [r4, #12]
 800b8a6:	f023 0303 	bic.w	r3, r3, #3
 800b8aa:	f043 0301 	orr.w	r3, r3, #1
 800b8ae:	81a3      	strh	r3, [r4, #12]
 800b8b0:	89a0      	ldrh	r0, [r4, #12]
 800b8b2:	4305      	orrs	r5, r0
 800b8b4:	81a5      	strh	r5, [r4, #12]
 800b8b6:	e7cd      	b.n	800b854 <__smakebuf_r+0x18>
 800b8b8:	0800af65 	.word	0x0800af65

0800b8bc <malloc>:
 800b8bc:	4b02      	ldr	r3, [pc, #8]	; (800b8c8 <malloc+0xc>)
 800b8be:	4601      	mov	r1, r0
 800b8c0:	6818      	ldr	r0, [r3, #0]
 800b8c2:	f000 bd2f 	b.w	800c324 <_malloc_r>
 800b8c6:	bf00      	nop
 800b8c8:	20000014 	.word	0x20000014

0800b8cc <__ascii_mbtowc>:
 800b8cc:	b082      	sub	sp, #8
 800b8ce:	b901      	cbnz	r1, 800b8d2 <__ascii_mbtowc+0x6>
 800b8d0:	a901      	add	r1, sp, #4
 800b8d2:	b142      	cbz	r2, 800b8e6 <__ascii_mbtowc+0x1a>
 800b8d4:	b14b      	cbz	r3, 800b8ea <__ascii_mbtowc+0x1e>
 800b8d6:	7813      	ldrb	r3, [r2, #0]
 800b8d8:	600b      	str	r3, [r1, #0]
 800b8da:	7812      	ldrb	r2, [r2, #0]
 800b8dc:	1e10      	subs	r0, r2, #0
 800b8de:	bf18      	it	ne
 800b8e0:	2001      	movne	r0, #1
 800b8e2:	b002      	add	sp, #8
 800b8e4:	4770      	bx	lr
 800b8e6:	4610      	mov	r0, r2
 800b8e8:	e7fb      	b.n	800b8e2 <__ascii_mbtowc+0x16>
 800b8ea:	f06f 0001 	mvn.w	r0, #1
 800b8ee:	e7f8      	b.n	800b8e2 <__ascii_mbtowc+0x16>

0800b8f0 <_Balloc>:
 800b8f0:	b570      	push	{r4, r5, r6, lr}
 800b8f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b8f4:	4604      	mov	r4, r0
 800b8f6:	460d      	mov	r5, r1
 800b8f8:	b976      	cbnz	r6, 800b918 <_Balloc+0x28>
 800b8fa:	2010      	movs	r0, #16
 800b8fc:	f7ff ffde 	bl	800b8bc <malloc>
 800b900:	4602      	mov	r2, r0
 800b902:	6260      	str	r0, [r4, #36]	; 0x24
 800b904:	b920      	cbnz	r0, 800b910 <_Balloc+0x20>
 800b906:	4b18      	ldr	r3, [pc, #96]	; (800b968 <_Balloc+0x78>)
 800b908:	4818      	ldr	r0, [pc, #96]	; (800b96c <_Balloc+0x7c>)
 800b90a:	2166      	movs	r1, #102	; 0x66
 800b90c:	f001 f958 	bl	800cbc0 <__assert_func>
 800b910:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b914:	6006      	str	r6, [r0, #0]
 800b916:	60c6      	str	r6, [r0, #12]
 800b918:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b91a:	68f3      	ldr	r3, [r6, #12]
 800b91c:	b183      	cbz	r3, 800b940 <_Balloc+0x50>
 800b91e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b920:	68db      	ldr	r3, [r3, #12]
 800b922:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b926:	b9b8      	cbnz	r0, 800b958 <_Balloc+0x68>
 800b928:	2101      	movs	r1, #1
 800b92a:	fa01 f605 	lsl.w	r6, r1, r5
 800b92e:	1d72      	adds	r2, r6, #5
 800b930:	0092      	lsls	r2, r2, #2
 800b932:	4620      	mov	r0, r4
 800b934:	f000 fc97 	bl	800c266 <_calloc_r>
 800b938:	b160      	cbz	r0, 800b954 <_Balloc+0x64>
 800b93a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b93e:	e00e      	b.n	800b95e <_Balloc+0x6e>
 800b940:	2221      	movs	r2, #33	; 0x21
 800b942:	2104      	movs	r1, #4
 800b944:	4620      	mov	r0, r4
 800b946:	f000 fc8e 	bl	800c266 <_calloc_r>
 800b94a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b94c:	60f0      	str	r0, [r6, #12]
 800b94e:	68db      	ldr	r3, [r3, #12]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d1e4      	bne.n	800b91e <_Balloc+0x2e>
 800b954:	2000      	movs	r0, #0
 800b956:	bd70      	pop	{r4, r5, r6, pc}
 800b958:	6802      	ldr	r2, [r0, #0]
 800b95a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b95e:	2300      	movs	r3, #0
 800b960:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b964:	e7f7      	b.n	800b956 <_Balloc+0x66>
 800b966:	bf00      	nop
 800b968:	0800e2f6 	.word	0x0800e2f6
 800b96c:	0800e460 	.word	0x0800e460

0800b970 <_Bfree>:
 800b970:	b570      	push	{r4, r5, r6, lr}
 800b972:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b974:	4605      	mov	r5, r0
 800b976:	460c      	mov	r4, r1
 800b978:	b976      	cbnz	r6, 800b998 <_Bfree+0x28>
 800b97a:	2010      	movs	r0, #16
 800b97c:	f7ff ff9e 	bl	800b8bc <malloc>
 800b980:	4602      	mov	r2, r0
 800b982:	6268      	str	r0, [r5, #36]	; 0x24
 800b984:	b920      	cbnz	r0, 800b990 <_Bfree+0x20>
 800b986:	4b09      	ldr	r3, [pc, #36]	; (800b9ac <_Bfree+0x3c>)
 800b988:	4809      	ldr	r0, [pc, #36]	; (800b9b0 <_Bfree+0x40>)
 800b98a:	218a      	movs	r1, #138	; 0x8a
 800b98c:	f001 f918 	bl	800cbc0 <__assert_func>
 800b990:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b994:	6006      	str	r6, [r0, #0]
 800b996:	60c6      	str	r6, [r0, #12]
 800b998:	b13c      	cbz	r4, 800b9aa <_Bfree+0x3a>
 800b99a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b99c:	6862      	ldr	r2, [r4, #4]
 800b99e:	68db      	ldr	r3, [r3, #12]
 800b9a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b9a4:	6021      	str	r1, [r4, #0]
 800b9a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b9aa:	bd70      	pop	{r4, r5, r6, pc}
 800b9ac:	0800e2f6 	.word	0x0800e2f6
 800b9b0:	0800e460 	.word	0x0800e460

0800b9b4 <__multadd>:
 800b9b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9b8:	690e      	ldr	r6, [r1, #16]
 800b9ba:	4607      	mov	r7, r0
 800b9bc:	4698      	mov	r8, r3
 800b9be:	460c      	mov	r4, r1
 800b9c0:	f101 0014 	add.w	r0, r1, #20
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	6805      	ldr	r5, [r0, #0]
 800b9c8:	b2a9      	uxth	r1, r5
 800b9ca:	fb02 8101 	mla	r1, r2, r1, r8
 800b9ce:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800b9d2:	0c2d      	lsrs	r5, r5, #16
 800b9d4:	fb02 c505 	mla	r5, r2, r5, ip
 800b9d8:	b289      	uxth	r1, r1
 800b9da:	3301      	adds	r3, #1
 800b9dc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800b9e0:	429e      	cmp	r6, r3
 800b9e2:	f840 1b04 	str.w	r1, [r0], #4
 800b9e6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800b9ea:	dcec      	bgt.n	800b9c6 <__multadd+0x12>
 800b9ec:	f1b8 0f00 	cmp.w	r8, #0
 800b9f0:	d022      	beq.n	800ba38 <__multadd+0x84>
 800b9f2:	68a3      	ldr	r3, [r4, #8]
 800b9f4:	42b3      	cmp	r3, r6
 800b9f6:	dc19      	bgt.n	800ba2c <__multadd+0x78>
 800b9f8:	6861      	ldr	r1, [r4, #4]
 800b9fa:	4638      	mov	r0, r7
 800b9fc:	3101      	adds	r1, #1
 800b9fe:	f7ff ff77 	bl	800b8f0 <_Balloc>
 800ba02:	4605      	mov	r5, r0
 800ba04:	b928      	cbnz	r0, 800ba12 <__multadd+0x5e>
 800ba06:	4602      	mov	r2, r0
 800ba08:	4b0d      	ldr	r3, [pc, #52]	; (800ba40 <__multadd+0x8c>)
 800ba0a:	480e      	ldr	r0, [pc, #56]	; (800ba44 <__multadd+0x90>)
 800ba0c:	21b5      	movs	r1, #181	; 0xb5
 800ba0e:	f001 f8d7 	bl	800cbc0 <__assert_func>
 800ba12:	6922      	ldr	r2, [r4, #16]
 800ba14:	3202      	adds	r2, #2
 800ba16:	f104 010c 	add.w	r1, r4, #12
 800ba1a:	0092      	lsls	r2, r2, #2
 800ba1c:	300c      	adds	r0, #12
 800ba1e:	f7fc fccf 	bl	80083c0 <memcpy>
 800ba22:	4621      	mov	r1, r4
 800ba24:	4638      	mov	r0, r7
 800ba26:	f7ff ffa3 	bl	800b970 <_Bfree>
 800ba2a:	462c      	mov	r4, r5
 800ba2c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800ba30:	3601      	adds	r6, #1
 800ba32:	f8c3 8014 	str.w	r8, [r3, #20]
 800ba36:	6126      	str	r6, [r4, #16]
 800ba38:	4620      	mov	r0, r4
 800ba3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba3e:	bf00      	nop
 800ba40:	0800e36c 	.word	0x0800e36c
 800ba44:	0800e460 	.word	0x0800e460

0800ba48 <__s2b>:
 800ba48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba4c:	460c      	mov	r4, r1
 800ba4e:	4615      	mov	r5, r2
 800ba50:	461f      	mov	r7, r3
 800ba52:	2209      	movs	r2, #9
 800ba54:	3308      	adds	r3, #8
 800ba56:	4606      	mov	r6, r0
 800ba58:	fb93 f3f2 	sdiv	r3, r3, r2
 800ba5c:	2100      	movs	r1, #0
 800ba5e:	2201      	movs	r2, #1
 800ba60:	429a      	cmp	r2, r3
 800ba62:	db09      	blt.n	800ba78 <__s2b+0x30>
 800ba64:	4630      	mov	r0, r6
 800ba66:	f7ff ff43 	bl	800b8f0 <_Balloc>
 800ba6a:	b940      	cbnz	r0, 800ba7e <__s2b+0x36>
 800ba6c:	4602      	mov	r2, r0
 800ba6e:	4b19      	ldr	r3, [pc, #100]	; (800bad4 <__s2b+0x8c>)
 800ba70:	4819      	ldr	r0, [pc, #100]	; (800bad8 <__s2b+0x90>)
 800ba72:	21ce      	movs	r1, #206	; 0xce
 800ba74:	f001 f8a4 	bl	800cbc0 <__assert_func>
 800ba78:	0052      	lsls	r2, r2, #1
 800ba7a:	3101      	adds	r1, #1
 800ba7c:	e7f0      	b.n	800ba60 <__s2b+0x18>
 800ba7e:	9b08      	ldr	r3, [sp, #32]
 800ba80:	6143      	str	r3, [r0, #20]
 800ba82:	2d09      	cmp	r5, #9
 800ba84:	f04f 0301 	mov.w	r3, #1
 800ba88:	6103      	str	r3, [r0, #16]
 800ba8a:	dd16      	ble.n	800baba <__s2b+0x72>
 800ba8c:	f104 0909 	add.w	r9, r4, #9
 800ba90:	46c8      	mov	r8, r9
 800ba92:	442c      	add	r4, r5
 800ba94:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ba98:	4601      	mov	r1, r0
 800ba9a:	3b30      	subs	r3, #48	; 0x30
 800ba9c:	220a      	movs	r2, #10
 800ba9e:	4630      	mov	r0, r6
 800baa0:	f7ff ff88 	bl	800b9b4 <__multadd>
 800baa4:	45a0      	cmp	r8, r4
 800baa6:	d1f5      	bne.n	800ba94 <__s2b+0x4c>
 800baa8:	f1a5 0408 	sub.w	r4, r5, #8
 800baac:	444c      	add	r4, r9
 800baae:	1b2d      	subs	r5, r5, r4
 800bab0:	1963      	adds	r3, r4, r5
 800bab2:	42bb      	cmp	r3, r7
 800bab4:	db04      	blt.n	800bac0 <__s2b+0x78>
 800bab6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800baba:	340a      	adds	r4, #10
 800babc:	2509      	movs	r5, #9
 800babe:	e7f6      	b.n	800baae <__s2b+0x66>
 800bac0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bac4:	4601      	mov	r1, r0
 800bac6:	3b30      	subs	r3, #48	; 0x30
 800bac8:	220a      	movs	r2, #10
 800baca:	4630      	mov	r0, r6
 800bacc:	f7ff ff72 	bl	800b9b4 <__multadd>
 800bad0:	e7ee      	b.n	800bab0 <__s2b+0x68>
 800bad2:	bf00      	nop
 800bad4:	0800e36c 	.word	0x0800e36c
 800bad8:	0800e460 	.word	0x0800e460

0800badc <__hi0bits>:
 800badc:	0c03      	lsrs	r3, r0, #16
 800bade:	041b      	lsls	r3, r3, #16
 800bae0:	b9d3      	cbnz	r3, 800bb18 <__hi0bits+0x3c>
 800bae2:	0400      	lsls	r0, r0, #16
 800bae4:	2310      	movs	r3, #16
 800bae6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800baea:	bf04      	itt	eq
 800baec:	0200      	lsleq	r0, r0, #8
 800baee:	3308      	addeq	r3, #8
 800baf0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800baf4:	bf04      	itt	eq
 800baf6:	0100      	lsleq	r0, r0, #4
 800baf8:	3304      	addeq	r3, #4
 800bafa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bafe:	bf04      	itt	eq
 800bb00:	0080      	lsleq	r0, r0, #2
 800bb02:	3302      	addeq	r3, #2
 800bb04:	2800      	cmp	r0, #0
 800bb06:	db05      	blt.n	800bb14 <__hi0bits+0x38>
 800bb08:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bb0c:	f103 0301 	add.w	r3, r3, #1
 800bb10:	bf08      	it	eq
 800bb12:	2320      	moveq	r3, #32
 800bb14:	4618      	mov	r0, r3
 800bb16:	4770      	bx	lr
 800bb18:	2300      	movs	r3, #0
 800bb1a:	e7e4      	b.n	800bae6 <__hi0bits+0xa>

0800bb1c <__lo0bits>:
 800bb1c:	6803      	ldr	r3, [r0, #0]
 800bb1e:	f013 0207 	ands.w	r2, r3, #7
 800bb22:	4601      	mov	r1, r0
 800bb24:	d00b      	beq.n	800bb3e <__lo0bits+0x22>
 800bb26:	07da      	lsls	r2, r3, #31
 800bb28:	d424      	bmi.n	800bb74 <__lo0bits+0x58>
 800bb2a:	0798      	lsls	r0, r3, #30
 800bb2c:	bf49      	itett	mi
 800bb2e:	085b      	lsrmi	r3, r3, #1
 800bb30:	089b      	lsrpl	r3, r3, #2
 800bb32:	2001      	movmi	r0, #1
 800bb34:	600b      	strmi	r3, [r1, #0]
 800bb36:	bf5c      	itt	pl
 800bb38:	600b      	strpl	r3, [r1, #0]
 800bb3a:	2002      	movpl	r0, #2
 800bb3c:	4770      	bx	lr
 800bb3e:	b298      	uxth	r0, r3
 800bb40:	b9b0      	cbnz	r0, 800bb70 <__lo0bits+0x54>
 800bb42:	0c1b      	lsrs	r3, r3, #16
 800bb44:	2010      	movs	r0, #16
 800bb46:	f013 0fff 	tst.w	r3, #255	; 0xff
 800bb4a:	bf04      	itt	eq
 800bb4c:	0a1b      	lsreq	r3, r3, #8
 800bb4e:	3008      	addeq	r0, #8
 800bb50:	071a      	lsls	r2, r3, #28
 800bb52:	bf04      	itt	eq
 800bb54:	091b      	lsreq	r3, r3, #4
 800bb56:	3004      	addeq	r0, #4
 800bb58:	079a      	lsls	r2, r3, #30
 800bb5a:	bf04      	itt	eq
 800bb5c:	089b      	lsreq	r3, r3, #2
 800bb5e:	3002      	addeq	r0, #2
 800bb60:	07da      	lsls	r2, r3, #31
 800bb62:	d403      	bmi.n	800bb6c <__lo0bits+0x50>
 800bb64:	085b      	lsrs	r3, r3, #1
 800bb66:	f100 0001 	add.w	r0, r0, #1
 800bb6a:	d005      	beq.n	800bb78 <__lo0bits+0x5c>
 800bb6c:	600b      	str	r3, [r1, #0]
 800bb6e:	4770      	bx	lr
 800bb70:	4610      	mov	r0, r2
 800bb72:	e7e8      	b.n	800bb46 <__lo0bits+0x2a>
 800bb74:	2000      	movs	r0, #0
 800bb76:	4770      	bx	lr
 800bb78:	2020      	movs	r0, #32
 800bb7a:	4770      	bx	lr

0800bb7c <__i2b>:
 800bb7c:	b510      	push	{r4, lr}
 800bb7e:	460c      	mov	r4, r1
 800bb80:	2101      	movs	r1, #1
 800bb82:	f7ff feb5 	bl	800b8f0 <_Balloc>
 800bb86:	4602      	mov	r2, r0
 800bb88:	b928      	cbnz	r0, 800bb96 <__i2b+0x1a>
 800bb8a:	4b05      	ldr	r3, [pc, #20]	; (800bba0 <__i2b+0x24>)
 800bb8c:	4805      	ldr	r0, [pc, #20]	; (800bba4 <__i2b+0x28>)
 800bb8e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bb92:	f001 f815 	bl	800cbc0 <__assert_func>
 800bb96:	2301      	movs	r3, #1
 800bb98:	6144      	str	r4, [r0, #20]
 800bb9a:	6103      	str	r3, [r0, #16]
 800bb9c:	bd10      	pop	{r4, pc}
 800bb9e:	bf00      	nop
 800bba0:	0800e36c 	.word	0x0800e36c
 800bba4:	0800e460 	.word	0x0800e460

0800bba8 <__multiply>:
 800bba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbac:	4614      	mov	r4, r2
 800bbae:	690a      	ldr	r2, [r1, #16]
 800bbb0:	6923      	ldr	r3, [r4, #16]
 800bbb2:	429a      	cmp	r2, r3
 800bbb4:	bfb8      	it	lt
 800bbb6:	460b      	movlt	r3, r1
 800bbb8:	460d      	mov	r5, r1
 800bbba:	bfbc      	itt	lt
 800bbbc:	4625      	movlt	r5, r4
 800bbbe:	461c      	movlt	r4, r3
 800bbc0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800bbc4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800bbc8:	68ab      	ldr	r3, [r5, #8]
 800bbca:	6869      	ldr	r1, [r5, #4]
 800bbcc:	eb0a 0709 	add.w	r7, sl, r9
 800bbd0:	42bb      	cmp	r3, r7
 800bbd2:	b085      	sub	sp, #20
 800bbd4:	bfb8      	it	lt
 800bbd6:	3101      	addlt	r1, #1
 800bbd8:	f7ff fe8a 	bl	800b8f0 <_Balloc>
 800bbdc:	b930      	cbnz	r0, 800bbec <__multiply+0x44>
 800bbde:	4602      	mov	r2, r0
 800bbe0:	4b42      	ldr	r3, [pc, #264]	; (800bcec <__multiply+0x144>)
 800bbe2:	4843      	ldr	r0, [pc, #268]	; (800bcf0 <__multiply+0x148>)
 800bbe4:	f240 115d 	movw	r1, #349	; 0x15d
 800bbe8:	f000 ffea 	bl	800cbc0 <__assert_func>
 800bbec:	f100 0614 	add.w	r6, r0, #20
 800bbf0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800bbf4:	4633      	mov	r3, r6
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	4543      	cmp	r3, r8
 800bbfa:	d31e      	bcc.n	800bc3a <__multiply+0x92>
 800bbfc:	f105 0c14 	add.w	ip, r5, #20
 800bc00:	f104 0314 	add.w	r3, r4, #20
 800bc04:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800bc08:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800bc0c:	9202      	str	r2, [sp, #8]
 800bc0e:	ebac 0205 	sub.w	r2, ip, r5
 800bc12:	3a15      	subs	r2, #21
 800bc14:	f022 0203 	bic.w	r2, r2, #3
 800bc18:	3204      	adds	r2, #4
 800bc1a:	f105 0115 	add.w	r1, r5, #21
 800bc1e:	458c      	cmp	ip, r1
 800bc20:	bf38      	it	cc
 800bc22:	2204      	movcc	r2, #4
 800bc24:	9201      	str	r2, [sp, #4]
 800bc26:	9a02      	ldr	r2, [sp, #8]
 800bc28:	9303      	str	r3, [sp, #12]
 800bc2a:	429a      	cmp	r2, r3
 800bc2c:	d808      	bhi.n	800bc40 <__multiply+0x98>
 800bc2e:	2f00      	cmp	r7, #0
 800bc30:	dc55      	bgt.n	800bcde <__multiply+0x136>
 800bc32:	6107      	str	r7, [r0, #16]
 800bc34:	b005      	add	sp, #20
 800bc36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc3a:	f843 2b04 	str.w	r2, [r3], #4
 800bc3e:	e7db      	b.n	800bbf8 <__multiply+0x50>
 800bc40:	f8b3 a000 	ldrh.w	sl, [r3]
 800bc44:	f1ba 0f00 	cmp.w	sl, #0
 800bc48:	d020      	beq.n	800bc8c <__multiply+0xe4>
 800bc4a:	f105 0e14 	add.w	lr, r5, #20
 800bc4e:	46b1      	mov	r9, r6
 800bc50:	2200      	movs	r2, #0
 800bc52:	f85e 4b04 	ldr.w	r4, [lr], #4
 800bc56:	f8d9 b000 	ldr.w	fp, [r9]
 800bc5a:	b2a1      	uxth	r1, r4
 800bc5c:	fa1f fb8b 	uxth.w	fp, fp
 800bc60:	fb0a b101 	mla	r1, sl, r1, fp
 800bc64:	4411      	add	r1, r2
 800bc66:	f8d9 2000 	ldr.w	r2, [r9]
 800bc6a:	0c24      	lsrs	r4, r4, #16
 800bc6c:	0c12      	lsrs	r2, r2, #16
 800bc6e:	fb0a 2404 	mla	r4, sl, r4, r2
 800bc72:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800bc76:	b289      	uxth	r1, r1
 800bc78:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800bc7c:	45f4      	cmp	ip, lr
 800bc7e:	f849 1b04 	str.w	r1, [r9], #4
 800bc82:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800bc86:	d8e4      	bhi.n	800bc52 <__multiply+0xaa>
 800bc88:	9901      	ldr	r1, [sp, #4]
 800bc8a:	5072      	str	r2, [r6, r1]
 800bc8c:	9a03      	ldr	r2, [sp, #12]
 800bc8e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bc92:	3304      	adds	r3, #4
 800bc94:	f1b9 0f00 	cmp.w	r9, #0
 800bc98:	d01f      	beq.n	800bcda <__multiply+0x132>
 800bc9a:	6834      	ldr	r4, [r6, #0]
 800bc9c:	f105 0114 	add.w	r1, r5, #20
 800bca0:	46b6      	mov	lr, r6
 800bca2:	f04f 0a00 	mov.w	sl, #0
 800bca6:	880a      	ldrh	r2, [r1, #0]
 800bca8:	f8be b002 	ldrh.w	fp, [lr, #2]
 800bcac:	fb09 b202 	mla	r2, r9, r2, fp
 800bcb0:	4492      	add	sl, r2
 800bcb2:	b2a4      	uxth	r4, r4
 800bcb4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800bcb8:	f84e 4b04 	str.w	r4, [lr], #4
 800bcbc:	f851 4b04 	ldr.w	r4, [r1], #4
 800bcc0:	f8be 2000 	ldrh.w	r2, [lr]
 800bcc4:	0c24      	lsrs	r4, r4, #16
 800bcc6:	fb09 2404 	mla	r4, r9, r4, r2
 800bcca:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800bcce:	458c      	cmp	ip, r1
 800bcd0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800bcd4:	d8e7      	bhi.n	800bca6 <__multiply+0xfe>
 800bcd6:	9a01      	ldr	r2, [sp, #4]
 800bcd8:	50b4      	str	r4, [r6, r2]
 800bcda:	3604      	adds	r6, #4
 800bcdc:	e7a3      	b.n	800bc26 <__multiply+0x7e>
 800bcde:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d1a5      	bne.n	800bc32 <__multiply+0x8a>
 800bce6:	3f01      	subs	r7, #1
 800bce8:	e7a1      	b.n	800bc2e <__multiply+0x86>
 800bcea:	bf00      	nop
 800bcec:	0800e36c 	.word	0x0800e36c
 800bcf0:	0800e460 	.word	0x0800e460

0800bcf4 <__pow5mult>:
 800bcf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bcf8:	4615      	mov	r5, r2
 800bcfa:	f012 0203 	ands.w	r2, r2, #3
 800bcfe:	4606      	mov	r6, r0
 800bd00:	460f      	mov	r7, r1
 800bd02:	d007      	beq.n	800bd14 <__pow5mult+0x20>
 800bd04:	4c25      	ldr	r4, [pc, #148]	; (800bd9c <__pow5mult+0xa8>)
 800bd06:	3a01      	subs	r2, #1
 800bd08:	2300      	movs	r3, #0
 800bd0a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bd0e:	f7ff fe51 	bl	800b9b4 <__multadd>
 800bd12:	4607      	mov	r7, r0
 800bd14:	10ad      	asrs	r5, r5, #2
 800bd16:	d03d      	beq.n	800bd94 <__pow5mult+0xa0>
 800bd18:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bd1a:	b97c      	cbnz	r4, 800bd3c <__pow5mult+0x48>
 800bd1c:	2010      	movs	r0, #16
 800bd1e:	f7ff fdcd 	bl	800b8bc <malloc>
 800bd22:	4602      	mov	r2, r0
 800bd24:	6270      	str	r0, [r6, #36]	; 0x24
 800bd26:	b928      	cbnz	r0, 800bd34 <__pow5mult+0x40>
 800bd28:	4b1d      	ldr	r3, [pc, #116]	; (800bda0 <__pow5mult+0xac>)
 800bd2a:	481e      	ldr	r0, [pc, #120]	; (800bda4 <__pow5mult+0xb0>)
 800bd2c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bd30:	f000 ff46 	bl	800cbc0 <__assert_func>
 800bd34:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bd38:	6004      	str	r4, [r0, #0]
 800bd3a:	60c4      	str	r4, [r0, #12]
 800bd3c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bd40:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bd44:	b94c      	cbnz	r4, 800bd5a <__pow5mult+0x66>
 800bd46:	f240 2171 	movw	r1, #625	; 0x271
 800bd4a:	4630      	mov	r0, r6
 800bd4c:	f7ff ff16 	bl	800bb7c <__i2b>
 800bd50:	2300      	movs	r3, #0
 800bd52:	f8c8 0008 	str.w	r0, [r8, #8]
 800bd56:	4604      	mov	r4, r0
 800bd58:	6003      	str	r3, [r0, #0]
 800bd5a:	f04f 0900 	mov.w	r9, #0
 800bd5e:	07eb      	lsls	r3, r5, #31
 800bd60:	d50a      	bpl.n	800bd78 <__pow5mult+0x84>
 800bd62:	4639      	mov	r1, r7
 800bd64:	4622      	mov	r2, r4
 800bd66:	4630      	mov	r0, r6
 800bd68:	f7ff ff1e 	bl	800bba8 <__multiply>
 800bd6c:	4639      	mov	r1, r7
 800bd6e:	4680      	mov	r8, r0
 800bd70:	4630      	mov	r0, r6
 800bd72:	f7ff fdfd 	bl	800b970 <_Bfree>
 800bd76:	4647      	mov	r7, r8
 800bd78:	106d      	asrs	r5, r5, #1
 800bd7a:	d00b      	beq.n	800bd94 <__pow5mult+0xa0>
 800bd7c:	6820      	ldr	r0, [r4, #0]
 800bd7e:	b938      	cbnz	r0, 800bd90 <__pow5mult+0x9c>
 800bd80:	4622      	mov	r2, r4
 800bd82:	4621      	mov	r1, r4
 800bd84:	4630      	mov	r0, r6
 800bd86:	f7ff ff0f 	bl	800bba8 <__multiply>
 800bd8a:	6020      	str	r0, [r4, #0]
 800bd8c:	f8c0 9000 	str.w	r9, [r0]
 800bd90:	4604      	mov	r4, r0
 800bd92:	e7e4      	b.n	800bd5e <__pow5mult+0x6a>
 800bd94:	4638      	mov	r0, r7
 800bd96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd9a:	bf00      	nop
 800bd9c:	0800e5b0 	.word	0x0800e5b0
 800bda0:	0800e2f6 	.word	0x0800e2f6
 800bda4:	0800e460 	.word	0x0800e460

0800bda8 <__lshift>:
 800bda8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bdac:	460c      	mov	r4, r1
 800bdae:	6849      	ldr	r1, [r1, #4]
 800bdb0:	6923      	ldr	r3, [r4, #16]
 800bdb2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bdb6:	68a3      	ldr	r3, [r4, #8]
 800bdb8:	4607      	mov	r7, r0
 800bdba:	4691      	mov	r9, r2
 800bdbc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bdc0:	f108 0601 	add.w	r6, r8, #1
 800bdc4:	42b3      	cmp	r3, r6
 800bdc6:	db0b      	blt.n	800bde0 <__lshift+0x38>
 800bdc8:	4638      	mov	r0, r7
 800bdca:	f7ff fd91 	bl	800b8f0 <_Balloc>
 800bdce:	4605      	mov	r5, r0
 800bdd0:	b948      	cbnz	r0, 800bde6 <__lshift+0x3e>
 800bdd2:	4602      	mov	r2, r0
 800bdd4:	4b28      	ldr	r3, [pc, #160]	; (800be78 <__lshift+0xd0>)
 800bdd6:	4829      	ldr	r0, [pc, #164]	; (800be7c <__lshift+0xd4>)
 800bdd8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bddc:	f000 fef0 	bl	800cbc0 <__assert_func>
 800bde0:	3101      	adds	r1, #1
 800bde2:	005b      	lsls	r3, r3, #1
 800bde4:	e7ee      	b.n	800bdc4 <__lshift+0x1c>
 800bde6:	2300      	movs	r3, #0
 800bde8:	f100 0114 	add.w	r1, r0, #20
 800bdec:	f100 0210 	add.w	r2, r0, #16
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	4553      	cmp	r3, sl
 800bdf4:	db33      	blt.n	800be5e <__lshift+0xb6>
 800bdf6:	6920      	ldr	r0, [r4, #16]
 800bdf8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bdfc:	f104 0314 	add.w	r3, r4, #20
 800be00:	f019 091f 	ands.w	r9, r9, #31
 800be04:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800be08:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800be0c:	d02b      	beq.n	800be66 <__lshift+0xbe>
 800be0e:	f1c9 0e20 	rsb	lr, r9, #32
 800be12:	468a      	mov	sl, r1
 800be14:	2200      	movs	r2, #0
 800be16:	6818      	ldr	r0, [r3, #0]
 800be18:	fa00 f009 	lsl.w	r0, r0, r9
 800be1c:	4302      	orrs	r2, r0
 800be1e:	f84a 2b04 	str.w	r2, [sl], #4
 800be22:	f853 2b04 	ldr.w	r2, [r3], #4
 800be26:	459c      	cmp	ip, r3
 800be28:	fa22 f20e 	lsr.w	r2, r2, lr
 800be2c:	d8f3      	bhi.n	800be16 <__lshift+0x6e>
 800be2e:	ebac 0304 	sub.w	r3, ip, r4
 800be32:	3b15      	subs	r3, #21
 800be34:	f023 0303 	bic.w	r3, r3, #3
 800be38:	3304      	adds	r3, #4
 800be3a:	f104 0015 	add.w	r0, r4, #21
 800be3e:	4584      	cmp	ip, r0
 800be40:	bf38      	it	cc
 800be42:	2304      	movcc	r3, #4
 800be44:	50ca      	str	r2, [r1, r3]
 800be46:	b10a      	cbz	r2, 800be4c <__lshift+0xa4>
 800be48:	f108 0602 	add.w	r6, r8, #2
 800be4c:	3e01      	subs	r6, #1
 800be4e:	4638      	mov	r0, r7
 800be50:	612e      	str	r6, [r5, #16]
 800be52:	4621      	mov	r1, r4
 800be54:	f7ff fd8c 	bl	800b970 <_Bfree>
 800be58:	4628      	mov	r0, r5
 800be5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be5e:	f842 0f04 	str.w	r0, [r2, #4]!
 800be62:	3301      	adds	r3, #1
 800be64:	e7c5      	b.n	800bdf2 <__lshift+0x4a>
 800be66:	3904      	subs	r1, #4
 800be68:	f853 2b04 	ldr.w	r2, [r3], #4
 800be6c:	f841 2f04 	str.w	r2, [r1, #4]!
 800be70:	459c      	cmp	ip, r3
 800be72:	d8f9      	bhi.n	800be68 <__lshift+0xc0>
 800be74:	e7ea      	b.n	800be4c <__lshift+0xa4>
 800be76:	bf00      	nop
 800be78:	0800e36c 	.word	0x0800e36c
 800be7c:	0800e460 	.word	0x0800e460

0800be80 <__mcmp>:
 800be80:	b530      	push	{r4, r5, lr}
 800be82:	6902      	ldr	r2, [r0, #16]
 800be84:	690c      	ldr	r4, [r1, #16]
 800be86:	1b12      	subs	r2, r2, r4
 800be88:	d10e      	bne.n	800bea8 <__mcmp+0x28>
 800be8a:	f100 0314 	add.w	r3, r0, #20
 800be8e:	3114      	adds	r1, #20
 800be90:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800be94:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800be98:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800be9c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bea0:	42a5      	cmp	r5, r4
 800bea2:	d003      	beq.n	800beac <__mcmp+0x2c>
 800bea4:	d305      	bcc.n	800beb2 <__mcmp+0x32>
 800bea6:	2201      	movs	r2, #1
 800bea8:	4610      	mov	r0, r2
 800beaa:	bd30      	pop	{r4, r5, pc}
 800beac:	4283      	cmp	r3, r0
 800beae:	d3f3      	bcc.n	800be98 <__mcmp+0x18>
 800beb0:	e7fa      	b.n	800bea8 <__mcmp+0x28>
 800beb2:	f04f 32ff 	mov.w	r2, #4294967295
 800beb6:	e7f7      	b.n	800bea8 <__mcmp+0x28>

0800beb8 <__mdiff>:
 800beb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bebc:	460c      	mov	r4, r1
 800bebe:	4606      	mov	r6, r0
 800bec0:	4611      	mov	r1, r2
 800bec2:	4620      	mov	r0, r4
 800bec4:	4617      	mov	r7, r2
 800bec6:	f7ff ffdb 	bl	800be80 <__mcmp>
 800beca:	1e05      	subs	r5, r0, #0
 800becc:	d110      	bne.n	800bef0 <__mdiff+0x38>
 800bece:	4629      	mov	r1, r5
 800bed0:	4630      	mov	r0, r6
 800bed2:	f7ff fd0d 	bl	800b8f0 <_Balloc>
 800bed6:	b930      	cbnz	r0, 800bee6 <__mdiff+0x2e>
 800bed8:	4b39      	ldr	r3, [pc, #228]	; (800bfc0 <__mdiff+0x108>)
 800beda:	4602      	mov	r2, r0
 800bedc:	f240 2132 	movw	r1, #562	; 0x232
 800bee0:	4838      	ldr	r0, [pc, #224]	; (800bfc4 <__mdiff+0x10c>)
 800bee2:	f000 fe6d 	bl	800cbc0 <__assert_func>
 800bee6:	2301      	movs	r3, #1
 800bee8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800beec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bef0:	bfa4      	itt	ge
 800bef2:	463b      	movge	r3, r7
 800bef4:	4627      	movge	r7, r4
 800bef6:	4630      	mov	r0, r6
 800bef8:	6879      	ldr	r1, [r7, #4]
 800befa:	bfa6      	itte	ge
 800befc:	461c      	movge	r4, r3
 800befe:	2500      	movge	r5, #0
 800bf00:	2501      	movlt	r5, #1
 800bf02:	f7ff fcf5 	bl	800b8f0 <_Balloc>
 800bf06:	b920      	cbnz	r0, 800bf12 <__mdiff+0x5a>
 800bf08:	4b2d      	ldr	r3, [pc, #180]	; (800bfc0 <__mdiff+0x108>)
 800bf0a:	4602      	mov	r2, r0
 800bf0c:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bf10:	e7e6      	b.n	800bee0 <__mdiff+0x28>
 800bf12:	693e      	ldr	r6, [r7, #16]
 800bf14:	60c5      	str	r5, [r0, #12]
 800bf16:	6925      	ldr	r5, [r4, #16]
 800bf18:	f107 0114 	add.w	r1, r7, #20
 800bf1c:	f104 0914 	add.w	r9, r4, #20
 800bf20:	f100 0e14 	add.w	lr, r0, #20
 800bf24:	f107 0210 	add.w	r2, r7, #16
 800bf28:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800bf2c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800bf30:	46f2      	mov	sl, lr
 800bf32:	2700      	movs	r7, #0
 800bf34:	f859 3b04 	ldr.w	r3, [r9], #4
 800bf38:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bf3c:	fa1f f883 	uxth.w	r8, r3
 800bf40:	fa17 f78b 	uxtah	r7, r7, fp
 800bf44:	0c1b      	lsrs	r3, r3, #16
 800bf46:	eba7 0808 	sub.w	r8, r7, r8
 800bf4a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bf4e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bf52:	fa1f f888 	uxth.w	r8, r8
 800bf56:	141f      	asrs	r7, r3, #16
 800bf58:	454d      	cmp	r5, r9
 800bf5a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bf5e:	f84a 3b04 	str.w	r3, [sl], #4
 800bf62:	d8e7      	bhi.n	800bf34 <__mdiff+0x7c>
 800bf64:	1b2b      	subs	r3, r5, r4
 800bf66:	3b15      	subs	r3, #21
 800bf68:	f023 0303 	bic.w	r3, r3, #3
 800bf6c:	3304      	adds	r3, #4
 800bf6e:	3415      	adds	r4, #21
 800bf70:	42a5      	cmp	r5, r4
 800bf72:	bf38      	it	cc
 800bf74:	2304      	movcc	r3, #4
 800bf76:	4419      	add	r1, r3
 800bf78:	4473      	add	r3, lr
 800bf7a:	469e      	mov	lr, r3
 800bf7c:	460d      	mov	r5, r1
 800bf7e:	4565      	cmp	r5, ip
 800bf80:	d30e      	bcc.n	800bfa0 <__mdiff+0xe8>
 800bf82:	f10c 0203 	add.w	r2, ip, #3
 800bf86:	1a52      	subs	r2, r2, r1
 800bf88:	f022 0203 	bic.w	r2, r2, #3
 800bf8c:	3903      	subs	r1, #3
 800bf8e:	458c      	cmp	ip, r1
 800bf90:	bf38      	it	cc
 800bf92:	2200      	movcc	r2, #0
 800bf94:	441a      	add	r2, r3
 800bf96:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800bf9a:	b17b      	cbz	r3, 800bfbc <__mdiff+0x104>
 800bf9c:	6106      	str	r6, [r0, #16]
 800bf9e:	e7a5      	b.n	800beec <__mdiff+0x34>
 800bfa0:	f855 8b04 	ldr.w	r8, [r5], #4
 800bfa4:	fa17 f488 	uxtah	r4, r7, r8
 800bfa8:	1422      	asrs	r2, r4, #16
 800bfaa:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800bfae:	b2a4      	uxth	r4, r4
 800bfb0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800bfb4:	f84e 4b04 	str.w	r4, [lr], #4
 800bfb8:	1417      	asrs	r7, r2, #16
 800bfba:	e7e0      	b.n	800bf7e <__mdiff+0xc6>
 800bfbc:	3e01      	subs	r6, #1
 800bfbe:	e7ea      	b.n	800bf96 <__mdiff+0xde>
 800bfc0:	0800e36c 	.word	0x0800e36c
 800bfc4:	0800e460 	.word	0x0800e460

0800bfc8 <__ulp>:
 800bfc8:	b082      	sub	sp, #8
 800bfca:	ed8d 0b00 	vstr	d0, [sp]
 800bfce:	9b01      	ldr	r3, [sp, #4]
 800bfd0:	4912      	ldr	r1, [pc, #72]	; (800c01c <__ulp+0x54>)
 800bfd2:	4019      	ands	r1, r3
 800bfd4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800bfd8:	2900      	cmp	r1, #0
 800bfda:	dd05      	ble.n	800bfe8 <__ulp+0x20>
 800bfdc:	2200      	movs	r2, #0
 800bfde:	460b      	mov	r3, r1
 800bfe0:	ec43 2b10 	vmov	d0, r2, r3
 800bfe4:	b002      	add	sp, #8
 800bfe6:	4770      	bx	lr
 800bfe8:	4249      	negs	r1, r1
 800bfea:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800bfee:	ea4f 5021 	mov.w	r0, r1, asr #20
 800bff2:	f04f 0200 	mov.w	r2, #0
 800bff6:	f04f 0300 	mov.w	r3, #0
 800bffa:	da04      	bge.n	800c006 <__ulp+0x3e>
 800bffc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c000:	fa41 f300 	asr.w	r3, r1, r0
 800c004:	e7ec      	b.n	800bfe0 <__ulp+0x18>
 800c006:	f1a0 0114 	sub.w	r1, r0, #20
 800c00a:	291e      	cmp	r1, #30
 800c00c:	bfda      	itte	le
 800c00e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800c012:	fa20 f101 	lsrle.w	r1, r0, r1
 800c016:	2101      	movgt	r1, #1
 800c018:	460a      	mov	r2, r1
 800c01a:	e7e1      	b.n	800bfe0 <__ulp+0x18>
 800c01c:	7ff00000 	.word	0x7ff00000

0800c020 <__b2d>:
 800c020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c022:	6905      	ldr	r5, [r0, #16]
 800c024:	f100 0714 	add.w	r7, r0, #20
 800c028:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c02c:	1f2e      	subs	r6, r5, #4
 800c02e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c032:	4620      	mov	r0, r4
 800c034:	f7ff fd52 	bl	800badc <__hi0bits>
 800c038:	f1c0 0320 	rsb	r3, r0, #32
 800c03c:	280a      	cmp	r0, #10
 800c03e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800c0bc <__b2d+0x9c>
 800c042:	600b      	str	r3, [r1, #0]
 800c044:	dc14      	bgt.n	800c070 <__b2d+0x50>
 800c046:	f1c0 0e0b 	rsb	lr, r0, #11
 800c04a:	fa24 f10e 	lsr.w	r1, r4, lr
 800c04e:	42b7      	cmp	r7, r6
 800c050:	ea41 030c 	orr.w	r3, r1, ip
 800c054:	bf34      	ite	cc
 800c056:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c05a:	2100      	movcs	r1, #0
 800c05c:	3015      	adds	r0, #21
 800c05e:	fa04 f000 	lsl.w	r0, r4, r0
 800c062:	fa21 f10e 	lsr.w	r1, r1, lr
 800c066:	ea40 0201 	orr.w	r2, r0, r1
 800c06a:	ec43 2b10 	vmov	d0, r2, r3
 800c06e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c070:	42b7      	cmp	r7, r6
 800c072:	bf3a      	itte	cc
 800c074:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c078:	f1a5 0608 	subcc.w	r6, r5, #8
 800c07c:	2100      	movcs	r1, #0
 800c07e:	380b      	subs	r0, #11
 800c080:	d017      	beq.n	800c0b2 <__b2d+0x92>
 800c082:	f1c0 0c20 	rsb	ip, r0, #32
 800c086:	fa04 f500 	lsl.w	r5, r4, r0
 800c08a:	42be      	cmp	r6, r7
 800c08c:	fa21 f40c 	lsr.w	r4, r1, ip
 800c090:	ea45 0504 	orr.w	r5, r5, r4
 800c094:	bf8c      	ite	hi
 800c096:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c09a:	2400      	movls	r4, #0
 800c09c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800c0a0:	fa01 f000 	lsl.w	r0, r1, r0
 800c0a4:	fa24 f40c 	lsr.w	r4, r4, ip
 800c0a8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c0ac:	ea40 0204 	orr.w	r2, r0, r4
 800c0b0:	e7db      	b.n	800c06a <__b2d+0x4a>
 800c0b2:	ea44 030c 	orr.w	r3, r4, ip
 800c0b6:	460a      	mov	r2, r1
 800c0b8:	e7d7      	b.n	800c06a <__b2d+0x4a>
 800c0ba:	bf00      	nop
 800c0bc:	3ff00000 	.word	0x3ff00000

0800c0c0 <__d2b>:
 800c0c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c0c4:	4689      	mov	r9, r1
 800c0c6:	2101      	movs	r1, #1
 800c0c8:	ec57 6b10 	vmov	r6, r7, d0
 800c0cc:	4690      	mov	r8, r2
 800c0ce:	f7ff fc0f 	bl	800b8f0 <_Balloc>
 800c0d2:	4604      	mov	r4, r0
 800c0d4:	b930      	cbnz	r0, 800c0e4 <__d2b+0x24>
 800c0d6:	4602      	mov	r2, r0
 800c0d8:	4b25      	ldr	r3, [pc, #148]	; (800c170 <__d2b+0xb0>)
 800c0da:	4826      	ldr	r0, [pc, #152]	; (800c174 <__d2b+0xb4>)
 800c0dc:	f240 310a 	movw	r1, #778	; 0x30a
 800c0e0:	f000 fd6e 	bl	800cbc0 <__assert_func>
 800c0e4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c0e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c0ec:	bb35      	cbnz	r5, 800c13c <__d2b+0x7c>
 800c0ee:	2e00      	cmp	r6, #0
 800c0f0:	9301      	str	r3, [sp, #4]
 800c0f2:	d028      	beq.n	800c146 <__d2b+0x86>
 800c0f4:	4668      	mov	r0, sp
 800c0f6:	9600      	str	r6, [sp, #0]
 800c0f8:	f7ff fd10 	bl	800bb1c <__lo0bits>
 800c0fc:	9900      	ldr	r1, [sp, #0]
 800c0fe:	b300      	cbz	r0, 800c142 <__d2b+0x82>
 800c100:	9a01      	ldr	r2, [sp, #4]
 800c102:	f1c0 0320 	rsb	r3, r0, #32
 800c106:	fa02 f303 	lsl.w	r3, r2, r3
 800c10a:	430b      	orrs	r3, r1
 800c10c:	40c2      	lsrs	r2, r0
 800c10e:	6163      	str	r3, [r4, #20]
 800c110:	9201      	str	r2, [sp, #4]
 800c112:	9b01      	ldr	r3, [sp, #4]
 800c114:	61a3      	str	r3, [r4, #24]
 800c116:	2b00      	cmp	r3, #0
 800c118:	bf14      	ite	ne
 800c11a:	2202      	movne	r2, #2
 800c11c:	2201      	moveq	r2, #1
 800c11e:	6122      	str	r2, [r4, #16]
 800c120:	b1d5      	cbz	r5, 800c158 <__d2b+0x98>
 800c122:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c126:	4405      	add	r5, r0
 800c128:	f8c9 5000 	str.w	r5, [r9]
 800c12c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c130:	f8c8 0000 	str.w	r0, [r8]
 800c134:	4620      	mov	r0, r4
 800c136:	b003      	add	sp, #12
 800c138:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c13c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c140:	e7d5      	b.n	800c0ee <__d2b+0x2e>
 800c142:	6161      	str	r1, [r4, #20]
 800c144:	e7e5      	b.n	800c112 <__d2b+0x52>
 800c146:	a801      	add	r0, sp, #4
 800c148:	f7ff fce8 	bl	800bb1c <__lo0bits>
 800c14c:	9b01      	ldr	r3, [sp, #4]
 800c14e:	6163      	str	r3, [r4, #20]
 800c150:	2201      	movs	r2, #1
 800c152:	6122      	str	r2, [r4, #16]
 800c154:	3020      	adds	r0, #32
 800c156:	e7e3      	b.n	800c120 <__d2b+0x60>
 800c158:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c15c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c160:	f8c9 0000 	str.w	r0, [r9]
 800c164:	6918      	ldr	r0, [r3, #16]
 800c166:	f7ff fcb9 	bl	800badc <__hi0bits>
 800c16a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c16e:	e7df      	b.n	800c130 <__d2b+0x70>
 800c170:	0800e36c 	.word	0x0800e36c
 800c174:	0800e460 	.word	0x0800e460

0800c178 <__ratio>:
 800c178:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c17c:	4688      	mov	r8, r1
 800c17e:	4669      	mov	r1, sp
 800c180:	4681      	mov	r9, r0
 800c182:	f7ff ff4d 	bl	800c020 <__b2d>
 800c186:	a901      	add	r1, sp, #4
 800c188:	4640      	mov	r0, r8
 800c18a:	ec55 4b10 	vmov	r4, r5, d0
 800c18e:	f7ff ff47 	bl	800c020 <__b2d>
 800c192:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c196:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c19a:	eba3 0c02 	sub.w	ip, r3, r2
 800c19e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c1a2:	1a9b      	subs	r3, r3, r2
 800c1a4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c1a8:	ec51 0b10 	vmov	r0, r1, d0
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	bfd6      	itet	le
 800c1b0:	460a      	movle	r2, r1
 800c1b2:	462a      	movgt	r2, r5
 800c1b4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c1b8:	468b      	mov	fp, r1
 800c1ba:	462f      	mov	r7, r5
 800c1bc:	bfd4      	ite	le
 800c1be:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c1c2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c1c6:	4620      	mov	r0, r4
 800c1c8:	ee10 2a10 	vmov	r2, s0
 800c1cc:	465b      	mov	r3, fp
 800c1ce:	4639      	mov	r1, r7
 800c1d0:	f7f4 fb3c 	bl	800084c <__aeabi_ddiv>
 800c1d4:	ec41 0b10 	vmov	d0, r0, r1
 800c1d8:	b003      	add	sp, #12
 800c1da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c1de <__copybits>:
 800c1de:	3901      	subs	r1, #1
 800c1e0:	b570      	push	{r4, r5, r6, lr}
 800c1e2:	1149      	asrs	r1, r1, #5
 800c1e4:	6914      	ldr	r4, [r2, #16]
 800c1e6:	3101      	adds	r1, #1
 800c1e8:	f102 0314 	add.w	r3, r2, #20
 800c1ec:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c1f0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c1f4:	1f05      	subs	r5, r0, #4
 800c1f6:	42a3      	cmp	r3, r4
 800c1f8:	d30c      	bcc.n	800c214 <__copybits+0x36>
 800c1fa:	1aa3      	subs	r3, r4, r2
 800c1fc:	3b11      	subs	r3, #17
 800c1fe:	f023 0303 	bic.w	r3, r3, #3
 800c202:	3211      	adds	r2, #17
 800c204:	42a2      	cmp	r2, r4
 800c206:	bf88      	it	hi
 800c208:	2300      	movhi	r3, #0
 800c20a:	4418      	add	r0, r3
 800c20c:	2300      	movs	r3, #0
 800c20e:	4288      	cmp	r0, r1
 800c210:	d305      	bcc.n	800c21e <__copybits+0x40>
 800c212:	bd70      	pop	{r4, r5, r6, pc}
 800c214:	f853 6b04 	ldr.w	r6, [r3], #4
 800c218:	f845 6f04 	str.w	r6, [r5, #4]!
 800c21c:	e7eb      	b.n	800c1f6 <__copybits+0x18>
 800c21e:	f840 3b04 	str.w	r3, [r0], #4
 800c222:	e7f4      	b.n	800c20e <__copybits+0x30>

0800c224 <__any_on>:
 800c224:	f100 0214 	add.w	r2, r0, #20
 800c228:	6900      	ldr	r0, [r0, #16]
 800c22a:	114b      	asrs	r3, r1, #5
 800c22c:	4298      	cmp	r0, r3
 800c22e:	b510      	push	{r4, lr}
 800c230:	db11      	blt.n	800c256 <__any_on+0x32>
 800c232:	dd0a      	ble.n	800c24a <__any_on+0x26>
 800c234:	f011 011f 	ands.w	r1, r1, #31
 800c238:	d007      	beq.n	800c24a <__any_on+0x26>
 800c23a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c23e:	fa24 f001 	lsr.w	r0, r4, r1
 800c242:	fa00 f101 	lsl.w	r1, r0, r1
 800c246:	428c      	cmp	r4, r1
 800c248:	d10b      	bne.n	800c262 <__any_on+0x3e>
 800c24a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c24e:	4293      	cmp	r3, r2
 800c250:	d803      	bhi.n	800c25a <__any_on+0x36>
 800c252:	2000      	movs	r0, #0
 800c254:	bd10      	pop	{r4, pc}
 800c256:	4603      	mov	r3, r0
 800c258:	e7f7      	b.n	800c24a <__any_on+0x26>
 800c25a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c25e:	2900      	cmp	r1, #0
 800c260:	d0f5      	beq.n	800c24e <__any_on+0x2a>
 800c262:	2001      	movs	r0, #1
 800c264:	e7f6      	b.n	800c254 <__any_on+0x30>

0800c266 <_calloc_r>:
 800c266:	b513      	push	{r0, r1, r4, lr}
 800c268:	434a      	muls	r2, r1
 800c26a:	4611      	mov	r1, r2
 800c26c:	9201      	str	r2, [sp, #4]
 800c26e:	f000 f859 	bl	800c324 <_malloc_r>
 800c272:	4604      	mov	r4, r0
 800c274:	b118      	cbz	r0, 800c27e <_calloc_r+0x18>
 800c276:	9a01      	ldr	r2, [sp, #4]
 800c278:	2100      	movs	r1, #0
 800c27a:	f7fc f8af 	bl	80083dc <memset>
 800c27e:	4620      	mov	r0, r4
 800c280:	b002      	add	sp, #8
 800c282:	bd10      	pop	{r4, pc}

0800c284 <_free_r>:
 800c284:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c286:	2900      	cmp	r1, #0
 800c288:	d048      	beq.n	800c31c <_free_r+0x98>
 800c28a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c28e:	9001      	str	r0, [sp, #4]
 800c290:	2b00      	cmp	r3, #0
 800c292:	f1a1 0404 	sub.w	r4, r1, #4
 800c296:	bfb8      	it	lt
 800c298:	18e4      	addlt	r4, r4, r3
 800c29a:	f000 fd1f 	bl	800ccdc <__malloc_lock>
 800c29e:	4a20      	ldr	r2, [pc, #128]	; (800c320 <_free_r+0x9c>)
 800c2a0:	9801      	ldr	r0, [sp, #4]
 800c2a2:	6813      	ldr	r3, [r2, #0]
 800c2a4:	4615      	mov	r5, r2
 800c2a6:	b933      	cbnz	r3, 800c2b6 <_free_r+0x32>
 800c2a8:	6063      	str	r3, [r4, #4]
 800c2aa:	6014      	str	r4, [r2, #0]
 800c2ac:	b003      	add	sp, #12
 800c2ae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c2b2:	f000 bd19 	b.w	800cce8 <__malloc_unlock>
 800c2b6:	42a3      	cmp	r3, r4
 800c2b8:	d90b      	bls.n	800c2d2 <_free_r+0x4e>
 800c2ba:	6821      	ldr	r1, [r4, #0]
 800c2bc:	1862      	adds	r2, r4, r1
 800c2be:	4293      	cmp	r3, r2
 800c2c0:	bf04      	itt	eq
 800c2c2:	681a      	ldreq	r2, [r3, #0]
 800c2c4:	685b      	ldreq	r3, [r3, #4]
 800c2c6:	6063      	str	r3, [r4, #4]
 800c2c8:	bf04      	itt	eq
 800c2ca:	1852      	addeq	r2, r2, r1
 800c2cc:	6022      	streq	r2, [r4, #0]
 800c2ce:	602c      	str	r4, [r5, #0]
 800c2d0:	e7ec      	b.n	800c2ac <_free_r+0x28>
 800c2d2:	461a      	mov	r2, r3
 800c2d4:	685b      	ldr	r3, [r3, #4]
 800c2d6:	b10b      	cbz	r3, 800c2dc <_free_r+0x58>
 800c2d8:	42a3      	cmp	r3, r4
 800c2da:	d9fa      	bls.n	800c2d2 <_free_r+0x4e>
 800c2dc:	6811      	ldr	r1, [r2, #0]
 800c2de:	1855      	adds	r5, r2, r1
 800c2e0:	42a5      	cmp	r5, r4
 800c2e2:	d10b      	bne.n	800c2fc <_free_r+0x78>
 800c2e4:	6824      	ldr	r4, [r4, #0]
 800c2e6:	4421      	add	r1, r4
 800c2e8:	1854      	adds	r4, r2, r1
 800c2ea:	42a3      	cmp	r3, r4
 800c2ec:	6011      	str	r1, [r2, #0]
 800c2ee:	d1dd      	bne.n	800c2ac <_free_r+0x28>
 800c2f0:	681c      	ldr	r4, [r3, #0]
 800c2f2:	685b      	ldr	r3, [r3, #4]
 800c2f4:	6053      	str	r3, [r2, #4]
 800c2f6:	4421      	add	r1, r4
 800c2f8:	6011      	str	r1, [r2, #0]
 800c2fa:	e7d7      	b.n	800c2ac <_free_r+0x28>
 800c2fc:	d902      	bls.n	800c304 <_free_r+0x80>
 800c2fe:	230c      	movs	r3, #12
 800c300:	6003      	str	r3, [r0, #0]
 800c302:	e7d3      	b.n	800c2ac <_free_r+0x28>
 800c304:	6825      	ldr	r5, [r4, #0]
 800c306:	1961      	adds	r1, r4, r5
 800c308:	428b      	cmp	r3, r1
 800c30a:	bf04      	itt	eq
 800c30c:	6819      	ldreq	r1, [r3, #0]
 800c30e:	685b      	ldreq	r3, [r3, #4]
 800c310:	6063      	str	r3, [r4, #4]
 800c312:	bf04      	itt	eq
 800c314:	1949      	addeq	r1, r1, r5
 800c316:	6021      	streq	r1, [r4, #0]
 800c318:	6054      	str	r4, [r2, #4]
 800c31a:	e7c7      	b.n	800c2ac <_free_r+0x28>
 800c31c:	b003      	add	sp, #12
 800c31e:	bd30      	pop	{r4, r5, pc}
 800c320:	20000a54 	.word	0x20000a54

0800c324 <_malloc_r>:
 800c324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c326:	1ccd      	adds	r5, r1, #3
 800c328:	f025 0503 	bic.w	r5, r5, #3
 800c32c:	3508      	adds	r5, #8
 800c32e:	2d0c      	cmp	r5, #12
 800c330:	bf38      	it	cc
 800c332:	250c      	movcc	r5, #12
 800c334:	2d00      	cmp	r5, #0
 800c336:	4606      	mov	r6, r0
 800c338:	db01      	blt.n	800c33e <_malloc_r+0x1a>
 800c33a:	42a9      	cmp	r1, r5
 800c33c:	d903      	bls.n	800c346 <_malloc_r+0x22>
 800c33e:	230c      	movs	r3, #12
 800c340:	6033      	str	r3, [r6, #0]
 800c342:	2000      	movs	r0, #0
 800c344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c346:	f000 fcc9 	bl	800ccdc <__malloc_lock>
 800c34a:	4921      	ldr	r1, [pc, #132]	; (800c3d0 <_malloc_r+0xac>)
 800c34c:	680a      	ldr	r2, [r1, #0]
 800c34e:	4614      	mov	r4, r2
 800c350:	b99c      	cbnz	r4, 800c37a <_malloc_r+0x56>
 800c352:	4f20      	ldr	r7, [pc, #128]	; (800c3d4 <_malloc_r+0xb0>)
 800c354:	683b      	ldr	r3, [r7, #0]
 800c356:	b923      	cbnz	r3, 800c362 <_malloc_r+0x3e>
 800c358:	4621      	mov	r1, r4
 800c35a:	4630      	mov	r0, r6
 800c35c:	f000 fafc 	bl	800c958 <_sbrk_r>
 800c360:	6038      	str	r0, [r7, #0]
 800c362:	4629      	mov	r1, r5
 800c364:	4630      	mov	r0, r6
 800c366:	f000 faf7 	bl	800c958 <_sbrk_r>
 800c36a:	1c43      	adds	r3, r0, #1
 800c36c:	d123      	bne.n	800c3b6 <_malloc_r+0x92>
 800c36e:	230c      	movs	r3, #12
 800c370:	6033      	str	r3, [r6, #0]
 800c372:	4630      	mov	r0, r6
 800c374:	f000 fcb8 	bl	800cce8 <__malloc_unlock>
 800c378:	e7e3      	b.n	800c342 <_malloc_r+0x1e>
 800c37a:	6823      	ldr	r3, [r4, #0]
 800c37c:	1b5b      	subs	r3, r3, r5
 800c37e:	d417      	bmi.n	800c3b0 <_malloc_r+0x8c>
 800c380:	2b0b      	cmp	r3, #11
 800c382:	d903      	bls.n	800c38c <_malloc_r+0x68>
 800c384:	6023      	str	r3, [r4, #0]
 800c386:	441c      	add	r4, r3
 800c388:	6025      	str	r5, [r4, #0]
 800c38a:	e004      	b.n	800c396 <_malloc_r+0x72>
 800c38c:	6863      	ldr	r3, [r4, #4]
 800c38e:	42a2      	cmp	r2, r4
 800c390:	bf0c      	ite	eq
 800c392:	600b      	streq	r3, [r1, #0]
 800c394:	6053      	strne	r3, [r2, #4]
 800c396:	4630      	mov	r0, r6
 800c398:	f000 fca6 	bl	800cce8 <__malloc_unlock>
 800c39c:	f104 000b 	add.w	r0, r4, #11
 800c3a0:	1d23      	adds	r3, r4, #4
 800c3a2:	f020 0007 	bic.w	r0, r0, #7
 800c3a6:	1ac2      	subs	r2, r0, r3
 800c3a8:	d0cc      	beq.n	800c344 <_malloc_r+0x20>
 800c3aa:	1a1b      	subs	r3, r3, r0
 800c3ac:	50a3      	str	r3, [r4, r2]
 800c3ae:	e7c9      	b.n	800c344 <_malloc_r+0x20>
 800c3b0:	4622      	mov	r2, r4
 800c3b2:	6864      	ldr	r4, [r4, #4]
 800c3b4:	e7cc      	b.n	800c350 <_malloc_r+0x2c>
 800c3b6:	1cc4      	adds	r4, r0, #3
 800c3b8:	f024 0403 	bic.w	r4, r4, #3
 800c3bc:	42a0      	cmp	r0, r4
 800c3be:	d0e3      	beq.n	800c388 <_malloc_r+0x64>
 800c3c0:	1a21      	subs	r1, r4, r0
 800c3c2:	4630      	mov	r0, r6
 800c3c4:	f000 fac8 	bl	800c958 <_sbrk_r>
 800c3c8:	3001      	adds	r0, #1
 800c3ca:	d1dd      	bne.n	800c388 <_malloc_r+0x64>
 800c3cc:	e7cf      	b.n	800c36e <_malloc_r+0x4a>
 800c3ce:	bf00      	nop
 800c3d0:	20000a54 	.word	0x20000a54
 800c3d4:	20000a58 	.word	0x20000a58

0800c3d8 <__ssputs_r>:
 800c3d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3dc:	688e      	ldr	r6, [r1, #8]
 800c3de:	429e      	cmp	r6, r3
 800c3e0:	4682      	mov	sl, r0
 800c3e2:	460c      	mov	r4, r1
 800c3e4:	4690      	mov	r8, r2
 800c3e6:	461f      	mov	r7, r3
 800c3e8:	d838      	bhi.n	800c45c <__ssputs_r+0x84>
 800c3ea:	898a      	ldrh	r2, [r1, #12]
 800c3ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c3f0:	d032      	beq.n	800c458 <__ssputs_r+0x80>
 800c3f2:	6825      	ldr	r5, [r4, #0]
 800c3f4:	6909      	ldr	r1, [r1, #16]
 800c3f6:	eba5 0901 	sub.w	r9, r5, r1
 800c3fa:	6965      	ldr	r5, [r4, #20]
 800c3fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c400:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c404:	3301      	adds	r3, #1
 800c406:	444b      	add	r3, r9
 800c408:	106d      	asrs	r5, r5, #1
 800c40a:	429d      	cmp	r5, r3
 800c40c:	bf38      	it	cc
 800c40e:	461d      	movcc	r5, r3
 800c410:	0553      	lsls	r3, r2, #21
 800c412:	d531      	bpl.n	800c478 <__ssputs_r+0xa0>
 800c414:	4629      	mov	r1, r5
 800c416:	f7ff ff85 	bl	800c324 <_malloc_r>
 800c41a:	4606      	mov	r6, r0
 800c41c:	b950      	cbnz	r0, 800c434 <__ssputs_r+0x5c>
 800c41e:	230c      	movs	r3, #12
 800c420:	f8ca 3000 	str.w	r3, [sl]
 800c424:	89a3      	ldrh	r3, [r4, #12]
 800c426:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c42a:	81a3      	strh	r3, [r4, #12]
 800c42c:	f04f 30ff 	mov.w	r0, #4294967295
 800c430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c434:	6921      	ldr	r1, [r4, #16]
 800c436:	464a      	mov	r2, r9
 800c438:	f7fb ffc2 	bl	80083c0 <memcpy>
 800c43c:	89a3      	ldrh	r3, [r4, #12]
 800c43e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c442:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c446:	81a3      	strh	r3, [r4, #12]
 800c448:	6126      	str	r6, [r4, #16]
 800c44a:	6165      	str	r5, [r4, #20]
 800c44c:	444e      	add	r6, r9
 800c44e:	eba5 0509 	sub.w	r5, r5, r9
 800c452:	6026      	str	r6, [r4, #0]
 800c454:	60a5      	str	r5, [r4, #8]
 800c456:	463e      	mov	r6, r7
 800c458:	42be      	cmp	r6, r7
 800c45a:	d900      	bls.n	800c45e <__ssputs_r+0x86>
 800c45c:	463e      	mov	r6, r7
 800c45e:	4632      	mov	r2, r6
 800c460:	6820      	ldr	r0, [r4, #0]
 800c462:	4641      	mov	r1, r8
 800c464:	f000 fc20 	bl	800cca8 <memmove>
 800c468:	68a3      	ldr	r3, [r4, #8]
 800c46a:	6822      	ldr	r2, [r4, #0]
 800c46c:	1b9b      	subs	r3, r3, r6
 800c46e:	4432      	add	r2, r6
 800c470:	60a3      	str	r3, [r4, #8]
 800c472:	6022      	str	r2, [r4, #0]
 800c474:	2000      	movs	r0, #0
 800c476:	e7db      	b.n	800c430 <__ssputs_r+0x58>
 800c478:	462a      	mov	r2, r5
 800c47a:	f000 fc3b 	bl	800ccf4 <_realloc_r>
 800c47e:	4606      	mov	r6, r0
 800c480:	2800      	cmp	r0, #0
 800c482:	d1e1      	bne.n	800c448 <__ssputs_r+0x70>
 800c484:	6921      	ldr	r1, [r4, #16]
 800c486:	4650      	mov	r0, sl
 800c488:	f7ff fefc 	bl	800c284 <_free_r>
 800c48c:	e7c7      	b.n	800c41e <__ssputs_r+0x46>
	...

0800c490 <_svfiprintf_r>:
 800c490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c494:	4698      	mov	r8, r3
 800c496:	898b      	ldrh	r3, [r1, #12]
 800c498:	061b      	lsls	r3, r3, #24
 800c49a:	b09d      	sub	sp, #116	; 0x74
 800c49c:	4607      	mov	r7, r0
 800c49e:	460d      	mov	r5, r1
 800c4a0:	4614      	mov	r4, r2
 800c4a2:	d50e      	bpl.n	800c4c2 <_svfiprintf_r+0x32>
 800c4a4:	690b      	ldr	r3, [r1, #16]
 800c4a6:	b963      	cbnz	r3, 800c4c2 <_svfiprintf_r+0x32>
 800c4a8:	2140      	movs	r1, #64	; 0x40
 800c4aa:	f7ff ff3b 	bl	800c324 <_malloc_r>
 800c4ae:	6028      	str	r0, [r5, #0]
 800c4b0:	6128      	str	r0, [r5, #16]
 800c4b2:	b920      	cbnz	r0, 800c4be <_svfiprintf_r+0x2e>
 800c4b4:	230c      	movs	r3, #12
 800c4b6:	603b      	str	r3, [r7, #0]
 800c4b8:	f04f 30ff 	mov.w	r0, #4294967295
 800c4bc:	e0d1      	b.n	800c662 <_svfiprintf_r+0x1d2>
 800c4be:	2340      	movs	r3, #64	; 0x40
 800c4c0:	616b      	str	r3, [r5, #20]
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	9309      	str	r3, [sp, #36]	; 0x24
 800c4c6:	2320      	movs	r3, #32
 800c4c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c4cc:	f8cd 800c 	str.w	r8, [sp, #12]
 800c4d0:	2330      	movs	r3, #48	; 0x30
 800c4d2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c67c <_svfiprintf_r+0x1ec>
 800c4d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c4da:	f04f 0901 	mov.w	r9, #1
 800c4de:	4623      	mov	r3, r4
 800c4e0:	469a      	mov	sl, r3
 800c4e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c4e6:	b10a      	cbz	r2, 800c4ec <_svfiprintf_r+0x5c>
 800c4e8:	2a25      	cmp	r2, #37	; 0x25
 800c4ea:	d1f9      	bne.n	800c4e0 <_svfiprintf_r+0x50>
 800c4ec:	ebba 0b04 	subs.w	fp, sl, r4
 800c4f0:	d00b      	beq.n	800c50a <_svfiprintf_r+0x7a>
 800c4f2:	465b      	mov	r3, fp
 800c4f4:	4622      	mov	r2, r4
 800c4f6:	4629      	mov	r1, r5
 800c4f8:	4638      	mov	r0, r7
 800c4fa:	f7ff ff6d 	bl	800c3d8 <__ssputs_r>
 800c4fe:	3001      	adds	r0, #1
 800c500:	f000 80aa 	beq.w	800c658 <_svfiprintf_r+0x1c8>
 800c504:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c506:	445a      	add	r2, fp
 800c508:	9209      	str	r2, [sp, #36]	; 0x24
 800c50a:	f89a 3000 	ldrb.w	r3, [sl]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	f000 80a2 	beq.w	800c658 <_svfiprintf_r+0x1c8>
 800c514:	2300      	movs	r3, #0
 800c516:	f04f 32ff 	mov.w	r2, #4294967295
 800c51a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c51e:	f10a 0a01 	add.w	sl, sl, #1
 800c522:	9304      	str	r3, [sp, #16]
 800c524:	9307      	str	r3, [sp, #28]
 800c526:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c52a:	931a      	str	r3, [sp, #104]	; 0x68
 800c52c:	4654      	mov	r4, sl
 800c52e:	2205      	movs	r2, #5
 800c530:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c534:	4851      	ldr	r0, [pc, #324]	; (800c67c <_svfiprintf_r+0x1ec>)
 800c536:	f7f3 fe4b 	bl	80001d0 <memchr>
 800c53a:	9a04      	ldr	r2, [sp, #16]
 800c53c:	b9d8      	cbnz	r0, 800c576 <_svfiprintf_r+0xe6>
 800c53e:	06d0      	lsls	r0, r2, #27
 800c540:	bf44      	itt	mi
 800c542:	2320      	movmi	r3, #32
 800c544:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c548:	0711      	lsls	r1, r2, #28
 800c54a:	bf44      	itt	mi
 800c54c:	232b      	movmi	r3, #43	; 0x2b
 800c54e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c552:	f89a 3000 	ldrb.w	r3, [sl]
 800c556:	2b2a      	cmp	r3, #42	; 0x2a
 800c558:	d015      	beq.n	800c586 <_svfiprintf_r+0xf6>
 800c55a:	9a07      	ldr	r2, [sp, #28]
 800c55c:	4654      	mov	r4, sl
 800c55e:	2000      	movs	r0, #0
 800c560:	f04f 0c0a 	mov.w	ip, #10
 800c564:	4621      	mov	r1, r4
 800c566:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c56a:	3b30      	subs	r3, #48	; 0x30
 800c56c:	2b09      	cmp	r3, #9
 800c56e:	d94e      	bls.n	800c60e <_svfiprintf_r+0x17e>
 800c570:	b1b0      	cbz	r0, 800c5a0 <_svfiprintf_r+0x110>
 800c572:	9207      	str	r2, [sp, #28]
 800c574:	e014      	b.n	800c5a0 <_svfiprintf_r+0x110>
 800c576:	eba0 0308 	sub.w	r3, r0, r8
 800c57a:	fa09 f303 	lsl.w	r3, r9, r3
 800c57e:	4313      	orrs	r3, r2
 800c580:	9304      	str	r3, [sp, #16]
 800c582:	46a2      	mov	sl, r4
 800c584:	e7d2      	b.n	800c52c <_svfiprintf_r+0x9c>
 800c586:	9b03      	ldr	r3, [sp, #12]
 800c588:	1d19      	adds	r1, r3, #4
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	9103      	str	r1, [sp, #12]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	bfbb      	ittet	lt
 800c592:	425b      	neglt	r3, r3
 800c594:	f042 0202 	orrlt.w	r2, r2, #2
 800c598:	9307      	strge	r3, [sp, #28]
 800c59a:	9307      	strlt	r3, [sp, #28]
 800c59c:	bfb8      	it	lt
 800c59e:	9204      	strlt	r2, [sp, #16]
 800c5a0:	7823      	ldrb	r3, [r4, #0]
 800c5a2:	2b2e      	cmp	r3, #46	; 0x2e
 800c5a4:	d10c      	bne.n	800c5c0 <_svfiprintf_r+0x130>
 800c5a6:	7863      	ldrb	r3, [r4, #1]
 800c5a8:	2b2a      	cmp	r3, #42	; 0x2a
 800c5aa:	d135      	bne.n	800c618 <_svfiprintf_r+0x188>
 800c5ac:	9b03      	ldr	r3, [sp, #12]
 800c5ae:	1d1a      	adds	r2, r3, #4
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	9203      	str	r2, [sp, #12]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	bfb8      	it	lt
 800c5b8:	f04f 33ff 	movlt.w	r3, #4294967295
 800c5bc:	3402      	adds	r4, #2
 800c5be:	9305      	str	r3, [sp, #20]
 800c5c0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c68c <_svfiprintf_r+0x1fc>
 800c5c4:	7821      	ldrb	r1, [r4, #0]
 800c5c6:	2203      	movs	r2, #3
 800c5c8:	4650      	mov	r0, sl
 800c5ca:	f7f3 fe01 	bl	80001d0 <memchr>
 800c5ce:	b140      	cbz	r0, 800c5e2 <_svfiprintf_r+0x152>
 800c5d0:	2340      	movs	r3, #64	; 0x40
 800c5d2:	eba0 000a 	sub.w	r0, r0, sl
 800c5d6:	fa03 f000 	lsl.w	r0, r3, r0
 800c5da:	9b04      	ldr	r3, [sp, #16]
 800c5dc:	4303      	orrs	r3, r0
 800c5de:	3401      	adds	r4, #1
 800c5e0:	9304      	str	r3, [sp, #16]
 800c5e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5e6:	4826      	ldr	r0, [pc, #152]	; (800c680 <_svfiprintf_r+0x1f0>)
 800c5e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c5ec:	2206      	movs	r2, #6
 800c5ee:	f7f3 fdef 	bl	80001d0 <memchr>
 800c5f2:	2800      	cmp	r0, #0
 800c5f4:	d038      	beq.n	800c668 <_svfiprintf_r+0x1d8>
 800c5f6:	4b23      	ldr	r3, [pc, #140]	; (800c684 <_svfiprintf_r+0x1f4>)
 800c5f8:	bb1b      	cbnz	r3, 800c642 <_svfiprintf_r+0x1b2>
 800c5fa:	9b03      	ldr	r3, [sp, #12]
 800c5fc:	3307      	adds	r3, #7
 800c5fe:	f023 0307 	bic.w	r3, r3, #7
 800c602:	3308      	adds	r3, #8
 800c604:	9303      	str	r3, [sp, #12]
 800c606:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c608:	4433      	add	r3, r6
 800c60a:	9309      	str	r3, [sp, #36]	; 0x24
 800c60c:	e767      	b.n	800c4de <_svfiprintf_r+0x4e>
 800c60e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c612:	460c      	mov	r4, r1
 800c614:	2001      	movs	r0, #1
 800c616:	e7a5      	b.n	800c564 <_svfiprintf_r+0xd4>
 800c618:	2300      	movs	r3, #0
 800c61a:	3401      	adds	r4, #1
 800c61c:	9305      	str	r3, [sp, #20]
 800c61e:	4619      	mov	r1, r3
 800c620:	f04f 0c0a 	mov.w	ip, #10
 800c624:	4620      	mov	r0, r4
 800c626:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c62a:	3a30      	subs	r2, #48	; 0x30
 800c62c:	2a09      	cmp	r2, #9
 800c62e:	d903      	bls.n	800c638 <_svfiprintf_r+0x1a8>
 800c630:	2b00      	cmp	r3, #0
 800c632:	d0c5      	beq.n	800c5c0 <_svfiprintf_r+0x130>
 800c634:	9105      	str	r1, [sp, #20]
 800c636:	e7c3      	b.n	800c5c0 <_svfiprintf_r+0x130>
 800c638:	fb0c 2101 	mla	r1, ip, r1, r2
 800c63c:	4604      	mov	r4, r0
 800c63e:	2301      	movs	r3, #1
 800c640:	e7f0      	b.n	800c624 <_svfiprintf_r+0x194>
 800c642:	ab03      	add	r3, sp, #12
 800c644:	9300      	str	r3, [sp, #0]
 800c646:	462a      	mov	r2, r5
 800c648:	4b0f      	ldr	r3, [pc, #60]	; (800c688 <_svfiprintf_r+0x1f8>)
 800c64a:	a904      	add	r1, sp, #16
 800c64c:	4638      	mov	r0, r7
 800c64e:	f7fb ff6d 	bl	800852c <_printf_float>
 800c652:	1c42      	adds	r2, r0, #1
 800c654:	4606      	mov	r6, r0
 800c656:	d1d6      	bne.n	800c606 <_svfiprintf_r+0x176>
 800c658:	89ab      	ldrh	r3, [r5, #12]
 800c65a:	065b      	lsls	r3, r3, #25
 800c65c:	f53f af2c 	bmi.w	800c4b8 <_svfiprintf_r+0x28>
 800c660:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c662:	b01d      	add	sp, #116	; 0x74
 800c664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c668:	ab03      	add	r3, sp, #12
 800c66a:	9300      	str	r3, [sp, #0]
 800c66c:	462a      	mov	r2, r5
 800c66e:	4b06      	ldr	r3, [pc, #24]	; (800c688 <_svfiprintf_r+0x1f8>)
 800c670:	a904      	add	r1, sp, #16
 800c672:	4638      	mov	r0, r7
 800c674:	f7fc f9fe 	bl	8008a74 <_printf_i>
 800c678:	e7eb      	b.n	800c652 <_svfiprintf_r+0x1c2>
 800c67a:	bf00      	nop
 800c67c:	0800e5bc 	.word	0x0800e5bc
 800c680:	0800e5c6 	.word	0x0800e5c6
 800c684:	0800852d 	.word	0x0800852d
 800c688:	0800c3d9 	.word	0x0800c3d9
 800c68c:	0800e5c2 	.word	0x0800e5c2

0800c690 <__sfputc_r>:
 800c690:	6893      	ldr	r3, [r2, #8]
 800c692:	3b01      	subs	r3, #1
 800c694:	2b00      	cmp	r3, #0
 800c696:	b410      	push	{r4}
 800c698:	6093      	str	r3, [r2, #8]
 800c69a:	da08      	bge.n	800c6ae <__sfputc_r+0x1e>
 800c69c:	6994      	ldr	r4, [r2, #24]
 800c69e:	42a3      	cmp	r3, r4
 800c6a0:	db01      	blt.n	800c6a6 <__sfputc_r+0x16>
 800c6a2:	290a      	cmp	r1, #10
 800c6a4:	d103      	bne.n	800c6ae <__sfputc_r+0x1e>
 800c6a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c6aa:	f000 b9a9 	b.w	800ca00 <__swbuf_r>
 800c6ae:	6813      	ldr	r3, [r2, #0]
 800c6b0:	1c58      	adds	r0, r3, #1
 800c6b2:	6010      	str	r0, [r2, #0]
 800c6b4:	7019      	strb	r1, [r3, #0]
 800c6b6:	4608      	mov	r0, r1
 800c6b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c6bc:	4770      	bx	lr

0800c6be <__sfputs_r>:
 800c6be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6c0:	4606      	mov	r6, r0
 800c6c2:	460f      	mov	r7, r1
 800c6c4:	4614      	mov	r4, r2
 800c6c6:	18d5      	adds	r5, r2, r3
 800c6c8:	42ac      	cmp	r4, r5
 800c6ca:	d101      	bne.n	800c6d0 <__sfputs_r+0x12>
 800c6cc:	2000      	movs	r0, #0
 800c6ce:	e007      	b.n	800c6e0 <__sfputs_r+0x22>
 800c6d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6d4:	463a      	mov	r2, r7
 800c6d6:	4630      	mov	r0, r6
 800c6d8:	f7ff ffda 	bl	800c690 <__sfputc_r>
 800c6dc:	1c43      	adds	r3, r0, #1
 800c6de:	d1f3      	bne.n	800c6c8 <__sfputs_r+0xa>
 800c6e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c6e4 <_vfiprintf_r>:
 800c6e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6e8:	460d      	mov	r5, r1
 800c6ea:	b09d      	sub	sp, #116	; 0x74
 800c6ec:	4614      	mov	r4, r2
 800c6ee:	4698      	mov	r8, r3
 800c6f0:	4606      	mov	r6, r0
 800c6f2:	b118      	cbz	r0, 800c6fc <_vfiprintf_r+0x18>
 800c6f4:	6983      	ldr	r3, [r0, #24]
 800c6f6:	b90b      	cbnz	r3, 800c6fc <_vfiprintf_r+0x18>
 800c6f8:	f7fe fc68 	bl	800afcc <__sinit>
 800c6fc:	4b89      	ldr	r3, [pc, #548]	; (800c924 <_vfiprintf_r+0x240>)
 800c6fe:	429d      	cmp	r5, r3
 800c700:	d11b      	bne.n	800c73a <_vfiprintf_r+0x56>
 800c702:	6875      	ldr	r5, [r6, #4]
 800c704:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c706:	07d9      	lsls	r1, r3, #31
 800c708:	d405      	bmi.n	800c716 <_vfiprintf_r+0x32>
 800c70a:	89ab      	ldrh	r3, [r5, #12]
 800c70c:	059a      	lsls	r2, r3, #22
 800c70e:	d402      	bmi.n	800c716 <_vfiprintf_r+0x32>
 800c710:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c712:	f7ff f86c 	bl	800b7ee <__retarget_lock_acquire_recursive>
 800c716:	89ab      	ldrh	r3, [r5, #12]
 800c718:	071b      	lsls	r3, r3, #28
 800c71a:	d501      	bpl.n	800c720 <_vfiprintf_r+0x3c>
 800c71c:	692b      	ldr	r3, [r5, #16]
 800c71e:	b9eb      	cbnz	r3, 800c75c <_vfiprintf_r+0x78>
 800c720:	4629      	mov	r1, r5
 800c722:	4630      	mov	r0, r6
 800c724:	f000 f9de 	bl	800cae4 <__swsetup_r>
 800c728:	b1c0      	cbz	r0, 800c75c <_vfiprintf_r+0x78>
 800c72a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c72c:	07dc      	lsls	r4, r3, #31
 800c72e:	d50e      	bpl.n	800c74e <_vfiprintf_r+0x6a>
 800c730:	f04f 30ff 	mov.w	r0, #4294967295
 800c734:	b01d      	add	sp, #116	; 0x74
 800c736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c73a:	4b7b      	ldr	r3, [pc, #492]	; (800c928 <_vfiprintf_r+0x244>)
 800c73c:	429d      	cmp	r5, r3
 800c73e:	d101      	bne.n	800c744 <_vfiprintf_r+0x60>
 800c740:	68b5      	ldr	r5, [r6, #8]
 800c742:	e7df      	b.n	800c704 <_vfiprintf_r+0x20>
 800c744:	4b79      	ldr	r3, [pc, #484]	; (800c92c <_vfiprintf_r+0x248>)
 800c746:	429d      	cmp	r5, r3
 800c748:	bf08      	it	eq
 800c74a:	68f5      	ldreq	r5, [r6, #12]
 800c74c:	e7da      	b.n	800c704 <_vfiprintf_r+0x20>
 800c74e:	89ab      	ldrh	r3, [r5, #12]
 800c750:	0598      	lsls	r0, r3, #22
 800c752:	d4ed      	bmi.n	800c730 <_vfiprintf_r+0x4c>
 800c754:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c756:	f7ff f84b 	bl	800b7f0 <__retarget_lock_release_recursive>
 800c75a:	e7e9      	b.n	800c730 <_vfiprintf_r+0x4c>
 800c75c:	2300      	movs	r3, #0
 800c75e:	9309      	str	r3, [sp, #36]	; 0x24
 800c760:	2320      	movs	r3, #32
 800c762:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c766:	f8cd 800c 	str.w	r8, [sp, #12]
 800c76a:	2330      	movs	r3, #48	; 0x30
 800c76c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c930 <_vfiprintf_r+0x24c>
 800c770:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c774:	f04f 0901 	mov.w	r9, #1
 800c778:	4623      	mov	r3, r4
 800c77a:	469a      	mov	sl, r3
 800c77c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c780:	b10a      	cbz	r2, 800c786 <_vfiprintf_r+0xa2>
 800c782:	2a25      	cmp	r2, #37	; 0x25
 800c784:	d1f9      	bne.n	800c77a <_vfiprintf_r+0x96>
 800c786:	ebba 0b04 	subs.w	fp, sl, r4
 800c78a:	d00b      	beq.n	800c7a4 <_vfiprintf_r+0xc0>
 800c78c:	465b      	mov	r3, fp
 800c78e:	4622      	mov	r2, r4
 800c790:	4629      	mov	r1, r5
 800c792:	4630      	mov	r0, r6
 800c794:	f7ff ff93 	bl	800c6be <__sfputs_r>
 800c798:	3001      	adds	r0, #1
 800c79a:	f000 80aa 	beq.w	800c8f2 <_vfiprintf_r+0x20e>
 800c79e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c7a0:	445a      	add	r2, fp
 800c7a2:	9209      	str	r2, [sp, #36]	; 0x24
 800c7a4:	f89a 3000 	ldrb.w	r3, [sl]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	f000 80a2 	beq.w	800c8f2 <_vfiprintf_r+0x20e>
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	f04f 32ff 	mov.w	r2, #4294967295
 800c7b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c7b8:	f10a 0a01 	add.w	sl, sl, #1
 800c7bc:	9304      	str	r3, [sp, #16]
 800c7be:	9307      	str	r3, [sp, #28]
 800c7c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c7c4:	931a      	str	r3, [sp, #104]	; 0x68
 800c7c6:	4654      	mov	r4, sl
 800c7c8:	2205      	movs	r2, #5
 800c7ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7ce:	4858      	ldr	r0, [pc, #352]	; (800c930 <_vfiprintf_r+0x24c>)
 800c7d0:	f7f3 fcfe 	bl	80001d0 <memchr>
 800c7d4:	9a04      	ldr	r2, [sp, #16]
 800c7d6:	b9d8      	cbnz	r0, 800c810 <_vfiprintf_r+0x12c>
 800c7d8:	06d1      	lsls	r1, r2, #27
 800c7da:	bf44      	itt	mi
 800c7dc:	2320      	movmi	r3, #32
 800c7de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c7e2:	0713      	lsls	r3, r2, #28
 800c7e4:	bf44      	itt	mi
 800c7e6:	232b      	movmi	r3, #43	; 0x2b
 800c7e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c7ec:	f89a 3000 	ldrb.w	r3, [sl]
 800c7f0:	2b2a      	cmp	r3, #42	; 0x2a
 800c7f2:	d015      	beq.n	800c820 <_vfiprintf_r+0x13c>
 800c7f4:	9a07      	ldr	r2, [sp, #28]
 800c7f6:	4654      	mov	r4, sl
 800c7f8:	2000      	movs	r0, #0
 800c7fa:	f04f 0c0a 	mov.w	ip, #10
 800c7fe:	4621      	mov	r1, r4
 800c800:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c804:	3b30      	subs	r3, #48	; 0x30
 800c806:	2b09      	cmp	r3, #9
 800c808:	d94e      	bls.n	800c8a8 <_vfiprintf_r+0x1c4>
 800c80a:	b1b0      	cbz	r0, 800c83a <_vfiprintf_r+0x156>
 800c80c:	9207      	str	r2, [sp, #28]
 800c80e:	e014      	b.n	800c83a <_vfiprintf_r+0x156>
 800c810:	eba0 0308 	sub.w	r3, r0, r8
 800c814:	fa09 f303 	lsl.w	r3, r9, r3
 800c818:	4313      	orrs	r3, r2
 800c81a:	9304      	str	r3, [sp, #16]
 800c81c:	46a2      	mov	sl, r4
 800c81e:	e7d2      	b.n	800c7c6 <_vfiprintf_r+0xe2>
 800c820:	9b03      	ldr	r3, [sp, #12]
 800c822:	1d19      	adds	r1, r3, #4
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	9103      	str	r1, [sp, #12]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	bfbb      	ittet	lt
 800c82c:	425b      	neglt	r3, r3
 800c82e:	f042 0202 	orrlt.w	r2, r2, #2
 800c832:	9307      	strge	r3, [sp, #28]
 800c834:	9307      	strlt	r3, [sp, #28]
 800c836:	bfb8      	it	lt
 800c838:	9204      	strlt	r2, [sp, #16]
 800c83a:	7823      	ldrb	r3, [r4, #0]
 800c83c:	2b2e      	cmp	r3, #46	; 0x2e
 800c83e:	d10c      	bne.n	800c85a <_vfiprintf_r+0x176>
 800c840:	7863      	ldrb	r3, [r4, #1]
 800c842:	2b2a      	cmp	r3, #42	; 0x2a
 800c844:	d135      	bne.n	800c8b2 <_vfiprintf_r+0x1ce>
 800c846:	9b03      	ldr	r3, [sp, #12]
 800c848:	1d1a      	adds	r2, r3, #4
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	9203      	str	r2, [sp, #12]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	bfb8      	it	lt
 800c852:	f04f 33ff 	movlt.w	r3, #4294967295
 800c856:	3402      	adds	r4, #2
 800c858:	9305      	str	r3, [sp, #20]
 800c85a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c940 <_vfiprintf_r+0x25c>
 800c85e:	7821      	ldrb	r1, [r4, #0]
 800c860:	2203      	movs	r2, #3
 800c862:	4650      	mov	r0, sl
 800c864:	f7f3 fcb4 	bl	80001d0 <memchr>
 800c868:	b140      	cbz	r0, 800c87c <_vfiprintf_r+0x198>
 800c86a:	2340      	movs	r3, #64	; 0x40
 800c86c:	eba0 000a 	sub.w	r0, r0, sl
 800c870:	fa03 f000 	lsl.w	r0, r3, r0
 800c874:	9b04      	ldr	r3, [sp, #16]
 800c876:	4303      	orrs	r3, r0
 800c878:	3401      	adds	r4, #1
 800c87a:	9304      	str	r3, [sp, #16]
 800c87c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c880:	482c      	ldr	r0, [pc, #176]	; (800c934 <_vfiprintf_r+0x250>)
 800c882:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c886:	2206      	movs	r2, #6
 800c888:	f7f3 fca2 	bl	80001d0 <memchr>
 800c88c:	2800      	cmp	r0, #0
 800c88e:	d03f      	beq.n	800c910 <_vfiprintf_r+0x22c>
 800c890:	4b29      	ldr	r3, [pc, #164]	; (800c938 <_vfiprintf_r+0x254>)
 800c892:	bb1b      	cbnz	r3, 800c8dc <_vfiprintf_r+0x1f8>
 800c894:	9b03      	ldr	r3, [sp, #12]
 800c896:	3307      	adds	r3, #7
 800c898:	f023 0307 	bic.w	r3, r3, #7
 800c89c:	3308      	adds	r3, #8
 800c89e:	9303      	str	r3, [sp, #12]
 800c8a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8a2:	443b      	add	r3, r7
 800c8a4:	9309      	str	r3, [sp, #36]	; 0x24
 800c8a6:	e767      	b.n	800c778 <_vfiprintf_r+0x94>
 800c8a8:	fb0c 3202 	mla	r2, ip, r2, r3
 800c8ac:	460c      	mov	r4, r1
 800c8ae:	2001      	movs	r0, #1
 800c8b0:	e7a5      	b.n	800c7fe <_vfiprintf_r+0x11a>
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	3401      	adds	r4, #1
 800c8b6:	9305      	str	r3, [sp, #20]
 800c8b8:	4619      	mov	r1, r3
 800c8ba:	f04f 0c0a 	mov.w	ip, #10
 800c8be:	4620      	mov	r0, r4
 800c8c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c8c4:	3a30      	subs	r2, #48	; 0x30
 800c8c6:	2a09      	cmp	r2, #9
 800c8c8:	d903      	bls.n	800c8d2 <_vfiprintf_r+0x1ee>
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d0c5      	beq.n	800c85a <_vfiprintf_r+0x176>
 800c8ce:	9105      	str	r1, [sp, #20]
 800c8d0:	e7c3      	b.n	800c85a <_vfiprintf_r+0x176>
 800c8d2:	fb0c 2101 	mla	r1, ip, r1, r2
 800c8d6:	4604      	mov	r4, r0
 800c8d8:	2301      	movs	r3, #1
 800c8da:	e7f0      	b.n	800c8be <_vfiprintf_r+0x1da>
 800c8dc:	ab03      	add	r3, sp, #12
 800c8de:	9300      	str	r3, [sp, #0]
 800c8e0:	462a      	mov	r2, r5
 800c8e2:	4b16      	ldr	r3, [pc, #88]	; (800c93c <_vfiprintf_r+0x258>)
 800c8e4:	a904      	add	r1, sp, #16
 800c8e6:	4630      	mov	r0, r6
 800c8e8:	f7fb fe20 	bl	800852c <_printf_float>
 800c8ec:	4607      	mov	r7, r0
 800c8ee:	1c78      	adds	r0, r7, #1
 800c8f0:	d1d6      	bne.n	800c8a0 <_vfiprintf_r+0x1bc>
 800c8f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c8f4:	07d9      	lsls	r1, r3, #31
 800c8f6:	d405      	bmi.n	800c904 <_vfiprintf_r+0x220>
 800c8f8:	89ab      	ldrh	r3, [r5, #12]
 800c8fa:	059a      	lsls	r2, r3, #22
 800c8fc:	d402      	bmi.n	800c904 <_vfiprintf_r+0x220>
 800c8fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c900:	f7fe ff76 	bl	800b7f0 <__retarget_lock_release_recursive>
 800c904:	89ab      	ldrh	r3, [r5, #12]
 800c906:	065b      	lsls	r3, r3, #25
 800c908:	f53f af12 	bmi.w	800c730 <_vfiprintf_r+0x4c>
 800c90c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c90e:	e711      	b.n	800c734 <_vfiprintf_r+0x50>
 800c910:	ab03      	add	r3, sp, #12
 800c912:	9300      	str	r3, [sp, #0]
 800c914:	462a      	mov	r2, r5
 800c916:	4b09      	ldr	r3, [pc, #36]	; (800c93c <_vfiprintf_r+0x258>)
 800c918:	a904      	add	r1, sp, #16
 800c91a:	4630      	mov	r0, r6
 800c91c:	f7fc f8aa 	bl	8008a74 <_printf_i>
 800c920:	e7e4      	b.n	800c8ec <_vfiprintf_r+0x208>
 800c922:	bf00      	nop
 800c924:	0800e3a0 	.word	0x0800e3a0
 800c928:	0800e3c0 	.word	0x0800e3c0
 800c92c:	0800e380 	.word	0x0800e380
 800c930:	0800e5bc 	.word	0x0800e5bc
 800c934:	0800e5c6 	.word	0x0800e5c6
 800c938:	0800852d 	.word	0x0800852d
 800c93c:	0800c6bf 	.word	0x0800c6bf
 800c940:	0800e5c2 	.word	0x0800e5c2
 800c944:	00000000 	.word	0x00000000

0800c948 <nan>:
 800c948:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c950 <nan+0x8>
 800c94c:	4770      	bx	lr
 800c94e:	bf00      	nop
 800c950:	00000000 	.word	0x00000000
 800c954:	7ff80000 	.word	0x7ff80000

0800c958 <_sbrk_r>:
 800c958:	b538      	push	{r3, r4, r5, lr}
 800c95a:	4d06      	ldr	r5, [pc, #24]	; (800c974 <_sbrk_r+0x1c>)
 800c95c:	2300      	movs	r3, #0
 800c95e:	4604      	mov	r4, r0
 800c960:	4608      	mov	r0, r1
 800c962:	602b      	str	r3, [r5, #0]
 800c964:	f7f6 ff4c 	bl	8003800 <_sbrk>
 800c968:	1c43      	adds	r3, r0, #1
 800c96a:	d102      	bne.n	800c972 <_sbrk_r+0x1a>
 800c96c:	682b      	ldr	r3, [r5, #0]
 800c96e:	b103      	cbz	r3, 800c972 <_sbrk_r+0x1a>
 800c970:	6023      	str	r3, [r4, #0]
 800c972:	bd38      	pop	{r3, r4, r5, pc}
 800c974:	20003718 	.word	0x20003718

0800c978 <__sread>:
 800c978:	b510      	push	{r4, lr}
 800c97a:	460c      	mov	r4, r1
 800c97c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c980:	f000 f9de 	bl	800cd40 <_read_r>
 800c984:	2800      	cmp	r0, #0
 800c986:	bfab      	itete	ge
 800c988:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c98a:	89a3      	ldrhlt	r3, [r4, #12]
 800c98c:	181b      	addge	r3, r3, r0
 800c98e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c992:	bfac      	ite	ge
 800c994:	6563      	strge	r3, [r4, #84]	; 0x54
 800c996:	81a3      	strhlt	r3, [r4, #12]
 800c998:	bd10      	pop	{r4, pc}

0800c99a <__swrite>:
 800c99a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c99e:	461f      	mov	r7, r3
 800c9a0:	898b      	ldrh	r3, [r1, #12]
 800c9a2:	05db      	lsls	r3, r3, #23
 800c9a4:	4605      	mov	r5, r0
 800c9a6:	460c      	mov	r4, r1
 800c9a8:	4616      	mov	r6, r2
 800c9aa:	d505      	bpl.n	800c9b8 <__swrite+0x1e>
 800c9ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9b0:	2302      	movs	r3, #2
 800c9b2:	2200      	movs	r2, #0
 800c9b4:	f000 f966 	bl	800cc84 <_lseek_r>
 800c9b8:	89a3      	ldrh	r3, [r4, #12]
 800c9ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c9be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c9c2:	81a3      	strh	r3, [r4, #12]
 800c9c4:	4632      	mov	r2, r6
 800c9c6:	463b      	mov	r3, r7
 800c9c8:	4628      	mov	r0, r5
 800c9ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c9ce:	f000 b877 	b.w	800cac0 <_write_r>

0800c9d2 <__sseek>:
 800c9d2:	b510      	push	{r4, lr}
 800c9d4:	460c      	mov	r4, r1
 800c9d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9da:	f000 f953 	bl	800cc84 <_lseek_r>
 800c9de:	1c43      	adds	r3, r0, #1
 800c9e0:	89a3      	ldrh	r3, [r4, #12]
 800c9e2:	bf15      	itete	ne
 800c9e4:	6560      	strne	r0, [r4, #84]	; 0x54
 800c9e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c9ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c9ee:	81a3      	strheq	r3, [r4, #12]
 800c9f0:	bf18      	it	ne
 800c9f2:	81a3      	strhne	r3, [r4, #12]
 800c9f4:	bd10      	pop	{r4, pc}

0800c9f6 <__sclose>:
 800c9f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9fa:	f000 b8ff 	b.w	800cbfc <_close_r>
	...

0800ca00 <__swbuf_r>:
 800ca00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca02:	460e      	mov	r6, r1
 800ca04:	4614      	mov	r4, r2
 800ca06:	4605      	mov	r5, r0
 800ca08:	b118      	cbz	r0, 800ca12 <__swbuf_r+0x12>
 800ca0a:	6983      	ldr	r3, [r0, #24]
 800ca0c:	b90b      	cbnz	r3, 800ca12 <__swbuf_r+0x12>
 800ca0e:	f7fe fadd 	bl	800afcc <__sinit>
 800ca12:	4b21      	ldr	r3, [pc, #132]	; (800ca98 <__swbuf_r+0x98>)
 800ca14:	429c      	cmp	r4, r3
 800ca16:	d12b      	bne.n	800ca70 <__swbuf_r+0x70>
 800ca18:	686c      	ldr	r4, [r5, #4]
 800ca1a:	69a3      	ldr	r3, [r4, #24]
 800ca1c:	60a3      	str	r3, [r4, #8]
 800ca1e:	89a3      	ldrh	r3, [r4, #12]
 800ca20:	071a      	lsls	r2, r3, #28
 800ca22:	d52f      	bpl.n	800ca84 <__swbuf_r+0x84>
 800ca24:	6923      	ldr	r3, [r4, #16]
 800ca26:	b36b      	cbz	r3, 800ca84 <__swbuf_r+0x84>
 800ca28:	6923      	ldr	r3, [r4, #16]
 800ca2a:	6820      	ldr	r0, [r4, #0]
 800ca2c:	1ac0      	subs	r0, r0, r3
 800ca2e:	6963      	ldr	r3, [r4, #20]
 800ca30:	b2f6      	uxtb	r6, r6
 800ca32:	4283      	cmp	r3, r0
 800ca34:	4637      	mov	r7, r6
 800ca36:	dc04      	bgt.n	800ca42 <__swbuf_r+0x42>
 800ca38:	4621      	mov	r1, r4
 800ca3a:	4628      	mov	r0, r5
 800ca3c:	f7fe fa32 	bl	800aea4 <_fflush_r>
 800ca40:	bb30      	cbnz	r0, 800ca90 <__swbuf_r+0x90>
 800ca42:	68a3      	ldr	r3, [r4, #8]
 800ca44:	3b01      	subs	r3, #1
 800ca46:	60a3      	str	r3, [r4, #8]
 800ca48:	6823      	ldr	r3, [r4, #0]
 800ca4a:	1c5a      	adds	r2, r3, #1
 800ca4c:	6022      	str	r2, [r4, #0]
 800ca4e:	701e      	strb	r6, [r3, #0]
 800ca50:	6963      	ldr	r3, [r4, #20]
 800ca52:	3001      	adds	r0, #1
 800ca54:	4283      	cmp	r3, r0
 800ca56:	d004      	beq.n	800ca62 <__swbuf_r+0x62>
 800ca58:	89a3      	ldrh	r3, [r4, #12]
 800ca5a:	07db      	lsls	r3, r3, #31
 800ca5c:	d506      	bpl.n	800ca6c <__swbuf_r+0x6c>
 800ca5e:	2e0a      	cmp	r6, #10
 800ca60:	d104      	bne.n	800ca6c <__swbuf_r+0x6c>
 800ca62:	4621      	mov	r1, r4
 800ca64:	4628      	mov	r0, r5
 800ca66:	f7fe fa1d 	bl	800aea4 <_fflush_r>
 800ca6a:	b988      	cbnz	r0, 800ca90 <__swbuf_r+0x90>
 800ca6c:	4638      	mov	r0, r7
 800ca6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca70:	4b0a      	ldr	r3, [pc, #40]	; (800ca9c <__swbuf_r+0x9c>)
 800ca72:	429c      	cmp	r4, r3
 800ca74:	d101      	bne.n	800ca7a <__swbuf_r+0x7a>
 800ca76:	68ac      	ldr	r4, [r5, #8]
 800ca78:	e7cf      	b.n	800ca1a <__swbuf_r+0x1a>
 800ca7a:	4b09      	ldr	r3, [pc, #36]	; (800caa0 <__swbuf_r+0xa0>)
 800ca7c:	429c      	cmp	r4, r3
 800ca7e:	bf08      	it	eq
 800ca80:	68ec      	ldreq	r4, [r5, #12]
 800ca82:	e7ca      	b.n	800ca1a <__swbuf_r+0x1a>
 800ca84:	4621      	mov	r1, r4
 800ca86:	4628      	mov	r0, r5
 800ca88:	f000 f82c 	bl	800cae4 <__swsetup_r>
 800ca8c:	2800      	cmp	r0, #0
 800ca8e:	d0cb      	beq.n	800ca28 <__swbuf_r+0x28>
 800ca90:	f04f 37ff 	mov.w	r7, #4294967295
 800ca94:	e7ea      	b.n	800ca6c <__swbuf_r+0x6c>
 800ca96:	bf00      	nop
 800ca98:	0800e3a0 	.word	0x0800e3a0
 800ca9c:	0800e3c0 	.word	0x0800e3c0
 800caa0:	0800e380 	.word	0x0800e380

0800caa4 <__ascii_wctomb>:
 800caa4:	b149      	cbz	r1, 800caba <__ascii_wctomb+0x16>
 800caa6:	2aff      	cmp	r2, #255	; 0xff
 800caa8:	bf85      	ittet	hi
 800caaa:	238a      	movhi	r3, #138	; 0x8a
 800caac:	6003      	strhi	r3, [r0, #0]
 800caae:	700a      	strbls	r2, [r1, #0]
 800cab0:	f04f 30ff 	movhi.w	r0, #4294967295
 800cab4:	bf98      	it	ls
 800cab6:	2001      	movls	r0, #1
 800cab8:	4770      	bx	lr
 800caba:	4608      	mov	r0, r1
 800cabc:	4770      	bx	lr
	...

0800cac0 <_write_r>:
 800cac0:	b538      	push	{r3, r4, r5, lr}
 800cac2:	4d07      	ldr	r5, [pc, #28]	; (800cae0 <_write_r+0x20>)
 800cac4:	4604      	mov	r4, r0
 800cac6:	4608      	mov	r0, r1
 800cac8:	4611      	mov	r1, r2
 800caca:	2200      	movs	r2, #0
 800cacc:	602a      	str	r2, [r5, #0]
 800cace:	461a      	mov	r2, r3
 800cad0:	f7f6 fb58 	bl	8003184 <_write>
 800cad4:	1c43      	adds	r3, r0, #1
 800cad6:	d102      	bne.n	800cade <_write_r+0x1e>
 800cad8:	682b      	ldr	r3, [r5, #0]
 800cada:	b103      	cbz	r3, 800cade <_write_r+0x1e>
 800cadc:	6023      	str	r3, [r4, #0]
 800cade:	bd38      	pop	{r3, r4, r5, pc}
 800cae0:	20003718 	.word	0x20003718

0800cae4 <__swsetup_r>:
 800cae4:	4b32      	ldr	r3, [pc, #200]	; (800cbb0 <__swsetup_r+0xcc>)
 800cae6:	b570      	push	{r4, r5, r6, lr}
 800cae8:	681d      	ldr	r5, [r3, #0]
 800caea:	4606      	mov	r6, r0
 800caec:	460c      	mov	r4, r1
 800caee:	b125      	cbz	r5, 800cafa <__swsetup_r+0x16>
 800caf0:	69ab      	ldr	r3, [r5, #24]
 800caf2:	b913      	cbnz	r3, 800cafa <__swsetup_r+0x16>
 800caf4:	4628      	mov	r0, r5
 800caf6:	f7fe fa69 	bl	800afcc <__sinit>
 800cafa:	4b2e      	ldr	r3, [pc, #184]	; (800cbb4 <__swsetup_r+0xd0>)
 800cafc:	429c      	cmp	r4, r3
 800cafe:	d10f      	bne.n	800cb20 <__swsetup_r+0x3c>
 800cb00:	686c      	ldr	r4, [r5, #4]
 800cb02:	89a3      	ldrh	r3, [r4, #12]
 800cb04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cb08:	0719      	lsls	r1, r3, #28
 800cb0a:	d42c      	bmi.n	800cb66 <__swsetup_r+0x82>
 800cb0c:	06dd      	lsls	r5, r3, #27
 800cb0e:	d411      	bmi.n	800cb34 <__swsetup_r+0x50>
 800cb10:	2309      	movs	r3, #9
 800cb12:	6033      	str	r3, [r6, #0]
 800cb14:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cb18:	81a3      	strh	r3, [r4, #12]
 800cb1a:	f04f 30ff 	mov.w	r0, #4294967295
 800cb1e:	e03e      	b.n	800cb9e <__swsetup_r+0xba>
 800cb20:	4b25      	ldr	r3, [pc, #148]	; (800cbb8 <__swsetup_r+0xd4>)
 800cb22:	429c      	cmp	r4, r3
 800cb24:	d101      	bne.n	800cb2a <__swsetup_r+0x46>
 800cb26:	68ac      	ldr	r4, [r5, #8]
 800cb28:	e7eb      	b.n	800cb02 <__swsetup_r+0x1e>
 800cb2a:	4b24      	ldr	r3, [pc, #144]	; (800cbbc <__swsetup_r+0xd8>)
 800cb2c:	429c      	cmp	r4, r3
 800cb2e:	bf08      	it	eq
 800cb30:	68ec      	ldreq	r4, [r5, #12]
 800cb32:	e7e6      	b.n	800cb02 <__swsetup_r+0x1e>
 800cb34:	0758      	lsls	r0, r3, #29
 800cb36:	d512      	bpl.n	800cb5e <__swsetup_r+0x7a>
 800cb38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cb3a:	b141      	cbz	r1, 800cb4e <__swsetup_r+0x6a>
 800cb3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cb40:	4299      	cmp	r1, r3
 800cb42:	d002      	beq.n	800cb4a <__swsetup_r+0x66>
 800cb44:	4630      	mov	r0, r6
 800cb46:	f7ff fb9d 	bl	800c284 <_free_r>
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	6363      	str	r3, [r4, #52]	; 0x34
 800cb4e:	89a3      	ldrh	r3, [r4, #12]
 800cb50:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cb54:	81a3      	strh	r3, [r4, #12]
 800cb56:	2300      	movs	r3, #0
 800cb58:	6063      	str	r3, [r4, #4]
 800cb5a:	6923      	ldr	r3, [r4, #16]
 800cb5c:	6023      	str	r3, [r4, #0]
 800cb5e:	89a3      	ldrh	r3, [r4, #12]
 800cb60:	f043 0308 	orr.w	r3, r3, #8
 800cb64:	81a3      	strh	r3, [r4, #12]
 800cb66:	6923      	ldr	r3, [r4, #16]
 800cb68:	b94b      	cbnz	r3, 800cb7e <__swsetup_r+0x9a>
 800cb6a:	89a3      	ldrh	r3, [r4, #12]
 800cb6c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cb70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cb74:	d003      	beq.n	800cb7e <__swsetup_r+0x9a>
 800cb76:	4621      	mov	r1, r4
 800cb78:	4630      	mov	r0, r6
 800cb7a:	f7fe fe5f 	bl	800b83c <__smakebuf_r>
 800cb7e:	89a0      	ldrh	r0, [r4, #12]
 800cb80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cb84:	f010 0301 	ands.w	r3, r0, #1
 800cb88:	d00a      	beq.n	800cba0 <__swsetup_r+0xbc>
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	60a3      	str	r3, [r4, #8]
 800cb8e:	6963      	ldr	r3, [r4, #20]
 800cb90:	425b      	negs	r3, r3
 800cb92:	61a3      	str	r3, [r4, #24]
 800cb94:	6923      	ldr	r3, [r4, #16]
 800cb96:	b943      	cbnz	r3, 800cbaa <__swsetup_r+0xc6>
 800cb98:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cb9c:	d1ba      	bne.n	800cb14 <__swsetup_r+0x30>
 800cb9e:	bd70      	pop	{r4, r5, r6, pc}
 800cba0:	0781      	lsls	r1, r0, #30
 800cba2:	bf58      	it	pl
 800cba4:	6963      	ldrpl	r3, [r4, #20]
 800cba6:	60a3      	str	r3, [r4, #8]
 800cba8:	e7f4      	b.n	800cb94 <__swsetup_r+0xb0>
 800cbaa:	2000      	movs	r0, #0
 800cbac:	e7f7      	b.n	800cb9e <__swsetup_r+0xba>
 800cbae:	bf00      	nop
 800cbb0:	20000014 	.word	0x20000014
 800cbb4:	0800e3a0 	.word	0x0800e3a0
 800cbb8:	0800e3c0 	.word	0x0800e3c0
 800cbbc:	0800e380 	.word	0x0800e380

0800cbc0 <__assert_func>:
 800cbc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cbc2:	4614      	mov	r4, r2
 800cbc4:	461a      	mov	r2, r3
 800cbc6:	4b09      	ldr	r3, [pc, #36]	; (800cbec <__assert_func+0x2c>)
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	4605      	mov	r5, r0
 800cbcc:	68d8      	ldr	r0, [r3, #12]
 800cbce:	b14c      	cbz	r4, 800cbe4 <__assert_func+0x24>
 800cbd0:	4b07      	ldr	r3, [pc, #28]	; (800cbf0 <__assert_func+0x30>)
 800cbd2:	9100      	str	r1, [sp, #0]
 800cbd4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cbd8:	4906      	ldr	r1, [pc, #24]	; (800cbf4 <__assert_func+0x34>)
 800cbda:	462b      	mov	r3, r5
 800cbdc:	f000 f81e 	bl	800cc1c <fiprintf>
 800cbe0:	f000 f8c0 	bl	800cd64 <abort>
 800cbe4:	4b04      	ldr	r3, [pc, #16]	; (800cbf8 <__assert_func+0x38>)
 800cbe6:	461c      	mov	r4, r3
 800cbe8:	e7f3      	b.n	800cbd2 <__assert_func+0x12>
 800cbea:	bf00      	nop
 800cbec:	20000014 	.word	0x20000014
 800cbf0:	0800e5cd 	.word	0x0800e5cd
 800cbf4:	0800e5da 	.word	0x0800e5da
 800cbf8:	0800e608 	.word	0x0800e608

0800cbfc <_close_r>:
 800cbfc:	b538      	push	{r3, r4, r5, lr}
 800cbfe:	4d06      	ldr	r5, [pc, #24]	; (800cc18 <_close_r+0x1c>)
 800cc00:	2300      	movs	r3, #0
 800cc02:	4604      	mov	r4, r0
 800cc04:	4608      	mov	r0, r1
 800cc06:	602b      	str	r3, [r5, #0]
 800cc08:	f7f6 fae8 	bl	80031dc <_close>
 800cc0c:	1c43      	adds	r3, r0, #1
 800cc0e:	d102      	bne.n	800cc16 <_close_r+0x1a>
 800cc10:	682b      	ldr	r3, [r5, #0]
 800cc12:	b103      	cbz	r3, 800cc16 <_close_r+0x1a>
 800cc14:	6023      	str	r3, [r4, #0]
 800cc16:	bd38      	pop	{r3, r4, r5, pc}
 800cc18:	20003718 	.word	0x20003718

0800cc1c <fiprintf>:
 800cc1c:	b40e      	push	{r1, r2, r3}
 800cc1e:	b503      	push	{r0, r1, lr}
 800cc20:	4601      	mov	r1, r0
 800cc22:	ab03      	add	r3, sp, #12
 800cc24:	4805      	ldr	r0, [pc, #20]	; (800cc3c <fiprintf+0x20>)
 800cc26:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc2a:	6800      	ldr	r0, [r0, #0]
 800cc2c:	9301      	str	r3, [sp, #4]
 800cc2e:	f7ff fd59 	bl	800c6e4 <_vfiprintf_r>
 800cc32:	b002      	add	sp, #8
 800cc34:	f85d eb04 	ldr.w	lr, [sp], #4
 800cc38:	b003      	add	sp, #12
 800cc3a:	4770      	bx	lr
 800cc3c:	20000014 	.word	0x20000014

0800cc40 <_fstat_r>:
 800cc40:	b538      	push	{r3, r4, r5, lr}
 800cc42:	4d07      	ldr	r5, [pc, #28]	; (800cc60 <_fstat_r+0x20>)
 800cc44:	2300      	movs	r3, #0
 800cc46:	4604      	mov	r4, r0
 800cc48:	4608      	mov	r0, r1
 800cc4a:	4611      	mov	r1, r2
 800cc4c:	602b      	str	r3, [r5, #0]
 800cc4e:	f7f6 fb15 	bl	800327c <_fstat>
 800cc52:	1c43      	adds	r3, r0, #1
 800cc54:	d102      	bne.n	800cc5c <_fstat_r+0x1c>
 800cc56:	682b      	ldr	r3, [r5, #0]
 800cc58:	b103      	cbz	r3, 800cc5c <_fstat_r+0x1c>
 800cc5a:	6023      	str	r3, [r4, #0]
 800cc5c:	bd38      	pop	{r3, r4, r5, pc}
 800cc5e:	bf00      	nop
 800cc60:	20003718 	.word	0x20003718

0800cc64 <_isatty_r>:
 800cc64:	b538      	push	{r3, r4, r5, lr}
 800cc66:	4d06      	ldr	r5, [pc, #24]	; (800cc80 <_isatty_r+0x1c>)
 800cc68:	2300      	movs	r3, #0
 800cc6a:	4604      	mov	r4, r0
 800cc6c:	4608      	mov	r0, r1
 800cc6e:	602b      	str	r3, [r5, #0]
 800cc70:	f7f6 fa72 	bl	8003158 <_isatty>
 800cc74:	1c43      	adds	r3, r0, #1
 800cc76:	d102      	bne.n	800cc7e <_isatty_r+0x1a>
 800cc78:	682b      	ldr	r3, [r5, #0]
 800cc7a:	b103      	cbz	r3, 800cc7e <_isatty_r+0x1a>
 800cc7c:	6023      	str	r3, [r4, #0]
 800cc7e:	bd38      	pop	{r3, r4, r5, pc}
 800cc80:	20003718 	.word	0x20003718

0800cc84 <_lseek_r>:
 800cc84:	b538      	push	{r3, r4, r5, lr}
 800cc86:	4d07      	ldr	r5, [pc, #28]	; (800cca4 <_lseek_r+0x20>)
 800cc88:	4604      	mov	r4, r0
 800cc8a:	4608      	mov	r0, r1
 800cc8c:	4611      	mov	r1, r2
 800cc8e:	2200      	movs	r2, #0
 800cc90:	602a      	str	r2, [r5, #0]
 800cc92:	461a      	mov	r2, r3
 800cc94:	f7f6 fab9 	bl	800320a <_lseek>
 800cc98:	1c43      	adds	r3, r0, #1
 800cc9a:	d102      	bne.n	800cca2 <_lseek_r+0x1e>
 800cc9c:	682b      	ldr	r3, [r5, #0]
 800cc9e:	b103      	cbz	r3, 800cca2 <_lseek_r+0x1e>
 800cca0:	6023      	str	r3, [r4, #0]
 800cca2:	bd38      	pop	{r3, r4, r5, pc}
 800cca4:	20003718 	.word	0x20003718

0800cca8 <memmove>:
 800cca8:	4288      	cmp	r0, r1
 800ccaa:	b510      	push	{r4, lr}
 800ccac:	eb01 0402 	add.w	r4, r1, r2
 800ccb0:	d902      	bls.n	800ccb8 <memmove+0x10>
 800ccb2:	4284      	cmp	r4, r0
 800ccb4:	4623      	mov	r3, r4
 800ccb6:	d807      	bhi.n	800ccc8 <memmove+0x20>
 800ccb8:	1e43      	subs	r3, r0, #1
 800ccba:	42a1      	cmp	r1, r4
 800ccbc:	d008      	beq.n	800ccd0 <memmove+0x28>
 800ccbe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ccc2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ccc6:	e7f8      	b.n	800ccba <memmove+0x12>
 800ccc8:	4402      	add	r2, r0
 800ccca:	4601      	mov	r1, r0
 800cccc:	428a      	cmp	r2, r1
 800ccce:	d100      	bne.n	800ccd2 <memmove+0x2a>
 800ccd0:	bd10      	pop	{r4, pc}
 800ccd2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ccd6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ccda:	e7f7      	b.n	800cccc <memmove+0x24>

0800ccdc <__malloc_lock>:
 800ccdc:	4801      	ldr	r0, [pc, #4]	; (800cce4 <__malloc_lock+0x8>)
 800ccde:	f7fe bd86 	b.w	800b7ee <__retarget_lock_acquire_recursive>
 800cce2:	bf00      	nop
 800cce4:	20003710 	.word	0x20003710

0800cce8 <__malloc_unlock>:
 800cce8:	4801      	ldr	r0, [pc, #4]	; (800ccf0 <__malloc_unlock+0x8>)
 800ccea:	f7fe bd81 	b.w	800b7f0 <__retarget_lock_release_recursive>
 800ccee:	bf00      	nop
 800ccf0:	20003710 	.word	0x20003710

0800ccf4 <_realloc_r>:
 800ccf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccf6:	4607      	mov	r7, r0
 800ccf8:	4614      	mov	r4, r2
 800ccfa:	460e      	mov	r6, r1
 800ccfc:	b921      	cbnz	r1, 800cd08 <_realloc_r+0x14>
 800ccfe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800cd02:	4611      	mov	r1, r2
 800cd04:	f7ff bb0e 	b.w	800c324 <_malloc_r>
 800cd08:	b922      	cbnz	r2, 800cd14 <_realloc_r+0x20>
 800cd0a:	f7ff fabb 	bl	800c284 <_free_r>
 800cd0e:	4625      	mov	r5, r4
 800cd10:	4628      	mov	r0, r5
 800cd12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd14:	f000 f82d 	bl	800cd72 <_malloc_usable_size_r>
 800cd18:	42a0      	cmp	r0, r4
 800cd1a:	d20f      	bcs.n	800cd3c <_realloc_r+0x48>
 800cd1c:	4621      	mov	r1, r4
 800cd1e:	4638      	mov	r0, r7
 800cd20:	f7ff fb00 	bl	800c324 <_malloc_r>
 800cd24:	4605      	mov	r5, r0
 800cd26:	2800      	cmp	r0, #0
 800cd28:	d0f2      	beq.n	800cd10 <_realloc_r+0x1c>
 800cd2a:	4631      	mov	r1, r6
 800cd2c:	4622      	mov	r2, r4
 800cd2e:	f7fb fb47 	bl	80083c0 <memcpy>
 800cd32:	4631      	mov	r1, r6
 800cd34:	4638      	mov	r0, r7
 800cd36:	f7ff faa5 	bl	800c284 <_free_r>
 800cd3a:	e7e9      	b.n	800cd10 <_realloc_r+0x1c>
 800cd3c:	4635      	mov	r5, r6
 800cd3e:	e7e7      	b.n	800cd10 <_realloc_r+0x1c>

0800cd40 <_read_r>:
 800cd40:	b538      	push	{r3, r4, r5, lr}
 800cd42:	4d07      	ldr	r5, [pc, #28]	; (800cd60 <_read_r+0x20>)
 800cd44:	4604      	mov	r4, r0
 800cd46:	4608      	mov	r0, r1
 800cd48:	4611      	mov	r1, r2
 800cd4a:	2200      	movs	r2, #0
 800cd4c:	602a      	str	r2, [r5, #0]
 800cd4e:	461a      	mov	r2, r3
 800cd50:	f7f6 fa6c 	bl	800322c <_read>
 800cd54:	1c43      	adds	r3, r0, #1
 800cd56:	d102      	bne.n	800cd5e <_read_r+0x1e>
 800cd58:	682b      	ldr	r3, [r5, #0]
 800cd5a:	b103      	cbz	r3, 800cd5e <_read_r+0x1e>
 800cd5c:	6023      	str	r3, [r4, #0]
 800cd5e:	bd38      	pop	{r3, r4, r5, pc}
 800cd60:	20003718 	.word	0x20003718

0800cd64 <abort>:
 800cd64:	b508      	push	{r3, lr}
 800cd66:	2006      	movs	r0, #6
 800cd68:	f000 f834 	bl	800cdd4 <raise>
 800cd6c:	2001      	movs	r0, #1
 800cd6e:	f000 f85d 	bl	800ce2c <_exit>

0800cd72 <_malloc_usable_size_r>:
 800cd72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd76:	1f18      	subs	r0, r3, #4
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	bfbc      	itt	lt
 800cd7c:	580b      	ldrlt	r3, [r1, r0]
 800cd7e:	18c0      	addlt	r0, r0, r3
 800cd80:	4770      	bx	lr

0800cd82 <_raise_r>:
 800cd82:	291f      	cmp	r1, #31
 800cd84:	b538      	push	{r3, r4, r5, lr}
 800cd86:	4604      	mov	r4, r0
 800cd88:	460d      	mov	r5, r1
 800cd8a:	d904      	bls.n	800cd96 <_raise_r+0x14>
 800cd8c:	2316      	movs	r3, #22
 800cd8e:	6003      	str	r3, [r0, #0]
 800cd90:	f04f 30ff 	mov.w	r0, #4294967295
 800cd94:	bd38      	pop	{r3, r4, r5, pc}
 800cd96:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cd98:	b112      	cbz	r2, 800cda0 <_raise_r+0x1e>
 800cd9a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cd9e:	b94b      	cbnz	r3, 800cdb4 <_raise_r+0x32>
 800cda0:	4620      	mov	r0, r4
 800cda2:	f000 f831 	bl	800ce08 <_getpid_r>
 800cda6:	462a      	mov	r2, r5
 800cda8:	4601      	mov	r1, r0
 800cdaa:	4620      	mov	r0, r4
 800cdac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cdb0:	f000 b818 	b.w	800cde4 <_kill_r>
 800cdb4:	2b01      	cmp	r3, #1
 800cdb6:	d00a      	beq.n	800cdce <_raise_r+0x4c>
 800cdb8:	1c59      	adds	r1, r3, #1
 800cdba:	d103      	bne.n	800cdc4 <_raise_r+0x42>
 800cdbc:	2316      	movs	r3, #22
 800cdbe:	6003      	str	r3, [r0, #0]
 800cdc0:	2001      	movs	r0, #1
 800cdc2:	e7e7      	b.n	800cd94 <_raise_r+0x12>
 800cdc4:	2400      	movs	r4, #0
 800cdc6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cdca:	4628      	mov	r0, r5
 800cdcc:	4798      	blx	r3
 800cdce:	2000      	movs	r0, #0
 800cdd0:	e7e0      	b.n	800cd94 <_raise_r+0x12>
	...

0800cdd4 <raise>:
 800cdd4:	4b02      	ldr	r3, [pc, #8]	; (800cde0 <raise+0xc>)
 800cdd6:	4601      	mov	r1, r0
 800cdd8:	6818      	ldr	r0, [r3, #0]
 800cdda:	f7ff bfd2 	b.w	800cd82 <_raise_r>
 800cdde:	bf00      	nop
 800cde0:	20000014 	.word	0x20000014

0800cde4 <_kill_r>:
 800cde4:	b538      	push	{r3, r4, r5, lr}
 800cde6:	4d07      	ldr	r5, [pc, #28]	; (800ce04 <_kill_r+0x20>)
 800cde8:	2300      	movs	r3, #0
 800cdea:	4604      	mov	r4, r0
 800cdec:	4608      	mov	r0, r1
 800cdee:	4611      	mov	r1, r2
 800cdf0:	602b      	str	r3, [r5, #0]
 800cdf2:	f000 f813 	bl	800ce1c <_kill>
 800cdf6:	1c43      	adds	r3, r0, #1
 800cdf8:	d102      	bne.n	800ce00 <_kill_r+0x1c>
 800cdfa:	682b      	ldr	r3, [r5, #0]
 800cdfc:	b103      	cbz	r3, 800ce00 <_kill_r+0x1c>
 800cdfe:	6023      	str	r3, [r4, #0]
 800ce00:	bd38      	pop	{r3, r4, r5, pc}
 800ce02:	bf00      	nop
 800ce04:	20003718 	.word	0x20003718

0800ce08 <_getpid_r>:
 800ce08:	f000 b800 	b.w	800ce0c <_getpid>

0800ce0c <_getpid>:
 800ce0c:	4b02      	ldr	r3, [pc, #8]	; (800ce18 <_getpid+0xc>)
 800ce0e:	2258      	movs	r2, #88	; 0x58
 800ce10:	601a      	str	r2, [r3, #0]
 800ce12:	f04f 30ff 	mov.w	r0, #4294967295
 800ce16:	4770      	bx	lr
 800ce18:	20003718 	.word	0x20003718

0800ce1c <_kill>:
 800ce1c:	4b02      	ldr	r3, [pc, #8]	; (800ce28 <_kill+0xc>)
 800ce1e:	2258      	movs	r2, #88	; 0x58
 800ce20:	601a      	str	r2, [r3, #0]
 800ce22:	f04f 30ff 	mov.w	r0, #4294967295
 800ce26:	4770      	bx	lr
 800ce28:	20003718 	.word	0x20003718

0800ce2c <_exit>:
 800ce2c:	e7fe      	b.n	800ce2c <_exit>
	...

0800ce30 <_init>:
 800ce30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce32:	bf00      	nop
 800ce34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce36:	bc08      	pop	{r3}
 800ce38:	469e      	mov	lr, r3
 800ce3a:	4770      	bx	lr

0800ce3c <_fini>:
 800ce3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce3e:	bf00      	nop
 800ce40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce42:	bc08      	pop	{r3}
 800ce44:	469e      	mov	lr, r3
 800ce46:	4770      	bx	lr
