
LoRaE32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b774  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000564  0800b908  0800b908  0001b908  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be6c  0800be6c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800be6c  0800be6c  0001be6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800be74  0800be74  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be74  0800be74  0001be74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800be78  0800be78  0001be78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800be7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002bc0  200001e4  0800c060  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002da4  0800c060  00022da4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001279d  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000258b  00000000  00000000  000329b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d58  00000000  00000000  00034f40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c98  00000000  00000000  00035c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022fe7  00000000  00000000  00036930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000116bc  00000000  00000000  00059917  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce65d  00000000  00000000  0006afd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00139630  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004db8  00000000  00000000  00139684  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000003c  00000000  00000000  0013e43c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000076  00000000  00000000  0013e478  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b8ec 	.word	0x0800b8ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	0800b8ec 	.word	0x0800b8ec

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <wireWriteRegister>:
/*!
    @brief  Sends a single command byte over I2C
*/
/**************************************************************************/
void wireWriteRegister (uint8_t reg, uint16_t value)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b088      	sub	sp, #32
 8000ff0:	af04      	add	r7, sp, #16
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	460a      	mov	r2, r1
 8000ff6:	71fb      	strb	r3, [r7, #7]
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	80bb      	strh	r3, [r7, #4]
	uint8_t i2c_temp[2];
	i2c_temp[0] = value>>8;
 8000ffc:	88bb      	ldrh	r3, [r7, #4]
 8000ffe:	0a1b      	lsrs	r3, r3, #8
 8001000:	b29b      	uxth	r3, r3
 8001002:	b2db      	uxtb	r3, r3
 8001004:	733b      	strb	r3, [r7, #12]
	i2c_temp[1] = value;
 8001006:	88bb      	ldrh	r3, [r7, #4]
 8001008:	b2db      	uxtb	r3, r3
 800100a:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(&hi2c1, INA219_ADDRESS<<1, (uint16_t)reg, 1, i2c_temp, 2, 0xffffffff);
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	b29a      	uxth	r2, r3
 8001010:	f04f 33ff 	mov.w	r3, #4294967295
 8001014:	9302      	str	r3, [sp, #8]
 8001016:	2302      	movs	r3, #2
 8001018:	9301      	str	r3, [sp, #4]
 800101a:	f107 030c 	add.w	r3, r7, #12
 800101e:	9300      	str	r3, [sp, #0]
 8001020:	2301      	movs	r3, #1
 8001022:	2180      	movs	r1, #128	; 0x80
 8001024:	4804      	ldr	r0, [pc, #16]	; (8001038 <wireWriteRegister+0x4c>)
 8001026:	f002 fdbb 	bl	8003ba0 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 800102a:	2001      	movs	r0, #1
 800102c:	f001 fd3c 	bl	8002aa8 <HAL_Delay>
}
 8001030:	bf00      	nop
 8001032:	3710      	adds	r7, #16
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20002840 	.word	0x20002840

0800103c <wireReadRegister>:
/*!
    @brief  Reads a 16 bit values over I2C
*/
/**************************************************************************/
void wireReadRegister(uint8_t reg, uint16_t *value)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b088      	sub	sp, #32
 8001040:	af04      	add	r7, sp, #16
 8001042:	4603      	mov	r3, r0
 8001044:	6039      	str	r1, [r7, #0]
 8001046:	71fb      	strb	r3, [r7, #7]
	uint8_t i2c_temp[2];
	HAL_I2C_Mem_Read(&hi2c1, INA219_ADDRESS<<1, (uint16_t)reg, 1,i2c_temp, 2, 0xffffffff);
 8001048:	79fb      	ldrb	r3, [r7, #7]
 800104a:	b29a      	uxth	r2, r3
 800104c:	f04f 33ff 	mov.w	r3, #4294967295
 8001050:	9302      	str	r3, [sp, #8]
 8001052:	2302      	movs	r3, #2
 8001054:	9301      	str	r3, [sp, #4]
 8001056:	f107 030c 	add.w	r3, r7, #12
 800105a:	9300      	str	r3, [sp, #0]
 800105c:	2301      	movs	r3, #1
 800105e:	2180      	movs	r1, #128	; 0x80
 8001060:	4809      	ldr	r0, [pc, #36]	; (8001088 <wireReadRegister+0x4c>)
 8001062:	f002 fe97 	bl	8003d94 <HAL_I2C_Mem_Read>
	HAL_Delay(1);
 8001066:	2001      	movs	r0, #1
 8001068:	f001 fd1e 	bl	8002aa8 <HAL_Delay>
	*value = ((uint16_t)i2c_temp[0]<<8 )|(uint16_t)i2c_temp[1];
 800106c:	7b3b      	ldrb	r3, [r7, #12]
 800106e:	021b      	lsls	r3, r3, #8
 8001070:	b21a      	sxth	r2, r3
 8001072:	7b7b      	ldrb	r3, [r7, #13]
 8001074:	b21b      	sxth	r3, r3
 8001076:	4313      	orrs	r3, r2
 8001078:	b21b      	sxth	r3, r3
 800107a:	b29a      	uxth	r2, r3
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	801a      	strh	r2, [r3, #0]
}
 8001080:	bf00      	nop
 8001082:	3710      	adds	r7, #16
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	20002840 	.word	0x20002840

0800108c <setCalibration_16V_400mA>:
    @brief set device to alibration which uses the highest precision for
      current measurement (0.1mA), at the expense of
      only supporting 16V at 400mA max.
*/
/**************************************************************************/
void setCalibration_16V_400mA(void) {
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0

  // 5. Compute the calibration register
  // Cal = trunc (0.04096 / (Current_LSB * RSHUNT))
  // Cal = 8192 (0x2000)

  ina219_calValue = 8192;
 8001092:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <setCalibration_16V_400mA+0x40>)
 8001094:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001098:	601a      	str	r2, [r3, #0]
  // MaximumPower = Max_Current_Before_Overflow * VBUS_MAX
  // MaximumPower = 0.4 * 16V
  // MaximumPower = 6.4W

  // Set multipliers to convert raw current/power values
  ina219_currentDivider_mA = 20;  // Current LSB = 50uA per bit (1000/50 = 20)
 800109a:	4b0d      	ldr	r3, [pc, #52]	; (80010d0 <setCalibration_16V_400mA+0x44>)
 800109c:	2214      	movs	r2, #20
 800109e:	601a      	str	r2, [r3, #0]
  ina219_powerMultiplier_mW = 1;     // Power LSB = 1mW per bit
 80010a0:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <setCalibration_16V_400mA+0x48>)
 80010a2:	2201      	movs	r2, #1
 80010a4:	601a      	str	r2, [r3, #0]

  // Set Calibration register to 'Cal' calculated above
  wireWriteRegister(INA219_REG_CALIBRATION, ina219_calValue);
 80010a6:	4b09      	ldr	r3, [pc, #36]	; (80010cc <setCalibration_16V_400mA+0x40>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	4619      	mov	r1, r3
 80010ae:	2005      	movs	r0, #5
 80010b0:	f7ff ff9c 	bl	8000fec <wireWriteRegister>

  // Set Config register to take into account the settings above
  uint16_t config = INA219_CONFIG_BVOLTAGERANGE_16V |
 80010b4:	f240 139f 	movw	r3, #415	; 0x19f
 80010b8:	80fb      	strh	r3, [r7, #6]
                    INA219_CONFIG_GAIN_1_40MV |
                    INA219_CONFIG_BADCRES_12BIT |
                    INA219_CONFIG_SADCRES_12BIT_1S_532US |
                    INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS;
  wireWriteRegister(INA219_REG_CONFIG, config);
 80010ba:	88fb      	ldrh	r3, [r7, #6]
 80010bc:	4619      	mov	r1, r3
 80010be:	2000      	movs	r0, #0
 80010c0:	f7ff ff94 	bl	8000fec <wireWriteRegister>
}
 80010c4:	bf00      	nop
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20002670 	.word	0x20002670
 80010d0:	20000664 	.word	0x20000664
 80010d4:	20000668 	.word	0x20000668

080010d8 <getBusVoltage_raw>:
/*!
    @brief  Gets the raw bus voltage (16-bit signed integer, so +-32767)
    @return the raw bus voltage reading
*/
/**************************************************************************/
int16_t getBusVoltage_raw() {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
  uint16_t value;
  wireReadRegister(INA219_REG_BUSVOLTAGE, &value);
 80010de:	1dbb      	adds	r3, r7, #6
 80010e0:	4619      	mov	r1, r3
 80010e2:	2002      	movs	r0, #2
 80010e4:	f7ff ffaa 	bl	800103c <wireReadRegister>

  // Shift to the right 3 to drop CNVR and OVF and multiply by LSB
  return (int16_t)((value >> 3) * 4);
 80010e8:	88fb      	ldrh	r3, [r7, #6]
 80010ea:	08db      	lsrs	r3, r3, #3
 80010ec:	b29b      	uxth	r3, r3
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	b21b      	sxth	r3, r3
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <getCurrent_raw>:
/*!
    @brief  Gets the raw current value (16-bit signed integer, so +-32767)
    @return the raw current reading
*/
/**************************************************************************/
int16_t getCurrent_raw() {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0

  // Sometimes a sharp load will reset the INA219, which will
  // reset the cal register, meaning CURRENT and POWER will
  // not be available ... avoid this by always setting a cal
  // value even if it's an unfortunate extra step
  wireWriteRegister(INA219_REG_CALIBRATION, ina219_calValue);
 8001102:	4b09      	ldr	r3, [pc, #36]	; (8001128 <getCurrent_raw+0x2c>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	b29b      	uxth	r3, r3
 8001108:	4619      	mov	r1, r3
 800110a:	2005      	movs	r0, #5
 800110c:	f7ff ff6e 	bl	8000fec <wireWriteRegister>

  // Now we can safely read the CURRENT register!
  wireReadRegister(INA219_REG_CURRENT, &value);
 8001110:	1dbb      	adds	r3, r7, #6
 8001112:	4619      	mov	r1, r3
 8001114:	2004      	movs	r0, #4
 8001116:	f7ff ff91 	bl	800103c <wireReadRegister>

  return (int16_t)value;
 800111a:	88fb      	ldrh	r3, [r7, #6]
 800111c:	b21b      	sxth	r3, r3
}
 800111e:	4618      	mov	r0, r3
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	20002670 	.word	0x20002670

0800112c <getPower_raw>:
/*!
    @brief  Gets the raw power value (16-bit signed integer, so +-32767)
    @return raw power reading
*/
/**************************************************************************/
int16_t getPower_raw() {
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0

  // Sometimes a sharp load will reset the INA219, which will
  // reset the cal register, meaning CURRENT and POWER will
  // not be available ... avoid this by always setting a cal
  // value even if it's an unfortunate extra step
  wireWriteRegister(INA219_REG_CALIBRATION, ina219_calValue);
 8001132:	4b09      	ldr	r3, [pc, #36]	; (8001158 <getPower_raw+0x2c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	b29b      	uxth	r3, r3
 8001138:	4619      	mov	r1, r3
 800113a:	2005      	movs	r0, #5
 800113c:	f7ff ff56 	bl	8000fec <wireWriteRegister>

  // Now we can safely read the POWER register!
  wireReadRegister(INA219_REG_POWER, &value);
 8001140:	1dbb      	adds	r3, r7, #6
 8001142:	4619      	mov	r1, r3
 8001144:	2003      	movs	r0, #3
 8001146:	f7ff ff79 	bl	800103c <wireReadRegister>

  return (int16_t)value;
 800114a:	88fb      	ldrh	r3, [r7, #6]
 800114c:	b21b      	sxth	r3, r3
}
 800114e:	4618      	mov	r0, r3
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20002670 	.word	0x20002670
 800115c:	00000000 	.word	0x00000000

08001160 <getBusVoltage_V>:
/*!
    @brief  Gets the shunt voltage in volts
    @return the bus voltage converted to volts
*/
/**************************************************************************/
float getBusVoltage_V() {
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
  int16_t value = getBusVoltage_raw();
 8001166:	f7ff ffb7 	bl	80010d8 <getBusVoltage_raw>
 800116a:	4603      	mov	r3, r0
 800116c:	80fb      	strh	r3, [r7, #6]
  return value * 0.001;
 800116e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff f9d6 	bl	8000524 <__aeabi_i2d>
 8001178:	a309      	add	r3, pc, #36	; (adr r3, 80011a0 <getBusVoltage_V+0x40>)
 800117a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117e:	f7ff fa3b 	bl	80005f8 <__aeabi_dmul>
 8001182:	4602      	mov	r2, r0
 8001184:	460b      	mov	r3, r1
 8001186:	4610      	mov	r0, r2
 8001188:	4619      	mov	r1, r3
 800118a:	f7ff fd2d 	bl	8000be8 <__aeabi_d2f>
 800118e:	4603      	mov	r3, r0
 8001190:	ee07 3a90 	vmov	s15, r3
}
 8001194:	eeb0 0a67 	vmov.f32	s0, s15
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	d2f1a9fc 	.word	0xd2f1a9fc
 80011a4:	3f50624d 	.word	0x3f50624d

080011a8 <getCurrent_mA>:
    @brief  Gets the current value in mA, taking into account the
            config settings and current LSB
    @return the current reading convereted to milliamps
*/
/**************************************************************************/
float getCurrent_mA() {
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
  float valueDec = getCurrent_raw();
 80011ae:	f7ff ffa5 	bl	80010fc <getCurrent_raw>
 80011b2:	4603      	mov	r3, r0
 80011b4:	ee07 3a90 	vmov	s15, r3
 80011b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011bc:	edc7 7a01 	vstr	s15, [r7, #4]
  valueDec /= ina219_currentDivider_mA;
 80011c0:	4b09      	ldr	r3, [pc, #36]	; (80011e8 <getCurrent_mA+0x40>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	ee07 3a90 	vmov	s15, r3
 80011c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011cc:	edd7 6a01 	vldr	s13, [r7, #4]
 80011d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011d4:	edc7 7a01 	vstr	s15, [r7, #4]
  return valueDec;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	ee07 3a90 	vmov	s15, r3
}
 80011de:	eeb0 0a67 	vmov.f32	s0, s15
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20000664 	.word	0x20000664

080011ec <getPower_mW>:
    @brief  Gets the power value in mW, taking into account the
            config settings and current LSB
    @return power reading converted to milliwatts
*/
/**************************************************************************/
float getPower_mW() {
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
  float valueDec = getPower_raw();
 80011f2:	f7ff ff9b 	bl	800112c <getPower_raw>
 80011f6:	4603      	mov	r3, r0
 80011f8:	ee07 3a90 	vmov	s15, r3
 80011fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001200:	edc7 7a01 	vstr	s15, [r7, #4]
  valueDec *= ina219_powerMultiplier_mW;
 8001204:	4b09      	ldr	r3, [pc, #36]	; (800122c <getPower_mW+0x40>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	ee07 3a90 	vmov	s15, r3
 800120c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001210:	ed97 7a01 	vldr	s14, [r7, #4]
 8001214:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001218:	edc7 7a01 	vstr	s15, [r7, #4]
  return valueDec;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	ee07 3a90 	vmov	s15, r3
}
 8001222:	eeb0 0a67 	vmov.f32	s0, s15
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	20000668 	.word	0x20000668

08001230 <set_time>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/**Fungsi ini digunakan untuk set timer jika dibutuhkan untuk set rtc
  */
void set_time(void){
 8001230:	b580      	push	{r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af00      	add	r7, sp, #0
	  RTC_TimeTypeDef sTime = {0};
 8001236:	1d3b      	adds	r3, r7, #4
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
 8001242:	611a      	str	r2, [r3, #16]
	  RTC_DateTypeDef sDate = {0};
 8001244:	2300      	movs	r3, #0
 8001246:	603b      	str	r3, [r7, #0]
	  /** Initialize RTC and set the Time and Date
	  */
	  sTime.Hours = 0x10;
 8001248:	2310      	movs	r3, #16
 800124a:	713b      	strb	r3, [r7, #4]
	  sTime.Minutes = 0x1;
 800124c:	2301      	movs	r3, #1
 800124e:	717b      	strb	r3, [r7, #5]
	  sTime.Seconds = 0x0;
 8001250:	2300      	movs	r3, #0
 8001252:	71bb      	strb	r3, [r7, #6]
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001254:	2300      	movs	r3, #0
 8001256:	613b      	str	r3, [r7, #16]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001258:	2300      	movs	r3, #0
 800125a:	617b      	str	r3, [r7, #20]
	  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800125c:	1d3b      	adds	r3, r7, #4
 800125e:	2201      	movs	r2, #1
 8001260:	4619      	mov	r1, r3
 8001262:	4812      	ldr	r0, [pc, #72]	; (80012ac <set_time+0x7c>)
 8001264:	f004 f8ff 	bl	8005466 <HAL_RTC_SetTime>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <set_time+0x42>
	  {
	    Error_Handler();
 800126e:	f001 f849 	bl	8002304 <Error_Handler>
	  }
	  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001272:	2301      	movs	r3, #1
 8001274:	703b      	strb	r3, [r7, #0]
	  sDate.Month = RTC_MONTH_OCTOBER;
 8001276:	2310      	movs	r3, #16
 8001278:	707b      	strb	r3, [r7, #1]
	  sDate.Date = 0x18;
 800127a:	2318      	movs	r3, #24
 800127c:	70bb      	strb	r3, [r7, #2]
	  sDate.Year = 0x21;
 800127e:	2321      	movs	r3, #33	; 0x21
 8001280:	70fb      	strb	r3, [r7, #3]

	  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001282:	463b      	mov	r3, r7
 8001284:	2201      	movs	r2, #1
 8001286:	4619      	mov	r1, r3
 8001288:	4808      	ldr	r0, [pc, #32]	; (80012ac <set_time+0x7c>)
 800128a:	f004 fa07 	bl	800569c <HAL_RTC_SetDate>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <set_time+0x68>
	  {
	    Error_Handler();
 8001294:	f001 f836 	bl	8002304 <Error_Handler>
	  }
	  /* USER CODE BEGIN RTC_Init 2 */
	  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);
 8001298:	f243 22f2 	movw	r2, #13042	; 0x32f2
 800129c:	2101      	movs	r1, #1
 800129e:	4803      	ldr	r0, [pc, #12]	; (80012ac <set_time+0x7c>)
 80012a0:	f004 fb82 	bl	80059a8 <HAL_RTCEx_BKUPWrite>
	  /* USER CODE END RTC_Init 2 */

}
 80012a4:	bf00      	nop
 80012a6:	3718      	adds	r7, #24
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	200028e8 	.word	0x200028e8

080012b0 <get_time>:
/**Fungsi ini digunakan untuk membaca interanal RTC
  */
void get_time(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b086      	sub	sp, #24
 80012b4:	af00      	add	r7, sp, #0
	if (HAL_GetTick() - rtc_millis >= 500){
 80012b6:	f001 fbeb 	bl	8002a90 <HAL_GetTick>
 80012ba:	4602      	mov	r2, r0
 80012bc:	4b16      	ldr	r3, [pc, #88]	; (8001318 <get_time+0x68>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80012c6:	d323      	bcc.n	8001310 <get_time+0x60>
		rtc_millis = HAL_GetTick();
 80012c8:	f001 fbe2 	bl	8002a90 <HAL_GetTick>
 80012cc:	4603      	mov	r3, r0
 80012ce:	4a12      	ldr	r2, [pc, #72]	; (8001318 <get_time+0x68>)
 80012d0:	6013      	str	r3, [r2, #0]
		 RTC_DateTypeDef gDate;
		 RTC_TimeTypeDef gTime;
		 HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 80012d2:	463b      	mov	r3, r7
 80012d4:	2200      	movs	r2, #0
 80012d6:	4619      	mov	r1, r3
 80012d8:	4810      	ldr	r0, [pc, #64]	; (800131c <get_time+0x6c>)
 80012da:	f004 f981 	bl	80055e0 <HAL_RTC_GetTime>
		 HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 80012de:	f107 0314 	add.w	r3, r7, #20
 80012e2:	2200      	movs	r2, #0
 80012e4:	4619      	mov	r1, r3
 80012e6:	480d      	ldr	r0, [pc, #52]	; (800131c <get_time+0x6c>)
 80012e8:	f004 fa7f 	bl	80057ea <HAL_RTC_GetDate>
		 jam = gTime.Hours; menit = gTime.Minutes; detik = gTime.Seconds;
 80012ec:	783a      	ldrb	r2, [r7, #0]
 80012ee:	4b0c      	ldr	r3, [pc, #48]	; (8001320 <get_time+0x70>)
 80012f0:	701a      	strb	r2, [r3, #0]
 80012f2:	787a      	ldrb	r2, [r7, #1]
 80012f4:	4b0b      	ldr	r3, [pc, #44]	; (8001324 <get_time+0x74>)
 80012f6:	701a      	strb	r2, [r3, #0]
 80012f8:	78ba      	ldrb	r2, [r7, #2]
 80012fa:	4b0b      	ldr	r3, [pc, #44]	; (8001328 <get_time+0x78>)
 80012fc:	701a      	strb	r2, [r3, #0]
		 tanggal = gDate.Date; bulan = gDate.Month; tahun = gDate.Year;
 80012fe:	7dba      	ldrb	r2, [r7, #22]
 8001300:	4b0a      	ldr	r3, [pc, #40]	; (800132c <get_time+0x7c>)
 8001302:	701a      	strb	r2, [r3, #0]
 8001304:	7d7a      	ldrb	r2, [r7, #21]
 8001306:	4b0a      	ldr	r3, [pc, #40]	; (8001330 <get_time+0x80>)
 8001308:	701a      	strb	r2, [r3, #0]
 800130a:	7dfa      	ldrb	r2, [r7, #23]
 800130c:	4b09      	ldr	r3, [pc, #36]	; (8001334 <get_time+0x84>)
 800130e:	701a      	strb	r2, [r3, #0]
		 //printf("%02d:%02d:%02d || %02d-%02d-%2d\r\n",jam, menit, detik,tanggal, bulan, 2000 + tahun);
	}
}
 8001310:	bf00      	nop
 8001312:	3718      	adds	r7, #24
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	2000060c 	.word	0x2000060c
 800131c:	200028e8 	.word	0x200028e8
 8001320:	200028dc 	.word	0x200028dc
 8001324:	20002895 	.word	0x20002895
 8001328:	20002922 	.word	0x20002922
 800132c:	20002896 	.word	0x20002896
 8001330:	20002d70 	.word	0x20002d70
 8001334:	20002d68 	.word	0x20002d68

08001338 <get_ampere_volt>:
/**Fungsi ini digunakan untuk membaca baterai
  */
void get_ampere_volt(void){
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
	setCalibration_16V_400mA();
 800133e:	f7ff fea5 	bl	800108c <setCalibration_16V_400mA>
	tegangan = getBusVoltage_V();
 8001342:	f7ff ff0d 	bl	8001160 <getBusVoltage_V>
 8001346:	eef0 7a40 	vmov.f32	s15, s0
 800134a:	4b2c      	ldr	r3, [pc, #176]	; (80013fc <get_ampere_volt+0xc4>)
 800134c:	edc3 7a00 	vstr	s15, [r3]
	Vshunt = getPower_mW();
 8001350:	f7ff ff4c 	bl	80011ec <getPower_mW>
 8001354:	eef0 7a40 	vmov.f32	s15, s0
 8001358:	4b29      	ldr	r3, [pc, #164]	; (8001400 <get_ampere_volt+0xc8>)
 800135a:	edc3 7a00 	vstr	s15, [r3]
	arus = getCurrent_mA() * (-1);
 800135e:	f7ff ff23 	bl	80011a8 <getCurrent_mA>
 8001362:	eef0 7a40 	vmov.f32	s15, s0
 8001366:	eef1 7a67 	vneg.f32	s15, s15
 800136a:	4b26      	ldr	r3, [pc, #152]	; (8001404 <get_ampere_volt+0xcc>)
 800136c:	edc3 7a00 	vstr	s15, [r3]
	float maxVoltage = 12.4;
 8001370:	4b25      	ldr	r3, [pc, #148]	; (8001408 <get_ampere_volt+0xd0>)
 8001372:	607b      	str	r3, [r7, #4]
	float minVoltage = 11.2;
 8001374:	4b25      	ldr	r3, [pc, #148]	; (800140c <get_ampere_volt+0xd4>)
 8001376:	603b      	str	r3, [r7, #0]
	batteryPercentage = (tegangan - minVoltage) / (maxVoltage - minVoltage) * 100;
 8001378:	4b20      	ldr	r3, [pc, #128]	; (80013fc <get_ampere_volt+0xc4>)
 800137a:	ed93 7a00 	vldr	s14, [r3]
 800137e:	edd7 7a00 	vldr	s15, [r7]
 8001382:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001386:	ed97 7a01 	vldr	s14, [r7, #4]
 800138a:	edd7 7a00 	vldr	s15, [r7]
 800138e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001392:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001396:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001410 <get_ampere_volt+0xd8>
 800139a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800139e:	4b1d      	ldr	r3, [pc, #116]	; (8001414 <get_ampere_volt+0xdc>)
 80013a0:	edc3 7a00 	vstr	s15, [r3]
	if (batteryPercentage > 100) batteryPercentage = 100;
 80013a4:	4b1b      	ldr	r3, [pc, #108]	; (8001414 <get_ampere_volt+0xdc>)
 80013a6:	edd3 7a00 	vldr	s15, [r3]
 80013aa:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001410 <get_ampere_volt+0xd8>
 80013ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013b6:	dd03      	ble.n	80013c0 <get_ampere_volt+0x88>
 80013b8:	4b16      	ldr	r3, [pc, #88]	; (8001414 <get_ampere_volt+0xdc>)
 80013ba:	4a17      	ldr	r2, [pc, #92]	; (8001418 <get_ampere_volt+0xe0>)
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	e00b      	b.n	80013d8 <get_ampere_volt+0xa0>
	else if (batteryPercentage < 0) batteryPercentage = 0;
 80013c0:	4b14      	ldr	r3, [pc, #80]	; (8001414 <get_ampere_volt+0xdc>)
 80013c2:	edd3 7a00 	vldr	s15, [r3]
 80013c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ce:	d503      	bpl.n	80013d8 <get_ampere_volt+0xa0>
 80013d0:	4b10      	ldr	r3, [pc, #64]	; (8001414 <get_ampere_volt+0xdc>)
 80013d2:	f04f 0200 	mov.w	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
	if (HAL_GetTick() - ina219_millis >= 500){
 80013d8:	f001 fb5a 	bl	8002a90 <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	4b0f      	ldr	r3, [pc, #60]	; (800141c <get_ampere_volt+0xe4>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80013e8:	d304      	bcc.n	80013f4 <get_ampere_volt+0xbc>
		ina219_millis = HAL_GetTick();
 80013ea:	f001 fb51 	bl	8002a90 <HAL_GetTick>
 80013ee:	4603      	mov	r3, r0
 80013f0:	4a0a      	ldr	r2, [pc, #40]	; (800141c <get_ampere_volt+0xe4>)
 80013f2:	6013      	str	r3, [r2, #0]
		//printf("Vbus: %.1f V| persen: %.1f percent | Ampere: %.1f mA\r\n",tegangan, batteryPercentage, arus);
	}
}
 80013f4:	bf00      	nop
 80013f6:	3708      	adds	r7, #8
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	2000061c 	.word	0x2000061c
 8001400:	20000620 	.word	0x20000620
 8001404:	20000624 	.word	0x20000624
 8001408:	41466666 	.word	0x41466666
 800140c:	41333333 	.word	0x41333333
 8001410:	42c80000 	.word	0x42c80000
 8001414:	20000628 	.word	0x20000628
 8001418:	42c80000 	.word	0x42c80000
 800141c:	20000610 	.word	0x20000610

08001420 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001424:	f001 face 	bl	80029c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001428:	f000 f8a8 	bl	800157c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800142c:	f000 fa5c 	bl	80018e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001430:	f000 fa32 	bl	8001898 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001434:	f000 f9b2 	bl	800179c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001438:	f000 f9da 	bl	80017f0 <MX_USART2_UART_Init>
  MX_RTC_Init();
 800143c:	f000 f94e 	bl	80016dc <MX_RTC_Init>
  MX_I2C1_Init();
 8001440:	f000 f91e 	bl	8001680 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8001444:	f000 f9fe 	bl	8001844 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart1);
 8001448:	483b      	ldr	r0, [pc, #236]	; (8001538 <main+0x118>)
 800144a:	f000 ff61 	bl	8002310 <RetargetInit>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, RxBuf, RxBuf_SIZE);
 800144e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001452:	493a      	ldr	r1, [pc, #232]	; (800153c <main+0x11c>)
 8001454:	483a      	ldr	r0, [pc, #232]	; (8001540 <main+0x120>)
 8001456:	f004 fc5a 	bl	8005d0e <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 800145a:	4b3a      	ldr	r3, [pc, #232]	; (8001544 <main+0x124>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	4b38      	ldr	r3, [pc, #224]	; (8001544 <main+0x124>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f022 0208 	bic.w	r2, r2, #8
 8001468:	601a      	str	r2, [r3, #0]
  HAL_UARTEx_ReceiveToIdle_DMA(&huart3, RxBuf_3, RxBuf_SIZE);
 800146a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800146e:	4936      	ldr	r1, [pc, #216]	; (8001548 <main+0x128>)
 8001470:	4836      	ldr	r0, [pc, #216]	; (800154c <main+0x12c>)
 8001472:	f004 fc4c 	bl	8005d0e <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8001476:	4b36      	ldr	r3, [pc, #216]	; (8001550 <main+0x130>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	4b34      	ldr	r3, [pc, #208]	; (8001550 <main+0x130>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f022 0208 	bic.w	r2, r2, #8
 8001484:	601a      	str	r2, [r3, #0]
  //set m0 m1
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);
 8001486:	2200      	movs	r2, #0
 8001488:	2104      	movs	r1, #4
 800148a:	4832      	ldr	r0, [pc, #200]	; (8001554 <main+0x134>)
 800148c:	f002 f9f8 	bl	8003880 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, 0);
 8001490:	2200      	movs	r2, #0
 8001492:	2108      	movs	r1, #8
 8001494:	482f      	ldr	r0, [pc, #188]	; (8001554 <main+0x134>)
 8001496:	f002 f9f3 	bl	8003880 <HAL_GPIO_WritePin>
  if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0x32F2){
 800149a:	2101      	movs	r1, #1
 800149c:	482e      	ldr	r0, [pc, #184]	; (8001558 <main+0x138>)
 800149e:	f004 fa9d 	bl	80059dc <HAL_RTCEx_BKUPRead>
 80014a2:	4603      	mov	r3, r0
 80014a4:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d001      	beq.n	80014b0 <main+0x90>
	  set_time();
 80014ac:	f7ff fec0 	bl	8001230 <set_time>
  }
  //begin keypad
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, 1);
 80014b0:	2201      	movs	r2, #1
 80014b2:	2110      	movs	r1, #16
 80014b4:	4827      	ldr	r0, [pc, #156]	; (8001554 <main+0x134>)
 80014b6:	f002 f9e3 	bl	8003880 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, 1);
 80014ba:	2201      	movs	r2, #1
 80014bc:	2120      	movs	r1, #32
 80014be:	4825      	ldr	r0, [pc, #148]	; (8001554 <main+0x134>)
 80014c0:	f002 f9de 	bl	8003880 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, 1);
 80014c4:	2201      	movs	r2, #1
 80014c6:	2140      	movs	r1, #64	; 0x40
 80014c8:	4822      	ldr	r0, [pc, #136]	; (8001554 <main+0x134>)
 80014ca:	f002 f9d9 	bl	8003880 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, 1);
 80014ce:	2201      	movs	r2, #1
 80014d0:	2180      	movs	r1, #128	; 0x80
 80014d2:	4820      	ldr	r0, [pc, #128]	; (8001554 <main+0x134>)
 80014d4:	f002 f9d4 	bl	8003880 <HAL_GPIO_WritePin>
  //Millis second set
  rtc_millis = HAL_GetTick();
 80014d8:	f001 fada 	bl	8002a90 <HAL_GetTick>
 80014dc:	4603      	mov	r3, r0
 80014de:	4a1f      	ldr	r2, [pc, #124]	; (800155c <main+0x13c>)
 80014e0:	6013      	str	r3, [r2, #0]
  ina219_millis = HAL_GetTick();
 80014e2:	f001 fad5 	bl	8002a90 <HAL_GetTick>
 80014e6:	4603      	mov	r3, r0
 80014e8:	4a1d      	ldr	r2, [pc, #116]	; (8001560 <main+0x140>)
 80014ea:	6013      	str	r3, [r2, #0]
  //kirim data dummy  *node,lat,long,data,jam, menit, detik, tegangan
  ukuranstring = sprintf((char*)buff_s, "*A,latitude,longitude,data,jam,menit,detik,baterai\r\n");
 80014ec:	491d      	ldr	r1, [pc, #116]	; (8001564 <main+0x144>)
 80014ee:	481e      	ldr	r0, [pc, #120]	; (8001568 <main+0x148>)
 80014f0:	f006 fc50 	bl	8007d94 <siprintf>
 80014f4:	4603      	mov	r3, r0
 80014f6:	b29a      	uxth	r2, r3
 80014f8:	4b1c      	ldr	r3, [pc, #112]	; (800156c <main+0x14c>)
 80014fa:	801a      	strh	r2, [r3, #0]
  HAL_UART_Transmit(&huart2, buff_s, ukuranstring, 100);
 80014fc:	4b1b      	ldr	r3, [pc, #108]	; (800156c <main+0x14c>)
 80014fe:	881a      	ldrh	r2, [r3, #0]
 8001500:	2364      	movs	r3, #100	; 0x64
 8001502:	4919      	ldr	r1, [pc, #100]	; (8001568 <main+0x148>)
 8001504:	480e      	ldr	r0, [pc, #56]	; (8001540 <main+0x120>)
 8001506:	f004 face 	bl	8005aa6 <HAL_UART_Transmit>
  led_reaction(100, 600);
 800150a:	f44f 7116 	mov.w	r1, #600	; 0x258
 800150e:	2064      	movs	r0, #100	; 0x64
 8001510:	f000 fe78 	bl	8002204 <led_reaction>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  get_time();
 8001514:	f7ff fecc 	bl	80012b0 <get_time>
	  get_keypad(keyPressed);
 8001518:	4b15      	ldr	r3, [pc, #84]	; (8001570 <main+0x150>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	4618      	mov	r0, r3
 800151e:	f000 fd1f 	bl	8001f60 <get_keypad>
	  get_ampere_volt();
 8001522:	f7ff ff09 	bl	8001338 <get_ampere_volt>
	  get_gps(MainBuf_3);
 8001526:	4813      	ldr	r0, [pc, #76]	; (8001574 <main+0x154>)
 8001528:	f000 fed4 	bl	80022d4 <get_gps>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 800152c:	2102      	movs	r1, #2
 800152e:	4812      	ldr	r0, [pc, #72]	; (8001578 <main+0x158>)
 8001530:	f002 f9bf 	bl	80038b2 <HAL_GPIO_TogglePin>
	  get_time();
 8001534:	e7ee      	b.n	8001514 <main+0xf4>
 8001536:	bf00      	nop
 8001538:	20002898 	.word	0x20002898
 800153c:	20002924 	.word	0x20002924
 8001540:	20002d24 	.word	0x20002d24
 8001544:	20002674 	.word	0x20002674
 8001548:	20000400 	.word	0x20000400
 800154c:	200027fc 	.word	0x200027fc
 8001550:	2000279c 	.word	0x2000279c
 8001554:	40020c00 	.word	0x40020c00
 8001558:	200028e8 	.word	0x200028e8
 800155c:	2000060c 	.word	0x2000060c
 8001560:	20000610 	.word	0x20000610
 8001564:	0800b908 	.word	0x0800b908
 8001568:	200026d4 	.word	0x200026d4
 800156c:	20002920 	.word	0x20002920
 8001570:	20000648 	.word	0x20000648
 8001574:	20000200 	.word	0x20000200
 8001578:	40020000 	.word	0x40020000

0800157c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b098      	sub	sp, #96	; 0x60
 8001580:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001582:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001586:	2230      	movs	r2, #48	; 0x30
 8001588:	2100      	movs	r1, #0
 800158a:	4618      	mov	r0, r3
 800158c:	f005 fc9c 	bl	8006ec8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001590:	f107 031c 	add.w	r3, r7, #28
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	605a      	str	r2, [r3, #4]
 800159a:	609a      	str	r2, [r3, #8]
 800159c:	60da      	str	r2, [r3, #12]
 800159e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015a0:	f107 030c 	add.w	r3, r7, #12
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	60bb      	str	r3, [r7, #8]
 80015b2:	4b31      	ldr	r3, [pc, #196]	; (8001678 <SystemClock_Config+0xfc>)
 80015b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b6:	4a30      	ldr	r2, [pc, #192]	; (8001678 <SystemClock_Config+0xfc>)
 80015b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015bc:	6413      	str	r3, [r2, #64]	; 0x40
 80015be:	4b2e      	ldr	r3, [pc, #184]	; (8001678 <SystemClock_Config+0xfc>)
 80015c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c6:	60bb      	str	r3, [r7, #8]
 80015c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015ca:	2300      	movs	r3, #0
 80015cc:	607b      	str	r3, [r7, #4]
 80015ce:	4b2b      	ldr	r3, [pc, #172]	; (800167c <SystemClock_Config+0x100>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a2a      	ldr	r2, [pc, #168]	; (800167c <SystemClock_Config+0x100>)
 80015d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015d8:	6013      	str	r3, [r2, #0]
 80015da:	4b28      	ldr	r3, [pc, #160]	; (800167c <SystemClock_Config+0x100>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015e2:	607b      	str	r3, [r7, #4]
 80015e4:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80015e6:	2309      	movs	r3, #9
 80015e8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015ee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80015f0:	2301      	movs	r3, #1
 80015f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015f4:	2302      	movs	r3, #2
 80015f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015f8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80015fe:	2304      	movs	r3, #4
 8001600:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001602:	23a8      	movs	r3, #168	; 0xa8
 8001604:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001606:	2302      	movs	r3, #2
 8001608:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800160a:	2304      	movs	r3, #4
 800160c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800160e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001612:	4618      	mov	r0, r3
 8001614:	f003 f940 	bl	8004898 <HAL_RCC_OscConfig>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800161e:	f000 fe71 	bl	8002304 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001622:	230f      	movs	r3, #15
 8001624:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001626:	2302      	movs	r3, #2
 8001628:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800162a:	2300      	movs	r3, #0
 800162c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800162e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001632:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001634:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001638:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800163a:	f107 031c 	add.w	r3, r7, #28
 800163e:	2105      	movs	r1, #5
 8001640:	4618      	mov	r0, r3
 8001642:	f003 fba1 	bl	8004d88 <HAL_RCC_ClockConfig>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800164c:	f000 fe5a 	bl	8002304 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001650:	2302      	movs	r3, #2
 8001652:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001654:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001658:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800165a:	f107 030c 	add.w	r3, r7, #12
 800165e:	4618      	mov	r0, r3
 8001660:	f003 fd8e 	bl	8005180 <HAL_RCCEx_PeriphCLKConfig>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800166a:	f000 fe4b 	bl	8002304 <Error_Handler>
  }
}
 800166e:	bf00      	nop
 8001670:	3760      	adds	r7, #96	; 0x60
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40023800 	.word	0x40023800
 800167c:	40007000 	.word	0x40007000

08001680 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001684:	4b12      	ldr	r3, [pc, #72]	; (80016d0 <MX_I2C1_Init+0x50>)
 8001686:	4a13      	ldr	r2, [pc, #76]	; (80016d4 <MX_I2C1_Init+0x54>)
 8001688:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800168a:	4b11      	ldr	r3, [pc, #68]	; (80016d0 <MX_I2C1_Init+0x50>)
 800168c:	4a12      	ldr	r2, [pc, #72]	; (80016d8 <MX_I2C1_Init+0x58>)
 800168e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001690:	4b0f      	ldr	r3, [pc, #60]	; (80016d0 <MX_I2C1_Init+0x50>)
 8001692:	2200      	movs	r2, #0
 8001694:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001696:	4b0e      	ldr	r3, [pc, #56]	; (80016d0 <MX_I2C1_Init+0x50>)
 8001698:	2200      	movs	r2, #0
 800169a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800169c:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <MX_I2C1_Init+0x50>)
 800169e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016a4:	4b0a      	ldr	r3, [pc, #40]	; (80016d0 <MX_I2C1_Init+0x50>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80016aa:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <MX_I2C1_Init+0x50>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016b0:	4b07      	ldr	r3, [pc, #28]	; (80016d0 <MX_I2C1_Init+0x50>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016b6:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <MX_I2C1_Init+0x50>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016bc:	4804      	ldr	r0, [pc, #16]	; (80016d0 <MX_I2C1_Init+0x50>)
 80016be:	f002 f92b 	bl	8003918 <HAL_I2C_Init>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80016c8:	f000 fe1c 	bl	8002304 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016cc:	bf00      	nop
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	20002840 	.word	0x20002840
 80016d4:	40005400 	.word	0x40005400
 80016d8:	000186a0 	.word	0x000186a0

080016dc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b086      	sub	sp, #24
 80016e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */
	//JANGAN LUPA DIKOMEN YA
  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80016e2:	1d3b      	adds	r3, r7, #4
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	609a      	str	r2, [r3, #8]
 80016ec:	60da      	str	r2, [r3, #12]
 80016ee:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80016f0:	2300      	movs	r3, #0
 80016f2:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80016f4:	4b27      	ldr	r3, [pc, #156]	; (8001794 <MX_RTC_Init+0xb8>)
 80016f6:	4a28      	ldr	r2, [pc, #160]	; (8001798 <MX_RTC_Init+0xbc>)
 80016f8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80016fa:	4b26      	ldr	r3, [pc, #152]	; (8001794 <MX_RTC_Init+0xb8>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001700:	4b24      	ldr	r3, [pc, #144]	; (8001794 <MX_RTC_Init+0xb8>)
 8001702:	227f      	movs	r2, #127	; 0x7f
 8001704:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001706:	4b23      	ldr	r3, [pc, #140]	; (8001794 <MX_RTC_Init+0xb8>)
 8001708:	22ff      	movs	r2, #255	; 0xff
 800170a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800170c:	4b21      	ldr	r3, [pc, #132]	; (8001794 <MX_RTC_Init+0xb8>)
 800170e:	2200      	movs	r2, #0
 8001710:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001712:	4b20      	ldr	r3, [pc, #128]	; (8001794 <MX_RTC_Init+0xb8>)
 8001714:	2200      	movs	r2, #0
 8001716:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001718:	4b1e      	ldr	r3, [pc, #120]	; (8001794 <MX_RTC_Init+0xb8>)
 800171a:	2200      	movs	r2, #0
 800171c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800171e:	481d      	ldr	r0, [pc, #116]	; (8001794 <MX_RTC_Init+0xb8>)
 8001720:	f003 fe10 	bl	8005344 <HAL_RTC_Init>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800172a:	f000 fdeb 	bl	8002304 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x11;
 800172e:	2311      	movs	r3, #17
 8001730:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x35;
 8001732:	2335      	movs	r3, #53	; 0x35
 8001734:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x5;
 8001736:	2305      	movs	r3, #5
 8001738:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800173a:	2300      	movs	r3, #0
 800173c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800173e:	2300      	movs	r3, #0
 8001740:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001742:	1d3b      	adds	r3, r7, #4
 8001744:	2201      	movs	r2, #1
 8001746:	4619      	mov	r1, r3
 8001748:	4812      	ldr	r0, [pc, #72]	; (8001794 <MX_RTC_Init+0xb8>)
 800174a:	f003 fe8c 	bl	8005466 <HAL_RTC_SetTime>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001754:	f000 fdd6 	bl	8002304 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001758:	2301      	movs	r3, #1
 800175a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_OCTOBER;
 800175c:	2310      	movs	r3, #16
 800175e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x18;
 8001760:	2318      	movs	r3, #24
 8001762:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x21;
 8001764:	2321      	movs	r3, #33	; 0x21
 8001766:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001768:	463b      	mov	r3, r7
 800176a:	2201      	movs	r2, #1
 800176c:	4619      	mov	r1, r3
 800176e:	4809      	ldr	r0, [pc, #36]	; (8001794 <MX_RTC_Init+0xb8>)
 8001770:	f003 ff94 	bl	800569c <HAL_RTC_SetDate>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800177a:	f000 fdc3 	bl	8002304 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
	  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);
 800177e:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8001782:	2101      	movs	r1, #1
 8001784:	4803      	ldr	r0, [pc, #12]	; (8001794 <MX_RTC_Init+0xb8>)
 8001786:	f004 f90f 	bl	80059a8 <HAL_RTCEx_BKUPWrite>
  /* USER CODE END RTC_Init 2 */

}
 800178a:	bf00      	nop
 800178c:	3718      	adds	r7, #24
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	200028e8 	.word	0x200028e8
 8001798:	40002800 	.word	0x40002800

0800179c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80017a0:	4b11      	ldr	r3, [pc, #68]	; (80017e8 <MX_USART1_UART_Init+0x4c>)
 80017a2:	4a12      	ldr	r2, [pc, #72]	; (80017ec <MX_USART1_UART_Init+0x50>)
 80017a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80017a6:	4b10      	ldr	r3, [pc, #64]	; (80017e8 <MX_USART1_UART_Init+0x4c>)
 80017a8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80017ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017ae:	4b0e      	ldr	r3, [pc, #56]	; (80017e8 <MX_USART1_UART_Init+0x4c>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017b4:	4b0c      	ldr	r3, [pc, #48]	; (80017e8 <MX_USART1_UART_Init+0x4c>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017ba:	4b0b      	ldr	r3, [pc, #44]	; (80017e8 <MX_USART1_UART_Init+0x4c>)
 80017bc:	2200      	movs	r2, #0
 80017be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017c0:	4b09      	ldr	r3, [pc, #36]	; (80017e8 <MX_USART1_UART_Init+0x4c>)
 80017c2:	220c      	movs	r2, #12
 80017c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017c6:	4b08      	ldr	r3, [pc, #32]	; (80017e8 <MX_USART1_UART_Init+0x4c>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017cc:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <MX_USART1_UART_Init+0x4c>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017d2:	4805      	ldr	r0, [pc, #20]	; (80017e8 <MX_USART1_UART_Init+0x4c>)
 80017d4:	f004 f91a 	bl	8005a0c <HAL_UART_Init>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80017de:	f000 fd91 	bl	8002304 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017e2:	bf00      	nop
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	20002898 	.word	0x20002898
 80017ec:	40011000 	.word	0x40011000

080017f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017f4:	4b11      	ldr	r3, [pc, #68]	; (800183c <MX_USART2_UART_Init+0x4c>)
 80017f6:	4a12      	ldr	r2, [pc, #72]	; (8001840 <MX_USART2_UART_Init+0x50>)
 80017f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80017fa:	4b10      	ldr	r3, [pc, #64]	; (800183c <MX_USART2_UART_Init+0x4c>)
 80017fc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001800:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001802:	4b0e      	ldr	r3, [pc, #56]	; (800183c <MX_USART2_UART_Init+0x4c>)
 8001804:	2200      	movs	r2, #0
 8001806:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001808:	4b0c      	ldr	r3, [pc, #48]	; (800183c <MX_USART2_UART_Init+0x4c>)
 800180a:	2200      	movs	r2, #0
 800180c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800180e:	4b0b      	ldr	r3, [pc, #44]	; (800183c <MX_USART2_UART_Init+0x4c>)
 8001810:	2200      	movs	r2, #0
 8001812:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001814:	4b09      	ldr	r3, [pc, #36]	; (800183c <MX_USART2_UART_Init+0x4c>)
 8001816:	220c      	movs	r2, #12
 8001818:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800181a:	4b08      	ldr	r3, [pc, #32]	; (800183c <MX_USART2_UART_Init+0x4c>)
 800181c:	2200      	movs	r2, #0
 800181e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001820:	4b06      	ldr	r3, [pc, #24]	; (800183c <MX_USART2_UART_Init+0x4c>)
 8001822:	2200      	movs	r2, #0
 8001824:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001826:	4805      	ldr	r0, [pc, #20]	; (800183c <MX_USART2_UART_Init+0x4c>)
 8001828:	f004 f8f0 	bl	8005a0c <HAL_UART_Init>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001832:	f000 fd67 	bl	8002304 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	20002d24 	.word	0x20002d24
 8001840:	40004400 	.word	0x40004400

08001844 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001848:	4b11      	ldr	r3, [pc, #68]	; (8001890 <MX_USART3_UART_Init+0x4c>)
 800184a:	4a12      	ldr	r2, [pc, #72]	; (8001894 <MX_USART3_UART_Init+0x50>)
 800184c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800184e:	4b10      	ldr	r3, [pc, #64]	; (8001890 <MX_USART3_UART_Init+0x4c>)
 8001850:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001854:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001856:	4b0e      	ldr	r3, [pc, #56]	; (8001890 <MX_USART3_UART_Init+0x4c>)
 8001858:	2200      	movs	r2, #0
 800185a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800185c:	4b0c      	ldr	r3, [pc, #48]	; (8001890 <MX_USART3_UART_Init+0x4c>)
 800185e:	2200      	movs	r2, #0
 8001860:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001862:	4b0b      	ldr	r3, [pc, #44]	; (8001890 <MX_USART3_UART_Init+0x4c>)
 8001864:	2200      	movs	r2, #0
 8001866:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001868:	4b09      	ldr	r3, [pc, #36]	; (8001890 <MX_USART3_UART_Init+0x4c>)
 800186a:	220c      	movs	r2, #12
 800186c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800186e:	4b08      	ldr	r3, [pc, #32]	; (8001890 <MX_USART3_UART_Init+0x4c>)
 8001870:	2200      	movs	r2, #0
 8001872:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001874:	4b06      	ldr	r3, [pc, #24]	; (8001890 <MX_USART3_UART_Init+0x4c>)
 8001876:	2200      	movs	r2, #0
 8001878:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800187a:	4805      	ldr	r0, [pc, #20]	; (8001890 <MX_USART3_UART_Init+0x4c>)
 800187c:	f004 f8c6 	bl	8005a0c <HAL_UART_Init>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001886:	f000 fd3d 	bl	8002304 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	200027fc 	.word	0x200027fc
 8001894:	40004800 	.word	0x40004800

08001898 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	607b      	str	r3, [r7, #4]
 80018a2:	4b10      	ldr	r3, [pc, #64]	; (80018e4 <MX_DMA_Init+0x4c>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	4a0f      	ldr	r2, [pc, #60]	; (80018e4 <MX_DMA_Init+0x4c>)
 80018a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018ac:	6313      	str	r3, [r2, #48]	; 0x30
 80018ae:	4b0d      	ldr	r3, [pc, #52]	; (80018e4 <MX_DMA_Init+0x4c>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018b6:	607b      	str	r3, [r7, #4]
 80018b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80018ba:	2200      	movs	r2, #0
 80018bc:	2100      	movs	r1, #0
 80018be:	200c      	movs	r0, #12
 80018c0:	f001 f9f1 	bl	8002ca6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80018c4:	200c      	movs	r0, #12
 80018c6:	f001 fa0a 	bl	8002cde <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80018ca:	2200      	movs	r2, #0
 80018cc:	2100      	movs	r1, #0
 80018ce:	2010      	movs	r0, #16
 80018d0:	f001 f9e9 	bl	8002ca6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80018d4:	2010      	movs	r0, #16
 80018d6:	f001 fa02 	bl	8002cde <HAL_NVIC_EnableIRQ>

}
 80018da:	bf00      	nop
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40023800 	.word	0x40023800

080018e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b08a      	sub	sp, #40	; 0x28
 80018ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ee:	f107 0314 	add.w	r3, r7, #20
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	605a      	str	r2, [r3, #4]
 80018f8:	609a      	str	r2, [r3, #8]
 80018fa:	60da      	str	r2, [r3, #12]
 80018fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018fe:	2300      	movs	r3, #0
 8001900:	613b      	str	r3, [r7, #16]
 8001902:	4b4c      	ldr	r3, [pc, #304]	; (8001a34 <MX_GPIO_Init+0x14c>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001906:	4a4b      	ldr	r2, [pc, #300]	; (8001a34 <MX_GPIO_Init+0x14c>)
 8001908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800190c:	6313      	str	r3, [r2, #48]	; 0x30
 800190e:	4b49      	ldr	r3, [pc, #292]	; (8001a34 <MX_GPIO_Init+0x14c>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001916:	613b      	str	r3, [r7, #16]
 8001918:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	60fb      	str	r3, [r7, #12]
 800191e:	4b45      	ldr	r3, [pc, #276]	; (8001a34 <MX_GPIO_Init+0x14c>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	4a44      	ldr	r2, [pc, #272]	; (8001a34 <MX_GPIO_Init+0x14c>)
 8001924:	f043 0301 	orr.w	r3, r3, #1
 8001928:	6313      	str	r3, [r2, #48]	; 0x30
 800192a:	4b42      	ldr	r3, [pc, #264]	; (8001a34 <MX_GPIO_Init+0x14c>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	60bb      	str	r3, [r7, #8]
 800193a:	4b3e      	ldr	r3, [pc, #248]	; (8001a34 <MX_GPIO_Init+0x14c>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	4a3d      	ldr	r2, [pc, #244]	; (8001a34 <MX_GPIO_Init+0x14c>)
 8001940:	f043 0310 	orr.w	r3, r3, #16
 8001944:	6313      	str	r3, [r2, #48]	; 0x30
 8001946:	4b3b      	ldr	r3, [pc, #236]	; (8001a34 <MX_GPIO_Init+0x14c>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	f003 0310 	and.w	r3, r3, #16
 800194e:	60bb      	str	r3, [r7, #8]
 8001950:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001952:	2300      	movs	r3, #0
 8001954:	607b      	str	r3, [r7, #4]
 8001956:	4b37      	ldr	r3, [pc, #220]	; (8001a34 <MX_GPIO_Init+0x14c>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	4a36      	ldr	r2, [pc, #216]	; (8001a34 <MX_GPIO_Init+0x14c>)
 800195c:	f043 0302 	orr.w	r3, r3, #2
 8001960:	6313      	str	r3, [r2, #48]	; 0x30
 8001962:	4b34      	ldr	r3, [pc, #208]	; (8001a34 <MX_GPIO_Init+0x14c>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	607b      	str	r3, [r7, #4]
 800196c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	603b      	str	r3, [r7, #0]
 8001972:	4b30      	ldr	r3, [pc, #192]	; (8001a34 <MX_GPIO_Init+0x14c>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	4a2f      	ldr	r2, [pc, #188]	; (8001a34 <MX_GPIO_Init+0x14c>)
 8001978:	f043 0308 	orr.w	r3, r3, #8
 800197c:	6313      	str	r3, [r2, #48]	; 0x30
 800197e:	4b2d      	ldr	r3, [pc, #180]	; (8001a34 <MX_GPIO_Init+0x14c>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	f003 0308 	and.w	r3, r3, #8
 8001986:	603b      	str	r3, [r7, #0]
 8001988:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800198a:	2200      	movs	r2, #0
 800198c:	2102      	movs	r1, #2
 800198e:	482a      	ldr	r0, [pc, #168]	; (8001a38 <MX_GPIO_Init+0x150>)
 8001990:	f001 ff76 	bl	8003880 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_RESET);
 8001994:	2200      	movs	r2, #0
 8001996:	f44f 41a8 	mov.w	r1, #21504	; 0x5400
 800199a:	4828      	ldr	r0, [pc, #160]	; (8001a3c <MX_GPIO_Init+0x154>)
 800199c:	f001 ff70 	bl	8003880 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80019a0:	2200      	movs	r2, #0
 80019a2:	21f0      	movs	r1, #240	; 0xf0
 80019a4:	4826      	ldr	r0, [pc, #152]	; (8001a40 <MX_GPIO_Init+0x158>)
 80019a6:	f001 ff6b 	bl	8003880 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80019aa:	2302      	movs	r3, #2
 80019ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ae:	2301      	movs	r3, #1
 80019b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b2:	2300      	movs	r3, #0
 80019b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b6:	2300      	movs	r3, #0
 80019b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ba:	f107 0314 	add.w	r3, r7, #20
 80019be:	4619      	mov	r1, r3
 80019c0:	481d      	ldr	r0, [pc, #116]	; (8001a38 <MX_GPIO_Init+0x150>)
 80019c2:	f001 fda9 	bl	8003518 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE10 PE12 PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14;
 80019c6:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 80019ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019cc:	2301      	movs	r3, #1
 80019ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d0:	2300      	movs	r3, #0
 80019d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d4:	2300      	movs	r3, #0
 80019d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019d8:	f107 0314 	add.w	r3, r7, #20
 80019dc:	4619      	mov	r1, r3
 80019de:	4817      	ldr	r0, [pc, #92]	; (8001a3c <MX_GPIO_Init+0x154>)
 80019e0:	f001 fd9a 	bl	8003518 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80019e4:	23f0      	movs	r3, #240	; 0xf0
 80019e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019e8:	2301      	movs	r3, #1
 80019ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ec:	2300      	movs	r3, #0
 80019ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f0:	2300      	movs	r3, #0
 80019f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019f4:	f107 0314 	add.w	r3, r7, #20
 80019f8:	4619      	mov	r1, r3
 80019fa:	4811      	ldr	r0, [pc, #68]	; (8001a40 <MX_GPIO_Init+0x158>)
 80019fc:	f001 fd8c 	bl	8003518 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
 8001a00:	f44f 734a 	mov.w	r3, #808	; 0x328
 8001a04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a06:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a10:	f107 0314 	add.w	r3, r7, #20
 8001a14:	4619      	mov	r1, r3
 8001a16:	480b      	ldr	r0, [pc, #44]	; (8001a44 <MX_GPIO_Init+0x15c>)
 8001a18:	f001 fd7e 	bl	8003518 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	2100      	movs	r1, #0
 8001a20:	2017      	movs	r0, #23
 8001a22:	f001 f940 	bl	8002ca6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001a26:	2017      	movs	r0, #23
 8001a28:	f001 f959 	bl	8002cde <HAL_NVIC_EnableIRQ>

}
 8001a2c:	bf00      	nop
 8001a2e:	3728      	adds	r7, #40	; 0x28
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	40023800 	.word	0x40023800
 8001a38:	40020000 	.word	0x40020000
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	40020c00 	.word	0x40020c00
 8001a44:	40020400 	.word	0x40020400

08001a48 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
/**Fungsi ini digunakan untuk interrupt LoRa E32 jika ada data masuk
  */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	460b      	mov	r3, r1
 8001a52:	807b      	strh	r3, [r7, #2]
	//variable parse
	uint8_t new_Data[10];
	//uint8_t prev_Data;
	if (huart->Instance == USART2)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a60      	ldr	r2, [pc, #384]	; (8001bdc <HAL_UARTEx_RxEventCallback+0x194>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d167      	bne.n	8001b2e <HAL_UARTEx_RxEventCallback+0xe6>
	{
		oldPos = newPos;  // Update the last position before copying new data
 8001a5e:	4b60      	ldr	r3, [pc, #384]	; (8001be0 <HAL_UARTEx_RxEventCallback+0x198>)
 8001a60:	881a      	ldrh	r2, [r3, #0]
 8001a62:	4b60      	ldr	r3, [pc, #384]	; (8001be4 <HAL_UARTEx_RxEventCallback+0x19c>)
 8001a64:	801a      	strh	r2, [r3, #0]

		/* If the data in large and it is about to exceed the buffer size, we have to route it to the start of the buffer
		 * This is to maintain the circular buffer
		 * The old data in the main buffer will be overlapped
		 */
		if (oldPos+Size > MainBuf_SIZE)  // If the current position + new data size is greater than the main buffer
 8001a66:	4b5f      	ldr	r3, [pc, #380]	; (8001be4 <HAL_UARTEx_RxEventCallback+0x19c>)
 8001a68:	881b      	ldrh	r3, [r3, #0]
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	887b      	ldrh	r3, [r7, #2]
 8001a6e:	4413      	add	r3, r2
 8001a70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a74:	dd22      	ble.n	8001abc <HAL_UARTEx_RxEventCallback+0x74>
		{
			uint16_t datatocopy = MainBuf_SIZE-oldPos;  // find out how much space is left in the main buffer
 8001a76:	4b5b      	ldr	r3, [pc, #364]	; (8001be4 <HAL_UARTEx_RxEventCallback+0x19c>)
 8001a78:	881b      	ldrh	r3, [r3, #0]
 8001a7a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001a7e:	82bb      	strh	r3, [r7, #20]
			memcpy ((uint8_t *)MainBuf+oldPos, RxBuf, datatocopy);  // copy data in that remaining space
 8001a80:	4b58      	ldr	r3, [pc, #352]	; (8001be4 <HAL_UARTEx_RxEventCallback+0x19c>)
 8001a82:	881b      	ldrh	r3, [r3, #0]
 8001a84:	461a      	mov	r2, r3
 8001a86:	4b58      	ldr	r3, [pc, #352]	; (8001be8 <HAL_UARTEx_RxEventCallback+0x1a0>)
 8001a88:	4413      	add	r3, r2
 8001a8a:	8aba      	ldrh	r2, [r7, #20]
 8001a8c:	4957      	ldr	r1, [pc, #348]	; (8001bec <HAL_UARTEx_RxEventCallback+0x1a4>)
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f005 fa0c 	bl	8006eac <memcpy>

			oldPos = 0;  // point to the start of the buffer
 8001a94:	4b53      	ldr	r3, [pc, #332]	; (8001be4 <HAL_UARTEx_RxEventCallback+0x19c>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)MainBuf, (uint8_t *)RxBuf+datatocopy, (Size-datatocopy));  // copy the remaining data
 8001a9a:	8abb      	ldrh	r3, [r7, #20]
 8001a9c:	4a53      	ldr	r2, [pc, #332]	; (8001bec <HAL_UARTEx_RxEventCallback+0x1a4>)
 8001a9e:	1899      	adds	r1, r3, r2
 8001aa0:	887a      	ldrh	r2, [r7, #2]
 8001aa2:	8abb      	ldrh	r3, [r7, #20]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	484f      	ldr	r0, [pc, #316]	; (8001be8 <HAL_UARTEx_RxEventCallback+0x1a0>)
 8001aaa:	f005 f9ff 	bl	8006eac <memcpy>
			newPos = (Size-datatocopy);  // update the position
 8001aae:	887a      	ldrh	r2, [r7, #2]
 8001ab0:	8abb      	ldrh	r3, [r7, #20]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	b29a      	uxth	r2, r3
 8001ab6:	4b4a      	ldr	r3, [pc, #296]	; (8001be0 <HAL_UARTEx_RxEventCallback+0x198>)
 8001ab8:	801a      	strh	r2, [r3, #0]
 8001aba:	e010      	b.n	8001ade <HAL_UARTEx_RxEventCallback+0x96>
		/* if the current position + new data size is less than the main buffer
		 * we will simply copy the data into the buffer and update the position
		 */
		else
		{
			memcpy ((uint8_t *)MainBuf+newPos, RxBuf, Size);
 8001abc:	4b48      	ldr	r3, [pc, #288]	; (8001be0 <HAL_UARTEx_RxEventCallback+0x198>)
 8001abe:	881b      	ldrh	r3, [r3, #0]
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	4b49      	ldr	r3, [pc, #292]	; (8001be8 <HAL_UARTEx_RxEventCallback+0x1a0>)
 8001ac4:	4413      	add	r3, r2
 8001ac6:	887a      	ldrh	r2, [r7, #2]
 8001ac8:	4948      	ldr	r1, [pc, #288]	; (8001bec <HAL_UARTEx_RxEventCallback+0x1a4>)
 8001aca:	4618      	mov	r0, r3
 8001acc:	f005 f9ee 	bl	8006eac <memcpy>
			newPos = Size+oldPos;
 8001ad0:	4b44      	ldr	r3, [pc, #272]	; (8001be4 <HAL_UARTEx_RxEventCallback+0x19c>)
 8001ad2:	881a      	ldrh	r2, [r3, #0]
 8001ad4:	887b      	ldrh	r3, [r7, #2]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	b29a      	uxth	r2, r3
 8001ada:	4b41      	ldr	r3, [pc, #260]	; (8001be0 <HAL_UARTEx_RxEventCallback+0x198>)
 8001adc:	801a      	strh	r2, [r3, #0]
		}
		/* start the DMA again */
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *) RxBuf, RxBuf_SIZE);
 8001ade:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ae2:	4942      	ldr	r1, [pc, #264]	; (8001bec <HAL_UARTEx_RxEventCallback+0x1a4>)
 8001ae4:	4842      	ldr	r0, [pc, #264]	; (8001bf0 <HAL_UARTEx_RxEventCallback+0x1a8>)
 8001ae6:	f004 f912 	bl	8005d0e <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8001aea:	4b42      	ldr	r3, [pc, #264]	; (8001bf4 <HAL_UARTEx_RxEventCallback+0x1ac>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	4b40      	ldr	r3, [pc, #256]	; (8001bf4 <HAL_UARTEx_RxEventCallback+0x1ac>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f022 0208 	bic.w	r2, r2, #8
 8001af8:	601a      	str	r2, [r3, #0]

		if(RxBuf_3[0] == '*'){ //*node,lat,long,data,jam, menit, detik, tegangan
 8001afa:	4b3f      	ldr	r3, [pc, #252]	; (8001bf8 <HAL_UARTEx_RxEventCallback+0x1b0>)
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	2b2a      	cmp	r3, #42	; 0x2a
 8001b00:	d10b      	bne.n	8001b1a <HAL_UARTEx_RxEventCallback+0xd2>
			new_Data[0] = MainBuf[1];
 8001b02:	4b39      	ldr	r3, [pc, #228]	; (8001be8 <HAL_UARTEx_RxEventCallback+0x1a0>)
 8001b04:	785b      	ldrb	r3, [r3, #1]
 8001b06:	723b      	strb	r3, [r7, #8]
			if (new_Data[0]){
 8001b08:	7a3b      	ldrb	r3, [r7, #8]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d005      	beq.n	8001b1a <HAL_UARTEx_RxEventCallback+0xd2>
				HAL_UART_Transmit(&huart2, MainBuf, Size, 100);
 8001b0e:	887a      	ldrh	r2, [r7, #2]
 8001b10:	2364      	movs	r3, #100	; 0x64
 8001b12:	4935      	ldr	r1, [pc, #212]	; (8001be8 <HAL_UARTEx_RxEventCallback+0x1a0>)
 8001b14:	4836      	ldr	r0, [pc, #216]	; (8001bf0 <HAL_UARTEx_RxEventCallback+0x1a8>)
 8001b16:	f003 ffc6 	bl	8005aa6 <HAL_UART_Transmit>
			}
			//prev_Data = new_Data[0];
		}
		printf("%s", MainBuf);
 8001b1a:	4933      	ldr	r1, [pc, #204]	; (8001be8 <HAL_UARTEx_RxEventCallback+0x1a0>)
 8001b1c:	4837      	ldr	r0, [pc, #220]	; (8001bfc <HAL_UARTEx_RxEventCallback+0x1b4>)
 8001b1e:	f006 f855 	bl	8007bcc <iprintf>
		led_reaction(100, 600);
 8001b22:	f44f 7116 	mov.w	r1, #600	; 0x258
 8001b26:	2064      	movs	r0, #100	; 0x64
 8001b28:	f000 fb6c 	bl	8002204 <led_reaction>
		}
		HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t *) RxBuf_3, RxBuf_SIZE);
		__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
		//printf("%s", MainBuf_3);
	}
}
 8001b2c:	e052      	b.n	8001bd4 <HAL_UARTEx_RxEventCallback+0x18c>
	}else if(huart->Instance == USART3){
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a33      	ldr	r2, [pc, #204]	; (8001c00 <HAL_UARTEx_RxEventCallback+0x1b8>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d14d      	bne.n	8001bd4 <HAL_UARTEx_RxEventCallback+0x18c>
		oldPos_3 = newPos_3;
 8001b38:	4b32      	ldr	r3, [pc, #200]	; (8001c04 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8001b3a:	881a      	ldrh	r2, [r3, #0]
 8001b3c:	4b32      	ldr	r3, [pc, #200]	; (8001c08 <HAL_UARTEx_RxEventCallback+0x1c0>)
 8001b3e:	801a      	strh	r2, [r3, #0]
		if (oldPos_3+Size > MainBuf_SIZE)  // If the current position + new data size is greater than the main buffer
 8001b40:	4b31      	ldr	r3, [pc, #196]	; (8001c08 <HAL_UARTEx_RxEventCallback+0x1c0>)
 8001b42:	881b      	ldrh	r3, [r3, #0]
 8001b44:	461a      	mov	r2, r3
 8001b46:	887b      	ldrh	r3, [r7, #2]
 8001b48:	4413      	add	r3, r2
 8001b4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b4e:	dd22      	ble.n	8001b96 <HAL_UARTEx_RxEventCallback+0x14e>
			uint16_t datatocopy_3 = MainBuf_SIZE-oldPos_3;  // find out how much space is left in the main buffer
 8001b50:	4b2d      	ldr	r3, [pc, #180]	; (8001c08 <HAL_UARTEx_RxEventCallback+0x1c0>)
 8001b52:	881b      	ldrh	r3, [r3, #0]
 8001b54:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001b58:	82fb      	strh	r3, [r7, #22]
			memcpy ((uint8_t *)MainBuf_3+oldPos_3, RxBuf_3, datatocopy_3);  // copy data in that remaining space
 8001b5a:	4b2b      	ldr	r3, [pc, #172]	; (8001c08 <HAL_UARTEx_RxEventCallback+0x1c0>)
 8001b5c:	881b      	ldrh	r3, [r3, #0]
 8001b5e:	461a      	mov	r2, r3
 8001b60:	4b2a      	ldr	r3, [pc, #168]	; (8001c0c <HAL_UARTEx_RxEventCallback+0x1c4>)
 8001b62:	4413      	add	r3, r2
 8001b64:	8afa      	ldrh	r2, [r7, #22]
 8001b66:	4924      	ldr	r1, [pc, #144]	; (8001bf8 <HAL_UARTEx_RxEventCallback+0x1b0>)
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f005 f99f 	bl	8006eac <memcpy>
			oldPos_3 = 0;  // point to the start of the buffer
 8001b6e:	4b26      	ldr	r3, [pc, #152]	; (8001c08 <HAL_UARTEx_RxEventCallback+0x1c0>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)MainBuf_3, (uint8_t *)RxBuf_3+datatocopy_3, (Size-datatocopy_3));  // copy the remaining data
 8001b74:	8afb      	ldrh	r3, [r7, #22]
 8001b76:	4a20      	ldr	r2, [pc, #128]	; (8001bf8 <HAL_UARTEx_RxEventCallback+0x1b0>)
 8001b78:	1899      	adds	r1, r3, r2
 8001b7a:	887a      	ldrh	r2, [r7, #2]
 8001b7c:	8afb      	ldrh	r3, [r7, #22]
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	461a      	mov	r2, r3
 8001b82:	4822      	ldr	r0, [pc, #136]	; (8001c0c <HAL_UARTEx_RxEventCallback+0x1c4>)
 8001b84:	f005 f992 	bl	8006eac <memcpy>
			newPos_3 = (Size-datatocopy_3);
 8001b88:	887a      	ldrh	r2, [r7, #2]
 8001b8a:	8afb      	ldrh	r3, [r7, #22]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	b29a      	uxth	r2, r3
 8001b90:	4b1c      	ldr	r3, [pc, #112]	; (8001c04 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8001b92:	801a      	strh	r2, [r3, #0]
 8001b94:	e010      	b.n	8001bb8 <HAL_UARTEx_RxEventCallback+0x170>
			memcpy ((uint8_t *)MainBuf+newPos_3, RxBuf_3, Size);
 8001b96:	4b1b      	ldr	r3, [pc, #108]	; (8001c04 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8001b98:	881b      	ldrh	r3, [r3, #0]
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	4b12      	ldr	r3, [pc, #72]	; (8001be8 <HAL_UARTEx_RxEventCallback+0x1a0>)
 8001b9e:	4413      	add	r3, r2
 8001ba0:	887a      	ldrh	r2, [r7, #2]
 8001ba2:	4915      	ldr	r1, [pc, #84]	; (8001bf8 <HAL_UARTEx_RxEventCallback+0x1b0>)
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f005 f981 	bl	8006eac <memcpy>
			newPos_3 = Size+oldPos_3;
 8001baa:	4b17      	ldr	r3, [pc, #92]	; (8001c08 <HAL_UARTEx_RxEventCallback+0x1c0>)
 8001bac:	881a      	ldrh	r2, [r3, #0]
 8001bae:	887b      	ldrh	r3, [r7, #2]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	b29a      	uxth	r2, r3
 8001bb4:	4b13      	ldr	r3, [pc, #76]	; (8001c04 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8001bb6:	801a      	strh	r2, [r3, #0]
		HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t *) RxBuf_3, RxBuf_SIZE);
 8001bb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bbc:	490e      	ldr	r1, [pc, #56]	; (8001bf8 <HAL_UARTEx_RxEventCallback+0x1b0>)
 8001bbe:	4814      	ldr	r0, [pc, #80]	; (8001c10 <HAL_UARTEx_RxEventCallback+0x1c8>)
 8001bc0:	f004 f8a5 	bl	8005d0e <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8001bc4:	4b13      	ldr	r3, [pc, #76]	; (8001c14 <HAL_UARTEx_RxEventCallback+0x1cc>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	4b12      	ldr	r3, [pc, #72]	; (8001c14 <HAL_UARTEx_RxEventCallback+0x1cc>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f022 0208 	bic.w	r2, r2, #8
 8001bd2:	601a      	str	r2, [r3, #0]
}
 8001bd4:	bf00      	nop
 8001bd6:	3718      	adds	r7, #24
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40004400 	.word	0x40004400
 8001be0:	20000604 	.word	0x20000604
 8001be4:	20000602 	.word	0x20000602
 8001be8:	20002b24 	.word	0x20002b24
 8001bec:	20002924 	.word	0x20002924
 8001bf0:	20002d24 	.word	0x20002d24
 8001bf4:	20002674 	.word	0x20002674
 8001bf8:	20000400 	.word	0x20000400
 8001bfc:	0800b940 	.word	0x0800b940
 8001c00:	40004800 	.word	0x40004800
 8001c04:	20000608 	.word	0x20000608
 8001c08:	20000606 	.word	0x20000606
 8001c0c:	20000200 	.word	0x20000200
 8001c10:	200027fc 	.word	0x200027fc
 8001c14:	2000279c 	.word	0x2000279c

08001c18 <HAL_GPIO_EXTI_Callback>:
/**Fungsi ini digunakan untuk keypad untuk mengirim pesan dan juga di intrupsi jika ada data masuk dari keypad
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	4603      	mov	r3, r0
 8001c20:	80fb      	strh	r3, [r7, #6]
  currentMillis = HAL_GetTick();
 8001c22:	f000 ff35 	bl	8002a90 <HAL_GetTick>
 8001c26:	4603      	mov	r3, r0
 8001c28:	4aa3      	ldr	r2, [pc, #652]	; (8001eb8 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8001c2a:	6013      	str	r3, [r2, #0]
  if (currentMillis - previousMillis > 10) {
 8001c2c:	4ba2      	ldr	r3, [pc, #648]	; (8001eb8 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	4ba2      	ldr	r3, [pc, #648]	; (8001ebc <HAL_GPIO_EXTI_Callback+0x2a4>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b0a      	cmp	r3, #10
 8001c38:	f240 817f 	bls.w	8001f3a <HAL_GPIO_EXTI_Callback+0x322>
    /*Configure GPIO pins : PB3 PB5 PB8 PB9 to GPIO_INPUT*/
    GPIO_InitStructPrivate.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
 8001c3c:	4ba0      	ldr	r3, [pc, #640]	; (8001ec0 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8001c3e:	f44f 724a 	mov.w	r2, #808	; 0x328
 8001c42:	601a      	str	r2, [r3, #0]
    GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 8001c44:	4b9e      	ldr	r3, [pc, #632]	; (8001ec0 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	605a      	str	r2, [r3, #4]
    GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8001c4a:	4b9d      	ldr	r3, [pc, #628]	; (8001ec0 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	609a      	str	r2, [r3, #8]
    GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8001c50:	4b9b      	ldr	r3, [pc, #620]	; (8001ec0 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructPrivate);
 8001c56:	499a      	ldr	r1, [pc, #616]	; (8001ec0 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8001c58:	489a      	ldr	r0, [pc, #616]	; (8001ec4 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8001c5a:	f001 fc5d 	bl	8003518 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, 1);
 8001c5e:	2201      	movs	r2, #1
 8001c60:	2110      	movs	r1, #16
 8001c62:	4899      	ldr	r0, [pc, #612]	; (8001ec8 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8001c64:	f001 fe0c 	bl	8003880 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, 0);
 8001c68:	2200      	movs	r2, #0
 8001c6a:	2120      	movs	r1, #32
 8001c6c:	4896      	ldr	r0, [pc, #600]	; (8001ec8 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8001c6e:	f001 fe07 	bl	8003880 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, 0);
 8001c72:	2200      	movs	r2, #0
 8001c74:	2140      	movs	r1, #64	; 0x40
 8001c76:	4894      	ldr	r0, [pc, #592]	; (8001ec8 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8001c78:	f001 fe02 	bl	8003880 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, 0);
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	2180      	movs	r1, #128	; 0x80
 8001c80:	4891      	ldr	r0, [pc, #580]	; (8001ec8 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8001c82:	f001 fdfd 	bl	8003880 <HAL_GPIO_WritePin>
    if(GPIO_Pin == GPIO_PIN_3 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3))
 8001c86:	88fb      	ldrh	r3, [r7, #6]
 8001c88:	2b08      	cmp	r3, #8
 8001c8a:	d10a      	bne.n	8001ca2 <HAL_GPIO_EXTI_Callback+0x8a>
 8001c8c:	2108      	movs	r1, #8
 8001c8e:	488d      	ldr	r0, [pc, #564]	; (8001ec4 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8001c90:	f001 fdde 	bl	8003850 <HAL_GPIO_ReadPin>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d003      	beq.n	8001ca2 <HAL_GPIO_EXTI_Callback+0x8a>
    {
      keyPressed = 14; //ASCII value of D
 8001c9a:	4b8c      	ldr	r3, [pc, #560]	; (8001ecc <HAL_GPIO_EXTI_Callback+0x2b4>)
 8001c9c:	220e      	movs	r2, #14
 8001c9e:	701a      	strb	r2, [r3, #0]
 8001ca0:	e02c      	b.n	8001cfc <HAL_GPIO_EXTI_Callback+0xe4>
    }
    else if(GPIO_Pin == GPIO_PIN_5 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5))
 8001ca2:	88fb      	ldrh	r3, [r7, #6]
 8001ca4:	2b20      	cmp	r3, #32
 8001ca6:	d10a      	bne.n	8001cbe <HAL_GPIO_EXTI_Callback+0xa6>
 8001ca8:	2120      	movs	r1, #32
 8001caa:	4886      	ldr	r0, [pc, #536]	; (8001ec4 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8001cac:	f001 fdd0 	bl	8003850 <HAL_GPIO_ReadPin>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d003      	beq.n	8001cbe <HAL_GPIO_EXTI_Callback+0xa6>
    {
      keyPressed = 13; //ASCII value of C
 8001cb6:	4b85      	ldr	r3, [pc, #532]	; (8001ecc <HAL_GPIO_EXTI_Callback+0x2b4>)
 8001cb8:	220d      	movs	r2, #13
 8001cba:	701a      	strb	r2, [r3, #0]
 8001cbc:	e01e      	b.n	8001cfc <HAL_GPIO_EXTI_Callback+0xe4>
    }
    else if(GPIO_Pin == GPIO_PIN_8 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))
 8001cbe:	88fb      	ldrh	r3, [r7, #6]
 8001cc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cc4:	d10b      	bne.n	8001cde <HAL_GPIO_EXTI_Callback+0xc6>
 8001cc6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cca:	487e      	ldr	r0, [pc, #504]	; (8001ec4 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8001ccc:	f001 fdc0 	bl	8003850 <HAL_GPIO_ReadPin>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d003      	beq.n	8001cde <HAL_GPIO_EXTI_Callback+0xc6>
    {
      keyPressed = 12; //ASCII value of B
 8001cd6:	4b7d      	ldr	r3, [pc, #500]	; (8001ecc <HAL_GPIO_EXTI_Callback+0x2b4>)
 8001cd8:	220c      	movs	r2, #12
 8001cda:	701a      	strb	r2, [r3, #0]
 8001cdc:	e00e      	b.n	8001cfc <HAL_GPIO_EXTI_Callback+0xe4>
    }
    else if(GPIO_Pin == GPIO_PIN_9 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9))
 8001cde:	88fb      	ldrh	r3, [r7, #6]
 8001ce0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ce4:	d10a      	bne.n	8001cfc <HAL_GPIO_EXTI_Callback+0xe4>
 8001ce6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cea:	4876      	ldr	r0, [pc, #472]	; (8001ec4 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8001cec:	f001 fdb0 	bl	8003850 <HAL_GPIO_ReadPin>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d002      	beq.n	8001cfc <HAL_GPIO_EXTI_Callback+0xe4>
    {
      keyPressed = 11; //ASCII value of A
 8001cf6:	4b75      	ldr	r3, [pc, #468]	; (8001ecc <HAL_GPIO_EXTI_Callback+0x2b4>)
 8001cf8:	220b      	movs	r2, #11
 8001cfa:	701a      	strb	r2, [r3, #0]
    }

    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, 0);
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	2110      	movs	r1, #16
 8001d00:	4871      	ldr	r0, [pc, #452]	; (8001ec8 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8001d02:	f001 fdbd 	bl	8003880 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, 1);
 8001d06:	2201      	movs	r2, #1
 8001d08:	2120      	movs	r1, #32
 8001d0a:	486f      	ldr	r0, [pc, #444]	; (8001ec8 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8001d0c:	f001 fdb8 	bl	8003880 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, 0);
 8001d10:	2200      	movs	r2, #0
 8001d12:	2140      	movs	r1, #64	; 0x40
 8001d14:	486c      	ldr	r0, [pc, #432]	; (8001ec8 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8001d16:	f001 fdb3 	bl	8003880 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, 0);
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	2180      	movs	r1, #128	; 0x80
 8001d1e:	486a      	ldr	r0, [pc, #424]	; (8001ec8 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8001d20:	f001 fdae 	bl	8003880 <HAL_GPIO_WritePin>

    if(GPIO_Pin == GPIO_PIN_3 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3))
 8001d24:	88fb      	ldrh	r3, [r7, #6]
 8001d26:	2b08      	cmp	r3, #8
 8001d28:	d10a      	bne.n	8001d40 <HAL_GPIO_EXTI_Callback+0x128>
 8001d2a:	2108      	movs	r1, #8
 8001d2c:	4865      	ldr	r0, [pc, #404]	; (8001ec4 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8001d2e:	f001 fd8f 	bl	8003850 <HAL_GPIO_ReadPin>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d003      	beq.n	8001d40 <HAL_GPIO_EXTI_Callback+0x128>
    {
      keyPressed = 15; //ASCII value of #
 8001d38:	4b64      	ldr	r3, [pc, #400]	; (8001ecc <HAL_GPIO_EXTI_Callback+0x2b4>)
 8001d3a:	220f      	movs	r2, #15
 8001d3c:	701a      	strb	r2, [r3, #0]
 8001d3e:	e02c      	b.n	8001d9a <HAL_GPIO_EXTI_Callback+0x182>
    }
    else if(GPIO_Pin == GPIO_PIN_5 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5))
 8001d40:	88fb      	ldrh	r3, [r7, #6]
 8001d42:	2b20      	cmp	r3, #32
 8001d44:	d10a      	bne.n	8001d5c <HAL_GPIO_EXTI_Callback+0x144>
 8001d46:	2120      	movs	r1, #32
 8001d48:	485e      	ldr	r0, [pc, #376]	; (8001ec4 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8001d4a:	f001 fd81 	bl	8003850 <HAL_GPIO_ReadPin>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d003      	beq.n	8001d5c <HAL_GPIO_EXTI_Callback+0x144>
    {
      keyPressed = 9; //ASCII value of 9
 8001d54:	4b5d      	ldr	r3, [pc, #372]	; (8001ecc <HAL_GPIO_EXTI_Callback+0x2b4>)
 8001d56:	2209      	movs	r2, #9
 8001d58:	701a      	strb	r2, [r3, #0]
 8001d5a:	e01e      	b.n	8001d9a <HAL_GPIO_EXTI_Callback+0x182>
    }
    else if(GPIO_Pin == GPIO_PIN_8 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))
 8001d5c:	88fb      	ldrh	r3, [r7, #6]
 8001d5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d62:	d10b      	bne.n	8001d7c <HAL_GPIO_EXTI_Callback+0x164>
 8001d64:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d68:	4856      	ldr	r0, [pc, #344]	; (8001ec4 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8001d6a:	f001 fd71 	bl	8003850 <HAL_GPIO_ReadPin>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d003      	beq.n	8001d7c <HAL_GPIO_EXTI_Callback+0x164>
    {
      keyPressed = 6; //ASCII value of 6
 8001d74:	4b55      	ldr	r3, [pc, #340]	; (8001ecc <HAL_GPIO_EXTI_Callback+0x2b4>)
 8001d76:	2206      	movs	r2, #6
 8001d78:	701a      	strb	r2, [r3, #0]
 8001d7a:	e00e      	b.n	8001d9a <HAL_GPIO_EXTI_Callback+0x182>
    }
    else if(GPIO_Pin == GPIO_PIN_9 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9))
 8001d7c:	88fb      	ldrh	r3, [r7, #6]
 8001d7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d82:	d10a      	bne.n	8001d9a <HAL_GPIO_EXTI_Callback+0x182>
 8001d84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d88:	484e      	ldr	r0, [pc, #312]	; (8001ec4 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8001d8a:	f001 fd61 	bl	8003850 <HAL_GPIO_ReadPin>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d002      	beq.n	8001d9a <HAL_GPIO_EXTI_Callback+0x182>
    {
      keyPressed = 3; //ASCII value of 3
 8001d94:	4b4d      	ldr	r3, [pc, #308]	; (8001ecc <HAL_GPIO_EXTI_Callback+0x2b4>)
 8001d96:	2203      	movs	r2, #3
 8001d98:	701a      	strb	r2, [r3, #0]
    }

    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, 0);
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	2110      	movs	r1, #16
 8001d9e:	484a      	ldr	r0, [pc, #296]	; (8001ec8 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8001da0:	f001 fd6e 	bl	8003880 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, 0);
 8001da4:	2200      	movs	r2, #0
 8001da6:	2120      	movs	r1, #32
 8001da8:	4847      	ldr	r0, [pc, #284]	; (8001ec8 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8001daa:	f001 fd69 	bl	8003880 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, 1);
 8001dae:	2201      	movs	r2, #1
 8001db0:	2140      	movs	r1, #64	; 0x40
 8001db2:	4845      	ldr	r0, [pc, #276]	; (8001ec8 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8001db4:	f001 fd64 	bl	8003880 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, 0);
 8001db8:	2200      	movs	r2, #0
 8001dba:	2180      	movs	r1, #128	; 0x80
 8001dbc:	4842      	ldr	r0, [pc, #264]	; (8001ec8 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8001dbe:	f001 fd5f 	bl	8003880 <HAL_GPIO_WritePin>
    if(GPIO_Pin == GPIO_PIN_3 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3))
 8001dc2:	88fb      	ldrh	r3, [r7, #6]
 8001dc4:	2b08      	cmp	r3, #8
 8001dc6:	d10a      	bne.n	8001dde <HAL_GPIO_EXTI_Callback+0x1c6>
 8001dc8:	2108      	movs	r1, #8
 8001dca:	483e      	ldr	r0, [pc, #248]	; (8001ec4 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8001dcc:	f001 fd40 	bl	8003850 <HAL_GPIO_ReadPin>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d003      	beq.n	8001dde <HAL_GPIO_EXTI_Callback+0x1c6>
    {
      keyPressed = 16; //ASCII value of 0
 8001dd6:	4b3d      	ldr	r3, [pc, #244]	; (8001ecc <HAL_GPIO_EXTI_Callback+0x2b4>)
 8001dd8:	2210      	movs	r2, #16
 8001dda:	701a      	strb	r2, [r3, #0]
 8001ddc:	e02c      	b.n	8001e38 <HAL_GPIO_EXTI_Callback+0x220>
    }
    else if(GPIO_Pin == GPIO_PIN_5 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5))
 8001dde:	88fb      	ldrh	r3, [r7, #6]
 8001de0:	2b20      	cmp	r3, #32
 8001de2:	d10a      	bne.n	8001dfa <HAL_GPIO_EXTI_Callback+0x1e2>
 8001de4:	2120      	movs	r1, #32
 8001de6:	4837      	ldr	r0, [pc, #220]	; (8001ec4 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8001de8:	f001 fd32 	bl	8003850 <HAL_GPIO_ReadPin>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d003      	beq.n	8001dfa <HAL_GPIO_EXTI_Callback+0x1e2>
    {
      keyPressed = 8; //ASCII value of 8
 8001df2:	4b36      	ldr	r3, [pc, #216]	; (8001ecc <HAL_GPIO_EXTI_Callback+0x2b4>)
 8001df4:	2208      	movs	r2, #8
 8001df6:	701a      	strb	r2, [r3, #0]
 8001df8:	e01e      	b.n	8001e38 <HAL_GPIO_EXTI_Callback+0x220>
    }
    else if(GPIO_Pin == GPIO_PIN_8 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))
 8001dfa:	88fb      	ldrh	r3, [r7, #6]
 8001dfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e00:	d10b      	bne.n	8001e1a <HAL_GPIO_EXTI_Callback+0x202>
 8001e02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e06:	482f      	ldr	r0, [pc, #188]	; (8001ec4 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8001e08:	f001 fd22 	bl	8003850 <HAL_GPIO_ReadPin>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d003      	beq.n	8001e1a <HAL_GPIO_EXTI_Callback+0x202>
    {
      keyPressed = 5; //ASCII value of 5
 8001e12:	4b2e      	ldr	r3, [pc, #184]	; (8001ecc <HAL_GPIO_EXTI_Callback+0x2b4>)
 8001e14:	2205      	movs	r2, #5
 8001e16:	701a      	strb	r2, [r3, #0]
 8001e18:	e00e      	b.n	8001e38 <HAL_GPIO_EXTI_Callback+0x220>
    }
    else if(GPIO_Pin == GPIO_PIN_9 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9))
 8001e1a:	88fb      	ldrh	r3, [r7, #6]
 8001e1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e20:	d10a      	bne.n	8001e38 <HAL_GPIO_EXTI_Callback+0x220>
 8001e22:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e26:	4827      	ldr	r0, [pc, #156]	; (8001ec4 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8001e28:	f001 fd12 	bl	8003850 <HAL_GPIO_ReadPin>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d002      	beq.n	8001e38 <HAL_GPIO_EXTI_Callback+0x220>
    {
      keyPressed = 2; //ASCII value of 2
 8001e32:	4b26      	ldr	r3, [pc, #152]	; (8001ecc <HAL_GPIO_EXTI_Callback+0x2b4>)
 8001e34:	2202      	movs	r2, #2
 8001e36:	701a      	strb	r2, [r3, #0]
    }

    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, 0);
 8001e38:	2200      	movs	r2, #0
 8001e3a:	2110      	movs	r1, #16
 8001e3c:	4822      	ldr	r0, [pc, #136]	; (8001ec8 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8001e3e:	f001 fd1f 	bl	8003880 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, 0);
 8001e42:	2200      	movs	r2, #0
 8001e44:	2120      	movs	r1, #32
 8001e46:	4820      	ldr	r0, [pc, #128]	; (8001ec8 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8001e48:	f001 fd1a 	bl	8003880 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, 0);
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	2140      	movs	r1, #64	; 0x40
 8001e50:	481d      	ldr	r0, [pc, #116]	; (8001ec8 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8001e52:	f001 fd15 	bl	8003880 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, 1);
 8001e56:	2201      	movs	r2, #1
 8001e58:	2180      	movs	r1, #128	; 0x80
 8001e5a:	481b      	ldr	r0, [pc, #108]	; (8001ec8 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8001e5c:	f001 fd10 	bl	8003880 <HAL_GPIO_WritePin>
    if(GPIO_Pin == GPIO_PIN_3 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3))
 8001e60:	88fb      	ldrh	r3, [r7, #6]
 8001e62:	2b08      	cmp	r3, #8
 8001e64:	d10a      	bne.n	8001e7c <HAL_GPIO_EXTI_Callback+0x264>
 8001e66:	2108      	movs	r1, #8
 8001e68:	4816      	ldr	r0, [pc, #88]	; (8001ec4 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8001e6a:	f001 fcf1 	bl	8003850 <HAL_GPIO_ReadPin>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d003      	beq.n	8001e7c <HAL_GPIO_EXTI_Callback+0x264>
    {
      keyPressed = 17; //ASCII value of *
 8001e74:	4b15      	ldr	r3, [pc, #84]	; (8001ecc <HAL_GPIO_EXTI_Callback+0x2b4>)
 8001e76:	2211      	movs	r2, #17
 8001e78:	701a      	strb	r2, [r3, #0]
 8001e7a:	e038      	b.n	8001eee <HAL_GPIO_EXTI_Callback+0x2d6>
    }
    else if(GPIO_Pin == GPIO_PIN_5 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5))
 8001e7c:	88fb      	ldrh	r3, [r7, #6]
 8001e7e:	2b20      	cmp	r3, #32
 8001e80:	d10a      	bne.n	8001e98 <HAL_GPIO_EXTI_Callback+0x280>
 8001e82:	2120      	movs	r1, #32
 8001e84:	480f      	ldr	r0, [pc, #60]	; (8001ec4 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8001e86:	f001 fce3 	bl	8003850 <HAL_GPIO_ReadPin>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d003      	beq.n	8001e98 <HAL_GPIO_EXTI_Callback+0x280>
    {
      keyPressed = 7; //ASCII value of 7
 8001e90:	4b0e      	ldr	r3, [pc, #56]	; (8001ecc <HAL_GPIO_EXTI_Callback+0x2b4>)
 8001e92:	2207      	movs	r2, #7
 8001e94:	701a      	strb	r2, [r3, #0]
 8001e96:	e02a      	b.n	8001eee <HAL_GPIO_EXTI_Callback+0x2d6>
    }
    else if(GPIO_Pin == GPIO_PIN_8 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))
 8001e98:	88fb      	ldrh	r3, [r7, #6]
 8001e9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e9e:	d117      	bne.n	8001ed0 <HAL_GPIO_EXTI_Callback+0x2b8>
 8001ea0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ea4:	4807      	ldr	r0, [pc, #28]	; (8001ec4 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8001ea6:	f001 fcd3 	bl	8003850 <HAL_GPIO_ReadPin>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d00f      	beq.n	8001ed0 <HAL_GPIO_EXTI_Callback+0x2b8>
    {
      keyPressed = 4; //ASCII value of 4
 8001eb0:	4b06      	ldr	r3, [pc, #24]	; (8001ecc <HAL_GPIO_EXTI_Callback+0x2b4>)
 8001eb2:	2204      	movs	r2, #4
 8001eb4:	701a      	strb	r2, [r3, #0]
 8001eb6:	e01a      	b.n	8001eee <HAL_GPIO_EXTI_Callback+0x2d6>
 8001eb8:	20000644 	.word	0x20000644
 8001ebc:	20000640 	.word	0x20000640
 8001ec0:	2000062c 	.word	0x2000062c
 8001ec4:	40020400 	.word	0x40020400
 8001ec8:	40020c00 	.word	0x40020c00
 8001ecc:	20000648 	.word	0x20000648
    }
    else if(GPIO_Pin == GPIO_PIN_9 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9))
 8001ed0:	88fb      	ldrh	r3, [r7, #6]
 8001ed2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ed6:	d10a      	bne.n	8001eee <HAL_GPIO_EXTI_Callback+0x2d6>
 8001ed8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001edc:	4819      	ldr	r0, [pc, #100]	; (8001f44 <HAL_GPIO_EXTI_Callback+0x32c>)
 8001ede:	f001 fcb7 	bl	8003850 <HAL_GPIO_ReadPin>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d002      	beq.n	8001eee <HAL_GPIO_EXTI_Callback+0x2d6>
    {
      keyPressed = 1; //ASCII value of 1
 8001ee8:	4b17      	ldr	r3, [pc, #92]	; (8001f48 <HAL_GPIO_EXTI_Callback+0x330>)
 8001eea:	2201      	movs	r2, #1
 8001eec:	701a      	strb	r2, [r3, #0]
    }
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, 1);
 8001eee:	2201      	movs	r2, #1
 8001ef0:	2110      	movs	r1, #16
 8001ef2:	4816      	ldr	r0, [pc, #88]	; (8001f4c <HAL_GPIO_EXTI_Callback+0x334>)
 8001ef4:	f001 fcc4 	bl	8003880 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, 1);
 8001ef8:	2201      	movs	r2, #1
 8001efa:	2120      	movs	r1, #32
 8001efc:	4813      	ldr	r0, [pc, #76]	; (8001f4c <HAL_GPIO_EXTI_Callback+0x334>)
 8001efe:	f001 fcbf 	bl	8003880 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, 1);
 8001f02:	2201      	movs	r2, #1
 8001f04:	2140      	movs	r1, #64	; 0x40
 8001f06:	4811      	ldr	r0, [pc, #68]	; (8001f4c <HAL_GPIO_EXTI_Callback+0x334>)
 8001f08:	f001 fcba 	bl	8003880 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, 1);
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	2180      	movs	r1, #128	; 0x80
 8001f10:	480e      	ldr	r0, [pc, #56]	; (8001f4c <HAL_GPIO_EXTI_Callback+0x334>)
 8001f12:	f001 fcb5 	bl	8003880 <HAL_GPIO_WritePin>
    /*Configure GPIO pins : PB6 PB7 PB8 PB9 back to EXTI*/
    GPIO_InitStructPrivate.Mode = GPIO_MODE_IT_RISING;
 8001f16:	4b0e      	ldr	r3, [pc, #56]	; (8001f50 <HAL_GPIO_EXTI_Callback+0x338>)
 8001f18:	f44f 1288 	mov.w	r2, #1114112	; 0x110000
 8001f1c:	605a      	str	r2, [r3, #4]
    GPIO_InitStructPrivate.Pull = GPIO_PULLDOWN;
 8001f1e:	4b0c      	ldr	r3, [pc, #48]	; (8001f50 <HAL_GPIO_EXTI_Callback+0x338>)
 8001f20:	2202      	movs	r2, #2
 8001f22:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructPrivate);
 8001f24:	490a      	ldr	r1, [pc, #40]	; (8001f50 <HAL_GPIO_EXTI_Callback+0x338>)
 8001f26:	4807      	ldr	r0, [pc, #28]	; (8001f44 <HAL_GPIO_EXTI_Callback+0x32c>)
 8001f28:	f001 faf6 	bl	8003518 <HAL_GPIO_Init>
    //printf("nilai key pad %d\r\n", keyPressed);
    previousMillis = currentMillis;
 8001f2c:	4b09      	ldr	r3, [pc, #36]	; (8001f54 <HAL_GPIO_EXTI_Callback+0x33c>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a09      	ldr	r2, [pc, #36]	; (8001f58 <HAL_GPIO_EXTI_Callback+0x340>)
 8001f32:	6013      	str	r3, [r2, #0]
    key_kondisi = true;
 8001f34:	4b09      	ldr	r3, [pc, #36]	; (8001f5c <HAL_GPIO_EXTI_Callback+0x344>)
 8001f36:	2201      	movs	r2, #1
 8001f38:	701a      	strb	r2, [r3, #0]
  }
}
 8001f3a:	bf00      	nop
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	40020400 	.word	0x40020400
 8001f48:	20000648 	.word	0x20000648
 8001f4c:	40020c00 	.word	0x40020c00
 8001f50:	2000062c 	.word	0x2000062c
 8001f54:	20000644 	.word	0x20000644
 8001f58:	20000640 	.word	0x20000640
 8001f5c:	20000651 	.word	0x20000651

08001f60 <get_keypad>:
/**Fungsi ini digunakan untuk mendapatkan karakter dari nilai keypad yangdigunakan
  */
void get_keypad(uint8_t keypadin){
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	4603      	mov	r3, r0
 8001f68:	71fb      	strb	r3, [r7, #7]
	if(key_kondisi == true){
 8001f6a:	4b97      	ldr	r3, [pc, #604]	; (80021c8 <get_keypad+0x268>)
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	f000 8126 	beq.w	80021c0 <get_keypad+0x260>
		if(keypadin != keyPressed_prev || counter >= 5){
 8001f74:	4b95      	ldr	r3, [pc, #596]	; (80021cc <get_keypad+0x26c>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	79fa      	ldrb	r2, [r7, #7]
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d103      	bne.n	8001f86 <get_keypad+0x26>
 8001f7e:	4b94      	ldr	r3, [pc, #592]	; (80021d0 <get_keypad+0x270>)
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	2b04      	cmp	r3, #4
 8001f84:	d902      	bls.n	8001f8c <get_keypad+0x2c>
	  	  counter = 0;
 8001f86:	4b92      	ldr	r3, [pc, #584]	; (80021d0 <get_keypad+0x270>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	701a      	strb	r2, [r3, #0]
	    }
		if(keypadin == 1){
 8001f8c:	79fb      	ldrb	r3, [r7, #7]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d114      	bne.n	8001fbc <get_keypad+0x5c>
			counter ++;
 8001f92:	4b8f      	ldr	r3, [pc, #572]	; (80021d0 <get_keypad+0x270>)
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	3301      	adds	r3, #1
 8001f98:	b2da      	uxtb	r2, r3
 8001f9a:	4b8d      	ldr	r3, [pc, #564]	; (80021d0 <get_keypad+0x270>)
 8001f9c:	701a      	strb	r2, [r3, #0]
			strcpy((uint8_t*)key, " 1abc");
 8001f9e:	4b8d      	ldr	r3, [pc, #564]	; (80021d4 <get_keypad+0x274>)
 8001fa0:	4a8d      	ldr	r2, [pc, #564]	; (80021d8 <get_keypad+0x278>)
 8001fa2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001fa6:	6018      	str	r0, [r3, #0]
 8001fa8:	3304      	adds	r3, #4
 8001faa:	8019      	strh	r1, [r3, #0]
		     keypad = key[counter];
 8001fac:	4b88      	ldr	r3, [pc, #544]	; (80021d0 <get_keypad+0x270>)
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	4b88      	ldr	r3, [pc, #544]	; (80021d4 <get_keypad+0x274>)
 8001fb4:	5c9a      	ldrb	r2, [r3, r2]
 8001fb6:	4b89      	ldr	r3, [pc, #548]	; (80021dc <get_keypad+0x27c>)
 8001fb8:	701a      	strb	r2, [r3, #0]
 8001fba:	e0f1      	b.n	80021a0 <get_keypad+0x240>
		}else if(keypadin == 2){
 8001fbc:	79fb      	ldrb	r3, [r7, #7]
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d114      	bne.n	8001fec <get_keypad+0x8c>
			counter ++;
 8001fc2:	4b83      	ldr	r3, [pc, #524]	; (80021d0 <get_keypad+0x270>)
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	b2da      	uxtb	r2, r3
 8001fca:	4b81      	ldr	r3, [pc, #516]	; (80021d0 <get_keypad+0x270>)
 8001fcc:	701a      	strb	r2, [r3, #0]
			strcpy((uint8_t*)key, " 2def");
 8001fce:	4b81      	ldr	r3, [pc, #516]	; (80021d4 <get_keypad+0x274>)
 8001fd0:	4a83      	ldr	r2, [pc, #524]	; (80021e0 <get_keypad+0x280>)
 8001fd2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001fd6:	6018      	str	r0, [r3, #0]
 8001fd8:	3304      	adds	r3, #4
 8001fda:	8019      	strh	r1, [r3, #0]
		     keypad = key[counter];
 8001fdc:	4b7c      	ldr	r3, [pc, #496]	; (80021d0 <get_keypad+0x270>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	4b7c      	ldr	r3, [pc, #496]	; (80021d4 <get_keypad+0x274>)
 8001fe4:	5c9a      	ldrb	r2, [r3, r2]
 8001fe6:	4b7d      	ldr	r3, [pc, #500]	; (80021dc <get_keypad+0x27c>)
 8001fe8:	701a      	strb	r2, [r3, #0]
 8001fea:	e0d9      	b.n	80021a0 <get_keypad+0x240>
		}else if(keypadin == 3){
 8001fec:	79fb      	ldrb	r3, [r7, #7]
 8001fee:	2b03      	cmp	r3, #3
 8001ff0:	d114      	bne.n	800201c <get_keypad+0xbc>
			counter ++;
 8001ff2:	4b77      	ldr	r3, [pc, #476]	; (80021d0 <get_keypad+0x270>)
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	b2da      	uxtb	r2, r3
 8001ffa:	4b75      	ldr	r3, [pc, #468]	; (80021d0 <get_keypad+0x270>)
 8001ffc:	701a      	strb	r2, [r3, #0]
			strcpy((uint8_t*)key, " 3ghi");
 8001ffe:	4b75      	ldr	r3, [pc, #468]	; (80021d4 <get_keypad+0x274>)
 8002000:	4a78      	ldr	r2, [pc, #480]	; (80021e4 <get_keypad+0x284>)
 8002002:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002006:	6018      	str	r0, [r3, #0]
 8002008:	3304      	adds	r3, #4
 800200a:	8019      	strh	r1, [r3, #0]
		     keypad = key[counter];
 800200c:	4b70      	ldr	r3, [pc, #448]	; (80021d0 <get_keypad+0x270>)
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	461a      	mov	r2, r3
 8002012:	4b70      	ldr	r3, [pc, #448]	; (80021d4 <get_keypad+0x274>)
 8002014:	5c9a      	ldrb	r2, [r3, r2]
 8002016:	4b71      	ldr	r3, [pc, #452]	; (80021dc <get_keypad+0x27c>)
 8002018:	701a      	strb	r2, [r3, #0]
 800201a:	e0c1      	b.n	80021a0 <get_keypad+0x240>
		}else if(keypadin == 4){
 800201c:	79fb      	ldrb	r3, [r7, #7]
 800201e:	2b04      	cmp	r3, #4
 8002020:	d114      	bne.n	800204c <get_keypad+0xec>
			counter ++;
 8002022:	4b6b      	ldr	r3, [pc, #428]	; (80021d0 <get_keypad+0x270>)
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	3301      	adds	r3, #1
 8002028:	b2da      	uxtb	r2, r3
 800202a:	4b69      	ldr	r3, [pc, #420]	; (80021d0 <get_keypad+0x270>)
 800202c:	701a      	strb	r2, [r3, #0]
			strcpy((uint8_t*)key, " 4jkl");
 800202e:	4b69      	ldr	r3, [pc, #420]	; (80021d4 <get_keypad+0x274>)
 8002030:	4a6d      	ldr	r2, [pc, #436]	; (80021e8 <get_keypad+0x288>)
 8002032:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002036:	6018      	str	r0, [r3, #0]
 8002038:	3304      	adds	r3, #4
 800203a:	8019      	strh	r1, [r3, #0]
		     keypad = key[counter];
 800203c:	4b64      	ldr	r3, [pc, #400]	; (80021d0 <get_keypad+0x270>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	461a      	mov	r2, r3
 8002042:	4b64      	ldr	r3, [pc, #400]	; (80021d4 <get_keypad+0x274>)
 8002044:	5c9a      	ldrb	r2, [r3, r2]
 8002046:	4b65      	ldr	r3, [pc, #404]	; (80021dc <get_keypad+0x27c>)
 8002048:	701a      	strb	r2, [r3, #0]
 800204a:	e0a9      	b.n	80021a0 <get_keypad+0x240>
		}else if(keypadin == 5){
 800204c:	79fb      	ldrb	r3, [r7, #7]
 800204e:	2b05      	cmp	r3, #5
 8002050:	d114      	bne.n	800207c <get_keypad+0x11c>
			counter ++;
 8002052:	4b5f      	ldr	r3, [pc, #380]	; (80021d0 <get_keypad+0x270>)
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	3301      	adds	r3, #1
 8002058:	b2da      	uxtb	r2, r3
 800205a:	4b5d      	ldr	r3, [pc, #372]	; (80021d0 <get_keypad+0x270>)
 800205c:	701a      	strb	r2, [r3, #0]
			strcpy((uint8_t*)key, " 5mno");
 800205e:	4b5d      	ldr	r3, [pc, #372]	; (80021d4 <get_keypad+0x274>)
 8002060:	4a62      	ldr	r2, [pc, #392]	; (80021ec <get_keypad+0x28c>)
 8002062:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002066:	6018      	str	r0, [r3, #0]
 8002068:	3304      	adds	r3, #4
 800206a:	8019      	strh	r1, [r3, #0]
		     keypad = key[counter];
 800206c:	4b58      	ldr	r3, [pc, #352]	; (80021d0 <get_keypad+0x270>)
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	461a      	mov	r2, r3
 8002072:	4b58      	ldr	r3, [pc, #352]	; (80021d4 <get_keypad+0x274>)
 8002074:	5c9a      	ldrb	r2, [r3, r2]
 8002076:	4b59      	ldr	r3, [pc, #356]	; (80021dc <get_keypad+0x27c>)
 8002078:	701a      	strb	r2, [r3, #0]
 800207a:	e091      	b.n	80021a0 <get_keypad+0x240>
		}else if(keypadin == 6){
 800207c:	79fb      	ldrb	r3, [r7, #7]
 800207e:	2b06      	cmp	r3, #6
 8002080:	d114      	bne.n	80020ac <get_keypad+0x14c>
			counter ++;
 8002082:	4b53      	ldr	r3, [pc, #332]	; (80021d0 <get_keypad+0x270>)
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	3301      	adds	r3, #1
 8002088:	b2da      	uxtb	r2, r3
 800208a:	4b51      	ldr	r3, [pc, #324]	; (80021d0 <get_keypad+0x270>)
 800208c:	701a      	strb	r2, [r3, #0]
			strcpy((uint8_t*)key, " 6pqr");
 800208e:	4b51      	ldr	r3, [pc, #324]	; (80021d4 <get_keypad+0x274>)
 8002090:	4a57      	ldr	r2, [pc, #348]	; (80021f0 <get_keypad+0x290>)
 8002092:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002096:	6018      	str	r0, [r3, #0]
 8002098:	3304      	adds	r3, #4
 800209a:	8019      	strh	r1, [r3, #0]
		     keypad = key[counter];
 800209c:	4b4c      	ldr	r3, [pc, #304]	; (80021d0 <get_keypad+0x270>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	461a      	mov	r2, r3
 80020a2:	4b4c      	ldr	r3, [pc, #304]	; (80021d4 <get_keypad+0x274>)
 80020a4:	5c9a      	ldrb	r2, [r3, r2]
 80020a6:	4b4d      	ldr	r3, [pc, #308]	; (80021dc <get_keypad+0x27c>)
 80020a8:	701a      	strb	r2, [r3, #0]
 80020aa:	e079      	b.n	80021a0 <get_keypad+0x240>
		}else if(keypadin == 7){
 80020ac:	79fb      	ldrb	r3, [r7, #7]
 80020ae:	2b07      	cmp	r3, #7
 80020b0:	d114      	bne.n	80020dc <get_keypad+0x17c>
			counter ++;
 80020b2:	4b47      	ldr	r3, [pc, #284]	; (80021d0 <get_keypad+0x270>)
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	3301      	adds	r3, #1
 80020b8:	b2da      	uxtb	r2, r3
 80020ba:	4b45      	ldr	r3, [pc, #276]	; (80021d0 <get_keypad+0x270>)
 80020bc:	701a      	strb	r2, [r3, #0]
			strcpy((uint8_t*)key, " 7stu");
 80020be:	4b45      	ldr	r3, [pc, #276]	; (80021d4 <get_keypad+0x274>)
 80020c0:	4a4c      	ldr	r2, [pc, #304]	; (80021f4 <get_keypad+0x294>)
 80020c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80020c6:	6018      	str	r0, [r3, #0]
 80020c8:	3304      	adds	r3, #4
 80020ca:	8019      	strh	r1, [r3, #0]
		     keypad = key[counter];
 80020cc:	4b40      	ldr	r3, [pc, #256]	; (80021d0 <get_keypad+0x270>)
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	461a      	mov	r2, r3
 80020d2:	4b40      	ldr	r3, [pc, #256]	; (80021d4 <get_keypad+0x274>)
 80020d4:	5c9a      	ldrb	r2, [r3, r2]
 80020d6:	4b41      	ldr	r3, [pc, #260]	; (80021dc <get_keypad+0x27c>)
 80020d8:	701a      	strb	r2, [r3, #0]
 80020da:	e061      	b.n	80021a0 <get_keypad+0x240>
		}else if(keypadin == 8){
 80020dc:	79fb      	ldrb	r3, [r7, #7]
 80020de:	2b08      	cmp	r3, #8
 80020e0:	d114      	bne.n	800210c <get_keypad+0x1ac>
			counter ++;
 80020e2:	4b3b      	ldr	r3, [pc, #236]	; (80021d0 <get_keypad+0x270>)
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	3301      	adds	r3, #1
 80020e8:	b2da      	uxtb	r2, r3
 80020ea:	4b39      	ldr	r3, [pc, #228]	; (80021d0 <get_keypad+0x270>)
 80020ec:	701a      	strb	r2, [r3, #0]
			strcpy((uint8_t*)key, " 8vwx");
 80020ee:	4b39      	ldr	r3, [pc, #228]	; (80021d4 <get_keypad+0x274>)
 80020f0:	4a41      	ldr	r2, [pc, #260]	; (80021f8 <get_keypad+0x298>)
 80020f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80020f6:	6018      	str	r0, [r3, #0]
 80020f8:	3304      	adds	r3, #4
 80020fa:	8019      	strh	r1, [r3, #0]
		     keypad = key[counter];
 80020fc:	4b34      	ldr	r3, [pc, #208]	; (80021d0 <get_keypad+0x270>)
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	461a      	mov	r2, r3
 8002102:	4b34      	ldr	r3, [pc, #208]	; (80021d4 <get_keypad+0x274>)
 8002104:	5c9a      	ldrb	r2, [r3, r2]
 8002106:	4b35      	ldr	r3, [pc, #212]	; (80021dc <get_keypad+0x27c>)
 8002108:	701a      	strb	r2, [r3, #0]
 800210a:	e049      	b.n	80021a0 <get_keypad+0x240>
		}else if(keypadin == 9){
 800210c:	79fb      	ldrb	r3, [r7, #7]
 800210e:	2b09      	cmp	r3, #9
 8002110:	d114      	bne.n	800213c <get_keypad+0x1dc>
			counter ++;
 8002112:	4b2f      	ldr	r3, [pc, #188]	; (80021d0 <get_keypad+0x270>)
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	3301      	adds	r3, #1
 8002118:	b2da      	uxtb	r2, r3
 800211a:	4b2d      	ldr	r3, [pc, #180]	; (80021d0 <get_keypad+0x270>)
 800211c:	701a      	strb	r2, [r3, #0]
			strcpy((uint8_t*)key, " 4yz");
 800211e:	4b2d      	ldr	r3, [pc, #180]	; (80021d4 <get_keypad+0x274>)
 8002120:	4a36      	ldr	r2, [pc, #216]	; (80021fc <get_keypad+0x29c>)
 8002122:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002126:	6018      	str	r0, [r3, #0]
 8002128:	3304      	adds	r3, #4
 800212a:	7019      	strb	r1, [r3, #0]
		     keypad = key[counter];
 800212c:	4b28      	ldr	r3, [pc, #160]	; (80021d0 <get_keypad+0x270>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	461a      	mov	r2, r3
 8002132:	4b28      	ldr	r3, [pc, #160]	; (80021d4 <get_keypad+0x274>)
 8002134:	5c9a      	ldrb	r2, [r3, r2]
 8002136:	4b29      	ldr	r3, [pc, #164]	; (80021dc <get_keypad+0x27c>)
 8002138:	701a      	strb	r2, [r3, #0]
 800213a:	e031      	b.n	80021a0 <get_keypad+0x240>
		}else if(keypadin == 11){
 800213c:	79fb      	ldrb	r3, [r7, #7]
 800213e:	2b0b      	cmp	r3, #11
 8002140:	d10d      	bne.n	800215e <get_keypad+0x1fe>
			counter = 0;
 8002142:	4b23      	ldr	r3, [pc, #140]	; (80021d0 <get_keypad+0x270>)
 8002144:	2200      	movs	r2, #0
 8002146:	701a      	strb	r2, [r3, #0]
			strcpy((uint8_t*)key, "D"); //delete
 8002148:	4b22      	ldr	r3, [pc, #136]	; (80021d4 <get_keypad+0x274>)
 800214a:	2244      	movs	r2, #68	; 0x44
 800214c:	801a      	strh	r2, [r3, #0]
		     keypad = key[counter];
 800214e:	4b20      	ldr	r3, [pc, #128]	; (80021d0 <get_keypad+0x270>)
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	461a      	mov	r2, r3
 8002154:	4b1f      	ldr	r3, [pc, #124]	; (80021d4 <get_keypad+0x274>)
 8002156:	5c9a      	ldrb	r2, [r3, r2]
 8002158:	4b20      	ldr	r3, [pc, #128]	; (80021dc <get_keypad+0x27c>)
 800215a:	701a      	strb	r2, [r3, #0]
 800215c:	e020      	b.n	80021a0 <get_keypad+0x240>
		}else if(keypadin == 12){
 800215e:	79fb      	ldrb	r3, [r7, #7]
 8002160:	2b0c      	cmp	r3, #12
 8002162:	d10d      	bne.n	8002180 <get_keypad+0x220>
			counter = 0;
 8002164:	4b1a      	ldr	r3, [pc, #104]	; (80021d0 <get_keypad+0x270>)
 8002166:	2200      	movs	r2, #0
 8002168:	701a      	strb	r2, [r3, #0]
			strcpy((uint8_t*)key, "O"); //oke / KIRIM
 800216a:	4b1a      	ldr	r3, [pc, #104]	; (80021d4 <get_keypad+0x274>)
 800216c:	224f      	movs	r2, #79	; 0x4f
 800216e:	801a      	strh	r2, [r3, #0]
		     keypad = key[counter];
 8002170:	4b17      	ldr	r3, [pc, #92]	; (80021d0 <get_keypad+0x270>)
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	461a      	mov	r2, r3
 8002176:	4b17      	ldr	r3, [pc, #92]	; (80021d4 <get_keypad+0x274>)
 8002178:	5c9a      	ldrb	r2, [r3, r2]
 800217a:	4b18      	ldr	r3, [pc, #96]	; (80021dc <get_keypad+0x27c>)
 800217c:	701a      	strb	r2, [r3, #0]
 800217e:	e00f      	b.n	80021a0 <get_keypad+0x240>
		}else if(keypadin == 13){
 8002180:	79fb      	ldrb	r3, [r7, #7]
 8002182:	2b0d      	cmp	r3, #13
 8002184:	d10c      	bne.n	80021a0 <get_keypad+0x240>
			counter = 0;
 8002186:	4b12      	ldr	r3, [pc, #72]	; (80021d0 <get_keypad+0x270>)
 8002188:	2200      	movs	r2, #0
 800218a:	701a      	strb	r2, [r3, #0]
			strcpy((uint8_t*)key, " "); //spasi
 800218c:	4b11      	ldr	r3, [pc, #68]	; (80021d4 <get_keypad+0x274>)
 800218e:	2220      	movs	r2, #32
 8002190:	801a      	strh	r2, [r3, #0]
		     keypad = key[counter];
 8002192:	4b0f      	ldr	r3, [pc, #60]	; (80021d0 <get_keypad+0x270>)
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	461a      	mov	r2, r3
 8002198:	4b0e      	ldr	r3, [pc, #56]	; (80021d4 <get_keypad+0x274>)
 800219a:	5c9a      	ldrb	r2, [r3, r2]
 800219c:	4b0f      	ldr	r3, [pc, #60]	; (80021dc <get_keypad+0x27c>)
 800219e:	701a      	strb	r2, [r3, #0]
		}
		printf("key %c\r\n", keypad);
 80021a0:	4b0e      	ldr	r3, [pc, #56]	; (80021dc <get_keypad+0x27c>)
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	4619      	mov	r1, r3
 80021a6:	4816      	ldr	r0, [pc, #88]	; (8002200 <get_keypad+0x2a0>)
 80021a8:	f005 fd10 	bl	8007bcc <iprintf>
		keyPressed_prev = keypadin;
 80021ac:	4a07      	ldr	r2, [pc, #28]	; (80021cc <get_keypad+0x26c>)
 80021ae:	79fb      	ldrb	r3, [r7, #7]
 80021b0:	7013      	strb	r3, [r2, #0]
		key_kondisi = false;
 80021b2:	4b05      	ldr	r3, [pc, #20]	; (80021c8 <get_keypad+0x268>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	701a      	strb	r2, [r3, #0]
		led_reaction(100,100);
 80021b8:	2164      	movs	r1, #100	; 0x64
 80021ba:	2064      	movs	r0, #100	; 0x64
 80021bc:	f000 f822 	bl	8002204 <led_reaction>
	  }
}
 80021c0:	bf00      	nop
 80021c2:	3708      	adds	r7, #8
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	20000651 	.word	0x20000651
 80021cc:	20000649 	.word	0x20000649
 80021d0:	2000064a 	.word	0x2000064a
 80021d4:	2000064c 	.word	0x2000064c
 80021d8:	0800b944 	.word	0x0800b944
 80021dc:	2000064b 	.word	0x2000064b
 80021e0:	0800b94c 	.word	0x0800b94c
 80021e4:	0800b954 	.word	0x0800b954
 80021e8:	0800b95c 	.word	0x0800b95c
 80021ec:	0800b964 	.word	0x0800b964
 80021f0:	0800b96c 	.word	0x0800b96c
 80021f4:	0800b974 	.word	0x0800b974
 80021f8:	0800b97c 	.word	0x0800b97c
 80021fc:	0800b984 	.word	0x0800b984
 8002200:	0800b98c 	.word	0x0800b98c

08002204 <led_reaction>:
/**Fungsi ini LED Blink untuk indikasi
  */
void led_reaction(uint16_t led_time, uint16_t time_loop){
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	4603      	mov	r3, r0
 800220c:	460a      	mov	r2, r1
 800220e:	80fb      	strh	r3, [r7, #6]
 8002210:	4613      	mov	r3, r2
 8002212:	80bb      	strh	r3, [r7, #4]
	led_loop_on = HAL_GetTick();
 8002214:	f000 fc3c 	bl	8002a90 <HAL_GetTick>
 8002218:	4603      	mov	r3, r0
 800221a:	4a29      	ldr	r2, [pc, #164]	; (80022c0 <led_reaction+0xbc>)
 800221c:	6013      	str	r3, [r2, #0]
	while ((unsigned long)HAL_GetTick() - led_loop_on <= time_loop){
 800221e:	e041      	b.n	80022a4 <led_reaction+0xa0>
		if (HAL_GetTick() - led_prev_on >= led_time){
 8002220:	f000 fc36 	bl	8002a90 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	4b27      	ldr	r3, [pc, #156]	; (80022c4 <led_reaction+0xc0>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	1ad2      	subs	r2, r2, r3
 800222c:	88fb      	ldrh	r3, [r7, #6]
 800222e:	429a      	cmp	r2, r3
 8002230:	d338      	bcc.n	80022a4 <led_reaction+0xa0>
			led_prev_on = HAL_GetTick();
 8002232:	f000 fc2d 	bl	8002a90 <HAL_GetTick>
 8002236:	4603      	mov	r3, r0
 8002238:	4a22      	ldr	r2, [pc, #136]	; (80022c4 <led_reaction+0xc0>)
 800223a:	6013      	str	r3, [r2, #0]
			if (led_hijau_kuning == 0){
 800223c:	4b22      	ldr	r3, [pc, #136]	; (80022c8 <led_reaction+0xc4>)
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	f083 0301 	eor.w	r3, r3, #1
 8002244:	b2db      	uxtb	r3, r3
 8002246:	2b00      	cmp	r3, #0
 8002248:	d003      	beq.n	8002252 <led_reaction+0x4e>
				led_hijau_kuning = 1;
 800224a:	4b1f      	ldr	r3, [pc, #124]	; (80022c8 <led_reaction+0xc4>)
 800224c:	2201      	movs	r2, #1
 800224e:	701a      	strb	r2, [r3, #0]
 8002250:	e002      	b.n	8002258 <led_reaction+0x54>
			} else {
				led_hijau_kuning = 0;
 8002252:	4b1d      	ldr	r3, [pc, #116]	; (80022c8 <led_reaction+0xc4>)
 8002254:	2200      	movs	r2, #0
 8002256:	701a      	strb	r2, [r3, #0]
			}
			if (led_merah == 0){
 8002258:	4b1c      	ldr	r3, [pc, #112]	; (80022cc <led_reaction+0xc8>)
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	f083 0301 	eor.w	r3, r3, #1
 8002260:	b2db      	uxtb	r3, r3
 8002262:	2b00      	cmp	r3, #0
 8002264:	d003      	beq.n	800226e <led_reaction+0x6a>
				led_merah = 1;
 8002266:	4b19      	ldr	r3, [pc, #100]	; (80022cc <led_reaction+0xc8>)
 8002268:	2201      	movs	r2, #1
 800226a:	701a      	strb	r2, [r3, #0]
 800226c:	e002      	b.n	8002274 <led_reaction+0x70>
			} else {
				led_merah = 0;
 800226e:	4b17      	ldr	r3, [pc, #92]	; (80022cc <led_reaction+0xc8>)
 8002270:	2200      	movs	r2, #0
 8002272:	701a      	strb	r2, [r3, #0]
			}
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, led_hijau_kuning);
 8002274:	4b14      	ldr	r3, [pc, #80]	; (80022c8 <led_reaction+0xc4>)
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	461a      	mov	r2, r3
 800227a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800227e:	4814      	ldr	r0, [pc, #80]	; (80022d0 <led_reaction+0xcc>)
 8002280:	f001 fafe 	bl	8003880 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, led_merah);
 8002284:	4b11      	ldr	r3, [pc, #68]	; (80022cc <led_reaction+0xc8>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	461a      	mov	r2, r3
 800228a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800228e:	4810      	ldr	r0, [pc, #64]	; (80022d0 <led_reaction+0xcc>)
 8002290:	f001 faf6 	bl	8003880 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, led_hijau_kuning);
 8002294:	4b0c      	ldr	r3, [pc, #48]	; (80022c8 <led_reaction+0xc4>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	461a      	mov	r2, r3
 800229a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800229e:	480c      	ldr	r0, [pc, #48]	; (80022d0 <led_reaction+0xcc>)
 80022a0:	f001 faee 	bl	8003880 <HAL_GPIO_WritePin>
	while ((unsigned long)HAL_GetTick() - led_loop_on <= time_loop){
 80022a4:	f000 fbf4 	bl	8002a90 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	4b05      	ldr	r3, [pc, #20]	; (80022c0 <led_reaction+0xbc>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	1ad2      	subs	r2, r2, r3
 80022b0:	88bb      	ldrh	r3, [r7, #4]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d9b4      	bls.n	8002220 <led_reaction+0x1c>
		}
	}
}
 80022b6:	bf00      	nop
 80022b8:	bf00      	nop
 80022ba:	3708      	adds	r7, #8
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	20000618 	.word	0x20000618
 80022c4:	20000614 	.word	0x20000614
 80022c8:	20000000 	.word	0x20000000
 80022cc:	20000652 	.word	0x20000652
 80022d0:	40021000 	.word	0x40021000

080022d4 <get_gps>:
/**Fungsi ini untuk memparsing data GPS yaitu latitude longitude digunakan untuk melihat lokaasi alat
  */
void get_gps(char *data_gps){
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
	if (usart_3_state == true){
 80022dc:	4b07      	ldr	r3, [pc, #28]	; (80022fc <get_gps+0x28>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d006      	beq.n	80022f2 <get_gps+0x1e>
		printf("%s", data_gps);
 80022e4:	6879      	ldr	r1, [r7, #4]
 80022e6:	4806      	ldr	r0, [pc, #24]	; (8002300 <get_gps+0x2c>)
 80022e8:	f005 fc70 	bl	8007bcc <iprintf>
				  break;
			  }
			  pointer = strchr(pointer + 4, '$');
		  }
		  while(pointer != NULL);*/
		  usart_3_state = false;
 80022ec:	4b03      	ldr	r3, [pc, #12]	; (80022fc <get_gps+0x28>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	701a      	strb	r2, [r3, #0]
	  }
}
 80022f2:	bf00      	nop
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	20000600 	.word	0x20000600
 8002300:	0800b940 	.word	0x0800b940

08002304 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002308:	b672      	cpsid	i
}
 800230a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800230c:	e7fe      	b.n	800230c <Error_Handler+0x8>
	...

08002310 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8002318:	4a07      	ldr	r2, [pc, #28]	; (8002338 <RetargetInit+0x28>)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 800231e:	4b07      	ldr	r3, [pc, #28]	; (800233c <RetargetInit+0x2c>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	6898      	ldr	r0, [r3, #8]
 8002324:	2300      	movs	r3, #0
 8002326:	2202      	movs	r2, #2
 8002328:	2100      	movs	r1, #0
 800232a:	f005 fc67 	bl	8007bfc <setvbuf>
}
 800232e:	bf00      	nop
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	20002d8c 	.word	0x20002d8c
 800233c:	20000010 	.word	0x20000010

08002340 <_isatty>:

int _isatty(int fd) {
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2b00      	cmp	r3, #0
 800234c:	db04      	blt.n	8002358 <_isatty+0x18>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2b02      	cmp	r3, #2
 8002352:	dc01      	bgt.n	8002358 <_isatty+0x18>
    return 1;
 8002354:	2301      	movs	r3, #1
 8002356:	e005      	b.n	8002364 <_isatty+0x24>

  errno = EBADF;
 8002358:	f004 fd7e 	bl	8006e58 <__errno>
 800235c:	4603      	mov	r3, r0
 800235e:	2209      	movs	r2, #9
 8002360:	601a      	str	r2, [r3, #0]
  return 0;
 8002362:	2300      	movs	r3, #0
}
 8002364:	4618      	mov	r0, r3
 8002366:	3708      	adds	r7, #8
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}

0800236c <_write>:

int _write(int fd, char* ptr, int len) {
 800236c:	b580      	push	{r7, lr}
 800236e:	b086      	sub	sp, #24
 8002370:	af00      	add	r7, sp, #0
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d002      	beq.n	8002384 <_write+0x18>
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2b02      	cmp	r3, #2
 8002382:	d111      	bne.n	80023a8 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8002384:	4b0e      	ldr	r3, [pc, #56]	; (80023c0 <_write+0x54>)
 8002386:	6818      	ldr	r0, [r3, #0]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	b29a      	uxth	r2, r3
 800238c:	f04f 33ff 	mov.w	r3, #4294967295
 8002390:	68b9      	ldr	r1, [r7, #8]
 8002392:	f003 fb88 	bl	8005aa6 <HAL_UART_Transmit>
 8002396:	4603      	mov	r3, r0
 8002398:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800239a:	7dfb      	ldrb	r3, [r7, #23]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d101      	bne.n	80023a4 <_write+0x38>
      return len;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	e008      	b.n	80023b6 <_write+0x4a>
    else
      return EIO;
 80023a4:	2305      	movs	r3, #5
 80023a6:	e006      	b.n	80023b6 <_write+0x4a>
  }
  errno = EBADF;
 80023a8:	f004 fd56 	bl	8006e58 <__errno>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2209      	movs	r2, #9
 80023b0:	601a      	str	r2, [r3, #0]
  return -1;
 80023b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3718      	adds	r7, #24
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	20002d8c 	.word	0x20002d8c

080023c4 <_close>:

int _close(int fd) {
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	db04      	blt.n	80023dc <_close+0x18>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	dc01      	bgt.n	80023dc <_close+0x18>
    return 0;
 80023d8:	2300      	movs	r3, #0
 80023da:	e006      	b.n	80023ea <_close+0x26>

  errno = EBADF;
 80023dc:	f004 fd3c 	bl	8006e58 <__errno>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2209      	movs	r2, #9
 80023e4:	601a      	str	r2, [r3, #0]
  return -1;
 80023e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3708      	adds	r7, #8
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 80023f2:	b580      	push	{r7, lr}
 80023f4:	b084      	sub	sp, #16
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	60f8      	str	r0, [r7, #12]
 80023fa:	60b9      	str	r1, [r7, #8]
 80023fc:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 80023fe:	f004 fd2b 	bl	8006e58 <__errno>
 8002402:	4603      	mov	r3, r0
 8002404:	2209      	movs	r2, #9
 8002406:	601a      	str	r2, [r3, #0]
  return -1;
 8002408:	f04f 33ff 	mov.w	r3, #4294967295
}
 800240c:	4618      	mov	r0, r3
 800240e:	3710      	adds	r7, #16
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <_read>:

int _read(int fd, char* ptr, int len) {
 8002414:	b580      	push	{r7, lr}
 8002416:	b086      	sub	sp, #24
 8002418:	af00      	add	r7, sp, #0
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	60b9      	str	r1, [r7, #8]
 800241e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d110      	bne.n	8002448 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8002426:	4b0e      	ldr	r3, [pc, #56]	; (8002460 <_read+0x4c>)
 8002428:	6818      	ldr	r0, [r3, #0]
 800242a:	f04f 33ff 	mov.w	r3, #4294967295
 800242e:	2201      	movs	r2, #1
 8002430:	68b9      	ldr	r1, [r7, #8]
 8002432:	f003 fbca 	bl	8005bca <HAL_UART_Receive>
 8002436:	4603      	mov	r3, r0
 8002438:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800243a:	7dfb      	ldrb	r3, [r7, #23]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d101      	bne.n	8002444 <_read+0x30>
      return 1;
 8002440:	2301      	movs	r3, #1
 8002442:	e008      	b.n	8002456 <_read+0x42>
    else
      return EIO;
 8002444:	2305      	movs	r3, #5
 8002446:	e006      	b.n	8002456 <_read+0x42>
  }
  errno = EBADF;
 8002448:	f004 fd06 	bl	8006e58 <__errno>
 800244c:	4603      	mov	r3, r0
 800244e:	2209      	movs	r2, #9
 8002450:	601a      	str	r2, [r3, #0]
  return -1;
 8002452:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002456:	4618      	mov	r0, r3
 8002458:	3718      	adds	r7, #24
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	20002d8c 	.word	0x20002d8c

08002464 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2b00      	cmp	r3, #0
 8002472:	db08      	blt.n	8002486 <_fstat+0x22>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2b02      	cmp	r3, #2
 8002478:	dc05      	bgt.n	8002486 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002480:	605a      	str	r2, [r3, #4]
    return 0;
 8002482:	2300      	movs	r3, #0
 8002484:	e005      	b.n	8002492 <_fstat+0x2e>
  }

  errno = EBADF;
 8002486:	f004 fce7 	bl	8006e58 <__errno>
 800248a:	4603      	mov	r3, r0
 800248c:	2209      	movs	r2, #9
 800248e:	601a      	str	r2, [r3, #0]
  return 0;
 8002490:	2300      	movs	r3, #0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
	...

0800249c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024a2:	2300      	movs	r3, #0
 80024a4:	607b      	str	r3, [r7, #4]
 80024a6:	4b10      	ldr	r3, [pc, #64]	; (80024e8 <HAL_MspInit+0x4c>)
 80024a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024aa:	4a0f      	ldr	r2, [pc, #60]	; (80024e8 <HAL_MspInit+0x4c>)
 80024ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024b0:	6453      	str	r3, [r2, #68]	; 0x44
 80024b2:	4b0d      	ldr	r3, [pc, #52]	; (80024e8 <HAL_MspInit+0x4c>)
 80024b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024ba:	607b      	str	r3, [r7, #4]
 80024bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024be:	2300      	movs	r3, #0
 80024c0:	603b      	str	r3, [r7, #0]
 80024c2:	4b09      	ldr	r3, [pc, #36]	; (80024e8 <HAL_MspInit+0x4c>)
 80024c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c6:	4a08      	ldr	r2, [pc, #32]	; (80024e8 <HAL_MspInit+0x4c>)
 80024c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024cc:	6413      	str	r3, [r2, #64]	; 0x40
 80024ce:	4b06      	ldr	r3, [pc, #24]	; (80024e8 <HAL_MspInit+0x4c>)
 80024d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d6:	603b      	str	r3, [r7, #0]
 80024d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024da:	bf00      	nop
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	40023800 	.word	0x40023800

080024ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b08a      	sub	sp, #40	; 0x28
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024f4:	f107 0314 	add.w	r3, r7, #20
 80024f8:	2200      	movs	r2, #0
 80024fa:	601a      	str	r2, [r3, #0]
 80024fc:	605a      	str	r2, [r3, #4]
 80024fe:	609a      	str	r2, [r3, #8]
 8002500:	60da      	str	r2, [r3, #12]
 8002502:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a19      	ldr	r2, [pc, #100]	; (8002570 <HAL_I2C_MspInit+0x84>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d12b      	bne.n	8002566 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800250e:	2300      	movs	r3, #0
 8002510:	613b      	str	r3, [r7, #16]
 8002512:	4b18      	ldr	r3, [pc, #96]	; (8002574 <HAL_I2C_MspInit+0x88>)
 8002514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002516:	4a17      	ldr	r2, [pc, #92]	; (8002574 <HAL_I2C_MspInit+0x88>)
 8002518:	f043 0302 	orr.w	r3, r3, #2
 800251c:	6313      	str	r3, [r2, #48]	; 0x30
 800251e:	4b15      	ldr	r3, [pc, #84]	; (8002574 <HAL_I2C_MspInit+0x88>)
 8002520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	613b      	str	r3, [r7, #16]
 8002528:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800252a:	23c0      	movs	r3, #192	; 0xc0
 800252c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800252e:	2312      	movs	r3, #18
 8002530:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002532:	2301      	movs	r3, #1
 8002534:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002536:	2303      	movs	r3, #3
 8002538:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800253a:	2304      	movs	r3, #4
 800253c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800253e:	f107 0314 	add.w	r3, r7, #20
 8002542:	4619      	mov	r1, r3
 8002544:	480c      	ldr	r0, [pc, #48]	; (8002578 <HAL_I2C_MspInit+0x8c>)
 8002546:	f000 ffe7 	bl	8003518 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800254a:	2300      	movs	r3, #0
 800254c:	60fb      	str	r3, [r7, #12]
 800254e:	4b09      	ldr	r3, [pc, #36]	; (8002574 <HAL_I2C_MspInit+0x88>)
 8002550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002552:	4a08      	ldr	r2, [pc, #32]	; (8002574 <HAL_I2C_MspInit+0x88>)
 8002554:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002558:	6413      	str	r3, [r2, #64]	; 0x40
 800255a:	4b06      	ldr	r3, [pc, #24]	; (8002574 <HAL_I2C_MspInit+0x88>)
 800255c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002562:	60fb      	str	r3, [r7, #12]
 8002564:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002566:	bf00      	nop
 8002568:	3728      	adds	r7, #40	; 0x28
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	40005400 	.word	0x40005400
 8002574:	40023800 	.word	0x40023800
 8002578:	40020400 	.word	0x40020400

0800257c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a05      	ldr	r2, [pc, #20]	; (80025a0 <HAL_RTC_MspInit+0x24>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d102      	bne.n	8002594 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800258e:	4b05      	ldr	r3, [pc, #20]	; (80025a4 <HAL_RTC_MspInit+0x28>)
 8002590:	2201      	movs	r2, #1
 8002592:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002594:	bf00      	nop
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr
 80025a0:	40002800 	.word	0x40002800
 80025a4:	42470e3c 	.word	0x42470e3c

080025a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b08e      	sub	sp, #56	; 0x38
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025b4:	2200      	movs	r2, #0
 80025b6:	601a      	str	r2, [r3, #0]
 80025b8:	605a      	str	r2, [r3, #4]
 80025ba:	609a      	str	r2, [r3, #8]
 80025bc:	60da      	str	r2, [r3, #12]
 80025be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a86      	ldr	r2, [pc, #536]	; (80027e0 <HAL_UART_MspInit+0x238>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d135      	bne.n	8002636 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80025ca:	2300      	movs	r3, #0
 80025cc:	623b      	str	r3, [r7, #32]
 80025ce:	4b85      	ldr	r3, [pc, #532]	; (80027e4 <HAL_UART_MspInit+0x23c>)
 80025d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d2:	4a84      	ldr	r2, [pc, #528]	; (80027e4 <HAL_UART_MspInit+0x23c>)
 80025d4:	f043 0310 	orr.w	r3, r3, #16
 80025d8:	6453      	str	r3, [r2, #68]	; 0x44
 80025da:	4b82      	ldr	r3, [pc, #520]	; (80027e4 <HAL_UART_MspInit+0x23c>)
 80025dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025de:	f003 0310 	and.w	r3, r3, #16
 80025e2:	623b      	str	r3, [r7, #32]
 80025e4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025e6:	2300      	movs	r3, #0
 80025e8:	61fb      	str	r3, [r7, #28]
 80025ea:	4b7e      	ldr	r3, [pc, #504]	; (80027e4 <HAL_UART_MspInit+0x23c>)
 80025ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ee:	4a7d      	ldr	r2, [pc, #500]	; (80027e4 <HAL_UART_MspInit+0x23c>)
 80025f0:	f043 0301 	orr.w	r3, r3, #1
 80025f4:	6313      	str	r3, [r2, #48]	; 0x30
 80025f6:	4b7b      	ldr	r3, [pc, #492]	; (80027e4 <HAL_UART_MspInit+0x23c>)
 80025f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	61fb      	str	r3, [r7, #28]
 8002600:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002602:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002606:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002608:	2302      	movs	r3, #2
 800260a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260c:	2300      	movs	r3, #0
 800260e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002610:	2303      	movs	r3, #3
 8002612:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002614:	2307      	movs	r3, #7
 8002616:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002618:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800261c:	4619      	mov	r1, r3
 800261e:	4872      	ldr	r0, [pc, #456]	; (80027e8 <HAL_UART_MspInit+0x240>)
 8002620:	f000 ff7a 	bl	8003518 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002624:	2200      	movs	r2, #0
 8002626:	2100      	movs	r1, #0
 8002628:	2025      	movs	r0, #37	; 0x25
 800262a:	f000 fb3c 	bl	8002ca6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800262e:	2025      	movs	r0, #37	; 0x25
 8002630:	f000 fb55 	bl	8002cde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002634:	e0cf      	b.n	80027d6 <HAL_UART_MspInit+0x22e>
  else if(huart->Instance==USART2)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a6c      	ldr	r2, [pc, #432]	; (80027ec <HAL_UART_MspInit+0x244>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d162      	bne.n	8002706 <HAL_UART_MspInit+0x15e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002640:	2300      	movs	r3, #0
 8002642:	61bb      	str	r3, [r7, #24]
 8002644:	4b67      	ldr	r3, [pc, #412]	; (80027e4 <HAL_UART_MspInit+0x23c>)
 8002646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002648:	4a66      	ldr	r2, [pc, #408]	; (80027e4 <HAL_UART_MspInit+0x23c>)
 800264a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800264e:	6413      	str	r3, [r2, #64]	; 0x40
 8002650:	4b64      	ldr	r3, [pc, #400]	; (80027e4 <HAL_UART_MspInit+0x23c>)
 8002652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002654:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002658:	61bb      	str	r3, [r7, #24]
 800265a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800265c:	2300      	movs	r3, #0
 800265e:	617b      	str	r3, [r7, #20]
 8002660:	4b60      	ldr	r3, [pc, #384]	; (80027e4 <HAL_UART_MspInit+0x23c>)
 8002662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002664:	4a5f      	ldr	r2, [pc, #380]	; (80027e4 <HAL_UART_MspInit+0x23c>)
 8002666:	f043 0301 	orr.w	r3, r3, #1
 800266a:	6313      	str	r3, [r2, #48]	; 0x30
 800266c:	4b5d      	ldr	r3, [pc, #372]	; (80027e4 <HAL_UART_MspInit+0x23c>)
 800266e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002670:	f003 0301 	and.w	r3, r3, #1
 8002674:	617b      	str	r3, [r7, #20]
 8002676:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002678:	230c      	movs	r3, #12
 800267a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800267c:	2302      	movs	r3, #2
 800267e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002680:	2300      	movs	r3, #0
 8002682:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002684:	2303      	movs	r3, #3
 8002686:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002688:	2307      	movs	r3, #7
 800268a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800268c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002690:	4619      	mov	r1, r3
 8002692:	4855      	ldr	r0, [pc, #340]	; (80027e8 <HAL_UART_MspInit+0x240>)
 8002694:	f000 ff40 	bl	8003518 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002698:	4b55      	ldr	r3, [pc, #340]	; (80027f0 <HAL_UART_MspInit+0x248>)
 800269a:	4a56      	ldr	r2, [pc, #344]	; (80027f4 <HAL_UART_MspInit+0x24c>)
 800269c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800269e:	4b54      	ldr	r3, [pc, #336]	; (80027f0 <HAL_UART_MspInit+0x248>)
 80026a0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80026a4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026a6:	4b52      	ldr	r3, [pc, #328]	; (80027f0 <HAL_UART_MspInit+0x248>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026ac:	4b50      	ldr	r3, [pc, #320]	; (80027f0 <HAL_UART_MspInit+0x248>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80026b2:	4b4f      	ldr	r3, [pc, #316]	; (80027f0 <HAL_UART_MspInit+0x248>)
 80026b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026b8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026ba:	4b4d      	ldr	r3, [pc, #308]	; (80027f0 <HAL_UART_MspInit+0x248>)
 80026bc:	2200      	movs	r2, #0
 80026be:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026c0:	4b4b      	ldr	r3, [pc, #300]	; (80027f0 <HAL_UART_MspInit+0x248>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80026c6:	4b4a      	ldr	r3, [pc, #296]	; (80027f0 <HAL_UART_MspInit+0x248>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80026cc:	4b48      	ldr	r3, [pc, #288]	; (80027f0 <HAL_UART_MspInit+0x248>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026d2:	4b47      	ldr	r3, [pc, #284]	; (80027f0 <HAL_UART_MspInit+0x248>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80026d8:	4845      	ldr	r0, [pc, #276]	; (80027f0 <HAL_UART_MspInit+0x248>)
 80026da:	f000 fb1b 	bl	8002d14 <HAL_DMA_Init>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <HAL_UART_MspInit+0x140>
      Error_Handler();
 80026e4:	f7ff fe0e 	bl	8002304 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	4a41      	ldr	r2, [pc, #260]	; (80027f0 <HAL_UART_MspInit+0x248>)
 80026ec:	639a      	str	r2, [r3, #56]	; 0x38
 80026ee:	4a40      	ldr	r2, [pc, #256]	; (80027f0 <HAL_UART_MspInit+0x248>)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80026f4:	2200      	movs	r2, #0
 80026f6:	2100      	movs	r1, #0
 80026f8:	2026      	movs	r0, #38	; 0x26
 80026fa:	f000 fad4 	bl	8002ca6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80026fe:	2026      	movs	r0, #38	; 0x26
 8002700:	f000 faed 	bl	8002cde <HAL_NVIC_EnableIRQ>
}
 8002704:	e067      	b.n	80027d6 <HAL_UART_MspInit+0x22e>
  else if(huart->Instance==USART3)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a3b      	ldr	r2, [pc, #236]	; (80027f8 <HAL_UART_MspInit+0x250>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d162      	bne.n	80027d6 <HAL_UART_MspInit+0x22e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002710:	2300      	movs	r3, #0
 8002712:	613b      	str	r3, [r7, #16]
 8002714:	4b33      	ldr	r3, [pc, #204]	; (80027e4 <HAL_UART_MspInit+0x23c>)
 8002716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002718:	4a32      	ldr	r2, [pc, #200]	; (80027e4 <HAL_UART_MspInit+0x23c>)
 800271a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800271e:	6413      	str	r3, [r2, #64]	; 0x40
 8002720:	4b30      	ldr	r3, [pc, #192]	; (80027e4 <HAL_UART_MspInit+0x23c>)
 8002722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002724:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002728:	613b      	str	r3, [r7, #16]
 800272a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800272c:	2300      	movs	r3, #0
 800272e:	60fb      	str	r3, [r7, #12]
 8002730:	4b2c      	ldr	r3, [pc, #176]	; (80027e4 <HAL_UART_MspInit+0x23c>)
 8002732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002734:	4a2b      	ldr	r2, [pc, #172]	; (80027e4 <HAL_UART_MspInit+0x23c>)
 8002736:	f043 0302 	orr.w	r3, r3, #2
 800273a:	6313      	str	r3, [r2, #48]	; 0x30
 800273c:	4b29      	ldr	r3, [pc, #164]	; (80027e4 <HAL_UART_MspInit+0x23c>)
 800273e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002740:	f003 0302 	and.w	r3, r3, #2
 8002744:	60fb      	str	r3, [r7, #12]
 8002746:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002748:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800274c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800274e:	2302      	movs	r3, #2
 8002750:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002752:	2300      	movs	r3, #0
 8002754:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002756:	2303      	movs	r3, #3
 8002758:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800275a:	2307      	movs	r3, #7
 800275c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800275e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002762:	4619      	mov	r1, r3
 8002764:	4825      	ldr	r0, [pc, #148]	; (80027fc <HAL_UART_MspInit+0x254>)
 8002766:	f000 fed7 	bl	8003518 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800276a:	4b25      	ldr	r3, [pc, #148]	; (8002800 <HAL_UART_MspInit+0x258>)
 800276c:	4a25      	ldr	r2, [pc, #148]	; (8002804 <HAL_UART_MspInit+0x25c>)
 800276e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002770:	4b23      	ldr	r3, [pc, #140]	; (8002800 <HAL_UART_MspInit+0x258>)
 8002772:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002776:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002778:	4b21      	ldr	r3, [pc, #132]	; (8002800 <HAL_UART_MspInit+0x258>)
 800277a:	2200      	movs	r2, #0
 800277c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800277e:	4b20      	ldr	r3, [pc, #128]	; (8002800 <HAL_UART_MspInit+0x258>)
 8002780:	2200      	movs	r2, #0
 8002782:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002784:	4b1e      	ldr	r3, [pc, #120]	; (8002800 <HAL_UART_MspInit+0x258>)
 8002786:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800278a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800278c:	4b1c      	ldr	r3, [pc, #112]	; (8002800 <HAL_UART_MspInit+0x258>)
 800278e:	2200      	movs	r2, #0
 8002790:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002792:	4b1b      	ldr	r3, [pc, #108]	; (8002800 <HAL_UART_MspInit+0x258>)
 8002794:	2200      	movs	r2, #0
 8002796:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002798:	4b19      	ldr	r3, [pc, #100]	; (8002800 <HAL_UART_MspInit+0x258>)
 800279a:	2200      	movs	r2, #0
 800279c:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800279e:	4b18      	ldr	r3, [pc, #96]	; (8002800 <HAL_UART_MspInit+0x258>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80027a4:	4b16      	ldr	r3, [pc, #88]	; (8002800 <HAL_UART_MspInit+0x258>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80027aa:	4815      	ldr	r0, [pc, #84]	; (8002800 <HAL_UART_MspInit+0x258>)
 80027ac:	f000 fab2 	bl	8002d14 <HAL_DMA_Init>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <HAL_UART_MspInit+0x212>
      Error_Handler();
 80027b6:	f7ff fda5 	bl	8002304 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a10      	ldr	r2, [pc, #64]	; (8002800 <HAL_UART_MspInit+0x258>)
 80027be:	639a      	str	r2, [r3, #56]	; 0x38
 80027c0:	4a0f      	ldr	r2, [pc, #60]	; (8002800 <HAL_UART_MspInit+0x258>)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80027c6:	2200      	movs	r2, #0
 80027c8:	2100      	movs	r1, #0
 80027ca:	2027      	movs	r0, #39	; 0x27
 80027cc:	f000 fa6b 	bl	8002ca6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80027d0:	2027      	movs	r0, #39	; 0x27
 80027d2:	f000 fa84 	bl	8002cde <HAL_NVIC_EnableIRQ>
}
 80027d6:	bf00      	nop
 80027d8:	3738      	adds	r7, #56	; 0x38
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	40011000 	.word	0x40011000
 80027e4:	40023800 	.word	0x40023800
 80027e8:	40020000 	.word	0x40020000
 80027ec:	40004400 	.word	0x40004400
 80027f0:	20002674 	.word	0x20002674
 80027f4:	40026088 	.word	0x40026088
 80027f8:	40004800 	.word	0x40004800
 80027fc:	40020400 	.word	0x40020400
 8002800:	2000279c 	.word	0x2000279c
 8002804:	40026028 	.word	0x40026028

08002808 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800280c:	e7fe      	b.n	800280c <NMI_Handler+0x4>

0800280e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800280e:	b480      	push	{r7}
 8002810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002812:	e7fe      	b.n	8002812 <HardFault_Handler+0x4>

08002814 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002818:	e7fe      	b.n	8002818 <MemManage_Handler+0x4>

0800281a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800281a:	b480      	push	{r7}
 800281c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800281e:	e7fe      	b.n	800281e <BusFault_Handler+0x4>

08002820 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002824:	e7fe      	b.n	8002824 <UsageFault_Handler+0x4>

08002826 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002826:	b480      	push	{r7}
 8002828:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800282a:	bf00      	nop
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002838:	bf00      	nop
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr

08002842 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002842:	b480      	push	{r7}
 8002844:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002846:	bf00      	nop
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002854:	f000 f908 	bl	8002a68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002858:	bf00      	nop
 800285a:	bd80      	pop	{r7, pc}

0800285c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002860:	4802      	ldr	r0, [pc, #8]	; (800286c <DMA1_Stream1_IRQHandler+0x10>)
 8002862:	f000 fbef 	bl	8003044 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002866:	bf00      	nop
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	2000279c 	.word	0x2000279c

08002870 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002874:	4802      	ldr	r0, [pc, #8]	; (8002880 <DMA1_Stream5_IRQHandler+0x10>)
 8002876:	f000 fbe5 	bl	8003044 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800287a:	bf00      	nop
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	20002674 	.word	0x20002674

08002884 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002888:	2020      	movs	r0, #32
 800288a:	f001 f82d 	bl	80038e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800288e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002892:	f001 f829 	bl	80038e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8002896:	f44f 7000 	mov.w	r0, #512	; 0x200
 800289a:	f001 f825 	bl	80038e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800289e:	bf00      	nop
 80028a0:	bd80      	pop	{r7, pc}
	...

080028a4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80028a8:	4802      	ldr	r0, [pc, #8]	; (80028b4 <USART1_IRQHandler+0x10>)
 80028aa:	f003 fa95 	bl	8005dd8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80028ae:	bf00      	nop
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	20002898 	.word	0x20002898

080028b8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80028bc:	4802      	ldr	r0, [pc, #8]	; (80028c8 <USART2_IRQHandler+0x10>)
 80028be:	f003 fa8b 	bl	8005dd8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80028c2:	bf00      	nop
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	20002d24 	.word	0x20002d24

080028cc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80028d0:	4802      	ldr	r0, [pc, #8]	; (80028dc <USART3_IRQHandler+0x10>)
 80028d2:	f003 fa81 	bl	8005dd8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80028d6:	bf00      	nop
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	200027fc 	.word	0x200027fc

080028e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b086      	sub	sp, #24
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028e8:	4a14      	ldr	r2, [pc, #80]	; (800293c <_sbrk+0x5c>)
 80028ea:	4b15      	ldr	r3, [pc, #84]	; (8002940 <_sbrk+0x60>)
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028f4:	4b13      	ldr	r3, [pc, #76]	; (8002944 <_sbrk+0x64>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d102      	bne.n	8002902 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028fc:	4b11      	ldr	r3, [pc, #68]	; (8002944 <_sbrk+0x64>)
 80028fe:	4a12      	ldr	r2, [pc, #72]	; (8002948 <_sbrk+0x68>)
 8002900:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002902:	4b10      	ldr	r3, [pc, #64]	; (8002944 <_sbrk+0x64>)
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4413      	add	r3, r2
 800290a:	693a      	ldr	r2, [r7, #16]
 800290c:	429a      	cmp	r2, r3
 800290e:	d207      	bcs.n	8002920 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002910:	f004 faa2 	bl	8006e58 <__errno>
 8002914:	4603      	mov	r3, r0
 8002916:	220c      	movs	r2, #12
 8002918:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800291a:	f04f 33ff 	mov.w	r3, #4294967295
 800291e:	e009      	b.n	8002934 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002920:	4b08      	ldr	r3, [pc, #32]	; (8002944 <_sbrk+0x64>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002926:	4b07      	ldr	r3, [pc, #28]	; (8002944 <_sbrk+0x64>)
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4413      	add	r3, r2
 800292e:	4a05      	ldr	r2, [pc, #20]	; (8002944 <_sbrk+0x64>)
 8002930:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002932:	68fb      	ldr	r3, [r7, #12]
}
 8002934:	4618      	mov	r0, r3
 8002936:	3718      	adds	r7, #24
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	20020000 	.word	0x20020000
 8002940:	00000400 	.word	0x00000400
 8002944:	20000654 	.word	0x20000654
 8002948:	20002da8 	.word	0x20002da8

0800294c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002950:	4b06      	ldr	r3, [pc, #24]	; (800296c <SystemInit+0x20>)
 8002952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002956:	4a05      	ldr	r2, [pc, #20]	; (800296c <SystemInit+0x20>)
 8002958:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800295c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002960:	bf00      	nop
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	e000ed00 	.word	0xe000ed00

08002970 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002970:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002974:	480d      	ldr	r0, [pc, #52]	; (80029ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002976:	490e      	ldr	r1, [pc, #56]	; (80029b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002978:	4a0e      	ldr	r2, [pc, #56]	; (80029b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800297a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800297c:	e002      	b.n	8002984 <LoopCopyDataInit>

0800297e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800297e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002980:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002982:	3304      	adds	r3, #4

08002984 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002984:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002986:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002988:	d3f9      	bcc.n	800297e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800298a:	4a0b      	ldr	r2, [pc, #44]	; (80029b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800298c:	4c0b      	ldr	r4, [pc, #44]	; (80029bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800298e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002990:	e001      	b.n	8002996 <LoopFillZerobss>

08002992 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002992:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002994:	3204      	adds	r2, #4

08002996 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002996:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002998:	d3fb      	bcc.n	8002992 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800299a:	f7ff ffd7 	bl	800294c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800299e:	f004 fa61 	bl	8006e64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029a2:	f7fe fd3d 	bl	8001420 <main>
  bx  lr    
 80029a6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80029a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80029ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029b0:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80029b4:	0800be7c 	.word	0x0800be7c
  ldr r2, =_sbss
 80029b8:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80029bc:	20002da4 	.word	0x20002da4

080029c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029c0:	e7fe      	b.n	80029c0 <ADC_IRQHandler>
	...

080029c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80029c8:	4b0e      	ldr	r3, [pc, #56]	; (8002a04 <HAL_Init+0x40>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a0d      	ldr	r2, [pc, #52]	; (8002a04 <HAL_Init+0x40>)
 80029ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80029d4:	4b0b      	ldr	r3, [pc, #44]	; (8002a04 <HAL_Init+0x40>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a0a      	ldr	r2, [pc, #40]	; (8002a04 <HAL_Init+0x40>)
 80029da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029e0:	4b08      	ldr	r3, [pc, #32]	; (8002a04 <HAL_Init+0x40>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a07      	ldr	r2, [pc, #28]	; (8002a04 <HAL_Init+0x40>)
 80029e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029ec:	2003      	movs	r0, #3
 80029ee:	f000 f94f 	bl	8002c90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029f2:	2000      	movs	r0, #0
 80029f4:	f000 f808 	bl	8002a08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029f8:	f7ff fd50 	bl	800249c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	40023c00 	.word	0x40023c00

08002a08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a10:	4b12      	ldr	r3, [pc, #72]	; (8002a5c <HAL_InitTick+0x54>)
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	4b12      	ldr	r3, [pc, #72]	; (8002a60 <HAL_InitTick+0x58>)
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	4619      	mov	r1, r3
 8002a1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a26:	4618      	mov	r0, r3
 8002a28:	f000 f967 	bl	8002cfa <HAL_SYSTICK_Config>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e00e      	b.n	8002a54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2b0f      	cmp	r3, #15
 8002a3a:	d80a      	bhi.n	8002a52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	6879      	ldr	r1, [r7, #4]
 8002a40:	f04f 30ff 	mov.w	r0, #4294967295
 8002a44:	f000 f92f 	bl	8002ca6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a48:	4a06      	ldr	r2, [pc, #24]	; (8002a64 <HAL_InitTick+0x5c>)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	e000      	b.n	8002a54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3708      	adds	r7, #8
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	20000004 	.word	0x20000004
 8002a60:	2000000c 	.word	0x2000000c
 8002a64:	20000008 	.word	0x20000008

08002a68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a6c:	4b06      	ldr	r3, [pc, #24]	; (8002a88 <HAL_IncTick+0x20>)
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	461a      	mov	r2, r3
 8002a72:	4b06      	ldr	r3, [pc, #24]	; (8002a8c <HAL_IncTick+0x24>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4413      	add	r3, r2
 8002a78:	4a04      	ldr	r2, [pc, #16]	; (8002a8c <HAL_IncTick+0x24>)
 8002a7a:	6013      	str	r3, [r2, #0]
}
 8002a7c:	bf00      	nop
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	2000000c 	.word	0x2000000c
 8002a8c:	20002d90 	.word	0x20002d90

08002a90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0
  return uwTick;
 8002a94:	4b03      	ldr	r3, [pc, #12]	; (8002aa4 <HAL_GetTick+0x14>)
 8002a96:	681b      	ldr	r3, [r3, #0]
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	20002d90 	.word	0x20002d90

08002aa8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ab0:	f7ff ffee 	bl	8002a90 <HAL_GetTick>
 8002ab4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ac0:	d005      	beq.n	8002ace <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ac2:	4b0a      	ldr	r3, [pc, #40]	; (8002aec <HAL_Delay+0x44>)
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	4413      	add	r3, r2
 8002acc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ace:	bf00      	nop
 8002ad0:	f7ff ffde 	bl	8002a90 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d8f7      	bhi.n	8002ad0 <HAL_Delay+0x28>
  {
  }
}
 8002ae0:	bf00      	nop
 8002ae2:	bf00      	nop
 8002ae4:	3710      	adds	r7, #16
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	2000000c 	.word	0x2000000c

08002af0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b085      	sub	sp, #20
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f003 0307 	and.w	r3, r3, #7
 8002afe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b00:	4b0c      	ldr	r3, [pc, #48]	; (8002b34 <__NVIC_SetPriorityGrouping+0x44>)
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b06:	68ba      	ldr	r2, [r7, #8]
 8002b08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b22:	4a04      	ldr	r2, [pc, #16]	; (8002b34 <__NVIC_SetPriorityGrouping+0x44>)
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	60d3      	str	r3, [r2, #12]
}
 8002b28:	bf00      	nop
 8002b2a:	3714      	adds	r7, #20
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr
 8002b34:	e000ed00 	.word	0xe000ed00

08002b38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b3c:	4b04      	ldr	r3, [pc, #16]	; (8002b50 <__NVIC_GetPriorityGrouping+0x18>)
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	0a1b      	lsrs	r3, r3, #8
 8002b42:	f003 0307 	and.w	r3, r3, #7
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr
 8002b50:	e000ed00 	.word	0xe000ed00

08002b54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	db0b      	blt.n	8002b7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b66:	79fb      	ldrb	r3, [r7, #7]
 8002b68:	f003 021f 	and.w	r2, r3, #31
 8002b6c:	4907      	ldr	r1, [pc, #28]	; (8002b8c <__NVIC_EnableIRQ+0x38>)
 8002b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b72:	095b      	lsrs	r3, r3, #5
 8002b74:	2001      	movs	r0, #1
 8002b76:	fa00 f202 	lsl.w	r2, r0, r2
 8002b7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b7e:	bf00      	nop
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	e000e100 	.word	0xe000e100

08002b90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	4603      	mov	r3, r0
 8002b98:	6039      	str	r1, [r7, #0]
 8002b9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	db0a      	blt.n	8002bba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	b2da      	uxtb	r2, r3
 8002ba8:	490c      	ldr	r1, [pc, #48]	; (8002bdc <__NVIC_SetPriority+0x4c>)
 8002baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bae:	0112      	lsls	r2, r2, #4
 8002bb0:	b2d2      	uxtb	r2, r2
 8002bb2:	440b      	add	r3, r1
 8002bb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bb8:	e00a      	b.n	8002bd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	b2da      	uxtb	r2, r3
 8002bbe:	4908      	ldr	r1, [pc, #32]	; (8002be0 <__NVIC_SetPriority+0x50>)
 8002bc0:	79fb      	ldrb	r3, [r7, #7]
 8002bc2:	f003 030f 	and.w	r3, r3, #15
 8002bc6:	3b04      	subs	r3, #4
 8002bc8:	0112      	lsls	r2, r2, #4
 8002bca:	b2d2      	uxtb	r2, r2
 8002bcc:	440b      	add	r3, r1
 8002bce:	761a      	strb	r2, [r3, #24]
}
 8002bd0:	bf00      	nop
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr
 8002bdc:	e000e100 	.word	0xe000e100
 8002be0:	e000ed00 	.word	0xe000ed00

08002be4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b089      	sub	sp, #36	; 0x24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f003 0307 	and.w	r3, r3, #7
 8002bf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	f1c3 0307 	rsb	r3, r3, #7
 8002bfe:	2b04      	cmp	r3, #4
 8002c00:	bf28      	it	cs
 8002c02:	2304      	movcs	r3, #4
 8002c04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	3304      	adds	r3, #4
 8002c0a:	2b06      	cmp	r3, #6
 8002c0c:	d902      	bls.n	8002c14 <NVIC_EncodePriority+0x30>
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	3b03      	subs	r3, #3
 8002c12:	e000      	b.n	8002c16 <NVIC_EncodePriority+0x32>
 8002c14:	2300      	movs	r3, #0
 8002c16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c18:	f04f 32ff 	mov.w	r2, #4294967295
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c22:	43da      	mvns	r2, r3
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	401a      	ands	r2, r3
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c2c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	fa01 f303 	lsl.w	r3, r1, r3
 8002c36:	43d9      	mvns	r1, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c3c:	4313      	orrs	r3, r2
         );
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3724      	adds	r7, #36	; 0x24
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
	...

08002c4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	3b01      	subs	r3, #1
 8002c58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c5c:	d301      	bcc.n	8002c62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e00f      	b.n	8002c82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c62:	4a0a      	ldr	r2, [pc, #40]	; (8002c8c <SysTick_Config+0x40>)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	3b01      	subs	r3, #1
 8002c68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c6a:	210f      	movs	r1, #15
 8002c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c70:	f7ff ff8e 	bl	8002b90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c74:	4b05      	ldr	r3, [pc, #20]	; (8002c8c <SysTick_Config+0x40>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c7a:	4b04      	ldr	r3, [pc, #16]	; (8002c8c <SysTick_Config+0x40>)
 8002c7c:	2207      	movs	r2, #7
 8002c7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3708      	adds	r7, #8
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	e000e010 	.word	0xe000e010

08002c90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f7ff ff29 	bl	8002af0 <__NVIC_SetPriorityGrouping>
}
 8002c9e:	bf00      	nop
 8002ca0:	3708      	adds	r7, #8
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b086      	sub	sp, #24
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	4603      	mov	r3, r0
 8002cae:	60b9      	str	r1, [r7, #8]
 8002cb0:	607a      	str	r2, [r7, #4]
 8002cb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cb8:	f7ff ff3e 	bl	8002b38 <__NVIC_GetPriorityGrouping>
 8002cbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	68b9      	ldr	r1, [r7, #8]
 8002cc2:	6978      	ldr	r0, [r7, #20]
 8002cc4:	f7ff ff8e 	bl	8002be4 <NVIC_EncodePriority>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cce:	4611      	mov	r1, r2
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7ff ff5d 	bl	8002b90 <__NVIC_SetPriority>
}
 8002cd6:	bf00      	nop
 8002cd8:	3718      	adds	r7, #24
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b082      	sub	sp, #8
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7ff ff31 	bl	8002b54 <__NVIC_EnableIRQ>
}
 8002cf2:	bf00      	nop
 8002cf4:	3708      	adds	r7, #8
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b082      	sub	sp, #8
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f7ff ffa2 	bl	8002c4c <SysTick_Config>
 8002d08:	4603      	mov	r3, r0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
	...

08002d14 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b086      	sub	sp, #24
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002d20:	f7ff feb6 	bl	8002a90 <HAL_GetTick>
 8002d24:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d101      	bne.n	8002d30 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e099      	b.n	8002e64 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2202      	movs	r2, #2
 8002d34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f022 0201 	bic.w	r2, r2, #1
 8002d4e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d50:	e00f      	b.n	8002d72 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d52:	f7ff fe9d 	bl	8002a90 <HAL_GetTick>
 8002d56:	4602      	mov	r2, r0
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	2b05      	cmp	r3, #5
 8002d5e:	d908      	bls.n	8002d72 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2220      	movs	r2, #32
 8002d64:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2203      	movs	r2, #3
 8002d6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e078      	b.n	8002e64 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0301 	and.w	r3, r3, #1
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d1e8      	bne.n	8002d52 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002d88:	697a      	ldr	r2, [r7, #20]
 8002d8a:	4b38      	ldr	r3, [pc, #224]	; (8002e6c <HAL_DMA_Init+0x158>)
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685a      	ldr	r2, [r3, #4]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	691b      	ldr	r3, [r3, #16]
 8002da4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002daa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	699b      	ldr	r3, [r3, #24]
 8002db0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002db6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6a1b      	ldr	r3, [r3, #32]
 8002dbc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002dbe:	697a      	ldr	r2, [r7, #20]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc8:	2b04      	cmp	r3, #4
 8002dca:	d107      	bne.n	8002ddc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	697a      	ldr	r2, [r7, #20]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	697a      	ldr	r2, [r7, #20]
 8002de2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	695b      	ldr	r3, [r3, #20]
 8002dea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	f023 0307 	bic.w	r3, r3, #7
 8002df2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df8:	697a      	ldr	r2, [r7, #20]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e02:	2b04      	cmp	r3, #4
 8002e04:	d117      	bne.n	8002e36 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e0a:	697a      	ldr	r2, [r7, #20]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d00e      	beq.n	8002e36 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f000 fb01 	bl	8003420 <DMA_CheckFifoParam>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d008      	beq.n	8002e36 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2240      	movs	r2, #64	; 0x40
 8002e28:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002e32:	2301      	movs	r3, #1
 8002e34:	e016      	b.n	8002e64 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	697a      	ldr	r2, [r7, #20]
 8002e3c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 fab8 	bl	80033b4 <DMA_CalcBaseAndBitshift>
 8002e44:	4603      	mov	r3, r0
 8002e46:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e4c:	223f      	movs	r2, #63	; 0x3f
 8002e4e:	409a      	lsls	r2, r3
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002e62:	2300      	movs	r3, #0
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3718      	adds	r7, #24
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	f010803f 	.word	0xf010803f

08002e70 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	60b9      	str	r1, [r7, #8]
 8002e7a:	607a      	str	r2, [r7, #4]
 8002e7c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e86:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d101      	bne.n	8002e96 <HAL_DMA_Start_IT+0x26>
 8002e92:	2302      	movs	r3, #2
 8002e94:	e040      	b.n	8002f18 <HAL_DMA_Start_IT+0xa8>
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d12f      	bne.n	8002f0a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2202      	movs	r2, #2
 8002eae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	68b9      	ldr	r1, [r7, #8]
 8002ebe:	68f8      	ldr	r0, [r7, #12]
 8002ec0:	f000 fa4a 	bl	8003358 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec8:	223f      	movs	r2, #63	; 0x3f
 8002eca:	409a      	lsls	r2, r3
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f042 0216 	orr.w	r2, r2, #22
 8002ede:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d007      	beq.n	8002ef8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f042 0208 	orr.w	r2, r2, #8
 8002ef6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f042 0201 	orr.w	r2, r2, #1
 8002f06:	601a      	str	r2, [r3, #0]
 8002f08:	e005      	b.n	8002f16 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002f12:	2302      	movs	r3, #2
 8002f14:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002f16:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3718      	adds	r7, #24
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f2c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002f2e:	f7ff fdaf 	bl	8002a90 <HAL_GetTick>
 8002f32:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d008      	beq.n	8002f52 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2280      	movs	r2, #128	; 0x80
 8002f44:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e052      	b.n	8002ff8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f022 0216 	bic.w	r2, r2, #22
 8002f60:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	695a      	ldr	r2, [r3, #20]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f70:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d103      	bne.n	8002f82 <HAL_DMA_Abort+0x62>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d007      	beq.n	8002f92 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f022 0208 	bic.w	r2, r2, #8
 8002f90:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f022 0201 	bic.w	r2, r2, #1
 8002fa0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fa2:	e013      	b.n	8002fcc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002fa4:	f7ff fd74 	bl	8002a90 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	2b05      	cmp	r3, #5
 8002fb0:	d90c      	bls.n	8002fcc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2220      	movs	r2, #32
 8002fb6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2203      	movs	r2, #3
 8002fbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e015      	b.n	8002ff8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d1e4      	bne.n	8002fa4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fde:	223f      	movs	r2, #63	; 0x3f
 8002fe0:	409a      	lsls	r2, r3
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3710      	adds	r7, #16
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800300e:	b2db      	uxtb	r3, r3
 8003010:	2b02      	cmp	r3, #2
 8003012:	d004      	beq.n	800301e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2280      	movs	r2, #128	; 0x80
 8003018:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e00c      	b.n	8003038 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2205      	movs	r2, #5
 8003022:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f022 0201 	bic.w	r2, r2, #1
 8003034:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003036:	2300      	movs	r3, #0
}
 8003038:	4618      	mov	r0, r3
 800303a:	370c      	adds	r7, #12
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b086      	sub	sp, #24
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800304c:	2300      	movs	r3, #0
 800304e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003050:	4b92      	ldr	r3, [pc, #584]	; (800329c <HAL_DMA_IRQHandler+0x258>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a92      	ldr	r2, [pc, #584]	; (80032a0 <HAL_DMA_IRQHandler+0x25c>)
 8003056:	fba2 2303 	umull	r2, r3, r2, r3
 800305a:	0a9b      	lsrs	r3, r3, #10
 800305c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003062:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800306e:	2208      	movs	r2, #8
 8003070:	409a      	lsls	r2, r3
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	4013      	ands	r3, r2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d01a      	beq.n	80030b0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0304 	and.w	r3, r3, #4
 8003084:	2b00      	cmp	r3, #0
 8003086:	d013      	beq.n	80030b0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f022 0204 	bic.w	r2, r2, #4
 8003096:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800309c:	2208      	movs	r2, #8
 800309e:	409a      	lsls	r2, r3
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a8:	f043 0201 	orr.w	r2, r3, #1
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030b4:	2201      	movs	r2, #1
 80030b6:	409a      	lsls	r2, r3
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	4013      	ands	r3, r2
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d012      	beq.n	80030e6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	695b      	ldr	r3, [r3, #20]
 80030c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d00b      	beq.n	80030e6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030d2:	2201      	movs	r2, #1
 80030d4:	409a      	lsls	r2, r3
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030de:	f043 0202 	orr.w	r2, r3, #2
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ea:	2204      	movs	r2, #4
 80030ec:	409a      	lsls	r2, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	4013      	ands	r3, r2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d012      	beq.n	800311c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0302 	and.w	r3, r3, #2
 8003100:	2b00      	cmp	r3, #0
 8003102:	d00b      	beq.n	800311c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003108:	2204      	movs	r2, #4
 800310a:	409a      	lsls	r2, r3
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003114:	f043 0204 	orr.w	r2, r3, #4
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003120:	2210      	movs	r2, #16
 8003122:	409a      	lsls	r2, r3
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	4013      	ands	r3, r2
 8003128:	2b00      	cmp	r3, #0
 800312a:	d043      	beq.n	80031b4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0308 	and.w	r3, r3, #8
 8003136:	2b00      	cmp	r3, #0
 8003138:	d03c      	beq.n	80031b4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800313e:	2210      	movs	r2, #16
 8003140:	409a      	lsls	r2, r3
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d018      	beq.n	8003186 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d108      	bne.n	8003174 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003166:	2b00      	cmp	r3, #0
 8003168:	d024      	beq.n	80031b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	4798      	blx	r3
 8003172:	e01f      	b.n	80031b4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003178:	2b00      	cmp	r3, #0
 800317a:	d01b      	beq.n	80031b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	4798      	blx	r3
 8003184:	e016      	b.n	80031b4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003190:	2b00      	cmp	r3, #0
 8003192:	d107      	bne.n	80031a4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f022 0208 	bic.w	r2, r2, #8
 80031a2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d003      	beq.n	80031b4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031b8:	2220      	movs	r2, #32
 80031ba:	409a      	lsls	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	4013      	ands	r3, r2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	f000 808e 	beq.w	80032e2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0310 	and.w	r3, r3, #16
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	f000 8086 	beq.w	80032e2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031da:	2220      	movs	r2, #32
 80031dc:	409a      	lsls	r2, r3
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	2b05      	cmp	r3, #5
 80031ec:	d136      	bne.n	800325c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f022 0216 	bic.w	r2, r2, #22
 80031fc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	695a      	ldr	r2, [r3, #20]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800320c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003212:	2b00      	cmp	r3, #0
 8003214:	d103      	bne.n	800321e <HAL_DMA_IRQHandler+0x1da>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800321a:	2b00      	cmp	r3, #0
 800321c:	d007      	beq.n	800322e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f022 0208 	bic.w	r2, r2, #8
 800322c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003232:	223f      	movs	r2, #63	; 0x3f
 8003234:	409a      	lsls	r2, r3
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2201      	movs	r2, #1
 800323e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800324e:	2b00      	cmp	r3, #0
 8003250:	d07d      	beq.n	800334e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	4798      	blx	r3
        }
        return;
 800325a:	e078      	b.n	800334e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d01c      	beq.n	80032a4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d108      	bne.n	800328a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800327c:	2b00      	cmp	r3, #0
 800327e:	d030      	beq.n	80032e2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	4798      	blx	r3
 8003288:	e02b      	b.n	80032e2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800328e:	2b00      	cmp	r3, #0
 8003290:	d027      	beq.n	80032e2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	4798      	blx	r3
 800329a:	e022      	b.n	80032e2 <HAL_DMA_IRQHandler+0x29e>
 800329c:	20000004 	.word	0x20000004
 80032a0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d10f      	bne.n	80032d2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f022 0210 	bic.w	r2, r2, #16
 80032c0:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2201      	movs	r2, #1
 80032c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d003      	beq.n	80032e2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d032      	beq.n	8003350 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d022      	beq.n	800333c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2205      	movs	r2, #5
 80032fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f022 0201 	bic.w	r2, r2, #1
 800330c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	3301      	adds	r3, #1
 8003312:	60bb      	str	r3, [r7, #8]
 8003314:	697a      	ldr	r2, [r7, #20]
 8003316:	429a      	cmp	r2, r3
 8003318:	d307      	bcc.n	800332a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0301 	and.w	r3, r3, #1
 8003324:	2b00      	cmp	r3, #0
 8003326:	d1f2      	bne.n	800330e <HAL_DMA_IRQHandler+0x2ca>
 8003328:	e000      	b.n	800332c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800332a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003340:	2b00      	cmp	r3, #0
 8003342:	d005      	beq.n	8003350 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	4798      	blx	r3
 800334c:	e000      	b.n	8003350 <HAL_DMA_IRQHandler+0x30c>
        return;
 800334e:	bf00      	nop
    }
  }
}
 8003350:	3718      	adds	r7, #24
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop

08003358 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003358:	b480      	push	{r7}
 800335a:	b085      	sub	sp, #20
 800335c:	af00      	add	r7, sp, #0
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	607a      	str	r2, [r7, #4]
 8003364:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003374:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	683a      	ldr	r2, [r7, #0]
 800337c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	2b40      	cmp	r3, #64	; 0x40
 8003384:	d108      	bne.n	8003398 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	68ba      	ldr	r2, [r7, #8]
 8003394:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003396:	e007      	b.n	80033a8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	68ba      	ldr	r2, [r7, #8]
 800339e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	60da      	str	r2, [r3, #12]
}
 80033a8:	bf00      	nop
 80033aa:	3714      	adds	r7, #20
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b085      	sub	sp, #20
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	3b10      	subs	r3, #16
 80033c4:	4a14      	ldr	r2, [pc, #80]	; (8003418 <DMA_CalcBaseAndBitshift+0x64>)
 80033c6:	fba2 2303 	umull	r2, r3, r2, r3
 80033ca:	091b      	lsrs	r3, r3, #4
 80033cc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80033ce:	4a13      	ldr	r2, [pc, #76]	; (800341c <DMA_CalcBaseAndBitshift+0x68>)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	4413      	add	r3, r2
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	461a      	mov	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2b03      	cmp	r3, #3
 80033e0:	d909      	bls.n	80033f6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80033ea:	f023 0303 	bic.w	r3, r3, #3
 80033ee:	1d1a      	adds	r2, r3, #4
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	659a      	str	r2, [r3, #88]	; 0x58
 80033f4:	e007      	b.n	8003406 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80033fe:	f023 0303 	bic.w	r3, r3, #3
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800340a:	4618      	mov	r0, r3
 800340c:	3714      	adds	r7, #20
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	aaaaaaab 	.word	0xaaaaaaab
 800341c:	0800b9b0 	.word	0x0800b9b0

08003420 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003420:	b480      	push	{r7}
 8003422:	b085      	sub	sp, #20
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003428:	2300      	movs	r3, #0
 800342a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003430:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d11f      	bne.n	800347a <DMA_CheckFifoParam+0x5a>
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	2b03      	cmp	r3, #3
 800343e:	d856      	bhi.n	80034ee <DMA_CheckFifoParam+0xce>
 8003440:	a201      	add	r2, pc, #4	; (adr r2, 8003448 <DMA_CheckFifoParam+0x28>)
 8003442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003446:	bf00      	nop
 8003448:	08003459 	.word	0x08003459
 800344c:	0800346b 	.word	0x0800346b
 8003450:	08003459 	.word	0x08003459
 8003454:	080034ef 	.word	0x080034ef
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800345c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d046      	beq.n	80034f2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003468:	e043      	b.n	80034f2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003472:	d140      	bne.n	80034f6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003478:	e03d      	b.n	80034f6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003482:	d121      	bne.n	80034c8 <DMA_CheckFifoParam+0xa8>
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	2b03      	cmp	r3, #3
 8003488:	d837      	bhi.n	80034fa <DMA_CheckFifoParam+0xda>
 800348a:	a201      	add	r2, pc, #4	; (adr r2, 8003490 <DMA_CheckFifoParam+0x70>)
 800348c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003490:	080034a1 	.word	0x080034a1
 8003494:	080034a7 	.word	0x080034a7
 8003498:	080034a1 	.word	0x080034a1
 800349c:	080034b9 	.word	0x080034b9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	73fb      	strb	r3, [r7, #15]
      break;
 80034a4:	e030      	b.n	8003508 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d025      	beq.n	80034fe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034b6:	e022      	b.n	80034fe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034bc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80034c0:	d11f      	bne.n	8003502 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80034c6:	e01c      	b.n	8003502 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d903      	bls.n	80034d6 <DMA_CheckFifoParam+0xb6>
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	2b03      	cmp	r3, #3
 80034d2:	d003      	beq.n	80034dc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80034d4:	e018      	b.n	8003508 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	73fb      	strb	r3, [r7, #15]
      break;
 80034da:	e015      	b.n	8003508 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d00e      	beq.n	8003506 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	73fb      	strb	r3, [r7, #15]
      break;
 80034ec:	e00b      	b.n	8003506 <DMA_CheckFifoParam+0xe6>
      break;
 80034ee:	bf00      	nop
 80034f0:	e00a      	b.n	8003508 <DMA_CheckFifoParam+0xe8>
      break;
 80034f2:	bf00      	nop
 80034f4:	e008      	b.n	8003508 <DMA_CheckFifoParam+0xe8>
      break;
 80034f6:	bf00      	nop
 80034f8:	e006      	b.n	8003508 <DMA_CheckFifoParam+0xe8>
      break;
 80034fa:	bf00      	nop
 80034fc:	e004      	b.n	8003508 <DMA_CheckFifoParam+0xe8>
      break;
 80034fe:	bf00      	nop
 8003500:	e002      	b.n	8003508 <DMA_CheckFifoParam+0xe8>
      break;   
 8003502:	bf00      	nop
 8003504:	e000      	b.n	8003508 <DMA_CheckFifoParam+0xe8>
      break;
 8003506:	bf00      	nop
    }
  } 
  
  return status; 
 8003508:	7bfb      	ldrb	r3, [r7, #15]
}
 800350a:	4618      	mov	r0, r3
 800350c:	3714      	adds	r7, #20
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop

08003518 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003518:	b480      	push	{r7}
 800351a:	b089      	sub	sp, #36	; 0x24
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003522:	2300      	movs	r3, #0
 8003524:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003526:	2300      	movs	r3, #0
 8003528:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800352a:	2300      	movs	r3, #0
 800352c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800352e:	2300      	movs	r3, #0
 8003530:	61fb      	str	r3, [r7, #28]
 8003532:	e16b      	b.n	800380c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003534:	2201      	movs	r2, #1
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	fa02 f303 	lsl.w	r3, r2, r3
 800353c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	697a      	ldr	r2, [r7, #20]
 8003544:	4013      	ands	r3, r2
 8003546:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003548:	693a      	ldr	r2, [r7, #16]
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	429a      	cmp	r2, r3
 800354e:	f040 815a 	bne.w	8003806 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f003 0303 	and.w	r3, r3, #3
 800355a:	2b01      	cmp	r3, #1
 800355c:	d005      	beq.n	800356a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003566:	2b02      	cmp	r3, #2
 8003568:	d130      	bne.n	80035cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	005b      	lsls	r3, r3, #1
 8003574:	2203      	movs	r2, #3
 8003576:	fa02 f303 	lsl.w	r3, r2, r3
 800357a:	43db      	mvns	r3, r3
 800357c:	69ba      	ldr	r2, [r7, #24]
 800357e:	4013      	ands	r3, r2
 8003580:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	68da      	ldr	r2, [r3, #12]
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	005b      	lsls	r3, r3, #1
 800358a:	fa02 f303 	lsl.w	r3, r2, r3
 800358e:	69ba      	ldr	r2, [r7, #24]
 8003590:	4313      	orrs	r3, r2
 8003592:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	69ba      	ldr	r2, [r7, #24]
 8003598:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035a0:	2201      	movs	r2, #1
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	fa02 f303 	lsl.w	r3, r2, r3
 80035a8:	43db      	mvns	r3, r3
 80035aa:	69ba      	ldr	r2, [r7, #24]
 80035ac:	4013      	ands	r3, r2
 80035ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	091b      	lsrs	r3, r3, #4
 80035b6:	f003 0201 	and.w	r2, r3, #1
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	fa02 f303 	lsl.w	r3, r2, r3
 80035c0:	69ba      	ldr	r2, [r7, #24]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	69ba      	ldr	r2, [r7, #24]
 80035ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f003 0303 	and.w	r3, r3, #3
 80035d4:	2b03      	cmp	r3, #3
 80035d6:	d017      	beq.n	8003608 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	005b      	lsls	r3, r3, #1
 80035e2:	2203      	movs	r2, #3
 80035e4:	fa02 f303 	lsl.w	r3, r2, r3
 80035e8:	43db      	mvns	r3, r3
 80035ea:	69ba      	ldr	r2, [r7, #24]
 80035ec:	4013      	ands	r3, r2
 80035ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	689a      	ldr	r2, [r3, #8]
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	005b      	lsls	r3, r3, #1
 80035f8:	fa02 f303 	lsl.w	r3, r2, r3
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	4313      	orrs	r3, r2
 8003600:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	69ba      	ldr	r2, [r7, #24]
 8003606:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f003 0303 	and.w	r3, r3, #3
 8003610:	2b02      	cmp	r3, #2
 8003612:	d123      	bne.n	800365c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	08da      	lsrs	r2, r3, #3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	3208      	adds	r2, #8
 800361c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003620:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	f003 0307 	and.w	r3, r3, #7
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	220f      	movs	r2, #15
 800362c:	fa02 f303 	lsl.w	r3, r2, r3
 8003630:	43db      	mvns	r3, r3
 8003632:	69ba      	ldr	r2, [r7, #24]
 8003634:	4013      	ands	r3, r2
 8003636:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	691a      	ldr	r2, [r3, #16]
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	f003 0307 	and.w	r3, r3, #7
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	fa02 f303 	lsl.w	r3, r2, r3
 8003648:	69ba      	ldr	r2, [r7, #24]
 800364a:	4313      	orrs	r3, r2
 800364c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	08da      	lsrs	r2, r3, #3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	3208      	adds	r2, #8
 8003656:	69b9      	ldr	r1, [r7, #24]
 8003658:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	005b      	lsls	r3, r3, #1
 8003666:	2203      	movs	r2, #3
 8003668:	fa02 f303 	lsl.w	r3, r2, r3
 800366c:	43db      	mvns	r3, r3
 800366e:	69ba      	ldr	r2, [r7, #24]
 8003670:	4013      	ands	r3, r2
 8003672:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f003 0203 	and.w	r2, r3, #3
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	005b      	lsls	r3, r3, #1
 8003680:	fa02 f303 	lsl.w	r3, r2, r3
 8003684:	69ba      	ldr	r2, [r7, #24]
 8003686:	4313      	orrs	r3, r2
 8003688:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	69ba      	ldr	r2, [r7, #24]
 800368e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003698:	2b00      	cmp	r3, #0
 800369a:	f000 80b4 	beq.w	8003806 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800369e:	2300      	movs	r3, #0
 80036a0:	60fb      	str	r3, [r7, #12]
 80036a2:	4b60      	ldr	r3, [pc, #384]	; (8003824 <HAL_GPIO_Init+0x30c>)
 80036a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a6:	4a5f      	ldr	r2, [pc, #380]	; (8003824 <HAL_GPIO_Init+0x30c>)
 80036a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036ac:	6453      	str	r3, [r2, #68]	; 0x44
 80036ae:	4b5d      	ldr	r3, [pc, #372]	; (8003824 <HAL_GPIO_Init+0x30c>)
 80036b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036b6:	60fb      	str	r3, [r7, #12]
 80036b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036ba:	4a5b      	ldr	r2, [pc, #364]	; (8003828 <HAL_GPIO_Init+0x310>)
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	089b      	lsrs	r3, r3, #2
 80036c0:	3302      	adds	r3, #2
 80036c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	f003 0303 	and.w	r3, r3, #3
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	220f      	movs	r2, #15
 80036d2:	fa02 f303 	lsl.w	r3, r2, r3
 80036d6:	43db      	mvns	r3, r3
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	4013      	ands	r3, r2
 80036dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a52      	ldr	r2, [pc, #328]	; (800382c <HAL_GPIO_Init+0x314>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d02b      	beq.n	800373e <HAL_GPIO_Init+0x226>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a51      	ldr	r2, [pc, #324]	; (8003830 <HAL_GPIO_Init+0x318>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d025      	beq.n	800373a <HAL_GPIO_Init+0x222>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a50      	ldr	r2, [pc, #320]	; (8003834 <HAL_GPIO_Init+0x31c>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d01f      	beq.n	8003736 <HAL_GPIO_Init+0x21e>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a4f      	ldr	r2, [pc, #316]	; (8003838 <HAL_GPIO_Init+0x320>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d019      	beq.n	8003732 <HAL_GPIO_Init+0x21a>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a4e      	ldr	r2, [pc, #312]	; (800383c <HAL_GPIO_Init+0x324>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d013      	beq.n	800372e <HAL_GPIO_Init+0x216>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a4d      	ldr	r2, [pc, #308]	; (8003840 <HAL_GPIO_Init+0x328>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d00d      	beq.n	800372a <HAL_GPIO_Init+0x212>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a4c      	ldr	r2, [pc, #304]	; (8003844 <HAL_GPIO_Init+0x32c>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d007      	beq.n	8003726 <HAL_GPIO_Init+0x20e>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a4b      	ldr	r2, [pc, #300]	; (8003848 <HAL_GPIO_Init+0x330>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d101      	bne.n	8003722 <HAL_GPIO_Init+0x20a>
 800371e:	2307      	movs	r3, #7
 8003720:	e00e      	b.n	8003740 <HAL_GPIO_Init+0x228>
 8003722:	2308      	movs	r3, #8
 8003724:	e00c      	b.n	8003740 <HAL_GPIO_Init+0x228>
 8003726:	2306      	movs	r3, #6
 8003728:	e00a      	b.n	8003740 <HAL_GPIO_Init+0x228>
 800372a:	2305      	movs	r3, #5
 800372c:	e008      	b.n	8003740 <HAL_GPIO_Init+0x228>
 800372e:	2304      	movs	r3, #4
 8003730:	e006      	b.n	8003740 <HAL_GPIO_Init+0x228>
 8003732:	2303      	movs	r3, #3
 8003734:	e004      	b.n	8003740 <HAL_GPIO_Init+0x228>
 8003736:	2302      	movs	r3, #2
 8003738:	e002      	b.n	8003740 <HAL_GPIO_Init+0x228>
 800373a:	2301      	movs	r3, #1
 800373c:	e000      	b.n	8003740 <HAL_GPIO_Init+0x228>
 800373e:	2300      	movs	r3, #0
 8003740:	69fa      	ldr	r2, [r7, #28]
 8003742:	f002 0203 	and.w	r2, r2, #3
 8003746:	0092      	lsls	r2, r2, #2
 8003748:	4093      	lsls	r3, r2
 800374a:	69ba      	ldr	r2, [r7, #24]
 800374c:	4313      	orrs	r3, r2
 800374e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003750:	4935      	ldr	r1, [pc, #212]	; (8003828 <HAL_GPIO_Init+0x310>)
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	089b      	lsrs	r3, r3, #2
 8003756:	3302      	adds	r3, #2
 8003758:	69ba      	ldr	r2, [r7, #24]
 800375a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800375e:	4b3b      	ldr	r3, [pc, #236]	; (800384c <HAL_GPIO_Init+0x334>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	43db      	mvns	r3, r3
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	4013      	ands	r3, r2
 800376c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d003      	beq.n	8003782 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800377a:	69ba      	ldr	r2, [r7, #24]
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	4313      	orrs	r3, r2
 8003780:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003782:	4a32      	ldr	r2, [pc, #200]	; (800384c <HAL_GPIO_Init+0x334>)
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003788:	4b30      	ldr	r3, [pc, #192]	; (800384c <HAL_GPIO_Init+0x334>)
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	43db      	mvns	r3, r3
 8003792:	69ba      	ldr	r2, [r7, #24]
 8003794:	4013      	ands	r3, r2
 8003796:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d003      	beq.n	80037ac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80037a4:	69ba      	ldr	r2, [r7, #24]
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80037ac:	4a27      	ldr	r2, [pc, #156]	; (800384c <HAL_GPIO_Init+0x334>)
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037b2:	4b26      	ldr	r3, [pc, #152]	; (800384c <HAL_GPIO_Init+0x334>)
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	43db      	mvns	r3, r3
 80037bc:	69ba      	ldr	r2, [r7, #24]
 80037be:	4013      	ands	r3, r2
 80037c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d003      	beq.n	80037d6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80037ce:	69ba      	ldr	r2, [r7, #24]
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80037d6:	4a1d      	ldr	r2, [pc, #116]	; (800384c <HAL_GPIO_Init+0x334>)
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80037dc:	4b1b      	ldr	r3, [pc, #108]	; (800384c <HAL_GPIO_Init+0x334>)
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	43db      	mvns	r3, r3
 80037e6:	69ba      	ldr	r2, [r7, #24]
 80037e8:	4013      	ands	r3, r2
 80037ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d003      	beq.n	8003800 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80037f8:	69ba      	ldr	r2, [r7, #24]
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003800:	4a12      	ldr	r2, [pc, #72]	; (800384c <HAL_GPIO_Init+0x334>)
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	3301      	adds	r3, #1
 800380a:	61fb      	str	r3, [r7, #28]
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	2b0f      	cmp	r3, #15
 8003810:	f67f ae90 	bls.w	8003534 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003814:	bf00      	nop
 8003816:	bf00      	nop
 8003818:	3724      	adds	r7, #36	; 0x24
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	40023800 	.word	0x40023800
 8003828:	40013800 	.word	0x40013800
 800382c:	40020000 	.word	0x40020000
 8003830:	40020400 	.word	0x40020400
 8003834:	40020800 	.word	0x40020800
 8003838:	40020c00 	.word	0x40020c00
 800383c:	40021000 	.word	0x40021000
 8003840:	40021400 	.word	0x40021400
 8003844:	40021800 	.word	0x40021800
 8003848:	40021c00 	.word	0x40021c00
 800384c:	40013c00 	.word	0x40013c00

08003850 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003850:	b480      	push	{r7}
 8003852:	b085      	sub	sp, #20
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	460b      	mov	r3, r1
 800385a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	691a      	ldr	r2, [r3, #16]
 8003860:	887b      	ldrh	r3, [r7, #2]
 8003862:	4013      	ands	r3, r2
 8003864:	2b00      	cmp	r3, #0
 8003866:	d002      	beq.n	800386e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003868:	2301      	movs	r3, #1
 800386a:	73fb      	strb	r3, [r7, #15]
 800386c:	e001      	b.n	8003872 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800386e:	2300      	movs	r3, #0
 8003870:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003872:	7bfb      	ldrb	r3, [r7, #15]
}
 8003874:	4618      	mov	r0, r3
 8003876:	3714      	adds	r7, #20
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	460b      	mov	r3, r1
 800388a:	807b      	strh	r3, [r7, #2]
 800388c:	4613      	mov	r3, r2
 800388e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003890:	787b      	ldrb	r3, [r7, #1]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d003      	beq.n	800389e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003896:	887a      	ldrh	r2, [r7, #2]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800389c:	e003      	b.n	80038a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800389e:	887b      	ldrh	r3, [r7, #2]
 80038a0:	041a      	lsls	r2, r3, #16
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	619a      	str	r2, [r3, #24]
}
 80038a6:	bf00      	nop
 80038a8:	370c      	adds	r7, #12
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr

080038b2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80038b2:	b480      	push	{r7}
 80038b4:	b085      	sub	sp, #20
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
 80038ba:	460b      	mov	r3, r1
 80038bc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80038c4:	887a      	ldrh	r2, [r7, #2]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	4013      	ands	r3, r2
 80038ca:	041a      	lsls	r2, r3, #16
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	43d9      	mvns	r1, r3
 80038d0:	887b      	ldrh	r3, [r7, #2]
 80038d2:	400b      	ands	r3, r1
 80038d4:	431a      	orrs	r2, r3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	619a      	str	r2, [r3, #24]
}
 80038da:	bf00      	nop
 80038dc:	3714      	adds	r7, #20
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
	...

080038e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	4603      	mov	r3, r0
 80038f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80038f2:	4b08      	ldr	r3, [pc, #32]	; (8003914 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038f4:	695a      	ldr	r2, [r3, #20]
 80038f6:	88fb      	ldrh	r3, [r7, #6]
 80038f8:	4013      	ands	r3, r2
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d006      	beq.n	800390c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80038fe:	4a05      	ldr	r2, [pc, #20]	; (8003914 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003900:	88fb      	ldrh	r3, [r7, #6]
 8003902:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003904:	88fb      	ldrh	r3, [r7, #6]
 8003906:	4618      	mov	r0, r3
 8003908:	f7fe f986 	bl	8001c18 <HAL_GPIO_EXTI_Callback>
  }
}
 800390c:	bf00      	nop
 800390e:	3708      	adds	r7, #8
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}
 8003914:	40013c00 	.word	0x40013c00

08003918 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d101      	bne.n	800392a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e12b      	b.n	8003b82 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003930:	b2db      	uxtb	r3, r3
 8003932:	2b00      	cmp	r3, #0
 8003934:	d106      	bne.n	8003944 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f7fe fdd4 	bl	80024ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2224      	movs	r2, #36	; 0x24
 8003948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f022 0201 	bic.w	r2, r2, #1
 800395a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800396a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800397a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800397c:	f001 fbd8 	bl	8005130 <HAL_RCC_GetPCLK1Freq>
 8003980:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	4a81      	ldr	r2, [pc, #516]	; (8003b8c <HAL_I2C_Init+0x274>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d807      	bhi.n	800399c <HAL_I2C_Init+0x84>
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	4a80      	ldr	r2, [pc, #512]	; (8003b90 <HAL_I2C_Init+0x278>)
 8003990:	4293      	cmp	r3, r2
 8003992:	bf94      	ite	ls
 8003994:	2301      	movls	r3, #1
 8003996:	2300      	movhi	r3, #0
 8003998:	b2db      	uxtb	r3, r3
 800399a:	e006      	b.n	80039aa <HAL_I2C_Init+0x92>
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	4a7d      	ldr	r2, [pc, #500]	; (8003b94 <HAL_I2C_Init+0x27c>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	bf94      	ite	ls
 80039a4:	2301      	movls	r3, #1
 80039a6:	2300      	movhi	r3, #0
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d001      	beq.n	80039b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e0e7      	b.n	8003b82 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	4a78      	ldr	r2, [pc, #480]	; (8003b98 <HAL_I2C_Init+0x280>)
 80039b6:	fba2 2303 	umull	r2, r3, r2, r3
 80039ba:	0c9b      	lsrs	r3, r3, #18
 80039bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68ba      	ldr	r2, [r7, #8]
 80039ce:	430a      	orrs	r2, r1
 80039d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	6a1b      	ldr	r3, [r3, #32]
 80039d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	4a6a      	ldr	r2, [pc, #424]	; (8003b8c <HAL_I2C_Init+0x274>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d802      	bhi.n	80039ec <HAL_I2C_Init+0xd4>
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	3301      	adds	r3, #1
 80039ea:	e009      	b.n	8003a00 <HAL_I2C_Init+0xe8>
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80039f2:	fb02 f303 	mul.w	r3, r2, r3
 80039f6:	4a69      	ldr	r2, [pc, #420]	; (8003b9c <HAL_I2C_Init+0x284>)
 80039f8:	fba2 2303 	umull	r2, r3, r2, r3
 80039fc:	099b      	lsrs	r3, r3, #6
 80039fe:	3301      	adds	r3, #1
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	6812      	ldr	r2, [r2, #0]
 8003a04:	430b      	orrs	r3, r1
 8003a06:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	69db      	ldr	r3, [r3, #28]
 8003a0e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003a12:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	495c      	ldr	r1, [pc, #368]	; (8003b8c <HAL_I2C_Init+0x274>)
 8003a1c:	428b      	cmp	r3, r1
 8003a1e:	d819      	bhi.n	8003a54 <HAL_I2C_Init+0x13c>
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	1e59      	subs	r1, r3, #1
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	005b      	lsls	r3, r3, #1
 8003a2a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a2e:	1c59      	adds	r1, r3, #1
 8003a30:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003a34:	400b      	ands	r3, r1
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00a      	beq.n	8003a50 <HAL_I2C_Init+0x138>
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	1e59      	subs	r1, r3, #1
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	005b      	lsls	r3, r3, #1
 8003a44:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a48:	3301      	adds	r3, #1
 8003a4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a4e:	e051      	b.n	8003af4 <HAL_I2C_Init+0x1dc>
 8003a50:	2304      	movs	r3, #4
 8003a52:	e04f      	b.n	8003af4 <HAL_I2C_Init+0x1dc>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d111      	bne.n	8003a80 <HAL_I2C_Init+0x168>
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	1e58      	subs	r0, r3, #1
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6859      	ldr	r1, [r3, #4]
 8003a64:	460b      	mov	r3, r1
 8003a66:	005b      	lsls	r3, r3, #1
 8003a68:	440b      	add	r3, r1
 8003a6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a6e:	3301      	adds	r3, #1
 8003a70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	bf0c      	ite	eq
 8003a78:	2301      	moveq	r3, #1
 8003a7a:	2300      	movne	r3, #0
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	e012      	b.n	8003aa6 <HAL_I2C_Init+0x18e>
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	1e58      	subs	r0, r3, #1
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6859      	ldr	r1, [r3, #4]
 8003a88:	460b      	mov	r3, r1
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	440b      	add	r3, r1
 8003a8e:	0099      	lsls	r1, r3, #2
 8003a90:	440b      	add	r3, r1
 8003a92:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a96:	3301      	adds	r3, #1
 8003a98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	bf0c      	ite	eq
 8003aa0:	2301      	moveq	r3, #1
 8003aa2:	2300      	movne	r3, #0
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d001      	beq.n	8003aae <HAL_I2C_Init+0x196>
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e022      	b.n	8003af4 <HAL_I2C_Init+0x1dc>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d10e      	bne.n	8003ad4 <HAL_I2C_Init+0x1bc>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	1e58      	subs	r0, r3, #1
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6859      	ldr	r1, [r3, #4]
 8003abe:	460b      	mov	r3, r1
 8003ac0:	005b      	lsls	r3, r3, #1
 8003ac2:	440b      	add	r3, r1
 8003ac4:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ac8:	3301      	adds	r3, #1
 8003aca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ace:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ad2:	e00f      	b.n	8003af4 <HAL_I2C_Init+0x1dc>
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	1e58      	subs	r0, r3, #1
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6859      	ldr	r1, [r3, #4]
 8003adc:	460b      	mov	r3, r1
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	440b      	add	r3, r1
 8003ae2:	0099      	lsls	r1, r3, #2
 8003ae4:	440b      	add	r3, r1
 8003ae6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aea:	3301      	adds	r3, #1
 8003aec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003af0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003af4:	6879      	ldr	r1, [r7, #4]
 8003af6:	6809      	ldr	r1, [r1, #0]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	69da      	ldr	r2, [r3, #28]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6a1b      	ldr	r3, [r3, #32]
 8003b0e:	431a      	orrs	r2, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	430a      	orrs	r2, r1
 8003b16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003b22:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	6911      	ldr	r1, [r2, #16]
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	68d2      	ldr	r2, [r2, #12]
 8003b2e:	4311      	orrs	r1, r2
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	6812      	ldr	r2, [r2, #0]
 8003b34:	430b      	orrs	r3, r1
 8003b36:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	695a      	ldr	r2, [r3, #20]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	699b      	ldr	r3, [r3, #24]
 8003b4a:	431a      	orrs	r2, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	430a      	orrs	r2, r1
 8003b52:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f042 0201 	orr.w	r2, r2, #1
 8003b62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2220      	movs	r2, #32
 8003b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3710      	adds	r7, #16
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	000186a0 	.word	0x000186a0
 8003b90:	001e847f 	.word	0x001e847f
 8003b94:	003d08ff 	.word	0x003d08ff
 8003b98:	431bde83 	.word	0x431bde83
 8003b9c:	10624dd3 	.word	0x10624dd3

08003ba0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b088      	sub	sp, #32
 8003ba4:	af02      	add	r7, sp, #8
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	4608      	mov	r0, r1
 8003baa:	4611      	mov	r1, r2
 8003bac:	461a      	mov	r2, r3
 8003bae:	4603      	mov	r3, r0
 8003bb0:	817b      	strh	r3, [r7, #10]
 8003bb2:	460b      	mov	r3, r1
 8003bb4:	813b      	strh	r3, [r7, #8]
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003bba:	f7fe ff69 	bl	8002a90 <HAL_GetTick>
 8003bbe:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	2b20      	cmp	r3, #32
 8003bca:	f040 80d9 	bne.w	8003d80 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	9300      	str	r3, [sp, #0]
 8003bd2:	2319      	movs	r3, #25
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	496d      	ldr	r1, [pc, #436]	; (8003d8c <HAL_I2C_Mem_Write+0x1ec>)
 8003bd8:	68f8      	ldr	r0, [r7, #12]
 8003bda:	f000 fc7f 	bl	80044dc <I2C_WaitOnFlagUntilTimeout>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d001      	beq.n	8003be8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003be4:	2302      	movs	r3, #2
 8003be6:	e0cc      	b.n	8003d82 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d101      	bne.n	8003bf6 <HAL_I2C_Mem_Write+0x56>
 8003bf2:	2302      	movs	r3, #2
 8003bf4:	e0c5      	b.n	8003d82 <HAL_I2C_Mem_Write+0x1e2>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0301 	and.w	r3, r3, #1
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d007      	beq.n	8003c1c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f042 0201 	orr.w	r2, r2, #1
 8003c1a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c2a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2221      	movs	r2, #33	; 0x21
 8003c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2240      	movs	r2, #64	; 0x40
 8003c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6a3a      	ldr	r2, [r7, #32]
 8003c46:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003c4c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c52:	b29a      	uxth	r2, r3
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	4a4d      	ldr	r2, [pc, #308]	; (8003d90 <HAL_I2C_Mem_Write+0x1f0>)
 8003c5c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c5e:	88f8      	ldrh	r0, [r7, #6]
 8003c60:	893a      	ldrh	r2, [r7, #8]
 8003c62:	8979      	ldrh	r1, [r7, #10]
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	9301      	str	r3, [sp, #4]
 8003c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c6a:	9300      	str	r3, [sp, #0]
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	68f8      	ldr	r0, [r7, #12]
 8003c70:	f000 fab6 	bl	80041e0 <I2C_RequestMemoryWrite>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d052      	beq.n	8003d20 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e081      	b.n	8003d82 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c7e:	697a      	ldr	r2, [r7, #20]
 8003c80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c82:	68f8      	ldr	r0, [r7, #12]
 8003c84:	f000 fd00 	bl	8004688 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d00d      	beq.n	8003caa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c92:	2b04      	cmp	r3, #4
 8003c94:	d107      	bne.n	8003ca6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ca4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e06b      	b.n	8003d82 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cae:	781a      	ldrb	r2, [r3, #0]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cba:	1c5a      	adds	r2, r3, #1
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cc4:	3b01      	subs	r3, #1
 8003cc6:	b29a      	uxth	r2, r3
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	3b01      	subs	r3, #1
 8003cd4:	b29a      	uxth	r2, r3
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	695b      	ldr	r3, [r3, #20]
 8003ce0:	f003 0304 	and.w	r3, r3, #4
 8003ce4:	2b04      	cmp	r3, #4
 8003ce6:	d11b      	bne.n	8003d20 <HAL_I2C_Mem_Write+0x180>
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d017      	beq.n	8003d20 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf4:	781a      	ldrb	r2, [r3, #0]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d00:	1c5a      	adds	r2, r3, #1
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	b29a      	uxth	r2, r3
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	3b01      	subs	r3, #1
 8003d1a:	b29a      	uxth	r2, r3
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d1aa      	bne.n	8003c7e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d28:	697a      	ldr	r2, [r7, #20]
 8003d2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d2c:	68f8      	ldr	r0, [r7, #12]
 8003d2e:	f000 fcec 	bl	800470a <I2C_WaitOnBTFFlagUntilTimeout>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d00d      	beq.n	8003d54 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3c:	2b04      	cmp	r3, #4
 8003d3e:	d107      	bne.n	8003d50 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d4e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e016      	b.n	8003d82 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2220      	movs	r2, #32
 8003d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	e000      	b.n	8003d82 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003d80:	2302      	movs	r3, #2
  }
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3718      	adds	r7, #24
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	00100002 	.word	0x00100002
 8003d90:	ffff0000 	.word	0xffff0000

08003d94 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b08c      	sub	sp, #48	; 0x30
 8003d98:	af02      	add	r7, sp, #8
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	4608      	mov	r0, r1
 8003d9e:	4611      	mov	r1, r2
 8003da0:	461a      	mov	r2, r3
 8003da2:	4603      	mov	r3, r0
 8003da4:	817b      	strh	r3, [r7, #10]
 8003da6:	460b      	mov	r3, r1
 8003da8:	813b      	strh	r3, [r7, #8]
 8003daa:	4613      	mov	r3, r2
 8003dac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003dae:	f7fe fe6f 	bl	8002a90 <HAL_GetTick>
 8003db2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	2b20      	cmp	r3, #32
 8003dbe:	f040 8208 	bne.w	80041d2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc4:	9300      	str	r3, [sp, #0]
 8003dc6:	2319      	movs	r3, #25
 8003dc8:	2201      	movs	r2, #1
 8003dca:	497b      	ldr	r1, [pc, #492]	; (8003fb8 <HAL_I2C_Mem_Read+0x224>)
 8003dcc:	68f8      	ldr	r0, [r7, #12]
 8003dce:	f000 fb85 	bl	80044dc <I2C_WaitOnFlagUntilTimeout>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d001      	beq.n	8003ddc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003dd8:	2302      	movs	r3, #2
 8003dda:	e1fb      	b.n	80041d4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d101      	bne.n	8003dea <HAL_I2C_Mem_Read+0x56>
 8003de6:	2302      	movs	r3, #2
 8003de8:	e1f4      	b.n	80041d4 <HAL_I2C_Mem_Read+0x440>
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2201      	movs	r2, #1
 8003dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0301 	and.w	r3, r3, #1
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d007      	beq.n	8003e10 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f042 0201 	orr.w	r2, r2, #1
 8003e0e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e1e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2222      	movs	r2, #34	; 0x22
 8003e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2240      	movs	r2, #64	; 0x40
 8003e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2200      	movs	r2, #0
 8003e34:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e3a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003e40:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e46:	b29a      	uxth	r2, r3
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	4a5b      	ldr	r2, [pc, #364]	; (8003fbc <HAL_I2C_Mem_Read+0x228>)
 8003e50:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e52:	88f8      	ldrh	r0, [r7, #6]
 8003e54:	893a      	ldrh	r2, [r7, #8]
 8003e56:	8979      	ldrh	r1, [r7, #10]
 8003e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5a:	9301      	str	r3, [sp, #4]
 8003e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e5e:	9300      	str	r3, [sp, #0]
 8003e60:	4603      	mov	r3, r0
 8003e62:	68f8      	ldr	r0, [r7, #12]
 8003e64:	f000 fa52 	bl	800430c <I2C_RequestMemoryRead>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d001      	beq.n	8003e72 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e1b0      	b.n	80041d4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d113      	bne.n	8003ea2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	623b      	str	r3, [r7, #32]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	695b      	ldr	r3, [r3, #20]
 8003e84:	623b      	str	r3, [r7, #32]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	699b      	ldr	r3, [r3, #24]
 8003e8c:	623b      	str	r3, [r7, #32]
 8003e8e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e9e:	601a      	str	r2, [r3, #0]
 8003ea0:	e184      	b.n	80041ac <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d11b      	bne.n	8003ee2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003eb8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eba:	2300      	movs	r3, #0
 8003ebc:	61fb      	str	r3, [r7, #28]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	695b      	ldr	r3, [r3, #20]
 8003ec4:	61fb      	str	r3, [r7, #28]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	699b      	ldr	r3, [r3, #24]
 8003ecc:	61fb      	str	r3, [r7, #28]
 8003ece:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ede:	601a      	str	r2, [r3, #0]
 8003ee0:	e164      	b.n	80041ac <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d11b      	bne.n	8003f22 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ef8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f08:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	61bb      	str	r3, [r7, #24]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	695b      	ldr	r3, [r3, #20]
 8003f14:	61bb      	str	r3, [r7, #24]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	699b      	ldr	r3, [r3, #24]
 8003f1c:	61bb      	str	r3, [r7, #24]
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	e144      	b.n	80041ac <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f22:	2300      	movs	r3, #0
 8003f24:	617b      	str	r3, [r7, #20]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	695b      	ldr	r3, [r3, #20]
 8003f2c:	617b      	str	r3, [r7, #20]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	699b      	ldr	r3, [r3, #24]
 8003f34:	617b      	str	r3, [r7, #20]
 8003f36:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003f38:	e138      	b.n	80041ac <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f3e:	2b03      	cmp	r3, #3
 8003f40:	f200 80f1 	bhi.w	8004126 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d123      	bne.n	8003f94 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f4e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003f50:	68f8      	ldr	r0, [r7, #12]
 8003f52:	f000 fc1b 	bl	800478c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d001      	beq.n	8003f60 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e139      	b.n	80041d4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	691a      	ldr	r2, [r3, #16]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6a:	b2d2      	uxtb	r2, r2
 8003f6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f72:	1c5a      	adds	r2, r3, #1
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f7c:	3b01      	subs	r3, #1
 8003f7e:	b29a      	uxth	r2, r3
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	b29a      	uxth	r2, r3
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f92:	e10b      	b.n	80041ac <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d14e      	bne.n	800403a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9e:	9300      	str	r3, [sp, #0]
 8003fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	4906      	ldr	r1, [pc, #24]	; (8003fc0 <HAL_I2C_Mem_Read+0x22c>)
 8003fa6:	68f8      	ldr	r0, [r7, #12]
 8003fa8:	f000 fa98 	bl	80044dc <I2C_WaitOnFlagUntilTimeout>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d008      	beq.n	8003fc4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e10e      	b.n	80041d4 <HAL_I2C_Mem_Read+0x440>
 8003fb6:	bf00      	nop
 8003fb8:	00100002 	.word	0x00100002
 8003fbc:	ffff0000 	.word	0xffff0000
 8003fc0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fd2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	691a      	ldr	r2, [r3, #16]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fde:	b2d2      	uxtb	r2, r2
 8003fe0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe6:	1c5a      	adds	r2, r3, #1
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ff0:	3b01      	subs	r3, #1
 8003ff2:	b29a      	uxth	r2, r3
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	3b01      	subs	r3, #1
 8004000:	b29a      	uxth	r2, r3
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	691a      	ldr	r2, [r3, #16]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004010:	b2d2      	uxtb	r2, r2
 8004012:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004018:	1c5a      	adds	r2, r3, #1
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004022:	3b01      	subs	r3, #1
 8004024:	b29a      	uxth	r2, r3
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800402e:	b29b      	uxth	r3, r3
 8004030:	3b01      	subs	r3, #1
 8004032:	b29a      	uxth	r2, r3
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004038:	e0b8      	b.n	80041ac <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800403a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403c:	9300      	str	r3, [sp, #0]
 800403e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004040:	2200      	movs	r2, #0
 8004042:	4966      	ldr	r1, [pc, #408]	; (80041dc <HAL_I2C_Mem_Read+0x448>)
 8004044:	68f8      	ldr	r0, [r7, #12]
 8004046:	f000 fa49 	bl	80044dc <I2C_WaitOnFlagUntilTimeout>
 800404a:	4603      	mov	r3, r0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d001      	beq.n	8004054 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e0bf      	b.n	80041d4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004062:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	691a      	ldr	r2, [r3, #16]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406e:	b2d2      	uxtb	r2, r2
 8004070:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004076:	1c5a      	adds	r2, r3, #1
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004080:	3b01      	subs	r3, #1
 8004082:	b29a      	uxth	r2, r3
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800408c:	b29b      	uxth	r3, r3
 800408e:	3b01      	subs	r3, #1
 8004090:	b29a      	uxth	r2, r3
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004098:	9300      	str	r3, [sp, #0]
 800409a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800409c:	2200      	movs	r2, #0
 800409e:	494f      	ldr	r1, [pc, #316]	; (80041dc <HAL_I2C_Mem_Read+0x448>)
 80040a0:	68f8      	ldr	r0, [r7, #12]
 80040a2:	f000 fa1b 	bl	80044dc <I2C_WaitOnFlagUntilTimeout>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d001      	beq.n	80040b0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e091      	b.n	80041d4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	691a      	ldr	r2, [r3, #16]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ca:	b2d2      	uxtb	r2, r2
 80040cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d2:	1c5a      	adds	r2, r3, #1
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040dc:	3b01      	subs	r3, #1
 80040de:	b29a      	uxth	r2, r3
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	3b01      	subs	r3, #1
 80040ec:	b29a      	uxth	r2, r3
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	691a      	ldr	r2, [r3, #16]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fc:	b2d2      	uxtb	r2, r2
 80040fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004104:	1c5a      	adds	r2, r3, #1
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800410e:	3b01      	subs	r3, #1
 8004110:	b29a      	uxth	r2, r3
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800411a:	b29b      	uxth	r3, r3
 800411c:	3b01      	subs	r3, #1
 800411e:	b29a      	uxth	r2, r3
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004124:	e042      	b.n	80041ac <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004126:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004128:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800412a:	68f8      	ldr	r0, [r7, #12]
 800412c:	f000 fb2e 	bl	800478c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d001      	beq.n	800413a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e04c      	b.n	80041d4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	691a      	ldr	r2, [r3, #16]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004144:	b2d2      	uxtb	r2, r2
 8004146:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414c:	1c5a      	adds	r2, r3, #1
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004156:	3b01      	subs	r3, #1
 8004158:	b29a      	uxth	r2, r3
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004162:	b29b      	uxth	r3, r3
 8004164:	3b01      	subs	r3, #1
 8004166:	b29a      	uxth	r2, r3
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	f003 0304 	and.w	r3, r3, #4
 8004176:	2b04      	cmp	r3, #4
 8004178:	d118      	bne.n	80041ac <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	691a      	ldr	r2, [r3, #16]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004184:	b2d2      	uxtb	r2, r2
 8004186:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418c:	1c5a      	adds	r2, r3, #1
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004196:	3b01      	subs	r3, #1
 8004198:	b29a      	uxth	r2, r3
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	3b01      	subs	r3, #1
 80041a6:	b29a      	uxth	r2, r3
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	f47f aec2 	bne.w	8003f3a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2220      	movs	r2, #32
 80041ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80041ce:	2300      	movs	r3, #0
 80041d0:	e000      	b.n	80041d4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80041d2:	2302      	movs	r3, #2
  }
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3728      	adds	r7, #40	; 0x28
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	00010004 	.word	0x00010004

080041e0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b088      	sub	sp, #32
 80041e4:	af02      	add	r7, sp, #8
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	4608      	mov	r0, r1
 80041ea:	4611      	mov	r1, r2
 80041ec:	461a      	mov	r2, r3
 80041ee:	4603      	mov	r3, r0
 80041f0:	817b      	strh	r3, [r7, #10]
 80041f2:	460b      	mov	r3, r1
 80041f4:	813b      	strh	r3, [r7, #8]
 80041f6:	4613      	mov	r3, r2
 80041f8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004208:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800420a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420c:	9300      	str	r3, [sp, #0]
 800420e:	6a3b      	ldr	r3, [r7, #32]
 8004210:	2200      	movs	r2, #0
 8004212:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004216:	68f8      	ldr	r0, [r7, #12]
 8004218:	f000 f960 	bl	80044dc <I2C_WaitOnFlagUntilTimeout>
 800421c:	4603      	mov	r3, r0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00d      	beq.n	800423e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800422c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004230:	d103      	bne.n	800423a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004238:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e05f      	b.n	80042fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800423e:	897b      	ldrh	r3, [r7, #10]
 8004240:	b2db      	uxtb	r3, r3
 8004242:	461a      	mov	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800424c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800424e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004250:	6a3a      	ldr	r2, [r7, #32]
 8004252:	492d      	ldr	r1, [pc, #180]	; (8004308 <I2C_RequestMemoryWrite+0x128>)
 8004254:	68f8      	ldr	r0, [r7, #12]
 8004256:	f000 f998 	bl	800458a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800425a:	4603      	mov	r3, r0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d001      	beq.n	8004264 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e04c      	b.n	80042fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004264:	2300      	movs	r3, #0
 8004266:	617b      	str	r3, [r7, #20]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	695b      	ldr	r3, [r3, #20]
 800426e:	617b      	str	r3, [r7, #20]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	699b      	ldr	r3, [r3, #24]
 8004276:	617b      	str	r3, [r7, #20]
 8004278:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800427a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800427c:	6a39      	ldr	r1, [r7, #32]
 800427e:	68f8      	ldr	r0, [r7, #12]
 8004280:	f000 fa02 	bl	8004688 <I2C_WaitOnTXEFlagUntilTimeout>
 8004284:	4603      	mov	r3, r0
 8004286:	2b00      	cmp	r3, #0
 8004288:	d00d      	beq.n	80042a6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428e:	2b04      	cmp	r3, #4
 8004290:	d107      	bne.n	80042a2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042a0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e02b      	b.n	80042fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80042a6:	88fb      	ldrh	r3, [r7, #6]
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d105      	bne.n	80042b8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80042ac:	893b      	ldrh	r3, [r7, #8]
 80042ae:	b2da      	uxtb	r2, r3
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	611a      	str	r2, [r3, #16]
 80042b6:	e021      	b.n	80042fc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80042b8:	893b      	ldrh	r3, [r7, #8]
 80042ba:	0a1b      	lsrs	r3, r3, #8
 80042bc:	b29b      	uxth	r3, r3
 80042be:	b2da      	uxtb	r2, r3
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042c8:	6a39      	ldr	r1, [r7, #32]
 80042ca:	68f8      	ldr	r0, [r7, #12]
 80042cc:	f000 f9dc 	bl	8004688 <I2C_WaitOnTXEFlagUntilTimeout>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d00d      	beq.n	80042f2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042da:	2b04      	cmp	r3, #4
 80042dc:	d107      	bne.n	80042ee <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042ec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e005      	b.n	80042fe <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80042f2:	893b      	ldrh	r3, [r7, #8]
 80042f4:	b2da      	uxtb	r2, r3
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3718      	adds	r7, #24
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	00010002 	.word	0x00010002

0800430c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b088      	sub	sp, #32
 8004310:	af02      	add	r7, sp, #8
 8004312:	60f8      	str	r0, [r7, #12]
 8004314:	4608      	mov	r0, r1
 8004316:	4611      	mov	r1, r2
 8004318:	461a      	mov	r2, r3
 800431a:	4603      	mov	r3, r0
 800431c:	817b      	strh	r3, [r7, #10]
 800431e:	460b      	mov	r3, r1
 8004320:	813b      	strh	r3, [r7, #8]
 8004322:	4613      	mov	r3, r2
 8004324:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004334:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004344:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004348:	9300      	str	r3, [sp, #0]
 800434a:	6a3b      	ldr	r3, [r7, #32]
 800434c:	2200      	movs	r2, #0
 800434e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004352:	68f8      	ldr	r0, [r7, #12]
 8004354:	f000 f8c2 	bl	80044dc <I2C_WaitOnFlagUntilTimeout>
 8004358:	4603      	mov	r3, r0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d00d      	beq.n	800437a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004368:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800436c:	d103      	bne.n	8004376 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004374:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e0aa      	b.n	80044d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800437a:	897b      	ldrh	r3, [r7, #10]
 800437c:	b2db      	uxtb	r3, r3
 800437e:	461a      	mov	r2, r3
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004388:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800438a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438c:	6a3a      	ldr	r2, [r7, #32]
 800438e:	4952      	ldr	r1, [pc, #328]	; (80044d8 <I2C_RequestMemoryRead+0x1cc>)
 8004390:	68f8      	ldr	r0, [r7, #12]
 8004392:	f000 f8fa 	bl	800458a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d001      	beq.n	80043a0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	e097      	b.n	80044d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043a0:	2300      	movs	r3, #0
 80043a2:	617b      	str	r3, [r7, #20]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	695b      	ldr	r3, [r3, #20]
 80043aa:	617b      	str	r3, [r7, #20]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	699b      	ldr	r3, [r3, #24]
 80043b2:	617b      	str	r3, [r7, #20]
 80043b4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043b8:	6a39      	ldr	r1, [r7, #32]
 80043ba:	68f8      	ldr	r0, [r7, #12]
 80043bc:	f000 f964 	bl	8004688 <I2C_WaitOnTXEFlagUntilTimeout>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d00d      	beq.n	80043e2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ca:	2b04      	cmp	r3, #4
 80043cc:	d107      	bne.n	80043de <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043dc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e076      	b.n	80044d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80043e2:	88fb      	ldrh	r3, [r7, #6]
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d105      	bne.n	80043f4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80043e8:	893b      	ldrh	r3, [r7, #8]
 80043ea:	b2da      	uxtb	r2, r3
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	611a      	str	r2, [r3, #16]
 80043f2:	e021      	b.n	8004438 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80043f4:	893b      	ldrh	r3, [r7, #8]
 80043f6:	0a1b      	lsrs	r3, r3, #8
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	b2da      	uxtb	r2, r3
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004402:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004404:	6a39      	ldr	r1, [r7, #32]
 8004406:	68f8      	ldr	r0, [r7, #12]
 8004408:	f000 f93e 	bl	8004688 <I2C_WaitOnTXEFlagUntilTimeout>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d00d      	beq.n	800442e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004416:	2b04      	cmp	r3, #4
 8004418:	d107      	bne.n	800442a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004428:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e050      	b.n	80044d0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800442e:	893b      	ldrh	r3, [r7, #8]
 8004430:	b2da      	uxtb	r2, r3
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800443a:	6a39      	ldr	r1, [r7, #32]
 800443c:	68f8      	ldr	r0, [r7, #12]
 800443e:	f000 f923 	bl	8004688 <I2C_WaitOnTXEFlagUntilTimeout>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d00d      	beq.n	8004464 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444c:	2b04      	cmp	r3, #4
 800444e:	d107      	bne.n	8004460 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800445e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e035      	b.n	80044d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004472:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004476:	9300      	str	r3, [sp, #0]
 8004478:	6a3b      	ldr	r3, [r7, #32]
 800447a:	2200      	movs	r2, #0
 800447c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004480:	68f8      	ldr	r0, [r7, #12]
 8004482:	f000 f82b 	bl	80044dc <I2C_WaitOnFlagUntilTimeout>
 8004486:	4603      	mov	r3, r0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d00d      	beq.n	80044a8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004496:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800449a:	d103      	bne.n	80044a4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	e013      	b.n	80044d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80044a8:	897b      	ldrh	r3, [r7, #10]
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	f043 0301 	orr.w	r3, r3, #1
 80044b0:	b2da      	uxtb	r2, r3
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80044b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ba:	6a3a      	ldr	r2, [r7, #32]
 80044bc:	4906      	ldr	r1, [pc, #24]	; (80044d8 <I2C_RequestMemoryRead+0x1cc>)
 80044be:	68f8      	ldr	r0, [r7, #12]
 80044c0:	f000 f863 	bl	800458a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044c4:	4603      	mov	r3, r0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d001      	beq.n	80044ce <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e000      	b.n	80044d0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80044ce:	2300      	movs	r3, #0
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3718      	adds	r7, #24
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	00010002 	.word	0x00010002

080044dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b084      	sub	sp, #16
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	60f8      	str	r0, [r7, #12]
 80044e4:	60b9      	str	r1, [r7, #8]
 80044e6:	603b      	str	r3, [r7, #0]
 80044e8:	4613      	mov	r3, r2
 80044ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044ec:	e025      	b.n	800453a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044f4:	d021      	beq.n	800453a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044f6:	f7fe facb 	bl	8002a90 <HAL_GetTick>
 80044fa:	4602      	mov	r2, r0
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	683a      	ldr	r2, [r7, #0]
 8004502:	429a      	cmp	r2, r3
 8004504:	d302      	bcc.n	800450c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d116      	bne.n	800453a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2200      	movs	r2, #0
 8004510:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2220      	movs	r2, #32
 8004516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2200      	movs	r2, #0
 800451e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004526:	f043 0220 	orr.w	r2, r3, #32
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2200      	movs	r2, #0
 8004532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e023      	b.n	8004582 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	0c1b      	lsrs	r3, r3, #16
 800453e:	b2db      	uxtb	r3, r3
 8004540:	2b01      	cmp	r3, #1
 8004542:	d10d      	bne.n	8004560 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	695b      	ldr	r3, [r3, #20]
 800454a:	43da      	mvns	r2, r3
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	4013      	ands	r3, r2
 8004550:	b29b      	uxth	r3, r3
 8004552:	2b00      	cmp	r3, #0
 8004554:	bf0c      	ite	eq
 8004556:	2301      	moveq	r3, #1
 8004558:	2300      	movne	r3, #0
 800455a:	b2db      	uxtb	r3, r3
 800455c:	461a      	mov	r2, r3
 800455e:	e00c      	b.n	800457a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	43da      	mvns	r2, r3
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	4013      	ands	r3, r2
 800456c:	b29b      	uxth	r3, r3
 800456e:	2b00      	cmp	r3, #0
 8004570:	bf0c      	ite	eq
 8004572:	2301      	moveq	r3, #1
 8004574:	2300      	movne	r3, #0
 8004576:	b2db      	uxtb	r3, r3
 8004578:	461a      	mov	r2, r3
 800457a:	79fb      	ldrb	r3, [r7, #7]
 800457c:	429a      	cmp	r2, r3
 800457e:	d0b6      	beq.n	80044ee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004580:	2300      	movs	r3, #0
}
 8004582:	4618      	mov	r0, r3
 8004584:	3710      	adds	r7, #16
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}

0800458a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800458a:	b580      	push	{r7, lr}
 800458c:	b084      	sub	sp, #16
 800458e:	af00      	add	r7, sp, #0
 8004590:	60f8      	str	r0, [r7, #12]
 8004592:	60b9      	str	r1, [r7, #8]
 8004594:	607a      	str	r2, [r7, #4]
 8004596:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004598:	e051      	b.n	800463e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	695b      	ldr	r3, [r3, #20]
 80045a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045a8:	d123      	bne.n	80045f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045b8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80045c2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2200      	movs	r2, #0
 80045c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2220      	movs	r2, #32
 80045ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045de:	f043 0204 	orr.w	r2, r3, #4
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e046      	b.n	8004680 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045f8:	d021      	beq.n	800463e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045fa:	f7fe fa49 	bl	8002a90 <HAL_GetTick>
 80045fe:	4602      	mov	r2, r0
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	429a      	cmp	r2, r3
 8004608:	d302      	bcc.n	8004610 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d116      	bne.n	800463e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2200      	movs	r2, #0
 8004614:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2220      	movs	r2, #32
 800461a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2200      	movs	r2, #0
 8004622:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462a:	f043 0220 	orr.w	r2, r3, #32
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2200      	movs	r2, #0
 8004636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e020      	b.n	8004680 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	0c1b      	lsrs	r3, r3, #16
 8004642:	b2db      	uxtb	r3, r3
 8004644:	2b01      	cmp	r3, #1
 8004646:	d10c      	bne.n	8004662 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	695b      	ldr	r3, [r3, #20]
 800464e:	43da      	mvns	r2, r3
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	4013      	ands	r3, r2
 8004654:	b29b      	uxth	r3, r3
 8004656:	2b00      	cmp	r3, #0
 8004658:	bf14      	ite	ne
 800465a:	2301      	movne	r3, #1
 800465c:	2300      	moveq	r3, #0
 800465e:	b2db      	uxtb	r3, r3
 8004660:	e00b      	b.n	800467a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	699b      	ldr	r3, [r3, #24]
 8004668:	43da      	mvns	r2, r3
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	4013      	ands	r3, r2
 800466e:	b29b      	uxth	r3, r3
 8004670:	2b00      	cmp	r3, #0
 8004672:	bf14      	ite	ne
 8004674:	2301      	movne	r3, #1
 8004676:	2300      	moveq	r3, #0
 8004678:	b2db      	uxtb	r3, r3
 800467a:	2b00      	cmp	r3, #0
 800467c:	d18d      	bne.n	800459a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	3710      	adds	r7, #16
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004694:	e02d      	b.n	80046f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004696:	68f8      	ldr	r0, [r7, #12]
 8004698:	f000 f8ce 	bl	8004838 <I2C_IsAcknowledgeFailed>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d001      	beq.n	80046a6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e02d      	b.n	8004702 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ac:	d021      	beq.n	80046f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046ae:	f7fe f9ef 	bl	8002a90 <HAL_GetTick>
 80046b2:	4602      	mov	r2, r0
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	1ad3      	subs	r3, r2, r3
 80046b8:	68ba      	ldr	r2, [r7, #8]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d302      	bcc.n	80046c4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d116      	bne.n	80046f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2200      	movs	r2, #0
 80046c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2220      	movs	r2, #32
 80046ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2200      	movs	r2, #0
 80046d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046de:	f043 0220 	orr.w	r2, r3, #32
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e007      	b.n	8004702 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	695b      	ldr	r3, [r3, #20]
 80046f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046fc:	2b80      	cmp	r3, #128	; 0x80
 80046fe:	d1ca      	bne.n	8004696 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004700:	2300      	movs	r3, #0
}
 8004702:	4618      	mov	r0, r3
 8004704:	3710      	adds	r7, #16
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}

0800470a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800470a:	b580      	push	{r7, lr}
 800470c:	b084      	sub	sp, #16
 800470e:	af00      	add	r7, sp, #0
 8004710:	60f8      	str	r0, [r7, #12]
 8004712:	60b9      	str	r1, [r7, #8]
 8004714:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004716:	e02d      	b.n	8004774 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004718:	68f8      	ldr	r0, [r7, #12]
 800471a:	f000 f88d 	bl	8004838 <I2C_IsAcknowledgeFailed>
 800471e:	4603      	mov	r3, r0
 8004720:	2b00      	cmp	r3, #0
 8004722:	d001      	beq.n	8004728 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e02d      	b.n	8004784 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800472e:	d021      	beq.n	8004774 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004730:	f7fe f9ae 	bl	8002a90 <HAL_GetTick>
 8004734:	4602      	mov	r2, r0
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	68ba      	ldr	r2, [r7, #8]
 800473c:	429a      	cmp	r2, r3
 800473e:	d302      	bcc.n	8004746 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d116      	bne.n	8004774 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2200      	movs	r2, #0
 800474a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2220      	movs	r2, #32
 8004750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2200      	movs	r2, #0
 8004758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004760:	f043 0220 	orr.w	r2, r3, #32
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2200      	movs	r2, #0
 800476c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e007      	b.n	8004784 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	695b      	ldr	r3, [r3, #20]
 800477a:	f003 0304 	and.w	r3, r3, #4
 800477e:	2b04      	cmp	r3, #4
 8004780:	d1ca      	bne.n	8004718 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004782:	2300      	movs	r3, #0
}
 8004784:	4618      	mov	r0, r3
 8004786:	3710      	adds	r7, #16
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}

0800478c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b084      	sub	sp, #16
 8004790:	af00      	add	r7, sp, #0
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004798:	e042      	b.n	8004820 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	695b      	ldr	r3, [r3, #20]
 80047a0:	f003 0310 	and.w	r3, r3, #16
 80047a4:	2b10      	cmp	r3, #16
 80047a6:	d119      	bne.n	80047dc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f06f 0210 	mvn.w	r2, #16
 80047b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2200      	movs	r2, #0
 80047b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2220      	movs	r2, #32
 80047bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2200      	movs	r2, #0
 80047c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2200      	movs	r2, #0
 80047d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e029      	b.n	8004830 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047dc:	f7fe f958 	bl	8002a90 <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	68ba      	ldr	r2, [r7, #8]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d302      	bcc.n	80047f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d116      	bne.n	8004820 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2200      	movs	r2, #0
 80047f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2220      	movs	r2, #32
 80047fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2200      	movs	r2, #0
 8004804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480c:	f043 0220 	orr.w	r2, r3, #32
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2200      	movs	r2, #0
 8004818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e007      	b.n	8004830 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	695b      	ldr	r3, [r3, #20]
 8004826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800482a:	2b40      	cmp	r3, #64	; 0x40
 800482c:	d1b5      	bne.n	800479a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800482e:	2300      	movs	r3, #0
}
 8004830:	4618      	mov	r0, r3
 8004832:	3710      	adds	r7, #16
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}

08004838 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	695b      	ldr	r3, [r3, #20]
 8004846:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800484a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800484e:	d11b      	bne.n	8004888 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004858:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2220      	movs	r2, #32
 8004864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004874:	f043 0204 	orr.w	r2, r3, #4
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e000      	b.n	800488a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004888:	2300      	movs	r3, #0
}
 800488a:	4618      	mov	r0, r3
 800488c:	370c      	adds	r7, #12
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr
	...

08004898 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b086      	sub	sp, #24
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d101      	bne.n	80048aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e264      	b.n	8004d74 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0301 	and.w	r3, r3, #1
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d075      	beq.n	80049a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80048b6:	4ba3      	ldr	r3, [pc, #652]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	f003 030c 	and.w	r3, r3, #12
 80048be:	2b04      	cmp	r3, #4
 80048c0:	d00c      	beq.n	80048dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048c2:	4ba0      	ldr	r3, [pc, #640]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80048ca:	2b08      	cmp	r3, #8
 80048cc:	d112      	bne.n	80048f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048ce:	4b9d      	ldr	r3, [pc, #628]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048da:	d10b      	bne.n	80048f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048dc:	4b99      	ldr	r3, [pc, #612]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d05b      	beq.n	80049a0 <HAL_RCC_OscConfig+0x108>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d157      	bne.n	80049a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e23f      	b.n	8004d74 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048fc:	d106      	bne.n	800490c <HAL_RCC_OscConfig+0x74>
 80048fe:	4b91      	ldr	r3, [pc, #580]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a90      	ldr	r2, [pc, #576]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 8004904:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004908:	6013      	str	r3, [r2, #0]
 800490a:	e01d      	b.n	8004948 <HAL_RCC_OscConfig+0xb0>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004914:	d10c      	bne.n	8004930 <HAL_RCC_OscConfig+0x98>
 8004916:	4b8b      	ldr	r3, [pc, #556]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a8a      	ldr	r2, [pc, #552]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 800491c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004920:	6013      	str	r3, [r2, #0]
 8004922:	4b88      	ldr	r3, [pc, #544]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a87      	ldr	r2, [pc, #540]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 8004928:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800492c:	6013      	str	r3, [r2, #0]
 800492e:	e00b      	b.n	8004948 <HAL_RCC_OscConfig+0xb0>
 8004930:	4b84      	ldr	r3, [pc, #528]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a83      	ldr	r2, [pc, #524]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 8004936:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800493a:	6013      	str	r3, [r2, #0]
 800493c:	4b81      	ldr	r3, [pc, #516]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a80      	ldr	r2, [pc, #512]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 8004942:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004946:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d013      	beq.n	8004978 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004950:	f7fe f89e 	bl	8002a90 <HAL_GetTick>
 8004954:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004956:	e008      	b.n	800496a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004958:	f7fe f89a 	bl	8002a90 <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	2b64      	cmp	r3, #100	; 0x64
 8004964:	d901      	bls.n	800496a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e204      	b.n	8004d74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800496a:	4b76      	ldr	r3, [pc, #472]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d0f0      	beq.n	8004958 <HAL_RCC_OscConfig+0xc0>
 8004976:	e014      	b.n	80049a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004978:	f7fe f88a 	bl	8002a90 <HAL_GetTick>
 800497c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800497e:	e008      	b.n	8004992 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004980:	f7fe f886 	bl	8002a90 <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	2b64      	cmp	r3, #100	; 0x64
 800498c:	d901      	bls.n	8004992 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	e1f0      	b.n	8004d74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004992:	4b6c      	ldr	r3, [pc, #432]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d1f0      	bne.n	8004980 <HAL_RCC_OscConfig+0xe8>
 800499e:	e000      	b.n	80049a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0302 	and.w	r3, r3, #2
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d063      	beq.n	8004a76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049ae:	4b65      	ldr	r3, [pc, #404]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	f003 030c 	and.w	r3, r3, #12
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d00b      	beq.n	80049d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049ba:	4b62      	ldr	r3, [pc, #392]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049c2:	2b08      	cmp	r3, #8
 80049c4:	d11c      	bne.n	8004a00 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049c6:	4b5f      	ldr	r3, [pc, #380]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d116      	bne.n	8004a00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049d2:	4b5c      	ldr	r3, [pc, #368]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0302 	and.w	r3, r3, #2
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d005      	beq.n	80049ea <HAL_RCC_OscConfig+0x152>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d001      	beq.n	80049ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e1c4      	b.n	8004d74 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049ea:	4b56      	ldr	r3, [pc, #344]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	00db      	lsls	r3, r3, #3
 80049f8:	4952      	ldr	r1, [pc, #328]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 80049fa:	4313      	orrs	r3, r2
 80049fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049fe:	e03a      	b.n	8004a76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d020      	beq.n	8004a4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a08:	4b4f      	ldr	r3, [pc, #316]	; (8004b48 <HAL_RCC_OscConfig+0x2b0>)
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a0e:	f7fe f83f 	bl	8002a90 <HAL_GetTick>
 8004a12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a14:	e008      	b.n	8004a28 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a16:	f7fe f83b 	bl	8002a90 <HAL_GetTick>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	d901      	bls.n	8004a28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004a24:	2303      	movs	r3, #3
 8004a26:	e1a5      	b.n	8004d74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a28:	4b46      	ldr	r3, [pc, #280]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0302 	and.w	r3, r3, #2
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d0f0      	beq.n	8004a16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a34:	4b43      	ldr	r3, [pc, #268]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	691b      	ldr	r3, [r3, #16]
 8004a40:	00db      	lsls	r3, r3, #3
 8004a42:	4940      	ldr	r1, [pc, #256]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 8004a44:	4313      	orrs	r3, r2
 8004a46:	600b      	str	r3, [r1, #0]
 8004a48:	e015      	b.n	8004a76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a4a:	4b3f      	ldr	r3, [pc, #252]	; (8004b48 <HAL_RCC_OscConfig+0x2b0>)
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a50:	f7fe f81e 	bl	8002a90 <HAL_GetTick>
 8004a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a56:	e008      	b.n	8004a6a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a58:	f7fe f81a 	bl	8002a90 <HAL_GetTick>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d901      	bls.n	8004a6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	e184      	b.n	8004d74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a6a:	4b36      	ldr	r3, [pc, #216]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0302 	and.w	r3, r3, #2
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d1f0      	bne.n	8004a58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0308 	and.w	r3, r3, #8
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d030      	beq.n	8004ae4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	695b      	ldr	r3, [r3, #20]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d016      	beq.n	8004ab8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a8a:	4b30      	ldr	r3, [pc, #192]	; (8004b4c <HAL_RCC_OscConfig+0x2b4>)
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a90:	f7fd fffe 	bl	8002a90 <HAL_GetTick>
 8004a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a96:	e008      	b.n	8004aaa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a98:	f7fd fffa 	bl	8002a90 <HAL_GetTick>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	2b02      	cmp	r3, #2
 8004aa4:	d901      	bls.n	8004aaa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e164      	b.n	8004d74 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004aaa:	4b26      	ldr	r3, [pc, #152]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 8004aac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004aae:	f003 0302 	and.w	r3, r3, #2
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d0f0      	beq.n	8004a98 <HAL_RCC_OscConfig+0x200>
 8004ab6:	e015      	b.n	8004ae4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ab8:	4b24      	ldr	r3, [pc, #144]	; (8004b4c <HAL_RCC_OscConfig+0x2b4>)
 8004aba:	2200      	movs	r2, #0
 8004abc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004abe:	f7fd ffe7 	bl	8002a90 <HAL_GetTick>
 8004ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ac4:	e008      	b.n	8004ad8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ac6:	f7fd ffe3 	bl	8002a90 <HAL_GetTick>
 8004aca:	4602      	mov	r2, r0
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	1ad3      	subs	r3, r2, r3
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	d901      	bls.n	8004ad8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004ad4:	2303      	movs	r3, #3
 8004ad6:	e14d      	b.n	8004d74 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ad8:	4b1a      	ldr	r3, [pc, #104]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 8004ada:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004adc:	f003 0302 	and.w	r3, r3, #2
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d1f0      	bne.n	8004ac6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 0304 	and.w	r3, r3, #4
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	f000 80a0 	beq.w	8004c32 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004af2:	2300      	movs	r3, #0
 8004af4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004af6:	4b13      	ldr	r3, [pc, #76]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 8004af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d10f      	bne.n	8004b22 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b02:	2300      	movs	r3, #0
 8004b04:	60bb      	str	r3, [r7, #8]
 8004b06:	4b0f      	ldr	r3, [pc, #60]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 8004b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0a:	4a0e      	ldr	r2, [pc, #56]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 8004b0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b10:	6413      	str	r3, [r2, #64]	; 0x40
 8004b12:	4b0c      	ldr	r3, [pc, #48]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 8004b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b1a:	60bb      	str	r3, [r7, #8]
 8004b1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b22:	4b0b      	ldr	r3, [pc, #44]	; (8004b50 <HAL_RCC_OscConfig+0x2b8>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d121      	bne.n	8004b72 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b2e:	4b08      	ldr	r3, [pc, #32]	; (8004b50 <HAL_RCC_OscConfig+0x2b8>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a07      	ldr	r2, [pc, #28]	; (8004b50 <HAL_RCC_OscConfig+0x2b8>)
 8004b34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b3a:	f7fd ffa9 	bl	8002a90 <HAL_GetTick>
 8004b3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b40:	e011      	b.n	8004b66 <HAL_RCC_OscConfig+0x2ce>
 8004b42:	bf00      	nop
 8004b44:	40023800 	.word	0x40023800
 8004b48:	42470000 	.word	0x42470000
 8004b4c:	42470e80 	.word	0x42470e80
 8004b50:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b54:	f7fd ff9c 	bl	8002a90 <HAL_GetTick>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	d901      	bls.n	8004b66 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e106      	b.n	8004d74 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b66:	4b85      	ldr	r3, [pc, #532]	; (8004d7c <HAL_RCC_OscConfig+0x4e4>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d0f0      	beq.n	8004b54 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d106      	bne.n	8004b88 <HAL_RCC_OscConfig+0x2f0>
 8004b7a:	4b81      	ldr	r3, [pc, #516]	; (8004d80 <HAL_RCC_OscConfig+0x4e8>)
 8004b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b7e:	4a80      	ldr	r2, [pc, #512]	; (8004d80 <HAL_RCC_OscConfig+0x4e8>)
 8004b80:	f043 0301 	orr.w	r3, r3, #1
 8004b84:	6713      	str	r3, [r2, #112]	; 0x70
 8004b86:	e01c      	b.n	8004bc2 <HAL_RCC_OscConfig+0x32a>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	2b05      	cmp	r3, #5
 8004b8e:	d10c      	bne.n	8004baa <HAL_RCC_OscConfig+0x312>
 8004b90:	4b7b      	ldr	r3, [pc, #492]	; (8004d80 <HAL_RCC_OscConfig+0x4e8>)
 8004b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b94:	4a7a      	ldr	r2, [pc, #488]	; (8004d80 <HAL_RCC_OscConfig+0x4e8>)
 8004b96:	f043 0304 	orr.w	r3, r3, #4
 8004b9a:	6713      	str	r3, [r2, #112]	; 0x70
 8004b9c:	4b78      	ldr	r3, [pc, #480]	; (8004d80 <HAL_RCC_OscConfig+0x4e8>)
 8004b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ba0:	4a77      	ldr	r2, [pc, #476]	; (8004d80 <HAL_RCC_OscConfig+0x4e8>)
 8004ba2:	f043 0301 	orr.w	r3, r3, #1
 8004ba6:	6713      	str	r3, [r2, #112]	; 0x70
 8004ba8:	e00b      	b.n	8004bc2 <HAL_RCC_OscConfig+0x32a>
 8004baa:	4b75      	ldr	r3, [pc, #468]	; (8004d80 <HAL_RCC_OscConfig+0x4e8>)
 8004bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bae:	4a74      	ldr	r2, [pc, #464]	; (8004d80 <HAL_RCC_OscConfig+0x4e8>)
 8004bb0:	f023 0301 	bic.w	r3, r3, #1
 8004bb4:	6713      	str	r3, [r2, #112]	; 0x70
 8004bb6:	4b72      	ldr	r3, [pc, #456]	; (8004d80 <HAL_RCC_OscConfig+0x4e8>)
 8004bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bba:	4a71      	ldr	r2, [pc, #452]	; (8004d80 <HAL_RCC_OscConfig+0x4e8>)
 8004bbc:	f023 0304 	bic.w	r3, r3, #4
 8004bc0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d015      	beq.n	8004bf6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bca:	f7fd ff61 	bl	8002a90 <HAL_GetTick>
 8004bce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bd0:	e00a      	b.n	8004be8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bd2:	f7fd ff5d 	bl	8002a90 <HAL_GetTick>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d901      	bls.n	8004be8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004be4:	2303      	movs	r3, #3
 8004be6:	e0c5      	b.n	8004d74 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004be8:	4b65      	ldr	r3, [pc, #404]	; (8004d80 <HAL_RCC_OscConfig+0x4e8>)
 8004bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bec:	f003 0302 	and.w	r3, r3, #2
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d0ee      	beq.n	8004bd2 <HAL_RCC_OscConfig+0x33a>
 8004bf4:	e014      	b.n	8004c20 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bf6:	f7fd ff4b 	bl	8002a90 <HAL_GetTick>
 8004bfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bfc:	e00a      	b.n	8004c14 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bfe:	f7fd ff47 	bl	8002a90 <HAL_GetTick>
 8004c02:	4602      	mov	r2, r0
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d901      	bls.n	8004c14 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	e0af      	b.n	8004d74 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c14:	4b5a      	ldr	r3, [pc, #360]	; (8004d80 <HAL_RCC_OscConfig+0x4e8>)
 8004c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c18:	f003 0302 	and.w	r3, r3, #2
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d1ee      	bne.n	8004bfe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c20:	7dfb      	ldrb	r3, [r7, #23]
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d105      	bne.n	8004c32 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c26:	4b56      	ldr	r3, [pc, #344]	; (8004d80 <HAL_RCC_OscConfig+0x4e8>)
 8004c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2a:	4a55      	ldr	r2, [pc, #340]	; (8004d80 <HAL_RCC_OscConfig+0x4e8>)
 8004c2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c30:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	699b      	ldr	r3, [r3, #24]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	f000 809b 	beq.w	8004d72 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c3c:	4b50      	ldr	r3, [pc, #320]	; (8004d80 <HAL_RCC_OscConfig+0x4e8>)
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	f003 030c 	and.w	r3, r3, #12
 8004c44:	2b08      	cmp	r3, #8
 8004c46:	d05c      	beq.n	8004d02 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	699b      	ldr	r3, [r3, #24]
 8004c4c:	2b02      	cmp	r3, #2
 8004c4e:	d141      	bne.n	8004cd4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c50:	4b4c      	ldr	r3, [pc, #304]	; (8004d84 <HAL_RCC_OscConfig+0x4ec>)
 8004c52:	2200      	movs	r2, #0
 8004c54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c56:	f7fd ff1b 	bl	8002a90 <HAL_GetTick>
 8004c5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c5c:	e008      	b.n	8004c70 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c5e:	f7fd ff17 	bl	8002a90 <HAL_GetTick>
 8004c62:	4602      	mov	r2, r0
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	1ad3      	subs	r3, r2, r3
 8004c68:	2b02      	cmp	r3, #2
 8004c6a:	d901      	bls.n	8004c70 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004c6c:	2303      	movs	r3, #3
 8004c6e:	e081      	b.n	8004d74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c70:	4b43      	ldr	r3, [pc, #268]	; (8004d80 <HAL_RCC_OscConfig+0x4e8>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d1f0      	bne.n	8004c5e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	69da      	ldr	r2, [r3, #28]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6a1b      	ldr	r3, [r3, #32]
 8004c84:	431a      	orrs	r2, r3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8a:	019b      	lsls	r3, r3, #6
 8004c8c:	431a      	orrs	r2, r3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c92:	085b      	lsrs	r3, r3, #1
 8004c94:	3b01      	subs	r3, #1
 8004c96:	041b      	lsls	r3, r3, #16
 8004c98:	431a      	orrs	r2, r3
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9e:	061b      	lsls	r3, r3, #24
 8004ca0:	4937      	ldr	r1, [pc, #220]	; (8004d80 <HAL_RCC_OscConfig+0x4e8>)
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ca6:	4b37      	ldr	r3, [pc, #220]	; (8004d84 <HAL_RCC_OscConfig+0x4ec>)
 8004ca8:	2201      	movs	r2, #1
 8004caa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cac:	f7fd fef0 	bl	8002a90 <HAL_GetTick>
 8004cb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cb2:	e008      	b.n	8004cc6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cb4:	f7fd feec 	bl	8002a90 <HAL_GetTick>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d901      	bls.n	8004cc6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	e056      	b.n	8004d74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cc6:	4b2e      	ldr	r3, [pc, #184]	; (8004d80 <HAL_RCC_OscConfig+0x4e8>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d0f0      	beq.n	8004cb4 <HAL_RCC_OscConfig+0x41c>
 8004cd2:	e04e      	b.n	8004d72 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cd4:	4b2b      	ldr	r3, [pc, #172]	; (8004d84 <HAL_RCC_OscConfig+0x4ec>)
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cda:	f7fd fed9 	bl	8002a90 <HAL_GetTick>
 8004cde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ce0:	e008      	b.n	8004cf4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ce2:	f7fd fed5 	bl	8002a90 <HAL_GetTick>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	d901      	bls.n	8004cf4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	e03f      	b.n	8004d74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cf4:	4b22      	ldr	r3, [pc, #136]	; (8004d80 <HAL_RCC_OscConfig+0x4e8>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d1f0      	bne.n	8004ce2 <HAL_RCC_OscConfig+0x44a>
 8004d00:	e037      	b.n	8004d72 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	699b      	ldr	r3, [r3, #24]
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d101      	bne.n	8004d0e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e032      	b.n	8004d74 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d0e:	4b1c      	ldr	r3, [pc, #112]	; (8004d80 <HAL_RCC_OscConfig+0x4e8>)
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	699b      	ldr	r3, [r3, #24]
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d028      	beq.n	8004d6e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d121      	bne.n	8004d6e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d11a      	bne.n	8004d6e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d38:	68fa      	ldr	r2, [r7, #12]
 8004d3a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d3e:	4013      	ands	r3, r2
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d44:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d111      	bne.n	8004d6e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d54:	085b      	lsrs	r3, r3, #1
 8004d56:	3b01      	subs	r3, #1
 8004d58:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d107      	bne.n	8004d6e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d68:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d001      	beq.n	8004d72 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e000      	b.n	8004d74 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004d72:	2300      	movs	r3, #0
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3718      	adds	r7, #24
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}
 8004d7c:	40007000 	.word	0x40007000
 8004d80:	40023800 	.word	0x40023800
 8004d84:	42470060 	.word	0x42470060

08004d88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b084      	sub	sp, #16
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d101      	bne.n	8004d9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e0cc      	b.n	8004f36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d9c:	4b68      	ldr	r3, [pc, #416]	; (8004f40 <HAL_RCC_ClockConfig+0x1b8>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 0307 	and.w	r3, r3, #7
 8004da4:	683a      	ldr	r2, [r7, #0]
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d90c      	bls.n	8004dc4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004daa:	4b65      	ldr	r3, [pc, #404]	; (8004f40 <HAL_RCC_ClockConfig+0x1b8>)
 8004dac:	683a      	ldr	r2, [r7, #0]
 8004dae:	b2d2      	uxtb	r2, r2
 8004db0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004db2:	4b63      	ldr	r3, [pc, #396]	; (8004f40 <HAL_RCC_ClockConfig+0x1b8>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 0307 	and.w	r3, r3, #7
 8004dba:	683a      	ldr	r2, [r7, #0]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d001      	beq.n	8004dc4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e0b8      	b.n	8004f36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 0302 	and.w	r3, r3, #2
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d020      	beq.n	8004e12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 0304 	and.w	r3, r3, #4
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d005      	beq.n	8004de8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ddc:	4b59      	ldr	r3, [pc, #356]	; (8004f44 <HAL_RCC_ClockConfig+0x1bc>)
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	4a58      	ldr	r2, [pc, #352]	; (8004f44 <HAL_RCC_ClockConfig+0x1bc>)
 8004de2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004de6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 0308 	and.w	r3, r3, #8
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d005      	beq.n	8004e00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004df4:	4b53      	ldr	r3, [pc, #332]	; (8004f44 <HAL_RCC_ClockConfig+0x1bc>)
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	4a52      	ldr	r2, [pc, #328]	; (8004f44 <HAL_RCC_ClockConfig+0x1bc>)
 8004dfa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004dfe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e00:	4b50      	ldr	r3, [pc, #320]	; (8004f44 <HAL_RCC_ClockConfig+0x1bc>)
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	494d      	ldr	r1, [pc, #308]	; (8004f44 <HAL_RCC_ClockConfig+0x1bc>)
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 0301 	and.w	r3, r3, #1
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d044      	beq.n	8004ea8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d107      	bne.n	8004e36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e26:	4b47      	ldr	r3, [pc, #284]	; (8004f44 <HAL_RCC_ClockConfig+0x1bc>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d119      	bne.n	8004e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e07f      	b.n	8004f36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	2b02      	cmp	r3, #2
 8004e3c:	d003      	beq.n	8004e46 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e42:	2b03      	cmp	r3, #3
 8004e44:	d107      	bne.n	8004e56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e46:	4b3f      	ldr	r3, [pc, #252]	; (8004f44 <HAL_RCC_ClockConfig+0x1bc>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d109      	bne.n	8004e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e06f      	b.n	8004f36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e56:	4b3b      	ldr	r3, [pc, #236]	; (8004f44 <HAL_RCC_ClockConfig+0x1bc>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 0302 	and.w	r3, r3, #2
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d101      	bne.n	8004e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e067      	b.n	8004f36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e66:	4b37      	ldr	r3, [pc, #220]	; (8004f44 <HAL_RCC_ClockConfig+0x1bc>)
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	f023 0203 	bic.w	r2, r3, #3
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	4934      	ldr	r1, [pc, #208]	; (8004f44 <HAL_RCC_ClockConfig+0x1bc>)
 8004e74:	4313      	orrs	r3, r2
 8004e76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e78:	f7fd fe0a 	bl	8002a90 <HAL_GetTick>
 8004e7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e7e:	e00a      	b.n	8004e96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e80:	f7fd fe06 	bl	8002a90 <HAL_GetTick>
 8004e84:	4602      	mov	r2, r0
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d901      	bls.n	8004e96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	e04f      	b.n	8004f36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e96:	4b2b      	ldr	r3, [pc, #172]	; (8004f44 <HAL_RCC_ClockConfig+0x1bc>)
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	f003 020c 	and.w	r2, r3, #12
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	009b      	lsls	r3, r3, #2
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d1eb      	bne.n	8004e80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ea8:	4b25      	ldr	r3, [pc, #148]	; (8004f40 <HAL_RCC_ClockConfig+0x1b8>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 0307 	and.w	r3, r3, #7
 8004eb0:	683a      	ldr	r2, [r7, #0]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d20c      	bcs.n	8004ed0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eb6:	4b22      	ldr	r3, [pc, #136]	; (8004f40 <HAL_RCC_ClockConfig+0x1b8>)
 8004eb8:	683a      	ldr	r2, [r7, #0]
 8004eba:	b2d2      	uxtb	r2, r2
 8004ebc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ebe:	4b20      	ldr	r3, [pc, #128]	; (8004f40 <HAL_RCC_ClockConfig+0x1b8>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 0307 	and.w	r3, r3, #7
 8004ec6:	683a      	ldr	r2, [r7, #0]
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d001      	beq.n	8004ed0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e032      	b.n	8004f36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0304 	and.w	r3, r3, #4
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d008      	beq.n	8004eee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004edc:	4b19      	ldr	r3, [pc, #100]	; (8004f44 <HAL_RCC_ClockConfig+0x1bc>)
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	4916      	ldr	r1, [pc, #88]	; (8004f44 <HAL_RCC_ClockConfig+0x1bc>)
 8004eea:	4313      	orrs	r3, r2
 8004eec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0308 	and.w	r3, r3, #8
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d009      	beq.n	8004f0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004efa:	4b12      	ldr	r3, [pc, #72]	; (8004f44 <HAL_RCC_ClockConfig+0x1bc>)
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	691b      	ldr	r3, [r3, #16]
 8004f06:	00db      	lsls	r3, r3, #3
 8004f08:	490e      	ldr	r1, [pc, #56]	; (8004f44 <HAL_RCC_ClockConfig+0x1bc>)
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f0e:	f000 f821 	bl	8004f54 <HAL_RCC_GetSysClockFreq>
 8004f12:	4602      	mov	r2, r0
 8004f14:	4b0b      	ldr	r3, [pc, #44]	; (8004f44 <HAL_RCC_ClockConfig+0x1bc>)
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	091b      	lsrs	r3, r3, #4
 8004f1a:	f003 030f 	and.w	r3, r3, #15
 8004f1e:	490a      	ldr	r1, [pc, #40]	; (8004f48 <HAL_RCC_ClockConfig+0x1c0>)
 8004f20:	5ccb      	ldrb	r3, [r1, r3]
 8004f22:	fa22 f303 	lsr.w	r3, r2, r3
 8004f26:	4a09      	ldr	r2, [pc, #36]	; (8004f4c <HAL_RCC_ClockConfig+0x1c4>)
 8004f28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004f2a:	4b09      	ldr	r3, [pc, #36]	; (8004f50 <HAL_RCC_ClockConfig+0x1c8>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f7fd fd6a 	bl	8002a08 <HAL_InitTick>

  return HAL_OK;
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3710      	adds	r7, #16
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	40023c00 	.word	0x40023c00
 8004f44:	40023800 	.word	0x40023800
 8004f48:	0800b998 	.word	0x0800b998
 8004f4c:	20000004 	.word	0x20000004
 8004f50:	20000008 	.word	0x20000008

08004f54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f54:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004f58:	b084      	sub	sp, #16
 8004f5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	607b      	str	r3, [r7, #4]
 8004f60:	2300      	movs	r3, #0
 8004f62:	60fb      	str	r3, [r7, #12]
 8004f64:	2300      	movs	r3, #0
 8004f66:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f6c:	4b67      	ldr	r3, [pc, #412]	; (800510c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	f003 030c 	and.w	r3, r3, #12
 8004f74:	2b08      	cmp	r3, #8
 8004f76:	d00d      	beq.n	8004f94 <HAL_RCC_GetSysClockFreq+0x40>
 8004f78:	2b08      	cmp	r3, #8
 8004f7a:	f200 80bd 	bhi.w	80050f8 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d002      	beq.n	8004f88 <HAL_RCC_GetSysClockFreq+0x34>
 8004f82:	2b04      	cmp	r3, #4
 8004f84:	d003      	beq.n	8004f8e <HAL_RCC_GetSysClockFreq+0x3a>
 8004f86:	e0b7      	b.n	80050f8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f88:	4b61      	ldr	r3, [pc, #388]	; (8005110 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004f8a:	60bb      	str	r3, [r7, #8]
       break;
 8004f8c:	e0b7      	b.n	80050fe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f8e:	4b61      	ldr	r3, [pc, #388]	; (8005114 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004f90:	60bb      	str	r3, [r7, #8]
      break;
 8004f92:	e0b4      	b.n	80050fe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f94:	4b5d      	ldr	r3, [pc, #372]	; (800510c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f9c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f9e:	4b5b      	ldr	r3, [pc, #364]	; (800510c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d04d      	beq.n	8005046 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004faa:	4b58      	ldr	r3, [pc, #352]	; (800510c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	099b      	lsrs	r3, r3, #6
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	f04f 0300 	mov.w	r3, #0
 8004fb6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004fba:	f04f 0100 	mov.w	r1, #0
 8004fbe:	ea02 0800 	and.w	r8, r2, r0
 8004fc2:	ea03 0901 	and.w	r9, r3, r1
 8004fc6:	4640      	mov	r0, r8
 8004fc8:	4649      	mov	r1, r9
 8004fca:	f04f 0200 	mov.w	r2, #0
 8004fce:	f04f 0300 	mov.w	r3, #0
 8004fd2:	014b      	lsls	r3, r1, #5
 8004fd4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004fd8:	0142      	lsls	r2, r0, #5
 8004fda:	4610      	mov	r0, r2
 8004fdc:	4619      	mov	r1, r3
 8004fde:	ebb0 0008 	subs.w	r0, r0, r8
 8004fe2:	eb61 0109 	sbc.w	r1, r1, r9
 8004fe6:	f04f 0200 	mov.w	r2, #0
 8004fea:	f04f 0300 	mov.w	r3, #0
 8004fee:	018b      	lsls	r3, r1, #6
 8004ff0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004ff4:	0182      	lsls	r2, r0, #6
 8004ff6:	1a12      	subs	r2, r2, r0
 8004ff8:	eb63 0301 	sbc.w	r3, r3, r1
 8004ffc:	f04f 0000 	mov.w	r0, #0
 8005000:	f04f 0100 	mov.w	r1, #0
 8005004:	00d9      	lsls	r1, r3, #3
 8005006:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800500a:	00d0      	lsls	r0, r2, #3
 800500c:	4602      	mov	r2, r0
 800500e:	460b      	mov	r3, r1
 8005010:	eb12 0208 	adds.w	r2, r2, r8
 8005014:	eb43 0309 	adc.w	r3, r3, r9
 8005018:	f04f 0000 	mov.w	r0, #0
 800501c:	f04f 0100 	mov.w	r1, #0
 8005020:	0259      	lsls	r1, r3, #9
 8005022:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005026:	0250      	lsls	r0, r2, #9
 8005028:	4602      	mov	r2, r0
 800502a:	460b      	mov	r3, r1
 800502c:	4610      	mov	r0, r2
 800502e:	4619      	mov	r1, r3
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	461a      	mov	r2, r3
 8005034:	f04f 0300 	mov.w	r3, #0
 8005038:	f7fb fe26 	bl	8000c88 <__aeabi_uldivmod>
 800503c:	4602      	mov	r2, r0
 800503e:	460b      	mov	r3, r1
 8005040:	4613      	mov	r3, r2
 8005042:	60fb      	str	r3, [r7, #12]
 8005044:	e04a      	b.n	80050dc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005046:	4b31      	ldr	r3, [pc, #196]	; (800510c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	099b      	lsrs	r3, r3, #6
 800504c:	461a      	mov	r2, r3
 800504e:	f04f 0300 	mov.w	r3, #0
 8005052:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005056:	f04f 0100 	mov.w	r1, #0
 800505a:	ea02 0400 	and.w	r4, r2, r0
 800505e:	ea03 0501 	and.w	r5, r3, r1
 8005062:	4620      	mov	r0, r4
 8005064:	4629      	mov	r1, r5
 8005066:	f04f 0200 	mov.w	r2, #0
 800506a:	f04f 0300 	mov.w	r3, #0
 800506e:	014b      	lsls	r3, r1, #5
 8005070:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005074:	0142      	lsls	r2, r0, #5
 8005076:	4610      	mov	r0, r2
 8005078:	4619      	mov	r1, r3
 800507a:	1b00      	subs	r0, r0, r4
 800507c:	eb61 0105 	sbc.w	r1, r1, r5
 8005080:	f04f 0200 	mov.w	r2, #0
 8005084:	f04f 0300 	mov.w	r3, #0
 8005088:	018b      	lsls	r3, r1, #6
 800508a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800508e:	0182      	lsls	r2, r0, #6
 8005090:	1a12      	subs	r2, r2, r0
 8005092:	eb63 0301 	sbc.w	r3, r3, r1
 8005096:	f04f 0000 	mov.w	r0, #0
 800509a:	f04f 0100 	mov.w	r1, #0
 800509e:	00d9      	lsls	r1, r3, #3
 80050a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80050a4:	00d0      	lsls	r0, r2, #3
 80050a6:	4602      	mov	r2, r0
 80050a8:	460b      	mov	r3, r1
 80050aa:	1912      	adds	r2, r2, r4
 80050ac:	eb45 0303 	adc.w	r3, r5, r3
 80050b0:	f04f 0000 	mov.w	r0, #0
 80050b4:	f04f 0100 	mov.w	r1, #0
 80050b8:	0299      	lsls	r1, r3, #10
 80050ba:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80050be:	0290      	lsls	r0, r2, #10
 80050c0:	4602      	mov	r2, r0
 80050c2:	460b      	mov	r3, r1
 80050c4:	4610      	mov	r0, r2
 80050c6:	4619      	mov	r1, r3
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	461a      	mov	r2, r3
 80050cc:	f04f 0300 	mov.w	r3, #0
 80050d0:	f7fb fdda 	bl	8000c88 <__aeabi_uldivmod>
 80050d4:	4602      	mov	r2, r0
 80050d6:	460b      	mov	r3, r1
 80050d8:	4613      	mov	r3, r2
 80050da:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80050dc:	4b0b      	ldr	r3, [pc, #44]	; (800510c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	0c1b      	lsrs	r3, r3, #16
 80050e2:	f003 0303 	and.w	r3, r3, #3
 80050e6:	3301      	adds	r3, #1
 80050e8:	005b      	lsls	r3, r3, #1
 80050ea:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80050ec:	68fa      	ldr	r2, [r7, #12]
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80050f4:	60bb      	str	r3, [r7, #8]
      break;
 80050f6:	e002      	b.n	80050fe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80050f8:	4b05      	ldr	r3, [pc, #20]	; (8005110 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80050fa:	60bb      	str	r3, [r7, #8]
      break;
 80050fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80050fe:	68bb      	ldr	r3, [r7, #8]
}
 8005100:	4618      	mov	r0, r3
 8005102:	3710      	adds	r7, #16
 8005104:	46bd      	mov	sp, r7
 8005106:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800510a:	bf00      	nop
 800510c:	40023800 	.word	0x40023800
 8005110:	00f42400 	.word	0x00f42400
 8005114:	007a1200 	.word	0x007a1200

08005118 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005118:	b480      	push	{r7}
 800511a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800511c:	4b03      	ldr	r3, [pc, #12]	; (800512c <HAL_RCC_GetHCLKFreq+0x14>)
 800511e:	681b      	ldr	r3, [r3, #0]
}
 8005120:	4618      	mov	r0, r3
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr
 800512a:	bf00      	nop
 800512c:	20000004 	.word	0x20000004

08005130 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005134:	f7ff fff0 	bl	8005118 <HAL_RCC_GetHCLKFreq>
 8005138:	4602      	mov	r2, r0
 800513a:	4b05      	ldr	r3, [pc, #20]	; (8005150 <HAL_RCC_GetPCLK1Freq+0x20>)
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	0a9b      	lsrs	r3, r3, #10
 8005140:	f003 0307 	and.w	r3, r3, #7
 8005144:	4903      	ldr	r1, [pc, #12]	; (8005154 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005146:	5ccb      	ldrb	r3, [r1, r3]
 8005148:	fa22 f303 	lsr.w	r3, r2, r3
}
 800514c:	4618      	mov	r0, r3
 800514e:	bd80      	pop	{r7, pc}
 8005150:	40023800 	.word	0x40023800
 8005154:	0800b9a8 	.word	0x0800b9a8

08005158 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800515c:	f7ff ffdc 	bl	8005118 <HAL_RCC_GetHCLKFreq>
 8005160:	4602      	mov	r2, r0
 8005162:	4b05      	ldr	r3, [pc, #20]	; (8005178 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	0b5b      	lsrs	r3, r3, #13
 8005168:	f003 0307 	and.w	r3, r3, #7
 800516c:	4903      	ldr	r1, [pc, #12]	; (800517c <HAL_RCC_GetPCLK2Freq+0x24>)
 800516e:	5ccb      	ldrb	r3, [r1, r3]
 8005170:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005174:	4618      	mov	r0, r3
 8005176:	bd80      	pop	{r7, pc}
 8005178:	40023800 	.word	0x40023800
 800517c:	0800b9a8 	.word	0x0800b9a8

08005180 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b086      	sub	sp, #24
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005188:	2300      	movs	r3, #0
 800518a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800518c:	2300      	movs	r3, #0
 800518e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 0301 	and.w	r3, r3, #1
 8005198:	2b00      	cmp	r3, #0
 800519a:	d105      	bne.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d035      	beq.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80051a8:	4b62      	ldr	r3, [pc, #392]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80051aa:	2200      	movs	r2, #0
 80051ac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80051ae:	f7fd fc6f 	bl	8002a90 <HAL_GetTick>
 80051b2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80051b4:	e008      	b.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80051b6:	f7fd fc6b 	bl	8002a90 <HAL_GetTick>
 80051ba:	4602      	mov	r2, r0
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	1ad3      	subs	r3, r2, r3
 80051c0:	2b02      	cmp	r3, #2
 80051c2:	d901      	bls.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051c4:	2303      	movs	r3, #3
 80051c6:	e0b0      	b.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80051c8:	4b5b      	ldr	r3, [pc, #364]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d1f0      	bne.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	019a      	lsls	r2, r3, #6
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	071b      	lsls	r3, r3, #28
 80051e0:	4955      	ldr	r1, [pc, #340]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051e2:	4313      	orrs	r3, r2
 80051e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80051e8:	4b52      	ldr	r3, [pc, #328]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80051ea:	2201      	movs	r2, #1
 80051ec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80051ee:	f7fd fc4f 	bl	8002a90 <HAL_GetTick>
 80051f2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80051f4:	e008      	b.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80051f6:	f7fd fc4b 	bl	8002a90 <HAL_GetTick>
 80051fa:	4602      	mov	r2, r0
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	1ad3      	subs	r3, r2, r3
 8005200:	2b02      	cmp	r3, #2
 8005202:	d901      	bls.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005204:	2303      	movs	r3, #3
 8005206:	e090      	b.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005208:	4b4b      	ldr	r3, [pc, #300]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005210:	2b00      	cmp	r3, #0
 8005212:	d0f0      	beq.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 0302 	and.w	r3, r3, #2
 800521c:	2b00      	cmp	r3, #0
 800521e:	f000 8083 	beq.w	8005328 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005222:	2300      	movs	r3, #0
 8005224:	60fb      	str	r3, [r7, #12]
 8005226:	4b44      	ldr	r3, [pc, #272]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522a:	4a43      	ldr	r2, [pc, #268]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800522c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005230:	6413      	str	r3, [r2, #64]	; 0x40
 8005232:	4b41      	ldr	r3, [pc, #260]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800523a:	60fb      	str	r3, [r7, #12]
 800523c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800523e:	4b3f      	ldr	r3, [pc, #252]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a3e      	ldr	r2, [pc, #248]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005244:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005248:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800524a:	f7fd fc21 	bl	8002a90 <HAL_GetTick>
 800524e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005250:	e008      	b.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005252:	f7fd fc1d 	bl	8002a90 <HAL_GetTick>
 8005256:	4602      	mov	r2, r0
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	1ad3      	subs	r3, r2, r3
 800525c:	2b02      	cmp	r3, #2
 800525e:	d901      	bls.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005260:	2303      	movs	r3, #3
 8005262:	e062      	b.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005264:	4b35      	ldr	r3, [pc, #212]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800526c:	2b00      	cmp	r3, #0
 800526e:	d0f0      	beq.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005270:	4b31      	ldr	r3, [pc, #196]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005274:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005278:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d02f      	beq.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005288:	693a      	ldr	r2, [r7, #16]
 800528a:	429a      	cmp	r2, r3
 800528c:	d028      	beq.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800528e:	4b2a      	ldr	r3, [pc, #168]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005292:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005296:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005298:	4b29      	ldr	r3, [pc, #164]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800529a:	2201      	movs	r2, #1
 800529c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800529e:	4b28      	ldr	r3, [pc, #160]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80052a0:	2200      	movs	r2, #0
 80052a2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80052a4:	4a24      	ldr	r2, [pc, #144]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80052aa:	4b23      	ldr	r3, [pc, #140]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ae:	f003 0301 	and.w	r3, r3, #1
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d114      	bne.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80052b6:	f7fd fbeb 	bl	8002a90 <HAL_GetTick>
 80052ba:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052bc:	e00a      	b.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052be:	f7fd fbe7 	bl	8002a90 <HAL_GetTick>
 80052c2:	4602      	mov	r2, r0
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	1ad3      	subs	r3, r2, r3
 80052c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d901      	bls.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80052d0:	2303      	movs	r3, #3
 80052d2:	e02a      	b.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052d4:	4b18      	ldr	r3, [pc, #96]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052d8:	f003 0302 	and.w	r3, r3, #2
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d0ee      	beq.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052ec:	d10d      	bne.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80052ee:	4b12      	ldr	r3, [pc, #72]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80052fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005302:	490d      	ldr	r1, [pc, #52]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005304:	4313      	orrs	r3, r2
 8005306:	608b      	str	r3, [r1, #8]
 8005308:	e005      	b.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800530a:	4b0b      	ldr	r3, [pc, #44]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	4a0a      	ldr	r2, [pc, #40]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005310:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005314:	6093      	str	r3, [r2, #8]
 8005316:	4b08      	ldr	r3, [pc, #32]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005318:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	68db      	ldr	r3, [r3, #12]
 800531e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005322:	4905      	ldr	r1, [pc, #20]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005324:	4313      	orrs	r3, r2
 8005326:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005328:	2300      	movs	r3, #0
}
 800532a:	4618      	mov	r0, r3
 800532c:	3718      	adds	r7, #24
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
 8005332:	bf00      	nop
 8005334:	42470068 	.word	0x42470068
 8005338:	40023800 	.word	0x40023800
 800533c:	40007000 	.word	0x40007000
 8005340:	42470e40 	.word	0x42470e40

08005344 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b082      	sub	sp, #8
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d101      	bne.n	8005356 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e083      	b.n	800545e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	7f5b      	ldrb	r3, [r3, #29]
 800535a:	b2db      	uxtb	r3, r3
 800535c:	2b00      	cmp	r3, #0
 800535e:	d105      	bne.n	800536c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f7fd f908 	bl	800257c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2202      	movs	r2, #2
 8005370:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	22ca      	movs	r2, #202	; 0xca
 8005378:	625a      	str	r2, [r3, #36]	; 0x24
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	2253      	movs	r2, #83	; 0x53
 8005380:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 faa8 	bl	80058d8 <RTC_EnterInitMode>
 8005388:	4603      	mov	r3, r0
 800538a:	2b00      	cmp	r3, #0
 800538c:	d008      	beq.n	80053a0 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	22ff      	movs	r2, #255	; 0xff
 8005394:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2204      	movs	r2, #4
 800539a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e05e      	b.n	800545e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	6812      	ldr	r2, [r2, #0]
 80053aa:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80053ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053b2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	6899      	ldr	r1, [r3, #8]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	685a      	ldr	r2, [r3, #4]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	431a      	orrs	r2, r3
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	695b      	ldr	r3, [r3, #20]
 80053c8:	431a      	orrs	r2, r3
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	430a      	orrs	r2, r1
 80053d0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	68d2      	ldr	r2, [r2, #12]
 80053da:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	6919      	ldr	r1, [r3, #16]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	041a      	lsls	r2, r3, #16
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	430a      	orrs	r2, r1
 80053ee:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68da      	ldr	r2, [r3, #12]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053fe:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	f003 0320 	and.w	r3, r3, #32
 800540a:	2b00      	cmp	r3, #0
 800540c:	d10e      	bne.n	800542c <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f000 fa3a 	bl	8005888 <HAL_RTC_WaitForSynchro>
 8005414:	4603      	mov	r3, r0
 8005416:	2b00      	cmp	r3, #0
 8005418:	d008      	beq.n	800542c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	22ff      	movs	r2, #255	; 0xff
 8005420:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2204      	movs	r2, #4
 8005426:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	e018      	b.n	800545e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800543a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	699a      	ldr	r2, [r3, #24]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	430a      	orrs	r2, r1
 800544c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	22ff      	movs	r2, #255	; 0xff
 8005454:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2201      	movs	r2, #1
 800545a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800545c:	2300      	movs	r3, #0
  }
}
 800545e:	4618      	mov	r0, r3
 8005460:	3708      	adds	r7, #8
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}

08005466 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005466:	b590      	push	{r4, r7, lr}
 8005468:	b087      	sub	sp, #28
 800546a:	af00      	add	r7, sp, #0
 800546c:	60f8      	str	r0, [r7, #12]
 800546e:	60b9      	str	r1, [r7, #8]
 8005470:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005472:	2300      	movs	r3, #0
 8005474:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	7f1b      	ldrb	r3, [r3, #28]
 800547a:	2b01      	cmp	r3, #1
 800547c:	d101      	bne.n	8005482 <HAL_RTC_SetTime+0x1c>
 800547e:	2302      	movs	r3, #2
 8005480:	e0aa      	b.n	80055d8 <HAL_RTC_SetTime+0x172>
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2201      	movs	r2, #1
 8005486:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2202      	movs	r2, #2
 800548c:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d126      	bne.n	80054e2 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d102      	bne.n	80054a8 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	2200      	movs	r2, #0
 80054a6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	4618      	mov	r0, r3
 80054ae:	f000 fa3f 	bl	8005930 <RTC_ByteToBcd2>
 80054b2:	4603      	mov	r3, r0
 80054b4:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	785b      	ldrb	r3, [r3, #1]
 80054ba:	4618      	mov	r0, r3
 80054bc:	f000 fa38 	bl	8005930 <RTC_ByteToBcd2>
 80054c0:	4603      	mov	r3, r0
 80054c2:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80054c4:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	789b      	ldrb	r3, [r3, #2]
 80054ca:	4618      	mov	r0, r3
 80054cc:	f000 fa30 	bl	8005930 <RTC_ByteToBcd2>
 80054d0:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80054d2:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	78db      	ldrb	r3, [r3, #3]
 80054da:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80054dc:	4313      	orrs	r3, r2
 80054de:	617b      	str	r3, [r7, #20]
 80054e0:	e018      	b.n	8005514 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d102      	bne.n	80054f6 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	2200      	movs	r2, #0
 80054f4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	781b      	ldrb	r3, [r3, #0]
 80054fa:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	785b      	ldrb	r3, [r3, #1]
 8005500:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005502:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8005504:	68ba      	ldr	r2, [r7, #8]
 8005506:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005508:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	78db      	ldrb	r3, [r3, #3]
 800550e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005510:	4313      	orrs	r3, r2
 8005512:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	22ca      	movs	r2, #202	; 0xca
 800551a:	625a      	str	r2, [r3, #36]	; 0x24
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	2253      	movs	r2, #83	; 0x53
 8005522:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005524:	68f8      	ldr	r0, [r7, #12]
 8005526:	f000 f9d7 	bl	80058d8 <RTC_EnterInitMode>
 800552a:	4603      	mov	r3, r0
 800552c:	2b00      	cmp	r3, #0
 800552e:	d00b      	beq.n	8005548 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	22ff      	movs	r2, #255	; 0xff
 8005536:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2204      	movs	r2, #4
 800553c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2200      	movs	r2, #0
 8005542:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	e047      	b.n	80055d8 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005552:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005556:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	689a      	ldr	r2, [r3, #8]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005566:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	6899      	ldr	r1, [r3, #8]
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	68da      	ldr	r2, [r3, #12]
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	691b      	ldr	r3, [r3, #16]
 8005576:	431a      	orrs	r2, r3
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	430a      	orrs	r2, r1
 800557e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	68da      	ldr	r2, [r3, #12]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800558e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	f003 0320 	and.w	r3, r3, #32
 800559a:	2b00      	cmp	r3, #0
 800559c:	d111      	bne.n	80055c2 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800559e:	68f8      	ldr	r0, [r7, #12]
 80055a0:	f000 f972 	bl	8005888 <HAL_RTC_WaitForSynchro>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d00b      	beq.n	80055c2 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	22ff      	movs	r2, #255	; 0xff
 80055b0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2204      	movs	r2, #4
 80055b6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2200      	movs	r2, #0
 80055bc:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	e00a      	b.n	80055d8 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	22ff      	movs	r2, #255	; 0xff
 80055c8:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2201      	movs	r2, #1
 80055ce:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2200      	movs	r2, #0
 80055d4:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80055d6:	2300      	movs	r3, #0
  }
}
 80055d8:	4618      	mov	r0, r3
 80055da:	371c      	adds	r7, #28
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd90      	pop	{r4, r7, pc}

080055e0 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b086      	sub	sp, #24
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	60b9      	str	r1, [r7, #8]
 80055ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80055ec:	2300      	movs	r3, #0
 80055ee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	691b      	ldr	r3, [r3, #16]
 8005600:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005612:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005616:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	0c1b      	lsrs	r3, r3, #16
 800561c:	b2db      	uxtb	r3, r3
 800561e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005622:	b2da      	uxtb	r2, r3
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	0a1b      	lsrs	r3, r3, #8
 800562c:	b2db      	uxtb	r3, r3
 800562e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005632:	b2da      	uxtb	r2, r3
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	b2db      	uxtb	r3, r3
 800563c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005640:	b2da      	uxtb	r2, r3
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	0c1b      	lsrs	r3, r3, #16
 800564a:	b2db      	uxtb	r3, r3
 800564c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005650:	b2da      	uxtb	r2, r3
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d11a      	bne.n	8005692 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	781b      	ldrb	r3, [r3, #0]
 8005660:	4618      	mov	r0, r3
 8005662:	f000 f983 	bl	800596c <RTC_Bcd2ToByte>
 8005666:	4603      	mov	r3, r0
 8005668:	461a      	mov	r2, r3
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	785b      	ldrb	r3, [r3, #1]
 8005672:	4618      	mov	r0, r3
 8005674:	f000 f97a 	bl	800596c <RTC_Bcd2ToByte>
 8005678:	4603      	mov	r3, r0
 800567a:	461a      	mov	r2, r3
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	789b      	ldrb	r3, [r3, #2]
 8005684:	4618      	mov	r0, r3
 8005686:	f000 f971 	bl	800596c <RTC_Bcd2ToByte>
 800568a:	4603      	mov	r3, r0
 800568c:	461a      	mov	r2, r3
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005692:	2300      	movs	r3, #0
}
 8005694:	4618      	mov	r0, r3
 8005696:	3718      	adds	r7, #24
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}

0800569c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800569c:	b590      	push	{r4, r7, lr}
 800569e:	b087      	sub	sp, #28
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	60b9      	str	r1, [r7, #8]
 80056a6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80056a8:	2300      	movs	r3, #0
 80056aa:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	7f1b      	ldrb	r3, [r3, #28]
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d101      	bne.n	80056b8 <HAL_RTC_SetDate+0x1c>
 80056b4:	2302      	movs	r3, #2
 80056b6:	e094      	b.n	80057e2 <HAL_RTC_SetDate+0x146>
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2201      	movs	r2, #1
 80056bc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2202      	movs	r2, #2
 80056c2:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d10e      	bne.n	80056e8 <HAL_RTC_SetDate+0x4c>
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	785b      	ldrb	r3, [r3, #1]
 80056ce:	f003 0310 	and.w	r3, r3, #16
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d008      	beq.n	80056e8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	785b      	ldrb	r3, [r3, #1]
 80056da:	f023 0310 	bic.w	r3, r3, #16
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	330a      	adds	r3, #10
 80056e2:	b2da      	uxtb	r2, r3
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d11c      	bne.n	8005728 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	78db      	ldrb	r3, [r3, #3]
 80056f2:	4618      	mov	r0, r3
 80056f4:	f000 f91c 	bl	8005930 <RTC_ByteToBcd2>
 80056f8:	4603      	mov	r3, r0
 80056fa:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	785b      	ldrb	r3, [r3, #1]
 8005700:	4618      	mov	r0, r3
 8005702:	f000 f915 	bl	8005930 <RTC_ByteToBcd2>
 8005706:	4603      	mov	r3, r0
 8005708:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800570a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	789b      	ldrb	r3, [r3, #2]
 8005710:	4618      	mov	r0, r3
 8005712:	f000 f90d 	bl	8005930 <RTC_ByteToBcd2>
 8005716:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005718:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005722:	4313      	orrs	r3, r2
 8005724:	617b      	str	r3, [r7, #20]
 8005726:	e00e      	b.n	8005746 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	78db      	ldrb	r3, [r3, #3]
 800572c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	785b      	ldrb	r3, [r3, #1]
 8005732:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005734:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8005736:	68ba      	ldr	r2, [r7, #8]
 8005738:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800573a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005742:	4313      	orrs	r3, r2
 8005744:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	22ca      	movs	r2, #202	; 0xca
 800574c:	625a      	str	r2, [r3, #36]	; 0x24
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	2253      	movs	r2, #83	; 0x53
 8005754:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005756:	68f8      	ldr	r0, [r7, #12]
 8005758:	f000 f8be 	bl	80058d8 <RTC_EnterInitMode>
 800575c:	4603      	mov	r3, r0
 800575e:	2b00      	cmp	r3, #0
 8005760:	d00b      	beq.n	800577a <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	22ff      	movs	r2, #255	; 0xff
 8005768:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2204      	movs	r2, #4
 800576e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2200      	movs	r2, #0
 8005774:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e033      	b.n	80057e2 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005784:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005788:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	68da      	ldr	r2, [r3, #12]
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005798:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	f003 0320 	and.w	r3, r3, #32
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d111      	bne.n	80057cc <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80057a8:	68f8      	ldr	r0, [r7, #12]
 80057aa:	f000 f86d 	bl	8005888 <HAL_RTC_WaitForSynchro>
 80057ae:	4603      	mov	r3, r0
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d00b      	beq.n	80057cc <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	22ff      	movs	r2, #255	; 0xff
 80057ba:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2204      	movs	r2, #4
 80057c0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2200      	movs	r2, #0
 80057c6:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	e00a      	b.n	80057e2 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	22ff      	movs	r2, #255	; 0xff
 80057d2:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2201      	movs	r2, #1
 80057d8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2200      	movs	r2, #0
 80057de:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80057e0:	2300      	movs	r3, #0
  }
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	371c      	adds	r7, #28
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd90      	pop	{r4, r7, pc}

080057ea <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80057ea:	b580      	push	{r7, lr}
 80057ec:	b086      	sub	sp, #24
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	60f8      	str	r0, [r7, #12]
 80057f2:	60b9      	str	r1, [r7, #8]
 80057f4:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80057f6:	2300      	movs	r3, #0
 80057f8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005804:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005808:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	0c1b      	lsrs	r3, r3, #16
 800580e:	b2da      	uxtb	r2, r3
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	0a1b      	lsrs	r3, r3, #8
 8005818:	b2db      	uxtb	r3, r3
 800581a:	f003 031f 	and.w	r3, r3, #31
 800581e:	b2da      	uxtb	r2, r3
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	b2db      	uxtb	r3, r3
 8005828:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800582c:	b2da      	uxtb	r2, r3
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	0b5b      	lsrs	r3, r3, #13
 8005836:	b2db      	uxtb	r3, r3
 8005838:	f003 0307 	and.w	r3, r3, #7
 800583c:	b2da      	uxtb	r2, r3
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d11a      	bne.n	800587e <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	78db      	ldrb	r3, [r3, #3]
 800584c:	4618      	mov	r0, r3
 800584e:	f000 f88d 	bl	800596c <RTC_Bcd2ToByte>
 8005852:	4603      	mov	r3, r0
 8005854:	461a      	mov	r2, r3
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	785b      	ldrb	r3, [r3, #1]
 800585e:	4618      	mov	r0, r3
 8005860:	f000 f884 	bl	800596c <RTC_Bcd2ToByte>
 8005864:	4603      	mov	r3, r0
 8005866:	461a      	mov	r2, r3
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	789b      	ldrb	r3, [r3, #2]
 8005870:	4618      	mov	r0, r3
 8005872:	f000 f87b 	bl	800596c <RTC_Bcd2ToByte>
 8005876:	4603      	mov	r3, r0
 8005878:	461a      	mov	r2, r3
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800587e:	2300      	movs	r3, #0
}
 8005880:	4618      	mov	r0, r3
 8005882:	3718      	adds	r7, #24
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}

08005888 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b084      	sub	sp, #16
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005890:	2300      	movs	r3, #0
 8005892:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	68da      	ldr	r2, [r3, #12]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80058a2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80058a4:	f7fd f8f4 	bl	8002a90 <HAL_GetTick>
 80058a8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80058aa:	e009      	b.n	80058c0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80058ac:	f7fd f8f0 	bl	8002a90 <HAL_GetTick>
 80058b0:	4602      	mov	r2, r0
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	1ad3      	subs	r3, r2, r3
 80058b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80058ba:	d901      	bls.n	80058c0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80058bc:	2303      	movs	r3, #3
 80058be:	e007      	b.n	80058d0 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	f003 0320 	and.w	r3, r3, #32
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d0ee      	beq.n	80058ac <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80058ce:	2300      	movs	r3, #0
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3710      	adds	r7, #16
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}

080058d8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b084      	sub	sp, #16
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80058e0:	2300      	movs	r3, #0
 80058e2:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d119      	bne.n	8005926 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f04f 32ff 	mov.w	r2, #4294967295
 80058fa:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80058fc:	f7fd f8c8 	bl	8002a90 <HAL_GetTick>
 8005900:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005902:	e009      	b.n	8005918 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005904:	f7fd f8c4 	bl	8002a90 <HAL_GetTick>
 8005908:	4602      	mov	r2, r0
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005912:	d901      	bls.n	8005918 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8005914:	2303      	movs	r3, #3
 8005916:	e007      	b.n	8005928 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	68db      	ldr	r3, [r3, #12]
 800591e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005922:	2b00      	cmp	r3, #0
 8005924:	d0ee      	beq.n	8005904 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8005926:	2300      	movs	r3, #0
}
 8005928:	4618      	mov	r0, r3
 800592a:	3710      	adds	r7, #16
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}

08005930 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005930:	b480      	push	{r7}
 8005932:	b085      	sub	sp, #20
 8005934:	af00      	add	r7, sp, #0
 8005936:	4603      	mov	r3, r0
 8005938:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800593a:	2300      	movs	r3, #0
 800593c:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800593e:	e005      	b.n	800594c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	3301      	adds	r3, #1
 8005944:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8005946:	79fb      	ldrb	r3, [r7, #7]
 8005948:	3b0a      	subs	r3, #10
 800594a:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 800594c:	79fb      	ldrb	r3, [r7, #7]
 800594e:	2b09      	cmp	r3, #9
 8005950:	d8f6      	bhi.n	8005940 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	b2db      	uxtb	r3, r3
 8005956:	011b      	lsls	r3, r3, #4
 8005958:	b2da      	uxtb	r2, r3
 800595a:	79fb      	ldrb	r3, [r7, #7]
 800595c:	4313      	orrs	r3, r2
 800595e:	b2db      	uxtb	r3, r3
}
 8005960:	4618      	mov	r0, r3
 8005962:	3714      	adds	r7, #20
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800596c:	b480      	push	{r7}
 800596e:	b085      	sub	sp, #20
 8005970:	af00      	add	r7, sp, #0
 8005972:	4603      	mov	r3, r0
 8005974:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8005976:	2300      	movs	r3, #0
 8005978:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800597a:	79fb      	ldrb	r3, [r7, #7]
 800597c:	091b      	lsrs	r3, r3, #4
 800597e:	b2db      	uxtb	r3, r3
 8005980:	461a      	mov	r2, r3
 8005982:	4613      	mov	r3, r2
 8005984:	009b      	lsls	r3, r3, #2
 8005986:	4413      	add	r3, r2
 8005988:	005b      	lsls	r3, r3, #1
 800598a:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800598c:	79fb      	ldrb	r3, [r7, #7]
 800598e:	f003 030f 	and.w	r3, r3, #15
 8005992:	b2da      	uxtb	r2, r3
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	b2db      	uxtb	r3, r3
 8005998:	4413      	add	r3, r2
 800599a:	b2db      	uxtb	r3, r3
}
 800599c:	4618      	mov	r0, r3
 800599e:	3714      	adds	r7, #20
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr

080059a8 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b087      	sub	sp, #28
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	60b9      	str	r1, [r7, #8]
 80059b2:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 80059b4:	2300      	movs	r3, #0
 80059b6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	3350      	adds	r3, #80	; 0x50
 80059be:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	697a      	ldr	r2, [r7, #20]
 80059c6:	4413      	add	r3, r2
 80059c8:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	687a      	ldr	r2, [r7, #4]
 80059ce:	601a      	str	r2, [r3, #0]
}
 80059d0:	bf00      	nop
 80059d2:	371c      	adds	r7, #28
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr

080059dc <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80059dc:	b480      	push	{r7}
 80059de:	b085      	sub	sp, #20
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 80059e6:	2300      	movs	r3, #0
 80059e8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	3350      	adds	r3, #80	; 0x50
 80059f0:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	68fa      	ldr	r2, [r7, #12]
 80059f8:	4413      	add	r3, r2
 80059fa:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3714      	adds	r7, #20
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr

08005a0c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b082      	sub	sp, #8
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d101      	bne.n	8005a1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e03f      	b.n	8005a9e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d106      	bne.n	8005a38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f7fc fdb8 	bl	80025a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2224      	movs	r2, #36	; 0x24
 8005a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	68da      	ldr	r2, [r3, #12]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a4e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f001 f839 	bl	8006ac8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	691a      	ldr	r2, [r3, #16]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	695a      	ldr	r2, [r3, #20]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a74:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	68da      	ldr	r2, [r3, #12]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a84:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2220      	movs	r2, #32
 8005a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2220      	movs	r2, #32
 8005a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005a9c:	2300      	movs	r3, #0
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3708      	adds	r7, #8
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}

08005aa6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005aa6:	b580      	push	{r7, lr}
 8005aa8:	b08a      	sub	sp, #40	; 0x28
 8005aaa:	af02      	add	r7, sp, #8
 8005aac:	60f8      	str	r0, [r7, #12]
 8005aae:	60b9      	str	r1, [r7, #8]
 8005ab0:	603b      	str	r3, [r7, #0]
 8005ab2:	4613      	mov	r3, r2
 8005ab4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ac0:	b2db      	uxtb	r3, r3
 8005ac2:	2b20      	cmp	r3, #32
 8005ac4:	d17c      	bne.n	8005bc0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d002      	beq.n	8005ad2 <HAL_UART_Transmit+0x2c>
 8005acc:	88fb      	ldrh	r3, [r7, #6]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d101      	bne.n	8005ad6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e075      	b.n	8005bc2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d101      	bne.n	8005ae4 <HAL_UART_Transmit+0x3e>
 8005ae0:	2302      	movs	r3, #2
 8005ae2:	e06e      	b.n	8005bc2 <HAL_UART_Transmit+0x11c>
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2200      	movs	r2, #0
 8005af0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2221      	movs	r2, #33	; 0x21
 8005af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005afa:	f7fc ffc9 	bl	8002a90 <HAL_GetTick>
 8005afe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	88fa      	ldrh	r2, [r7, #6]
 8005b04:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	88fa      	ldrh	r2, [r7, #6]
 8005b0a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b14:	d108      	bne.n	8005b28 <HAL_UART_Transmit+0x82>
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	691b      	ldr	r3, [r3, #16]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d104      	bne.n	8005b28 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	61bb      	str	r3, [r7, #24]
 8005b26:	e003      	b.n	8005b30 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2200      	movs	r2, #0
 8005b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005b38:	e02a      	b.n	8005b90 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	9300      	str	r3, [sp, #0]
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	2200      	movs	r2, #0
 8005b42:	2180      	movs	r1, #128	; 0x80
 8005b44:	68f8      	ldr	r0, [r7, #12]
 8005b46:	f000 fcf5 	bl	8006534 <UART_WaitOnFlagUntilTimeout>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d001      	beq.n	8005b54 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005b50:	2303      	movs	r3, #3
 8005b52:	e036      	b.n	8005bc2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d10b      	bne.n	8005b72 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b5a:	69bb      	ldr	r3, [r7, #24]
 8005b5c:	881b      	ldrh	r3, [r3, #0]
 8005b5e:	461a      	mov	r2, r3
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b68:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005b6a:	69bb      	ldr	r3, [r7, #24]
 8005b6c:	3302      	adds	r3, #2
 8005b6e:	61bb      	str	r3, [r7, #24]
 8005b70:	e007      	b.n	8005b82 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b72:	69fb      	ldr	r3, [r7, #28]
 8005b74:	781a      	ldrb	r2, [r3, #0]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005b7c:	69fb      	ldr	r3, [r7, #28]
 8005b7e:	3301      	adds	r3, #1
 8005b80:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	3b01      	subs	r3, #1
 8005b8a:	b29a      	uxth	r2, r3
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d1cf      	bne.n	8005b3a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	9300      	str	r3, [sp, #0]
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	2140      	movs	r1, #64	; 0x40
 8005ba4:	68f8      	ldr	r0, [r7, #12]
 8005ba6:	f000 fcc5 	bl	8006534 <UART_WaitOnFlagUntilTimeout>
 8005baa:	4603      	mov	r3, r0
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d001      	beq.n	8005bb4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005bb0:	2303      	movs	r3, #3
 8005bb2:	e006      	b.n	8005bc2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2220      	movs	r2, #32
 8005bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	e000      	b.n	8005bc2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005bc0:	2302      	movs	r3, #2
  }
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3720      	adds	r7, #32
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}

08005bca <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bca:	b580      	push	{r7, lr}
 8005bcc:	b08a      	sub	sp, #40	; 0x28
 8005bce:	af02      	add	r7, sp, #8
 8005bd0:	60f8      	str	r0, [r7, #12]
 8005bd2:	60b9      	str	r1, [r7, #8]
 8005bd4:	603b      	str	r3, [r7, #0]
 8005bd6:	4613      	mov	r3, r2
 8005bd8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	2b20      	cmp	r3, #32
 8005be8:	f040 808c 	bne.w	8005d04 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d002      	beq.n	8005bf8 <HAL_UART_Receive+0x2e>
 8005bf2:	88fb      	ldrh	r3, [r7, #6]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d101      	bne.n	8005bfc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	e084      	b.n	8005d06 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d101      	bne.n	8005c0a <HAL_UART_Receive+0x40>
 8005c06:	2302      	movs	r3, #2
 8005c08:	e07d      	b.n	8005d06 <HAL_UART_Receive+0x13c>
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2200      	movs	r2, #0
 8005c16:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2222      	movs	r2, #34	; 0x22
 8005c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2200      	movs	r2, #0
 8005c24:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c26:	f7fc ff33 	bl	8002a90 <HAL_GetTick>
 8005c2a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	88fa      	ldrh	r2, [r7, #6]
 8005c30:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	88fa      	ldrh	r2, [r7, #6]
 8005c36:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c40:	d108      	bne.n	8005c54 <HAL_UART_Receive+0x8a>
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	691b      	ldr	r3, [r3, #16]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d104      	bne.n	8005c54 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	61bb      	str	r3, [r7, #24]
 8005c52:	e003      	b.n	8005c5c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005c64:	e043      	b.n	8005cee <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	9300      	str	r3, [sp, #0]
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	2120      	movs	r1, #32
 8005c70:	68f8      	ldr	r0, [r7, #12]
 8005c72:	f000 fc5f 	bl	8006534 <UART_WaitOnFlagUntilTimeout>
 8005c76:	4603      	mov	r3, r0
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d001      	beq.n	8005c80 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8005c7c:	2303      	movs	r3, #3
 8005c7e:	e042      	b.n	8005d06 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8005c80:	69fb      	ldr	r3, [r7, #28]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d10c      	bne.n	8005ca0 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c92:	b29a      	uxth	r2, r3
 8005c94:	69bb      	ldr	r3, [r7, #24]
 8005c96:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005c98:	69bb      	ldr	r3, [r7, #24]
 8005c9a:	3302      	adds	r3, #2
 8005c9c:	61bb      	str	r3, [r7, #24]
 8005c9e:	e01f      	b.n	8005ce0 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ca8:	d007      	beq.n	8005cba <HAL_UART_Receive+0xf0>
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d10a      	bne.n	8005cc8 <HAL_UART_Receive+0xfe>
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	691b      	ldr	r3, [r3, #16]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d106      	bne.n	8005cc8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	b2da      	uxtb	r2, r3
 8005cc2:	69fb      	ldr	r3, [r7, #28]
 8005cc4:	701a      	strb	r2, [r3, #0]
 8005cc6:	e008      	b.n	8005cda <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cd4:	b2da      	uxtb	r2, r3
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005cda:	69fb      	ldr	r3, [r7, #28]
 8005cdc:	3301      	adds	r3, #1
 8005cde:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	3b01      	subs	r3, #1
 8005ce8:	b29a      	uxth	r2, r3
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d1b6      	bne.n	8005c66 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2220      	movs	r2, #32
 8005cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8005d00:	2300      	movs	r3, #0
 8005d02:	e000      	b.n	8005d06 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8005d04:	2302      	movs	r3, #2
  }
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3720      	adds	r7, #32
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}

08005d0e <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d0e:	b580      	push	{r7, lr}
 8005d10:	b08c      	sub	sp, #48	; 0x30
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	60f8      	str	r0, [r7, #12]
 8005d16:	60b9      	str	r1, [r7, #8]
 8005d18:	4613      	mov	r3, r2
 8005d1a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	2b20      	cmp	r3, #32
 8005d26:	d152      	bne.n	8005dce <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d002      	beq.n	8005d34 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8005d2e:	88fb      	ldrh	r3, [r7, #6]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d101      	bne.n	8005d38 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	e04b      	b.n	8005dd0 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d101      	bne.n	8005d46 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8005d42:	2302      	movs	r3, #2
 8005d44:	e044      	b.n	8005dd0 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2201      	movs	r2, #1
 8005d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2201      	movs	r2, #1
 8005d52:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8005d54:	88fb      	ldrh	r3, [r7, #6]
 8005d56:	461a      	mov	r2, r3
 8005d58:	68b9      	ldr	r1, [r7, #8]
 8005d5a:	68f8      	ldr	r0, [r7, #12]
 8005d5c:	f000 fc58 	bl	8006610 <UART_Start_Receive_DMA>
 8005d60:	4603      	mov	r3, r0
 8005d62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005d66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d12c      	bne.n	8005dc8 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d125      	bne.n	8005dc2 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d76:	2300      	movs	r3, #0
 8005d78:	613b      	str	r3, [r7, #16]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	613b      	str	r3, [r7, #16]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	613b      	str	r3, [r7, #16]
 8005d8a:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	330c      	adds	r3, #12
 8005d92:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d94:	69bb      	ldr	r3, [r7, #24]
 8005d96:	e853 3f00 	ldrex	r3, [r3]
 8005d9a:	617b      	str	r3, [r7, #20]
   return(result);
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	f043 0310 	orr.w	r3, r3, #16
 8005da2:	62bb      	str	r3, [r7, #40]	; 0x28
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	330c      	adds	r3, #12
 8005daa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005dac:	627a      	str	r2, [r7, #36]	; 0x24
 8005dae:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db0:	6a39      	ldr	r1, [r7, #32]
 8005db2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005db4:	e841 2300 	strex	r3, r2, [r1]
 8005db8:	61fb      	str	r3, [r7, #28]
   return(result);
 8005dba:	69fb      	ldr	r3, [r7, #28]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d1e5      	bne.n	8005d8c <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8005dc0:	e002      	b.n	8005dc8 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8005dc8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005dcc:	e000      	b.n	8005dd0 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8005dce:	2302      	movs	r3, #2
  }
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3730      	adds	r7, #48	; 0x30
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}

08005dd8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b0ba      	sub	sp, #232	; 0xe8
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	695b      	ldr	r3, [r3, #20]
 8005dfa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005e04:	2300      	movs	r3, #0
 8005e06:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005e0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e0e:	f003 030f 	and.w	r3, r3, #15
 8005e12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005e16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d10f      	bne.n	8005e3e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e22:	f003 0320 	and.w	r3, r3, #32
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d009      	beq.n	8005e3e <HAL_UART_IRQHandler+0x66>
 8005e2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e2e:	f003 0320 	and.w	r3, r3, #32
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d003      	beq.n	8005e3e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f000 fd8b 	bl	8006952 <UART_Receive_IT>
      return;
 8005e3c:	e256      	b.n	80062ec <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005e3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	f000 80de 	beq.w	8006004 <HAL_UART_IRQHandler+0x22c>
 8005e48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e4c:	f003 0301 	and.w	r3, r3, #1
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d106      	bne.n	8005e62 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005e54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e58:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	f000 80d1 	beq.w	8006004 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005e62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e66:	f003 0301 	and.w	r3, r3, #1
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d00b      	beq.n	8005e86 <HAL_UART_IRQHandler+0xae>
 8005e6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d005      	beq.n	8005e86 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e7e:	f043 0201 	orr.w	r2, r3, #1
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e8a:	f003 0304 	and.w	r3, r3, #4
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d00b      	beq.n	8005eaa <HAL_UART_IRQHandler+0xd2>
 8005e92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e96:	f003 0301 	and.w	r3, r3, #1
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d005      	beq.n	8005eaa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea2:	f043 0202 	orr.w	r2, r3, #2
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005eaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005eae:	f003 0302 	and.w	r3, r3, #2
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d00b      	beq.n	8005ece <HAL_UART_IRQHandler+0xf6>
 8005eb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005eba:	f003 0301 	and.w	r3, r3, #1
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d005      	beq.n	8005ece <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec6:	f043 0204 	orr.w	r2, r3, #4
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005ece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ed2:	f003 0308 	and.w	r3, r3, #8
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d011      	beq.n	8005efe <HAL_UART_IRQHandler+0x126>
 8005eda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ede:	f003 0320 	and.w	r3, r3, #32
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d105      	bne.n	8005ef2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005ee6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005eea:	f003 0301 	and.w	r3, r3, #1
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d005      	beq.n	8005efe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef6:	f043 0208 	orr.w	r2, r3, #8
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	f000 81ed 	beq.w	80062e2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f0c:	f003 0320 	and.w	r3, r3, #32
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d008      	beq.n	8005f26 <HAL_UART_IRQHandler+0x14e>
 8005f14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f18:	f003 0320 	and.w	r3, r3, #32
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d002      	beq.n	8005f26 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f000 fd16 	bl	8006952 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	695b      	ldr	r3, [r3, #20]
 8005f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f30:	2b40      	cmp	r3, #64	; 0x40
 8005f32:	bf0c      	ite	eq
 8005f34:	2301      	moveq	r3, #1
 8005f36:	2300      	movne	r3, #0
 8005f38:	b2db      	uxtb	r3, r3
 8005f3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f42:	f003 0308 	and.w	r3, r3, #8
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d103      	bne.n	8005f52 <HAL_UART_IRQHandler+0x17a>
 8005f4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d04f      	beq.n	8005ff2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 fc1e 	bl	8006794 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	695b      	ldr	r3, [r3, #20]
 8005f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f62:	2b40      	cmp	r3, #64	; 0x40
 8005f64:	d141      	bne.n	8005fea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	3314      	adds	r3, #20
 8005f6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f70:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005f74:	e853 3f00 	ldrex	r3, [r3]
 8005f78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005f7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005f80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	3314      	adds	r3, #20
 8005f8e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005f92:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005f96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f9a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005f9e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005fa2:	e841 2300 	strex	r3, r2, [r1]
 8005fa6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005faa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d1d9      	bne.n	8005f66 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d013      	beq.n	8005fe2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fbe:	4a7d      	ldr	r2, [pc, #500]	; (80061b4 <HAL_UART_IRQHandler+0x3dc>)
 8005fc0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f7fd f81a 	bl	8003000 <HAL_DMA_Abort_IT>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d016      	beq.n	8006000 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005fdc:	4610      	mov	r0, r2
 8005fde:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fe0:	e00e      	b.n	8006000 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f000 f9a4 	bl	8006330 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fe8:	e00a      	b.n	8006000 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f000 f9a0 	bl	8006330 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ff0:	e006      	b.n	8006000 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f000 f99c 	bl	8006330 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005ffe:	e170      	b.n	80062e2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006000:	bf00      	nop
    return;
 8006002:	e16e      	b.n	80062e2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006008:	2b01      	cmp	r3, #1
 800600a:	f040 814a 	bne.w	80062a2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800600e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006012:	f003 0310 	and.w	r3, r3, #16
 8006016:	2b00      	cmp	r3, #0
 8006018:	f000 8143 	beq.w	80062a2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800601c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006020:	f003 0310 	and.w	r3, r3, #16
 8006024:	2b00      	cmp	r3, #0
 8006026:	f000 813c 	beq.w	80062a2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800602a:	2300      	movs	r3, #0
 800602c:	60bb      	str	r3, [r7, #8]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	60bb      	str	r3, [r7, #8]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	60bb      	str	r3, [r7, #8]
 800603e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	695b      	ldr	r3, [r3, #20]
 8006046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800604a:	2b40      	cmp	r3, #64	; 0x40
 800604c:	f040 80b4 	bne.w	80061b8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800605c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006060:	2b00      	cmp	r3, #0
 8006062:	f000 8140 	beq.w	80062e6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800606a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800606e:	429a      	cmp	r2, r3
 8006070:	f080 8139 	bcs.w	80062e6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800607a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006080:	69db      	ldr	r3, [r3, #28]
 8006082:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006086:	f000 8088 	beq.w	800619a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	330c      	adds	r3, #12
 8006090:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006094:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006098:	e853 3f00 	ldrex	r3, [r3]
 800609c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80060a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80060a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	330c      	adds	r3, #12
 80060b2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80060b6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80060ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060be:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80060c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80060c6:	e841 2300 	strex	r3, r2, [r1]
 80060ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80060ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d1d9      	bne.n	800608a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	3314      	adds	r3, #20
 80060dc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060e0:	e853 3f00 	ldrex	r3, [r3]
 80060e4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80060e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80060e8:	f023 0301 	bic.w	r3, r3, #1
 80060ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	3314      	adds	r3, #20
 80060f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80060fa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80060fe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006100:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006102:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006106:	e841 2300 	strex	r3, r2, [r1]
 800610a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800610c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800610e:	2b00      	cmp	r3, #0
 8006110:	d1e1      	bne.n	80060d6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	3314      	adds	r3, #20
 8006118:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800611a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800611c:	e853 3f00 	ldrex	r3, [r3]
 8006120:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006122:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006124:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006128:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	3314      	adds	r3, #20
 8006132:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006136:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006138:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800613a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800613c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800613e:	e841 2300 	strex	r3, r2, [r1]
 8006142:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006144:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006146:	2b00      	cmp	r3, #0
 8006148:	d1e3      	bne.n	8006112 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2220      	movs	r2, #32
 800614e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2200      	movs	r2, #0
 8006156:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	330c      	adds	r3, #12
 800615e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006160:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006162:	e853 3f00 	ldrex	r3, [r3]
 8006166:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006168:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800616a:	f023 0310 	bic.w	r3, r3, #16
 800616e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	330c      	adds	r3, #12
 8006178:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800617c:	65ba      	str	r2, [r7, #88]	; 0x58
 800617e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006180:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006182:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006184:	e841 2300 	strex	r3, r2, [r1]
 8006188:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800618a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800618c:	2b00      	cmp	r3, #0
 800618e:	d1e3      	bne.n	8006158 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006194:	4618      	mov	r0, r3
 8006196:	f7fc fec3 	bl	8002f20 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	1ad3      	subs	r3, r2, r3
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	4619      	mov	r1, r3
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f7fb fc4c 	bl	8001a48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80061b0:	e099      	b.n	80062e6 <HAL_UART_IRQHandler+0x50e>
 80061b2:	bf00      	nop
 80061b4:	0800685b 	.word	0x0800685b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	1ad3      	subs	r3, r2, r3
 80061c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	f000 808b 	beq.w	80062ea <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80061d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80061d8:	2b00      	cmp	r3, #0
 80061da:	f000 8086 	beq.w	80062ea <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	330c      	adds	r3, #12
 80061e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061e8:	e853 3f00 	ldrex	r3, [r3]
 80061ec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80061ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80061f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	330c      	adds	r3, #12
 80061fe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006202:	647a      	str	r2, [r7, #68]	; 0x44
 8006204:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006206:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006208:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800620a:	e841 2300 	strex	r3, r2, [r1]
 800620e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006210:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006212:	2b00      	cmp	r3, #0
 8006214:	d1e3      	bne.n	80061de <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	3314      	adds	r3, #20
 800621c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800621e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006220:	e853 3f00 	ldrex	r3, [r3]
 8006224:	623b      	str	r3, [r7, #32]
   return(result);
 8006226:	6a3b      	ldr	r3, [r7, #32]
 8006228:	f023 0301 	bic.w	r3, r3, #1
 800622c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	3314      	adds	r3, #20
 8006236:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800623a:	633a      	str	r2, [r7, #48]	; 0x30
 800623c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800623e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006240:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006242:	e841 2300 	strex	r3, r2, [r1]
 8006246:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800624a:	2b00      	cmp	r3, #0
 800624c:	d1e3      	bne.n	8006216 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2220      	movs	r2, #32
 8006252:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2200      	movs	r2, #0
 800625a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	330c      	adds	r3, #12
 8006262:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	e853 3f00 	ldrex	r3, [r3]
 800626a:	60fb      	str	r3, [r7, #12]
   return(result);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f023 0310 	bic.w	r3, r3, #16
 8006272:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	330c      	adds	r3, #12
 800627c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006280:	61fa      	str	r2, [r7, #28]
 8006282:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006284:	69b9      	ldr	r1, [r7, #24]
 8006286:	69fa      	ldr	r2, [r7, #28]
 8006288:	e841 2300 	strex	r3, r2, [r1]
 800628c:	617b      	str	r3, [r7, #20]
   return(result);
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d1e3      	bne.n	800625c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006294:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006298:	4619      	mov	r1, r3
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f7fb fbd4 	bl	8001a48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80062a0:	e023      	b.n	80062ea <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80062a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d009      	beq.n	80062c2 <HAL_UART_IRQHandler+0x4ea>
 80062ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d003      	beq.n	80062c2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 fae1 	bl	8006882 <UART_Transmit_IT>
    return;
 80062c0:	e014      	b.n	80062ec <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80062c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d00e      	beq.n	80062ec <HAL_UART_IRQHandler+0x514>
 80062ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d008      	beq.n	80062ec <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 fb21 	bl	8006922 <UART_EndTransmit_IT>
    return;
 80062e0:	e004      	b.n	80062ec <HAL_UART_IRQHandler+0x514>
    return;
 80062e2:	bf00      	nop
 80062e4:	e002      	b.n	80062ec <HAL_UART_IRQHandler+0x514>
      return;
 80062e6:	bf00      	nop
 80062e8:	e000      	b.n	80062ec <HAL_UART_IRQHandler+0x514>
      return;
 80062ea:	bf00      	nop
  }
}
 80062ec:	37e8      	adds	r7, #232	; 0xe8
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}
 80062f2:	bf00      	nop

080062f4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b083      	sub	sp, #12
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80062fc:	bf00      	nop
 80062fe:	370c      	adds	r7, #12
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr

08006308 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006308:	b480      	push	{r7}
 800630a:	b083      	sub	sp, #12
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006310:	bf00      	nop
 8006312:	370c      	adds	r7, #12
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr

0800631c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800631c:	b480      	push	{r7}
 800631e:	b083      	sub	sp, #12
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006324:	bf00      	nop
 8006326:	370c      	adds	r7, #12
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr

08006330 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006330:	b480      	push	{r7}
 8006332:	b083      	sub	sp, #12
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006338:	bf00      	nop
 800633a:	370c      	adds	r7, #12
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr

08006344 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b09c      	sub	sp, #112	; 0x70
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006350:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800635c:	2b00      	cmp	r3, #0
 800635e:	d172      	bne.n	8006446 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006360:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006362:	2200      	movs	r2, #0
 8006364:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006366:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	330c      	adds	r3, #12
 800636c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800636e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006370:	e853 3f00 	ldrex	r3, [r3]
 8006374:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006376:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006378:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800637c:	66bb      	str	r3, [r7, #104]	; 0x68
 800637e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	330c      	adds	r3, #12
 8006384:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006386:	65ba      	str	r2, [r7, #88]	; 0x58
 8006388:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800638a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800638c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800638e:	e841 2300 	strex	r3, r2, [r1]
 8006392:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006394:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006396:	2b00      	cmp	r3, #0
 8006398:	d1e5      	bne.n	8006366 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800639a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	3314      	adds	r3, #20
 80063a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063a4:	e853 3f00 	ldrex	r3, [r3]
 80063a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80063aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063ac:	f023 0301 	bic.w	r3, r3, #1
 80063b0:	667b      	str	r3, [r7, #100]	; 0x64
 80063b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	3314      	adds	r3, #20
 80063b8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80063ba:	647a      	str	r2, [r7, #68]	; 0x44
 80063bc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80063c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80063c2:	e841 2300 	strex	r3, r2, [r1]
 80063c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80063c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d1e5      	bne.n	800639a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	3314      	adds	r3, #20
 80063d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d8:	e853 3f00 	ldrex	r3, [r3]
 80063dc:	623b      	str	r3, [r7, #32]
   return(result);
 80063de:	6a3b      	ldr	r3, [r7, #32]
 80063e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063e4:	663b      	str	r3, [r7, #96]	; 0x60
 80063e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	3314      	adds	r3, #20
 80063ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80063ee:	633a      	str	r2, [r7, #48]	; 0x30
 80063f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80063f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063f6:	e841 2300 	strex	r3, r2, [r1]
 80063fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80063fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d1e5      	bne.n	80063ce <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006402:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006404:	2220      	movs	r2, #32
 8006406:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800640a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800640c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800640e:	2b01      	cmp	r3, #1
 8006410:	d119      	bne.n	8006446 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006412:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	330c      	adds	r3, #12
 8006418:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	e853 3f00 	ldrex	r3, [r3]
 8006420:	60fb      	str	r3, [r7, #12]
   return(result);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	f023 0310 	bic.w	r3, r3, #16
 8006428:	65fb      	str	r3, [r7, #92]	; 0x5c
 800642a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	330c      	adds	r3, #12
 8006430:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006432:	61fa      	str	r2, [r7, #28]
 8006434:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006436:	69b9      	ldr	r1, [r7, #24]
 8006438:	69fa      	ldr	r2, [r7, #28]
 800643a:	e841 2300 	strex	r3, r2, [r1]
 800643e:	617b      	str	r3, [r7, #20]
   return(result);
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d1e5      	bne.n	8006412 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006446:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800644a:	2b01      	cmp	r3, #1
 800644c:	d106      	bne.n	800645c <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800644e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006450:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006452:	4619      	mov	r1, r3
 8006454:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006456:	f7fb faf7 	bl	8001a48 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800645a:	e002      	b.n	8006462 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800645c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800645e:	f7ff ff53 	bl	8006308 <HAL_UART_RxCpltCallback>
}
 8006462:	bf00      	nop
 8006464:	3770      	adds	r7, #112	; 0x70
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}

0800646a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800646a:	b580      	push	{r7, lr}
 800646c:	b084      	sub	sp, #16
 800646e:	af00      	add	r7, sp, #0
 8006470:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006476:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800647c:	2b01      	cmp	r3, #1
 800647e:	d108      	bne.n	8006492 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006484:	085b      	lsrs	r3, r3, #1
 8006486:	b29b      	uxth	r3, r3
 8006488:	4619      	mov	r1, r3
 800648a:	68f8      	ldr	r0, [r7, #12]
 800648c:	f7fb fadc 	bl	8001a48 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006490:	e002      	b.n	8006498 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8006492:	68f8      	ldr	r0, [r7, #12]
 8006494:	f7ff ff42 	bl	800631c <HAL_UART_RxHalfCpltCallback>
}
 8006498:	bf00      	nop
 800649a:	3710      	adds	r7, #16
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}

080064a0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b084      	sub	sp, #16
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80064a8:	2300      	movs	r3, #0
 80064aa:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064b0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	695b      	ldr	r3, [r3, #20]
 80064b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064bc:	2b80      	cmp	r3, #128	; 0x80
 80064be:	bf0c      	ite	eq
 80064c0:	2301      	moveq	r3, #1
 80064c2:	2300      	movne	r3, #0
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	2b21      	cmp	r3, #33	; 0x21
 80064d2:	d108      	bne.n	80064e6 <UART_DMAError+0x46>
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d005      	beq.n	80064e6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	2200      	movs	r2, #0
 80064de:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80064e0:	68b8      	ldr	r0, [r7, #8]
 80064e2:	f000 f92f 	bl	8006744 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	695b      	ldr	r3, [r3, #20]
 80064ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064f0:	2b40      	cmp	r3, #64	; 0x40
 80064f2:	bf0c      	ite	eq
 80064f4:	2301      	moveq	r3, #1
 80064f6:	2300      	movne	r3, #0
 80064f8:	b2db      	uxtb	r3, r3
 80064fa:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006502:	b2db      	uxtb	r3, r3
 8006504:	2b22      	cmp	r3, #34	; 0x22
 8006506:	d108      	bne.n	800651a <UART_DMAError+0x7a>
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d005      	beq.n	800651a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	2200      	movs	r2, #0
 8006512:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006514:	68b8      	ldr	r0, [r7, #8]
 8006516:	f000 f93d 	bl	8006794 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800651e:	f043 0210 	orr.w	r2, r3, #16
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006526:	68b8      	ldr	r0, [r7, #8]
 8006528:	f7ff ff02 	bl	8006330 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800652c:	bf00      	nop
 800652e:	3710      	adds	r7, #16
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}

08006534 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b090      	sub	sp, #64	; 0x40
 8006538:	af00      	add	r7, sp, #0
 800653a:	60f8      	str	r0, [r7, #12]
 800653c:	60b9      	str	r1, [r7, #8]
 800653e:	603b      	str	r3, [r7, #0]
 8006540:	4613      	mov	r3, r2
 8006542:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006544:	e050      	b.n	80065e8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006546:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800654c:	d04c      	beq.n	80065e8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800654e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006550:	2b00      	cmp	r3, #0
 8006552:	d007      	beq.n	8006564 <UART_WaitOnFlagUntilTimeout+0x30>
 8006554:	f7fc fa9c 	bl	8002a90 <HAL_GetTick>
 8006558:	4602      	mov	r2, r0
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	1ad3      	subs	r3, r2, r3
 800655e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006560:	429a      	cmp	r2, r3
 8006562:	d241      	bcs.n	80065e8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	330c      	adds	r3, #12
 800656a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800656c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800656e:	e853 3f00 	ldrex	r3, [r3]
 8006572:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006576:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800657a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	330c      	adds	r3, #12
 8006582:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006584:	637a      	str	r2, [r7, #52]	; 0x34
 8006586:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006588:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800658a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800658c:	e841 2300 	strex	r3, r2, [r1]
 8006590:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006594:	2b00      	cmp	r3, #0
 8006596:	d1e5      	bne.n	8006564 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	3314      	adds	r3, #20
 800659e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	e853 3f00 	ldrex	r3, [r3]
 80065a6:	613b      	str	r3, [r7, #16]
   return(result);
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	f023 0301 	bic.w	r3, r3, #1
 80065ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	3314      	adds	r3, #20
 80065b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80065b8:	623a      	str	r2, [r7, #32]
 80065ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065bc:	69f9      	ldr	r1, [r7, #28]
 80065be:	6a3a      	ldr	r2, [r7, #32]
 80065c0:	e841 2300 	strex	r3, r2, [r1]
 80065c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80065c6:	69bb      	ldr	r3, [r7, #24]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d1e5      	bne.n	8006598 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2220      	movs	r2, #32
 80065d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2220      	movs	r2, #32
 80065d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2200      	movs	r2, #0
 80065e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80065e4:	2303      	movs	r3, #3
 80065e6:	e00f      	b.n	8006608 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	681a      	ldr	r2, [r3, #0]
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	4013      	ands	r3, r2
 80065f2:	68ba      	ldr	r2, [r7, #8]
 80065f4:	429a      	cmp	r2, r3
 80065f6:	bf0c      	ite	eq
 80065f8:	2301      	moveq	r3, #1
 80065fa:	2300      	movne	r3, #0
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	461a      	mov	r2, r3
 8006600:	79fb      	ldrb	r3, [r7, #7]
 8006602:	429a      	cmp	r2, r3
 8006604:	d09f      	beq.n	8006546 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006606:	2300      	movs	r3, #0
}
 8006608:	4618      	mov	r0, r3
 800660a:	3740      	adds	r7, #64	; 0x40
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}

08006610 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b098      	sub	sp, #96	; 0x60
 8006614:	af00      	add	r7, sp, #0
 8006616:	60f8      	str	r0, [r7, #12]
 8006618:	60b9      	str	r1, [r7, #8]
 800661a:	4613      	mov	r3, r2
 800661c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800661e:	68ba      	ldr	r2, [r7, #8]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	88fa      	ldrh	r2, [r7, #6]
 8006628:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2200      	movs	r2, #0
 800662e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	2222      	movs	r2, #34	; 0x22
 8006634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800663c:	4a3e      	ldr	r2, [pc, #248]	; (8006738 <UART_Start_Receive_DMA+0x128>)
 800663e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006644:	4a3d      	ldr	r2, [pc, #244]	; (800673c <UART_Start_Receive_DMA+0x12c>)
 8006646:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800664c:	4a3c      	ldr	r2, [pc, #240]	; (8006740 <UART_Start_Receive_DMA+0x130>)
 800664e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006654:	2200      	movs	r2, #0
 8006656:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006658:	f107 0308 	add.w	r3, r7, #8
 800665c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	3304      	adds	r3, #4
 8006668:	4619      	mov	r1, r3
 800666a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	88fb      	ldrh	r3, [r7, #6]
 8006670:	f7fc fbfe 	bl	8002e70 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006674:	2300      	movs	r3, #0
 8006676:	613b      	str	r3, [r7, #16]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	613b      	str	r3, [r7, #16]
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	613b      	str	r3, [r7, #16]
 8006688:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2200      	movs	r2, #0
 800668e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	330c      	adds	r3, #12
 8006698:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800669a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800669c:	e853 3f00 	ldrex	r3, [r3]
 80066a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80066a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066a8:	65bb      	str	r3, [r7, #88]	; 0x58
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	330c      	adds	r3, #12
 80066b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80066b2:	64fa      	str	r2, [r7, #76]	; 0x4c
 80066b4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80066b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80066ba:	e841 2300 	strex	r3, r2, [r1]
 80066be:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80066c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d1e5      	bne.n	8006692 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	3314      	adds	r3, #20
 80066cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066d0:	e853 3f00 	ldrex	r3, [r3]
 80066d4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80066d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066d8:	f043 0301 	orr.w	r3, r3, #1
 80066dc:	657b      	str	r3, [r7, #84]	; 0x54
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	3314      	adds	r3, #20
 80066e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80066e6:	63ba      	str	r2, [r7, #56]	; 0x38
 80066e8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80066ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80066ee:	e841 2300 	strex	r3, r2, [r1]
 80066f2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80066f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d1e5      	bne.n	80066c6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	3314      	adds	r3, #20
 8006700:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006702:	69bb      	ldr	r3, [r7, #24]
 8006704:	e853 3f00 	ldrex	r3, [r3]
 8006708:	617b      	str	r3, [r7, #20]
   return(result);
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006710:	653b      	str	r3, [r7, #80]	; 0x50
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	3314      	adds	r3, #20
 8006718:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800671a:	627a      	str	r2, [r7, #36]	; 0x24
 800671c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800671e:	6a39      	ldr	r1, [r7, #32]
 8006720:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006722:	e841 2300 	strex	r3, r2, [r1]
 8006726:	61fb      	str	r3, [r7, #28]
   return(result);
 8006728:	69fb      	ldr	r3, [r7, #28]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d1e5      	bne.n	80066fa <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800672e:	2300      	movs	r3, #0
}
 8006730:	4618      	mov	r0, r3
 8006732:	3760      	adds	r7, #96	; 0x60
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}
 8006738:	08006345 	.word	0x08006345
 800673c:	0800646b 	.word	0x0800646b
 8006740:	080064a1 	.word	0x080064a1

08006744 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006744:	b480      	push	{r7}
 8006746:	b089      	sub	sp, #36	; 0x24
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	330c      	adds	r3, #12
 8006752:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	e853 3f00 	ldrex	r3, [r3]
 800675a:	60bb      	str	r3, [r7, #8]
   return(result);
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006762:	61fb      	str	r3, [r7, #28]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	330c      	adds	r3, #12
 800676a:	69fa      	ldr	r2, [r7, #28]
 800676c:	61ba      	str	r2, [r7, #24]
 800676e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006770:	6979      	ldr	r1, [r7, #20]
 8006772:	69ba      	ldr	r2, [r7, #24]
 8006774:	e841 2300 	strex	r3, r2, [r1]
 8006778:	613b      	str	r3, [r7, #16]
   return(result);
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d1e5      	bne.n	800674c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2220      	movs	r2, #32
 8006784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006788:	bf00      	nop
 800678a:	3724      	adds	r7, #36	; 0x24
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr

08006794 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006794:	b480      	push	{r7}
 8006796:	b095      	sub	sp, #84	; 0x54
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	330c      	adds	r3, #12
 80067a2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067a6:	e853 3f00 	ldrex	r3, [r3]
 80067aa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80067ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80067b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	330c      	adds	r3, #12
 80067ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80067bc:	643a      	str	r2, [r7, #64]	; 0x40
 80067be:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80067c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80067c4:	e841 2300 	strex	r3, r2, [r1]
 80067c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80067ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d1e5      	bne.n	800679c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	3314      	adds	r3, #20
 80067d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d8:	6a3b      	ldr	r3, [r7, #32]
 80067da:	e853 3f00 	ldrex	r3, [r3]
 80067de:	61fb      	str	r3, [r7, #28]
   return(result);
 80067e0:	69fb      	ldr	r3, [r7, #28]
 80067e2:	f023 0301 	bic.w	r3, r3, #1
 80067e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	3314      	adds	r3, #20
 80067ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80067f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80067f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067f8:	e841 2300 	strex	r3, r2, [r1]
 80067fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80067fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006800:	2b00      	cmp	r3, #0
 8006802:	d1e5      	bne.n	80067d0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006808:	2b01      	cmp	r3, #1
 800680a:	d119      	bne.n	8006840 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	330c      	adds	r3, #12
 8006812:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	e853 3f00 	ldrex	r3, [r3]
 800681a:	60bb      	str	r3, [r7, #8]
   return(result);
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	f023 0310 	bic.w	r3, r3, #16
 8006822:	647b      	str	r3, [r7, #68]	; 0x44
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	330c      	adds	r3, #12
 800682a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800682c:	61ba      	str	r2, [r7, #24]
 800682e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006830:	6979      	ldr	r1, [r7, #20]
 8006832:	69ba      	ldr	r2, [r7, #24]
 8006834:	e841 2300 	strex	r3, r2, [r1]
 8006838:	613b      	str	r3, [r7, #16]
   return(result);
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d1e5      	bne.n	800680c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2220      	movs	r2, #32
 8006844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2200      	movs	r2, #0
 800684c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800684e:	bf00      	nop
 8006850:	3754      	adds	r7, #84	; 0x54
 8006852:	46bd      	mov	sp, r7
 8006854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006858:	4770      	bx	lr

0800685a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800685a:	b580      	push	{r7, lr}
 800685c:	b084      	sub	sp, #16
 800685e:	af00      	add	r7, sp, #0
 8006860:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006866:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2200      	movs	r2, #0
 800686c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2200      	movs	r2, #0
 8006872:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006874:	68f8      	ldr	r0, [r7, #12]
 8006876:	f7ff fd5b 	bl	8006330 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800687a:	bf00      	nop
 800687c:	3710      	adds	r7, #16
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}

08006882 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006882:	b480      	push	{r7}
 8006884:	b085      	sub	sp, #20
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006890:	b2db      	uxtb	r3, r3
 8006892:	2b21      	cmp	r3, #33	; 0x21
 8006894:	d13e      	bne.n	8006914 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800689e:	d114      	bne.n	80068ca <UART_Transmit_IT+0x48>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	691b      	ldr	r3, [r3, #16]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d110      	bne.n	80068ca <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6a1b      	ldr	r3, [r3, #32]
 80068ac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	881b      	ldrh	r3, [r3, #0]
 80068b2:	461a      	mov	r2, r3
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80068bc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6a1b      	ldr	r3, [r3, #32]
 80068c2:	1c9a      	adds	r2, r3, #2
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	621a      	str	r2, [r3, #32]
 80068c8:	e008      	b.n	80068dc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6a1b      	ldr	r3, [r3, #32]
 80068ce:	1c59      	adds	r1, r3, #1
 80068d0:	687a      	ldr	r2, [r7, #4]
 80068d2:	6211      	str	r1, [r2, #32]
 80068d4:	781a      	ldrb	r2, [r3, #0]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	3b01      	subs	r3, #1
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	4619      	mov	r1, r3
 80068ea:	84d1      	strh	r1, [r2, #38]	; 0x26
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d10f      	bne.n	8006910 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	68da      	ldr	r2, [r3, #12]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80068fe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	68da      	ldr	r2, [r3, #12]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800690e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006910:	2300      	movs	r3, #0
 8006912:	e000      	b.n	8006916 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006914:	2302      	movs	r3, #2
  }
}
 8006916:	4618      	mov	r0, r3
 8006918:	3714      	adds	r7, #20
 800691a:	46bd      	mov	sp, r7
 800691c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006920:	4770      	bx	lr

08006922 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006922:	b580      	push	{r7, lr}
 8006924:	b082      	sub	sp, #8
 8006926:	af00      	add	r7, sp, #0
 8006928:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	68da      	ldr	r2, [r3, #12]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006938:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2220      	movs	r2, #32
 800693e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f7ff fcd6 	bl	80062f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006948:	2300      	movs	r3, #0
}
 800694a:	4618      	mov	r0, r3
 800694c:	3708      	adds	r7, #8
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}

08006952 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006952:	b580      	push	{r7, lr}
 8006954:	b08c      	sub	sp, #48	; 0x30
 8006956:	af00      	add	r7, sp, #0
 8006958:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006960:	b2db      	uxtb	r3, r3
 8006962:	2b22      	cmp	r3, #34	; 0x22
 8006964:	f040 80ab 	bne.w	8006abe <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006970:	d117      	bne.n	80069a2 <UART_Receive_IT+0x50>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	691b      	ldr	r3, [r3, #16]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d113      	bne.n	80069a2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800697a:	2300      	movs	r3, #0
 800697c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006982:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	b29b      	uxth	r3, r3
 800698c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006990:	b29a      	uxth	r2, r3
 8006992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006994:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800699a:	1c9a      	adds	r2, r3, #2
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	629a      	str	r2, [r3, #40]	; 0x28
 80069a0:	e026      	b.n	80069f0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80069a8:	2300      	movs	r3, #0
 80069aa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069b4:	d007      	beq.n	80069c6 <UART_Receive_IT+0x74>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d10a      	bne.n	80069d4 <UART_Receive_IT+0x82>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	691b      	ldr	r3, [r3, #16]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d106      	bne.n	80069d4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	b2da      	uxtb	r2, r3
 80069ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069d0:	701a      	strb	r2, [r3, #0]
 80069d2:	e008      	b.n	80069e6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	b2db      	uxtb	r3, r3
 80069dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069e0:	b2da      	uxtb	r2, r3
 80069e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069e4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ea:	1c5a      	adds	r2, r3, #1
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	3b01      	subs	r3, #1
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	687a      	ldr	r2, [r7, #4]
 80069fc:	4619      	mov	r1, r3
 80069fe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d15a      	bne.n	8006aba <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	68da      	ldr	r2, [r3, #12]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f022 0220 	bic.w	r2, r2, #32
 8006a12:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	68da      	ldr	r2, [r3, #12]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a22:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	695a      	ldr	r2, [r3, #20]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f022 0201 	bic.w	r2, r2, #1
 8006a32:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2220      	movs	r2, #32
 8006a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d135      	bne.n	8006ab0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2200      	movs	r2, #0
 8006a48:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	330c      	adds	r3, #12
 8006a50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	e853 3f00 	ldrex	r3, [r3]
 8006a58:	613b      	str	r3, [r7, #16]
   return(result);
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	f023 0310 	bic.w	r3, r3, #16
 8006a60:	627b      	str	r3, [r7, #36]	; 0x24
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	330c      	adds	r3, #12
 8006a68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a6a:	623a      	str	r2, [r7, #32]
 8006a6c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a6e:	69f9      	ldr	r1, [r7, #28]
 8006a70:	6a3a      	ldr	r2, [r7, #32]
 8006a72:	e841 2300 	strex	r3, r2, [r1]
 8006a76:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a78:	69bb      	ldr	r3, [r7, #24]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d1e5      	bne.n	8006a4a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f003 0310 	and.w	r3, r3, #16
 8006a88:	2b10      	cmp	r3, #16
 8006a8a:	d10a      	bne.n	8006aa2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	60fb      	str	r3, [r7, #12]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	60fb      	str	r3, [r7, #12]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	60fb      	str	r3, [r7, #12]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006aa6:	4619      	mov	r1, r3
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f7fa ffcd 	bl	8001a48 <HAL_UARTEx_RxEventCallback>
 8006aae:	e002      	b.n	8006ab6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f7ff fc29 	bl	8006308 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	e002      	b.n	8006ac0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006aba:	2300      	movs	r3, #0
 8006abc:	e000      	b.n	8006ac0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006abe:	2302      	movs	r3, #2
  }
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3730      	adds	r7, #48	; 0x30
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}

08006ac8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006acc:	b09f      	sub	sp, #124	; 0x7c
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ad2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	691b      	ldr	r3, [r3, #16]
 8006ad8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006adc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ade:	68d9      	ldr	r1, [r3, #12]
 8006ae0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	ea40 0301 	orr.w	r3, r0, r1
 8006ae8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006aea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006aec:	689a      	ldr	r2, [r3, #8]
 8006aee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006af0:	691b      	ldr	r3, [r3, #16]
 8006af2:	431a      	orrs	r2, r3
 8006af4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006af6:	695b      	ldr	r3, [r3, #20]
 8006af8:	431a      	orrs	r2, r3
 8006afa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006afc:	69db      	ldr	r3, [r3, #28]
 8006afe:	4313      	orrs	r3, r2
 8006b00:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006b02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	68db      	ldr	r3, [r3, #12]
 8006b08:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006b0c:	f021 010c 	bic.w	r1, r1, #12
 8006b10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b12:	681a      	ldr	r2, [r3, #0]
 8006b14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b16:	430b      	orrs	r3, r1
 8006b18:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006b1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	695b      	ldr	r3, [r3, #20]
 8006b20:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006b24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b26:	6999      	ldr	r1, [r3, #24]
 8006b28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b2a:	681a      	ldr	r2, [r3, #0]
 8006b2c:	ea40 0301 	orr.w	r3, r0, r1
 8006b30:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006b32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b34:	681a      	ldr	r2, [r3, #0]
 8006b36:	4bc5      	ldr	r3, [pc, #788]	; (8006e4c <UART_SetConfig+0x384>)
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	d004      	beq.n	8006b46 <UART_SetConfig+0x7e>
 8006b3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b3e:	681a      	ldr	r2, [r3, #0]
 8006b40:	4bc3      	ldr	r3, [pc, #780]	; (8006e50 <UART_SetConfig+0x388>)
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d103      	bne.n	8006b4e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006b46:	f7fe fb07 	bl	8005158 <HAL_RCC_GetPCLK2Freq>
 8006b4a:	6778      	str	r0, [r7, #116]	; 0x74
 8006b4c:	e002      	b.n	8006b54 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006b4e:	f7fe faef 	bl	8005130 <HAL_RCC_GetPCLK1Freq>
 8006b52:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b56:	69db      	ldr	r3, [r3, #28]
 8006b58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b5c:	f040 80b6 	bne.w	8006ccc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006b60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b62:	461c      	mov	r4, r3
 8006b64:	f04f 0500 	mov.w	r5, #0
 8006b68:	4622      	mov	r2, r4
 8006b6a:	462b      	mov	r3, r5
 8006b6c:	1891      	adds	r1, r2, r2
 8006b6e:	6439      	str	r1, [r7, #64]	; 0x40
 8006b70:	415b      	adcs	r3, r3
 8006b72:	647b      	str	r3, [r7, #68]	; 0x44
 8006b74:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006b78:	1912      	adds	r2, r2, r4
 8006b7a:	eb45 0303 	adc.w	r3, r5, r3
 8006b7e:	f04f 0000 	mov.w	r0, #0
 8006b82:	f04f 0100 	mov.w	r1, #0
 8006b86:	00d9      	lsls	r1, r3, #3
 8006b88:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006b8c:	00d0      	lsls	r0, r2, #3
 8006b8e:	4602      	mov	r2, r0
 8006b90:	460b      	mov	r3, r1
 8006b92:	1911      	adds	r1, r2, r4
 8006b94:	6639      	str	r1, [r7, #96]	; 0x60
 8006b96:	416b      	adcs	r3, r5
 8006b98:	667b      	str	r3, [r7, #100]	; 0x64
 8006b9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	f04f 0300 	mov.w	r3, #0
 8006ba4:	1891      	adds	r1, r2, r2
 8006ba6:	63b9      	str	r1, [r7, #56]	; 0x38
 8006ba8:	415b      	adcs	r3, r3
 8006baa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006bb0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006bb4:	f7fa f868 	bl	8000c88 <__aeabi_uldivmod>
 8006bb8:	4602      	mov	r2, r0
 8006bba:	460b      	mov	r3, r1
 8006bbc:	4ba5      	ldr	r3, [pc, #660]	; (8006e54 <UART_SetConfig+0x38c>)
 8006bbe:	fba3 2302 	umull	r2, r3, r3, r2
 8006bc2:	095b      	lsrs	r3, r3, #5
 8006bc4:	011e      	lsls	r6, r3, #4
 8006bc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006bc8:	461c      	mov	r4, r3
 8006bca:	f04f 0500 	mov.w	r5, #0
 8006bce:	4622      	mov	r2, r4
 8006bd0:	462b      	mov	r3, r5
 8006bd2:	1891      	adds	r1, r2, r2
 8006bd4:	6339      	str	r1, [r7, #48]	; 0x30
 8006bd6:	415b      	adcs	r3, r3
 8006bd8:	637b      	str	r3, [r7, #52]	; 0x34
 8006bda:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006bde:	1912      	adds	r2, r2, r4
 8006be0:	eb45 0303 	adc.w	r3, r5, r3
 8006be4:	f04f 0000 	mov.w	r0, #0
 8006be8:	f04f 0100 	mov.w	r1, #0
 8006bec:	00d9      	lsls	r1, r3, #3
 8006bee:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006bf2:	00d0      	lsls	r0, r2, #3
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	460b      	mov	r3, r1
 8006bf8:	1911      	adds	r1, r2, r4
 8006bfa:	65b9      	str	r1, [r7, #88]	; 0x58
 8006bfc:	416b      	adcs	r3, r5
 8006bfe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	461a      	mov	r2, r3
 8006c06:	f04f 0300 	mov.w	r3, #0
 8006c0a:	1891      	adds	r1, r2, r2
 8006c0c:	62b9      	str	r1, [r7, #40]	; 0x28
 8006c0e:	415b      	adcs	r3, r3
 8006c10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c12:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006c16:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006c1a:	f7fa f835 	bl	8000c88 <__aeabi_uldivmod>
 8006c1e:	4602      	mov	r2, r0
 8006c20:	460b      	mov	r3, r1
 8006c22:	4b8c      	ldr	r3, [pc, #560]	; (8006e54 <UART_SetConfig+0x38c>)
 8006c24:	fba3 1302 	umull	r1, r3, r3, r2
 8006c28:	095b      	lsrs	r3, r3, #5
 8006c2a:	2164      	movs	r1, #100	; 0x64
 8006c2c:	fb01 f303 	mul.w	r3, r1, r3
 8006c30:	1ad3      	subs	r3, r2, r3
 8006c32:	00db      	lsls	r3, r3, #3
 8006c34:	3332      	adds	r3, #50	; 0x32
 8006c36:	4a87      	ldr	r2, [pc, #540]	; (8006e54 <UART_SetConfig+0x38c>)
 8006c38:	fba2 2303 	umull	r2, r3, r2, r3
 8006c3c:	095b      	lsrs	r3, r3, #5
 8006c3e:	005b      	lsls	r3, r3, #1
 8006c40:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006c44:	441e      	add	r6, r3
 8006c46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f04f 0100 	mov.w	r1, #0
 8006c4e:	4602      	mov	r2, r0
 8006c50:	460b      	mov	r3, r1
 8006c52:	1894      	adds	r4, r2, r2
 8006c54:	623c      	str	r4, [r7, #32]
 8006c56:	415b      	adcs	r3, r3
 8006c58:	627b      	str	r3, [r7, #36]	; 0x24
 8006c5a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006c5e:	1812      	adds	r2, r2, r0
 8006c60:	eb41 0303 	adc.w	r3, r1, r3
 8006c64:	f04f 0400 	mov.w	r4, #0
 8006c68:	f04f 0500 	mov.w	r5, #0
 8006c6c:	00dd      	lsls	r5, r3, #3
 8006c6e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006c72:	00d4      	lsls	r4, r2, #3
 8006c74:	4622      	mov	r2, r4
 8006c76:	462b      	mov	r3, r5
 8006c78:	1814      	adds	r4, r2, r0
 8006c7a:	653c      	str	r4, [r7, #80]	; 0x50
 8006c7c:	414b      	adcs	r3, r1
 8006c7e:	657b      	str	r3, [r7, #84]	; 0x54
 8006c80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	461a      	mov	r2, r3
 8006c86:	f04f 0300 	mov.w	r3, #0
 8006c8a:	1891      	adds	r1, r2, r2
 8006c8c:	61b9      	str	r1, [r7, #24]
 8006c8e:	415b      	adcs	r3, r3
 8006c90:	61fb      	str	r3, [r7, #28]
 8006c92:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006c96:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006c9a:	f7f9 fff5 	bl	8000c88 <__aeabi_uldivmod>
 8006c9e:	4602      	mov	r2, r0
 8006ca0:	460b      	mov	r3, r1
 8006ca2:	4b6c      	ldr	r3, [pc, #432]	; (8006e54 <UART_SetConfig+0x38c>)
 8006ca4:	fba3 1302 	umull	r1, r3, r3, r2
 8006ca8:	095b      	lsrs	r3, r3, #5
 8006caa:	2164      	movs	r1, #100	; 0x64
 8006cac:	fb01 f303 	mul.w	r3, r1, r3
 8006cb0:	1ad3      	subs	r3, r2, r3
 8006cb2:	00db      	lsls	r3, r3, #3
 8006cb4:	3332      	adds	r3, #50	; 0x32
 8006cb6:	4a67      	ldr	r2, [pc, #412]	; (8006e54 <UART_SetConfig+0x38c>)
 8006cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8006cbc:	095b      	lsrs	r3, r3, #5
 8006cbe:	f003 0207 	and.w	r2, r3, #7
 8006cc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4432      	add	r2, r6
 8006cc8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006cca:	e0b9      	b.n	8006e40 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006ccc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006cce:	461c      	mov	r4, r3
 8006cd0:	f04f 0500 	mov.w	r5, #0
 8006cd4:	4622      	mov	r2, r4
 8006cd6:	462b      	mov	r3, r5
 8006cd8:	1891      	adds	r1, r2, r2
 8006cda:	6139      	str	r1, [r7, #16]
 8006cdc:	415b      	adcs	r3, r3
 8006cde:	617b      	str	r3, [r7, #20]
 8006ce0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006ce4:	1912      	adds	r2, r2, r4
 8006ce6:	eb45 0303 	adc.w	r3, r5, r3
 8006cea:	f04f 0000 	mov.w	r0, #0
 8006cee:	f04f 0100 	mov.w	r1, #0
 8006cf2:	00d9      	lsls	r1, r3, #3
 8006cf4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006cf8:	00d0      	lsls	r0, r2, #3
 8006cfa:	4602      	mov	r2, r0
 8006cfc:	460b      	mov	r3, r1
 8006cfe:	eb12 0804 	adds.w	r8, r2, r4
 8006d02:	eb43 0905 	adc.w	r9, r3, r5
 8006d06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f04f 0100 	mov.w	r1, #0
 8006d10:	f04f 0200 	mov.w	r2, #0
 8006d14:	f04f 0300 	mov.w	r3, #0
 8006d18:	008b      	lsls	r3, r1, #2
 8006d1a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006d1e:	0082      	lsls	r2, r0, #2
 8006d20:	4640      	mov	r0, r8
 8006d22:	4649      	mov	r1, r9
 8006d24:	f7f9 ffb0 	bl	8000c88 <__aeabi_uldivmod>
 8006d28:	4602      	mov	r2, r0
 8006d2a:	460b      	mov	r3, r1
 8006d2c:	4b49      	ldr	r3, [pc, #292]	; (8006e54 <UART_SetConfig+0x38c>)
 8006d2e:	fba3 2302 	umull	r2, r3, r3, r2
 8006d32:	095b      	lsrs	r3, r3, #5
 8006d34:	011e      	lsls	r6, r3, #4
 8006d36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f04f 0100 	mov.w	r1, #0
 8006d3e:	4602      	mov	r2, r0
 8006d40:	460b      	mov	r3, r1
 8006d42:	1894      	adds	r4, r2, r2
 8006d44:	60bc      	str	r4, [r7, #8]
 8006d46:	415b      	adcs	r3, r3
 8006d48:	60fb      	str	r3, [r7, #12]
 8006d4a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006d4e:	1812      	adds	r2, r2, r0
 8006d50:	eb41 0303 	adc.w	r3, r1, r3
 8006d54:	f04f 0400 	mov.w	r4, #0
 8006d58:	f04f 0500 	mov.w	r5, #0
 8006d5c:	00dd      	lsls	r5, r3, #3
 8006d5e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006d62:	00d4      	lsls	r4, r2, #3
 8006d64:	4622      	mov	r2, r4
 8006d66:	462b      	mov	r3, r5
 8006d68:	1814      	adds	r4, r2, r0
 8006d6a:	64bc      	str	r4, [r7, #72]	; 0x48
 8006d6c:	414b      	adcs	r3, r1
 8006d6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	4618      	mov	r0, r3
 8006d76:	f04f 0100 	mov.w	r1, #0
 8006d7a:	f04f 0200 	mov.w	r2, #0
 8006d7e:	f04f 0300 	mov.w	r3, #0
 8006d82:	008b      	lsls	r3, r1, #2
 8006d84:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006d88:	0082      	lsls	r2, r0, #2
 8006d8a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006d8e:	f7f9 ff7b 	bl	8000c88 <__aeabi_uldivmod>
 8006d92:	4602      	mov	r2, r0
 8006d94:	460b      	mov	r3, r1
 8006d96:	4b2f      	ldr	r3, [pc, #188]	; (8006e54 <UART_SetConfig+0x38c>)
 8006d98:	fba3 1302 	umull	r1, r3, r3, r2
 8006d9c:	095b      	lsrs	r3, r3, #5
 8006d9e:	2164      	movs	r1, #100	; 0x64
 8006da0:	fb01 f303 	mul.w	r3, r1, r3
 8006da4:	1ad3      	subs	r3, r2, r3
 8006da6:	011b      	lsls	r3, r3, #4
 8006da8:	3332      	adds	r3, #50	; 0x32
 8006daa:	4a2a      	ldr	r2, [pc, #168]	; (8006e54 <UART_SetConfig+0x38c>)
 8006dac:	fba2 2303 	umull	r2, r3, r2, r3
 8006db0:	095b      	lsrs	r3, r3, #5
 8006db2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006db6:	441e      	add	r6, r3
 8006db8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f04f 0100 	mov.w	r1, #0
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	460b      	mov	r3, r1
 8006dc4:	1894      	adds	r4, r2, r2
 8006dc6:	603c      	str	r4, [r7, #0]
 8006dc8:	415b      	adcs	r3, r3
 8006dca:	607b      	str	r3, [r7, #4]
 8006dcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006dd0:	1812      	adds	r2, r2, r0
 8006dd2:	eb41 0303 	adc.w	r3, r1, r3
 8006dd6:	f04f 0400 	mov.w	r4, #0
 8006dda:	f04f 0500 	mov.w	r5, #0
 8006dde:	00dd      	lsls	r5, r3, #3
 8006de0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006de4:	00d4      	lsls	r4, r2, #3
 8006de6:	4622      	mov	r2, r4
 8006de8:	462b      	mov	r3, r5
 8006dea:	eb12 0a00 	adds.w	sl, r2, r0
 8006dee:	eb43 0b01 	adc.w	fp, r3, r1
 8006df2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	4618      	mov	r0, r3
 8006df8:	f04f 0100 	mov.w	r1, #0
 8006dfc:	f04f 0200 	mov.w	r2, #0
 8006e00:	f04f 0300 	mov.w	r3, #0
 8006e04:	008b      	lsls	r3, r1, #2
 8006e06:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006e0a:	0082      	lsls	r2, r0, #2
 8006e0c:	4650      	mov	r0, sl
 8006e0e:	4659      	mov	r1, fp
 8006e10:	f7f9 ff3a 	bl	8000c88 <__aeabi_uldivmod>
 8006e14:	4602      	mov	r2, r0
 8006e16:	460b      	mov	r3, r1
 8006e18:	4b0e      	ldr	r3, [pc, #56]	; (8006e54 <UART_SetConfig+0x38c>)
 8006e1a:	fba3 1302 	umull	r1, r3, r3, r2
 8006e1e:	095b      	lsrs	r3, r3, #5
 8006e20:	2164      	movs	r1, #100	; 0x64
 8006e22:	fb01 f303 	mul.w	r3, r1, r3
 8006e26:	1ad3      	subs	r3, r2, r3
 8006e28:	011b      	lsls	r3, r3, #4
 8006e2a:	3332      	adds	r3, #50	; 0x32
 8006e2c:	4a09      	ldr	r2, [pc, #36]	; (8006e54 <UART_SetConfig+0x38c>)
 8006e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8006e32:	095b      	lsrs	r3, r3, #5
 8006e34:	f003 020f 	and.w	r2, r3, #15
 8006e38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4432      	add	r2, r6
 8006e3e:	609a      	str	r2, [r3, #8]
}
 8006e40:	bf00      	nop
 8006e42:	377c      	adds	r7, #124	; 0x7c
 8006e44:	46bd      	mov	sp, r7
 8006e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e4a:	bf00      	nop
 8006e4c:	40011000 	.word	0x40011000
 8006e50:	40011400 	.word	0x40011400
 8006e54:	51eb851f 	.word	0x51eb851f

08006e58 <__errno>:
 8006e58:	4b01      	ldr	r3, [pc, #4]	; (8006e60 <__errno+0x8>)
 8006e5a:	6818      	ldr	r0, [r3, #0]
 8006e5c:	4770      	bx	lr
 8006e5e:	bf00      	nop
 8006e60:	20000010 	.word	0x20000010

08006e64 <__libc_init_array>:
 8006e64:	b570      	push	{r4, r5, r6, lr}
 8006e66:	4d0d      	ldr	r5, [pc, #52]	; (8006e9c <__libc_init_array+0x38>)
 8006e68:	4c0d      	ldr	r4, [pc, #52]	; (8006ea0 <__libc_init_array+0x3c>)
 8006e6a:	1b64      	subs	r4, r4, r5
 8006e6c:	10a4      	asrs	r4, r4, #2
 8006e6e:	2600      	movs	r6, #0
 8006e70:	42a6      	cmp	r6, r4
 8006e72:	d109      	bne.n	8006e88 <__libc_init_array+0x24>
 8006e74:	4d0b      	ldr	r5, [pc, #44]	; (8006ea4 <__libc_init_array+0x40>)
 8006e76:	4c0c      	ldr	r4, [pc, #48]	; (8006ea8 <__libc_init_array+0x44>)
 8006e78:	f004 fd38 	bl	800b8ec <_init>
 8006e7c:	1b64      	subs	r4, r4, r5
 8006e7e:	10a4      	asrs	r4, r4, #2
 8006e80:	2600      	movs	r6, #0
 8006e82:	42a6      	cmp	r6, r4
 8006e84:	d105      	bne.n	8006e92 <__libc_init_array+0x2e>
 8006e86:	bd70      	pop	{r4, r5, r6, pc}
 8006e88:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e8c:	4798      	blx	r3
 8006e8e:	3601      	adds	r6, #1
 8006e90:	e7ee      	b.n	8006e70 <__libc_init_array+0xc>
 8006e92:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e96:	4798      	blx	r3
 8006e98:	3601      	adds	r6, #1
 8006e9a:	e7f2      	b.n	8006e82 <__libc_init_array+0x1e>
 8006e9c:	0800be74 	.word	0x0800be74
 8006ea0:	0800be74 	.word	0x0800be74
 8006ea4:	0800be74 	.word	0x0800be74
 8006ea8:	0800be78 	.word	0x0800be78

08006eac <memcpy>:
 8006eac:	440a      	add	r2, r1
 8006eae:	4291      	cmp	r1, r2
 8006eb0:	f100 33ff 	add.w	r3, r0, #4294967295
 8006eb4:	d100      	bne.n	8006eb8 <memcpy+0xc>
 8006eb6:	4770      	bx	lr
 8006eb8:	b510      	push	{r4, lr}
 8006eba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ebe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ec2:	4291      	cmp	r1, r2
 8006ec4:	d1f9      	bne.n	8006eba <memcpy+0xe>
 8006ec6:	bd10      	pop	{r4, pc}

08006ec8 <memset>:
 8006ec8:	4402      	add	r2, r0
 8006eca:	4603      	mov	r3, r0
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d100      	bne.n	8006ed2 <memset+0xa>
 8006ed0:	4770      	bx	lr
 8006ed2:	f803 1b01 	strb.w	r1, [r3], #1
 8006ed6:	e7f9      	b.n	8006ecc <memset+0x4>

08006ed8 <__cvt>:
 8006ed8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006edc:	ec55 4b10 	vmov	r4, r5, d0
 8006ee0:	2d00      	cmp	r5, #0
 8006ee2:	460e      	mov	r6, r1
 8006ee4:	4619      	mov	r1, r3
 8006ee6:	462b      	mov	r3, r5
 8006ee8:	bfbb      	ittet	lt
 8006eea:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006eee:	461d      	movlt	r5, r3
 8006ef0:	2300      	movge	r3, #0
 8006ef2:	232d      	movlt	r3, #45	; 0x2d
 8006ef4:	700b      	strb	r3, [r1, #0]
 8006ef6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ef8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006efc:	4691      	mov	r9, r2
 8006efe:	f023 0820 	bic.w	r8, r3, #32
 8006f02:	bfbc      	itt	lt
 8006f04:	4622      	movlt	r2, r4
 8006f06:	4614      	movlt	r4, r2
 8006f08:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006f0c:	d005      	beq.n	8006f1a <__cvt+0x42>
 8006f0e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006f12:	d100      	bne.n	8006f16 <__cvt+0x3e>
 8006f14:	3601      	adds	r6, #1
 8006f16:	2102      	movs	r1, #2
 8006f18:	e000      	b.n	8006f1c <__cvt+0x44>
 8006f1a:	2103      	movs	r1, #3
 8006f1c:	ab03      	add	r3, sp, #12
 8006f1e:	9301      	str	r3, [sp, #4]
 8006f20:	ab02      	add	r3, sp, #8
 8006f22:	9300      	str	r3, [sp, #0]
 8006f24:	ec45 4b10 	vmov	d0, r4, r5
 8006f28:	4653      	mov	r3, sl
 8006f2a:	4632      	mov	r2, r6
 8006f2c:	f001 fe94 	bl	8008c58 <_dtoa_r>
 8006f30:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006f34:	4607      	mov	r7, r0
 8006f36:	d102      	bne.n	8006f3e <__cvt+0x66>
 8006f38:	f019 0f01 	tst.w	r9, #1
 8006f3c:	d022      	beq.n	8006f84 <__cvt+0xac>
 8006f3e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006f42:	eb07 0906 	add.w	r9, r7, r6
 8006f46:	d110      	bne.n	8006f6a <__cvt+0x92>
 8006f48:	783b      	ldrb	r3, [r7, #0]
 8006f4a:	2b30      	cmp	r3, #48	; 0x30
 8006f4c:	d10a      	bne.n	8006f64 <__cvt+0x8c>
 8006f4e:	2200      	movs	r2, #0
 8006f50:	2300      	movs	r3, #0
 8006f52:	4620      	mov	r0, r4
 8006f54:	4629      	mov	r1, r5
 8006f56:	f7f9 fdb7 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f5a:	b918      	cbnz	r0, 8006f64 <__cvt+0x8c>
 8006f5c:	f1c6 0601 	rsb	r6, r6, #1
 8006f60:	f8ca 6000 	str.w	r6, [sl]
 8006f64:	f8da 3000 	ldr.w	r3, [sl]
 8006f68:	4499      	add	r9, r3
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	4620      	mov	r0, r4
 8006f70:	4629      	mov	r1, r5
 8006f72:	f7f9 fda9 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f76:	b108      	cbz	r0, 8006f7c <__cvt+0xa4>
 8006f78:	f8cd 900c 	str.w	r9, [sp, #12]
 8006f7c:	2230      	movs	r2, #48	; 0x30
 8006f7e:	9b03      	ldr	r3, [sp, #12]
 8006f80:	454b      	cmp	r3, r9
 8006f82:	d307      	bcc.n	8006f94 <__cvt+0xbc>
 8006f84:	9b03      	ldr	r3, [sp, #12]
 8006f86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006f88:	1bdb      	subs	r3, r3, r7
 8006f8a:	4638      	mov	r0, r7
 8006f8c:	6013      	str	r3, [r2, #0]
 8006f8e:	b004      	add	sp, #16
 8006f90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f94:	1c59      	adds	r1, r3, #1
 8006f96:	9103      	str	r1, [sp, #12]
 8006f98:	701a      	strb	r2, [r3, #0]
 8006f9a:	e7f0      	b.n	8006f7e <__cvt+0xa6>

08006f9c <__exponent>:
 8006f9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	2900      	cmp	r1, #0
 8006fa2:	bfb8      	it	lt
 8006fa4:	4249      	neglt	r1, r1
 8006fa6:	f803 2b02 	strb.w	r2, [r3], #2
 8006faa:	bfb4      	ite	lt
 8006fac:	222d      	movlt	r2, #45	; 0x2d
 8006fae:	222b      	movge	r2, #43	; 0x2b
 8006fb0:	2909      	cmp	r1, #9
 8006fb2:	7042      	strb	r2, [r0, #1]
 8006fb4:	dd2a      	ble.n	800700c <__exponent+0x70>
 8006fb6:	f10d 0407 	add.w	r4, sp, #7
 8006fba:	46a4      	mov	ip, r4
 8006fbc:	270a      	movs	r7, #10
 8006fbe:	46a6      	mov	lr, r4
 8006fc0:	460a      	mov	r2, r1
 8006fc2:	fb91 f6f7 	sdiv	r6, r1, r7
 8006fc6:	fb07 1516 	mls	r5, r7, r6, r1
 8006fca:	3530      	adds	r5, #48	; 0x30
 8006fcc:	2a63      	cmp	r2, #99	; 0x63
 8006fce:	f104 34ff 	add.w	r4, r4, #4294967295
 8006fd2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006fd6:	4631      	mov	r1, r6
 8006fd8:	dcf1      	bgt.n	8006fbe <__exponent+0x22>
 8006fda:	3130      	adds	r1, #48	; 0x30
 8006fdc:	f1ae 0502 	sub.w	r5, lr, #2
 8006fe0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006fe4:	1c44      	adds	r4, r0, #1
 8006fe6:	4629      	mov	r1, r5
 8006fe8:	4561      	cmp	r1, ip
 8006fea:	d30a      	bcc.n	8007002 <__exponent+0x66>
 8006fec:	f10d 0209 	add.w	r2, sp, #9
 8006ff0:	eba2 020e 	sub.w	r2, r2, lr
 8006ff4:	4565      	cmp	r5, ip
 8006ff6:	bf88      	it	hi
 8006ff8:	2200      	movhi	r2, #0
 8006ffa:	4413      	add	r3, r2
 8006ffc:	1a18      	subs	r0, r3, r0
 8006ffe:	b003      	add	sp, #12
 8007000:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007002:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007006:	f804 2f01 	strb.w	r2, [r4, #1]!
 800700a:	e7ed      	b.n	8006fe8 <__exponent+0x4c>
 800700c:	2330      	movs	r3, #48	; 0x30
 800700e:	3130      	adds	r1, #48	; 0x30
 8007010:	7083      	strb	r3, [r0, #2]
 8007012:	70c1      	strb	r1, [r0, #3]
 8007014:	1d03      	adds	r3, r0, #4
 8007016:	e7f1      	b.n	8006ffc <__exponent+0x60>

08007018 <_printf_float>:
 8007018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800701c:	ed2d 8b02 	vpush	{d8}
 8007020:	b08d      	sub	sp, #52	; 0x34
 8007022:	460c      	mov	r4, r1
 8007024:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007028:	4616      	mov	r6, r2
 800702a:	461f      	mov	r7, r3
 800702c:	4605      	mov	r5, r0
 800702e:	f003 f925 	bl	800a27c <_localeconv_r>
 8007032:	f8d0 a000 	ldr.w	sl, [r0]
 8007036:	4650      	mov	r0, sl
 8007038:	f7f9 f8ca 	bl	80001d0 <strlen>
 800703c:	2300      	movs	r3, #0
 800703e:	930a      	str	r3, [sp, #40]	; 0x28
 8007040:	6823      	ldr	r3, [r4, #0]
 8007042:	9305      	str	r3, [sp, #20]
 8007044:	f8d8 3000 	ldr.w	r3, [r8]
 8007048:	f894 b018 	ldrb.w	fp, [r4, #24]
 800704c:	3307      	adds	r3, #7
 800704e:	f023 0307 	bic.w	r3, r3, #7
 8007052:	f103 0208 	add.w	r2, r3, #8
 8007056:	f8c8 2000 	str.w	r2, [r8]
 800705a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800705e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007062:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007066:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800706a:	9307      	str	r3, [sp, #28]
 800706c:	f8cd 8018 	str.w	r8, [sp, #24]
 8007070:	ee08 0a10 	vmov	s16, r0
 8007074:	4b9f      	ldr	r3, [pc, #636]	; (80072f4 <_printf_float+0x2dc>)
 8007076:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800707a:	f04f 32ff 	mov.w	r2, #4294967295
 800707e:	f7f9 fd55 	bl	8000b2c <__aeabi_dcmpun>
 8007082:	bb88      	cbnz	r0, 80070e8 <_printf_float+0xd0>
 8007084:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007088:	4b9a      	ldr	r3, [pc, #616]	; (80072f4 <_printf_float+0x2dc>)
 800708a:	f04f 32ff 	mov.w	r2, #4294967295
 800708e:	f7f9 fd2f 	bl	8000af0 <__aeabi_dcmple>
 8007092:	bb48      	cbnz	r0, 80070e8 <_printf_float+0xd0>
 8007094:	2200      	movs	r2, #0
 8007096:	2300      	movs	r3, #0
 8007098:	4640      	mov	r0, r8
 800709a:	4649      	mov	r1, r9
 800709c:	f7f9 fd1e 	bl	8000adc <__aeabi_dcmplt>
 80070a0:	b110      	cbz	r0, 80070a8 <_printf_float+0x90>
 80070a2:	232d      	movs	r3, #45	; 0x2d
 80070a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070a8:	4b93      	ldr	r3, [pc, #588]	; (80072f8 <_printf_float+0x2e0>)
 80070aa:	4894      	ldr	r0, [pc, #592]	; (80072fc <_printf_float+0x2e4>)
 80070ac:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80070b0:	bf94      	ite	ls
 80070b2:	4698      	movls	r8, r3
 80070b4:	4680      	movhi	r8, r0
 80070b6:	2303      	movs	r3, #3
 80070b8:	6123      	str	r3, [r4, #16]
 80070ba:	9b05      	ldr	r3, [sp, #20]
 80070bc:	f023 0204 	bic.w	r2, r3, #4
 80070c0:	6022      	str	r2, [r4, #0]
 80070c2:	f04f 0900 	mov.w	r9, #0
 80070c6:	9700      	str	r7, [sp, #0]
 80070c8:	4633      	mov	r3, r6
 80070ca:	aa0b      	add	r2, sp, #44	; 0x2c
 80070cc:	4621      	mov	r1, r4
 80070ce:	4628      	mov	r0, r5
 80070d0:	f000 f9d8 	bl	8007484 <_printf_common>
 80070d4:	3001      	adds	r0, #1
 80070d6:	f040 8090 	bne.w	80071fa <_printf_float+0x1e2>
 80070da:	f04f 30ff 	mov.w	r0, #4294967295
 80070de:	b00d      	add	sp, #52	; 0x34
 80070e0:	ecbd 8b02 	vpop	{d8}
 80070e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070e8:	4642      	mov	r2, r8
 80070ea:	464b      	mov	r3, r9
 80070ec:	4640      	mov	r0, r8
 80070ee:	4649      	mov	r1, r9
 80070f0:	f7f9 fd1c 	bl	8000b2c <__aeabi_dcmpun>
 80070f4:	b140      	cbz	r0, 8007108 <_printf_float+0xf0>
 80070f6:	464b      	mov	r3, r9
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	bfbc      	itt	lt
 80070fc:	232d      	movlt	r3, #45	; 0x2d
 80070fe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007102:	487f      	ldr	r0, [pc, #508]	; (8007300 <_printf_float+0x2e8>)
 8007104:	4b7f      	ldr	r3, [pc, #508]	; (8007304 <_printf_float+0x2ec>)
 8007106:	e7d1      	b.n	80070ac <_printf_float+0x94>
 8007108:	6863      	ldr	r3, [r4, #4]
 800710a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800710e:	9206      	str	r2, [sp, #24]
 8007110:	1c5a      	adds	r2, r3, #1
 8007112:	d13f      	bne.n	8007194 <_printf_float+0x17c>
 8007114:	2306      	movs	r3, #6
 8007116:	6063      	str	r3, [r4, #4]
 8007118:	9b05      	ldr	r3, [sp, #20]
 800711a:	6861      	ldr	r1, [r4, #4]
 800711c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007120:	2300      	movs	r3, #0
 8007122:	9303      	str	r3, [sp, #12]
 8007124:	ab0a      	add	r3, sp, #40	; 0x28
 8007126:	e9cd b301 	strd	fp, r3, [sp, #4]
 800712a:	ab09      	add	r3, sp, #36	; 0x24
 800712c:	ec49 8b10 	vmov	d0, r8, r9
 8007130:	9300      	str	r3, [sp, #0]
 8007132:	6022      	str	r2, [r4, #0]
 8007134:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007138:	4628      	mov	r0, r5
 800713a:	f7ff fecd 	bl	8006ed8 <__cvt>
 800713e:	9b06      	ldr	r3, [sp, #24]
 8007140:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007142:	2b47      	cmp	r3, #71	; 0x47
 8007144:	4680      	mov	r8, r0
 8007146:	d108      	bne.n	800715a <_printf_float+0x142>
 8007148:	1cc8      	adds	r0, r1, #3
 800714a:	db02      	blt.n	8007152 <_printf_float+0x13a>
 800714c:	6863      	ldr	r3, [r4, #4]
 800714e:	4299      	cmp	r1, r3
 8007150:	dd41      	ble.n	80071d6 <_printf_float+0x1be>
 8007152:	f1ab 0b02 	sub.w	fp, fp, #2
 8007156:	fa5f fb8b 	uxtb.w	fp, fp
 800715a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800715e:	d820      	bhi.n	80071a2 <_printf_float+0x18a>
 8007160:	3901      	subs	r1, #1
 8007162:	465a      	mov	r2, fp
 8007164:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007168:	9109      	str	r1, [sp, #36]	; 0x24
 800716a:	f7ff ff17 	bl	8006f9c <__exponent>
 800716e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007170:	1813      	adds	r3, r2, r0
 8007172:	2a01      	cmp	r2, #1
 8007174:	4681      	mov	r9, r0
 8007176:	6123      	str	r3, [r4, #16]
 8007178:	dc02      	bgt.n	8007180 <_printf_float+0x168>
 800717a:	6822      	ldr	r2, [r4, #0]
 800717c:	07d2      	lsls	r2, r2, #31
 800717e:	d501      	bpl.n	8007184 <_printf_float+0x16c>
 8007180:	3301      	adds	r3, #1
 8007182:	6123      	str	r3, [r4, #16]
 8007184:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007188:	2b00      	cmp	r3, #0
 800718a:	d09c      	beq.n	80070c6 <_printf_float+0xae>
 800718c:	232d      	movs	r3, #45	; 0x2d
 800718e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007192:	e798      	b.n	80070c6 <_printf_float+0xae>
 8007194:	9a06      	ldr	r2, [sp, #24]
 8007196:	2a47      	cmp	r2, #71	; 0x47
 8007198:	d1be      	bne.n	8007118 <_printf_float+0x100>
 800719a:	2b00      	cmp	r3, #0
 800719c:	d1bc      	bne.n	8007118 <_printf_float+0x100>
 800719e:	2301      	movs	r3, #1
 80071a0:	e7b9      	b.n	8007116 <_printf_float+0xfe>
 80071a2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80071a6:	d118      	bne.n	80071da <_printf_float+0x1c2>
 80071a8:	2900      	cmp	r1, #0
 80071aa:	6863      	ldr	r3, [r4, #4]
 80071ac:	dd0b      	ble.n	80071c6 <_printf_float+0x1ae>
 80071ae:	6121      	str	r1, [r4, #16]
 80071b0:	b913      	cbnz	r3, 80071b8 <_printf_float+0x1a0>
 80071b2:	6822      	ldr	r2, [r4, #0]
 80071b4:	07d0      	lsls	r0, r2, #31
 80071b6:	d502      	bpl.n	80071be <_printf_float+0x1a6>
 80071b8:	3301      	adds	r3, #1
 80071ba:	440b      	add	r3, r1
 80071bc:	6123      	str	r3, [r4, #16]
 80071be:	65a1      	str	r1, [r4, #88]	; 0x58
 80071c0:	f04f 0900 	mov.w	r9, #0
 80071c4:	e7de      	b.n	8007184 <_printf_float+0x16c>
 80071c6:	b913      	cbnz	r3, 80071ce <_printf_float+0x1b6>
 80071c8:	6822      	ldr	r2, [r4, #0]
 80071ca:	07d2      	lsls	r2, r2, #31
 80071cc:	d501      	bpl.n	80071d2 <_printf_float+0x1ba>
 80071ce:	3302      	adds	r3, #2
 80071d0:	e7f4      	b.n	80071bc <_printf_float+0x1a4>
 80071d2:	2301      	movs	r3, #1
 80071d4:	e7f2      	b.n	80071bc <_printf_float+0x1a4>
 80071d6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80071da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071dc:	4299      	cmp	r1, r3
 80071de:	db05      	blt.n	80071ec <_printf_float+0x1d4>
 80071e0:	6823      	ldr	r3, [r4, #0]
 80071e2:	6121      	str	r1, [r4, #16]
 80071e4:	07d8      	lsls	r0, r3, #31
 80071e6:	d5ea      	bpl.n	80071be <_printf_float+0x1a6>
 80071e8:	1c4b      	adds	r3, r1, #1
 80071ea:	e7e7      	b.n	80071bc <_printf_float+0x1a4>
 80071ec:	2900      	cmp	r1, #0
 80071ee:	bfd4      	ite	le
 80071f0:	f1c1 0202 	rsble	r2, r1, #2
 80071f4:	2201      	movgt	r2, #1
 80071f6:	4413      	add	r3, r2
 80071f8:	e7e0      	b.n	80071bc <_printf_float+0x1a4>
 80071fa:	6823      	ldr	r3, [r4, #0]
 80071fc:	055a      	lsls	r2, r3, #21
 80071fe:	d407      	bmi.n	8007210 <_printf_float+0x1f8>
 8007200:	6923      	ldr	r3, [r4, #16]
 8007202:	4642      	mov	r2, r8
 8007204:	4631      	mov	r1, r6
 8007206:	4628      	mov	r0, r5
 8007208:	47b8      	blx	r7
 800720a:	3001      	adds	r0, #1
 800720c:	d12c      	bne.n	8007268 <_printf_float+0x250>
 800720e:	e764      	b.n	80070da <_printf_float+0xc2>
 8007210:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007214:	f240 80e0 	bls.w	80073d8 <_printf_float+0x3c0>
 8007218:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800721c:	2200      	movs	r2, #0
 800721e:	2300      	movs	r3, #0
 8007220:	f7f9 fc52 	bl	8000ac8 <__aeabi_dcmpeq>
 8007224:	2800      	cmp	r0, #0
 8007226:	d034      	beq.n	8007292 <_printf_float+0x27a>
 8007228:	4a37      	ldr	r2, [pc, #220]	; (8007308 <_printf_float+0x2f0>)
 800722a:	2301      	movs	r3, #1
 800722c:	4631      	mov	r1, r6
 800722e:	4628      	mov	r0, r5
 8007230:	47b8      	blx	r7
 8007232:	3001      	adds	r0, #1
 8007234:	f43f af51 	beq.w	80070da <_printf_float+0xc2>
 8007238:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800723c:	429a      	cmp	r2, r3
 800723e:	db02      	blt.n	8007246 <_printf_float+0x22e>
 8007240:	6823      	ldr	r3, [r4, #0]
 8007242:	07d8      	lsls	r0, r3, #31
 8007244:	d510      	bpl.n	8007268 <_printf_float+0x250>
 8007246:	ee18 3a10 	vmov	r3, s16
 800724a:	4652      	mov	r2, sl
 800724c:	4631      	mov	r1, r6
 800724e:	4628      	mov	r0, r5
 8007250:	47b8      	blx	r7
 8007252:	3001      	adds	r0, #1
 8007254:	f43f af41 	beq.w	80070da <_printf_float+0xc2>
 8007258:	f04f 0800 	mov.w	r8, #0
 800725c:	f104 091a 	add.w	r9, r4, #26
 8007260:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007262:	3b01      	subs	r3, #1
 8007264:	4543      	cmp	r3, r8
 8007266:	dc09      	bgt.n	800727c <_printf_float+0x264>
 8007268:	6823      	ldr	r3, [r4, #0]
 800726a:	079b      	lsls	r3, r3, #30
 800726c:	f100 8105 	bmi.w	800747a <_printf_float+0x462>
 8007270:	68e0      	ldr	r0, [r4, #12]
 8007272:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007274:	4298      	cmp	r0, r3
 8007276:	bfb8      	it	lt
 8007278:	4618      	movlt	r0, r3
 800727a:	e730      	b.n	80070de <_printf_float+0xc6>
 800727c:	2301      	movs	r3, #1
 800727e:	464a      	mov	r2, r9
 8007280:	4631      	mov	r1, r6
 8007282:	4628      	mov	r0, r5
 8007284:	47b8      	blx	r7
 8007286:	3001      	adds	r0, #1
 8007288:	f43f af27 	beq.w	80070da <_printf_float+0xc2>
 800728c:	f108 0801 	add.w	r8, r8, #1
 8007290:	e7e6      	b.n	8007260 <_printf_float+0x248>
 8007292:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007294:	2b00      	cmp	r3, #0
 8007296:	dc39      	bgt.n	800730c <_printf_float+0x2f4>
 8007298:	4a1b      	ldr	r2, [pc, #108]	; (8007308 <_printf_float+0x2f0>)
 800729a:	2301      	movs	r3, #1
 800729c:	4631      	mov	r1, r6
 800729e:	4628      	mov	r0, r5
 80072a0:	47b8      	blx	r7
 80072a2:	3001      	adds	r0, #1
 80072a4:	f43f af19 	beq.w	80070da <_printf_float+0xc2>
 80072a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80072ac:	4313      	orrs	r3, r2
 80072ae:	d102      	bne.n	80072b6 <_printf_float+0x29e>
 80072b0:	6823      	ldr	r3, [r4, #0]
 80072b2:	07d9      	lsls	r1, r3, #31
 80072b4:	d5d8      	bpl.n	8007268 <_printf_float+0x250>
 80072b6:	ee18 3a10 	vmov	r3, s16
 80072ba:	4652      	mov	r2, sl
 80072bc:	4631      	mov	r1, r6
 80072be:	4628      	mov	r0, r5
 80072c0:	47b8      	blx	r7
 80072c2:	3001      	adds	r0, #1
 80072c4:	f43f af09 	beq.w	80070da <_printf_float+0xc2>
 80072c8:	f04f 0900 	mov.w	r9, #0
 80072cc:	f104 0a1a 	add.w	sl, r4, #26
 80072d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072d2:	425b      	negs	r3, r3
 80072d4:	454b      	cmp	r3, r9
 80072d6:	dc01      	bgt.n	80072dc <_printf_float+0x2c4>
 80072d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072da:	e792      	b.n	8007202 <_printf_float+0x1ea>
 80072dc:	2301      	movs	r3, #1
 80072de:	4652      	mov	r2, sl
 80072e0:	4631      	mov	r1, r6
 80072e2:	4628      	mov	r0, r5
 80072e4:	47b8      	blx	r7
 80072e6:	3001      	adds	r0, #1
 80072e8:	f43f aef7 	beq.w	80070da <_printf_float+0xc2>
 80072ec:	f109 0901 	add.w	r9, r9, #1
 80072f0:	e7ee      	b.n	80072d0 <_printf_float+0x2b8>
 80072f2:	bf00      	nop
 80072f4:	7fefffff 	.word	0x7fefffff
 80072f8:	0800b9bc 	.word	0x0800b9bc
 80072fc:	0800b9c0 	.word	0x0800b9c0
 8007300:	0800b9c8 	.word	0x0800b9c8
 8007304:	0800b9c4 	.word	0x0800b9c4
 8007308:	0800b9cc 	.word	0x0800b9cc
 800730c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800730e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007310:	429a      	cmp	r2, r3
 8007312:	bfa8      	it	ge
 8007314:	461a      	movge	r2, r3
 8007316:	2a00      	cmp	r2, #0
 8007318:	4691      	mov	r9, r2
 800731a:	dc37      	bgt.n	800738c <_printf_float+0x374>
 800731c:	f04f 0b00 	mov.w	fp, #0
 8007320:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007324:	f104 021a 	add.w	r2, r4, #26
 8007328:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800732a:	9305      	str	r3, [sp, #20]
 800732c:	eba3 0309 	sub.w	r3, r3, r9
 8007330:	455b      	cmp	r3, fp
 8007332:	dc33      	bgt.n	800739c <_printf_float+0x384>
 8007334:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007338:	429a      	cmp	r2, r3
 800733a:	db3b      	blt.n	80073b4 <_printf_float+0x39c>
 800733c:	6823      	ldr	r3, [r4, #0]
 800733e:	07da      	lsls	r2, r3, #31
 8007340:	d438      	bmi.n	80073b4 <_printf_float+0x39c>
 8007342:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007344:	9b05      	ldr	r3, [sp, #20]
 8007346:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007348:	1ad3      	subs	r3, r2, r3
 800734a:	eba2 0901 	sub.w	r9, r2, r1
 800734e:	4599      	cmp	r9, r3
 8007350:	bfa8      	it	ge
 8007352:	4699      	movge	r9, r3
 8007354:	f1b9 0f00 	cmp.w	r9, #0
 8007358:	dc35      	bgt.n	80073c6 <_printf_float+0x3ae>
 800735a:	f04f 0800 	mov.w	r8, #0
 800735e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007362:	f104 0a1a 	add.w	sl, r4, #26
 8007366:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800736a:	1a9b      	subs	r3, r3, r2
 800736c:	eba3 0309 	sub.w	r3, r3, r9
 8007370:	4543      	cmp	r3, r8
 8007372:	f77f af79 	ble.w	8007268 <_printf_float+0x250>
 8007376:	2301      	movs	r3, #1
 8007378:	4652      	mov	r2, sl
 800737a:	4631      	mov	r1, r6
 800737c:	4628      	mov	r0, r5
 800737e:	47b8      	blx	r7
 8007380:	3001      	adds	r0, #1
 8007382:	f43f aeaa 	beq.w	80070da <_printf_float+0xc2>
 8007386:	f108 0801 	add.w	r8, r8, #1
 800738a:	e7ec      	b.n	8007366 <_printf_float+0x34e>
 800738c:	4613      	mov	r3, r2
 800738e:	4631      	mov	r1, r6
 8007390:	4642      	mov	r2, r8
 8007392:	4628      	mov	r0, r5
 8007394:	47b8      	blx	r7
 8007396:	3001      	adds	r0, #1
 8007398:	d1c0      	bne.n	800731c <_printf_float+0x304>
 800739a:	e69e      	b.n	80070da <_printf_float+0xc2>
 800739c:	2301      	movs	r3, #1
 800739e:	4631      	mov	r1, r6
 80073a0:	4628      	mov	r0, r5
 80073a2:	9205      	str	r2, [sp, #20]
 80073a4:	47b8      	blx	r7
 80073a6:	3001      	adds	r0, #1
 80073a8:	f43f ae97 	beq.w	80070da <_printf_float+0xc2>
 80073ac:	9a05      	ldr	r2, [sp, #20]
 80073ae:	f10b 0b01 	add.w	fp, fp, #1
 80073b2:	e7b9      	b.n	8007328 <_printf_float+0x310>
 80073b4:	ee18 3a10 	vmov	r3, s16
 80073b8:	4652      	mov	r2, sl
 80073ba:	4631      	mov	r1, r6
 80073bc:	4628      	mov	r0, r5
 80073be:	47b8      	blx	r7
 80073c0:	3001      	adds	r0, #1
 80073c2:	d1be      	bne.n	8007342 <_printf_float+0x32a>
 80073c4:	e689      	b.n	80070da <_printf_float+0xc2>
 80073c6:	9a05      	ldr	r2, [sp, #20]
 80073c8:	464b      	mov	r3, r9
 80073ca:	4442      	add	r2, r8
 80073cc:	4631      	mov	r1, r6
 80073ce:	4628      	mov	r0, r5
 80073d0:	47b8      	blx	r7
 80073d2:	3001      	adds	r0, #1
 80073d4:	d1c1      	bne.n	800735a <_printf_float+0x342>
 80073d6:	e680      	b.n	80070da <_printf_float+0xc2>
 80073d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80073da:	2a01      	cmp	r2, #1
 80073dc:	dc01      	bgt.n	80073e2 <_printf_float+0x3ca>
 80073de:	07db      	lsls	r3, r3, #31
 80073e0:	d538      	bpl.n	8007454 <_printf_float+0x43c>
 80073e2:	2301      	movs	r3, #1
 80073e4:	4642      	mov	r2, r8
 80073e6:	4631      	mov	r1, r6
 80073e8:	4628      	mov	r0, r5
 80073ea:	47b8      	blx	r7
 80073ec:	3001      	adds	r0, #1
 80073ee:	f43f ae74 	beq.w	80070da <_printf_float+0xc2>
 80073f2:	ee18 3a10 	vmov	r3, s16
 80073f6:	4652      	mov	r2, sl
 80073f8:	4631      	mov	r1, r6
 80073fa:	4628      	mov	r0, r5
 80073fc:	47b8      	blx	r7
 80073fe:	3001      	adds	r0, #1
 8007400:	f43f ae6b 	beq.w	80070da <_printf_float+0xc2>
 8007404:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007408:	2200      	movs	r2, #0
 800740a:	2300      	movs	r3, #0
 800740c:	f7f9 fb5c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007410:	b9d8      	cbnz	r0, 800744a <_printf_float+0x432>
 8007412:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007414:	f108 0201 	add.w	r2, r8, #1
 8007418:	3b01      	subs	r3, #1
 800741a:	4631      	mov	r1, r6
 800741c:	4628      	mov	r0, r5
 800741e:	47b8      	blx	r7
 8007420:	3001      	adds	r0, #1
 8007422:	d10e      	bne.n	8007442 <_printf_float+0x42a>
 8007424:	e659      	b.n	80070da <_printf_float+0xc2>
 8007426:	2301      	movs	r3, #1
 8007428:	4652      	mov	r2, sl
 800742a:	4631      	mov	r1, r6
 800742c:	4628      	mov	r0, r5
 800742e:	47b8      	blx	r7
 8007430:	3001      	adds	r0, #1
 8007432:	f43f ae52 	beq.w	80070da <_printf_float+0xc2>
 8007436:	f108 0801 	add.w	r8, r8, #1
 800743a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800743c:	3b01      	subs	r3, #1
 800743e:	4543      	cmp	r3, r8
 8007440:	dcf1      	bgt.n	8007426 <_printf_float+0x40e>
 8007442:	464b      	mov	r3, r9
 8007444:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007448:	e6dc      	b.n	8007204 <_printf_float+0x1ec>
 800744a:	f04f 0800 	mov.w	r8, #0
 800744e:	f104 0a1a 	add.w	sl, r4, #26
 8007452:	e7f2      	b.n	800743a <_printf_float+0x422>
 8007454:	2301      	movs	r3, #1
 8007456:	4642      	mov	r2, r8
 8007458:	e7df      	b.n	800741a <_printf_float+0x402>
 800745a:	2301      	movs	r3, #1
 800745c:	464a      	mov	r2, r9
 800745e:	4631      	mov	r1, r6
 8007460:	4628      	mov	r0, r5
 8007462:	47b8      	blx	r7
 8007464:	3001      	adds	r0, #1
 8007466:	f43f ae38 	beq.w	80070da <_printf_float+0xc2>
 800746a:	f108 0801 	add.w	r8, r8, #1
 800746e:	68e3      	ldr	r3, [r4, #12]
 8007470:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007472:	1a5b      	subs	r3, r3, r1
 8007474:	4543      	cmp	r3, r8
 8007476:	dcf0      	bgt.n	800745a <_printf_float+0x442>
 8007478:	e6fa      	b.n	8007270 <_printf_float+0x258>
 800747a:	f04f 0800 	mov.w	r8, #0
 800747e:	f104 0919 	add.w	r9, r4, #25
 8007482:	e7f4      	b.n	800746e <_printf_float+0x456>

08007484 <_printf_common>:
 8007484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007488:	4616      	mov	r6, r2
 800748a:	4699      	mov	r9, r3
 800748c:	688a      	ldr	r2, [r1, #8]
 800748e:	690b      	ldr	r3, [r1, #16]
 8007490:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007494:	4293      	cmp	r3, r2
 8007496:	bfb8      	it	lt
 8007498:	4613      	movlt	r3, r2
 800749a:	6033      	str	r3, [r6, #0]
 800749c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80074a0:	4607      	mov	r7, r0
 80074a2:	460c      	mov	r4, r1
 80074a4:	b10a      	cbz	r2, 80074aa <_printf_common+0x26>
 80074a6:	3301      	adds	r3, #1
 80074a8:	6033      	str	r3, [r6, #0]
 80074aa:	6823      	ldr	r3, [r4, #0]
 80074ac:	0699      	lsls	r1, r3, #26
 80074ae:	bf42      	ittt	mi
 80074b0:	6833      	ldrmi	r3, [r6, #0]
 80074b2:	3302      	addmi	r3, #2
 80074b4:	6033      	strmi	r3, [r6, #0]
 80074b6:	6825      	ldr	r5, [r4, #0]
 80074b8:	f015 0506 	ands.w	r5, r5, #6
 80074bc:	d106      	bne.n	80074cc <_printf_common+0x48>
 80074be:	f104 0a19 	add.w	sl, r4, #25
 80074c2:	68e3      	ldr	r3, [r4, #12]
 80074c4:	6832      	ldr	r2, [r6, #0]
 80074c6:	1a9b      	subs	r3, r3, r2
 80074c8:	42ab      	cmp	r3, r5
 80074ca:	dc26      	bgt.n	800751a <_printf_common+0x96>
 80074cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80074d0:	1e13      	subs	r3, r2, #0
 80074d2:	6822      	ldr	r2, [r4, #0]
 80074d4:	bf18      	it	ne
 80074d6:	2301      	movne	r3, #1
 80074d8:	0692      	lsls	r2, r2, #26
 80074da:	d42b      	bmi.n	8007534 <_printf_common+0xb0>
 80074dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80074e0:	4649      	mov	r1, r9
 80074e2:	4638      	mov	r0, r7
 80074e4:	47c0      	blx	r8
 80074e6:	3001      	adds	r0, #1
 80074e8:	d01e      	beq.n	8007528 <_printf_common+0xa4>
 80074ea:	6823      	ldr	r3, [r4, #0]
 80074ec:	68e5      	ldr	r5, [r4, #12]
 80074ee:	6832      	ldr	r2, [r6, #0]
 80074f0:	f003 0306 	and.w	r3, r3, #6
 80074f4:	2b04      	cmp	r3, #4
 80074f6:	bf08      	it	eq
 80074f8:	1aad      	subeq	r5, r5, r2
 80074fa:	68a3      	ldr	r3, [r4, #8]
 80074fc:	6922      	ldr	r2, [r4, #16]
 80074fe:	bf0c      	ite	eq
 8007500:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007504:	2500      	movne	r5, #0
 8007506:	4293      	cmp	r3, r2
 8007508:	bfc4      	itt	gt
 800750a:	1a9b      	subgt	r3, r3, r2
 800750c:	18ed      	addgt	r5, r5, r3
 800750e:	2600      	movs	r6, #0
 8007510:	341a      	adds	r4, #26
 8007512:	42b5      	cmp	r5, r6
 8007514:	d11a      	bne.n	800754c <_printf_common+0xc8>
 8007516:	2000      	movs	r0, #0
 8007518:	e008      	b.n	800752c <_printf_common+0xa8>
 800751a:	2301      	movs	r3, #1
 800751c:	4652      	mov	r2, sl
 800751e:	4649      	mov	r1, r9
 8007520:	4638      	mov	r0, r7
 8007522:	47c0      	blx	r8
 8007524:	3001      	adds	r0, #1
 8007526:	d103      	bne.n	8007530 <_printf_common+0xac>
 8007528:	f04f 30ff 	mov.w	r0, #4294967295
 800752c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007530:	3501      	adds	r5, #1
 8007532:	e7c6      	b.n	80074c2 <_printf_common+0x3e>
 8007534:	18e1      	adds	r1, r4, r3
 8007536:	1c5a      	adds	r2, r3, #1
 8007538:	2030      	movs	r0, #48	; 0x30
 800753a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800753e:	4422      	add	r2, r4
 8007540:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007544:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007548:	3302      	adds	r3, #2
 800754a:	e7c7      	b.n	80074dc <_printf_common+0x58>
 800754c:	2301      	movs	r3, #1
 800754e:	4622      	mov	r2, r4
 8007550:	4649      	mov	r1, r9
 8007552:	4638      	mov	r0, r7
 8007554:	47c0      	blx	r8
 8007556:	3001      	adds	r0, #1
 8007558:	d0e6      	beq.n	8007528 <_printf_common+0xa4>
 800755a:	3601      	adds	r6, #1
 800755c:	e7d9      	b.n	8007512 <_printf_common+0x8e>
	...

08007560 <_printf_i>:
 8007560:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007564:	460c      	mov	r4, r1
 8007566:	4691      	mov	r9, r2
 8007568:	7e27      	ldrb	r7, [r4, #24]
 800756a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800756c:	2f78      	cmp	r7, #120	; 0x78
 800756e:	4680      	mov	r8, r0
 8007570:	469a      	mov	sl, r3
 8007572:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007576:	d807      	bhi.n	8007588 <_printf_i+0x28>
 8007578:	2f62      	cmp	r7, #98	; 0x62
 800757a:	d80a      	bhi.n	8007592 <_printf_i+0x32>
 800757c:	2f00      	cmp	r7, #0
 800757e:	f000 80d8 	beq.w	8007732 <_printf_i+0x1d2>
 8007582:	2f58      	cmp	r7, #88	; 0x58
 8007584:	f000 80a3 	beq.w	80076ce <_printf_i+0x16e>
 8007588:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800758c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007590:	e03a      	b.n	8007608 <_printf_i+0xa8>
 8007592:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007596:	2b15      	cmp	r3, #21
 8007598:	d8f6      	bhi.n	8007588 <_printf_i+0x28>
 800759a:	a001      	add	r0, pc, #4	; (adr r0, 80075a0 <_printf_i+0x40>)
 800759c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80075a0:	080075f9 	.word	0x080075f9
 80075a4:	0800760d 	.word	0x0800760d
 80075a8:	08007589 	.word	0x08007589
 80075ac:	08007589 	.word	0x08007589
 80075b0:	08007589 	.word	0x08007589
 80075b4:	08007589 	.word	0x08007589
 80075b8:	0800760d 	.word	0x0800760d
 80075bc:	08007589 	.word	0x08007589
 80075c0:	08007589 	.word	0x08007589
 80075c4:	08007589 	.word	0x08007589
 80075c8:	08007589 	.word	0x08007589
 80075cc:	08007719 	.word	0x08007719
 80075d0:	0800763d 	.word	0x0800763d
 80075d4:	080076fb 	.word	0x080076fb
 80075d8:	08007589 	.word	0x08007589
 80075dc:	08007589 	.word	0x08007589
 80075e0:	0800773b 	.word	0x0800773b
 80075e4:	08007589 	.word	0x08007589
 80075e8:	0800763d 	.word	0x0800763d
 80075ec:	08007589 	.word	0x08007589
 80075f0:	08007589 	.word	0x08007589
 80075f4:	08007703 	.word	0x08007703
 80075f8:	680b      	ldr	r3, [r1, #0]
 80075fa:	1d1a      	adds	r2, r3, #4
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	600a      	str	r2, [r1, #0]
 8007600:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007604:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007608:	2301      	movs	r3, #1
 800760a:	e0a3      	b.n	8007754 <_printf_i+0x1f4>
 800760c:	6825      	ldr	r5, [r4, #0]
 800760e:	6808      	ldr	r0, [r1, #0]
 8007610:	062e      	lsls	r6, r5, #24
 8007612:	f100 0304 	add.w	r3, r0, #4
 8007616:	d50a      	bpl.n	800762e <_printf_i+0xce>
 8007618:	6805      	ldr	r5, [r0, #0]
 800761a:	600b      	str	r3, [r1, #0]
 800761c:	2d00      	cmp	r5, #0
 800761e:	da03      	bge.n	8007628 <_printf_i+0xc8>
 8007620:	232d      	movs	r3, #45	; 0x2d
 8007622:	426d      	negs	r5, r5
 8007624:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007628:	485e      	ldr	r0, [pc, #376]	; (80077a4 <_printf_i+0x244>)
 800762a:	230a      	movs	r3, #10
 800762c:	e019      	b.n	8007662 <_printf_i+0x102>
 800762e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007632:	6805      	ldr	r5, [r0, #0]
 8007634:	600b      	str	r3, [r1, #0]
 8007636:	bf18      	it	ne
 8007638:	b22d      	sxthne	r5, r5
 800763a:	e7ef      	b.n	800761c <_printf_i+0xbc>
 800763c:	680b      	ldr	r3, [r1, #0]
 800763e:	6825      	ldr	r5, [r4, #0]
 8007640:	1d18      	adds	r0, r3, #4
 8007642:	6008      	str	r0, [r1, #0]
 8007644:	0628      	lsls	r0, r5, #24
 8007646:	d501      	bpl.n	800764c <_printf_i+0xec>
 8007648:	681d      	ldr	r5, [r3, #0]
 800764a:	e002      	b.n	8007652 <_printf_i+0xf2>
 800764c:	0669      	lsls	r1, r5, #25
 800764e:	d5fb      	bpl.n	8007648 <_printf_i+0xe8>
 8007650:	881d      	ldrh	r5, [r3, #0]
 8007652:	4854      	ldr	r0, [pc, #336]	; (80077a4 <_printf_i+0x244>)
 8007654:	2f6f      	cmp	r7, #111	; 0x6f
 8007656:	bf0c      	ite	eq
 8007658:	2308      	moveq	r3, #8
 800765a:	230a      	movne	r3, #10
 800765c:	2100      	movs	r1, #0
 800765e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007662:	6866      	ldr	r6, [r4, #4]
 8007664:	60a6      	str	r6, [r4, #8]
 8007666:	2e00      	cmp	r6, #0
 8007668:	bfa2      	ittt	ge
 800766a:	6821      	ldrge	r1, [r4, #0]
 800766c:	f021 0104 	bicge.w	r1, r1, #4
 8007670:	6021      	strge	r1, [r4, #0]
 8007672:	b90d      	cbnz	r5, 8007678 <_printf_i+0x118>
 8007674:	2e00      	cmp	r6, #0
 8007676:	d04d      	beq.n	8007714 <_printf_i+0x1b4>
 8007678:	4616      	mov	r6, r2
 800767a:	fbb5 f1f3 	udiv	r1, r5, r3
 800767e:	fb03 5711 	mls	r7, r3, r1, r5
 8007682:	5dc7      	ldrb	r7, [r0, r7]
 8007684:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007688:	462f      	mov	r7, r5
 800768a:	42bb      	cmp	r3, r7
 800768c:	460d      	mov	r5, r1
 800768e:	d9f4      	bls.n	800767a <_printf_i+0x11a>
 8007690:	2b08      	cmp	r3, #8
 8007692:	d10b      	bne.n	80076ac <_printf_i+0x14c>
 8007694:	6823      	ldr	r3, [r4, #0]
 8007696:	07df      	lsls	r7, r3, #31
 8007698:	d508      	bpl.n	80076ac <_printf_i+0x14c>
 800769a:	6923      	ldr	r3, [r4, #16]
 800769c:	6861      	ldr	r1, [r4, #4]
 800769e:	4299      	cmp	r1, r3
 80076a0:	bfde      	ittt	le
 80076a2:	2330      	movle	r3, #48	; 0x30
 80076a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80076a8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80076ac:	1b92      	subs	r2, r2, r6
 80076ae:	6122      	str	r2, [r4, #16]
 80076b0:	f8cd a000 	str.w	sl, [sp]
 80076b4:	464b      	mov	r3, r9
 80076b6:	aa03      	add	r2, sp, #12
 80076b8:	4621      	mov	r1, r4
 80076ba:	4640      	mov	r0, r8
 80076bc:	f7ff fee2 	bl	8007484 <_printf_common>
 80076c0:	3001      	adds	r0, #1
 80076c2:	d14c      	bne.n	800775e <_printf_i+0x1fe>
 80076c4:	f04f 30ff 	mov.w	r0, #4294967295
 80076c8:	b004      	add	sp, #16
 80076ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076ce:	4835      	ldr	r0, [pc, #212]	; (80077a4 <_printf_i+0x244>)
 80076d0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80076d4:	6823      	ldr	r3, [r4, #0]
 80076d6:	680e      	ldr	r6, [r1, #0]
 80076d8:	061f      	lsls	r7, r3, #24
 80076da:	f856 5b04 	ldr.w	r5, [r6], #4
 80076de:	600e      	str	r6, [r1, #0]
 80076e0:	d514      	bpl.n	800770c <_printf_i+0x1ac>
 80076e2:	07d9      	lsls	r1, r3, #31
 80076e4:	bf44      	itt	mi
 80076e6:	f043 0320 	orrmi.w	r3, r3, #32
 80076ea:	6023      	strmi	r3, [r4, #0]
 80076ec:	b91d      	cbnz	r5, 80076f6 <_printf_i+0x196>
 80076ee:	6823      	ldr	r3, [r4, #0]
 80076f0:	f023 0320 	bic.w	r3, r3, #32
 80076f4:	6023      	str	r3, [r4, #0]
 80076f6:	2310      	movs	r3, #16
 80076f8:	e7b0      	b.n	800765c <_printf_i+0xfc>
 80076fa:	6823      	ldr	r3, [r4, #0]
 80076fc:	f043 0320 	orr.w	r3, r3, #32
 8007700:	6023      	str	r3, [r4, #0]
 8007702:	2378      	movs	r3, #120	; 0x78
 8007704:	4828      	ldr	r0, [pc, #160]	; (80077a8 <_printf_i+0x248>)
 8007706:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800770a:	e7e3      	b.n	80076d4 <_printf_i+0x174>
 800770c:	065e      	lsls	r6, r3, #25
 800770e:	bf48      	it	mi
 8007710:	b2ad      	uxthmi	r5, r5
 8007712:	e7e6      	b.n	80076e2 <_printf_i+0x182>
 8007714:	4616      	mov	r6, r2
 8007716:	e7bb      	b.n	8007690 <_printf_i+0x130>
 8007718:	680b      	ldr	r3, [r1, #0]
 800771a:	6826      	ldr	r6, [r4, #0]
 800771c:	6960      	ldr	r0, [r4, #20]
 800771e:	1d1d      	adds	r5, r3, #4
 8007720:	600d      	str	r5, [r1, #0]
 8007722:	0635      	lsls	r5, r6, #24
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	d501      	bpl.n	800772c <_printf_i+0x1cc>
 8007728:	6018      	str	r0, [r3, #0]
 800772a:	e002      	b.n	8007732 <_printf_i+0x1d2>
 800772c:	0671      	lsls	r1, r6, #25
 800772e:	d5fb      	bpl.n	8007728 <_printf_i+0x1c8>
 8007730:	8018      	strh	r0, [r3, #0]
 8007732:	2300      	movs	r3, #0
 8007734:	6123      	str	r3, [r4, #16]
 8007736:	4616      	mov	r6, r2
 8007738:	e7ba      	b.n	80076b0 <_printf_i+0x150>
 800773a:	680b      	ldr	r3, [r1, #0]
 800773c:	1d1a      	adds	r2, r3, #4
 800773e:	600a      	str	r2, [r1, #0]
 8007740:	681e      	ldr	r6, [r3, #0]
 8007742:	6862      	ldr	r2, [r4, #4]
 8007744:	2100      	movs	r1, #0
 8007746:	4630      	mov	r0, r6
 8007748:	f7f8 fd4a 	bl	80001e0 <memchr>
 800774c:	b108      	cbz	r0, 8007752 <_printf_i+0x1f2>
 800774e:	1b80      	subs	r0, r0, r6
 8007750:	6060      	str	r0, [r4, #4]
 8007752:	6863      	ldr	r3, [r4, #4]
 8007754:	6123      	str	r3, [r4, #16]
 8007756:	2300      	movs	r3, #0
 8007758:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800775c:	e7a8      	b.n	80076b0 <_printf_i+0x150>
 800775e:	6923      	ldr	r3, [r4, #16]
 8007760:	4632      	mov	r2, r6
 8007762:	4649      	mov	r1, r9
 8007764:	4640      	mov	r0, r8
 8007766:	47d0      	blx	sl
 8007768:	3001      	adds	r0, #1
 800776a:	d0ab      	beq.n	80076c4 <_printf_i+0x164>
 800776c:	6823      	ldr	r3, [r4, #0]
 800776e:	079b      	lsls	r3, r3, #30
 8007770:	d413      	bmi.n	800779a <_printf_i+0x23a>
 8007772:	68e0      	ldr	r0, [r4, #12]
 8007774:	9b03      	ldr	r3, [sp, #12]
 8007776:	4298      	cmp	r0, r3
 8007778:	bfb8      	it	lt
 800777a:	4618      	movlt	r0, r3
 800777c:	e7a4      	b.n	80076c8 <_printf_i+0x168>
 800777e:	2301      	movs	r3, #1
 8007780:	4632      	mov	r2, r6
 8007782:	4649      	mov	r1, r9
 8007784:	4640      	mov	r0, r8
 8007786:	47d0      	blx	sl
 8007788:	3001      	adds	r0, #1
 800778a:	d09b      	beq.n	80076c4 <_printf_i+0x164>
 800778c:	3501      	adds	r5, #1
 800778e:	68e3      	ldr	r3, [r4, #12]
 8007790:	9903      	ldr	r1, [sp, #12]
 8007792:	1a5b      	subs	r3, r3, r1
 8007794:	42ab      	cmp	r3, r5
 8007796:	dcf2      	bgt.n	800777e <_printf_i+0x21e>
 8007798:	e7eb      	b.n	8007772 <_printf_i+0x212>
 800779a:	2500      	movs	r5, #0
 800779c:	f104 0619 	add.w	r6, r4, #25
 80077a0:	e7f5      	b.n	800778e <_printf_i+0x22e>
 80077a2:	bf00      	nop
 80077a4:	0800b9ce 	.word	0x0800b9ce
 80077a8:	0800b9df 	.word	0x0800b9df

080077ac <_scanf_float>:
 80077ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077b0:	b087      	sub	sp, #28
 80077b2:	4617      	mov	r7, r2
 80077b4:	9303      	str	r3, [sp, #12]
 80077b6:	688b      	ldr	r3, [r1, #8]
 80077b8:	1e5a      	subs	r2, r3, #1
 80077ba:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80077be:	bf83      	ittte	hi
 80077c0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80077c4:	195b      	addhi	r3, r3, r5
 80077c6:	9302      	strhi	r3, [sp, #8]
 80077c8:	2300      	movls	r3, #0
 80077ca:	bf86      	itte	hi
 80077cc:	f240 135d 	movwhi	r3, #349	; 0x15d
 80077d0:	608b      	strhi	r3, [r1, #8]
 80077d2:	9302      	strls	r3, [sp, #8]
 80077d4:	680b      	ldr	r3, [r1, #0]
 80077d6:	468b      	mov	fp, r1
 80077d8:	2500      	movs	r5, #0
 80077da:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80077de:	f84b 3b1c 	str.w	r3, [fp], #28
 80077e2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80077e6:	4680      	mov	r8, r0
 80077e8:	460c      	mov	r4, r1
 80077ea:	465e      	mov	r6, fp
 80077ec:	46aa      	mov	sl, r5
 80077ee:	46a9      	mov	r9, r5
 80077f0:	9501      	str	r5, [sp, #4]
 80077f2:	68a2      	ldr	r2, [r4, #8]
 80077f4:	b152      	cbz	r2, 800780c <_scanf_float+0x60>
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	781b      	ldrb	r3, [r3, #0]
 80077fa:	2b4e      	cmp	r3, #78	; 0x4e
 80077fc:	d864      	bhi.n	80078c8 <_scanf_float+0x11c>
 80077fe:	2b40      	cmp	r3, #64	; 0x40
 8007800:	d83c      	bhi.n	800787c <_scanf_float+0xd0>
 8007802:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007806:	b2c8      	uxtb	r0, r1
 8007808:	280e      	cmp	r0, #14
 800780a:	d93a      	bls.n	8007882 <_scanf_float+0xd6>
 800780c:	f1b9 0f00 	cmp.w	r9, #0
 8007810:	d003      	beq.n	800781a <_scanf_float+0x6e>
 8007812:	6823      	ldr	r3, [r4, #0]
 8007814:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007818:	6023      	str	r3, [r4, #0]
 800781a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800781e:	f1ba 0f01 	cmp.w	sl, #1
 8007822:	f200 8113 	bhi.w	8007a4c <_scanf_float+0x2a0>
 8007826:	455e      	cmp	r6, fp
 8007828:	f200 8105 	bhi.w	8007a36 <_scanf_float+0x28a>
 800782c:	2501      	movs	r5, #1
 800782e:	4628      	mov	r0, r5
 8007830:	b007      	add	sp, #28
 8007832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007836:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800783a:	2a0d      	cmp	r2, #13
 800783c:	d8e6      	bhi.n	800780c <_scanf_float+0x60>
 800783e:	a101      	add	r1, pc, #4	; (adr r1, 8007844 <_scanf_float+0x98>)
 8007840:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007844:	08007983 	.word	0x08007983
 8007848:	0800780d 	.word	0x0800780d
 800784c:	0800780d 	.word	0x0800780d
 8007850:	0800780d 	.word	0x0800780d
 8007854:	080079e3 	.word	0x080079e3
 8007858:	080079bb 	.word	0x080079bb
 800785c:	0800780d 	.word	0x0800780d
 8007860:	0800780d 	.word	0x0800780d
 8007864:	08007991 	.word	0x08007991
 8007868:	0800780d 	.word	0x0800780d
 800786c:	0800780d 	.word	0x0800780d
 8007870:	0800780d 	.word	0x0800780d
 8007874:	0800780d 	.word	0x0800780d
 8007878:	08007949 	.word	0x08007949
 800787c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007880:	e7db      	b.n	800783a <_scanf_float+0x8e>
 8007882:	290e      	cmp	r1, #14
 8007884:	d8c2      	bhi.n	800780c <_scanf_float+0x60>
 8007886:	a001      	add	r0, pc, #4	; (adr r0, 800788c <_scanf_float+0xe0>)
 8007888:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800788c:	0800793b 	.word	0x0800793b
 8007890:	0800780d 	.word	0x0800780d
 8007894:	0800793b 	.word	0x0800793b
 8007898:	080079cf 	.word	0x080079cf
 800789c:	0800780d 	.word	0x0800780d
 80078a0:	080078e9 	.word	0x080078e9
 80078a4:	08007925 	.word	0x08007925
 80078a8:	08007925 	.word	0x08007925
 80078ac:	08007925 	.word	0x08007925
 80078b0:	08007925 	.word	0x08007925
 80078b4:	08007925 	.word	0x08007925
 80078b8:	08007925 	.word	0x08007925
 80078bc:	08007925 	.word	0x08007925
 80078c0:	08007925 	.word	0x08007925
 80078c4:	08007925 	.word	0x08007925
 80078c8:	2b6e      	cmp	r3, #110	; 0x6e
 80078ca:	d809      	bhi.n	80078e0 <_scanf_float+0x134>
 80078cc:	2b60      	cmp	r3, #96	; 0x60
 80078ce:	d8b2      	bhi.n	8007836 <_scanf_float+0x8a>
 80078d0:	2b54      	cmp	r3, #84	; 0x54
 80078d2:	d077      	beq.n	80079c4 <_scanf_float+0x218>
 80078d4:	2b59      	cmp	r3, #89	; 0x59
 80078d6:	d199      	bne.n	800780c <_scanf_float+0x60>
 80078d8:	2d07      	cmp	r5, #7
 80078da:	d197      	bne.n	800780c <_scanf_float+0x60>
 80078dc:	2508      	movs	r5, #8
 80078de:	e029      	b.n	8007934 <_scanf_float+0x188>
 80078e0:	2b74      	cmp	r3, #116	; 0x74
 80078e2:	d06f      	beq.n	80079c4 <_scanf_float+0x218>
 80078e4:	2b79      	cmp	r3, #121	; 0x79
 80078e6:	e7f6      	b.n	80078d6 <_scanf_float+0x12a>
 80078e8:	6821      	ldr	r1, [r4, #0]
 80078ea:	05c8      	lsls	r0, r1, #23
 80078ec:	d51a      	bpl.n	8007924 <_scanf_float+0x178>
 80078ee:	9b02      	ldr	r3, [sp, #8]
 80078f0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80078f4:	6021      	str	r1, [r4, #0]
 80078f6:	f109 0901 	add.w	r9, r9, #1
 80078fa:	b11b      	cbz	r3, 8007904 <_scanf_float+0x158>
 80078fc:	3b01      	subs	r3, #1
 80078fe:	3201      	adds	r2, #1
 8007900:	9302      	str	r3, [sp, #8]
 8007902:	60a2      	str	r2, [r4, #8]
 8007904:	68a3      	ldr	r3, [r4, #8]
 8007906:	3b01      	subs	r3, #1
 8007908:	60a3      	str	r3, [r4, #8]
 800790a:	6923      	ldr	r3, [r4, #16]
 800790c:	3301      	adds	r3, #1
 800790e:	6123      	str	r3, [r4, #16]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	3b01      	subs	r3, #1
 8007914:	2b00      	cmp	r3, #0
 8007916:	607b      	str	r3, [r7, #4]
 8007918:	f340 8084 	ble.w	8007a24 <_scanf_float+0x278>
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	3301      	adds	r3, #1
 8007920:	603b      	str	r3, [r7, #0]
 8007922:	e766      	b.n	80077f2 <_scanf_float+0x46>
 8007924:	eb1a 0f05 	cmn.w	sl, r5
 8007928:	f47f af70 	bne.w	800780c <_scanf_float+0x60>
 800792c:	6822      	ldr	r2, [r4, #0]
 800792e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007932:	6022      	str	r2, [r4, #0]
 8007934:	f806 3b01 	strb.w	r3, [r6], #1
 8007938:	e7e4      	b.n	8007904 <_scanf_float+0x158>
 800793a:	6822      	ldr	r2, [r4, #0]
 800793c:	0610      	lsls	r0, r2, #24
 800793e:	f57f af65 	bpl.w	800780c <_scanf_float+0x60>
 8007942:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007946:	e7f4      	b.n	8007932 <_scanf_float+0x186>
 8007948:	f1ba 0f00 	cmp.w	sl, #0
 800794c:	d10e      	bne.n	800796c <_scanf_float+0x1c0>
 800794e:	f1b9 0f00 	cmp.w	r9, #0
 8007952:	d10e      	bne.n	8007972 <_scanf_float+0x1c6>
 8007954:	6822      	ldr	r2, [r4, #0]
 8007956:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800795a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800795e:	d108      	bne.n	8007972 <_scanf_float+0x1c6>
 8007960:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007964:	6022      	str	r2, [r4, #0]
 8007966:	f04f 0a01 	mov.w	sl, #1
 800796a:	e7e3      	b.n	8007934 <_scanf_float+0x188>
 800796c:	f1ba 0f02 	cmp.w	sl, #2
 8007970:	d055      	beq.n	8007a1e <_scanf_float+0x272>
 8007972:	2d01      	cmp	r5, #1
 8007974:	d002      	beq.n	800797c <_scanf_float+0x1d0>
 8007976:	2d04      	cmp	r5, #4
 8007978:	f47f af48 	bne.w	800780c <_scanf_float+0x60>
 800797c:	3501      	adds	r5, #1
 800797e:	b2ed      	uxtb	r5, r5
 8007980:	e7d8      	b.n	8007934 <_scanf_float+0x188>
 8007982:	f1ba 0f01 	cmp.w	sl, #1
 8007986:	f47f af41 	bne.w	800780c <_scanf_float+0x60>
 800798a:	f04f 0a02 	mov.w	sl, #2
 800798e:	e7d1      	b.n	8007934 <_scanf_float+0x188>
 8007990:	b97d      	cbnz	r5, 80079b2 <_scanf_float+0x206>
 8007992:	f1b9 0f00 	cmp.w	r9, #0
 8007996:	f47f af3c 	bne.w	8007812 <_scanf_float+0x66>
 800799a:	6822      	ldr	r2, [r4, #0]
 800799c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80079a0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80079a4:	f47f af39 	bne.w	800781a <_scanf_float+0x6e>
 80079a8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80079ac:	6022      	str	r2, [r4, #0]
 80079ae:	2501      	movs	r5, #1
 80079b0:	e7c0      	b.n	8007934 <_scanf_float+0x188>
 80079b2:	2d03      	cmp	r5, #3
 80079b4:	d0e2      	beq.n	800797c <_scanf_float+0x1d0>
 80079b6:	2d05      	cmp	r5, #5
 80079b8:	e7de      	b.n	8007978 <_scanf_float+0x1cc>
 80079ba:	2d02      	cmp	r5, #2
 80079bc:	f47f af26 	bne.w	800780c <_scanf_float+0x60>
 80079c0:	2503      	movs	r5, #3
 80079c2:	e7b7      	b.n	8007934 <_scanf_float+0x188>
 80079c4:	2d06      	cmp	r5, #6
 80079c6:	f47f af21 	bne.w	800780c <_scanf_float+0x60>
 80079ca:	2507      	movs	r5, #7
 80079cc:	e7b2      	b.n	8007934 <_scanf_float+0x188>
 80079ce:	6822      	ldr	r2, [r4, #0]
 80079d0:	0591      	lsls	r1, r2, #22
 80079d2:	f57f af1b 	bpl.w	800780c <_scanf_float+0x60>
 80079d6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80079da:	6022      	str	r2, [r4, #0]
 80079dc:	f8cd 9004 	str.w	r9, [sp, #4]
 80079e0:	e7a8      	b.n	8007934 <_scanf_float+0x188>
 80079e2:	6822      	ldr	r2, [r4, #0]
 80079e4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80079e8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80079ec:	d006      	beq.n	80079fc <_scanf_float+0x250>
 80079ee:	0550      	lsls	r0, r2, #21
 80079f0:	f57f af0c 	bpl.w	800780c <_scanf_float+0x60>
 80079f4:	f1b9 0f00 	cmp.w	r9, #0
 80079f8:	f43f af0f 	beq.w	800781a <_scanf_float+0x6e>
 80079fc:	0591      	lsls	r1, r2, #22
 80079fe:	bf58      	it	pl
 8007a00:	9901      	ldrpl	r1, [sp, #4]
 8007a02:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007a06:	bf58      	it	pl
 8007a08:	eba9 0101 	subpl.w	r1, r9, r1
 8007a0c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007a10:	bf58      	it	pl
 8007a12:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007a16:	6022      	str	r2, [r4, #0]
 8007a18:	f04f 0900 	mov.w	r9, #0
 8007a1c:	e78a      	b.n	8007934 <_scanf_float+0x188>
 8007a1e:	f04f 0a03 	mov.w	sl, #3
 8007a22:	e787      	b.n	8007934 <_scanf_float+0x188>
 8007a24:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007a28:	4639      	mov	r1, r7
 8007a2a:	4640      	mov	r0, r8
 8007a2c:	4798      	blx	r3
 8007a2e:	2800      	cmp	r0, #0
 8007a30:	f43f aedf 	beq.w	80077f2 <_scanf_float+0x46>
 8007a34:	e6ea      	b.n	800780c <_scanf_float+0x60>
 8007a36:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007a3a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007a3e:	463a      	mov	r2, r7
 8007a40:	4640      	mov	r0, r8
 8007a42:	4798      	blx	r3
 8007a44:	6923      	ldr	r3, [r4, #16]
 8007a46:	3b01      	subs	r3, #1
 8007a48:	6123      	str	r3, [r4, #16]
 8007a4a:	e6ec      	b.n	8007826 <_scanf_float+0x7a>
 8007a4c:	1e6b      	subs	r3, r5, #1
 8007a4e:	2b06      	cmp	r3, #6
 8007a50:	d825      	bhi.n	8007a9e <_scanf_float+0x2f2>
 8007a52:	2d02      	cmp	r5, #2
 8007a54:	d836      	bhi.n	8007ac4 <_scanf_float+0x318>
 8007a56:	455e      	cmp	r6, fp
 8007a58:	f67f aee8 	bls.w	800782c <_scanf_float+0x80>
 8007a5c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007a60:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007a64:	463a      	mov	r2, r7
 8007a66:	4640      	mov	r0, r8
 8007a68:	4798      	blx	r3
 8007a6a:	6923      	ldr	r3, [r4, #16]
 8007a6c:	3b01      	subs	r3, #1
 8007a6e:	6123      	str	r3, [r4, #16]
 8007a70:	e7f1      	b.n	8007a56 <_scanf_float+0x2aa>
 8007a72:	9802      	ldr	r0, [sp, #8]
 8007a74:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007a78:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007a7c:	9002      	str	r0, [sp, #8]
 8007a7e:	463a      	mov	r2, r7
 8007a80:	4640      	mov	r0, r8
 8007a82:	4798      	blx	r3
 8007a84:	6923      	ldr	r3, [r4, #16]
 8007a86:	3b01      	subs	r3, #1
 8007a88:	6123      	str	r3, [r4, #16]
 8007a8a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007a8e:	fa5f fa8a 	uxtb.w	sl, sl
 8007a92:	f1ba 0f02 	cmp.w	sl, #2
 8007a96:	d1ec      	bne.n	8007a72 <_scanf_float+0x2c6>
 8007a98:	3d03      	subs	r5, #3
 8007a9a:	b2ed      	uxtb	r5, r5
 8007a9c:	1b76      	subs	r6, r6, r5
 8007a9e:	6823      	ldr	r3, [r4, #0]
 8007aa0:	05da      	lsls	r2, r3, #23
 8007aa2:	d52f      	bpl.n	8007b04 <_scanf_float+0x358>
 8007aa4:	055b      	lsls	r3, r3, #21
 8007aa6:	d510      	bpl.n	8007aca <_scanf_float+0x31e>
 8007aa8:	455e      	cmp	r6, fp
 8007aaa:	f67f aebf 	bls.w	800782c <_scanf_float+0x80>
 8007aae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007ab2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007ab6:	463a      	mov	r2, r7
 8007ab8:	4640      	mov	r0, r8
 8007aba:	4798      	blx	r3
 8007abc:	6923      	ldr	r3, [r4, #16]
 8007abe:	3b01      	subs	r3, #1
 8007ac0:	6123      	str	r3, [r4, #16]
 8007ac2:	e7f1      	b.n	8007aa8 <_scanf_float+0x2fc>
 8007ac4:	46aa      	mov	sl, r5
 8007ac6:	9602      	str	r6, [sp, #8]
 8007ac8:	e7df      	b.n	8007a8a <_scanf_float+0x2de>
 8007aca:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007ace:	6923      	ldr	r3, [r4, #16]
 8007ad0:	2965      	cmp	r1, #101	; 0x65
 8007ad2:	f103 33ff 	add.w	r3, r3, #4294967295
 8007ad6:	f106 35ff 	add.w	r5, r6, #4294967295
 8007ada:	6123      	str	r3, [r4, #16]
 8007adc:	d00c      	beq.n	8007af8 <_scanf_float+0x34c>
 8007ade:	2945      	cmp	r1, #69	; 0x45
 8007ae0:	d00a      	beq.n	8007af8 <_scanf_float+0x34c>
 8007ae2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007ae6:	463a      	mov	r2, r7
 8007ae8:	4640      	mov	r0, r8
 8007aea:	4798      	blx	r3
 8007aec:	6923      	ldr	r3, [r4, #16]
 8007aee:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007af2:	3b01      	subs	r3, #1
 8007af4:	1eb5      	subs	r5, r6, #2
 8007af6:	6123      	str	r3, [r4, #16]
 8007af8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007afc:	463a      	mov	r2, r7
 8007afe:	4640      	mov	r0, r8
 8007b00:	4798      	blx	r3
 8007b02:	462e      	mov	r6, r5
 8007b04:	6825      	ldr	r5, [r4, #0]
 8007b06:	f015 0510 	ands.w	r5, r5, #16
 8007b0a:	d158      	bne.n	8007bbe <_scanf_float+0x412>
 8007b0c:	7035      	strb	r5, [r6, #0]
 8007b0e:	6823      	ldr	r3, [r4, #0]
 8007b10:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007b14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b18:	d11c      	bne.n	8007b54 <_scanf_float+0x3a8>
 8007b1a:	9b01      	ldr	r3, [sp, #4]
 8007b1c:	454b      	cmp	r3, r9
 8007b1e:	eba3 0209 	sub.w	r2, r3, r9
 8007b22:	d124      	bne.n	8007b6e <_scanf_float+0x3c2>
 8007b24:	2200      	movs	r2, #0
 8007b26:	4659      	mov	r1, fp
 8007b28:	4640      	mov	r0, r8
 8007b2a:	f000 ff7b 	bl	8008a24 <_strtod_r>
 8007b2e:	9b03      	ldr	r3, [sp, #12]
 8007b30:	6821      	ldr	r1, [r4, #0]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f011 0f02 	tst.w	r1, #2
 8007b38:	ec57 6b10 	vmov	r6, r7, d0
 8007b3c:	f103 0204 	add.w	r2, r3, #4
 8007b40:	d020      	beq.n	8007b84 <_scanf_float+0x3d8>
 8007b42:	9903      	ldr	r1, [sp, #12]
 8007b44:	600a      	str	r2, [r1, #0]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	e9c3 6700 	strd	r6, r7, [r3]
 8007b4c:	68e3      	ldr	r3, [r4, #12]
 8007b4e:	3301      	adds	r3, #1
 8007b50:	60e3      	str	r3, [r4, #12]
 8007b52:	e66c      	b.n	800782e <_scanf_float+0x82>
 8007b54:	9b04      	ldr	r3, [sp, #16]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d0e4      	beq.n	8007b24 <_scanf_float+0x378>
 8007b5a:	9905      	ldr	r1, [sp, #20]
 8007b5c:	230a      	movs	r3, #10
 8007b5e:	462a      	mov	r2, r5
 8007b60:	3101      	adds	r1, #1
 8007b62:	4640      	mov	r0, r8
 8007b64:	f000 ffe8 	bl	8008b38 <_strtol_r>
 8007b68:	9b04      	ldr	r3, [sp, #16]
 8007b6a:	9e05      	ldr	r6, [sp, #20]
 8007b6c:	1ac2      	subs	r2, r0, r3
 8007b6e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007b72:	429e      	cmp	r6, r3
 8007b74:	bf28      	it	cs
 8007b76:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007b7a:	4912      	ldr	r1, [pc, #72]	; (8007bc4 <_scanf_float+0x418>)
 8007b7c:	4630      	mov	r0, r6
 8007b7e:	f000 f909 	bl	8007d94 <siprintf>
 8007b82:	e7cf      	b.n	8007b24 <_scanf_float+0x378>
 8007b84:	f011 0f04 	tst.w	r1, #4
 8007b88:	9903      	ldr	r1, [sp, #12]
 8007b8a:	600a      	str	r2, [r1, #0]
 8007b8c:	d1db      	bne.n	8007b46 <_scanf_float+0x39a>
 8007b8e:	f8d3 8000 	ldr.w	r8, [r3]
 8007b92:	ee10 2a10 	vmov	r2, s0
 8007b96:	ee10 0a10 	vmov	r0, s0
 8007b9a:	463b      	mov	r3, r7
 8007b9c:	4639      	mov	r1, r7
 8007b9e:	f7f8 ffc5 	bl	8000b2c <__aeabi_dcmpun>
 8007ba2:	b128      	cbz	r0, 8007bb0 <_scanf_float+0x404>
 8007ba4:	4808      	ldr	r0, [pc, #32]	; (8007bc8 <_scanf_float+0x41c>)
 8007ba6:	f000 f8ef 	bl	8007d88 <nanf>
 8007baa:	ed88 0a00 	vstr	s0, [r8]
 8007bae:	e7cd      	b.n	8007b4c <_scanf_float+0x3a0>
 8007bb0:	4630      	mov	r0, r6
 8007bb2:	4639      	mov	r1, r7
 8007bb4:	f7f9 f818 	bl	8000be8 <__aeabi_d2f>
 8007bb8:	f8c8 0000 	str.w	r0, [r8]
 8007bbc:	e7c6      	b.n	8007b4c <_scanf_float+0x3a0>
 8007bbe:	2500      	movs	r5, #0
 8007bc0:	e635      	b.n	800782e <_scanf_float+0x82>
 8007bc2:	bf00      	nop
 8007bc4:	0800b9f0 	.word	0x0800b9f0
 8007bc8:	0800be68 	.word	0x0800be68

08007bcc <iprintf>:
 8007bcc:	b40f      	push	{r0, r1, r2, r3}
 8007bce:	4b0a      	ldr	r3, [pc, #40]	; (8007bf8 <iprintf+0x2c>)
 8007bd0:	b513      	push	{r0, r1, r4, lr}
 8007bd2:	681c      	ldr	r4, [r3, #0]
 8007bd4:	b124      	cbz	r4, 8007be0 <iprintf+0x14>
 8007bd6:	69a3      	ldr	r3, [r4, #24]
 8007bd8:	b913      	cbnz	r3, 8007be0 <iprintf+0x14>
 8007bda:	4620      	mov	r0, r4
 8007bdc:	f001 ff42 	bl	8009a64 <__sinit>
 8007be0:	ab05      	add	r3, sp, #20
 8007be2:	9a04      	ldr	r2, [sp, #16]
 8007be4:	68a1      	ldr	r1, [r4, #8]
 8007be6:	9301      	str	r3, [sp, #4]
 8007be8:	4620      	mov	r0, r4
 8007bea:	f003 fac7 	bl	800b17c <_vfiprintf_r>
 8007bee:	b002      	add	sp, #8
 8007bf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bf4:	b004      	add	sp, #16
 8007bf6:	4770      	bx	lr
 8007bf8:	20000010 	.word	0x20000010

08007bfc <setvbuf>:
 8007bfc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007c00:	461d      	mov	r5, r3
 8007c02:	4b5d      	ldr	r3, [pc, #372]	; (8007d78 <setvbuf+0x17c>)
 8007c04:	681f      	ldr	r7, [r3, #0]
 8007c06:	4604      	mov	r4, r0
 8007c08:	460e      	mov	r6, r1
 8007c0a:	4690      	mov	r8, r2
 8007c0c:	b127      	cbz	r7, 8007c18 <setvbuf+0x1c>
 8007c0e:	69bb      	ldr	r3, [r7, #24]
 8007c10:	b913      	cbnz	r3, 8007c18 <setvbuf+0x1c>
 8007c12:	4638      	mov	r0, r7
 8007c14:	f001 ff26 	bl	8009a64 <__sinit>
 8007c18:	4b58      	ldr	r3, [pc, #352]	; (8007d7c <setvbuf+0x180>)
 8007c1a:	429c      	cmp	r4, r3
 8007c1c:	d167      	bne.n	8007cee <setvbuf+0xf2>
 8007c1e:	687c      	ldr	r4, [r7, #4]
 8007c20:	f1b8 0f02 	cmp.w	r8, #2
 8007c24:	d006      	beq.n	8007c34 <setvbuf+0x38>
 8007c26:	f1b8 0f01 	cmp.w	r8, #1
 8007c2a:	f200 809f 	bhi.w	8007d6c <setvbuf+0x170>
 8007c2e:	2d00      	cmp	r5, #0
 8007c30:	f2c0 809c 	blt.w	8007d6c <setvbuf+0x170>
 8007c34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c36:	07db      	lsls	r3, r3, #31
 8007c38:	d405      	bmi.n	8007c46 <setvbuf+0x4a>
 8007c3a:	89a3      	ldrh	r3, [r4, #12]
 8007c3c:	0598      	lsls	r0, r3, #22
 8007c3e:	d402      	bmi.n	8007c46 <setvbuf+0x4a>
 8007c40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c42:	f002 fb20 	bl	800a286 <__retarget_lock_acquire_recursive>
 8007c46:	4621      	mov	r1, r4
 8007c48:	4638      	mov	r0, r7
 8007c4a:	f001 fe77 	bl	800993c <_fflush_r>
 8007c4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c50:	b141      	cbz	r1, 8007c64 <setvbuf+0x68>
 8007c52:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c56:	4299      	cmp	r1, r3
 8007c58:	d002      	beq.n	8007c60 <setvbuf+0x64>
 8007c5a:	4638      	mov	r0, r7
 8007c5c:	f003 f85e 	bl	800ad1c <_free_r>
 8007c60:	2300      	movs	r3, #0
 8007c62:	6363      	str	r3, [r4, #52]	; 0x34
 8007c64:	2300      	movs	r3, #0
 8007c66:	61a3      	str	r3, [r4, #24]
 8007c68:	6063      	str	r3, [r4, #4]
 8007c6a:	89a3      	ldrh	r3, [r4, #12]
 8007c6c:	0619      	lsls	r1, r3, #24
 8007c6e:	d503      	bpl.n	8007c78 <setvbuf+0x7c>
 8007c70:	6921      	ldr	r1, [r4, #16]
 8007c72:	4638      	mov	r0, r7
 8007c74:	f003 f852 	bl	800ad1c <_free_r>
 8007c78:	89a3      	ldrh	r3, [r4, #12]
 8007c7a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8007c7e:	f023 0303 	bic.w	r3, r3, #3
 8007c82:	f1b8 0f02 	cmp.w	r8, #2
 8007c86:	81a3      	strh	r3, [r4, #12]
 8007c88:	d06c      	beq.n	8007d64 <setvbuf+0x168>
 8007c8a:	ab01      	add	r3, sp, #4
 8007c8c:	466a      	mov	r2, sp
 8007c8e:	4621      	mov	r1, r4
 8007c90:	4638      	mov	r0, r7
 8007c92:	f002 fafa 	bl	800a28a <__swhatbuf_r>
 8007c96:	89a3      	ldrh	r3, [r4, #12]
 8007c98:	4318      	orrs	r0, r3
 8007c9a:	81a0      	strh	r0, [r4, #12]
 8007c9c:	2d00      	cmp	r5, #0
 8007c9e:	d130      	bne.n	8007d02 <setvbuf+0x106>
 8007ca0:	9d00      	ldr	r5, [sp, #0]
 8007ca2:	4628      	mov	r0, r5
 8007ca4:	f002 fb56 	bl	800a354 <malloc>
 8007ca8:	4606      	mov	r6, r0
 8007caa:	2800      	cmp	r0, #0
 8007cac:	d155      	bne.n	8007d5a <setvbuf+0x15e>
 8007cae:	f8dd 9000 	ldr.w	r9, [sp]
 8007cb2:	45a9      	cmp	r9, r5
 8007cb4:	d14a      	bne.n	8007d4c <setvbuf+0x150>
 8007cb6:	f04f 35ff 	mov.w	r5, #4294967295
 8007cba:	2200      	movs	r2, #0
 8007cbc:	60a2      	str	r2, [r4, #8]
 8007cbe:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8007cc2:	6022      	str	r2, [r4, #0]
 8007cc4:	6122      	str	r2, [r4, #16]
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ccc:	6162      	str	r2, [r4, #20]
 8007cce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007cd0:	f043 0302 	orr.w	r3, r3, #2
 8007cd4:	07d2      	lsls	r2, r2, #31
 8007cd6:	81a3      	strh	r3, [r4, #12]
 8007cd8:	d405      	bmi.n	8007ce6 <setvbuf+0xea>
 8007cda:	f413 7f00 	tst.w	r3, #512	; 0x200
 8007cde:	d102      	bne.n	8007ce6 <setvbuf+0xea>
 8007ce0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ce2:	f002 fad1 	bl	800a288 <__retarget_lock_release_recursive>
 8007ce6:	4628      	mov	r0, r5
 8007ce8:	b003      	add	sp, #12
 8007cea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007cee:	4b24      	ldr	r3, [pc, #144]	; (8007d80 <setvbuf+0x184>)
 8007cf0:	429c      	cmp	r4, r3
 8007cf2:	d101      	bne.n	8007cf8 <setvbuf+0xfc>
 8007cf4:	68bc      	ldr	r4, [r7, #8]
 8007cf6:	e793      	b.n	8007c20 <setvbuf+0x24>
 8007cf8:	4b22      	ldr	r3, [pc, #136]	; (8007d84 <setvbuf+0x188>)
 8007cfa:	429c      	cmp	r4, r3
 8007cfc:	bf08      	it	eq
 8007cfe:	68fc      	ldreq	r4, [r7, #12]
 8007d00:	e78e      	b.n	8007c20 <setvbuf+0x24>
 8007d02:	2e00      	cmp	r6, #0
 8007d04:	d0cd      	beq.n	8007ca2 <setvbuf+0xa6>
 8007d06:	69bb      	ldr	r3, [r7, #24]
 8007d08:	b913      	cbnz	r3, 8007d10 <setvbuf+0x114>
 8007d0a:	4638      	mov	r0, r7
 8007d0c:	f001 feaa 	bl	8009a64 <__sinit>
 8007d10:	f1b8 0f01 	cmp.w	r8, #1
 8007d14:	bf08      	it	eq
 8007d16:	89a3      	ldrheq	r3, [r4, #12]
 8007d18:	6026      	str	r6, [r4, #0]
 8007d1a:	bf04      	itt	eq
 8007d1c:	f043 0301 	orreq.w	r3, r3, #1
 8007d20:	81a3      	strheq	r3, [r4, #12]
 8007d22:	89a2      	ldrh	r2, [r4, #12]
 8007d24:	f012 0308 	ands.w	r3, r2, #8
 8007d28:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8007d2c:	d01c      	beq.n	8007d68 <setvbuf+0x16c>
 8007d2e:	07d3      	lsls	r3, r2, #31
 8007d30:	bf41      	itttt	mi
 8007d32:	2300      	movmi	r3, #0
 8007d34:	426d      	negmi	r5, r5
 8007d36:	60a3      	strmi	r3, [r4, #8]
 8007d38:	61a5      	strmi	r5, [r4, #24]
 8007d3a:	bf58      	it	pl
 8007d3c:	60a5      	strpl	r5, [r4, #8]
 8007d3e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8007d40:	f015 0501 	ands.w	r5, r5, #1
 8007d44:	d115      	bne.n	8007d72 <setvbuf+0x176>
 8007d46:	f412 7f00 	tst.w	r2, #512	; 0x200
 8007d4a:	e7c8      	b.n	8007cde <setvbuf+0xe2>
 8007d4c:	4648      	mov	r0, r9
 8007d4e:	f002 fb01 	bl	800a354 <malloc>
 8007d52:	4606      	mov	r6, r0
 8007d54:	2800      	cmp	r0, #0
 8007d56:	d0ae      	beq.n	8007cb6 <setvbuf+0xba>
 8007d58:	464d      	mov	r5, r9
 8007d5a:	89a3      	ldrh	r3, [r4, #12]
 8007d5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d60:	81a3      	strh	r3, [r4, #12]
 8007d62:	e7d0      	b.n	8007d06 <setvbuf+0x10a>
 8007d64:	2500      	movs	r5, #0
 8007d66:	e7a8      	b.n	8007cba <setvbuf+0xbe>
 8007d68:	60a3      	str	r3, [r4, #8]
 8007d6a:	e7e8      	b.n	8007d3e <setvbuf+0x142>
 8007d6c:	f04f 35ff 	mov.w	r5, #4294967295
 8007d70:	e7b9      	b.n	8007ce6 <setvbuf+0xea>
 8007d72:	2500      	movs	r5, #0
 8007d74:	e7b7      	b.n	8007ce6 <setvbuf+0xea>
 8007d76:	bf00      	nop
 8007d78:	20000010 	.word	0x20000010
 8007d7c:	0800bc00 	.word	0x0800bc00
 8007d80:	0800bc20 	.word	0x0800bc20
 8007d84:	0800bbe0 	.word	0x0800bbe0

08007d88 <nanf>:
 8007d88:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007d90 <nanf+0x8>
 8007d8c:	4770      	bx	lr
 8007d8e:	bf00      	nop
 8007d90:	7fc00000 	.word	0x7fc00000

08007d94 <siprintf>:
 8007d94:	b40e      	push	{r1, r2, r3}
 8007d96:	b500      	push	{lr}
 8007d98:	b09c      	sub	sp, #112	; 0x70
 8007d9a:	ab1d      	add	r3, sp, #116	; 0x74
 8007d9c:	9002      	str	r0, [sp, #8]
 8007d9e:	9006      	str	r0, [sp, #24]
 8007da0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007da4:	4809      	ldr	r0, [pc, #36]	; (8007dcc <siprintf+0x38>)
 8007da6:	9107      	str	r1, [sp, #28]
 8007da8:	9104      	str	r1, [sp, #16]
 8007daa:	4909      	ldr	r1, [pc, #36]	; (8007dd0 <siprintf+0x3c>)
 8007dac:	f853 2b04 	ldr.w	r2, [r3], #4
 8007db0:	9105      	str	r1, [sp, #20]
 8007db2:	6800      	ldr	r0, [r0, #0]
 8007db4:	9301      	str	r3, [sp, #4]
 8007db6:	a902      	add	r1, sp, #8
 8007db8:	f003 f8b6 	bl	800af28 <_svfiprintf_r>
 8007dbc:	9b02      	ldr	r3, [sp, #8]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	701a      	strb	r2, [r3, #0]
 8007dc2:	b01c      	add	sp, #112	; 0x70
 8007dc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007dc8:	b003      	add	sp, #12
 8007dca:	4770      	bx	lr
 8007dcc:	20000010 	.word	0x20000010
 8007dd0:	ffff0208 	.word	0xffff0208

08007dd4 <sulp>:
 8007dd4:	b570      	push	{r4, r5, r6, lr}
 8007dd6:	4604      	mov	r4, r0
 8007dd8:	460d      	mov	r5, r1
 8007dda:	ec45 4b10 	vmov	d0, r4, r5
 8007dde:	4616      	mov	r6, r2
 8007de0:	f002 fe3e 	bl	800aa60 <__ulp>
 8007de4:	ec51 0b10 	vmov	r0, r1, d0
 8007de8:	b17e      	cbz	r6, 8007e0a <sulp+0x36>
 8007dea:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007dee:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	dd09      	ble.n	8007e0a <sulp+0x36>
 8007df6:	051b      	lsls	r3, r3, #20
 8007df8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007dfc:	2400      	movs	r4, #0
 8007dfe:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007e02:	4622      	mov	r2, r4
 8007e04:	462b      	mov	r3, r5
 8007e06:	f7f8 fbf7 	bl	80005f8 <__aeabi_dmul>
 8007e0a:	bd70      	pop	{r4, r5, r6, pc}
 8007e0c:	0000      	movs	r0, r0
	...

08007e10 <_strtod_l>:
 8007e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e14:	b0a3      	sub	sp, #140	; 0x8c
 8007e16:	461f      	mov	r7, r3
 8007e18:	2300      	movs	r3, #0
 8007e1a:	931e      	str	r3, [sp, #120]	; 0x78
 8007e1c:	4ba4      	ldr	r3, [pc, #656]	; (80080b0 <_strtod_l+0x2a0>)
 8007e1e:	9219      	str	r2, [sp, #100]	; 0x64
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	9307      	str	r3, [sp, #28]
 8007e24:	4604      	mov	r4, r0
 8007e26:	4618      	mov	r0, r3
 8007e28:	4688      	mov	r8, r1
 8007e2a:	f7f8 f9d1 	bl	80001d0 <strlen>
 8007e2e:	f04f 0a00 	mov.w	sl, #0
 8007e32:	4605      	mov	r5, r0
 8007e34:	f04f 0b00 	mov.w	fp, #0
 8007e38:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8007e3c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007e3e:	781a      	ldrb	r2, [r3, #0]
 8007e40:	2a2b      	cmp	r2, #43	; 0x2b
 8007e42:	d04c      	beq.n	8007ede <_strtod_l+0xce>
 8007e44:	d839      	bhi.n	8007eba <_strtod_l+0xaa>
 8007e46:	2a0d      	cmp	r2, #13
 8007e48:	d832      	bhi.n	8007eb0 <_strtod_l+0xa0>
 8007e4a:	2a08      	cmp	r2, #8
 8007e4c:	d832      	bhi.n	8007eb4 <_strtod_l+0xa4>
 8007e4e:	2a00      	cmp	r2, #0
 8007e50:	d03c      	beq.n	8007ecc <_strtod_l+0xbc>
 8007e52:	2300      	movs	r3, #0
 8007e54:	930e      	str	r3, [sp, #56]	; 0x38
 8007e56:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8007e58:	7833      	ldrb	r3, [r6, #0]
 8007e5a:	2b30      	cmp	r3, #48	; 0x30
 8007e5c:	f040 80b4 	bne.w	8007fc8 <_strtod_l+0x1b8>
 8007e60:	7873      	ldrb	r3, [r6, #1]
 8007e62:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007e66:	2b58      	cmp	r3, #88	; 0x58
 8007e68:	d16c      	bne.n	8007f44 <_strtod_l+0x134>
 8007e6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e6c:	9301      	str	r3, [sp, #4]
 8007e6e:	ab1e      	add	r3, sp, #120	; 0x78
 8007e70:	9702      	str	r7, [sp, #8]
 8007e72:	9300      	str	r3, [sp, #0]
 8007e74:	4a8f      	ldr	r2, [pc, #572]	; (80080b4 <_strtod_l+0x2a4>)
 8007e76:	ab1f      	add	r3, sp, #124	; 0x7c
 8007e78:	a91d      	add	r1, sp, #116	; 0x74
 8007e7a:	4620      	mov	r0, r4
 8007e7c:	f001 fef6 	bl	8009c6c <__gethex>
 8007e80:	f010 0707 	ands.w	r7, r0, #7
 8007e84:	4605      	mov	r5, r0
 8007e86:	d005      	beq.n	8007e94 <_strtod_l+0x84>
 8007e88:	2f06      	cmp	r7, #6
 8007e8a:	d12a      	bne.n	8007ee2 <_strtod_l+0xd2>
 8007e8c:	3601      	adds	r6, #1
 8007e8e:	2300      	movs	r3, #0
 8007e90:	961d      	str	r6, [sp, #116]	; 0x74
 8007e92:	930e      	str	r3, [sp, #56]	; 0x38
 8007e94:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	f040 8596 	bne.w	80089c8 <_strtod_l+0xbb8>
 8007e9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e9e:	b1db      	cbz	r3, 8007ed8 <_strtod_l+0xc8>
 8007ea0:	4652      	mov	r2, sl
 8007ea2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007ea6:	ec43 2b10 	vmov	d0, r2, r3
 8007eaa:	b023      	add	sp, #140	; 0x8c
 8007eac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007eb0:	2a20      	cmp	r2, #32
 8007eb2:	d1ce      	bne.n	8007e52 <_strtod_l+0x42>
 8007eb4:	3301      	adds	r3, #1
 8007eb6:	931d      	str	r3, [sp, #116]	; 0x74
 8007eb8:	e7c0      	b.n	8007e3c <_strtod_l+0x2c>
 8007eba:	2a2d      	cmp	r2, #45	; 0x2d
 8007ebc:	d1c9      	bne.n	8007e52 <_strtod_l+0x42>
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	920e      	str	r2, [sp, #56]	; 0x38
 8007ec2:	1c5a      	adds	r2, r3, #1
 8007ec4:	921d      	str	r2, [sp, #116]	; 0x74
 8007ec6:	785b      	ldrb	r3, [r3, #1]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d1c4      	bne.n	8007e56 <_strtod_l+0x46>
 8007ecc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007ece:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	f040 8576 	bne.w	80089c4 <_strtod_l+0xbb4>
 8007ed8:	4652      	mov	r2, sl
 8007eda:	465b      	mov	r3, fp
 8007edc:	e7e3      	b.n	8007ea6 <_strtod_l+0x96>
 8007ede:	2200      	movs	r2, #0
 8007ee0:	e7ee      	b.n	8007ec0 <_strtod_l+0xb0>
 8007ee2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007ee4:	b13a      	cbz	r2, 8007ef6 <_strtod_l+0xe6>
 8007ee6:	2135      	movs	r1, #53	; 0x35
 8007ee8:	a820      	add	r0, sp, #128	; 0x80
 8007eea:	f002 fec4 	bl	800ac76 <__copybits>
 8007eee:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007ef0:	4620      	mov	r0, r4
 8007ef2:	f002 fa89 	bl	800a408 <_Bfree>
 8007ef6:	3f01      	subs	r7, #1
 8007ef8:	2f05      	cmp	r7, #5
 8007efa:	d807      	bhi.n	8007f0c <_strtod_l+0xfc>
 8007efc:	e8df f007 	tbb	[pc, r7]
 8007f00:	1d180b0e 	.word	0x1d180b0e
 8007f04:	030e      	.short	0x030e
 8007f06:	f04f 0b00 	mov.w	fp, #0
 8007f0a:	46da      	mov	sl, fp
 8007f0c:	0728      	lsls	r0, r5, #28
 8007f0e:	d5c1      	bpl.n	8007e94 <_strtod_l+0x84>
 8007f10:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007f14:	e7be      	b.n	8007e94 <_strtod_l+0x84>
 8007f16:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8007f1a:	e7f7      	b.n	8007f0c <_strtod_l+0xfc>
 8007f1c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8007f20:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007f22:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007f26:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007f2a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007f2e:	e7ed      	b.n	8007f0c <_strtod_l+0xfc>
 8007f30:	f8df b184 	ldr.w	fp, [pc, #388]	; 80080b8 <_strtod_l+0x2a8>
 8007f34:	f04f 0a00 	mov.w	sl, #0
 8007f38:	e7e8      	b.n	8007f0c <_strtod_l+0xfc>
 8007f3a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007f3e:	f04f 3aff 	mov.w	sl, #4294967295
 8007f42:	e7e3      	b.n	8007f0c <_strtod_l+0xfc>
 8007f44:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007f46:	1c5a      	adds	r2, r3, #1
 8007f48:	921d      	str	r2, [sp, #116]	; 0x74
 8007f4a:	785b      	ldrb	r3, [r3, #1]
 8007f4c:	2b30      	cmp	r3, #48	; 0x30
 8007f4e:	d0f9      	beq.n	8007f44 <_strtod_l+0x134>
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d09f      	beq.n	8007e94 <_strtod_l+0x84>
 8007f54:	2301      	movs	r3, #1
 8007f56:	f04f 0900 	mov.w	r9, #0
 8007f5a:	9304      	str	r3, [sp, #16]
 8007f5c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007f5e:	930a      	str	r3, [sp, #40]	; 0x28
 8007f60:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007f64:	464f      	mov	r7, r9
 8007f66:	220a      	movs	r2, #10
 8007f68:	981d      	ldr	r0, [sp, #116]	; 0x74
 8007f6a:	7806      	ldrb	r6, [r0, #0]
 8007f6c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007f70:	b2d9      	uxtb	r1, r3
 8007f72:	2909      	cmp	r1, #9
 8007f74:	d92a      	bls.n	8007fcc <_strtod_l+0x1bc>
 8007f76:	9907      	ldr	r1, [sp, #28]
 8007f78:	462a      	mov	r2, r5
 8007f7a:	f003 fa8c 	bl	800b496 <strncmp>
 8007f7e:	b398      	cbz	r0, 8007fe8 <_strtod_l+0x1d8>
 8007f80:	2000      	movs	r0, #0
 8007f82:	4633      	mov	r3, r6
 8007f84:	463d      	mov	r5, r7
 8007f86:	9007      	str	r0, [sp, #28]
 8007f88:	4602      	mov	r2, r0
 8007f8a:	2b65      	cmp	r3, #101	; 0x65
 8007f8c:	d001      	beq.n	8007f92 <_strtod_l+0x182>
 8007f8e:	2b45      	cmp	r3, #69	; 0x45
 8007f90:	d118      	bne.n	8007fc4 <_strtod_l+0x1b4>
 8007f92:	b91d      	cbnz	r5, 8007f9c <_strtod_l+0x18c>
 8007f94:	9b04      	ldr	r3, [sp, #16]
 8007f96:	4303      	orrs	r3, r0
 8007f98:	d098      	beq.n	8007ecc <_strtod_l+0xbc>
 8007f9a:	2500      	movs	r5, #0
 8007f9c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8007fa0:	f108 0301 	add.w	r3, r8, #1
 8007fa4:	931d      	str	r3, [sp, #116]	; 0x74
 8007fa6:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007faa:	2b2b      	cmp	r3, #43	; 0x2b
 8007fac:	d075      	beq.n	800809a <_strtod_l+0x28a>
 8007fae:	2b2d      	cmp	r3, #45	; 0x2d
 8007fb0:	d07b      	beq.n	80080aa <_strtod_l+0x29a>
 8007fb2:	f04f 0c00 	mov.w	ip, #0
 8007fb6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8007fba:	2909      	cmp	r1, #9
 8007fbc:	f240 8082 	bls.w	80080c4 <_strtod_l+0x2b4>
 8007fc0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8007fc4:	2600      	movs	r6, #0
 8007fc6:	e09d      	b.n	8008104 <_strtod_l+0x2f4>
 8007fc8:	2300      	movs	r3, #0
 8007fca:	e7c4      	b.n	8007f56 <_strtod_l+0x146>
 8007fcc:	2f08      	cmp	r7, #8
 8007fce:	bfd8      	it	le
 8007fd0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8007fd2:	f100 0001 	add.w	r0, r0, #1
 8007fd6:	bfda      	itte	le
 8007fd8:	fb02 3301 	mlale	r3, r2, r1, r3
 8007fdc:	9309      	strle	r3, [sp, #36]	; 0x24
 8007fde:	fb02 3909 	mlagt	r9, r2, r9, r3
 8007fe2:	3701      	adds	r7, #1
 8007fe4:	901d      	str	r0, [sp, #116]	; 0x74
 8007fe6:	e7bf      	b.n	8007f68 <_strtod_l+0x158>
 8007fe8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007fea:	195a      	adds	r2, r3, r5
 8007fec:	921d      	str	r2, [sp, #116]	; 0x74
 8007fee:	5d5b      	ldrb	r3, [r3, r5]
 8007ff0:	2f00      	cmp	r7, #0
 8007ff2:	d037      	beq.n	8008064 <_strtod_l+0x254>
 8007ff4:	9007      	str	r0, [sp, #28]
 8007ff6:	463d      	mov	r5, r7
 8007ff8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8007ffc:	2a09      	cmp	r2, #9
 8007ffe:	d912      	bls.n	8008026 <_strtod_l+0x216>
 8008000:	2201      	movs	r2, #1
 8008002:	e7c2      	b.n	8007f8a <_strtod_l+0x17a>
 8008004:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008006:	1c5a      	adds	r2, r3, #1
 8008008:	921d      	str	r2, [sp, #116]	; 0x74
 800800a:	785b      	ldrb	r3, [r3, #1]
 800800c:	3001      	adds	r0, #1
 800800e:	2b30      	cmp	r3, #48	; 0x30
 8008010:	d0f8      	beq.n	8008004 <_strtod_l+0x1f4>
 8008012:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8008016:	2a08      	cmp	r2, #8
 8008018:	f200 84db 	bhi.w	80089d2 <_strtod_l+0xbc2>
 800801c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800801e:	9007      	str	r0, [sp, #28]
 8008020:	2000      	movs	r0, #0
 8008022:	920a      	str	r2, [sp, #40]	; 0x28
 8008024:	4605      	mov	r5, r0
 8008026:	3b30      	subs	r3, #48	; 0x30
 8008028:	f100 0201 	add.w	r2, r0, #1
 800802c:	d014      	beq.n	8008058 <_strtod_l+0x248>
 800802e:	9907      	ldr	r1, [sp, #28]
 8008030:	4411      	add	r1, r2
 8008032:	9107      	str	r1, [sp, #28]
 8008034:	462a      	mov	r2, r5
 8008036:	eb00 0e05 	add.w	lr, r0, r5
 800803a:	210a      	movs	r1, #10
 800803c:	4572      	cmp	r2, lr
 800803e:	d113      	bne.n	8008068 <_strtod_l+0x258>
 8008040:	182a      	adds	r2, r5, r0
 8008042:	2a08      	cmp	r2, #8
 8008044:	f105 0501 	add.w	r5, r5, #1
 8008048:	4405      	add	r5, r0
 800804a:	dc1c      	bgt.n	8008086 <_strtod_l+0x276>
 800804c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800804e:	220a      	movs	r2, #10
 8008050:	fb02 3301 	mla	r3, r2, r1, r3
 8008054:	9309      	str	r3, [sp, #36]	; 0x24
 8008056:	2200      	movs	r2, #0
 8008058:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800805a:	1c59      	adds	r1, r3, #1
 800805c:	911d      	str	r1, [sp, #116]	; 0x74
 800805e:	785b      	ldrb	r3, [r3, #1]
 8008060:	4610      	mov	r0, r2
 8008062:	e7c9      	b.n	8007ff8 <_strtod_l+0x1e8>
 8008064:	4638      	mov	r0, r7
 8008066:	e7d2      	b.n	800800e <_strtod_l+0x1fe>
 8008068:	2a08      	cmp	r2, #8
 800806a:	dc04      	bgt.n	8008076 <_strtod_l+0x266>
 800806c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800806e:	434e      	muls	r6, r1
 8008070:	9609      	str	r6, [sp, #36]	; 0x24
 8008072:	3201      	adds	r2, #1
 8008074:	e7e2      	b.n	800803c <_strtod_l+0x22c>
 8008076:	f102 0c01 	add.w	ip, r2, #1
 800807a:	f1bc 0f10 	cmp.w	ip, #16
 800807e:	bfd8      	it	le
 8008080:	fb01 f909 	mulle.w	r9, r1, r9
 8008084:	e7f5      	b.n	8008072 <_strtod_l+0x262>
 8008086:	2d10      	cmp	r5, #16
 8008088:	bfdc      	itt	le
 800808a:	220a      	movle	r2, #10
 800808c:	fb02 3909 	mlale	r9, r2, r9, r3
 8008090:	e7e1      	b.n	8008056 <_strtod_l+0x246>
 8008092:	2300      	movs	r3, #0
 8008094:	9307      	str	r3, [sp, #28]
 8008096:	2201      	movs	r2, #1
 8008098:	e77c      	b.n	8007f94 <_strtod_l+0x184>
 800809a:	f04f 0c00 	mov.w	ip, #0
 800809e:	f108 0302 	add.w	r3, r8, #2
 80080a2:	931d      	str	r3, [sp, #116]	; 0x74
 80080a4:	f898 3002 	ldrb.w	r3, [r8, #2]
 80080a8:	e785      	b.n	8007fb6 <_strtod_l+0x1a6>
 80080aa:	f04f 0c01 	mov.w	ip, #1
 80080ae:	e7f6      	b.n	800809e <_strtod_l+0x28e>
 80080b0:	0800bcac 	.word	0x0800bcac
 80080b4:	0800b9f8 	.word	0x0800b9f8
 80080b8:	7ff00000 	.word	0x7ff00000
 80080bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80080be:	1c59      	adds	r1, r3, #1
 80080c0:	911d      	str	r1, [sp, #116]	; 0x74
 80080c2:	785b      	ldrb	r3, [r3, #1]
 80080c4:	2b30      	cmp	r3, #48	; 0x30
 80080c6:	d0f9      	beq.n	80080bc <_strtod_l+0x2ac>
 80080c8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80080cc:	2908      	cmp	r1, #8
 80080ce:	f63f af79 	bhi.w	8007fc4 <_strtod_l+0x1b4>
 80080d2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80080d6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80080d8:	9308      	str	r3, [sp, #32]
 80080da:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80080dc:	1c59      	adds	r1, r3, #1
 80080de:	911d      	str	r1, [sp, #116]	; 0x74
 80080e0:	785b      	ldrb	r3, [r3, #1]
 80080e2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80080e6:	2e09      	cmp	r6, #9
 80080e8:	d937      	bls.n	800815a <_strtod_l+0x34a>
 80080ea:	9e08      	ldr	r6, [sp, #32]
 80080ec:	1b89      	subs	r1, r1, r6
 80080ee:	2908      	cmp	r1, #8
 80080f0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80080f4:	dc02      	bgt.n	80080fc <_strtod_l+0x2ec>
 80080f6:	4576      	cmp	r6, lr
 80080f8:	bfa8      	it	ge
 80080fa:	4676      	movge	r6, lr
 80080fc:	f1bc 0f00 	cmp.w	ip, #0
 8008100:	d000      	beq.n	8008104 <_strtod_l+0x2f4>
 8008102:	4276      	negs	r6, r6
 8008104:	2d00      	cmp	r5, #0
 8008106:	d14f      	bne.n	80081a8 <_strtod_l+0x398>
 8008108:	9904      	ldr	r1, [sp, #16]
 800810a:	4301      	orrs	r1, r0
 800810c:	f47f aec2 	bne.w	8007e94 <_strtod_l+0x84>
 8008110:	2a00      	cmp	r2, #0
 8008112:	f47f aedb 	bne.w	8007ecc <_strtod_l+0xbc>
 8008116:	2b69      	cmp	r3, #105	; 0x69
 8008118:	d027      	beq.n	800816a <_strtod_l+0x35a>
 800811a:	dc24      	bgt.n	8008166 <_strtod_l+0x356>
 800811c:	2b49      	cmp	r3, #73	; 0x49
 800811e:	d024      	beq.n	800816a <_strtod_l+0x35a>
 8008120:	2b4e      	cmp	r3, #78	; 0x4e
 8008122:	f47f aed3 	bne.w	8007ecc <_strtod_l+0xbc>
 8008126:	499e      	ldr	r1, [pc, #632]	; (80083a0 <_strtod_l+0x590>)
 8008128:	a81d      	add	r0, sp, #116	; 0x74
 800812a:	f001 fff7 	bl	800a11c <__match>
 800812e:	2800      	cmp	r0, #0
 8008130:	f43f aecc 	beq.w	8007ecc <_strtod_l+0xbc>
 8008134:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008136:	781b      	ldrb	r3, [r3, #0]
 8008138:	2b28      	cmp	r3, #40	; 0x28
 800813a:	d12d      	bne.n	8008198 <_strtod_l+0x388>
 800813c:	4999      	ldr	r1, [pc, #612]	; (80083a4 <_strtod_l+0x594>)
 800813e:	aa20      	add	r2, sp, #128	; 0x80
 8008140:	a81d      	add	r0, sp, #116	; 0x74
 8008142:	f001 ffff 	bl	800a144 <__hexnan>
 8008146:	2805      	cmp	r0, #5
 8008148:	d126      	bne.n	8008198 <_strtod_l+0x388>
 800814a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800814c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8008150:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008154:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008158:	e69c      	b.n	8007e94 <_strtod_l+0x84>
 800815a:	210a      	movs	r1, #10
 800815c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8008160:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008164:	e7b9      	b.n	80080da <_strtod_l+0x2ca>
 8008166:	2b6e      	cmp	r3, #110	; 0x6e
 8008168:	e7db      	b.n	8008122 <_strtod_l+0x312>
 800816a:	498f      	ldr	r1, [pc, #572]	; (80083a8 <_strtod_l+0x598>)
 800816c:	a81d      	add	r0, sp, #116	; 0x74
 800816e:	f001 ffd5 	bl	800a11c <__match>
 8008172:	2800      	cmp	r0, #0
 8008174:	f43f aeaa 	beq.w	8007ecc <_strtod_l+0xbc>
 8008178:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800817a:	498c      	ldr	r1, [pc, #560]	; (80083ac <_strtod_l+0x59c>)
 800817c:	3b01      	subs	r3, #1
 800817e:	a81d      	add	r0, sp, #116	; 0x74
 8008180:	931d      	str	r3, [sp, #116]	; 0x74
 8008182:	f001 ffcb 	bl	800a11c <__match>
 8008186:	b910      	cbnz	r0, 800818e <_strtod_l+0x37e>
 8008188:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800818a:	3301      	adds	r3, #1
 800818c:	931d      	str	r3, [sp, #116]	; 0x74
 800818e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 80083bc <_strtod_l+0x5ac>
 8008192:	f04f 0a00 	mov.w	sl, #0
 8008196:	e67d      	b.n	8007e94 <_strtod_l+0x84>
 8008198:	4885      	ldr	r0, [pc, #532]	; (80083b0 <_strtod_l+0x5a0>)
 800819a:	f003 f921 	bl	800b3e0 <nan>
 800819e:	ed8d 0b04 	vstr	d0, [sp, #16]
 80081a2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80081a6:	e675      	b.n	8007e94 <_strtod_l+0x84>
 80081a8:	9b07      	ldr	r3, [sp, #28]
 80081aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80081ac:	1af3      	subs	r3, r6, r3
 80081ae:	2f00      	cmp	r7, #0
 80081b0:	bf08      	it	eq
 80081b2:	462f      	moveq	r7, r5
 80081b4:	2d10      	cmp	r5, #16
 80081b6:	9308      	str	r3, [sp, #32]
 80081b8:	46a8      	mov	r8, r5
 80081ba:	bfa8      	it	ge
 80081bc:	f04f 0810 	movge.w	r8, #16
 80081c0:	f7f8 f9a0 	bl	8000504 <__aeabi_ui2d>
 80081c4:	2d09      	cmp	r5, #9
 80081c6:	4682      	mov	sl, r0
 80081c8:	468b      	mov	fp, r1
 80081ca:	dd13      	ble.n	80081f4 <_strtod_l+0x3e4>
 80081cc:	4b79      	ldr	r3, [pc, #484]	; (80083b4 <_strtod_l+0x5a4>)
 80081ce:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80081d2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80081d6:	f7f8 fa0f 	bl	80005f8 <__aeabi_dmul>
 80081da:	4682      	mov	sl, r0
 80081dc:	4648      	mov	r0, r9
 80081de:	468b      	mov	fp, r1
 80081e0:	f7f8 f990 	bl	8000504 <__aeabi_ui2d>
 80081e4:	4602      	mov	r2, r0
 80081e6:	460b      	mov	r3, r1
 80081e8:	4650      	mov	r0, sl
 80081ea:	4659      	mov	r1, fp
 80081ec:	f7f8 f84e 	bl	800028c <__adddf3>
 80081f0:	4682      	mov	sl, r0
 80081f2:	468b      	mov	fp, r1
 80081f4:	2d0f      	cmp	r5, #15
 80081f6:	dc38      	bgt.n	800826a <_strtod_l+0x45a>
 80081f8:	9b08      	ldr	r3, [sp, #32]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	f43f ae4a 	beq.w	8007e94 <_strtod_l+0x84>
 8008200:	dd24      	ble.n	800824c <_strtod_l+0x43c>
 8008202:	2b16      	cmp	r3, #22
 8008204:	dc0b      	bgt.n	800821e <_strtod_l+0x40e>
 8008206:	4d6b      	ldr	r5, [pc, #428]	; (80083b4 <_strtod_l+0x5a4>)
 8008208:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800820c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8008210:	4652      	mov	r2, sl
 8008212:	465b      	mov	r3, fp
 8008214:	f7f8 f9f0 	bl	80005f8 <__aeabi_dmul>
 8008218:	4682      	mov	sl, r0
 800821a:	468b      	mov	fp, r1
 800821c:	e63a      	b.n	8007e94 <_strtod_l+0x84>
 800821e:	9a08      	ldr	r2, [sp, #32]
 8008220:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8008224:	4293      	cmp	r3, r2
 8008226:	db20      	blt.n	800826a <_strtod_l+0x45a>
 8008228:	4c62      	ldr	r4, [pc, #392]	; (80083b4 <_strtod_l+0x5a4>)
 800822a:	f1c5 050f 	rsb	r5, r5, #15
 800822e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008232:	4652      	mov	r2, sl
 8008234:	465b      	mov	r3, fp
 8008236:	e9d1 0100 	ldrd	r0, r1, [r1]
 800823a:	f7f8 f9dd 	bl	80005f8 <__aeabi_dmul>
 800823e:	9b08      	ldr	r3, [sp, #32]
 8008240:	1b5d      	subs	r5, r3, r5
 8008242:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008246:	e9d4 2300 	ldrd	r2, r3, [r4]
 800824a:	e7e3      	b.n	8008214 <_strtod_l+0x404>
 800824c:	9b08      	ldr	r3, [sp, #32]
 800824e:	3316      	adds	r3, #22
 8008250:	db0b      	blt.n	800826a <_strtod_l+0x45a>
 8008252:	9b07      	ldr	r3, [sp, #28]
 8008254:	4a57      	ldr	r2, [pc, #348]	; (80083b4 <_strtod_l+0x5a4>)
 8008256:	1b9e      	subs	r6, r3, r6
 8008258:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800825c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008260:	4650      	mov	r0, sl
 8008262:	4659      	mov	r1, fp
 8008264:	f7f8 faf2 	bl	800084c <__aeabi_ddiv>
 8008268:	e7d6      	b.n	8008218 <_strtod_l+0x408>
 800826a:	9b08      	ldr	r3, [sp, #32]
 800826c:	eba5 0808 	sub.w	r8, r5, r8
 8008270:	4498      	add	r8, r3
 8008272:	f1b8 0f00 	cmp.w	r8, #0
 8008276:	dd71      	ble.n	800835c <_strtod_l+0x54c>
 8008278:	f018 030f 	ands.w	r3, r8, #15
 800827c:	d00a      	beq.n	8008294 <_strtod_l+0x484>
 800827e:	494d      	ldr	r1, [pc, #308]	; (80083b4 <_strtod_l+0x5a4>)
 8008280:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008284:	4652      	mov	r2, sl
 8008286:	465b      	mov	r3, fp
 8008288:	e9d1 0100 	ldrd	r0, r1, [r1]
 800828c:	f7f8 f9b4 	bl	80005f8 <__aeabi_dmul>
 8008290:	4682      	mov	sl, r0
 8008292:	468b      	mov	fp, r1
 8008294:	f038 080f 	bics.w	r8, r8, #15
 8008298:	d04d      	beq.n	8008336 <_strtod_l+0x526>
 800829a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800829e:	dd22      	ble.n	80082e6 <_strtod_l+0x4d6>
 80082a0:	2500      	movs	r5, #0
 80082a2:	462e      	mov	r6, r5
 80082a4:	9509      	str	r5, [sp, #36]	; 0x24
 80082a6:	9507      	str	r5, [sp, #28]
 80082a8:	2322      	movs	r3, #34	; 0x22
 80082aa:	f8df b110 	ldr.w	fp, [pc, #272]	; 80083bc <_strtod_l+0x5ac>
 80082ae:	6023      	str	r3, [r4, #0]
 80082b0:	f04f 0a00 	mov.w	sl, #0
 80082b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	f43f adec 	beq.w	8007e94 <_strtod_l+0x84>
 80082bc:	991e      	ldr	r1, [sp, #120]	; 0x78
 80082be:	4620      	mov	r0, r4
 80082c0:	f002 f8a2 	bl	800a408 <_Bfree>
 80082c4:	9907      	ldr	r1, [sp, #28]
 80082c6:	4620      	mov	r0, r4
 80082c8:	f002 f89e 	bl	800a408 <_Bfree>
 80082cc:	4631      	mov	r1, r6
 80082ce:	4620      	mov	r0, r4
 80082d0:	f002 f89a 	bl	800a408 <_Bfree>
 80082d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80082d6:	4620      	mov	r0, r4
 80082d8:	f002 f896 	bl	800a408 <_Bfree>
 80082dc:	4629      	mov	r1, r5
 80082de:	4620      	mov	r0, r4
 80082e0:	f002 f892 	bl	800a408 <_Bfree>
 80082e4:	e5d6      	b.n	8007e94 <_strtod_l+0x84>
 80082e6:	2300      	movs	r3, #0
 80082e8:	ea4f 1828 	mov.w	r8, r8, asr #4
 80082ec:	4650      	mov	r0, sl
 80082ee:	4659      	mov	r1, fp
 80082f0:	4699      	mov	r9, r3
 80082f2:	f1b8 0f01 	cmp.w	r8, #1
 80082f6:	dc21      	bgt.n	800833c <_strtod_l+0x52c>
 80082f8:	b10b      	cbz	r3, 80082fe <_strtod_l+0x4ee>
 80082fa:	4682      	mov	sl, r0
 80082fc:	468b      	mov	fp, r1
 80082fe:	4b2e      	ldr	r3, [pc, #184]	; (80083b8 <_strtod_l+0x5a8>)
 8008300:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008304:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8008308:	4652      	mov	r2, sl
 800830a:	465b      	mov	r3, fp
 800830c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008310:	f7f8 f972 	bl	80005f8 <__aeabi_dmul>
 8008314:	4b29      	ldr	r3, [pc, #164]	; (80083bc <_strtod_l+0x5ac>)
 8008316:	460a      	mov	r2, r1
 8008318:	400b      	ands	r3, r1
 800831a:	4929      	ldr	r1, [pc, #164]	; (80083c0 <_strtod_l+0x5b0>)
 800831c:	428b      	cmp	r3, r1
 800831e:	4682      	mov	sl, r0
 8008320:	d8be      	bhi.n	80082a0 <_strtod_l+0x490>
 8008322:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008326:	428b      	cmp	r3, r1
 8008328:	bf86      	itte	hi
 800832a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80083c4 <_strtod_l+0x5b4>
 800832e:	f04f 3aff 	movhi.w	sl, #4294967295
 8008332:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008336:	2300      	movs	r3, #0
 8008338:	9304      	str	r3, [sp, #16]
 800833a:	e081      	b.n	8008440 <_strtod_l+0x630>
 800833c:	f018 0f01 	tst.w	r8, #1
 8008340:	d007      	beq.n	8008352 <_strtod_l+0x542>
 8008342:	4b1d      	ldr	r3, [pc, #116]	; (80083b8 <_strtod_l+0x5a8>)
 8008344:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8008348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800834c:	f7f8 f954 	bl	80005f8 <__aeabi_dmul>
 8008350:	2301      	movs	r3, #1
 8008352:	f109 0901 	add.w	r9, r9, #1
 8008356:	ea4f 0868 	mov.w	r8, r8, asr #1
 800835a:	e7ca      	b.n	80082f2 <_strtod_l+0x4e2>
 800835c:	d0eb      	beq.n	8008336 <_strtod_l+0x526>
 800835e:	f1c8 0800 	rsb	r8, r8, #0
 8008362:	f018 020f 	ands.w	r2, r8, #15
 8008366:	d00a      	beq.n	800837e <_strtod_l+0x56e>
 8008368:	4b12      	ldr	r3, [pc, #72]	; (80083b4 <_strtod_l+0x5a4>)
 800836a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800836e:	4650      	mov	r0, sl
 8008370:	4659      	mov	r1, fp
 8008372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008376:	f7f8 fa69 	bl	800084c <__aeabi_ddiv>
 800837a:	4682      	mov	sl, r0
 800837c:	468b      	mov	fp, r1
 800837e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008382:	d0d8      	beq.n	8008336 <_strtod_l+0x526>
 8008384:	f1b8 0f1f 	cmp.w	r8, #31
 8008388:	dd1e      	ble.n	80083c8 <_strtod_l+0x5b8>
 800838a:	2500      	movs	r5, #0
 800838c:	462e      	mov	r6, r5
 800838e:	9509      	str	r5, [sp, #36]	; 0x24
 8008390:	9507      	str	r5, [sp, #28]
 8008392:	2322      	movs	r3, #34	; 0x22
 8008394:	f04f 0a00 	mov.w	sl, #0
 8008398:	f04f 0b00 	mov.w	fp, #0
 800839c:	6023      	str	r3, [r4, #0]
 800839e:	e789      	b.n	80082b4 <_strtod_l+0x4a4>
 80083a0:	0800b9c9 	.word	0x0800b9c9
 80083a4:	0800ba0c 	.word	0x0800ba0c
 80083a8:	0800b9c1 	.word	0x0800b9c1
 80083ac:	0800bb4c 	.word	0x0800bb4c
 80083b0:	0800be68 	.word	0x0800be68
 80083b4:	0800bd48 	.word	0x0800bd48
 80083b8:	0800bd20 	.word	0x0800bd20
 80083bc:	7ff00000 	.word	0x7ff00000
 80083c0:	7ca00000 	.word	0x7ca00000
 80083c4:	7fefffff 	.word	0x7fefffff
 80083c8:	f018 0310 	ands.w	r3, r8, #16
 80083cc:	bf18      	it	ne
 80083ce:	236a      	movne	r3, #106	; 0x6a
 80083d0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8008788 <_strtod_l+0x978>
 80083d4:	9304      	str	r3, [sp, #16]
 80083d6:	4650      	mov	r0, sl
 80083d8:	4659      	mov	r1, fp
 80083da:	2300      	movs	r3, #0
 80083dc:	f018 0f01 	tst.w	r8, #1
 80083e0:	d004      	beq.n	80083ec <_strtod_l+0x5dc>
 80083e2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80083e6:	f7f8 f907 	bl	80005f8 <__aeabi_dmul>
 80083ea:	2301      	movs	r3, #1
 80083ec:	ea5f 0868 	movs.w	r8, r8, asr #1
 80083f0:	f109 0908 	add.w	r9, r9, #8
 80083f4:	d1f2      	bne.n	80083dc <_strtod_l+0x5cc>
 80083f6:	b10b      	cbz	r3, 80083fc <_strtod_l+0x5ec>
 80083f8:	4682      	mov	sl, r0
 80083fa:	468b      	mov	fp, r1
 80083fc:	9b04      	ldr	r3, [sp, #16]
 80083fe:	b1bb      	cbz	r3, 8008430 <_strtod_l+0x620>
 8008400:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8008404:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008408:	2b00      	cmp	r3, #0
 800840a:	4659      	mov	r1, fp
 800840c:	dd10      	ble.n	8008430 <_strtod_l+0x620>
 800840e:	2b1f      	cmp	r3, #31
 8008410:	f340 8128 	ble.w	8008664 <_strtod_l+0x854>
 8008414:	2b34      	cmp	r3, #52	; 0x34
 8008416:	bfde      	ittt	le
 8008418:	3b20      	suble	r3, #32
 800841a:	f04f 32ff 	movle.w	r2, #4294967295
 800841e:	fa02 f303 	lslle.w	r3, r2, r3
 8008422:	f04f 0a00 	mov.w	sl, #0
 8008426:	bfcc      	ite	gt
 8008428:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800842c:	ea03 0b01 	andle.w	fp, r3, r1
 8008430:	2200      	movs	r2, #0
 8008432:	2300      	movs	r3, #0
 8008434:	4650      	mov	r0, sl
 8008436:	4659      	mov	r1, fp
 8008438:	f7f8 fb46 	bl	8000ac8 <__aeabi_dcmpeq>
 800843c:	2800      	cmp	r0, #0
 800843e:	d1a4      	bne.n	800838a <_strtod_l+0x57a>
 8008440:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008442:	9300      	str	r3, [sp, #0]
 8008444:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008446:	462b      	mov	r3, r5
 8008448:	463a      	mov	r2, r7
 800844a:	4620      	mov	r0, r4
 800844c:	f002 f848 	bl	800a4e0 <__s2b>
 8008450:	9009      	str	r0, [sp, #36]	; 0x24
 8008452:	2800      	cmp	r0, #0
 8008454:	f43f af24 	beq.w	80082a0 <_strtod_l+0x490>
 8008458:	9b07      	ldr	r3, [sp, #28]
 800845a:	1b9e      	subs	r6, r3, r6
 800845c:	9b08      	ldr	r3, [sp, #32]
 800845e:	2b00      	cmp	r3, #0
 8008460:	bfb4      	ite	lt
 8008462:	4633      	movlt	r3, r6
 8008464:	2300      	movge	r3, #0
 8008466:	9310      	str	r3, [sp, #64]	; 0x40
 8008468:	9b08      	ldr	r3, [sp, #32]
 800846a:	2500      	movs	r5, #0
 800846c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008470:	9318      	str	r3, [sp, #96]	; 0x60
 8008472:	462e      	mov	r6, r5
 8008474:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008476:	4620      	mov	r0, r4
 8008478:	6859      	ldr	r1, [r3, #4]
 800847a:	f001 ff85 	bl	800a388 <_Balloc>
 800847e:	9007      	str	r0, [sp, #28]
 8008480:	2800      	cmp	r0, #0
 8008482:	f43f af11 	beq.w	80082a8 <_strtod_l+0x498>
 8008486:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008488:	691a      	ldr	r2, [r3, #16]
 800848a:	3202      	adds	r2, #2
 800848c:	f103 010c 	add.w	r1, r3, #12
 8008490:	0092      	lsls	r2, r2, #2
 8008492:	300c      	adds	r0, #12
 8008494:	f7fe fd0a 	bl	8006eac <memcpy>
 8008498:	ec4b ab10 	vmov	d0, sl, fp
 800849c:	aa20      	add	r2, sp, #128	; 0x80
 800849e:	a91f      	add	r1, sp, #124	; 0x7c
 80084a0:	4620      	mov	r0, r4
 80084a2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80084a6:	f002 fb57 	bl	800ab58 <__d2b>
 80084aa:	901e      	str	r0, [sp, #120]	; 0x78
 80084ac:	2800      	cmp	r0, #0
 80084ae:	f43f aefb 	beq.w	80082a8 <_strtod_l+0x498>
 80084b2:	2101      	movs	r1, #1
 80084b4:	4620      	mov	r0, r4
 80084b6:	f002 f8ad 	bl	800a614 <__i2b>
 80084ba:	4606      	mov	r6, r0
 80084bc:	2800      	cmp	r0, #0
 80084be:	f43f aef3 	beq.w	80082a8 <_strtod_l+0x498>
 80084c2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80084c4:	9904      	ldr	r1, [sp, #16]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	bfab      	itete	ge
 80084ca:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 80084cc:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 80084ce:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 80084d0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 80084d4:	bfac      	ite	ge
 80084d6:	eb03 0902 	addge.w	r9, r3, r2
 80084da:	1ad7      	sublt	r7, r2, r3
 80084dc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80084de:	eba3 0801 	sub.w	r8, r3, r1
 80084e2:	4490      	add	r8, r2
 80084e4:	4ba3      	ldr	r3, [pc, #652]	; (8008774 <_strtod_l+0x964>)
 80084e6:	f108 38ff 	add.w	r8, r8, #4294967295
 80084ea:	4598      	cmp	r8, r3
 80084ec:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80084f0:	f280 80cc 	bge.w	800868c <_strtod_l+0x87c>
 80084f4:	eba3 0308 	sub.w	r3, r3, r8
 80084f8:	2b1f      	cmp	r3, #31
 80084fa:	eba2 0203 	sub.w	r2, r2, r3
 80084fe:	f04f 0101 	mov.w	r1, #1
 8008502:	f300 80b6 	bgt.w	8008672 <_strtod_l+0x862>
 8008506:	fa01 f303 	lsl.w	r3, r1, r3
 800850a:	9311      	str	r3, [sp, #68]	; 0x44
 800850c:	2300      	movs	r3, #0
 800850e:	930c      	str	r3, [sp, #48]	; 0x30
 8008510:	eb09 0802 	add.w	r8, r9, r2
 8008514:	9b04      	ldr	r3, [sp, #16]
 8008516:	45c1      	cmp	r9, r8
 8008518:	4417      	add	r7, r2
 800851a:	441f      	add	r7, r3
 800851c:	464b      	mov	r3, r9
 800851e:	bfa8      	it	ge
 8008520:	4643      	movge	r3, r8
 8008522:	42bb      	cmp	r3, r7
 8008524:	bfa8      	it	ge
 8008526:	463b      	movge	r3, r7
 8008528:	2b00      	cmp	r3, #0
 800852a:	bfc2      	ittt	gt
 800852c:	eba8 0803 	subgt.w	r8, r8, r3
 8008530:	1aff      	subgt	r7, r7, r3
 8008532:	eba9 0903 	subgt.w	r9, r9, r3
 8008536:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008538:	2b00      	cmp	r3, #0
 800853a:	dd17      	ble.n	800856c <_strtod_l+0x75c>
 800853c:	4631      	mov	r1, r6
 800853e:	461a      	mov	r2, r3
 8008540:	4620      	mov	r0, r4
 8008542:	f002 f923 	bl	800a78c <__pow5mult>
 8008546:	4606      	mov	r6, r0
 8008548:	2800      	cmp	r0, #0
 800854a:	f43f aead 	beq.w	80082a8 <_strtod_l+0x498>
 800854e:	4601      	mov	r1, r0
 8008550:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008552:	4620      	mov	r0, r4
 8008554:	f002 f874 	bl	800a640 <__multiply>
 8008558:	900f      	str	r0, [sp, #60]	; 0x3c
 800855a:	2800      	cmp	r0, #0
 800855c:	f43f aea4 	beq.w	80082a8 <_strtod_l+0x498>
 8008560:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008562:	4620      	mov	r0, r4
 8008564:	f001 ff50 	bl	800a408 <_Bfree>
 8008568:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800856a:	931e      	str	r3, [sp, #120]	; 0x78
 800856c:	f1b8 0f00 	cmp.w	r8, #0
 8008570:	f300 8091 	bgt.w	8008696 <_strtod_l+0x886>
 8008574:	9b08      	ldr	r3, [sp, #32]
 8008576:	2b00      	cmp	r3, #0
 8008578:	dd08      	ble.n	800858c <_strtod_l+0x77c>
 800857a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800857c:	9907      	ldr	r1, [sp, #28]
 800857e:	4620      	mov	r0, r4
 8008580:	f002 f904 	bl	800a78c <__pow5mult>
 8008584:	9007      	str	r0, [sp, #28]
 8008586:	2800      	cmp	r0, #0
 8008588:	f43f ae8e 	beq.w	80082a8 <_strtod_l+0x498>
 800858c:	2f00      	cmp	r7, #0
 800858e:	dd08      	ble.n	80085a2 <_strtod_l+0x792>
 8008590:	9907      	ldr	r1, [sp, #28]
 8008592:	463a      	mov	r2, r7
 8008594:	4620      	mov	r0, r4
 8008596:	f002 f953 	bl	800a840 <__lshift>
 800859a:	9007      	str	r0, [sp, #28]
 800859c:	2800      	cmp	r0, #0
 800859e:	f43f ae83 	beq.w	80082a8 <_strtod_l+0x498>
 80085a2:	f1b9 0f00 	cmp.w	r9, #0
 80085a6:	dd08      	ble.n	80085ba <_strtod_l+0x7aa>
 80085a8:	4631      	mov	r1, r6
 80085aa:	464a      	mov	r2, r9
 80085ac:	4620      	mov	r0, r4
 80085ae:	f002 f947 	bl	800a840 <__lshift>
 80085b2:	4606      	mov	r6, r0
 80085b4:	2800      	cmp	r0, #0
 80085b6:	f43f ae77 	beq.w	80082a8 <_strtod_l+0x498>
 80085ba:	9a07      	ldr	r2, [sp, #28]
 80085bc:	991e      	ldr	r1, [sp, #120]	; 0x78
 80085be:	4620      	mov	r0, r4
 80085c0:	f002 f9c6 	bl	800a950 <__mdiff>
 80085c4:	4605      	mov	r5, r0
 80085c6:	2800      	cmp	r0, #0
 80085c8:	f43f ae6e 	beq.w	80082a8 <_strtod_l+0x498>
 80085cc:	68c3      	ldr	r3, [r0, #12]
 80085ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80085d0:	2300      	movs	r3, #0
 80085d2:	60c3      	str	r3, [r0, #12]
 80085d4:	4631      	mov	r1, r6
 80085d6:	f002 f99f 	bl	800a918 <__mcmp>
 80085da:	2800      	cmp	r0, #0
 80085dc:	da65      	bge.n	80086aa <_strtod_l+0x89a>
 80085de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80085e0:	ea53 030a 	orrs.w	r3, r3, sl
 80085e4:	f040 8087 	bne.w	80086f6 <_strtod_l+0x8e6>
 80085e8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	f040 8082 	bne.w	80086f6 <_strtod_l+0x8e6>
 80085f2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80085f6:	0d1b      	lsrs	r3, r3, #20
 80085f8:	051b      	lsls	r3, r3, #20
 80085fa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80085fe:	d97a      	bls.n	80086f6 <_strtod_l+0x8e6>
 8008600:	696b      	ldr	r3, [r5, #20]
 8008602:	b913      	cbnz	r3, 800860a <_strtod_l+0x7fa>
 8008604:	692b      	ldr	r3, [r5, #16]
 8008606:	2b01      	cmp	r3, #1
 8008608:	dd75      	ble.n	80086f6 <_strtod_l+0x8e6>
 800860a:	4629      	mov	r1, r5
 800860c:	2201      	movs	r2, #1
 800860e:	4620      	mov	r0, r4
 8008610:	f002 f916 	bl	800a840 <__lshift>
 8008614:	4631      	mov	r1, r6
 8008616:	4605      	mov	r5, r0
 8008618:	f002 f97e 	bl	800a918 <__mcmp>
 800861c:	2800      	cmp	r0, #0
 800861e:	dd6a      	ble.n	80086f6 <_strtod_l+0x8e6>
 8008620:	9904      	ldr	r1, [sp, #16]
 8008622:	4a55      	ldr	r2, [pc, #340]	; (8008778 <_strtod_l+0x968>)
 8008624:	465b      	mov	r3, fp
 8008626:	2900      	cmp	r1, #0
 8008628:	f000 8085 	beq.w	8008736 <_strtod_l+0x926>
 800862c:	ea02 010b 	and.w	r1, r2, fp
 8008630:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008634:	dc7f      	bgt.n	8008736 <_strtod_l+0x926>
 8008636:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800863a:	f77f aeaa 	ble.w	8008392 <_strtod_l+0x582>
 800863e:	4a4f      	ldr	r2, [pc, #316]	; (800877c <_strtod_l+0x96c>)
 8008640:	2300      	movs	r3, #0
 8008642:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8008646:	4650      	mov	r0, sl
 8008648:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800864c:	4659      	mov	r1, fp
 800864e:	f7f7 ffd3 	bl	80005f8 <__aeabi_dmul>
 8008652:	460b      	mov	r3, r1
 8008654:	4303      	orrs	r3, r0
 8008656:	bf08      	it	eq
 8008658:	2322      	moveq	r3, #34	; 0x22
 800865a:	4682      	mov	sl, r0
 800865c:	468b      	mov	fp, r1
 800865e:	bf08      	it	eq
 8008660:	6023      	streq	r3, [r4, #0]
 8008662:	e62b      	b.n	80082bc <_strtod_l+0x4ac>
 8008664:	f04f 32ff 	mov.w	r2, #4294967295
 8008668:	fa02 f303 	lsl.w	r3, r2, r3
 800866c:	ea03 0a0a 	and.w	sl, r3, sl
 8008670:	e6de      	b.n	8008430 <_strtod_l+0x620>
 8008672:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8008676:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800867a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800867e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8008682:	fa01 f308 	lsl.w	r3, r1, r8
 8008686:	930c      	str	r3, [sp, #48]	; 0x30
 8008688:	9111      	str	r1, [sp, #68]	; 0x44
 800868a:	e741      	b.n	8008510 <_strtod_l+0x700>
 800868c:	2300      	movs	r3, #0
 800868e:	930c      	str	r3, [sp, #48]	; 0x30
 8008690:	2301      	movs	r3, #1
 8008692:	9311      	str	r3, [sp, #68]	; 0x44
 8008694:	e73c      	b.n	8008510 <_strtod_l+0x700>
 8008696:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008698:	4642      	mov	r2, r8
 800869a:	4620      	mov	r0, r4
 800869c:	f002 f8d0 	bl	800a840 <__lshift>
 80086a0:	901e      	str	r0, [sp, #120]	; 0x78
 80086a2:	2800      	cmp	r0, #0
 80086a4:	f47f af66 	bne.w	8008574 <_strtod_l+0x764>
 80086a8:	e5fe      	b.n	80082a8 <_strtod_l+0x498>
 80086aa:	465f      	mov	r7, fp
 80086ac:	d16e      	bne.n	800878c <_strtod_l+0x97c>
 80086ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80086b0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80086b4:	b342      	cbz	r2, 8008708 <_strtod_l+0x8f8>
 80086b6:	4a32      	ldr	r2, [pc, #200]	; (8008780 <_strtod_l+0x970>)
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d128      	bne.n	800870e <_strtod_l+0x8fe>
 80086bc:	9b04      	ldr	r3, [sp, #16]
 80086be:	4650      	mov	r0, sl
 80086c0:	b1eb      	cbz	r3, 80086fe <_strtod_l+0x8ee>
 80086c2:	4a2d      	ldr	r2, [pc, #180]	; (8008778 <_strtod_l+0x968>)
 80086c4:	403a      	ands	r2, r7
 80086c6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80086ca:	f04f 31ff 	mov.w	r1, #4294967295
 80086ce:	d819      	bhi.n	8008704 <_strtod_l+0x8f4>
 80086d0:	0d12      	lsrs	r2, r2, #20
 80086d2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80086d6:	fa01 f303 	lsl.w	r3, r1, r3
 80086da:	4298      	cmp	r0, r3
 80086dc:	d117      	bne.n	800870e <_strtod_l+0x8fe>
 80086de:	4b29      	ldr	r3, [pc, #164]	; (8008784 <_strtod_l+0x974>)
 80086e0:	429f      	cmp	r7, r3
 80086e2:	d102      	bne.n	80086ea <_strtod_l+0x8da>
 80086e4:	3001      	adds	r0, #1
 80086e6:	f43f addf 	beq.w	80082a8 <_strtod_l+0x498>
 80086ea:	4b23      	ldr	r3, [pc, #140]	; (8008778 <_strtod_l+0x968>)
 80086ec:	403b      	ands	r3, r7
 80086ee:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80086f2:	f04f 0a00 	mov.w	sl, #0
 80086f6:	9b04      	ldr	r3, [sp, #16]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d1a0      	bne.n	800863e <_strtod_l+0x82e>
 80086fc:	e5de      	b.n	80082bc <_strtod_l+0x4ac>
 80086fe:	f04f 33ff 	mov.w	r3, #4294967295
 8008702:	e7ea      	b.n	80086da <_strtod_l+0x8ca>
 8008704:	460b      	mov	r3, r1
 8008706:	e7e8      	b.n	80086da <_strtod_l+0x8ca>
 8008708:	ea53 030a 	orrs.w	r3, r3, sl
 800870c:	d088      	beq.n	8008620 <_strtod_l+0x810>
 800870e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008710:	b1db      	cbz	r3, 800874a <_strtod_l+0x93a>
 8008712:	423b      	tst	r3, r7
 8008714:	d0ef      	beq.n	80086f6 <_strtod_l+0x8e6>
 8008716:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008718:	9a04      	ldr	r2, [sp, #16]
 800871a:	4650      	mov	r0, sl
 800871c:	4659      	mov	r1, fp
 800871e:	b1c3      	cbz	r3, 8008752 <_strtod_l+0x942>
 8008720:	f7ff fb58 	bl	8007dd4 <sulp>
 8008724:	4602      	mov	r2, r0
 8008726:	460b      	mov	r3, r1
 8008728:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800872c:	f7f7 fdae 	bl	800028c <__adddf3>
 8008730:	4682      	mov	sl, r0
 8008732:	468b      	mov	fp, r1
 8008734:	e7df      	b.n	80086f6 <_strtod_l+0x8e6>
 8008736:	4013      	ands	r3, r2
 8008738:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800873c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008740:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008744:	f04f 3aff 	mov.w	sl, #4294967295
 8008748:	e7d5      	b.n	80086f6 <_strtod_l+0x8e6>
 800874a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800874c:	ea13 0f0a 	tst.w	r3, sl
 8008750:	e7e0      	b.n	8008714 <_strtod_l+0x904>
 8008752:	f7ff fb3f 	bl	8007dd4 <sulp>
 8008756:	4602      	mov	r2, r0
 8008758:	460b      	mov	r3, r1
 800875a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800875e:	f7f7 fd93 	bl	8000288 <__aeabi_dsub>
 8008762:	2200      	movs	r2, #0
 8008764:	2300      	movs	r3, #0
 8008766:	4682      	mov	sl, r0
 8008768:	468b      	mov	fp, r1
 800876a:	f7f8 f9ad 	bl	8000ac8 <__aeabi_dcmpeq>
 800876e:	2800      	cmp	r0, #0
 8008770:	d0c1      	beq.n	80086f6 <_strtod_l+0x8e6>
 8008772:	e60e      	b.n	8008392 <_strtod_l+0x582>
 8008774:	fffffc02 	.word	0xfffffc02
 8008778:	7ff00000 	.word	0x7ff00000
 800877c:	39500000 	.word	0x39500000
 8008780:	000fffff 	.word	0x000fffff
 8008784:	7fefffff 	.word	0x7fefffff
 8008788:	0800ba20 	.word	0x0800ba20
 800878c:	4631      	mov	r1, r6
 800878e:	4628      	mov	r0, r5
 8008790:	f002 fa3e 	bl	800ac10 <__ratio>
 8008794:	ec59 8b10 	vmov	r8, r9, d0
 8008798:	ee10 0a10 	vmov	r0, s0
 800879c:	2200      	movs	r2, #0
 800879e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80087a2:	4649      	mov	r1, r9
 80087a4:	f7f8 f9a4 	bl	8000af0 <__aeabi_dcmple>
 80087a8:	2800      	cmp	r0, #0
 80087aa:	d07c      	beq.n	80088a6 <_strtod_l+0xa96>
 80087ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d04c      	beq.n	800884c <_strtod_l+0xa3c>
 80087b2:	4b95      	ldr	r3, [pc, #596]	; (8008a08 <_strtod_l+0xbf8>)
 80087b4:	2200      	movs	r2, #0
 80087b6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80087ba:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8008a08 <_strtod_l+0xbf8>
 80087be:	f04f 0800 	mov.w	r8, #0
 80087c2:	4b92      	ldr	r3, [pc, #584]	; (8008a0c <_strtod_l+0xbfc>)
 80087c4:	403b      	ands	r3, r7
 80087c6:	9311      	str	r3, [sp, #68]	; 0x44
 80087c8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80087ca:	4b91      	ldr	r3, [pc, #580]	; (8008a10 <_strtod_l+0xc00>)
 80087cc:	429a      	cmp	r2, r3
 80087ce:	f040 80b2 	bne.w	8008936 <_strtod_l+0xb26>
 80087d2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80087d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80087da:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80087de:	ec4b ab10 	vmov	d0, sl, fp
 80087e2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80087e6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80087ea:	f002 f939 	bl	800aa60 <__ulp>
 80087ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80087f2:	ec53 2b10 	vmov	r2, r3, d0
 80087f6:	f7f7 feff 	bl	80005f8 <__aeabi_dmul>
 80087fa:	4652      	mov	r2, sl
 80087fc:	465b      	mov	r3, fp
 80087fe:	f7f7 fd45 	bl	800028c <__adddf3>
 8008802:	460b      	mov	r3, r1
 8008804:	4981      	ldr	r1, [pc, #516]	; (8008a0c <_strtod_l+0xbfc>)
 8008806:	4a83      	ldr	r2, [pc, #524]	; (8008a14 <_strtod_l+0xc04>)
 8008808:	4019      	ands	r1, r3
 800880a:	4291      	cmp	r1, r2
 800880c:	4682      	mov	sl, r0
 800880e:	d95e      	bls.n	80088ce <_strtod_l+0xabe>
 8008810:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008812:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008816:	4293      	cmp	r3, r2
 8008818:	d103      	bne.n	8008822 <_strtod_l+0xa12>
 800881a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800881c:	3301      	adds	r3, #1
 800881e:	f43f ad43 	beq.w	80082a8 <_strtod_l+0x498>
 8008822:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8008a20 <_strtod_l+0xc10>
 8008826:	f04f 3aff 	mov.w	sl, #4294967295
 800882a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800882c:	4620      	mov	r0, r4
 800882e:	f001 fdeb 	bl	800a408 <_Bfree>
 8008832:	9907      	ldr	r1, [sp, #28]
 8008834:	4620      	mov	r0, r4
 8008836:	f001 fde7 	bl	800a408 <_Bfree>
 800883a:	4631      	mov	r1, r6
 800883c:	4620      	mov	r0, r4
 800883e:	f001 fde3 	bl	800a408 <_Bfree>
 8008842:	4629      	mov	r1, r5
 8008844:	4620      	mov	r0, r4
 8008846:	f001 fddf 	bl	800a408 <_Bfree>
 800884a:	e613      	b.n	8008474 <_strtod_l+0x664>
 800884c:	f1ba 0f00 	cmp.w	sl, #0
 8008850:	d11b      	bne.n	800888a <_strtod_l+0xa7a>
 8008852:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008856:	b9f3      	cbnz	r3, 8008896 <_strtod_l+0xa86>
 8008858:	4b6b      	ldr	r3, [pc, #428]	; (8008a08 <_strtod_l+0xbf8>)
 800885a:	2200      	movs	r2, #0
 800885c:	4640      	mov	r0, r8
 800885e:	4649      	mov	r1, r9
 8008860:	f7f8 f93c 	bl	8000adc <__aeabi_dcmplt>
 8008864:	b9d0      	cbnz	r0, 800889c <_strtod_l+0xa8c>
 8008866:	4640      	mov	r0, r8
 8008868:	4649      	mov	r1, r9
 800886a:	4b6b      	ldr	r3, [pc, #428]	; (8008a18 <_strtod_l+0xc08>)
 800886c:	2200      	movs	r2, #0
 800886e:	f7f7 fec3 	bl	80005f8 <__aeabi_dmul>
 8008872:	4680      	mov	r8, r0
 8008874:	4689      	mov	r9, r1
 8008876:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800887a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800887e:	931b      	str	r3, [sp, #108]	; 0x6c
 8008880:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8008884:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8008888:	e79b      	b.n	80087c2 <_strtod_l+0x9b2>
 800888a:	f1ba 0f01 	cmp.w	sl, #1
 800888e:	d102      	bne.n	8008896 <_strtod_l+0xa86>
 8008890:	2f00      	cmp	r7, #0
 8008892:	f43f ad7e 	beq.w	8008392 <_strtod_l+0x582>
 8008896:	4b61      	ldr	r3, [pc, #388]	; (8008a1c <_strtod_l+0xc0c>)
 8008898:	2200      	movs	r2, #0
 800889a:	e78c      	b.n	80087b6 <_strtod_l+0x9a6>
 800889c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008a18 <_strtod_l+0xc08>
 80088a0:	f04f 0800 	mov.w	r8, #0
 80088a4:	e7e7      	b.n	8008876 <_strtod_l+0xa66>
 80088a6:	4b5c      	ldr	r3, [pc, #368]	; (8008a18 <_strtod_l+0xc08>)
 80088a8:	4640      	mov	r0, r8
 80088aa:	4649      	mov	r1, r9
 80088ac:	2200      	movs	r2, #0
 80088ae:	f7f7 fea3 	bl	80005f8 <__aeabi_dmul>
 80088b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80088b4:	4680      	mov	r8, r0
 80088b6:	4689      	mov	r9, r1
 80088b8:	b933      	cbnz	r3, 80088c8 <_strtod_l+0xab8>
 80088ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80088be:	9012      	str	r0, [sp, #72]	; 0x48
 80088c0:	9313      	str	r3, [sp, #76]	; 0x4c
 80088c2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80088c6:	e7dd      	b.n	8008884 <_strtod_l+0xa74>
 80088c8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 80088cc:	e7f9      	b.n	80088c2 <_strtod_l+0xab2>
 80088ce:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80088d2:	9b04      	ldr	r3, [sp, #16]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d1a8      	bne.n	800882a <_strtod_l+0xa1a>
 80088d8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80088dc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80088de:	0d1b      	lsrs	r3, r3, #20
 80088e0:	051b      	lsls	r3, r3, #20
 80088e2:	429a      	cmp	r2, r3
 80088e4:	d1a1      	bne.n	800882a <_strtod_l+0xa1a>
 80088e6:	4640      	mov	r0, r8
 80088e8:	4649      	mov	r1, r9
 80088ea:	f7f8 f9e5 	bl	8000cb8 <__aeabi_d2lz>
 80088ee:	f7f7 fe55 	bl	800059c <__aeabi_l2d>
 80088f2:	4602      	mov	r2, r0
 80088f4:	460b      	mov	r3, r1
 80088f6:	4640      	mov	r0, r8
 80088f8:	4649      	mov	r1, r9
 80088fa:	f7f7 fcc5 	bl	8000288 <__aeabi_dsub>
 80088fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008900:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008904:	ea43 030a 	orr.w	r3, r3, sl
 8008908:	4313      	orrs	r3, r2
 800890a:	4680      	mov	r8, r0
 800890c:	4689      	mov	r9, r1
 800890e:	d053      	beq.n	80089b8 <_strtod_l+0xba8>
 8008910:	a335      	add	r3, pc, #212	; (adr r3, 80089e8 <_strtod_l+0xbd8>)
 8008912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008916:	f7f8 f8e1 	bl	8000adc <__aeabi_dcmplt>
 800891a:	2800      	cmp	r0, #0
 800891c:	f47f acce 	bne.w	80082bc <_strtod_l+0x4ac>
 8008920:	a333      	add	r3, pc, #204	; (adr r3, 80089f0 <_strtod_l+0xbe0>)
 8008922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008926:	4640      	mov	r0, r8
 8008928:	4649      	mov	r1, r9
 800892a:	f7f8 f8f5 	bl	8000b18 <__aeabi_dcmpgt>
 800892e:	2800      	cmp	r0, #0
 8008930:	f43f af7b 	beq.w	800882a <_strtod_l+0xa1a>
 8008934:	e4c2      	b.n	80082bc <_strtod_l+0x4ac>
 8008936:	9b04      	ldr	r3, [sp, #16]
 8008938:	b333      	cbz	r3, 8008988 <_strtod_l+0xb78>
 800893a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800893c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008940:	d822      	bhi.n	8008988 <_strtod_l+0xb78>
 8008942:	a32d      	add	r3, pc, #180	; (adr r3, 80089f8 <_strtod_l+0xbe8>)
 8008944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008948:	4640      	mov	r0, r8
 800894a:	4649      	mov	r1, r9
 800894c:	f7f8 f8d0 	bl	8000af0 <__aeabi_dcmple>
 8008950:	b1a0      	cbz	r0, 800897c <_strtod_l+0xb6c>
 8008952:	4649      	mov	r1, r9
 8008954:	4640      	mov	r0, r8
 8008956:	f7f8 f927 	bl	8000ba8 <__aeabi_d2uiz>
 800895a:	2801      	cmp	r0, #1
 800895c:	bf38      	it	cc
 800895e:	2001      	movcc	r0, #1
 8008960:	f7f7 fdd0 	bl	8000504 <__aeabi_ui2d>
 8008964:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008966:	4680      	mov	r8, r0
 8008968:	4689      	mov	r9, r1
 800896a:	bb13      	cbnz	r3, 80089b2 <_strtod_l+0xba2>
 800896c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008970:	9014      	str	r0, [sp, #80]	; 0x50
 8008972:	9315      	str	r3, [sp, #84]	; 0x54
 8008974:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008978:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800897c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800897e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008980:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008984:	1a9b      	subs	r3, r3, r2
 8008986:	930d      	str	r3, [sp, #52]	; 0x34
 8008988:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800898c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008990:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008994:	f002 f864 	bl	800aa60 <__ulp>
 8008998:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800899c:	ec53 2b10 	vmov	r2, r3, d0
 80089a0:	f7f7 fe2a 	bl	80005f8 <__aeabi_dmul>
 80089a4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80089a8:	f7f7 fc70 	bl	800028c <__adddf3>
 80089ac:	4682      	mov	sl, r0
 80089ae:	468b      	mov	fp, r1
 80089b0:	e78f      	b.n	80088d2 <_strtod_l+0xac2>
 80089b2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 80089b6:	e7dd      	b.n	8008974 <_strtod_l+0xb64>
 80089b8:	a311      	add	r3, pc, #68	; (adr r3, 8008a00 <_strtod_l+0xbf0>)
 80089ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089be:	f7f8 f88d 	bl	8000adc <__aeabi_dcmplt>
 80089c2:	e7b4      	b.n	800892e <_strtod_l+0xb1e>
 80089c4:	2300      	movs	r3, #0
 80089c6:	930e      	str	r3, [sp, #56]	; 0x38
 80089c8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80089ca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80089cc:	6013      	str	r3, [r2, #0]
 80089ce:	f7ff ba65 	b.w	8007e9c <_strtod_l+0x8c>
 80089d2:	2b65      	cmp	r3, #101	; 0x65
 80089d4:	f43f ab5d 	beq.w	8008092 <_strtod_l+0x282>
 80089d8:	2b45      	cmp	r3, #69	; 0x45
 80089da:	f43f ab5a 	beq.w	8008092 <_strtod_l+0x282>
 80089de:	2201      	movs	r2, #1
 80089e0:	f7ff bb92 	b.w	8008108 <_strtod_l+0x2f8>
 80089e4:	f3af 8000 	nop.w
 80089e8:	94a03595 	.word	0x94a03595
 80089ec:	3fdfffff 	.word	0x3fdfffff
 80089f0:	35afe535 	.word	0x35afe535
 80089f4:	3fe00000 	.word	0x3fe00000
 80089f8:	ffc00000 	.word	0xffc00000
 80089fc:	41dfffff 	.word	0x41dfffff
 8008a00:	94a03595 	.word	0x94a03595
 8008a04:	3fcfffff 	.word	0x3fcfffff
 8008a08:	3ff00000 	.word	0x3ff00000
 8008a0c:	7ff00000 	.word	0x7ff00000
 8008a10:	7fe00000 	.word	0x7fe00000
 8008a14:	7c9fffff 	.word	0x7c9fffff
 8008a18:	3fe00000 	.word	0x3fe00000
 8008a1c:	bff00000 	.word	0xbff00000
 8008a20:	7fefffff 	.word	0x7fefffff

08008a24 <_strtod_r>:
 8008a24:	4b01      	ldr	r3, [pc, #4]	; (8008a2c <_strtod_r+0x8>)
 8008a26:	f7ff b9f3 	b.w	8007e10 <_strtod_l>
 8008a2a:	bf00      	nop
 8008a2c:	20000078 	.word	0x20000078

08008a30 <_strtol_l.isra.0>:
 8008a30:	2b01      	cmp	r3, #1
 8008a32:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a36:	d001      	beq.n	8008a3c <_strtol_l.isra.0+0xc>
 8008a38:	2b24      	cmp	r3, #36	; 0x24
 8008a3a:	d906      	bls.n	8008a4a <_strtol_l.isra.0+0x1a>
 8008a3c:	f7fe fa0c 	bl	8006e58 <__errno>
 8008a40:	2316      	movs	r3, #22
 8008a42:	6003      	str	r3, [r0, #0]
 8008a44:	2000      	movs	r0, #0
 8008a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a4a:	4f3a      	ldr	r7, [pc, #232]	; (8008b34 <_strtol_l.isra.0+0x104>)
 8008a4c:	468e      	mov	lr, r1
 8008a4e:	4676      	mov	r6, lr
 8008a50:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008a54:	5de5      	ldrb	r5, [r4, r7]
 8008a56:	f015 0508 	ands.w	r5, r5, #8
 8008a5a:	d1f8      	bne.n	8008a4e <_strtol_l.isra.0+0x1e>
 8008a5c:	2c2d      	cmp	r4, #45	; 0x2d
 8008a5e:	d134      	bne.n	8008aca <_strtol_l.isra.0+0x9a>
 8008a60:	f89e 4000 	ldrb.w	r4, [lr]
 8008a64:	f04f 0801 	mov.w	r8, #1
 8008a68:	f106 0e02 	add.w	lr, r6, #2
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d05c      	beq.n	8008b2a <_strtol_l.isra.0+0xfa>
 8008a70:	2b10      	cmp	r3, #16
 8008a72:	d10c      	bne.n	8008a8e <_strtol_l.isra.0+0x5e>
 8008a74:	2c30      	cmp	r4, #48	; 0x30
 8008a76:	d10a      	bne.n	8008a8e <_strtol_l.isra.0+0x5e>
 8008a78:	f89e 4000 	ldrb.w	r4, [lr]
 8008a7c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008a80:	2c58      	cmp	r4, #88	; 0x58
 8008a82:	d14d      	bne.n	8008b20 <_strtol_l.isra.0+0xf0>
 8008a84:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8008a88:	2310      	movs	r3, #16
 8008a8a:	f10e 0e02 	add.w	lr, lr, #2
 8008a8e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8008a92:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008a96:	2600      	movs	r6, #0
 8008a98:	fbbc f9f3 	udiv	r9, ip, r3
 8008a9c:	4635      	mov	r5, r6
 8008a9e:	fb03 ca19 	mls	sl, r3, r9, ip
 8008aa2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8008aa6:	2f09      	cmp	r7, #9
 8008aa8:	d818      	bhi.n	8008adc <_strtol_l.isra.0+0xac>
 8008aaa:	463c      	mov	r4, r7
 8008aac:	42a3      	cmp	r3, r4
 8008aae:	dd24      	ble.n	8008afa <_strtol_l.isra.0+0xca>
 8008ab0:	2e00      	cmp	r6, #0
 8008ab2:	db1f      	blt.n	8008af4 <_strtol_l.isra.0+0xc4>
 8008ab4:	45a9      	cmp	r9, r5
 8008ab6:	d31d      	bcc.n	8008af4 <_strtol_l.isra.0+0xc4>
 8008ab8:	d101      	bne.n	8008abe <_strtol_l.isra.0+0x8e>
 8008aba:	45a2      	cmp	sl, r4
 8008abc:	db1a      	blt.n	8008af4 <_strtol_l.isra.0+0xc4>
 8008abe:	fb05 4503 	mla	r5, r5, r3, r4
 8008ac2:	2601      	movs	r6, #1
 8008ac4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008ac8:	e7eb      	b.n	8008aa2 <_strtol_l.isra.0+0x72>
 8008aca:	2c2b      	cmp	r4, #43	; 0x2b
 8008acc:	bf08      	it	eq
 8008ace:	f89e 4000 	ldrbeq.w	r4, [lr]
 8008ad2:	46a8      	mov	r8, r5
 8008ad4:	bf08      	it	eq
 8008ad6:	f106 0e02 	addeq.w	lr, r6, #2
 8008ada:	e7c7      	b.n	8008a6c <_strtol_l.isra.0+0x3c>
 8008adc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8008ae0:	2f19      	cmp	r7, #25
 8008ae2:	d801      	bhi.n	8008ae8 <_strtol_l.isra.0+0xb8>
 8008ae4:	3c37      	subs	r4, #55	; 0x37
 8008ae6:	e7e1      	b.n	8008aac <_strtol_l.isra.0+0x7c>
 8008ae8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008aec:	2f19      	cmp	r7, #25
 8008aee:	d804      	bhi.n	8008afa <_strtol_l.isra.0+0xca>
 8008af0:	3c57      	subs	r4, #87	; 0x57
 8008af2:	e7db      	b.n	8008aac <_strtol_l.isra.0+0x7c>
 8008af4:	f04f 36ff 	mov.w	r6, #4294967295
 8008af8:	e7e4      	b.n	8008ac4 <_strtol_l.isra.0+0x94>
 8008afa:	2e00      	cmp	r6, #0
 8008afc:	da05      	bge.n	8008b0a <_strtol_l.isra.0+0xda>
 8008afe:	2322      	movs	r3, #34	; 0x22
 8008b00:	6003      	str	r3, [r0, #0]
 8008b02:	4665      	mov	r5, ip
 8008b04:	b942      	cbnz	r2, 8008b18 <_strtol_l.isra.0+0xe8>
 8008b06:	4628      	mov	r0, r5
 8008b08:	e79d      	b.n	8008a46 <_strtol_l.isra.0+0x16>
 8008b0a:	f1b8 0f00 	cmp.w	r8, #0
 8008b0e:	d000      	beq.n	8008b12 <_strtol_l.isra.0+0xe2>
 8008b10:	426d      	negs	r5, r5
 8008b12:	2a00      	cmp	r2, #0
 8008b14:	d0f7      	beq.n	8008b06 <_strtol_l.isra.0+0xd6>
 8008b16:	b10e      	cbz	r6, 8008b1c <_strtol_l.isra.0+0xec>
 8008b18:	f10e 31ff 	add.w	r1, lr, #4294967295
 8008b1c:	6011      	str	r1, [r2, #0]
 8008b1e:	e7f2      	b.n	8008b06 <_strtol_l.isra.0+0xd6>
 8008b20:	2430      	movs	r4, #48	; 0x30
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d1b3      	bne.n	8008a8e <_strtol_l.isra.0+0x5e>
 8008b26:	2308      	movs	r3, #8
 8008b28:	e7b1      	b.n	8008a8e <_strtol_l.isra.0+0x5e>
 8008b2a:	2c30      	cmp	r4, #48	; 0x30
 8008b2c:	d0a4      	beq.n	8008a78 <_strtol_l.isra.0+0x48>
 8008b2e:	230a      	movs	r3, #10
 8008b30:	e7ad      	b.n	8008a8e <_strtol_l.isra.0+0x5e>
 8008b32:	bf00      	nop
 8008b34:	0800ba49 	.word	0x0800ba49

08008b38 <_strtol_r>:
 8008b38:	f7ff bf7a 	b.w	8008a30 <_strtol_l.isra.0>

08008b3c <quorem>:
 8008b3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b40:	6903      	ldr	r3, [r0, #16]
 8008b42:	690c      	ldr	r4, [r1, #16]
 8008b44:	42a3      	cmp	r3, r4
 8008b46:	4607      	mov	r7, r0
 8008b48:	f2c0 8081 	blt.w	8008c4e <quorem+0x112>
 8008b4c:	3c01      	subs	r4, #1
 8008b4e:	f101 0814 	add.w	r8, r1, #20
 8008b52:	f100 0514 	add.w	r5, r0, #20
 8008b56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008b5a:	9301      	str	r3, [sp, #4]
 8008b5c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008b60:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008b64:	3301      	adds	r3, #1
 8008b66:	429a      	cmp	r2, r3
 8008b68:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008b6c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008b70:	fbb2 f6f3 	udiv	r6, r2, r3
 8008b74:	d331      	bcc.n	8008bda <quorem+0x9e>
 8008b76:	f04f 0e00 	mov.w	lr, #0
 8008b7a:	4640      	mov	r0, r8
 8008b7c:	46ac      	mov	ip, r5
 8008b7e:	46f2      	mov	sl, lr
 8008b80:	f850 2b04 	ldr.w	r2, [r0], #4
 8008b84:	b293      	uxth	r3, r2
 8008b86:	fb06 e303 	mla	r3, r6, r3, lr
 8008b8a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008b8e:	b29b      	uxth	r3, r3
 8008b90:	ebaa 0303 	sub.w	r3, sl, r3
 8008b94:	0c12      	lsrs	r2, r2, #16
 8008b96:	f8dc a000 	ldr.w	sl, [ip]
 8008b9a:	fb06 e202 	mla	r2, r6, r2, lr
 8008b9e:	fa13 f38a 	uxtah	r3, r3, sl
 8008ba2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008ba6:	fa1f fa82 	uxth.w	sl, r2
 8008baa:	f8dc 2000 	ldr.w	r2, [ip]
 8008bae:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008bb2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008bb6:	b29b      	uxth	r3, r3
 8008bb8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008bbc:	4581      	cmp	r9, r0
 8008bbe:	f84c 3b04 	str.w	r3, [ip], #4
 8008bc2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008bc6:	d2db      	bcs.n	8008b80 <quorem+0x44>
 8008bc8:	f855 300b 	ldr.w	r3, [r5, fp]
 8008bcc:	b92b      	cbnz	r3, 8008bda <quorem+0x9e>
 8008bce:	9b01      	ldr	r3, [sp, #4]
 8008bd0:	3b04      	subs	r3, #4
 8008bd2:	429d      	cmp	r5, r3
 8008bd4:	461a      	mov	r2, r3
 8008bd6:	d32e      	bcc.n	8008c36 <quorem+0xfa>
 8008bd8:	613c      	str	r4, [r7, #16]
 8008bda:	4638      	mov	r0, r7
 8008bdc:	f001 fe9c 	bl	800a918 <__mcmp>
 8008be0:	2800      	cmp	r0, #0
 8008be2:	db24      	blt.n	8008c2e <quorem+0xf2>
 8008be4:	3601      	adds	r6, #1
 8008be6:	4628      	mov	r0, r5
 8008be8:	f04f 0c00 	mov.w	ip, #0
 8008bec:	f858 2b04 	ldr.w	r2, [r8], #4
 8008bf0:	f8d0 e000 	ldr.w	lr, [r0]
 8008bf4:	b293      	uxth	r3, r2
 8008bf6:	ebac 0303 	sub.w	r3, ip, r3
 8008bfa:	0c12      	lsrs	r2, r2, #16
 8008bfc:	fa13 f38e 	uxtah	r3, r3, lr
 8008c00:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008c04:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008c08:	b29b      	uxth	r3, r3
 8008c0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008c0e:	45c1      	cmp	r9, r8
 8008c10:	f840 3b04 	str.w	r3, [r0], #4
 8008c14:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008c18:	d2e8      	bcs.n	8008bec <quorem+0xb0>
 8008c1a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008c1e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008c22:	b922      	cbnz	r2, 8008c2e <quorem+0xf2>
 8008c24:	3b04      	subs	r3, #4
 8008c26:	429d      	cmp	r5, r3
 8008c28:	461a      	mov	r2, r3
 8008c2a:	d30a      	bcc.n	8008c42 <quorem+0x106>
 8008c2c:	613c      	str	r4, [r7, #16]
 8008c2e:	4630      	mov	r0, r6
 8008c30:	b003      	add	sp, #12
 8008c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c36:	6812      	ldr	r2, [r2, #0]
 8008c38:	3b04      	subs	r3, #4
 8008c3a:	2a00      	cmp	r2, #0
 8008c3c:	d1cc      	bne.n	8008bd8 <quorem+0x9c>
 8008c3e:	3c01      	subs	r4, #1
 8008c40:	e7c7      	b.n	8008bd2 <quorem+0x96>
 8008c42:	6812      	ldr	r2, [r2, #0]
 8008c44:	3b04      	subs	r3, #4
 8008c46:	2a00      	cmp	r2, #0
 8008c48:	d1f0      	bne.n	8008c2c <quorem+0xf0>
 8008c4a:	3c01      	subs	r4, #1
 8008c4c:	e7eb      	b.n	8008c26 <quorem+0xea>
 8008c4e:	2000      	movs	r0, #0
 8008c50:	e7ee      	b.n	8008c30 <quorem+0xf4>
 8008c52:	0000      	movs	r0, r0
 8008c54:	0000      	movs	r0, r0
	...

08008c58 <_dtoa_r>:
 8008c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c5c:	ed2d 8b02 	vpush	{d8}
 8008c60:	ec57 6b10 	vmov	r6, r7, d0
 8008c64:	b095      	sub	sp, #84	; 0x54
 8008c66:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008c68:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008c6c:	9105      	str	r1, [sp, #20]
 8008c6e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008c72:	4604      	mov	r4, r0
 8008c74:	9209      	str	r2, [sp, #36]	; 0x24
 8008c76:	930f      	str	r3, [sp, #60]	; 0x3c
 8008c78:	b975      	cbnz	r5, 8008c98 <_dtoa_r+0x40>
 8008c7a:	2010      	movs	r0, #16
 8008c7c:	f001 fb6a 	bl	800a354 <malloc>
 8008c80:	4602      	mov	r2, r0
 8008c82:	6260      	str	r0, [r4, #36]	; 0x24
 8008c84:	b920      	cbnz	r0, 8008c90 <_dtoa_r+0x38>
 8008c86:	4bb2      	ldr	r3, [pc, #712]	; (8008f50 <_dtoa_r+0x2f8>)
 8008c88:	21ea      	movs	r1, #234	; 0xea
 8008c8a:	48b2      	ldr	r0, [pc, #712]	; (8008f54 <_dtoa_r+0x2fc>)
 8008c8c:	f002 fcf6 	bl	800b67c <__assert_func>
 8008c90:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008c94:	6005      	str	r5, [r0, #0]
 8008c96:	60c5      	str	r5, [r0, #12]
 8008c98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c9a:	6819      	ldr	r1, [r3, #0]
 8008c9c:	b151      	cbz	r1, 8008cb4 <_dtoa_r+0x5c>
 8008c9e:	685a      	ldr	r2, [r3, #4]
 8008ca0:	604a      	str	r2, [r1, #4]
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	4093      	lsls	r3, r2
 8008ca6:	608b      	str	r3, [r1, #8]
 8008ca8:	4620      	mov	r0, r4
 8008caa:	f001 fbad 	bl	800a408 <_Bfree>
 8008cae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	601a      	str	r2, [r3, #0]
 8008cb4:	1e3b      	subs	r3, r7, #0
 8008cb6:	bfb9      	ittee	lt
 8008cb8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008cbc:	9303      	strlt	r3, [sp, #12]
 8008cbe:	2300      	movge	r3, #0
 8008cc0:	f8c8 3000 	strge.w	r3, [r8]
 8008cc4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008cc8:	4ba3      	ldr	r3, [pc, #652]	; (8008f58 <_dtoa_r+0x300>)
 8008cca:	bfbc      	itt	lt
 8008ccc:	2201      	movlt	r2, #1
 8008cce:	f8c8 2000 	strlt.w	r2, [r8]
 8008cd2:	ea33 0309 	bics.w	r3, r3, r9
 8008cd6:	d11b      	bne.n	8008d10 <_dtoa_r+0xb8>
 8008cd8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008cda:	f242 730f 	movw	r3, #9999	; 0x270f
 8008cde:	6013      	str	r3, [r2, #0]
 8008ce0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008ce4:	4333      	orrs	r3, r6
 8008ce6:	f000 857a 	beq.w	80097de <_dtoa_r+0xb86>
 8008cea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008cec:	b963      	cbnz	r3, 8008d08 <_dtoa_r+0xb0>
 8008cee:	4b9b      	ldr	r3, [pc, #620]	; (8008f5c <_dtoa_r+0x304>)
 8008cf0:	e024      	b.n	8008d3c <_dtoa_r+0xe4>
 8008cf2:	4b9b      	ldr	r3, [pc, #620]	; (8008f60 <_dtoa_r+0x308>)
 8008cf4:	9300      	str	r3, [sp, #0]
 8008cf6:	3308      	adds	r3, #8
 8008cf8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008cfa:	6013      	str	r3, [r2, #0]
 8008cfc:	9800      	ldr	r0, [sp, #0]
 8008cfe:	b015      	add	sp, #84	; 0x54
 8008d00:	ecbd 8b02 	vpop	{d8}
 8008d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d08:	4b94      	ldr	r3, [pc, #592]	; (8008f5c <_dtoa_r+0x304>)
 8008d0a:	9300      	str	r3, [sp, #0]
 8008d0c:	3303      	adds	r3, #3
 8008d0e:	e7f3      	b.n	8008cf8 <_dtoa_r+0xa0>
 8008d10:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008d14:	2200      	movs	r2, #0
 8008d16:	ec51 0b17 	vmov	r0, r1, d7
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008d20:	f7f7 fed2 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d24:	4680      	mov	r8, r0
 8008d26:	b158      	cbz	r0, 8008d40 <_dtoa_r+0xe8>
 8008d28:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	6013      	str	r3, [r2, #0]
 8008d2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	f000 8551 	beq.w	80097d8 <_dtoa_r+0xb80>
 8008d36:	488b      	ldr	r0, [pc, #556]	; (8008f64 <_dtoa_r+0x30c>)
 8008d38:	6018      	str	r0, [r3, #0]
 8008d3a:	1e43      	subs	r3, r0, #1
 8008d3c:	9300      	str	r3, [sp, #0]
 8008d3e:	e7dd      	b.n	8008cfc <_dtoa_r+0xa4>
 8008d40:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008d44:	aa12      	add	r2, sp, #72	; 0x48
 8008d46:	a913      	add	r1, sp, #76	; 0x4c
 8008d48:	4620      	mov	r0, r4
 8008d4a:	f001 ff05 	bl	800ab58 <__d2b>
 8008d4e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008d52:	4683      	mov	fp, r0
 8008d54:	2d00      	cmp	r5, #0
 8008d56:	d07c      	beq.n	8008e52 <_dtoa_r+0x1fa>
 8008d58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d5a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8008d5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d62:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8008d66:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008d6a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008d6e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008d72:	4b7d      	ldr	r3, [pc, #500]	; (8008f68 <_dtoa_r+0x310>)
 8008d74:	2200      	movs	r2, #0
 8008d76:	4630      	mov	r0, r6
 8008d78:	4639      	mov	r1, r7
 8008d7a:	f7f7 fa85 	bl	8000288 <__aeabi_dsub>
 8008d7e:	a36e      	add	r3, pc, #440	; (adr r3, 8008f38 <_dtoa_r+0x2e0>)
 8008d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d84:	f7f7 fc38 	bl	80005f8 <__aeabi_dmul>
 8008d88:	a36d      	add	r3, pc, #436	; (adr r3, 8008f40 <_dtoa_r+0x2e8>)
 8008d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d8e:	f7f7 fa7d 	bl	800028c <__adddf3>
 8008d92:	4606      	mov	r6, r0
 8008d94:	4628      	mov	r0, r5
 8008d96:	460f      	mov	r7, r1
 8008d98:	f7f7 fbc4 	bl	8000524 <__aeabi_i2d>
 8008d9c:	a36a      	add	r3, pc, #424	; (adr r3, 8008f48 <_dtoa_r+0x2f0>)
 8008d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008da2:	f7f7 fc29 	bl	80005f8 <__aeabi_dmul>
 8008da6:	4602      	mov	r2, r0
 8008da8:	460b      	mov	r3, r1
 8008daa:	4630      	mov	r0, r6
 8008dac:	4639      	mov	r1, r7
 8008dae:	f7f7 fa6d 	bl	800028c <__adddf3>
 8008db2:	4606      	mov	r6, r0
 8008db4:	460f      	mov	r7, r1
 8008db6:	f7f7 fecf 	bl	8000b58 <__aeabi_d2iz>
 8008dba:	2200      	movs	r2, #0
 8008dbc:	4682      	mov	sl, r0
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	4630      	mov	r0, r6
 8008dc2:	4639      	mov	r1, r7
 8008dc4:	f7f7 fe8a 	bl	8000adc <__aeabi_dcmplt>
 8008dc8:	b148      	cbz	r0, 8008dde <_dtoa_r+0x186>
 8008dca:	4650      	mov	r0, sl
 8008dcc:	f7f7 fbaa 	bl	8000524 <__aeabi_i2d>
 8008dd0:	4632      	mov	r2, r6
 8008dd2:	463b      	mov	r3, r7
 8008dd4:	f7f7 fe78 	bl	8000ac8 <__aeabi_dcmpeq>
 8008dd8:	b908      	cbnz	r0, 8008dde <_dtoa_r+0x186>
 8008dda:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008dde:	f1ba 0f16 	cmp.w	sl, #22
 8008de2:	d854      	bhi.n	8008e8e <_dtoa_r+0x236>
 8008de4:	4b61      	ldr	r3, [pc, #388]	; (8008f6c <_dtoa_r+0x314>)
 8008de6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008df2:	f7f7 fe73 	bl	8000adc <__aeabi_dcmplt>
 8008df6:	2800      	cmp	r0, #0
 8008df8:	d04b      	beq.n	8008e92 <_dtoa_r+0x23a>
 8008dfa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008dfe:	2300      	movs	r3, #0
 8008e00:	930e      	str	r3, [sp, #56]	; 0x38
 8008e02:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008e04:	1b5d      	subs	r5, r3, r5
 8008e06:	1e6b      	subs	r3, r5, #1
 8008e08:	9304      	str	r3, [sp, #16]
 8008e0a:	bf43      	ittte	mi
 8008e0c:	2300      	movmi	r3, #0
 8008e0e:	f1c5 0801 	rsbmi	r8, r5, #1
 8008e12:	9304      	strmi	r3, [sp, #16]
 8008e14:	f04f 0800 	movpl.w	r8, #0
 8008e18:	f1ba 0f00 	cmp.w	sl, #0
 8008e1c:	db3b      	blt.n	8008e96 <_dtoa_r+0x23e>
 8008e1e:	9b04      	ldr	r3, [sp, #16]
 8008e20:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8008e24:	4453      	add	r3, sl
 8008e26:	9304      	str	r3, [sp, #16]
 8008e28:	2300      	movs	r3, #0
 8008e2a:	9306      	str	r3, [sp, #24]
 8008e2c:	9b05      	ldr	r3, [sp, #20]
 8008e2e:	2b09      	cmp	r3, #9
 8008e30:	d869      	bhi.n	8008f06 <_dtoa_r+0x2ae>
 8008e32:	2b05      	cmp	r3, #5
 8008e34:	bfc4      	itt	gt
 8008e36:	3b04      	subgt	r3, #4
 8008e38:	9305      	strgt	r3, [sp, #20]
 8008e3a:	9b05      	ldr	r3, [sp, #20]
 8008e3c:	f1a3 0302 	sub.w	r3, r3, #2
 8008e40:	bfcc      	ite	gt
 8008e42:	2500      	movgt	r5, #0
 8008e44:	2501      	movle	r5, #1
 8008e46:	2b03      	cmp	r3, #3
 8008e48:	d869      	bhi.n	8008f1e <_dtoa_r+0x2c6>
 8008e4a:	e8df f003 	tbb	[pc, r3]
 8008e4e:	4e2c      	.short	0x4e2c
 8008e50:	5a4c      	.short	0x5a4c
 8008e52:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8008e56:	441d      	add	r5, r3
 8008e58:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008e5c:	2b20      	cmp	r3, #32
 8008e5e:	bfc1      	itttt	gt
 8008e60:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008e64:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008e68:	fa09 f303 	lslgt.w	r3, r9, r3
 8008e6c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008e70:	bfda      	itte	le
 8008e72:	f1c3 0320 	rsble	r3, r3, #32
 8008e76:	fa06 f003 	lslle.w	r0, r6, r3
 8008e7a:	4318      	orrgt	r0, r3
 8008e7c:	f7f7 fb42 	bl	8000504 <__aeabi_ui2d>
 8008e80:	2301      	movs	r3, #1
 8008e82:	4606      	mov	r6, r0
 8008e84:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008e88:	3d01      	subs	r5, #1
 8008e8a:	9310      	str	r3, [sp, #64]	; 0x40
 8008e8c:	e771      	b.n	8008d72 <_dtoa_r+0x11a>
 8008e8e:	2301      	movs	r3, #1
 8008e90:	e7b6      	b.n	8008e00 <_dtoa_r+0x1a8>
 8008e92:	900e      	str	r0, [sp, #56]	; 0x38
 8008e94:	e7b5      	b.n	8008e02 <_dtoa_r+0x1aa>
 8008e96:	f1ca 0300 	rsb	r3, sl, #0
 8008e9a:	9306      	str	r3, [sp, #24]
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	eba8 080a 	sub.w	r8, r8, sl
 8008ea2:	930d      	str	r3, [sp, #52]	; 0x34
 8008ea4:	e7c2      	b.n	8008e2c <_dtoa_r+0x1d4>
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	9308      	str	r3, [sp, #32]
 8008eaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	dc39      	bgt.n	8008f24 <_dtoa_r+0x2cc>
 8008eb0:	f04f 0901 	mov.w	r9, #1
 8008eb4:	f8cd 9004 	str.w	r9, [sp, #4]
 8008eb8:	464b      	mov	r3, r9
 8008eba:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008ebe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	6042      	str	r2, [r0, #4]
 8008ec4:	2204      	movs	r2, #4
 8008ec6:	f102 0614 	add.w	r6, r2, #20
 8008eca:	429e      	cmp	r6, r3
 8008ecc:	6841      	ldr	r1, [r0, #4]
 8008ece:	d92f      	bls.n	8008f30 <_dtoa_r+0x2d8>
 8008ed0:	4620      	mov	r0, r4
 8008ed2:	f001 fa59 	bl	800a388 <_Balloc>
 8008ed6:	9000      	str	r0, [sp, #0]
 8008ed8:	2800      	cmp	r0, #0
 8008eda:	d14b      	bne.n	8008f74 <_dtoa_r+0x31c>
 8008edc:	4b24      	ldr	r3, [pc, #144]	; (8008f70 <_dtoa_r+0x318>)
 8008ede:	4602      	mov	r2, r0
 8008ee0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008ee4:	e6d1      	b.n	8008c8a <_dtoa_r+0x32>
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	e7de      	b.n	8008ea8 <_dtoa_r+0x250>
 8008eea:	2300      	movs	r3, #0
 8008eec:	9308      	str	r3, [sp, #32]
 8008eee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ef0:	eb0a 0903 	add.w	r9, sl, r3
 8008ef4:	f109 0301 	add.w	r3, r9, #1
 8008ef8:	2b01      	cmp	r3, #1
 8008efa:	9301      	str	r3, [sp, #4]
 8008efc:	bfb8      	it	lt
 8008efe:	2301      	movlt	r3, #1
 8008f00:	e7dd      	b.n	8008ebe <_dtoa_r+0x266>
 8008f02:	2301      	movs	r3, #1
 8008f04:	e7f2      	b.n	8008eec <_dtoa_r+0x294>
 8008f06:	2501      	movs	r5, #1
 8008f08:	2300      	movs	r3, #0
 8008f0a:	9305      	str	r3, [sp, #20]
 8008f0c:	9508      	str	r5, [sp, #32]
 8008f0e:	f04f 39ff 	mov.w	r9, #4294967295
 8008f12:	2200      	movs	r2, #0
 8008f14:	f8cd 9004 	str.w	r9, [sp, #4]
 8008f18:	2312      	movs	r3, #18
 8008f1a:	9209      	str	r2, [sp, #36]	; 0x24
 8008f1c:	e7cf      	b.n	8008ebe <_dtoa_r+0x266>
 8008f1e:	2301      	movs	r3, #1
 8008f20:	9308      	str	r3, [sp, #32]
 8008f22:	e7f4      	b.n	8008f0e <_dtoa_r+0x2b6>
 8008f24:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008f28:	f8cd 9004 	str.w	r9, [sp, #4]
 8008f2c:	464b      	mov	r3, r9
 8008f2e:	e7c6      	b.n	8008ebe <_dtoa_r+0x266>
 8008f30:	3101      	adds	r1, #1
 8008f32:	6041      	str	r1, [r0, #4]
 8008f34:	0052      	lsls	r2, r2, #1
 8008f36:	e7c6      	b.n	8008ec6 <_dtoa_r+0x26e>
 8008f38:	636f4361 	.word	0x636f4361
 8008f3c:	3fd287a7 	.word	0x3fd287a7
 8008f40:	8b60c8b3 	.word	0x8b60c8b3
 8008f44:	3fc68a28 	.word	0x3fc68a28
 8008f48:	509f79fb 	.word	0x509f79fb
 8008f4c:	3fd34413 	.word	0x3fd34413
 8008f50:	0800bb56 	.word	0x0800bb56
 8008f54:	0800bb6d 	.word	0x0800bb6d
 8008f58:	7ff00000 	.word	0x7ff00000
 8008f5c:	0800bb52 	.word	0x0800bb52
 8008f60:	0800bb49 	.word	0x0800bb49
 8008f64:	0800b9cd 	.word	0x0800b9cd
 8008f68:	3ff80000 	.word	0x3ff80000
 8008f6c:	0800bd48 	.word	0x0800bd48
 8008f70:	0800bbcc 	.word	0x0800bbcc
 8008f74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f76:	9a00      	ldr	r2, [sp, #0]
 8008f78:	601a      	str	r2, [r3, #0]
 8008f7a:	9b01      	ldr	r3, [sp, #4]
 8008f7c:	2b0e      	cmp	r3, #14
 8008f7e:	f200 80ad 	bhi.w	80090dc <_dtoa_r+0x484>
 8008f82:	2d00      	cmp	r5, #0
 8008f84:	f000 80aa 	beq.w	80090dc <_dtoa_r+0x484>
 8008f88:	f1ba 0f00 	cmp.w	sl, #0
 8008f8c:	dd36      	ble.n	8008ffc <_dtoa_r+0x3a4>
 8008f8e:	4ac3      	ldr	r2, [pc, #780]	; (800929c <_dtoa_r+0x644>)
 8008f90:	f00a 030f 	and.w	r3, sl, #15
 8008f94:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008f98:	ed93 7b00 	vldr	d7, [r3]
 8008f9c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008fa0:	ea4f 172a 	mov.w	r7, sl, asr #4
 8008fa4:	eeb0 8a47 	vmov.f32	s16, s14
 8008fa8:	eef0 8a67 	vmov.f32	s17, s15
 8008fac:	d016      	beq.n	8008fdc <_dtoa_r+0x384>
 8008fae:	4bbc      	ldr	r3, [pc, #752]	; (80092a0 <_dtoa_r+0x648>)
 8008fb0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008fb4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008fb8:	f7f7 fc48 	bl	800084c <__aeabi_ddiv>
 8008fbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008fc0:	f007 070f 	and.w	r7, r7, #15
 8008fc4:	2503      	movs	r5, #3
 8008fc6:	4eb6      	ldr	r6, [pc, #728]	; (80092a0 <_dtoa_r+0x648>)
 8008fc8:	b957      	cbnz	r7, 8008fe0 <_dtoa_r+0x388>
 8008fca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008fce:	ec53 2b18 	vmov	r2, r3, d8
 8008fd2:	f7f7 fc3b 	bl	800084c <__aeabi_ddiv>
 8008fd6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008fda:	e029      	b.n	8009030 <_dtoa_r+0x3d8>
 8008fdc:	2502      	movs	r5, #2
 8008fde:	e7f2      	b.n	8008fc6 <_dtoa_r+0x36e>
 8008fe0:	07f9      	lsls	r1, r7, #31
 8008fe2:	d508      	bpl.n	8008ff6 <_dtoa_r+0x39e>
 8008fe4:	ec51 0b18 	vmov	r0, r1, d8
 8008fe8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008fec:	f7f7 fb04 	bl	80005f8 <__aeabi_dmul>
 8008ff0:	ec41 0b18 	vmov	d8, r0, r1
 8008ff4:	3501      	adds	r5, #1
 8008ff6:	107f      	asrs	r7, r7, #1
 8008ff8:	3608      	adds	r6, #8
 8008ffa:	e7e5      	b.n	8008fc8 <_dtoa_r+0x370>
 8008ffc:	f000 80a6 	beq.w	800914c <_dtoa_r+0x4f4>
 8009000:	f1ca 0600 	rsb	r6, sl, #0
 8009004:	4ba5      	ldr	r3, [pc, #660]	; (800929c <_dtoa_r+0x644>)
 8009006:	4fa6      	ldr	r7, [pc, #664]	; (80092a0 <_dtoa_r+0x648>)
 8009008:	f006 020f 	and.w	r2, r6, #15
 800900c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009014:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009018:	f7f7 faee 	bl	80005f8 <__aeabi_dmul>
 800901c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009020:	1136      	asrs	r6, r6, #4
 8009022:	2300      	movs	r3, #0
 8009024:	2502      	movs	r5, #2
 8009026:	2e00      	cmp	r6, #0
 8009028:	f040 8085 	bne.w	8009136 <_dtoa_r+0x4de>
 800902c:	2b00      	cmp	r3, #0
 800902e:	d1d2      	bne.n	8008fd6 <_dtoa_r+0x37e>
 8009030:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009032:	2b00      	cmp	r3, #0
 8009034:	f000 808c 	beq.w	8009150 <_dtoa_r+0x4f8>
 8009038:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800903c:	4b99      	ldr	r3, [pc, #612]	; (80092a4 <_dtoa_r+0x64c>)
 800903e:	2200      	movs	r2, #0
 8009040:	4630      	mov	r0, r6
 8009042:	4639      	mov	r1, r7
 8009044:	f7f7 fd4a 	bl	8000adc <__aeabi_dcmplt>
 8009048:	2800      	cmp	r0, #0
 800904a:	f000 8081 	beq.w	8009150 <_dtoa_r+0x4f8>
 800904e:	9b01      	ldr	r3, [sp, #4]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d07d      	beq.n	8009150 <_dtoa_r+0x4f8>
 8009054:	f1b9 0f00 	cmp.w	r9, #0
 8009058:	dd3c      	ble.n	80090d4 <_dtoa_r+0x47c>
 800905a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800905e:	9307      	str	r3, [sp, #28]
 8009060:	2200      	movs	r2, #0
 8009062:	4b91      	ldr	r3, [pc, #580]	; (80092a8 <_dtoa_r+0x650>)
 8009064:	4630      	mov	r0, r6
 8009066:	4639      	mov	r1, r7
 8009068:	f7f7 fac6 	bl	80005f8 <__aeabi_dmul>
 800906c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009070:	3501      	adds	r5, #1
 8009072:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8009076:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800907a:	4628      	mov	r0, r5
 800907c:	f7f7 fa52 	bl	8000524 <__aeabi_i2d>
 8009080:	4632      	mov	r2, r6
 8009082:	463b      	mov	r3, r7
 8009084:	f7f7 fab8 	bl	80005f8 <__aeabi_dmul>
 8009088:	4b88      	ldr	r3, [pc, #544]	; (80092ac <_dtoa_r+0x654>)
 800908a:	2200      	movs	r2, #0
 800908c:	f7f7 f8fe 	bl	800028c <__adddf3>
 8009090:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009094:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009098:	9303      	str	r3, [sp, #12]
 800909a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800909c:	2b00      	cmp	r3, #0
 800909e:	d15c      	bne.n	800915a <_dtoa_r+0x502>
 80090a0:	4b83      	ldr	r3, [pc, #524]	; (80092b0 <_dtoa_r+0x658>)
 80090a2:	2200      	movs	r2, #0
 80090a4:	4630      	mov	r0, r6
 80090a6:	4639      	mov	r1, r7
 80090a8:	f7f7 f8ee 	bl	8000288 <__aeabi_dsub>
 80090ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80090b0:	4606      	mov	r6, r0
 80090b2:	460f      	mov	r7, r1
 80090b4:	f7f7 fd30 	bl	8000b18 <__aeabi_dcmpgt>
 80090b8:	2800      	cmp	r0, #0
 80090ba:	f040 8296 	bne.w	80095ea <_dtoa_r+0x992>
 80090be:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80090c2:	4630      	mov	r0, r6
 80090c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80090c8:	4639      	mov	r1, r7
 80090ca:	f7f7 fd07 	bl	8000adc <__aeabi_dcmplt>
 80090ce:	2800      	cmp	r0, #0
 80090d0:	f040 8288 	bne.w	80095e4 <_dtoa_r+0x98c>
 80090d4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80090d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80090dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80090de:	2b00      	cmp	r3, #0
 80090e0:	f2c0 8158 	blt.w	8009394 <_dtoa_r+0x73c>
 80090e4:	f1ba 0f0e 	cmp.w	sl, #14
 80090e8:	f300 8154 	bgt.w	8009394 <_dtoa_r+0x73c>
 80090ec:	4b6b      	ldr	r3, [pc, #428]	; (800929c <_dtoa_r+0x644>)
 80090ee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80090f2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80090f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	f280 80e3 	bge.w	80092c4 <_dtoa_r+0x66c>
 80090fe:	9b01      	ldr	r3, [sp, #4]
 8009100:	2b00      	cmp	r3, #0
 8009102:	f300 80df 	bgt.w	80092c4 <_dtoa_r+0x66c>
 8009106:	f040 826d 	bne.w	80095e4 <_dtoa_r+0x98c>
 800910a:	4b69      	ldr	r3, [pc, #420]	; (80092b0 <_dtoa_r+0x658>)
 800910c:	2200      	movs	r2, #0
 800910e:	4640      	mov	r0, r8
 8009110:	4649      	mov	r1, r9
 8009112:	f7f7 fa71 	bl	80005f8 <__aeabi_dmul>
 8009116:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800911a:	f7f7 fcf3 	bl	8000b04 <__aeabi_dcmpge>
 800911e:	9e01      	ldr	r6, [sp, #4]
 8009120:	4637      	mov	r7, r6
 8009122:	2800      	cmp	r0, #0
 8009124:	f040 8243 	bne.w	80095ae <_dtoa_r+0x956>
 8009128:	9d00      	ldr	r5, [sp, #0]
 800912a:	2331      	movs	r3, #49	; 0x31
 800912c:	f805 3b01 	strb.w	r3, [r5], #1
 8009130:	f10a 0a01 	add.w	sl, sl, #1
 8009134:	e23f      	b.n	80095b6 <_dtoa_r+0x95e>
 8009136:	07f2      	lsls	r2, r6, #31
 8009138:	d505      	bpl.n	8009146 <_dtoa_r+0x4ee>
 800913a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800913e:	f7f7 fa5b 	bl	80005f8 <__aeabi_dmul>
 8009142:	3501      	adds	r5, #1
 8009144:	2301      	movs	r3, #1
 8009146:	1076      	asrs	r6, r6, #1
 8009148:	3708      	adds	r7, #8
 800914a:	e76c      	b.n	8009026 <_dtoa_r+0x3ce>
 800914c:	2502      	movs	r5, #2
 800914e:	e76f      	b.n	8009030 <_dtoa_r+0x3d8>
 8009150:	9b01      	ldr	r3, [sp, #4]
 8009152:	f8cd a01c 	str.w	sl, [sp, #28]
 8009156:	930c      	str	r3, [sp, #48]	; 0x30
 8009158:	e78d      	b.n	8009076 <_dtoa_r+0x41e>
 800915a:	9900      	ldr	r1, [sp, #0]
 800915c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800915e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009160:	4b4e      	ldr	r3, [pc, #312]	; (800929c <_dtoa_r+0x644>)
 8009162:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009166:	4401      	add	r1, r0
 8009168:	9102      	str	r1, [sp, #8]
 800916a:	9908      	ldr	r1, [sp, #32]
 800916c:	eeb0 8a47 	vmov.f32	s16, s14
 8009170:	eef0 8a67 	vmov.f32	s17, s15
 8009174:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009178:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800917c:	2900      	cmp	r1, #0
 800917e:	d045      	beq.n	800920c <_dtoa_r+0x5b4>
 8009180:	494c      	ldr	r1, [pc, #304]	; (80092b4 <_dtoa_r+0x65c>)
 8009182:	2000      	movs	r0, #0
 8009184:	f7f7 fb62 	bl	800084c <__aeabi_ddiv>
 8009188:	ec53 2b18 	vmov	r2, r3, d8
 800918c:	f7f7 f87c 	bl	8000288 <__aeabi_dsub>
 8009190:	9d00      	ldr	r5, [sp, #0]
 8009192:	ec41 0b18 	vmov	d8, r0, r1
 8009196:	4639      	mov	r1, r7
 8009198:	4630      	mov	r0, r6
 800919a:	f7f7 fcdd 	bl	8000b58 <__aeabi_d2iz>
 800919e:	900c      	str	r0, [sp, #48]	; 0x30
 80091a0:	f7f7 f9c0 	bl	8000524 <__aeabi_i2d>
 80091a4:	4602      	mov	r2, r0
 80091a6:	460b      	mov	r3, r1
 80091a8:	4630      	mov	r0, r6
 80091aa:	4639      	mov	r1, r7
 80091ac:	f7f7 f86c 	bl	8000288 <__aeabi_dsub>
 80091b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80091b2:	3330      	adds	r3, #48	; 0x30
 80091b4:	f805 3b01 	strb.w	r3, [r5], #1
 80091b8:	ec53 2b18 	vmov	r2, r3, d8
 80091bc:	4606      	mov	r6, r0
 80091be:	460f      	mov	r7, r1
 80091c0:	f7f7 fc8c 	bl	8000adc <__aeabi_dcmplt>
 80091c4:	2800      	cmp	r0, #0
 80091c6:	d165      	bne.n	8009294 <_dtoa_r+0x63c>
 80091c8:	4632      	mov	r2, r6
 80091ca:	463b      	mov	r3, r7
 80091cc:	4935      	ldr	r1, [pc, #212]	; (80092a4 <_dtoa_r+0x64c>)
 80091ce:	2000      	movs	r0, #0
 80091d0:	f7f7 f85a 	bl	8000288 <__aeabi_dsub>
 80091d4:	ec53 2b18 	vmov	r2, r3, d8
 80091d8:	f7f7 fc80 	bl	8000adc <__aeabi_dcmplt>
 80091dc:	2800      	cmp	r0, #0
 80091de:	f040 80b9 	bne.w	8009354 <_dtoa_r+0x6fc>
 80091e2:	9b02      	ldr	r3, [sp, #8]
 80091e4:	429d      	cmp	r5, r3
 80091e6:	f43f af75 	beq.w	80090d4 <_dtoa_r+0x47c>
 80091ea:	4b2f      	ldr	r3, [pc, #188]	; (80092a8 <_dtoa_r+0x650>)
 80091ec:	ec51 0b18 	vmov	r0, r1, d8
 80091f0:	2200      	movs	r2, #0
 80091f2:	f7f7 fa01 	bl	80005f8 <__aeabi_dmul>
 80091f6:	4b2c      	ldr	r3, [pc, #176]	; (80092a8 <_dtoa_r+0x650>)
 80091f8:	ec41 0b18 	vmov	d8, r0, r1
 80091fc:	2200      	movs	r2, #0
 80091fe:	4630      	mov	r0, r6
 8009200:	4639      	mov	r1, r7
 8009202:	f7f7 f9f9 	bl	80005f8 <__aeabi_dmul>
 8009206:	4606      	mov	r6, r0
 8009208:	460f      	mov	r7, r1
 800920a:	e7c4      	b.n	8009196 <_dtoa_r+0x53e>
 800920c:	ec51 0b17 	vmov	r0, r1, d7
 8009210:	f7f7 f9f2 	bl	80005f8 <__aeabi_dmul>
 8009214:	9b02      	ldr	r3, [sp, #8]
 8009216:	9d00      	ldr	r5, [sp, #0]
 8009218:	930c      	str	r3, [sp, #48]	; 0x30
 800921a:	ec41 0b18 	vmov	d8, r0, r1
 800921e:	4639      	mov	r1, r7
 8009220:	4630      	mov	r0, r6
 8009222:	f7f7 fc99 	bl	8000b58 <__aeabi_d2iz>
 8009226:	9011      	str	r0, [sp, #68]	; 0x44
 8009228:	f7f7 f97c 	bl	8000524 <__aeabi_i2d>
 800922c:	4602      	mov	r2, r0
 800922e:	460b      	mov	r3, r1
 8009230:	4630      	mov	r0, r6
 8009232:	4639      	mov	r1, r7
 8009234:	f7f7 f828 	bl	8000288 <__aeabi_dsub>
 8009238:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800923a:	3330      	adds	r3, #48	; 0x30
 800923c:	f805 3b01 	strb.w	r3, [r5], #1
 8009240:	9b02      	ldr	r3, [sp, #8]
 8009242:	429d      	cmp	r5, r3
 8009244:	4606      	mov	r6, r0
 8009246:	460f      	mov	r7, r1
 8009248:	f04f 0200 	mov.w	r2, #0
 800924c:	d134      	bne.n	80092b8 <_dtoa_r+0x660>
 800924e:	4b19      	ldr	r3, [pc, #100]	; (80092b4 <_dtoa_r+0x65c>)
 8009250:	ec51 0b18 	vmov	r0, r1, d8
 8009254:	f7f7 f81a 	bl	800028c <__adddf3>
 8009258:	4602      	mov	r2, r0
 800925a:	460b      	mov	r3, r1
 800925c:	4630      	mov	r0, r6
 800925e:	4639      	mov	r1, r7
 8009260:	f7f7 fc5a 	bl	8000b18 <__aeabi_dcmpgt>
 8009264:	2800      	cmp	r0, #0
 8009266:	d175      	bne.n	8009354 <_dtoa_r+0x6fc>
 8009268:	ec53 2b18 	vmov	r2, r3, d8
 800926c:	4911      	ldr	r1, [pc, #68]	; (80092b4 <_dtoa_r+0x65c>)
 800926e:	2000      	movs	r0, #0
 8009270:	f7f7 f80a 	bl	8000288 <__aeabi_dsub>
 8009274:	4602      	mov	r2, r0
 8009276:	460b      	mov	r3, r1
 8009278:	4630      	mov	r0, r6
 800927a:	4639      	mov	r1, r7
 800927c:	f7f7 fc2e 	bl	8000adc <__aeabi_dcmplt>
 8009280:	2800      	cmp	r0, #0
 8009282:	f43f af27 	beq.w	80090d4 <_dtoa_r+0x47c>
 8009286:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009288:	1e6b      	subs	r3, r5, #1
 800928a:	930c      	str	r3, [sp, #48]	; 0x30
 800928c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009290:	2b30      	cmp	r3, #48	; 0x30
 8009292:	d0f8      	beq.n	8009286 <_dtoa_r+0x62e>
 8009294:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009298:	e04a      	b.n	8009330 <_dtoa_r+0x6d8>
 800929a:	bf00      	nop
 800929c:	0800bd48 	.word	0x0800bd48
 80092a0:	0800bd20 	.word	0x0800bd20
 80092a4:	3ff00000 	.word	0x3ff00000
 80092a8:	40240000 	.word	0x40240000
 80092ac:	401c0000 	.word	0x401c0000
 80092b0:	40140000 	.word	0x40140000
 80092b4:	3fe00000 	.word	0x3fe00000
 80092b8:	4baf      	ldr	r3, [pc, #700]	; (8009578 <_dtoa_r+0x920>)
 80092ba:	f7f7 f99d 	bl	80005f8 <__aeabi_dmul>
 80092be:	4606      	mov	r6, r0
 80092c0:	460f      	mov	r7, r1
 80092c2:	e7ac      	b.n	800921e <_dtoa_r+0x5c6>
 80092c4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80092c8:	9d00      	ldr	r5, [sp, #0]
 80092ca:	4642      	mov	r2, r8
 80092cc:	464b      	mov	r3, r9
 80092ce:	4630      	mov	r0, r6
 80092d0:	4639      	mov	r1, r7
 80092d2:	f7f7 fabb 	bl	800084c <__aeabi_ddiv>
 80092d6:	f7f7 fc3f 	bl	8000b58 <__aeabi_d2iz>
 80092da:	9002      	str	r0, [sp, #8]
 80092dc:	f7f7 f922 	bl	8000524 <__aeabi_i2d>
 80092e0:	4642      	mov	r2, r8
 80092e2:	464b      	mov	r3, r9
 80092e4:	f7f7 f988 	bl	80005f8 <__aeabi_dmul>
 80092e8:	4602      	mov	r2, r0
 80092ea:	460b      	mov	r3, r1
 80092ec:	4630      	mov	r0, r6
 80092ee:	4639      	mov	r1, r7
 80092f0:	f7f6 ffca 	bl	8000288 <__aeabi_dsub>
 80092f4:	9e02      	ldr	r6, [sp, #8]
 80092f6:	9f01      	ldr	r7, [sp, #4]
 80092f8:	3630      	adds	r6, #48	; 0x30
 80092fa:	f805 6b01 	strb.w	r6, [r5], #1
 80092fe:	9e00      	ldr	r6, [sp, #0]
 8009300:	1bae      	subs	r6, r5, r6
 8009302:	42b7      	cmp	r7, r6
 8009304:	4602      	mov	r2, r0
 8009306:	460b      	mov	r3, r1
 8009308:	d137      	bne.n	800937a <_dtoa_r+0x722>
 800930a:	f7f6 ffbf 	bl	800028c <__adddf3>
 800930e:	4642      	mov	r2, r8
 8009310:	464b      	mov	r3, r9
 8009312:	4606      	mov	r6, r0
 8009314:	460f      	mov	r7, r1
 8009316:	f7f7 fbff 	bl	8000b18 <__aeabi_dcmpgt>
 800931a:	b9c8      	cbnz	r0, 8009350 <_dtoa_r+0x6f8>
 800931c:	4642      	mov	r2, r8
 800931e:	464b      	mov	r3, r9
 8009320:	4630      	mov	r0, r6
 8009322:	4639      	mov	r1, r7
 8009324:	f7f7 fbd0 	bl	8000ac8 <__aeabi_dcmpeq>
 8009328:	b110      	cbz	r0, 8009330 <_dtoa_r+0x6d8>
 800932a:	9b02      	ldr	r3, [sp, #8]
 800932c:	07d9      	lsls	r1, r3, #31
 800932e:	d40f      	bmi.n	8009350 <_dtoa_r+0x6f8>
 8009330:	4620      	mov	r0, r4
 8009332:	4659      	mov	r1, fp
 8009334:	f001 f868 	bl	800a408 <_Bfree>
 8009338:	2300      	movs	r3, #0
 800933a:	702b      	strb	r3, [r5, #0]
 800933c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800933e:	f10a 0001 	add.w	r0, sl, #1
 8009342:	6018      	str	r0, [r3, #0]
 8009344:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009346:	2b00      	cmp	r3, #0
 8009348:	f43f acd8 	beq.w	8008cfc <_dtoa_r+0xa4>
 800934c:	601d      	str	r5, [r3, #0]
 800934e:	e4d5      	b.n	8008cfc <_dtoa_r+0xa4>
 8009350:	f8cd a01c 	str.w	sl, [sp, #28]
 8009354:	462b      	mov	r3, r5
 8009356:	461d      	mov	r5, r3
 8009358:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800935c:	2a39      	cmp	r2, #57	; 0x39
 800935e:	d108      	bne.n	8009372 <_dtoa_r+0x71a>
 8009360:	9a00      	ldr	r2, [sp, #0]
 8009362:	429a      	cmp	r2, r3
 8009364:	d1f7      	bne.n	8009356 <_dtoa_r+0x6fe>
 8009366:	9a07      	ldr	r2, [sp, #28]
 8009368:	9900      	ldr	r1, [sp, #0]
 800936a:	3201      	adds	r2, #1
 800936c:	9207      	str	r2, [sp, #28]
 800936e:	2230      	movs	r2, #48	; 0x30
 8009370:	700a      	strb	r2, [r1, #0]
 8009372:	781a      	ldrb	r2, [r3, #0]
 8009374:	3201      	adds	r2, #1
 8009376:	701a      	strb	r2, [r3, #0]
 8009378:	e78c      	b.n	8009294 <_dtoa_r+0x63c>
 800937a:	4b7f      	ldr	r3, [pc, #508]	; (8009578 <_dtoa_r+0x920>)
 800937c:	2200      	movs	r2, #0
 800937e:	f7f7 f93b 	bl	80005f8 <__aeabi_dmul>
 8009382:	2200      	movs	r2, #0
 8009384:	2300      	movs	r3, #0
 8009386:	4606      	mov	r6, r0
 8009388:	460f      	mov	r7, r1
 800938a:	f7f7 fb9d 	bl	8000ac8 <__aeabi_dcmpeq>
 800938e:	2800      	cmp	r0, #0
 8009390:	d09b      	beq.n	80092ca <_dtoa_r+0x672>
 8009392:	e7cd      	b.n	8009330 <_dtoa_r+0x6d8>
 8009394:	9a08      	ldr	r2, [sp, #32]
 8009396:	2a00      	cmp	r2, #0
 8009398:	f000 80c4 	beq.w	8009524 <_dtoa_r+0x8cc>
 800939c:	9a05      	ldr	r2, [sp, #20]
 800939e:	2a01      	cmp	r2, #1
 80093a0:	f300 80a8 	bgt.w	80094f4 <_dtoa_r+0x89c>
 80093a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80093a6:	2a00      	cmp	r2, #0
 80093a8:	f000 80a0 	beq.w	80094ec <_dtoa_r+0x894>
 80093ac:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80093b0:	9e06      	ldr	r6, [sp, #24]
 80093b2:	4645      	mov	r5, r8
 80093b4:	9a04      	ldr	r2, [sp, #16]
 80093b6:	2101      	movs	r1, #1
 80093b8:	441a      	add	r2, r3
 80093ba:	4620      	mov	r0, r4
 80093bc:	4498      	add	r8, r3
 80093be:	9204      	str	r2, [sp, #16]
 80093c0:	f001 f928 	bl	800a614 <__i2b>
 80093c4:	4607      	mov	r7, r0
 80093c6:	2d00      	cmp	r5, #0
 80093c8:	dd0b      	ble.n	80093e2 <_dtoa_r+0x78a>
 80093ca:	9b04      	ldr	r3, [sp, #16]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	dd08      	ble.n	80093e2 <_dtoa_r+0x78a>
 80093d0:	42ab      	cmp	r3, r5
 80093d2:	9a04      	ldr	r2, [sp, #16]
 80093d4:	bfa8      	it	ge
 80093d6:	462b      	movge	r3, r5
 80093d8:	eba8 0803 	sub.w	r8, r8, r3
 80093dc:	1aed      	subs	r5, r5, r3
 80093de:	1ad3      	subs	r3, r2, r3
 80093e0:	9304      	str	r3, [sp, #16]
 80093e2:	9b06      	ldr	r3, [sp, #24]
 80093e4:	b1fb      	cbz	r3, 8009426 <_dtoa_r+0x7ce>
 80093e6:	9b08      	ldr	r3, [sp, #32]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	f000 809f 	beq.w	800952c <_dtoa_r+0x8d4>
 80093ee:	2e00      	cmp	r6, #0
 80093f0:	dd11      	ble.n	8009416 <_dtoa_r+0x7be>
 80093f2:	4639      	mov	r1, r7
 80093f4:	4632      	mov	r2, r6
 80093f6:	4620      	mov	r0, r4
 80093f8:	f001 f9c8 	bl	800a78c <__pow5mult>
 80093fc:	465a      	mov	r2, fp
 80093fe:	4601      	mov	r1, r0
 8009400:	4607      	mov	r7, r0
 8009402:	4620      	mov	r0, r4
 8009404:	f001 f91c 	bl	800a640 <__multiply>
 8009408:	4659      	mov	r1, fp
 800940a:	9007      	str	r0, [sp, #28]
 800940c:	4620      	mov	r0, r4
 800940e:	f000 fffb 	bl	800a408 <_Bfree>
 8009412:	9b07      	ldr	r3, [sp, #28]
 8009414:	469b      	mov	fp, r3
 8009416:	9b06      	ldr	r3, [sp, #24]
 8009418:	1b9a      	subs	r2, r3, r6
 800941a:	d004      	beq.n	8009426 <_dtoa_r+0x7ce>
 800941c:	4659      	mov	r1, fp
 800941e:	4620      	mov	r0, r4
 8009420:	f001 f9b4 	bl	800a78c <__pow5mult>
 8009424:	4683      	mov	fp, r0
 8009426:	2101      	movs	r1, #1
 8009428:	4620      	mov	r0, r4
 800942a:	f001 f8f3 	bl	800a614 <__i2b>
 800942e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009430:	2b00      	cmp	r3, #0
 8009432:	4606      	mov	r6, r0
 8009434:	dd7c      	ble.n	8009530 <_dtoa_r+0x8d8>
 8009436:	461a      	mov	r2, r3
 8009438:	4601      	mov	r1, r0
 800943a:	4620      	mov	r0, r4
 800943c:	f001 f9a6 	bl	800a78c <__pow5mult>
 8009440:	9b05      	ldr	r3, [sp, #20]
 8009442:	2b01      	cmp	r3, #1
 8009444:	4606      	mov	r6, r0
 8009446:	dd76      	ble.n	8009536 <_dtoa_r+0x8de>
 8009448:	2300      	movs	r3, #0
 800944a:	9306      	str	r3, [sp, #24]
 800944c:	6933      	ldr	r3, [r6, #16]
 800944e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009452:	6918      	ldr	r0, [r3, #16]
 8009454:	f001 f88e 	bl	800a574 <__hi0bits>
 8009458:	f1c0 0020 	rsb	r0, r0, #32
 800945c:	9b04      	ldr	r3, [sp, #16]
 800945e:	4418      	add	r0, r3
 8009460:	f010 001f 	ands.w	r0, r0, #31
 8009464:	f000 8086 	beq.w	8009574 <_dtoa_r+0x91c>
 8009468:	f1c0 0320 	rsb	r3, r0, #32
 800946c:	2b04      	cmp	r3, #4
 800946e:	dd7f      	ble.n	8009570 <_dtoa_r+0x918>
 8009470:	f1c0 001c 	rsb	r0, r0, #28
 8009474:	9b04      	ldr	r3, [sp, #16]
 8009476:	4403      	add	r3, r0
 8009478:	4480      	add	r8, r0
 800947a:	4405      	add	r5, r0
 800947c:	9304      	str	r3, [sp, #16]
 800947e:	f1b8 0f00 	cmp.w	r8, #0
 8009482:	dd05      	ble.n	8009490 <_dtoa_r+0x838>
 8009484:	4659      	mov	r1, fp
 8009486:	4642      	mov	r2, r8
 8009488:	4620      	mov	r0, r4
 800948a:	f001 f9d9 	bl	800a840 <__lshift>
 800948e:	4683      	mov	fp, r0
 8009490:	9b04      	ldr	r3, [sp, #16]
 8009492:	2b00      	cmp	r3, #0
 8009494:	dd05      	ble.n	80094a2 <_dtoa_r+0x84a>
 8009496:	4631      	mov	r1, r6
 8009498:	461a      	mov	r2, r3
 800949a:	4620      	mov	r0, r4
 800949c:	f001 f9d0 	bl	800a840 <__lshift>
 80094a0:	4606      	mov	r6, r0
 80094a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d069      	beq.n	800957c <_dtoa_r+0x924>
 80094a8:	4631      	mov	r1, r6
 80094aa:	4658      	mov	r0, fp
 80094ac:	f001 fa34 	bl	800a918 <__mcmp>
 80094b0:	2800      	cmp	r0, #0
 80094b2:	da63      	bge.n	800957c <_dtoa_r+0x924>
 80094b4:	2300      	movs	r3, #0
 80094b6:	4659      	mov	r1, fp
 80094b8:	220a      	movs	r2, #10
 80094ba:	4620      	mov	r0, r4
 80094bc:	f000 ffc6 	bl	800a44c <__multadd>
 80094c0:	9b08      	ldr	r3, [sp, #32]
 80094c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80094c6:	4683      	mov	fp, r0
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	f000 818f 	beq.w	80097ec <_dtoa_r+0xb94>
 80094ce:	4639      	mov	r1, r7
 80094d0:	2300      	movs	r3, #0
 80094d2:	220a      	movs	r2, #10
 80094d4:	4620      	mov	r0, r4
 80094d6:	f000 ffb9 	bl	800a44c <__multadd>
 80094da:	f1b9 0f00 	cmp.w	r9, #0
 80094de:	4607      	mov	r7, r0
 80094e0:	f300 808e 	bgt.w	8009600 <_dtoa_r+0x9a8>
 80094e4:	9b05      	ldr	r3, [sp, #20]
 80094e6:	2b02      	cmp	r3, #2
 80094e8:	dc50      	bgt.n	800958c <_dtoa_r+0x934>
 80094ea:	e089      	b.n	8009600 <_dtoa_r+0x9a8>
 80094ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80094ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80094f2:	e75d      	b.n	80093b0 <_dtoa_r+0x758>
 80094f4:	9b01      	ldr	r3, [sp, #4]
 80094f6:	1e5e      	subs	r6, r3, #1
 80094f8:	9b06      	ldr	r3, [sp, #24]
 80094fa:	42b3      	cmp	r3, r6
 80094fc:	bfbf      	itttt	lt
 80094fe:	9b06      	ldrlt	r3, [sp, #24]
 8009500:	9606      	strlt	r6, [sp, #24]
 8009502:	1af2      	sublt	r2, r6, r3
 8009504:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8009506:	bfb6      	itet	lt
 8009508:	189b      	addlt	r3, r3, r2
 800950a:	1b9e      	subge	r6, r3, r6
 800950c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800950e:	9b01      	ldr	r3, [sp, #4]
 8009510:	bfb8      	it	lt
 8009512:	2600      	movlt	r6, #0
 8009514:	2b00      	cmp	r3, #0
 8009516:	bfb5      	itete	lt
 8009518:	eba8 0503 	sublt.w	r5, r8, r3
 800951c:	9b01      	ldrge	r3, [sp, #4]
 800951e:	2300      	movlt	r3, #0
 8009520:	4645      	movge	r5, r8
 8009522:	e747      	b.n	80093b4 <_dtoa_r+0x75c>
 8009524:	9e06      	ldr	r6, [sp, #24]
 8009526:	9f08      	ldr	r7, [sp, #32]
 8009528:	4645      	mov	r5, r8
 800952a:	e74c      	b.n	80093c6 <_dtoa_r+0x76e>
 800952c:	9a06      	ldr	r2, [sp, #24]
 800952e:	e775      	b.n	800941c <_dtoa_r+0x7c4>
 8009530:	9b05      	ldr	r3, [sp, #20]
 8009532:	2b01      	cmp	r3, #1
 8009534:	dc18      	bgt.n	8009568 <_dtoa_r+0x910>
 8009536:	9b02      	ldr	r3, [sp, #8]
 8009538:	b9b3      	cbnz	r3, 8009568 <_dtoa_r+0x910>
 800953a:	9b03      	ldr	r3, [sp, #12]
 800953c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009540:	b9a3      	cbnz	r3, 800956c <_dtoa_r+0x914>
 8009542:	9b03      	ldr	r3, [sp, #12]
 8009544:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009548:	0d1b      	lsrs	r3, r3, #20
 800954a:	051b      	lsls	r3, r3, #20
 800954c:	b12b      	cbz	r3, 800955a <_dtoa_r+0x902>
 800954e:	9b04      	ldr	r3, [sp, #16]
 8009550:	3301      	adds	r3, #1
 8009552:	9304      	str	r3, [sp, #16]
 8009554:	f108 0801 	add.w	r8, r8, #1
 8009558:	2301      	movs	r3, #1
 800955a:	9306      	str	r3, [sp, #24]
 800955c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800955e:	2b00      	cmp	r3, #0
 8009560:	f47f af74 	bne.w	800944c <_dtoa_r+0x7f4>
 8009564:	2001      	movs	r0, #1
 8009566:	e779      	b.n	800945c <_dtoa_r+0x804>
 8009568:	2300      	movs	r3, #0
 800956a:	e7f6      	b.n	800955a <_dtoa_r+0x902>
 800956c:	9b02      	ldr	r3, [sp, #8]
 800956e:	e7f4      	b.n	800955a <_dtoa_r+0x902>
 8009570:	d085      	beq.n	800947e <_dtoa_r+0x826>
 8009572:	4618      	mov	r0, r3
 8009574:	301c      	adds	r0, #28
 8009576:	e77d      	b.n	8009474 <_dtoa_r+0x81c>
 8009578:	40240000 	.word	0x40240000
 800957c:	9b01      	ldr	r3, [sp, #4]
 800957e:	2b00      	cmp	r3, #0
 8009580:	dc38      	bgt.n	80095f4 <_dtoa_r+0x99c>
 8009582:	9b05      	ldr	r3, [sp, #20]
 8009584:	2b02      	cmp	r3, #2
 8009586:	dd35      	ble.n	80095f4 <_dtoa_r+0x99c>
 8009588:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800958c:	f1b9 0f00 	cmp.w	r9, #0
 8009590:	d10d      	bne.n	80095ae <_dtoa_r+0x956>
 8009592:	4631      	mov	r1, r6
 8009594:	464b      	mov	r3, r9
 8009596:	2205      	movs	r2, #5
 8009598:	4620      	mov	r0, r4
 800959a:	f000 ff57 	bl	800a44c <__multadd>
 800959e:	4601      	mov	r1, r0
 80095a0:	4606      	mov	r6, r0
 80095a2:	4658      	mov	r0, fp
 80095a4:	f001 f9b8 	bl	800a918 <__mcmp>
 80095a8:	2800      	cmp	r0, #0
 80095aa:	f73f adbd 	bgt.w	8009128 <_dtoa_r+0x4d0>
 80095ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095b0:	9d00      	ldr	r5, [sp, #0]
 80095b2:	ea6f 0a03 	mvn.w	sl, r3
 80095b6:	f04f 0800 	mov.w	r8, #0
 80095ba:	4631      	mov	r1, r6
 80095bc:	4620      	mov	r0, r4
 80095be:	f000 ff23 	bl	800a408 <_Bfree>
 80095c2:	2f00      	cmp	r7, #0
 80095c4:	f43f aeb4 	beq.w	8009330 <_dtoa_r+0x6d8>
 80095c8:	f1b8 0f00 	cmp.w	r8, #0
 80095cc:	d005      	beq.n	80095da <_dtoa_r+0x982>
 80095ce:	45b8      	cmp	r8, r7
 80095d0:	d003      	beq.n	80095da <_dtoa_r+0x982>
 80095d2:	4641      	mov	r1, r8
 80095d4:	4620      	mov	r0, r4
 80095d6:	f000 ff17 	bl	800a408 <_Bfree>
 80095da:	4639      	mov	r1, r7
 80095dc:	4620      	mov	r0, r4
 80095de:	f000 ff13 	bl	800a408 <_Bfree>
 80095e2:	e6a5      	b.n	8009330 <_dtoa_r+0x6d8>
 80095e4:	2600      	movs	r6, #0
 80095e6:	4637      	mov	r7, r6
 80095e8:	e7e1      	b.n	80095ae <_dtoa_r+0x956>
 80095ea:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80095ec:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80095f0:	4637      	mov	r7, r6
 80095f2:	e599      	b.n	8009128 <_dtoa_r+0x4d0>
 80095f4:	9b08      	ldr	r3, [sp, #32]
 80095f6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	f000 80fd 	beq.w	80097fa <_dtoa_r+0xba2>
 8009600:	2d00      	cmp	r5, #0
 8009602:	dd05      	ble.n	8009610 <_dtoa_r+0x9b8>
 8009604:	4639      	mov	r1, r7
 8009606:	462a      	mov	r2, r5
 8009608:	4620      	mov	r0, r4
 800960a:	f001 f919 	bl	800a840 <__lshift>
 800960e:	4607      	mov	r7, r0
 8009610:	9b06      	ldr	r3, [sp, #24]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d05c      	beq.n	80096d0 <_dtoa_r+0xa78>
 8009616:	6879      	ldr	r1, [r7, #4]
 8009618:	4620      	mov	r0, r4
 800961a:	f000 feb5 	bl	800a388 <_Balloc>
 800961e:	4605      	mov	r5, r0
 8009620:	b928      	cbnz	r0, 800962e <_dtoa_r+0x9d6>
 8009622:	4b80      	ldr	r3, [pc, #512]	; (8009824 <_dtoa_r+0xbcc>)
 8009624:	4602      	mov	r2, r0
 8009626:	f240 21ea 	movw	r1, #746	; 0x2ea
 800962a:	f7ff bb2e 	b.w	8008c8a <_dtoa_r+0x32>
 800962e:	693a      	ldr	r2, [r7, #16]
 8009630:	3202      	adds	r2, #2
 8009632:	0092      	lsls	r2, r2, #2
 8009634:	f107 010c 	add.w	r1, r7, #12
 8009638:	300c      	adds	r0, #12
 800963a:	f7fd fc37 	bl	8006eac <memcpy>
 800963e:	2201      	movs	r2, #1
 8009640:	4629      	mov	r1, r5
 8009642:	4620      	mov	r0, r4
 8009644:	f001 f8fc 	bl	800a840 <__lshift>
 8009648:	9b00      	ldr	r3, [sp, #0]
 800964a:	3301      	adds	r3, #1
 800964c:	9301      	str	r3, [sp, #4]
 800964e:	9b00      	ldr	r3, [sp, #0]
 8009650:	444b      	add	r3, r9
 8009652:	9307      	str	r3, [sp, #28]
 8009654:	9b02      	ldr	r3, [sp, #8]
 8009656:	f003 0301 	and.w	r3, r3, #1
 800965a:	46b8      	mov	r8, r7
 800965c:	9306      	str	r3, [sp, #24]
 800965e:	4607      	mov	r7, r0
 8009660:	9b01      	ldr	r3, [sp, #4]
 8009662:	4631      	mov	r1, r6
 8009664:	3b01      	subs	r3, #1
 8009666:	4658      	mov	r0, fp
 8009668:	9302      	str	r3, [sp, #8]
 800966a:	f7ff fa67 	bl	8008b3c <quorem>
 800966e:	4603      	mov	r3, r0
 8009670:	3330      	adds	r3, #48	; 0x30
 8009672:	9004      	str	r0, [sp, #16]
 8009674:	4641      	mov	r1, r8
 8009676:	4658      	mov	r0, fp
 8009678:	9308      	str	r3, [sp, #32]
 800967a:	f001 f94d 	bl	800a918 <__mcmp>
 800967e:	463a      	mov	r2, r7
 8009680:	4681      	mov	r9, r0
 8009682:	4631      	mov	r1, r6
 8009684:	4620      	mov	r0, r4
 8009686:	f001 f963 	bl	800a950 <__mdiff>
 800968a:	68c2      	ldr	r2, [r0, #12]
 800968c:	9b08      	ldr	r3, [sp, #32]
 800968e:	4605      	mov	r5, r0
 8009690:	bb02      	cbnz	r2, 80096d4 <_dtoa_r+0xa7c>
 8009692:	4601      	mov	r1, r0
 8009694:	4658      	mov	r0, fp
 8009696:	f001 f93f 	bl	800a918 <__mcmp>
 800969a:	9b08      	ldr	r3, [sp, #32]
 800969c:	4602      	mov	r2, r0
 800969e:	4629      	mov	r1, r5
 80096a0:	4620      	mov	r0, r4
 80096a2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80096a6:	f000 feaf 	bl	800a408 <_Bfree>
 80096aa:	9b05      	ldr	r3, [sp, #20]
 80096ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80096ae:	9d01      	ldr	r5, [sp, #4]
 80096b0:	ea43 0102 	orr.w	r1, r3, r2
 80096b4:	9b06      	ldr	r3, [sp, #24]
 80096b6:	430b      	orrs	r3, r1
 80096b8:	9b08      	ldr	r3, [sp, #32]
 80096ba:	d10d      	bne.n	80096d8 <_dtoa_r+0xa80>
 80096bc:	2b39      	cmp	r3, #57	; 0x39
 80096be:	d029      	beq.n	8009714 <_dtoa_r+0xabc>
 80096c0:	f1b9 0f00 	cmp.w	r9, #0
 80096c4:	dd01      	ble.n	80096ca <_dtoa_r+0xa72>
 80096c6:	9b04      	ldr	r3, [sp, #16]
 80096c8:	3331      	adds	r3, #49	; 0x31
 80096ca:	9a02      	ldr	r2, [sp, #8]
 80096cc:	7013      	strb	r3, [r2, #0]
 80096ce:	e774      	b.n	80095ba <_dtoa_r+0x962>
 80096d0:	4638      	mov	r0, r7
 80096d2:	e7b9      	b.n	8009648 <_dtoa_r+0x9f0>
 80096d4:	2201      	movs	r2, #1
 80096d6:	e7e2      	b.n	800969e <_dtoa_r+0xa46>
 80096d8:	f1b9 0f00 	cmp.w	r9, #0
 80096dc:	db06      	blt.n	80096ec <_dtoa_r+0xa94>
 80096de:	9905      	ldr	r1, [sp, #20]
 80096e0:	ea41 0909 	orr.w	r9, r1, r9
 80096e4:	9906      	ldr	r1, [sp, #24]
 80096e6:	ea59 0101 	orrs.w	r1, r9, r1
 80096ea:	d120      	bne.n	800972e <_dtoa_r+0xad6>
 80096ec:	2a00      	cmp	r2, #0
 80096ee:	ddec      	ble.n	80096ca <_dtoa_r+0xa72>
 80096f0:	4659      	mov	r1, fp
 80096f2:	2201      	movs	r2, #1
 80096f4:	4620      	mov	r0, r4
 80096f6:	9301      	str	r3, [sp, #4]
 80096f8:	f001 f8a2 	bl	800a840 <__lshift>
 80096fc:	4631      	mov	r1, r6
 80096fe:	4683      	mov	fp, r0
 8009700:	f001 f90a 	bl	800a918 <__mcmp>
 8009704:	2800      	cmp	r0, #0
 8009706:	9b01      	ldr	r3, [sp, #4]
 8009708:	dc02      	bgt.n	8009710 <_dtoa_r+0xab8>
 800970a:	d1de      	bne.n	80096ca <_dtoa_r+0xa72>
 800970c:	07da      	lsls	r2, r3, #31
 800970e:	d5dc      	bpl.n	80096ca <_dtoa_r+0xa72>
 8009710:	2b39      	cmp	r3, #57	; 0x39
 8009712:	d1d8      	bne.n	80096c6 <_dtoa_r+0xa6e>
 8009714:	9a02      	ldr	r2, [sp, #8]
 8009716:	2339      	movs	r3, #57	; 0x39
 8009718:	7013      	strb	r3, [r2, #0]
 800971a:	462b      	mov	r3, r5
 800971c:	461d      	mov	r5, r3
 800971e:	3b01      	subs	r3, #1
 8009720:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009724:	2a39      	cmp	r2, #57	; 0x39
 8009726:	d050      	beq.n	80097ca <_dtoa_r+0xb72>
 8009728:	3201      	adds	r2, #1
 800972a:	701a      	strb	r2, [r3, #0]
 800972c:	e745      	b.n	80095ba <_dtoa_r+0x962>
 800972e:	2a00      	cmp	r2, #0
 8009730:	dd03      	ble.n	800973a <_dtoa_r+0xae2>
 8009732:	2b39      	cmp	r3, #57	; 0x39
 8009734:	d0ee      	beq.n	8009714 <_dtoa_r+0xabc>
 8009736:	3301      	adds	r3, #1
 8009738:	e7c7      	b.n	80096ca <_dtoa_r+0xa72>
 800973a:	9a01      	ldr	r2, [sp, #4]
 800973c:	9907      	ldr	r1, [sp, #28]
 800973e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009742:	428a      	cmp	r2, r1
 8009744:	d02a      	beq.n	800979c <_dtoa_r+0xb44>
 8009746:	4659      	mov	r1, fp
 8009748:	2300      	movs	r3, #0
 800974a:	220a      	movs	r2, #10
 800974c:	4620      	mov	r0, r4
 800974e:	f000 fe7d 	bl	800a44c <__multadd>
 8009752:	45b8      	cmp	r8, r7
 8009754:	4683      	mov	fp, r0
 8009756:	f04f 0300 	mov.w	r3, #0
 800975a:	f04f 020a 	mov.w	r2, #10
 800975e:	4641      	mov	r1, r8
 8009760:	4620      	mov	r0, r4
 8009762:	d107      	bne.n	8009774 <_dtoa_r+0xb1c>
 8009764:	f000 fe72 	bl	800a44c <__multadd>
 8009768:	4680      	mov	r8, r0
 800976a:	4607      	mov	r7, r0
 800976c:	9b01      	ldr	r3, [sp, #4]
 800976e:	3301      	adds	r3, #1
 8009770:	9301      	str	r3, [sp, #4]
 8009772:	e775      	b.n	8009660 <_dtoa_r+0xa08>
 8009774:	f000 fe6a 	bl	800a44c <__multadd>
 8009778:	4639      	mov	r1, r7
 800977a:	4680      	mov	r8, r0
 800977c:	2300      	movs	r3, #0
 800977e:	220a      	movs	r2, #10
 8009780:	4620      	mov	r0, r4
 8009782:	f000 fe63 	bl	800a44c <__multadd>
 8009786:	4607      	mov	r7, r0
 8009788:	e7f0      	b.n	800976c <_dtoa_r+0xb14>
 800978a:	f1b9 0f00 	cmp.w	r9, #0
 800978e:	9a00      	ldr	r2, [sp, #0]
 8009790:	bfcc      	ite	gt
 8009792:	464d      	movgt	r5, r9
 8009794:	2501      	movle	r5, #1
 8009796:	4415      	add	r5, r2
 8009798:	f04f 0800 	mov.w	r8, #0
 800979c:	4659      	mov	r1, fp
 800979e:	2201      	movs	r2, #1
 80097a0:	4620      	mov	r0, r4
 80097a2:	9301      	str	r3, [sp, #4]
 80097a4:	f001 f84c 	bl	800a840 <__lshift>
 80097a8:	4631      	mov	r1, r6
 80097aa:	4683      	mov	fp, r0
 80097ac:	f001 f8b4 	bl	800a918 <__mcmp>
 80097b0:	2800      	cmp	r0, #0
 80097b2:	dcb2      	bgt.n	800971a <_dtoa_r+0xac2>
 80097b4:	d102      	bne.n	80097bc <_dtoa_r+0xb64>
 80097b6:	9b01      	ldr	r3, [sp, #4]
 80097b8:	07db      	lsls	r3, r3, #31
 80097ba:	d4ae      	bmi.n	800971a <_dtoa_r+0xac2>
 80097bc:	462b      	mov	r3, r5
 80097be:	461d      	mov	r5, r3
 80097c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80097c4:	2a30      	cmp	r2, #48	; 0x30
 80097c6:	d0fa      	beq.n	80097be <_dtoa_r+0xb66>
 80097c8:	e6f7      	b.n	80095ba <_dtoa_r+0x962>
 80097ca:	9a00      	ldr	r2, [sp, #0]
 80097cc:	429a      	cmp	r2, r3
 80097ce:	d1a5      	bne.n	800971c <_dtoa_r+0xac4>
 80097d0:	f10a 0a01 	add.w	sl, sl, #1
 80097d4:	2331      	movs	r3, #49	; 0x31
 80097d6:	e779      	b.n	80096cc <_dtoa_r+0xa74>
 80097d8:	4b13      	ldr	r3, [pc, #76]	; (8009828 <_dtoa_r+0xbd0>)
 80097da:	f7ff baaf 	b.w	8008d3c <_dtoa_r+0xe4>
 80097de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	f47f aa86 	bne.w	8008cf2 <_dtoa_r+0x9a>
 80097e6:	4b11      	ldr	r3, [pc, #68]	; (800982c <_dtoa_r+0xbd4>)
 80097e8:	f7ff baa8 	b.w	8008d3c <_dtoa_r+0xe4>
 80097ec:	f1b9 0f00 	cmp.w	r9, #0
 80097f0:	dc03      	bgt.n	80097fa <_dtoa_r+0xba2>
 80097f2:	9b05      	ldr	r3, [sp, #20]
 80097f4:	2b02      	cmp	r3, #2
 80097f6:	f73f aec9 	bgt.w	800958c <_dtoa_r+0x934>
 80097fa:	9d00      	ldr	r5, [sp, #0]
 80097fc:	4631      	mov	r1, r6
 80097fe:	4658      	mov	r0, fp
 8009800:	f7ff f99c 	bl	8008b3c <quorem>
 8009804:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009808:	f805 3b01 	strb.w	r3, [r5], #1
 800980c:	9a00      	ldr	r2, [sp, #0]
 800980e:	1aaa      	subs	r2, r5, r2
 8009810:	4591      	cmp	r9, r2
 8009812:	ddba      	ble.n	800978a <_dtoa_r+0xb32>
 8009814:	4659      	mov	r1, fp
 8009816:	2300      	movs	r3, #0
 8009818:	220a      	movs	r2, #10
 800981a:	4620      	mov	r0, r4
 800981c:	f000 fe16 	bl	800a44c <__multadd>
 8009820:	4683      	mov	fp, r0
 8009822:	e7eb      	b.n	80097fc <_dtoa_r+0xba4>
 8009824:	0800bbcc 	.word	0x0800bbcc
 8009828:	0800b9cc 	.word	0x0800b9cc
 800982c:	0800bb49 	.word	0x0800bb49

08009830 <__sflush_r>:
 8009830:	898a      	ldrh	r2, [r1, #12]
 8009832:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009836:	4605      	mov	r5, r0
 8009838:	0710      	lsls	r0, r2, #28
 800983a:	460c      	mov	r4, r1
 800983c:	d458      	bmi.n	80098f0 <__sflush_r+0xc0>
 800983e:	684b      	ldr	r3, [r1, #4]
 8009840:	2b00      	cmp	r3, #0
 8009842:	dc05      	bgt.n	8009850 <__sflush_r+0x20>
 8009844:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009846:	2b00      	cmp	r3, #0
 8009848:	dc02      	bgt.n	8009850 <__sflush_r+0x20>
 800984a:	2000      	movs	r0, #0
 800984c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009850:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009852:	2e00      	cmp	r6, #0
 8009854:	d0f9      	beq.n	800984a <__sflush_r+0x1a>
 8009856:	2300      	movs	r3, #0
 8009858:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800985c:	682f      	ldr	r7, [r5, #0]
 800985e:	602b      	str	r3, [r5, #0]
 8009860:	d032      	beq.n	80098c8 <__sflush_r+0x98>
 8009862:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009864:	89a3      	ldrh	r3, [r4, #12]
 8009866:	075a      	lsls	r2, r3, #29
 8009868:	d505      	bpl.n	8009876 <__sflush_r+0x46>
 800986a:	6863      	ldr	r3, [r4, #4]
 800986c:	1ac0      	subs	r0, r0, r3
 800986e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009870:	b10b      	cbz	r3, 8009876 <__sflush_r+0x46>
 8009872:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009874:	1ac0      	subs	r0, r0, r3
 8009876:	2300      	movs	r3, #0
 8009878:	4602      	mov	r2, r0
 800987a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800987c:	6a21      	ldr	r1, [r4, #32]
 800987e:	4628      	mov	r0, r5
 8009880:	47b0      	blx	r6
 8009882:	1c43      	adds	r3, r0, #1
 8009884:	89a3      	ldrh	r3, [r4, #12]
 8009886:	d106      	bne.n	8009896 <__sflush_r+0x66>
 8009888:	6829      	ldr	r1, [r5, #0]
 800988a:	291d      	cmp	r1, #29
 800988c:	d82c      	bhi.n	80098e8 <__sflush_r+0xb8>
 800988e:	4a2a      	ldr	r2, [pc, #168]	; (8009938 <__sflush_r+0x108>)
 8009890:	40ca      	lsrs	r2, r1
 8009892:	07d6      	lsls	r6, r2, #31
 8009894:	d528      	bpl.n	80098e8 <__sflush_r+0xb8>
 8009896:	2200      	movs	r2, #0
 8009898:	6062      	str	r2, [r4, #4]
 800989a:	04d9      	lsls	r1, r3, #19
 800989c:	6922      	ldr	r2, [r4, #16]
 800989e:	6022      	str	r2, [r4, #0]
 80098a0:	d504      	bpl.n	80098ac <__sflush_r+0x7c>
 80098a2:	1c42      	adds	r2, r0, #1
 80098a4:	d101      	bne.n	80098aa <__sflush_r+0x7a>
 80098a6:	682b      	ldr	r3, [r5, #0]
 80098a8:	b903      	cbnz	r3, 80098ac <__sflush_r+0x7c>
 80098aa:	6560      	str	r0, [r4, #84]	; 0x54
 80098ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80098ae:	602f      	str	r7, [r5, #0]
 80098b0:	2900      	cmp	r1, #0
 80098b2:	d0ca      	beq.n	800984a <__sflush_r+0x1a>
 80098b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80098b8:	4299      	cmp	r1, r3
 80098ba:	d002      	beq.n	80098c2 <__sflush_r+0x92>
 80098bc:	4628      	mov	r0, r5
 80098be:	f001 fa2d 	bl	800ad1c <_free_r>
 80098c2:	2000      	movs	r0, #0
 80098c4:	6360      	str	r0, [r4, #52]	; 0x34
 80098c6:	e7c1      	b.n	800984c <__sflush_r+0x1c>
 80098c8:	6a21      	ldr	r1, [r4, #32]
 80098ca:	2301      	movs	r3, #1
 80098cc:	4628      	mov	r0, r5
 80098ce:	47b0      	blx	r6
 80098d0:	1c41      	adds	r1, r0, #1
 80098d2:	d1c7      	bne.n	8009864 <__sflush_r+0x34>
 80098d4:	682b      	ldr	r3, [r5, #0]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d0c4      	beq.n	8009864 <__sflush_r+0x34>
 80098da:	2b1d      	cmp	r3, #29
 80098dc:	d001      	beq.n	80098e2 <__sflush_r+0xb2>
 80098de:	2b16      	cmp	r3, #22
 80098e0:	d101      	bne.n	80098e6 <__sflush_r+0xb6>
 80098e2:	602f      	str	r7, [r5, #0]
 80098e4:	e7b1      	b.n	800984a <__sflush_r+0x1a>
 80098e6:	89a3      	ldrh	r3, [r4, #12]
 80098e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098ec:	81a3      	strh	r3, [r4, #12]
 80098ee:	e7ad      	b.n	800984c <__sflush_r+0x1c>
 80098f0:	690f      	ldr	r7, [r1, #16]
 80098f2:	2f00      	cmp	r7, #0
 80098f4:	d0a9      	beq.n	800984a <__sflush_r+0x1a>
 80098f6:	0793      	lsls	r3, r2, #30
 80098f8:	680e      	ldr	r6, [r1, #0]
 80098fa:	bf08      	it	eq
 80098fc:	694b      	ldreq	r3, [r1, #20]
 80098fe:	600f      	str	r7, [r1, #0]
 8009900:	bf18      	it	ne
 8009902:	2300      	movne	r3, #0
 8009904:	eba6 0807 	sub.w	r8, r6, r7
 8009908:	608b      	str	r3, [r1, #8]
 800990a:	f1b8 0f00 	cmp.w	r8, #0
 800990e:	dd9c      	ble.n	800984a <__sflush_r+0x1a>
 8009910:	6a21      	ldr	r1, [r4, #32]
 8009912:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009914:	4643      	mov	r3, r8
 8009916:	463a      	mov	r2, r7
 8009918:	4628      	mov	r0, r5
 800991a:	47b0      	blx	r6
 800991c:	2800      	cmp	r0, #0
 800991e:	dc06      	bgt.n	800992e <__sflush_r+0xfe>
 8009920:	89a3      	ldrh	r3, [r4, #12]
 8009922:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009926:	81a3      	strh	r3, [r4, #12]
 8009928:	f04f 30ff 	mov.w	r0, #4294967295
 800992c:	e78e      	b.n	800984c <__sflush_r+0x1c>
 800992e:	4407      	add	r7, r0
 8009930:	eba8 0800 	sub.w	r8, r8, r0
 8009934:	e7e9      	b.n	800990a <__sflush_r+0xda>
 8009936:	bf00      	nop
 8009938:	20400001 	.word	0x20400001

0800993c <_fflush_r>:
 800993c:	b538      	push	{r3, r4, r5, lr}
 800993e:	690b      	ldr	r3, [r1, #16]
 8009940:	4605      	mov	r5, r0
 8009942:	460c      	mov	r4, r1
 8009944:	b913      	cbnz	r3, 800994c <_fflush_r+0x10>
 8009946:	2500      	movs	r5, #0
 8009948:	4628      	mov	r0, r5
 800994a:	bd38      	pop	{r3, r4, r5, pc}
 800994c:	b118      	cbz	r0, 8009956 <_fflush_r+0x1a>
 800994e:	6983      	ldr	r3, [r0, #24]
 8009950:	b90b      	cbnz	r3, 8009956 <_fflush_r+0x1a>
 8009952:	f000 f887 	bl	8009a64 <__sinit>
 8009956:	4b14      	ldr	r3, [pc, #80]	; (80099a8 <_fflush_r+0x6c>)
 8009958:	429c      	cmp	r4, r3
 800995a:	d11b      	bne.n	8009994 <_fflush_r+0x58>
 800995c:	686c      	ldr	r4, [r5, #4]
 800995e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d0ef      	beq.n	8009946 <_fflush_r+0xa>
 8009966:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009968:	07d0      	lsls	r0, r2, #31
 800996a:	d404      	bmi.n	8009976 <_fflush_r+0x3a>
 800996c:	0599      	lsls	r1, r3, #22
 800996e:	d402      	bmi.n	8009976 <_fflush_r+0x3a>
 8009970:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009972:	f000 fc88 	bl	800a286 <__retarget_lock_acquire_recursive>
 8009976:	4628      	mov	r0, r5
 8009978:	4621      	mov	r1, r4
 800997a:	f7ff ff59 	bl	8009830 <__sflush_r>
 800997e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009980:	07da      	lsls	r2, r3, #31
 8009982:	4605      	mov	r5, r0
 8009984:	d4e0      	bmi.n	8009948 <_fflush_r+0xc>
 8009986:	89a3      	ldrh	r3, [r4, #12]
 8009988:	059b      	lsls	r3, r3, #22
 800998a:	d4dd      	bmi.n	8009948 <_fflush_r+0xc>
 800998c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800998e:	f000 fc7b 	bl	800a288 <__retarget_lock_release_recursive>
 8009992:	e7d9      	b.n	8009948 <_fflush_r+0xc>
 8009994:	4b05      	ldr	r3, [pc, #20]	; (80099ac <_fflush_r+0x70>)
 8009996:	429c      	cmp	r4, r3
 8009998:	d101      	bne.n	800999e <_fflush_r+0x62>
 800999a:	68ac      	ldr	r4, [r5, #8]
 800999c:	e7df      	b.n	800995e <_fflush_r+0x22>
 800999e:	4b04      	ldr	r3, [pc, #16]	; (80099b0 <_fflush_r+0x74>)
 80099a0:	429c      	cmp	r4, r3
 80099a2:	bf08      	it	eq
 80099a4:	68ec      	ldreq	r4, [r5, #12]
 80099a6:	e7da      	b.n	800995e <_fflush_r+0x22>
 80099a8:	0800bc00 	.word	0x0800bc00
 80099ac:	0800bc20 	.word	0x0800bc20
 80099b0:	0800bbe0 	.word	0x0800bbe0

080099b4 <std>:
 80099b4:	2300      	movs	r3, #0
 80099b6:	b510      	push	{r4, lr}
 80099b8:	4604      	mov	r4, r0
 80099ba:	e9c0 3300 	strd	r3, r3, [r0]
 80099be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80099c2:	6083      	str	r3, [r0, #8]
 80099c4:	8181      	strh	r1, [r0, #12]
 80099c6:	6643      	str	r3, [r0, #100]	; 0x64
 80099c8:	81c2      	strh	r2, [r0, #14]
 80099ca:	6183      	str	r3, [r0, #24]
 80099cc:	4619      	mov	r1, r3
 80099ce:	2208      	movs	r2, #8
 80099d0:	305c      	adds	r0, #92	; 0x5c
 80099d2:	f7fd fa79 	bl	8006ec8 <memset>
 80099d6:	4b05      	ldr	r3, [pc, #20]	; (80099ec <std+0x38>)
 80099d8:	6263      	str	r3, [r4, #36]	; 0x24
 80099da:	4b05      	ldr	r3, [pc, #20]	; (80099f0 <std+0x3c>)
 80099dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80099de:	4b05      	ldr	r3, [pc, #20]	; (80099f4 <std+0x40>)
 80099e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80099e2:	4b05      	ldr	r3, [pc, #20]	; (80099f8 <std+0x44>)
 80099e4:	6224      	str	r4, [r4, #32]
 80099e6:	6323      	str	r3, [r4, #48]	; 0x30
 80099e8:	bd10      	pop	{r4, pc}
 80099ea:	bf00      	nop
 80099ec:	0800b411 	.word	0x0800b411
 80099f0:	0800b433 	.word	0x0800b433
 80099f4:	0800b46b 	.word	0x0800b46b
 80099f8:	0800b48f 	.word	0x0800b48f

080099fc <_cleanup_r>:
 80099fc:	4901      	ldr	r1, [pc, #4]	; (8009a04 <_cleanup_r+0x8>)
 80099fe:	f000 b8af 	b.w	8009b60 <_fwalk_reent>
 8009a02:	bf00      	nop
 8009a04:	0800993d 	.word	0x0800993d

08009a08 <__sfmoreglue>:
 8009a08:	b570      	push	{r4, r5, r6, lr}
 8009a0a:	1e4a      	subs	r2, r1, #1
 8009a0c:	2568      	movs	r5, #104	; 0x68
 8009a0e:	4355      	muls	r5, r2
 8009a10:	460e      	mov	r6, r1
 8009a12:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009a16:	f001 f9d1 	bl	800adbc <_malloc_r>
 8009a1a:	4604      	mov	r4, r0
 8009a1c:	b140      	cbz	r0, 8009a30 <__sfmoreglue+0x28>
 8009a1e:	2100      	movs	r1, #0
 8009a20:	e9c0 1600 	strd	r1, r6, [r0]
 8009a24:	300c      	adds	r0, #12
 8009a26:	60a0      	str	r0, [r4, #8]
 8009a28:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009a2c:	f7fd fa4c 	bl	8006ec8 <memset>
 8009a30:	4620      	mov	r0, r4
 8009a32:	bd70      	pop	{r4, r5, r6, pc}

08009a34 <__sfp_lock_acquire>:
 8009a34:	4801      	ldr	r0, [pc, #4]	; (8009a3c <__sfp_lock_acquire+0x8>)
 8009a36:	f000 bc26 	b.w	800a286 <__retarget_lock_acquire_recursive>
 8009a3a:	bf00      	nop
 8009a3c:	20002d9c 	.word	0x20002d9c

08009a40 <__sfp_lock_release>:
 8009a40:	4801      	ldr	r0, [pc, #4]	; (8009a48 <__sfp_lock_release+0x8>)
 8009a42:	f000 bc21 	b.w	800a288 <__retarget_lock_release_recursive>
 8009a46:	bf00      	nop
 8009a48:	20002d9c 	.word	0x20002d9c

08009a4c <__sinit_lock_acquire>:
 8009a4c:	4801      	ldr	r0, [pc, #4]	; (8009a54 <__sinit_lock_acquire+0x8>)
 8009a4e:	f000 bc1a 	b.w	800a286 <__retarget_lock_acquire_recursive>
 8009a52:	bf00      	nop
 8009a54:	20002d97 	.word	0x20002d97

08009a58 <__sinit_lock_release>:
 8009a58:	4801      	ldr	r0, [pc, #4]	; (8009a60 <__sinit_lock_release+0x8>)
 8009a5a:	f000 bc15 	b.w	800a288 <__retarget_lock_release_recursive>
 8009a5e:	bf00      	nop
 8009a60:	20002d97 	.word	0x20002d97

08009a64 <__sinit>:
 8009a64:	b510      	push	{r4, lr}
 8009a66:	4604      	mov	r4, r0
 8009a68:	f7ff fff0 	bl	8009a4c <__sinit_lock_acquire>
 8009a6c:	69a3      	ldr	r3, [r4, #24]
 8009a6e:	b11b      	cbz	r3, 8009a78 <__sinit+0x14>
 8009a70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a74:	f7ff bff0 	b.w	8009a58 <__sinit_lock_release>
 8009a78:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009a7c:	6523      	str	r3, [r4, #80]	; 0x50
 8009a7e:	4b13      	ldr	r3, [pc, #76]	; (8009acc <__sinit+0x68>)
 8009a80:	4a13      	ldr	r2, [pc, #76]	; (8009ad0 <__sinit+0x6c>)
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	62a2      	str	r2, [r4, #40]	; 0x28
 8009a86:	42a3      	cmp	r3, r4
 8009a88:	bf04      	itt	eq
 8009a8a:	2301      	moveq	r3, #1
 8009a8c:	61a3      	streq	r3, [r4, #24]
 8009a8e:	4620      	mov	r0, r4
 8009a90:	f000 f820 	bl	8009ad4 <__sfp>
 8009a94:	6060      	str	r0, [r4, #4]
 8009a96:	4620      	mov	r0, r4
 8009a98:	f000 f81c 	bl	8009ad4 <__sfp>
 8009a9c:	60a0      	str	r0, [r4, #8]
 8009a9e:	4620      	mov	r0, r4
 8009aa0:	f000 f818 	bl	8009ad4 <__sfp>
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	60e0      	str	r0, [r4, #12]
 8009aa8:	2104      	movs	r1, #4
 8009aaa:	6860      	ldr	r0, [r4, #4]
 8009aac:	f7ff ff82 	bl	80099b4 <std>
 8009ab0:	68a0      	ldr	r0, [r4, #8]
 8009ab2:	2201      	movs	r2, #1
 8009ab4:	2109      	movs	r1, #9
 8009ab6:	f7ff ff7d 	bl	80099b4 <std>
 8009aba:	68e0      	ldr	r0, [r4, #12]
 8009abc:	2202      	movs	r2, #2
 8009abe:	2112      	movs	r1, #18
 8009ac0:	f7ff ff78 	bl	80099b4 <std>
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	61a3      	str	r3, [r4, #24]
 8009ac8:	e7d2      	b.n	8009a70 <__sinit+0xc>
 8009aca:	bf00      	nop
 8009acc:	0800b9b8 	.word	0x0800b9b8
 8009ad0:	080099fd 	.word	0x080099fd

08009ad4 <__sfp>:
 8009ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ad6:	4607      	mov	r7, r0
 8009ad8:	f7ff ffac 	bl	8009a34 <__sfp_lock_acquire>
 8009adc:	4b1e      	ldr	r3, [pc, #120]	; (8009b58 <__sfp+0x84>)
 8009ade:	681e      	ldr	r6, [r3, #0]
 8009ae0:	69b3      	ldr	r3, [r6, #24]
 8009ae2:	b913      	cbnz	r3, 8009aea <__sfp+0x16>
 8009ae4:	4630      	mov	r0, r6
 8009ae6:	f7ff ffbd 	bl	8009a64 <__sinit>
 8009aea:	3648      	adds	r6, #72	; 0x48
 8009aec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009af0:	3b01      	subs	r3, #1
 8009af2:	d503      	bpl.n	8009afc <__sfp+0x28>
 8009af4:	6833      	ldr	r3, [r6, #0]
 8009af6:	b30b      	cbz	r3, 8009b3c <__sfp+0x68>
 8009af8:	6836      	ldr	r6, [r6, #0]
 8009afa:	e7f7      	b.n	8009aec <__sfp+0x18>
 8009afc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009b00:	b9d5      	cbnz	r5, 8009b38 <__sfp+0x64>
 8009b02:	4b16      	ldr	r3, [pc, #88]	; (8009b5c <__sfp+0x88>)
 8009b04:	60e3      	str	r3, [r4, #12]
 8009b06:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009b0a:	6665      	str	r5, [r4, #100]	; 0x64
 8009b0c:	f000 fbba 	bl	800a284 <__retarget_lock_init_recursive>
 8009b10:	f7ff ff96 	bl	8009a40 <__sfp_lock_release>
 8009b14:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009b18:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009b1c:	6025      	str	r5, [r4, #0]
 8009b1e:	61a5      	str	r5, [r4, #24]
 8009b20:	2208      	movs	r2, #8
 8009b22:	4629      	mov	r1, r5
 8009b24:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009b28:	f7fd f9ce 	bl	8006ec8 <memset>
 8009b2c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009b30:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009b34:	4620      	mov	r0, r4
 8009b36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b38:	3468      	adds	r4, #104	; 0x68
 8009b3a:	e7d9      	b.n	8009af0 <__sfp+0x1c>
 8009b3c:	2104      	movs	r1, #4
 8009b3e:	4638      	mov	r0, r7
 8009b40:	f7ff ff62 	bl	8009a08 <__sfmoreglue>
 8009b44:	4604      	mov	r4, r0
 8009b46:	6030      	str	r0, [r6, #0]
 8009b48:	2800      	cmp	r0, #0
 8009b4a:	d1d5      	bne.n	8009af8 <__sfp+0x24>
 8009b4c:	f7ff ff78 	bl	8009a40 <__sfp_lock_release>
 8009b50:	230c      	movs	r3, #12
 8009b52:	603b      	str	r3, [r7, #0]
 8009b54:	e7ee      	b.n	8009b34 <__sfp+0x60>
 8009b56:	bf00      	nop
 8009b58:	0800b9b8 	.word	0x0800b9b8
 8009b5c:	ffff0001 	.word	0xffff0001

08009b60 <_fwalk_reent>:
 8009b60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b64:	4606      	mov	r6, r0
 8009b66:	4688      	mov	r8, r1
 8009b68:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009b6c:	2700      	movs	r7, #0
 8009b6e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009b72:	f1b9 0901 	subs.w	r9, r9, #1
 8009b76:	d505      	bpl.n	8009b84 <_fwalk_reent+0x24>
 8009b78:	6824      	ldr	r4, [r4, #0]
 8009b7a:	2c00      	cmp	r4, #0
 8009b7c:	d1f7      	bne.n	8009b6e <_fwalk_reent+0xe>
 8009b7e:	4638      	mov	r0, r7
 8009b80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b84:	89ab      	ldrh	r3, [r5, #12]
 8009b86:	2b01      	cmp	r3, #1
 8009b88:	d907      	bls.n	8009b9a <_fwalk_reent+0x3a>
 8009b8a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009b8e:	3301      	adds	r3, #1
 8009b90:	d003      	beq.n	8009b9a <_fwalk_reent+0x3a>
 8009b92:	4629      	mov	r1, r5
 8009b94:	4630      	mov	r0, r6
 8009b96:	47c0      	blx	r8
 8009b98:	4307      	orrs	r7, r0
 8009b9a:	3568      	adds	r5, #104	; 0x68
 8009b9c:	e7e9      	b.n	8009b72 <_fwalk_reent+0x12>

08009b9e <rshift>:
 8009b9e:	6903      	ldr	r3, [r0, #16]
 8009ba0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009ba4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009ba8:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009bac:	f100 0414 	add.w	r4, r0, #20
 8009bb0:	dd45      	ble.n	8009c3e <rshift+0xa0>
 8009bb2:	f011 011f 	ands.w	r1, r1, #31
 8009bb6:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009bba:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009bbe:	d10c      	bne.n	8009bda <rshift+0x3c>
 8009bc0:	f100 0710 	add.w	r7, r0, #16
 8009bc4:	4629      	mov	r1, r5
 8009bc6:	42b1      	cmp	r1, r6
 8009bc8:	d334      	bcc.n	8009c34 <rshift+0x96>
 8009bca:	1a9b      	subs	r3, r3, r2
 8009bcc:	009b      	lsls	r3, r3, #2
 8009bce:	1eea      	subs	r2, r5, #3
 8009bd0:	4296      	cmp	r6, r2
 8009bd2:	bf38      	it	cc
 8009bd4:	2300      	movcc	r3, #0
 8009bd6:	4423      	add	r3, r4
 8009bd8:	e015      	b.n	8009c06 <rshift+0x68>
 8009bda:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009bde:	f1c1 0820 	rsb	r8, r1, #32
 8009be2:	40cf      	lsrs	r7, r1
 8009be4:	f105 0e04 	add.w	lr, r5, #4
 8009be8:	46a1      	mov	r9, r4
 8009bea:	4576      	cmp	r6, lr
 8009bec:	46f4      	mov	ip, lr
 8009bee:	d815      	bhi.n	8009c1c <rshift+0x7e>
 8009bf0:	1a9b      	subs	r3, r3, r2
 8009bf2:	009a      	lsls	r2, r3, #2
 8009bf4:	3a04      	subs	r2, #4
 8009bf6:	3501      	adds	r5, #1
 8009bf8:	42ae      	cmp	r6, r5
 8009bfa:	bf38      	it	cc
 8009bfc:	2200      	movcc	r2, #0
 8009bfe:	18a3      	adds	r3, r4, r2
 8009c00:	50a7      	str	r7, [r4, r2]
 8009c02:	b107      	cbz	r7, 8009c06 <rshift+0x68>
 8009c04:	3304      	adds	r3, #4
 8009c06:	1b1a      	subs	r2, r3, r4
 8009c08:	42a3      	cmp	r3, r4
 8009c0a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009c0e:	bf08      	it	eq
 8009c10:	2300      	moveq	r3, #0
 8009c12:	6102      	str	r2, [r0, #16]
 8009c14:	bf08      	it	eq
 8009c16:	6143      	streq	r3, [r0, #20]
 8009c18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c1c:	f8dc c000 	ldr.w	ip, [ip]
 8009c20:	fa0c fc08 	lsl.w	ip, ip, r8
 8009c24:	ea4c 0707 	orr.w	r7, ip, r7
 8009c28:	f849 7b04 	str.w	r7, [r9], #4
 8009c2c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009c30:	40cf      	lsrs	r7, r1
 8009c32:	e7da      	b.n	8009bea <rshift+0x4c>
 8009c34:	f851 cb04 	ldr.w	ip, [r1], #4
 8009c38:	f847 cf04 	str.w	ip, [r7, #4]!
 8009c3c:	e7c3      	b.n	8009bc6 <rshift+0x28>
 8009c3e:	4623      	mov	r3, r4
 8009c40:	e7e1      	b.n	8009c06 <rshift+0x68>

08009c42 <__hexdig_fun>:
 8009c42:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009c46:	2b09      	cmp	r3, #9
 8009c48:	d802      	bhi.n	8009c50 <__hexdig_fun+0xe>
 8009c4a:	3820      	subs	r0, #32
 8009c4c:	b2c0      	uxtb	r0, r0
 8009c4e:	4770      	bx	lr
 8009c50:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009c54:	2b05      	cmp	r3, #5
 8009c56:	d801      	bhi.n	8009c5c <__hexdig_fun+0x1a>
 8009c58:	3847      	subs	r0, #71	; 0x47
 8009c5a:	e7f7      	b.n	8009c4c <__hexdig_fun+0xa>
 8009c5c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009c60:	2b05      	cmp	r3, #5
 8009c62:	d801      	bhi.n	8009c68 <__hexdig_fun+0x26>
 8009c64:	3827      	subs	r0, #39	; 0x27
 8009c66:	e7f1      	b.n	8009c4c <__hexdig_fun+0xa>
 8009c68:	2000      	movs	r0, #0
 8009c6a:	4770      	bx	lr

08009c6c <__gethex>:
 8009c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c70:	ed2d 8b02 	vpush	{d8}
 8009c74:	b089      	sub	sp, #36	; 0x24
 8009c76:	ee08 0a10 	vmov	s16, r0
 8009c7a:	9304      	str	r3, [sp, #16]
 8009c7c:	4bbc      	ldr	r3, [pc, #752]	; (8009f70 <__gethex+0x304>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	9301      	str	r3, [sp, #4]
 8009c82:	4618      	mov	r0, r3
 8009c84:	468b      	mov	fp, r1
 8009c86:	4690      	mov	r8, r2
 8009c88:	f7f6 faa2 	bl	80001d0 <strlen>
 8009c8c:	9b01      	ldr	r3, [sp, #4]
 8009c8e:	f8db 2000 	ldr.w	r2, [fp]
 8009c92:	4403      	add	r3, r0
 8009c94:	4682      	mov	sl, r0
 8009c96:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009c9a:	9305      	str	r3, [sp, #20]
 8009c9c:	1c93      	adds	r3, r2, #2
 8009c9e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009ca2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009ca6:	32fe      	adds	r2, #254	; 0xfe
 8009ca8:	18d1      	adds	r1, r2, r3
 8009caa:	461f      	mov	r7, r3
 8009cac:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009cb0:	9100      	str	r1, [sp, #0]
 8009cb2:	2830      	cmp	r0, #48	; 0x30
 8009cb4:	d0f8      	beq.n	8009ca8 <__gethex+0x3c>
 8009cb6:	f7ff ffc4 	bl	8009c42 <__hexdig_fun>
 8009cba:	4604      	mov	r4, r0
 8009cbc:	2800      	cmp	r0, #0
 8009cbe:	d13a      	bne.n	8009d36 <__gethex+0xca>
 8009cc0:	9901      	ldr	r1, [sp, #4]
 8009cc2:	4652      	mov	r2, sl
 8009cc4:	4638      	mov	r0, r7
 8009cc6:	f001 fbe6 	bl	800b496 <strncmp>
 8009cca:	4605      	mov	r5, r0
 8009ccc:	2800      	cmp	r0, #0
 8009cce:	d168      	bne.n	8009da2 <__gethex+0x136>
 8009cd0:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009cd4:	eb07 060a 	add.w	r6, r7, sl
 8009cd8:	f7ff ffb3 	bl	8009c42 <__hexdig_fun>
 8009cdc:	2800      	cmp	r0, #0
 8009cde:	d062      	beq.n	8009da6 <__gethex+0x13a>
 8009ce0:	4633      	mov	r3, r6
 8009ce2:	7818      	ldrb	r0, [r3, #0]
 8009ce4:	2830      	cmp	r0, #48	; 0x30
 8009ce6:	461f      	mov	r7, r3
 8009ce8:	f103 0301 	add.w	r3, r3, #1
 8009cec:	d0f9      	beq.n	8009ce2 <__gethex+0x76>
 8009cee:	f7ff ffa8 	bl	8009c42 <__hexdig_fun>
 8009cf2:	2301      	movs	r3, #1
 8009cf4:	fab0 f480 	clz	r4, r0
 8009cf8:	0964      	lsrs	r4, r4, #5
 8009cfa:	4635      	mov	r5, r6
 8009cfc:	9300      	str	r3, [sp, #0]
 8009cfe:	463a      	mov	r2, r7
 8009d00:	4616      	mov	r6, r2
 8009d02:	3201      	adds	r2, #1
 8009d04:	7830      	ldrb	r0, [r6, #0]
 8009d06:	f7ff ff9c 	bl	8009c42 <__hexdig_fun>
 8009d0a:	2800      	cmp	r0, #0
 8009d0c:	d1f8      	bne.n	8009d00 <__gethex+0x94>
 8009d0e:	9901      	ldr	r1, [sp, #4]
 8009d10:	4652      	mov	r2, sl
 8009d12:	4630      	mov	r0, r6
 8009d14:	f001 fbbf 	bl	800b496 <strncmp>
 8009d18:	b980      	cbnz	r0, 8009d3c <__gethex+0xd0>
 8009d1a:	b94d      	cbnz	r5, 8009d30 <__gethex+0xc4>
 8009d1c:	eb06 050a 	add.w	r5, r6, sl
 8009d20:	462a      	mov	r2, r5
 8009d22:	4616      	mov	r6, r2
 8009d24:	3201      	adds	r2, #1
 8009d26:	7830      	ldrb	r0, [r6, #0]
 8009d28:	f7ff ff8b 	bl	8009c42 <__hexdig_fun>
 8009d2c:	2800      	cmp	r0, #0
 8009d2e:	d1f8      	bne.n	8009d22 <__gethex+0xb6>
 8009d30:	1bad      	subs	r5, r5, r6
 8009d32:	00ad      	lsls	r5, r5, #2
 8009d34:	e004      	b.n	8009d40 <__gethex+0xd4>
 8009d36:	2400      	movs	r4, #0
 8009d38:	4625      	mov	r5, r4
 8009d3a:	e7e0      	b.n	8009cfe <__gethex+0x92>
 8009d3c:	2d00      	cmp	r5, #0
 8009d3e:	d1f7      	bne.n	8009d30 <__gethex+0xc4>
 8009d40:	7833      	ldrb	r3, [r6, #0]
 8009d42:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009d46:	2b50      	cmp	r3, #80	; 0x50
 8009d48:	d13b      	bne.n	8009dc2 <__gethex+0x156>
 8009d4a:	7873      	ldrb	r3, [r6, #1]
 8009d4c:	2b2b      	cmp	r3, #43	; 0x2b
 8009d4e:	d02c      	beq.n	8009daa <__gethex+0x13e>
 8009d50:	2b2d      	cmp	r3, #45	; 0x2d
 8009d52:	d02e      	beq.n	8009db2 <__gethex+0x146>
 8009d54:	1c71      	adds	r1, r6, #1
 8009d56:	f04f 0900 	mov.w	r9, #0
 8009d5a:	7808      	ldrb	r0, [r1, #0]
 8009d5c:	f7ff ff71 	bl	8009c42 <__hexdig_fun>
 8009d60:	1e43      	subs	r3, r0, #1
 8009d62:	b2db      	uxtb	r3, r3
 8009d64:	2b18      	cmp	r3, #24
 8009d66:	d82c      	bhi.n	8009dc2 <__gethex+0x156>
 8009d68:	f1a0 0210 	sub.w	r2, r0, #16
 8009d6c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009d70:	f7ff ff67 	bl	8009c42 <__hexdig_fun>
 8009d74:	1e43      	subs	r3, r0, #1
 8009d76:	b2db      	uxtb	r3, r3
 8009d78:	2b18      	cmp	r3, #24
 8009d7a:	d91d      	bls.n	8009db8 <__gethex+0x14c>
 8009d7c:	f1b9 0f00 	cmp.w	r9, #0
 8009d80:	d000      	beq.n	8009d84 <__gethex+0x118>
 8009d82:	4252      	negs	r2, r2
 8009d84:	4415      	add	r5, r2
 8009d86:	f8cb 1000 	str.w	r1, [fp]
 8009d8a:	b1e4      	cbz	r4, 8009dc6 <__gethex+0x15a>
 8009d8c:	9b00      	ldr	r3, [sp, #0]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	bf14      	ite	ne
 8009d92:	2700      	movne	r7, #0
 8009d94:	2706      	moveq	r7, #6
 8009d96:	4638      	mov	r0, r7
 8009d98:	b009      	add	sp, #36	; 0x24
 8009d9a:	ecbd 8b02 	vpop	{d8}
 8009d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009da2:	463e      	mov	r6, r7
 8009da4:	4625      	mov	r5, r4
 8009da6:	2401      	movs	r4, #1
 8009da8:	e7ca      	b.n	8009d40 <__gethex+0xd4>
 8009daa:	f04f 0900 	mov.w	r9, #0
 8009dae:	1cb1      	adds	r1, r6, #2
 8009db0:	e7d3      	b.n	8009d5a <__gethex+0xee>
 8009db2:	f04f 0901 	mov.w	r9, #1
 8009db6:	e7fa      	b.n	8009dae <__gethex+0x142>
 8009db8:	230a      	movs	r3, #10
 8009dba:	fb03 0202 	mla	r2, r3, r2, r0
 8009dbe:	3a10      	subs	r2, #16
 8009dc0:	e7d4      	b.n	8009d6c <__gethex+0x100>
 8009dc2:	4631      	mov	r1, r6
 8009dc4:	e7df      	b.n	8009d86 <__gethex+0x11a>
 8009dc6:	1bf3      	subs	r3, r6, r7
 8009dc8:	3b01      	subs	r3, #1
 8009dca:	4621      	mov	r1, r4
 8009dcc:	2b07      	cmp	r3, #7
 8009dce:	dc0b      	bgt.n	8009de8 <__gethex+0x17c>
 8009dd0:	ee18 0a10 	vmov	r0, s16
 8009dd4:	f000 fad8 	bl	800a388 <_Balloc>
 8009dd8:	4604      	mov	r4, r0
 8009dda:	b940      	cbnz	r0, 8009dee <__gethex+0x182>
 8009ddc:	4b65      	ldr	r3, [pc, #404]	; (8009f74 <__gethex+0x308>)
 8009dde:	4602      	mov	r2, r0
 8009de0:	21de      	movs	r1, #222	; 0xde
 8009de2:	4865      	ldr	r0, [pc, #404]	; (8009f78 <__gethex+0x30c>)
 8009de4:	f001 fc4a 	bl	800b67c <__assert_func>
 8009de8:	3101      	adds	r1, #1
 8009dea:	105b      	asrs	r3, r3, #1
 8009dec:	e7ee      	b.n	8009dcc <__gethex+0x160>
 8009dee:	f100 0914 	add.w	r9, r0, #20
 8009df2:	f04f 0b00 	mov.w	fp, #0
 8009df6:	f1ca 0301 	rsb	r3, sl, #1
 8009dfa:	f8cd 9008 	str.w	r9, [sp, #8]
 8009dfe:	f8cd b000 	str.w	fp, [sp]
 8009e02:	9306      	str	r3, [sp, #24]
 8009e04:	42b7      	cmp	r7, r6
 8009e06:	d340      	bcc.n	8009e8a <__gethex+0x21e>
 8009e08:	9802      	ldr	r0, [sp, #8]
 8009e0a:	9b00      	ldr	r3, [sp, #0]
 8009e0c:	f840 3b04 	str.w	r3, [r0], #4
 8009e10:	eba0 0009 	sub.w	r0, r0, r9
 8009e14:	1080      	asrs	r0, r0, #2
 8009e16:	0146      	lsls	r6, r0, #5
 8009e18:	6120      	str	r0, [r4, #16]
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	f000 fbaa 	bl	800a574 <__hi0bits>
 8009e20:	1a30      	subs	r0, r6, r0
 8009e22:	f8d8 6000 	ldr.w	r6, [r8]
 8009e26:	42b0      	cmp	r0, r6
 8009e28:	dd63      	ble.n	8009ef2 <__gethex+0x286>
 8009e2a:	1b87      	subs	r7, r0, r6
 8009e2c:	4639      	mov	r1, r7
 8009e2e:	4620      	mov	r0, r4
 8009e30:	f000 ff44 	bl	800acbc <__any_on>
 8009e34:	4682      	mov	sl, r0
 8009e36:	b1a8      	cbz	r0, 8009e64 <__gethex+0x1f8>
 8009e38:	1e7b      	subs	r3, r7, #1
 8009e3a:	1159      	asrs	r1, r3, #5
 8009e3c:	f003 021f 	and.w	r2, r3, #31
 8009e40:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009e44:	f04f 0a01 	mov.w	sl, #1
 8009e48:	fa0a f202 	lsl.w	r2, sl, r2
 8009e4c:	420a      	tst	r2, r1
 8009e4e:	d009      	beq.n	8009e64 <__gethex+0x1f8>
 8009e50:	4553      	cmp	r3, sl
 8009e52:	dd05      	ble.n	8009e60 <__gethex+0x1f4>
 8009e54:	1eb9      	subs	r1, r7, #2
 8009e56:	4620      	mov	r0, r4
 8009e58:	f000 ff30 	bl	800acbc <__any_on>
 8009e5c:	2800      	cmp	r0, #0
 8009e5e:	d145      	bne.n	8009eec <__gethex+0x280>
 8009e60:	f04f 0a02 	mov.w	sl, #2
 8009e64:	4639      	mov	r1, r7
 8009e66:	4620      	mov	r0, r4
 8009e68:	f7ff fe99 	bl	8009b9e <rshift>
 8009e6c:	443d      	add	r5, r7
 8009e6e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009e72:	42ab      	cmp	r3, r5
 8009e74:	da4c      	bge.n	8009f10 <__gethex+0x2a4>
 8009e76:	ee18 0a10 	vmov	r0, s16
 8009e7a:	4621      	mov	r1, r4
 8009e7c:	f000 fac4 	bl	800a408 <_Bfree>
 8009e80:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009e82:	2300      	movs	r3, #0
 8009e84:	6013      	str	r3, [r2, #0]
 8009e86:	27a3      	movs	r7, #163	; 0xa3
 8009e88:	e785      	b.n	8009d96 <__gethex+0x12a>
 8009e8a:	1e73      	subs	r3, r6, #1
 8009e8c:	9a05      	ldr	r2, [sp, #20]
 8009e8e:	9303      	str	r3, [sp, #12]
 8009e90:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009e94:	4293      	cmp	r3, r2
 8009e96:	d019      	beq.n	8009ecc <__gethex+0x260>
 8009e98:	f1bb 0f20 	cmp.w	fp, #32
 8009e9c:	d107      	bne.n	8009eae <__gethex+0x242>
 8009e9e:	9b02      	ldr	r3, [sp, #8]
 8009ea0:	9a00      	ldr	r2, [sp, #0]
 8009ea2:	f843 2b04 	str.w	r2, [r3], #4
 8009ea6:	9302      	str	r3, [sp, #8]
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	9300      	str	r3, [sp, #0]
 8009eac:	469b      	mov	fp, r3
 8009eae:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009eb2:	f7ff fec6 	bl	8009c42 <__hexdig_fun>
 8009eb6:	9b00      	ldr	r3, [sp, #0]
 8009eb8:	f000 000f 	and.w	r0, r0, #15
 8009ebc:	fa00 f00b 	lsl.w	r0, r0, fp
 8009ec0:	4303      	orrs	r3, r0
 8009ec2:	9300      	str	r3, [sp, #0]
 8009ec4:	f10b 0b04 	add.w	fp, fp, #4
 8009ec8:	9b03      	ldr	r3, [sp, #12]
 8009eca:	e00d      	b.n	8009ee8 <__gethex+0x27c>
 8009ecc:	9b03      	ldr	r3, [sp, #12]
 8009ece:	9a06      	ldr	r2, [sp, #24]
 8009ed0:	4413      	add	r3, r2
 8009ed2:	42bb      	cmp	r3, r7
 8009ed4:	d3e0      	bcc.n	8009e98 <__gethex+0x22c>
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	9901      	ldr	r1, [sp, #4]
 8009eda:	9307      	str	r3, [sp, #28]
 8009edc:	4652      	mov	r2, sl
 8009ede:	f001 fada 	bl	800b496 <strncmp>
 8009ee2:	9b07      	ldr	r3, [sp, #28]
 8009ee4:	2800      	cmp	r0, #0
 8009ee6:	d1d7      	bne.n	8009e98 <__gethex+0x22c>
 8009ee8:	461e      	mov	r6, r3
 8009eea:	e78b      	b.n	8009e04 <__gethex+0x198>
 8009eec:	f04f 0a03 	mov.w	sl, #3
 8009ef0:	e7b8      	b.n	8009e64 <__gethex+0x1f8>
 8009ef2:	da0a      	bge.n	8009f0a <__gethex+0x29e>
 8009ef4:	1a37      	subs	r7, r6, r0
 8009ef6:	4621      	mov	r1, r4
 8009ef8:	ee18 0a10 	vmov	r0, s16
 8009efc:	463a      	mov	r2, r7
 8009efe:	f000 fc9f 	bl	800a840 <__lshift>
 8009f02:	1bed      	subs	r5, r5, r7
 8009f04:	4604      	mov	r4, r0
 8009f06:	f100 0914 	add.w	r9, r0, #20
 8009f0a:	f04f 0a00 	mov.w	sl, #0
 8009f0e:	e7ae      	b.n	8009e6e <__gethex+0x202>
 8009f10:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009f14:	42a8      	cmp	r0, r5
 8009f16:	dd72      	ble.n	8009ffe <__gethex+0x392>
 8009f18:	1b45      	subs	r5, r0, r5
 8009f1a:	42ae      	cmp	r6, r5
 8009f1c:	dc36      	bgt.n	8009f8c <__gethex+0x320>
 8009f1e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009f22:	2b02      	cmp	r3, #2
 8009f24:	d02a      	beq.n	8009f7c <__gethex+0x310>
 8009f26:	2b03      	cmp	r3, #3
 8009f28:	d02c      	beq.n	8009f84 <__gethex+0x318>
 8009f2a:	2b01      	cmp	r3, #1
 8009f2c:	d115      	bne.n	8009f5a <__gethex+0x2ee>
 8009f2e:	42ae      	cmp	r6, r5
 8009f30:	d113      	bne.n	8009f5a <__gethex+0x2ee>
 8009f32:	2e01      	cmp	r6, #1
 8009f34:	d10b      	bne.n	8009f4e <__gethex+0x2e2>
 8009f36:	9a04      	ldr	r2, [sp, #16]
 8009f38:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009f3c:	6013      	str	r3, [r2, #0]
 8009f3e:	2301      	movs	r3, #1
 8009f40:	6123      	str	r3, [r4, #16]
 8009f42:	f8c9 3000 	str.w	r3, [r9]
 8009f46:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009f48:	2762      	movs	r7, #98	; 0x62
 8009f4a:	601c      	str	r4, [r3, #0]
 8009f4c:	e723      	b.n	8009d96 <__gethex+0x12a>
 8009f4e:	1e71      	subs	r1, r6, #1
 8009f50:	4620      	mov	r0, r4
 8009f52:	f000 feb3 	bl	800acbc <__any_on>
 8009f56:	2800      	cmp	r0, #0
 8009f58:	d1ed      	bne.n	8009f36 <__gethex+0x2ca>
 8009f5a:	ee18 0a10 	vmov	r0, s16
 8009f5e:	4621      	mov	r1, r4
 8009f60:	f000 fa52 	bl	800a408 <_Bfree>
 8009f64:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009f66:	2300      	movs	r3, #0
 8009f68:	6013      	str	r3, [r2, #0]
 8009f6a:	2750      	movs	r7, #80	; 0x50
 8009f6c:	e713      	b.n	8009d96 <__gethex+0x12a>
 8009f6e:	bf00      	nop
 8009f70:	0800bcac 	.word	0x0800bcac
 8009f74:	0800bbcc 	.word	0x0800bbcc
 8009f78:	0800bc40 	.word	0x0800bc40
 8009f7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d1eb      	bne.n	8009f5a <__gethex+0x2ee>
 8009f82:	e7d8      	b.n	8009f36 <__gethex+0x2ca>
 8009f84:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d1d5      	bne.n	8009f36 <__gethex+0x2ca>
 8009f8a:	e7e6      	b.n	8009f5a <__gethex+0x2ee>
 8009f8c:	1e6f      	subs	r7, r5, #1
 8009f8e:	f1ba 0f00 	cmp.w	sl, #0
 8009f92:	d131      	bne.n	8009ff8 <__gethex+0x38c>
 8009f94:	b127      	cbz	r7, 8009fa0 <__gethex+0x334>
 8009f96:	4639      	mov	r1, r7
 8009f98:	4620      	mov	r0, r4
 8009f9a:	f000 fe8f 	bl	800acbc <__any_on>
 8009f9e:	4682      	mov	sl, r0
 8009fa0:	117b      	asrs	r3, r7, #5
 8009fa2:	2101      	movs	r1, #1
 8009fa4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009fa8:	f007 071f 	and.w	r7, r7, #31
 8009fac:	fa01 f707 	lsl.w	r7, r1, r7
 8009fb0:	421f      	tst	r7, r3
 8009fb2:	4629      	mov	r1, r5
 8009fb4:	4620      	mov	r0, r4
 8009fb6:	bf18      	it	ne
 8009fb8:	f04a 0a02 	orrne.w	sl, sl, #2
 8009fbc:	1b76      	subs	r6, r6, r5
 8009fbe:	f7ff fdee 	bl	8009b9e <rshift>
 8009fc2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009fc6:	2702      	movs	r7, #2
 8009fc8:	f1ba 0f00 	cmp.w	sl, #0
 8009fcc:	d048      	beq.n	800a060 <__gethex+0x3f4>
 8009fce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009fd2:	2b02      	cmp	r3, #2
 8009fd4:	d015      	beq.n	800a002 <__gethex+0x396>
 8009fd6:	2b03      	cmp	r3, #3
 8009fd8:	d017      	beq.n	800a00a <__gethex+0x39e>
 8009fda:	2b01      	cmp	r3, #1
 8009fdc:	d109      	bne.n	8009ff2 <__gethex+0x386>
 8009fde:	f01a 0f02 	tst.w	sl, #2
 8009fe2:	d006      	beq.n	8009ff2 <__gethex+0x386>
 8009fe4:	f8d9 0000 	ldr.w	r0, [r9]
 8009fe8:	ea4a 0a00 	orr.w	sl, sl, r0
 8009fec:	f01a 0f01 	tst.w	sl, #1
 8009ff0:	d10e      	bne.n	800a010 <__gethex+0x3a4>
 8009ff2:	f047 0710 	orr.w	r7, r7, #16
 8009ff6:	e033      	b.n	800a060 <__gethex+0x3f4>
 8009ff8:	f04f 0a01 	mov.w	sl, #1
 8009ffc:	e7d0      	b.n	8009fa0 <__gethex+0x334>
 8009ffe:	2701      	movs	r7, #1
 800a000:	e7e2      	b.n	8009fc8 <__gethex+0x35c>
 800a002:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a004:	f1c3 0301 	rsb	r3, r3, #1
 800a008:	9315      	str	r3, [sp, #84]	; 0x54
 800a00a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d0f0      	beq.n	8009ff2 <__gethex+0x386>
 800a010:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a014:	f104 0314 	add.w	r3, r4, #20
 800a018:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a01c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a020:	f04f 0c00 	mov.w	ip, #0
 800a024:	4618      	mov	r0, r3
 800a026:	f853 2b04 	ldr.w	r2, [r3], #4
 800a02a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a02e:	d01c      	beq.n	800a06a <__gethex+0x3fe>
 800a030:	3201      	adds	r2, #1
 800a032:	6002      	str	r2, [r0, #0]
 800a034:	2f02      	cmp	r7, #2
 800a036:	f104 0314 	add.w	r3, r4, #20
 800a03a:	d13f      	bne.n	800a0bc <__gethex+0x450>
 800a03c:	f8d8 2000 	ldr.w	r2, [r8]
 800a040:	3a01      	subs	r2, #1
 800a042:	42b2      	cmp	r2, r6
 800a044:	d10a      	bne.n	800a05c <__gethex+0x3f0>
 800a046:	1171      	asrs	r1, r6, #5
 800a048:	2201      	movs	r2, #1
 800a04a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a04e:	f006 061f 	and.w	r6, r6, #31
 800a052:	fa02 f606 	lsl.w	r6, r2, r6
 800a056:	421e      	tst	r6, r3
 800a058:	bf18      	it	ne
 800a05a:	4617      	movne	r7, r2
 800a05c:	f047 0720 	orr.w	r7, r7, #32
 800a060:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a062:	601c      	str	r4, [r3, #0]
 800a064:	9b04      	ldr	r3, [sp, #16]
 800a066:	601d      	str	r5, [r3, #0]
 800a068:	e695      	b.n	8009d96 <__gethex+0x12a>
 800a06a:	4299      	cmp	r1, r3
 800a06c:	f843 cc04 	str.w	ip, [r3, #-4]
 800a070:	d8d8      	bhi.n	800a024 <__gethex+0x3b8>
 800a072:	68a3      	ldr	r3, [r4, #8]
 800a074:	459b      	cmp	fp, r3
 800a076:	db19      	blt.n	800a0ac <__gethex+0x440>
 800a078:	6861      	ldr	r1, [r4, #4]
 800a07a:	ee18 0a10 	vmov	r0, s16
 800a07e:	3101      	adds	r1, #1
 800a080:	f000 f982 	bl	800a388 <_Balloc>
 800a084:	4681      	mov	r9, r0
 800a086:	b918      	cbnz	r0, 800a090 <__gethex+0x424>
 800a088:	4b1a      	ldr	r3, [pc, #104]	; (800a0f4 <__gethex+0x488>)
 800a08a:	4602      	mov	r2, r0
 800a08c:	2184      	movs	r1, #132	; 0x84
 800a08e:	e6a8      	b.n	8009de2 <__gethex+0x176>
 800a090:	6922      	ldr	r2, [r4, #16]
 800a092:	3202      	adds	r2, #2
 800a094:	f104 010c 	add.w	r1, r4, #12
 800a098:	0092      	lsls	r2, r2, #2
 800a09a:	300c      	adds	r0, #12
 800a09c:	f7fc ff06 	bl	8006eac <memcpy>
 800a0a0:	4621      	mov	r1, r4
 800a0a2:	ee18 0a10 	vmov	r0, s16
 800a0a6:	f000 f9af 	bl	800a408 <_Bfree>
 800a0aa:	464c      	mov	r4, r9
 800a0ac:	6923      	ldr	r3, [r4, #16]
 800a0ae:	1c5a      	adds	r2, r3, #1
 800a0b0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a0b4:	6122      	str	r2, [r4, #16]
 800a0b6:	2201      	movs	r2, #1
 800a0b8:	615a      	str	r2, [r3, #20]
 800a0ba:	e7bb      	b.n	800a034 <__gethex+0x3c8>
 800a0bc:	6922      	ldr	r2, [r4, #16]
 800a0be:	455a      	cmp	r2, fp
 800a0c0:	dd0b      	ble.n	800a0da <__gethex+0x46e>
 800a0c2:	2101      	movs	r1, #1
 800a0c4:	4620      	mov	r0, r4
 800a0c6:	f7ff fd6a 	bl	8009b9e <rshift>
 800a0ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a0ce:	3501      	adds	r5, #1
 800a0d0:	42ab      	cmp	r3, r5
 800a0d2:	f6ff aed0 	blt.w	8009e76 <__gethex+0x20a>
 800a0d6:	2701      	movs	r7, #1
 800a0d8:	e7c0      	b.n	800a05c <__gethex+0x3f0>
 800a0da:	f016 061f 	ands.w	r6, r6, #31
 800a0de:	d0fa      	beq.n	800a0d6 <__gethex+0x46a>
 800a0e0:	449a      	add	sl, r3
 800a0e2:	f1c6 0620 	rsb	r6, r6, #32
 800a0e6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800a0ea:	f000 fa43 	bl	800a574 <__hi0bits>
 800a0ee:	42b0      	cmp	r0, r6
 800a0f0:	dbe7      	blt.n	800a0c2 <__gethex+0x456>
 800a0f2:	e7f0      	b.n	800a0d6 <__gethex+0x46a>
 800a0f4:	0800bbcc 	.word	0x0800bbcc

0800a0f8 <L_shift>:
 800a0f8:	f1c2 0208 	rsb	r2, r2, #8
 800a0fc:	0092      	lsls	r2, r2, #2
 800a0fe:	b570      	push	{r4, r5, r6, lr}
 800a100:	f1c2 0620 	rsb	r6, r2, #32
 800a104:	6843      	ldr	r3, [r0, #4]
 800a106:	6804      	ldr	r4, [r0, #0]
 800a108:	fa03 f506 	lsl.w	r5, r3, r6
 800a10c:	432c      	orrs	r4, r5
 800a10e:	40d3      	lsrs	r3, r2
 800a110:	6004      	str	r4, [r0, #0]
 800a112:	f840 3f04 	str.w	r3, [r0, #4]!
 800a116:	4288      	cmp	r0, r1
 800a118:	d3f4      	bcc.n	800a104 <L_shift+0xc>
 800a11a:	bd70      	pop	{r4, r5, r6, pc}

0800a11c <__match>:
 800a11c:	b530      	push	{r4, r5, lr}
 800a11e:	6803      	ldr	r3, [r0, #0]
 800a120:	3301      	adds	r3, #1
 800a122:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a126:	b914      	cbnz	r4, 800a12e <__match+0x12>
 800a128:	6003      	str	r3, [r0, #0]
 800a12a:	2001      	movs	r0, #1
 800a12c:	bd30      	pop	{r4, r5, pc}
 800a12e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a132:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a136:	2d19      	cmp	r5, #25
 800a138:	bf98      	it	ls
 800a13a:	3220      	addls	r2, #32
 800a13c:	42a2      	cmp	r2, r4
 800a13e:	d0f0      	beq.n	800a122 <__match+0x6>
 800a140:	2000      	movs	r0, #0
 800a142:	e7f3      	b.n	800a12c <__match+0x10>

0800a144 <__hexnan>:
 800a144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a148:	680b      	ldr	r3, [r1, #0]
 800a14a:	6801      	ldr	r1, [r0, #0]
 800a14c:	115e      	asrs	r6, r3, #5
 800a14e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a152:	f013 031f 	ands.w	r3, r3, #31
 800a156:	b087      	sub	sp, #28
 800a158:	bf18      	it	ne
 800a15a:	3604      	addne	r6, #4
 800a15c:	2500      	movs	r5, #0
 800a15e:	1f37      	subs	r7, r6, #4
 800a160:	4682      	mov	sl, r0
 800a162:	4690      	mov	r8, r2
 800a164:	9301      	str	r3, [sp, #4]
 800a166:	f846 5c04 	str.w	r5, [r6, #-4]
 800a16a:	46b9      	mov	r9, r7
 800a16c:	463c      	mov	r4, r7
 800a16e:	9502      	str	r5, [sp, #8]
 800a170:	46ab      	mov	fp, r5
 800a172:	784a      	ldrb	r2, [r1, #1]
 800a174:	1c4b      	adds	r3, r1, #1
 800a176:	9303      	str	r3, [sp, #12]
 800a178:	b342      	cbz	r2, 800a1cc <__hexnan+0x88>
 800a17a:	4610      	mov	r0, r2
 800a17c:	9105      	str	r1, [sp, #20]
 800a17e:	9204      	str	r2, [sp, #16]
 800a180:	f7ff fd5f 	bl	8009c42 <__hexdig_fun>
 800a184:	2800      	cmp	r0, #0
 800a186:	d14f      	bne.n	800a228 <__hexnan+0xe4>
 800a188:	9a04      	ldr	r2, [sp, #16]
 800a18a:	9905      	ldr	r1, [sp, #20]
 800a18c:	2a20      	cmp	r2, #32
 800a18e:	d818      	bhi.n	800a1c2 <__hexnan+0x7e>
 800a190:	9b02      	ldr	r3, [sp, #8]
 800a192:	459b      	cmp	fp, r3
 800a194:	dd13      	ble.n	800a1be <__hexnan+0x7a>
 800a196:	454c      	cmp	r4, r9
 800a198:	d206      	bcs.n	800a1a8 <__hexnan+0x64>
 800a19a:	2d07      	cmp	r5, #7
 800a19c:	dc04      	bgt.n	800a1a8 <__hexnan+0x64>
 800a19e:	462a      	mov	r2, r5
 800a1a0:	4649      	mov	r1, r9
 800a1a2:	4620      	mov	r0, r4
 800a1a4:	f7ff ffa8 	bl	800a0f8 <L_shift>
 800a1a8:	4544      	cmp	r4, r8
 800a1aa:	d950      	bls.n	800a24e <__hexnan+0x10a>
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	f1a4 0904 	sub.w	r9, r4, #4
 800a1b2:	f844 3c04 	str.w	r3, [r4, #-4]
 800a1b6:	f8cd b008 	str.w	fp, [sp, #8]
 800a1ba:	464c      	mov	r4, r9
 800a1bc:	461d      	mov	r5, r3
 800a1be:	9903      	ldr	r1, [sp, #12]
 800a1c0:	e7d7      	b.n	800a172 <__hexnan+0x2e>
 800a1c2:	2a29      	cmp	r2, #41	; 0x29
 800a1c4:	d156      	bne.n	800a274 <__hexnan+0x130>
 800a1c6:	3102      	adds	r1, #2
 800a1c8:	f8ca 1000 	str.w	r1, [sl]
 800a1cc:	f1bb 0f00 	cmp.w	fp, #0
 800a1d0:	d050      	beq.n	800a274 <__hexnan+0x130>
 800a1d2:	454c      	cmp	r4, r9
 800a1d4:	d206      	bcs.n	800a1e4 <__hexnan+0xa0>
 800a1d6:	2d07      	cmp	r5, #7
 800a1d8:	dc04      	bgt.n	800a1e4 <__hexnan+0xa0>
 800a1da:	462a      	mov	r2, r5
 800a1dc:	4649      	mov	r1, r9
 800a1de:	4620      	mov	r0, r4
 800a1e0:	f7ff ff8a 	bl	800a0f8 <L_shift>
 800a1e4:	4544      	cmp	r4, r8
 800a1e6:	d934      	bls.n	800a252 <__hexnan+0x10e>
 800a1e8:	f1a8 0204 	sub.w	r2, r8, #4
 800a1ec:	4623      	mov	r3, r4
 800a1ee:	f853 1b04 	ldr.w	r1, [r3], #4
 800a1f2:	f842 1f04 	str.w	r1, [r2, #4]!
 800a1f6:	429f      	cmp	r7, r3
 800a1f8:	d2f9      	bcs.n	800a1ee <__hexnan+0xaa>
 800a1fa:	1b3b      	subs	r3, r7, r4
 800a1fc:	f023 0303 	bic.w	r3, r3, #3
 800a200:	3304      	adds	r3, #4
 800a202:	3401      	adds	r4, #1
 800a204:	3e03      	subs	r6, #3
 800a206:	42b4      	cmp	r4, r6
 800a208:	bf88      	it	hi
 800a20a:	2304      	movhi	r3, #4
 800a20c:	4443      	add	r3, r8
 800a20e:	2200      	movs	r2, #0
 800a210:	f843 2b04 	str.w	r2, [r3], #4
 800a214:	429f      	cmp	r7, r3
 800a216:	d2fb      	bcs.n	800a210 <__hexnan+0xcc>
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	b91b      	cbnz	r3, 800a224 <__hexnan+0xe0>
 800a21c:	4547      	cmp	r7, r8
 800a21e:	d127      	bne.n	800a270 <__hexnan+0x12c>
 800a220:	2301      	movs	r3, #1
 800a222:	603b      	str	r3, [r7, #0]
 800a224:	2005      	movs	r0, #5
 800a226:	e026      	b.n	800a276 <__hexnan+0x132>
 800a228:	3501      	adds	r5, #1
 800a22a:	2d08      	cmp	r5, #8
 800a22c:	f10b 0b01 	add.w	fp, fp, #1
 800a230:	dd06      	ble.n	800a240 <__hexnan+0xfc>
 800a232:	4544      	cmp	r4, r8
 800a234:	d9c3      	bls.n	800a1be <__hexnan+0x7a>
 800a236:	2300      	movs	r3, #0
 800a238:	f844 3c04 	str.w	r3, [r4, #-4]
 800a23c:	2501      	movs	r5, #1
 800a23e:	3c04      	subs	r4, #4
 800a240:	6822      	ldr	r2, [r4, #0]
 800a242:	f000 000f 	and.w	r0, r0, #15
 800a246:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a24a:	6022      	str	r2, [r4, #0]
 800a24c:	e7b7      	b.n	800a1be <__hexnan+0x7a>
 800a24e:	2508      	movs	r5, #8
 800a250:	e7b5      	b.n	800a1be <__hexnan+0x7a>
 800a252:	9b01      	ldr	r3, [sp, #4]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d0df      	beq.n	800a218 <__hexnan+0xd4>
 800a258:	f04f 32ff 	mov.w	r2, #4294967295
 800a25c:	f1c3 0320 	rsb	r3, r3, #32
 800a260:	fa22 f303 	lsr.w	r3, r2, r3
 800a264:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a268:	401a      	ands	r2, r3
 800a26a:	f846 2c04 	str.w	r2, [r6, #-4]
 800a26e:	e7d3      	b.n	800a218 <__hexnan+0xd4>
 800a270:	3f04      	subs	r7, #4
 800a272:	e7d1      	b.n	800a218 <__hexnan+0xd4>
 800a274:	2004      	movs	r0, #4
 800a276:	b007      	add	sp, #28
 800a278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a27c <_localeconv_r>:
 800a27c:	4800      	ldr	r0, [pc, #0]	; (800a280 <_localeconv_r+0x4>)
 800a27e:	4770      	bx	lr
 800a280:	20000168 	.word	0x20000168

0800a284 <__retarget_lock_init_recursive>:
 800a284:	4770      	bx	lr

0800a286 <__retarget_lock_acquire_recursive>:
 800a286:	4770      	bx	lr

0800a288 <__retarget_lock_release_recursive>:
 800a288:	4770      	bx	lr

0800a28a <__swhatbuf_r>:
 800a28a:	b570      	push	{r4, r5, r6, lr}
 800a28c:	460e      	mov	r6, r1
 800a28e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a292:	2900      	cmp	r1, #0
 800a294:	b096      	sub	sp, #88	; 0x58
 800a296:	4614      	mov	r4, r2
 800a298:	461d      	mov	r5, r3
 800a29a:	da07      	bge.n	800a2ac <__swhatbuf_r+0x22>
 800a29c:	2300      	movs	r3, #0
 800a29e:	602b      	str	r3, [r5, #0]
 800a2a0:	89b3      	ldrh	r3, [r6, #12]
 800a2a2:	061a      	lsls	r2, r3, #24
 800a2a4:	d410      	bmi.n	800a2c8 <__swhatbuf_r+0x3e>
 800a2a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a2aa:	e00e      	b.n	800a2ca <__swhatbuf_r+0x40>
 800a2ac:	466a      	mov	r2, sp
 800a2ae:	f001 fa25 	bl	800b6fc <_fstat_r>
 800a2b2:	2800      	cmp	r0, #0
 800a2b4:	dbf2      	blt.n	800a29c <__swhatbuf_r+0x12>
 800a2b6:	9a01      	ldr	r2, [sp, #4]
 800a2b8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a2bc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a2c0:	425a      	negs	r2, r3
 800a2c2:	415a      	adcs	r2, r3
 800a2c4:	602a      	str	r2, [r5, #0]
 800a2c6:	e7ee      	b.n	800a2a6 <__swhatbuf_r+0x1c>
 800a2c8:	2340      	movs	r3, #64	; 0x40
 800a2ca:	2000      	movs	r0, #0
 800a2cc:	6023      	str	r3, [r4, #0]
 800a2ce:	b016      	add	sp, #88	; 0x58
 800a2d0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a2d4 <__smakebuf_r>:
 800a2d4:	898b      	ldrh	r3, [r1, #12]
 800a2d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a2d8:	079d      	lsls	r5, r3, #30
 800a2da:	4606      	mov	r6, r0
 800a2dc:	460c      	mov	r4, r1
 800a2de:	d507      	bpl.n	800a2f0 <__smakebuf_r+0x1c>
 800a2e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a2e4:	6023      	str	r3, [r4, #0]
 800a2e6:	6123      	str	r3, [r4, #16]
 800a2e8:	2301      	movs	r3, #1
 800a2ea:	6163      	str	r3, [r4, #20]
 800a2ec:	b002      	add	sp, #8
 800a2ee:	bd70      	pop	{r4, r5, r6, pc}
 800a2f0:	ab01      	add	r3, sp, #4
 800a2f2:	466a      	mov	r2, sp
 800a2f4:	f7ff ffc9 	bl	800a28a <__swhatbuf_r>
 800a2f8:	9900      	ldr	r1, [sp, #0]
 800a2fa:	4605      	mov	r5, r0
 800a2fc:	4630      	mov	r0, r6
 800a2fe:	f000 fd5d 	bl	800adbc <_malloc_r>
 800a302:	b948      	cbnz	r0, 800a318 <__smakebuf_r+0x44>
 800a304:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a308:	059a      	lsls	r2, r3, #22
 800a30a:	d4ef      	bmi.n	800a2ec <__smakebuf_r+0x18>
 800a30c:	f023 0303 	bic.w	r3, r3, #3
 800a310:	f043 0302 	orr.w	r3, r3, #2
 800a314:	81a3      	strh	r3, [r4, #12]
 800a316:	e7e3      	b.n	800a2e0 <__smakebuf_r+0xc>
 800a318:	4b0d      	ldr	r3, [pc, #52]	; (800a350 <__smakebuf_r+0x7c>)
 800a31a:	62b3      	str	r3, [r6, #40]	; 0x28
 800a31c:	89a3      	ldrh	r3, [r4, #12]
 800a31e:	6020      	str	r0, [r4, #0]
 800a320:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a324:	81a3      	strh	r3, [r4, #12]
 800a326:	9b00      	ldr	r3, [sp, #0]
 800a328:	6163      	str	r3, [r4, #20]
 800a32a:	9b01      	ldr	r3, [sp, #4]
 800a32c:	6120      	str	r0, [r4, #16]
 800a32e:	b15b      	cbz	r3, 800a348 <__smakebuf_r+0x74>
 800a330:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a334:	4630      	mov	r0, r6
 800a336:	f001 f9f3 	bl	800b720 <_isatty_r>
 800a33a:	b128      	cbz	r0, 800a348 <__smakebuf_r+0x74>
 800a33c:	89a3      	ldrh	r3, [r4, #12]
 800a33e:	f023 0303 	bic.w	r3, r3, #3
 800a342:	f043 0301 	orr.w	r3, r3, #1
 800a346:	81a3      	strh	r3, [r4, #12]
 800a348:	89a0      	ldrh	r0, [r4, #12]
 800a34a:	4305      	orrs	r5, r0
 800a34c:	81a5      	strh	r5, [r4, #12]
 800a34e:	e7cd      	b.n	800a2ec <__smakebuf_r+0x18>
 800a350:	080099fd 	.word	0x080099fd

0800a354 <malloc>:
 800a354:	4b02      	ldr	r3, [pc, #8]	; (800a360 <malloc+0xc>)
 800a356:	4601      	mov	r1, r0
 800a358:	6818      	ldr	r0, [r3, #0]
 800a35a:	f000 bd2f 	b.w	800adbc <_malloc_r>
 800a35e:	bf00      	nop
 800a360:	20000010 	.word	0x20000010

0800a364 <__ascii_mbtowc>:
 800a364:	b082      	sub	sp, #8
 800a366:	b901      	cbnz	r1, 800a36a <__ascii_mbtowc+0x6>
 800a368:	a901      	add	r1, sp, #4
 800a36a:	b142      	cbz	r2, 800a37e <__ascii_mbtowc+0x1a>
 800a36c:	b14b      	cbz	r3, 800a382 <__ascii_mbtowc+0x1e>
 800a36e:	7813      	ldrb	r3, [r2, #0]
 800a370:	600b      	str	r3, [r1, #0]
 800a372:	7812      	ldrb	r2, [r2, #0]
 800a374:	1e10      	subs	r0, r2, #0
 800a376:	bf18      	it	ne
 800a378:	2001      	movne	r0, #1
 800a37a:	b002      	add	sp, #8
 800a37c:	4770      	bx	lr
 800a37e:	4610      	mov	r0, r2
 800a380:	e7fb      	b.n	800a37a <__ascii_mbtowc+0x16>
 800a382:	f06f 0001 	mvn.w	r0, #1
 800a386:	e7f8      	b.n	800a37a <__ascii_mbtowc+0x16>

0800a388 <_Balloc>:
 800a388:	b570      	push	{r4, r5, r6, lr}
 800a38a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a38c:	4604      	mov	r4, r0
 800a38e:	460d      	mov	r5, r1
 800a390:	b976      	cbnz	r6, 800a3b0 <_Balloc+0x28>
 800a392:	2010      	movs	r0, #16
 800a394:	f7ff ffde 	bl	800a354 <malloc>
 800a398:	4602      	mov	r2, r0
 800a39a:	6260      	str	r0, [r4, #36]	; 0x24
 800a39c:	b920      	cbnz	r0, 800a3a8 <_Balloc+0x20>
 800a39e:	4b18      	ldr	r3, [pc, #96]	; (800a400 <_Balloc+0x78>)
 800a3a0:	4818      	ldr	r0, [pc, #96]	; (800a404 <_Balloc+0x7c>)
 800a3a2:	2166      	movs	r1, #102	; 0x66
 800a3a4:	f001 f96a 	bl	800b67c <__assert_func>
 800a3a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a3ac:	6006      	str	r6, [r0, #0]
 800a3ae:	60c6      	str	r6, [r0, #12]
 800a3b0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a3b2:	68f3      	ldr	r3, [r6, #12]
 800a3b4:	b183      	cbz	r3, 800a3d8 <_Balloc+0x50>
 800a3b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a3b8:	68db      	ldr	r3, [r3, #12]
 800a3ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a3be:	b9b8      	cbnz	r0, 800a3f0 <_Balloc+0x68>
 800a3c0:	2101      	movs	r1, #1
 800a3c2:	fa01 f605 	lsl.w	r6, r1, r5
 800a3c6:	1d72      	adds	r2, r6, #5
 800a3c8:	0092      	lsls	r2, r2, #2
 800a3ca:	4620      	mov	r0, r4
 800a3cc:	f000 fc97 	bl	800acfe <_calloc_r>
 800a3d0:	b160      	cbz	r0, 800a3ec <_Balloc+0x64>
 800a3d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a3d6:	e00e      	b.n	800a3f6 <_Balloc+0x6e>
 800a3d8:	2221      	movs	r2, #33	; 0x21
 800a3da:	2104      	movs	r1, #4
 800a3dc:	4620      	mov	r0, r4
 800a3de:	f000 fc8e 	bl	800acfe <_calloc_r>
 800a3e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a3e4:	60f0      	str	r0, [r6, #12]
 800a3e6:	68db      	ldr	r3, [r3, #12]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d1e4      	bne.n	800a3b6 <_Balloc+0x2e>
 800a3ec:	2000      	movs	r0, #0
 800a3ee:	bd70      	pop	{r4, r5, r6, pc}
 800a3f0:	6802      	ldr	r2, [r0, #0]
 800a3f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a3fc:	e7f7      	b.n	800a3ee <_Balloc+0x66>
 800a3fe:	bf00      	nop
 800a400:	0800bb56 	.word	0x0800bb56
 800a404:	0800bcc0 	.word	0x0800bcc0

0800a408 <_Bfree>:
 800a408:	b570      	push	{r4, r5, r6, lr}
 800a40a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a40c:	4605      	mov	r5, r0
 800a40e:	460c      	mov	r4, r1
 800a410:	b976      	cbnz	r6, 800a430 <_Bfree+0x28>
 800a412:	2010      	movs	r0, #16
 800a414:	f7ff ff9e 	bl	800a354 <malloc>
 800a418:	4602      	mov	r2, r0
 800a41a:	6268      	str	r0, [r5, #36]	; 0x24
 800a41c:	b920      	cbnz	r0, 800a428 <_Bfree+0x20>
 800a41e:	4b09      	ldr	r3, [pc, #36]	; (800a444 <_Bfree+0x3c>)
 800a420:	4809      	ldr	r0, [pc, #36]	; (800a448 <_Bfree+0x40>)
 800a422:	218a      	movs	r1, #138	; 0x8a
 800a424:	f001 f92a 	bl	800b67c <__assert_func>
 800a428:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a42c:	6006      	str	r6, [r0, #0]
 800a42e:	60c6      	str	r6, [r0, #12]
 800a430:	b13c      	cbz	r4, 800a442 <_Bfree+0x3a>
 800a432:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a434:	6862      	ldr	r2, [r4, #4]
 800a436:	68db      	ldr	r3, [r3, #12]
 800a438:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a43c:	6021      	str	r1, [r4, #0]
 800a43e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a442:	bd70      	pop	{r4, r5, r6, pc}
 800a444:	0800bb56 	.word	0x0800bb56
 800a448:	0800bcc0 	.word	0x0800bcc0

0800a44c <__multadd>:
 800a44c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a450:	690e      	ldr	r6, [r1, #16]
 800a452:	4607      	mov	r7, r0
 800a454:	4698      	mov	r8, r3
 800a456:	460c      	mov	r4, r1
 800a458:	f101 0014 	add.w	r0, r1, #20
 800a45c:	2300      	movs	r3, #0
 800a45e:	6805      	ldr	r5, [r0, #0]
 800a460:	b2a9      	uxth	r1, r5
 800a462:	fb02 8101 	mla	r1, r2, r1, r8
 800a466:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800a46a:	0c2d      	lsrs	r5, r5, #16
 800a46c:	fb02 c505 	mla	r5, r2, r5, ip
 800a470:	b289      	uxth	r1, r1
 800a472:	3301      	adds	r3, #1
 800a474:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800a478:	429e      	cmp	r6, r3
 800a47a:	f840 1b04 	str.w	r1, [r0], #4
 800a47e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800a482:	dcec      	bgt.n	800a45e <__multadd+0x12>
 800a484:	f1b8 0f00 	cmp.w	r8, #0
 800a488:	d022      	beq.n	800a4d0 <__multadd+0x84>
 800a48a:	68a3      	ldr	r3, [r4, #8]
 800a48c:	42b3      	cmp	r3, r6
 800a48e:	dc19      	bgt.n	800a4c4 <__multadd+0x78>
 800a490:	6861      	ldr	r1, [r4, #4]
 800a492:	4638      	mov	r0, r7
 800a494:	3101      	adds	r1, #1
 800a496:	f7ff ff77 	bl	800a388 <_Balloc>
 800a49a:	4605      	mov	r5, r0
 800a49c:	b928      	cbnz	r0, 800a4aa <__multadd+0x5e>
 800a49e:	4602      	mov	r2, r0
 800a4a0:	4b0d      	ldr	r3, [pc, #52]	; (800a4d8 <__multadd+0x8c>)
 800a4a2:	480e      	ldr	r0, [pc, #56]	; (800a4dc <__multadd+0x90>)
 800a4a4:	21b5      	movs	r1, #181	; 0xb5
 800a4a6:	f001 f8e9 	bl	800b67c <__assert_func>
 800a4aa:	6922      	ldr	r2, [r4, #16]
 800a4ac:	3202      	adds	r2, #2
 800a4ae:	f104 010c 	add.w	r1, r4, #12
 800a4b2:	0092      	lsls	r2, r2, #2
 800a4b4:	300c      	adds	r0, #12
 800a4b6:	f7fc fcf9 	bl	8006eac <memcpy>
 800a4ba:	4621      	mov	r1, r4
 800a4bc:	4638      	mov	r0, r7
 800a4be:	f7ff ffa3 	bl	800a408 <_Bfree>
 800a4c2:	462c      	mov	r4, r5
 800a4c4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800a4c8:	3601      	adds	r6, #1
 800a4ca:	f8c3 8014 	str.w	r8, [r3, #20]
 800a4ce:	6126      	str	r6, [r4, #16]
 800a4d0:	4620      	mov	r0, r4
 800a4d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4d6:	bf00      	nop
 800a4d8:	0800bbcc 	.word	0x0800bbcc
 800a4dc:	0800bcc0 	.word	0x0800bcc0

0800a4e0 <__s2b>:
 800a4e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4e4:	460c      	mov	r4, r1
 800a4e6:	4615      	mov	r5, r2
 800a4e8:	461f      	mov	r7, r3
 800a4ea:	2209      	movs	r2, #9
 800a4ec:	3308      	adds	r3, #8
 800a4ee:	4606      	mov	r6, r0
 800a4f0:	fb93 f3f2 	sdiv	r3, r3, r2
 800a4f4:	2100      	movs	r1, #0
 800a4f6:	2201      	movs	r2, #1
 800a4f8:	429a      	cmp	r2, r3
 800a4fa:	db09      	blt.n	800a510 <__s2b+0x30>
 800a4fc:	4630      	mov	r0, r6
 800a4fe:	f7ff ff43 	bl	800a388 <_Balloc>
 800a502:	b940      	cbnz	r0, 800a516 <__s2b+0x36>
 800a504:	4602      	mov	r2, r0
 800a506:	4b19      	ldr	r3, [pc, #100]	; (800a56c <__s2b+0x8c>)
 800a508:	4819      	ldr	r0, [pc, #100]	; (800a570 <__s2b+0x90>)
 800a50a:	21ce      	movs	r1, #206	; 0xce
 800a50c:	f001 f8b6 	bl	800b67c <__assert_func>
 800a510:	0052      	lsls	r2, r2, #1
 800a512:	3101      	adds	r1, #1
 800a514:	e7f0      	b.n	800a4f8 <__s2b+0x18>
 800a516:	9b08      	ldr	r3, [sp, #32]
 800a518:	6143      	str	r3, [r0, #20]
 800a51a:	2d09      	cmp	r5, #9
 800a51c:	f04f 0301 	mov.w	r3, #1
 800a520:	6103      	str	r3, [r0, #16]
 800a522:	dd16      	ble.n	800a552 <__s2b+0x72>
 800a524:	f104 0909 	add.w	r9, r4, #9
 800a528:	46c8      	mov	r8, r9
 800a52a:	442c      	add	r4, r5
 800a52c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a530:	4601      	mov	r1, r0
 800a532:	3b30      	subs	r3, #48	; 0x30
 800a534:	220a      	movs	r2, #10
 800a536:	4630      	mov	r0, r6
 800a538:	f7ff ff88 	bl	800a44c <__multadd>
 800a53c:	45a0      	cmp	r8, r4
 800a53e:	d1f5      	bne.n	800a52c <__s2b+0x4c>
 800a540:	f1a5 0408 	sub.w	r4, r5, #8
 800a544:	444c      	add	r4, r9
 800a546:	1b2d      	subs	r5, r5, r4
 800a548:	1963      	adds	r3, r4, r5
 800a54a:	42bb      	cmp	r3, r7
 800a54c:	db04      	blt.n	800a558 <__s2b+0x78>
 800a54e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a552:	340a      	adds	r4, #10
 800a554:	2509      	movs	r5, #9
 800a556:	e7f6      	b.n	800a546 <__s2b+0x66>
 800a558:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a55c:	4601      	mov	r1, r0
 800a55e:	3b30      	subs	r3, #48	; 0x30
 800a560:	220a      	movs	r2, #10
 800a562:	4630      	mov	r0, r6
 800a564:	f7ff ff72 	bl	800a44c <__multadd>
 800a568:	e7ee      	b.n	800a548 <__s2b+0x68>
 800a56a:	bf00      	nop
 800a56c:	0800bbcc 	.word	0x0800bbcc
 800a570:	0800bcc0 	.word	0x0800bcc0

0800a574 <__hi0bits>:
 800a574:	0c03      	lsrs	r3, r0, #16
 800a576:	041b      	lsls	r3, r3, #16
 800a578:	b9d3      	cbnz	r3, 800a5b0 <__hi0bits+0x3c>
 800a57a:	0400      	lsls	r0, r0, #16
 800a57c:	2310      	movs	r3, #16
 800a57e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a582:	bf04      	itt	eq
 800a584:	0200      	lsleq	r0, r0, #8
 800a586:	3308      	addeq	r3, #8
 800a588:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a58c:	bf04      	itt	eq
 800a58e:	0100      	lsleq	r0, r0, #4
 800a590:	3304      	addeq	r3, #4
 800a592:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a596:	bf04      	itt	eq
 800a598:	0080      	lsleq	r0, r0, #2
 800a59a:	3302      	addeq	r3, #2
 800a59c:	2800      	cmp	r0, #0
 800a59e:	db05      	blt.n	800a5ac <__hi0bits+0x38>
 800a5a0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a5a4:	f103 0301 	add.w	r3, r3, #1
 800a5a8:	bf08      	it	eq
 800a5aa:	2320      	moveq	r3, #32
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	4770      	bx	lr
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	e7e4      	b.n	800a57e <__hi0bits+0xa>

0800a5b4 <__lo0bits>:
 800a5b4:	6803      	ldr	r3, [r0, #0]
 800a5b6:	f013 0207 	ands.w	r2, r3, #7
 800a5ba:	4601      	mov	r1, r0
 800a5bc:	d00b      	beq.n	800a5d6 <__lo0bits+0x22>
 800a5be:	07da      	lsls	r2, r3, #31
 800a5c0:	d424      	bmi.n	800a60c <__lo0bits+0x58>
 800a5c2:	0798      	lsls	r0, r3, #30
 800a5c4:	bf49      	itett	mi
 800a5c6:	085b      	lsrmi	r3, r3, #1
 800a5c8:	089b      	lsrpl	r3, r3, #2
 800a5ca:	2001      	movmi	r0, #1
 800a5cc:	600b      	strmi	r3, [r1, #0]
 800a5ce:	bf5c      	itt	pl
 800a5d0:	600b      	strpl	r3, [r1, #0]
 800a5d2:	2002      	movpl	r0, #2
 800a5d4:	4770      	bx	lr
 800a5d6:	b298      	uxth	r0, r3
 800a5d8:	b9b0      	cbnz	r0, 800a608 <__lo0bits+0x54>
 800a5da:	0c1b      	lsrs	r3, r3, #16
 800a5dc:	2010      	movs	r0, #16
 800a5de:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a5e2:	bf04      	itt	eq
 800a5e4:	0a1b      	lsreq	r3, r3, #8
 800a5e6:	3008      	addeq	r0, #8
 800a5e8:	071a      	lsls	r2, r3, #28
 800a5ea:	bf04      	itt	eq
 800a5ec:	091b      	lsreq	r3, r3, #4
 800a5ee:	3004      	addeq	r0, #4
 800a5f0:	079a      	lsls	r2, r3, #30
 800a5f2:	bf04      	itt	eq
 800a5f4:	089b      	lsreq	r3, r3, #2
 800a5f6:	3002      	addeq	r0, #2
 800a5f8:	07da      	lsls	r2, r3, #31
 800a5fa:	d403      	bmi.n	800a604 <__lo0bits+0x50>
 800a5fc:	085b      	lsrs	r3, r3, #1
 800a5fe:	f100 0001 	add.w	r0, r0, #1
 800a602:	d005      	beq.n	800a610 <__lo0bits+0x5c>
 800a604:	600b      	str	r3, [r1, #0]
 800a606:	4770      	bx	lr
 800a608:	4610      	mov	r0, r2
 800a60a:	e7e8      	b.n	800a5de <__lo0bits+0x2a>
 800a60c:	2000      	movs	r0, #0
 800a60e:	4770      	bx	lr
 800a610:	2020      	movs	r0, #32
 800a612:	4770      	bx	lr

0800a614 <__i2b>:
 800a614:	b510      	push	{r4, lr}
 800a616:	460c      	mov	r4, r1
 800a618:	2101      	movs	r1, #1
 800a61a:	f7ff feb5 	bl	800a388 <_Balloc>
 800a61e:	4602      	mov	r2, r0
 800a620:	b928      	cbnz	r0, 800a62e <__i2b+0x1a>
 800a622:	4b05      	ldr	r3, [pc, #20]	; (800a638 <__i2b+0x24>)
 800a624:	4805      	ldr	r0, [pc, #20]	; (800a63c <__i2b+0x28>)
 800a626:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a62a:	f001 f827 	bl	800b67c <__assert_func>
 800a62e:	2301      	movs	r3, #1
 800a630:	6144      	str	r4, [r0, #20]
 800a632:	6103      	str	r3, [r0, #16]
 800a634:	bd10      	pop	{r4, pc}
 800a636:	bf00      	nop
 800a638:	0800bbcc 	.word	0x0800bbcc
 800a63c:	0800bcc0 	.word	0x0800bcc0

0800a640 <__multiply>:
 800a640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a644:	4614      	mov	r4, r2
 800a646:	690a      	ldr	r2, [r1, #16]
 800a648:	6923      	ldr	r3, [r4, #16]
 800a64a:	429a      	cmp	r2, r3
 800a64c:	bfb8      	it	lt
 800a64e:	460b      	movlt	r3, r1
 800a650:	460d      	mov	r5, r1
 800a652:	bfbc      	itt	lt
 800a654:	4625      	movlt	r5, r4
 800a656:	461c      	movlt	r4, r3
 800a658:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800a65c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a660:	68ab      	ldr	r3, [r5, #8]
 800a662:	6869      	ldr	r1, [r5, #4]
 800a664:	eb0a 0709 	add.w	r7, sl, r9
 800a668:	42bb      	cmp	r3, r7
 800a66a:	b085      	sub	sp, #20
 800a66c:	bfb8      	it	lt
 800a66e:	3101      	addlt	r1, #1
 800a670:	f7ff fe8a 	bl	800a388 <_Balloc>
 800a674:	b930      	cbnz	r0, 800a684 <__multiply+0x44>
 800a676:	4602      	mov	r2, r0
 800a678:	4b42      	ldr	r3, [pc, #264]	; (800a784 <__multiply+0x144>)
 800a67a:	4843      	ldr	r0, [pc, #268]	; (800a788 <__multiply+0x148>)
 800a67c:	f240 115d 	movw	r1, #349	; 0x15d
 800a680:	f000 fffc 	bl	800b67c <__assert_func>
 800a684:	f100 0614 	add.w	r6, r0, #20
 800a688:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800a68c:	4633      	mov	r3, r6
 800a68e:	2200      	movs	r2, #0
 800a690:	4543      	cmp	r3, r8
 800a692:	d31e      	bcc.n	800a6d2 <__multiply+0x92>
 800a694:	f105 0c14 	add.w	ip, r5, #20
 800a698:	f104 0314 	add.w	r3, r4, #20
 800a69c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800a6a0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800a6a4:	9202      	str	r2, [sp, #8]
 800a6a6:	ebac 0205 	sub.w	r2, ip, r5
 800a6aa:	3a15      	subs	r2, #21
 800a6ac:	f022 0203 	bic.w	r2, r2, #3
 800a6b0:	3204      	adds	r2, #4
 800a6b2:	f105 0115 	add.w	r1, r5, #21
 800a6b6:	458c      	cmp	ip, r1
 800a6b8:	bf38      	it	cc
 800a6ba:	2204      	movcc	r2, #4
 800a6bc:	9201      	str	r2, [sp, #4]
 800a6be:	9a02      	ldr	r2, [sp, #8]
 800a6c0:	9303      	str	r3, [sp, #12]
 800a6c2:	429a      	cmp	r2, r3
 800a6c4:	d808      	bhi.n	800a6d8 <__multiply+0x98>
 800a6c6:	2f00      	cmp	r7, #0
 800a6c8:	dc55      	bgt.n	800a776 <__multiply+0x136>
 800a6ca:	6107      	str	r7, [r0, #16]
 800a6cc:	b005      	add	sp, #20
 800a6ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6d2:	f843 2b04 	str.w	r2, [r3], #4
 800a6d6:	e7db      	b.n	800a690 <__multiply+0x50>
 800a6d8:	f8b3 a000 	ldrh.w	sl, [r3]
 800a6dc:	f1ba 0f00 	cmp.w	sl, #0
 800a6e0:	d020      	beq.n	800a724 <__multiply+0xe4>
 800a6e2:	f105 0e14 	add.w	lr, r5, #20
 800a6e6:	46b1      	mov	r9, r6
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	f85e 4b04 	ldr.w	r4, [lr], #4
 800a6ee:	f8d9 b000 	ldr.w	fp, [r9]
 800a6f2:	b2a1      	uxth	r1, r4
 800a6f4:	fa1f fb8b 	uxth.w	fp, fp
 800a6f8:	fb0a b101 	mla	r1, sl, r1, fp
 800a6fc:	4411      	add	r1, r2
 800a6fe:	f8d9 2000 	ldr.w	r2, [r9]
 800a702:	0c24      	lsrs	r4, r4, #16
 800a704:	0c12      	lsrs	r2, r2, #16
 800a706:	fb0a 2404 	mla	r4, sl, r4, r2
 800a70a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800a70e:	b289      	uxth	r1, r1
 800a710:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a714:	45f4      	cmp	ip, lr
 800a716:	f849 1b04 	str.w	r1, [r9], #4
 800a71a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800a71e:	d8e4      	bhi.n	800a6ea <__multiply+0xaa>
 800a720:	9901      	ldr	r1, [sp, #4]
 800a722:	5072      	str	r2, [r6, r1]
 800a724:	9a03      	ldr	r2, [sp, #12]
 800a726:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a72a:	3304      	adds	r3, #4
 800a72c:	f1b9 0f00 	cmp.w	r9, #0
 800a730:	d01f      	beq.n	800a772 <__multiply+0x132>
 800a732:	6834      	ldr	r4, [r6, #0]
 800a734:	f105 0114 	add.w	r1, r5, #20
 800a738:	46b6      	mov	lr, r6
 800a73a:	f04f 0a00 	mov.w	sl, #0
 800a73e:	880a      	ldrh	r2, [r1, #0]
 800a740:	f8be b002 	ldrh.w	fp, [lr, #2]
 800a744:	fb09 b202 	mla	r2, r9, r2, fp
 800a748:	4492      	add	sl, r2
 800a74a:	b2a4      	uxth	r4, r4
 800a74c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800a750:	f84e 4b04 	str.w	r4, [lr], #4
 800a754:	f851 4b04 	ldr.w	r4, [r1], #4
 800a758:	f8be 2000 	ldrh.w	r2, [lr]
 800a75c:	0c24      	lsrs	r4, r4, #16
 800a75e:	fb09 2404 	mla	r4, r9, r4, r2
 800a762:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800a766:	458c      	cmp	ip, r1
 800a768:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a76c:	d8e7      	bhi.n	800a73e <__multiply+0xfe>
 800a76e:	9a01      	ldr	r2, [sp, #4]
 800a770:	50b4      	str	r4, [r6, r2]
 800a772:	3604      	adds	r6, #4
 800a774:	e7a3      	b.n	800a6be <__multiply+0x7e>
 800a776:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d1a5      	bne.n	800a6ca <__multiply+0x8a>
 800a77e:	3f01      	subs	r7, #1
 800a780:	e7a1      	b.n	800a6c6 <__multiply+0x86>
 800a782:	bf00      	nop
 800a784:	0800bbcc 	.word	0x0800bbcc
 800a788:	0800bcc0 	.word	0x0800bcc0

0800a78c <__pow5mult>:
 800a78c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a790:	4615      	mov	r5, r2
 800a792:	f012 0203 	ands.w	r2, r2, #3
 800a796:	4606      	mov	r6, r0
 800a798:	460f      	mov	r7, r1
 800a79a:	d007      	beq.n	800a7ac <__pow5mult+0x20>
 800a79c:	4c25      	ldr	r4, [pc, #148]	; (800a834 <__pow5mult+0xa8>)
 800a79e:	3a01      	subs	r2, #1
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a7a6:	f7ff fe51 	bl	800a44c <__multadd>
 800a7aa:	4607      	mov	r7, r0
 800a7ac:	10ad      	asrs	r5, r5, #2
 800a7ae:	d03d      	beq.n	800a82c <__pow5mult+0xa0>
 800a7b0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a7b2:	b97c      	cbnz	r4, 800a7d4 <__pow5mult+0x48>
 800a7b4:	2010      	movs	r0, #16
 800a7b6:	f7ff fdcd 	bl	800a354 <malloc>
 800a7ba:	4602      	mov	r2, r0
 800a7bc:	6270      	str	r0, [r6, #36]	; 0x24
 800a7be:	b928      	cbnz	r0, 800a7cc <__pow5mult+0x40>
 800a7c0:	4b1d      	ldr	r3, [pc, #116]	; (800a838 <__pow5mult+0xac>)
 800a7c2:	481e      	ldr	r0, [pc, #120]	; (800a83c <__pow5mult+0xb0>)
 800a7c4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a7c8:	f000 ff58 	bl	800b67c <__assert_func>
 800a7cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a7d0:	6004      	str	r4, [r0, #0]
 800a7d2:	60c4      	str	r4, [r0, #12]
 800a7d4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a7d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a7dc:	b94c      	cbnz	r4, 800a7f2 <__pow5mult+0x66>
 800a7de:	f240 2171 	movw	r1, #625	; 0x271
 800a7e2:	4630      	mov	r0, r6
 800a7e4:	f7ff ff16 	bl	800a614 <__i2b>
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	f8c8 0008 	str.w	r0, [r8, #8]
 800a7ee:	4604      	mov	r4, r0
 800a7f0:	6003      	str	r3, [r0, #0]
 800a7f2:	f04f 0900 	mov.w	r9, #0
 800a7f6:	07eb      	lsls	r3, r5, #31
 800a7f8:	d50a      	bpl.n	800a810 <__pow5mult+0x84>
 800a7fa:	4639      	mov	r1, r7
 800a7fc:	4622      	mov	r2, r4
 800a7fe:	4630      	mov	r0, r6
 800a800:	f7ff ff1e 	bl	800a640 <__multiply>
 800a804:	4639      	mov	r1, r7
 800a806:	4680      	mov	r8, r0
 800a808:	4630      	mov	r0, r6
 800a80a:	f7ff fdfd 	bl	800a408 <_Bfree>
 800a80e:	4647      	mov	r7, r8
 800a810:	106d      	asrs	r5, r5, #1
 800a812:	d00b      	beq.n	800a82c <__pow5mult+0xa0>
 800a814:	6820      	ldr	r0, [r4, #0]
 800a816:	b938      	cbnz	r0, 800a828 <__pow5mult+0x9c>
 800a818:	4622      	mov	r2, r4
 800a81a:	4621      	mov	r1, r4
 800a81c:	4630      	mov	r0, r6
 800a81e:	f7ff ff0f 	bl	800a640 <__multiply>
 800a822:	6020      	str	r0, [r4, #0]
 800a824:	f8c0 9000 	str.w	r9, [r0]
 800a828:	4604      	mov	r4, r0
 800a82a:	e7e4      	b.n	800a7f6 <__pow5mult+0x6a>
 800a82c:	4638      	mov	r0, r7
 800a82e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a832:	bf00      	nop
 800a834:	0800be10 	.word	0x0800be10
 800a838:	0800bb56 	.word	0x0800bb56
 800a83c:	0800bcc0 	.word	0x0800bcc0

0800a840 <__lshift>:
 800a840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a844:	460c      	mov	r4, r1
 800a846:	6849      	ldr	r1, [r1, #4]
 800a848:	6923      	ldr	r3, [r4, #16]
 800a84a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a84e:	68a3      	ldr	r3, [r4, #8]
 800a850:	4607      	mov	r7, r0
 800a852:	4691      	mov	r9, r2
 800a854:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a858:	f108 0601 	add.w	r6, r8, #1
 800a85c:	42b3      	cmp	r3, r6
 800a85e:	db0b      	blt.n	800a878 <__lshift+0x38>
 800a860:	4638      	mov	r0, r7
 800a862:	f7ff fd91 	bl	800a388 <_Balloc>
 800a866:	4605      	mov	r5, r0
 800a868:	b948      	cbnz	r0, 800a87e <__lshift+0x3e>
 800a86a:	4602      	mov	r2, r0
 800a86c:	4b28      	ldr	r3, [pc, #160]	; (800a910 <__lshift+0xd0>)
 800a86e:	4829      	ldr	r0, [pc, #164]	; (800a914 <__lshift+0xd4>)
 800a870:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a874:	f000 ff02 	bl	800b67c <__assert_func>
 800a878:	3101      	adds	r1, #1
 800a87a:	005b      	lsls	r3, r3, #1
 800a87c:	e7ee      	b.n	800a85c <__lshift+0x1c>
 800a87e:	2300      	movs	r3, #0
 800a880:	f100 0114 	add.w	r1, r0, #20
 800a884:	f100 0210 	add.w	r2, r0, #16
 800a888:	4618      	mov	r0, r3
 800a88a:	4553      	cmp	r3, sl
 800a88c:	db33      	blt.n	800a8f6 <__lshift+0xb6>
 800a88e:	6920      	ldr	r0, [r4, #16]
 800a890:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a894:	f104 0314 	add.w	r3, r4, #20
 800a898:	f019 091f 	ands.w	r9, r9, #31
 800a89c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a8a0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a8a4:	d02b      	beq.n	800a8fe <__lshift+0xbe>
 800a8a6:	f1c9 0e20 	rsb	lr, r9, #32
 800a8aa:	468a      	mov	sl, r1
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	6818      	ldr	r0, [r3, #0]
 800a8b0:	fa00 f009 	lsl.w	r0, r0, r9
 800a8b4:	4302      	orrs	r2, r0
 800a8b6:	f84a 2b04 	str.w	r2, [sl], #4
 800a8ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8be:	459c      	cmp	ip, r3
 800a8c0:	fa22 f20e 	lsr.w	r2, r2, lr
 800a8c4:	d8f3      	bhi.n	800a8ae <__lshift+0x6e>
 800a8c6:	ebac 0304 	sub.w	r3, ip, r4
 800a8ca:	3b15      	subs	r3, #21
 800a8cc:	f023 0303 	bic.w	r3, r3, #3
 800a8d0:	3304      	adds	r3, #4
 800a8d2:	f104 0015 	add.w	r0, r4, #21
 800a8d6:	4584      	cmp	ip, r0
 800a8d8:	bf38      	it	cc
 800a8da:	2304      	movcc	r3, #4
 800a8dc:	50ca      	str	r2, [r1, r3]
 800a8de:	b10a      	cbz	r2, 800a8e4 <__lshift+0xa4>
 800a8e0:	f108 0602 	add.w	r6, r8, #2
 800a8e4:	3e01      	subs	r6, #1
 800a8e6:	4638      	mov	r0, r7
 800a8e8:	612e      	str	r6, [r5, #16]
 800a8ea:	4621      	mov	r1, r4
 800a8ec:	f7ff fd8c 	bl	800a408 <_Bfree>
 800a8f0:	4628      	mov	r0, r5
 800a8f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8f6:	f842 0f04 	str.w	r0, [r2, #4]!
 800a8fa:	3301      	adds	r3, #1
 800a8fc:	e7c5      	b.n	800a88a <__lshift+0x4a>
 800a8fe:	3904      	subs	r1, #4
 800a900:	f853 2b04 	ldr.w	r2, [r3], #4
 800a904:	f841 2f04 	str.w	r2, [r1, #4]!
 800a908:	459c      	cmp	ip, r3
 800a90a:	d8f9      	bhi.n	800a900 <__lshift+0xc0>
 800a90c:	e7ea      	b.n	800a8e4 <__lshift+0xa4>
 800a90e:	bf00      	nop
 800a910:	0800bbcc 	.word	0x0800bbcc
 800a914:	0800bcc0 	.word	0x0800bcc0

0800a918 <__mcmp>:
 800a918:	b530      	push	{r4, r5, lr}
 800a91a:	6902      	ldr	r2, [r0, #16]
 800a91c:	690c      	ldr	r4, [r1, #16]
 800a91e:	1b12      	subs	r2, r2, r4
 800a920:	d10e      	bne.n	800a940 <__mcmp+0x28>
 800a922:	f100 0314 	add.w	r3, r0, #20
 800a926:	3114      	adds	r1, #20
 800a928:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a92c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a930:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a934:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a938:	42a5      	cmp	r5, r4
 800a93a:	d003      	beq.n	800a944 <__mcmp+0x2c>
 800a93c:	d305      	bcc.n	800a94a <__mcmp+0x32>
 800a93e:	2201      	movs	r2, #1
 800a940:	4610      	mov	r0, r2
 800a942:	bd30      	pop	{r4, r5, pc}
 800a944:	4283      	cmp	r3, r0
 800a946:	d3f3      	bcc.n	800a930 <__mcmp+0x18>
 800a948:	e7fa      	b.n	800a940 <__mcmp+0x28>
 800a94a:	f04f 32ff 	mov.w	r2, #4294967295
 800a94e:	e7f7      	b.n	800a940 <__mcmp+0x28>

0800a950 <__mdiff>:
 800a950:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a954:	460c      	mov	r4, r1
 800a956:	4606      	mov	r6, r0
 800a958:	4611      	mov	r1, r2
 800a95a:	4620      	mov	r0, r4
 800a95c:	4617      	mov	r7, r2
 800a95e:	f7ff ffdb 	bl	800a918 <__mcmp>
 800a962:	1e05      	subs	r5, r0, #0
 800a964:	d110      	bne.n	800a988 <__mdiff+0x38>
 800a966:	4629      	mov	r1, r5
 800a968:	4630      	mov	r0, r6
 800a96a:	f7ff fd0d 	bl	800a388 <_Balloc>
 800a96e:	b930      	cbnz	r0, 800a97e <__mdiff+0x2e>
 800a970:	4b39      	ldr	r3, [pc, #228]	; (800aa58 <__mdiff+0x108>)
 800a972:	4602      	mov	r2, r0
 800a974:	f240 2132 	movw	r1, #562	; 0x232
 800a978:	4838      	ldr	r0, [pc, #224]	; (800aa5c <__mdiff+0x10c>)
 800a97a:	f000 fe7f 	bl	800b67c <__assert_func>
 800a97e:	2301      	movs	r3, #1
 800a980:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a984:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a988:	bfa4      	itt	ge
 800a98a:	463b      	movge	r3, r7
 800a98c:	4627      	movge	r7, r4
 800a98e:	4630      	mov	r0, r6
 800a990:	6879      	ldr	r1, [r7, #4]
 800a992:	bfa6      	itte	ge
 800a994:	461c      	movge	r4, r3
 800a996:	2500      	movge	r5, #0
 800a998:	2501      	movlt	r5, #1
 800a99a:	f7ff fcf5 	bl	800a388 <_Balloc>
 800a99e:	b920      	cbnz	r0, 800a9aa <__mdiff+0x5a>
 800a9a0:	4b2d      	ldr	r3, [pc, #180]	; (800aa58 <__mdiff+0x108>)
 800a9a2:	4602      	mov	r2, r0
 800a9a4:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a9a8:	e7e6      	b.n	800a978 <__mdiff+0x28>
 800a9aa:	693e      	ldr	r6, [r7, #16]
 800a9ac:	60c5      	str	r5, [r0, #12]
 800a9ae:	6925      	ldr	r5, [r4, #16]
 800a9b0:	f107 0114 	add.w	r1, r7, #20
 800a9b4:	f104 0914 	add.w	r9, r4, #20
 800a9b8:	f100 0e14 	add.w	lr, r0, #20
 800a9bc:	f107 0210 	add.w	r2, r7, #16
 800a9c0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800a9c4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800a9c8:	46f2      	mov	sl, lr
 800a9ca:	2700      	movs	r7, #0
 800a9cc:	f859 3b04 	ldr.w	r3, [r9], #4
 800a9d0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a9d4:	fa1f f883 	uxth.w	r8, r3
 800a9d8:	fa17 f78b 	uxtah	r7, r7, fp
 800a9dc:	0c1b      	lsrs	r3, r3, #16
 800a9de:	eba7 0808 	sub.w	r8, r7, r8
 800a9e2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a9e6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a9ea:	fa1f f888 	uxth.w	r8, r8
 800a9ee:	141f      	asrs	r7, r3, #16
 800a9f0:	454d      	cmp	r5, r9
 800a9f2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a9f6:	f84a 3b04 	str.w	r3, [sl], #4
 800a9fa:	d8e7      	bhi.n	800a9cc <__mdiff+0x7c>
 800a9fc:	1b2b      	subs	r3, r5, r4
 800a9fe:	3b15      	subs	r3, #21
 800aa00:	f023 0303 	bic.w	r3, r3, #3
 800aa04:	3304      	adds	r3, #4
 800aa06:	3415      	adds	r4, #21
 800aa08:	42a5      	cmp	r5, r4
 800aa0a:	bf38      	it	cc
 800aa0c:	2304      	movcc	r3, #4
 800aa0e:	4419      	add	r1, r3
 800aa10:	4473      	add	r3, lr
 800aa12:	469e      	mov	lr, r3
 800aa14:	460d      	mov	r5, r1
 800aa16:	4565      	cmp	r5, ip
 800aa18:	d30e      	bcc.n	800aa38 <__mdiff+0xe8>
 800aa1a:	f10c 0203 	add.w	r2, ip, #3
 800aa1e:	1a52      	subs	r2, r2, r1
 800aa20:	f022 0203 	bic.w	r2, r2, #3
 800aa24:	3903      	subs	r1, #3
 800aa26:	458c      	cmp	ip, r1
 800aa28:	bf38      	it	cc
 800aa2a:	2200      	movcc	r2, #0
 800aa2c:	441a      	add	r2, r3
 800aa2e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800aa32:	b17b      	cbz	r3, 800aa54 <__mdiff+0x104>
 800aa34:	6106      	str	r6, [r0, #16]
 800aa36:	e7a5      	b.n	800a984 <__mdiff+0x34>
 800aa38:	f855 8b04 	ldr.w	r8, [r5], #4
 800aa3c:	fa17 f488 	uxtah	r4, r7, r8
 800aa40:	1422      	asrs	r2, r4, #16
 800aa42:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800aa46:	b2a4      	uxth	r4, r4
 800aa48:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800aa4c:	f84e 4b04 	str.w	r4, [lr], #4
 800aa50:	1417      	asrs	r7, r2, #16
 800aa52:	e7e0      	b.n	800aa16 <__mdiff+0xc6>
 800aa54:	3e01      	subs	r6, #1
 800aa56:	e7ea      	b.n	800aa2e <__mdiff+0xde>
 800aa58:	0800bbcc 	.word	0x0800bbcc
 800aa5c:	0800bcc0 	.word	0x0800bcc0

0800aa60 <__ulp>:
 800aa60:	b082      	sub	sp, #8
 800aa62:	ed8d 0b00 	vstr	d0, [sp]
 800aa66:	9b01      	ldr	r3, [sp, #4]
 800aa68:	4912      	ldr	r1, [pc, #72]	; (800aab4 <__ulp+0x54>)
 800aa6a:	4019      	ands	r1, r3
 800aa6c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800aa70:	2900      	cmp	r1, #0
 800aa72:	dd05      	ble.n	800aa80 <__ulp+0x20>
 800aa74:	2200      	movs	r2, #0
 800aa76:	460b      	mov	r3, r1
 800aa78:	ec43 2b10 	vmov	d0, r2, r3
 800aa7c:	b002      	add	sp, #8
 800aa7e:	4770      	bx	lr
 800aa80:	4249      	negs	r1, r1
 800aa82:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800aa86:	ea4f 5021 	mov.w	r0, r1, asr #20
 800aa8a:	f04f 0200 	mov.w	r2, #0
 800aa8e:	f04f 0300 	mov.w	r3, #0
 800aa92:	da04      	bge.n	800aa9e <__ulp+0x3e>
 800aa94:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800aa98:	fa41 f300 	asr.w	r3, r1, r0
 800aa9c:	e7ec      	b.n	800aa78 <__ulp+0x18>
 800aa9e:	f1a0 0114 	sub.w	r1, r0, #20
 800aaa2:	291e      	cmp	r1, #30
 800aaa4:	bfda      	itte	le
 800aaa6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800aaaa:	fa20 f101 	lsrle.w	r1, r0, r1
 800aaae:	2101      	movgt	r1, #1
 800aab0:	460a      	mov	r2, r1
 800aab2:	e7e1      	b.n	800aa78 <__ulp+0x18>
 800aab4:	7ff00000 	.word	0x7ff00000

0800aab8 <__b2d>:
 800aab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaba:	6905      	ldr	r5, [r0, #16]
 800aabc:	f100 0714 	add.w	r7, r0, #20
 800aac0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800aac4:	1f2e      	subs	r6, r5, #4
 800aac6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800aaca:	4620      	mov	r0, r4
 800aacc:	f7ff fd52 	bl	800a574 <__hi0bits>
 800aad0:	f1c0 0320 	rsb	r3, r0, #32
 800aad4:	280a      	cmp	r0, #10
 800aad6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800ab54 <__b2d+0x9c>
 800aada:	600b      	str	r3, [r1, #0]
 800aadc:	dc14      	bgt.n	800ab08 <__b2d+0x50>
 800aade:	f1c0 0e0b 	rsb	lr, r0, #11
 800aae2:	fa24 f10e 	lsr.w	r1, r4, lr
 800aae6:	42b7      	cmp	r7, r6
 800aae8:	ea41 030c 	orr.w	r3, r1, ip
 800aaec:	bf34      	ite	cc
 800aaee:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800aaf2:	2100      	movcs	r1, #0
 800aaf4:	3015      	adds	r0, #21
 800aaf6:	fa04 f000 	lsl.w	r0, r4, r0
 800aafa:	fa21 f10e 	lsr.w	r1, r1, lr
 800aafe:	ea40 0201 	orr.w	r2, r0, r1
 800ab02:	ec43 2b10 	vmov	d0, r2, r3
 800ab06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab08:	42b7      	cmp	r7, r6
 800ab0a:	bf3a      	itte	cc
 800ab0c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ab10:	f1a5 0608 	subcc.w	r6, r5, #8
 800ab14:	2100      	movcs	r1, #0
 800ab16:	380b      	subs	r0, #11
 800ab18:	d017      	beq.n	800ab4a <__b2d+0x92>
 800ab1a:	f1c0 0c20 	rsb	ip, r0, #32
 800ab1e:	fa04 f500 	lsl.w	r5, r4, r0
 800ab22:	42be      	cmp	r6, r7
 800ab24:	fa21 f40c 	lsr.w	r4, r1, ip
 800ab28:	ea45 0504 	orr.w	r5, r5, r4
 800ab2c:	bf8c      	ite	hi
 800ab2e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800ab32:	2400      	movls	r4, #0
 800ab34:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800ab38:	fa01 f000 	lsl.w	r0, r1, r0
 800ab3c:	fa24 f40c 	lsr.w	r4, r4, ip
 800ab40:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ab44:	ea40 0204 	orr.w	r2, r0, r4
 800ab48:	e7db      	b.n	800ab02 <__b2d+0x4a>
 800ab4a:	ea44 030c 	orr.w	r3, r4, ip
 800ab4e:	460a      	mov	r2, r1
 800ab50:	e7d7      	b.n	800ab02 <__b2d+0x4a>
 800ab52:	bf00      	nop
 800ab54:	3ff00000 	.word	0x3ff00000

0800ab58 <__d2b>:
 800ab58:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ab5c:	4689      	mov	r9, r1
 800ab5e:	2101      	movs	r1, #1
 800ab60:	ec57 6b10 	vmov	r6, r7, d0
 800ab64:	4690      	mov	r8, r2
 800ab66:	f7ff fc0f 	bl	800a388 <_Balloc>
 800ab6a:	4604      	mov	r4, r0
 800ab6c:	b930      	cbnz	r0, 800ab7c <__d2b+0x24>
 800ab6e:	4602      	mov	r2, r0
 800ab70:	4b25      	ldr	r3, [pc, #148]	; (800ac08 <__d2b+0xb0>)
 800ab72:	4826      	ldr	r0, [pc, #152]	; (800ac0c <__d2b+0xb4>)
 800ab74:	f240 310a 	movw	r1, #778	; 0x30a
 800ab78:	f000 fd80 	bl	800b67c <__assert_func>
 800ab7c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ab80:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ab84:	bb35      	cbnz	r5, 800abd4 <__d2b+0x7c>
 800ab86:	2e00      	cmp	r6, #0
 800ab88:	9301      	str	r3, [sp, #4]
 800ab8a:	d028      	beq.n	800abde <__d2b+0x86>
 800ab8c:	4668      	mov	r0, sp
 800ab8e:	9600      	str	r6, [sp, #0]
 800ab90:	f7ff fd10 	bl	800a5b4 <__lo0bits>
 800ab94:	9900      	ldr	r1, [sp, #0]
 800ab96:	b300      	cbz	r0, 800abda <__d2b+0x82>
 800ab98:	9a01      	ldr	r2, [sp, #4]
 800ab9a:	f1c0 0320 	rsb	r3, r0, #32
 800ab9e:	fa02 f303 	lsl.w	r3, r2, r3
 800aba2:	430b      	orrs	r3, r1
 800aba4:	40c2      	lsrs	r2, r0
 800aba6:	6163      	str	r3, [r4, #20]
 800aba8:	9201      	str	r2, [sp, #4]
 800abaa:	9b01      	ldr	r3, [sp, #4]
 800abac:	61a3      	str	r3, [r4, #24]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	bf14      	ite	ne
 800abb2:	2202      	movne	r2, #2
 800abb4:	2201      	moveq	r2, #1
 800abb6:	6122      	str	r2, [r4, #16]
 800abb8:	b1d5      	cbz	r5, 800abf0 <__d2b+0x98>
 800abba:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800abbe:	4405      	add	r5, r0
 800abc0:	f8c9 5000 	str.w	r5, [r9]
 800abc4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800abc8:	f8c8 0000 	str.w	r0, [r8]
 800abcc:	4620      	mov	r0, r4
 800abce:	b003      	add	sp, #12
 800abd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800abd4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800abd8:	e7d5      	b.n	800ab86 <__d2b+0x2e>
 800abda:	6161      	str	r1, [r4, #20]
 800abdc:	e7e5      	b.n	800abaa <__d2b+0x52>
 800abde:	a801      	add	r0, sp, #4
 800abe0:	f7ff fce8 	bl	800a5b4 <__lo0bits>
 800abe4:	9b01      	ldr	r3, [sp, #4]
 800abe6:	6163      	str	r3, [r4, #20]
 800abe8:	2201      	movs	r2, #1
 800abea:	6122      	str	r2, [r4, #16]
 800abec:	3020      	adds	r0, #32
 800abee:	e7e3      	b.n	800abb8 <__d2b+0x60>
 800abf0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800abf4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800abf8:	f8c9 0000 	str.w	r0, [r9]
 800abfc:	6918      	ldr	r0, [r3, #16]
 800abfe:	f7ff fcb9 	bl	800a574 <__hi0bits>
 800ac02:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ac06:	e7df      	b.n	800abc8 <__d2b+0x70>
 800ac08:	0800bbcc 	.word	0x0800bbcc
 800ac0c:	0800bcc0 	.word	0x0800bcc0

0800ac10 <__ratio>:
 800ac10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac14:	4688      	mov	r8, r1
 800ac16:	4669      	mov	r1, sp
 800ac18:	4681      	mov	r9, r0
 800ac1a:	f7ff ff4d 	bl	800aab8 <__b2d>
 800ac1e:	a901      	add	r1, sp, #4
 800ac20:	4640      	mov	r0, r8
 800ac22:	ec55 4b10 	vmov	r4, r5, d0
 800ac26:	f7ff ff47 	bl	800aab8 <__b2d>
 800ac2a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ac2e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ac32:	eba3 0c02 	sub.w	ip, r3, r2
 800ac36:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ac3a:	1a9b      	subs	r3, r3, r2
 800ac3c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ac40:	ec51 0b10 	vmov	r0, r1, d0
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	bfd6      	itet	le
 800ac48:	460a      	movle	r2, r1
 800ac4a:	462a      	movgt	r2, r5
 800ac4c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ac50:	468b      	mov	fp, r1
 800ac52:	462f      	mov	r7, r5
 800ac54:	bfd4      	ite	le
 800ac56:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ac5a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ac5e:	4620      	mov	r0, r4
 800ac60:	ee10 2a10 	vmov	r2, s0
 800ac64:	465b      	mov	r3, fp
 800ac66:	4639      	mov	r1, r7
 800ac68:	f7f5 fdf0 	bl	800084c <__aeabi_ddiv>
 800ac6c:	ec41 0b10 	vmov	d0, r0, r1
 800ac70:	b003      	add	sp, #12
 800ac72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ac76 <__copybits>:
 800ac76:	3901      	subs	r1, #1
 800ac78:	b570      	push	{r4, r5, r6, lr}
 800ac7a:	1149      	asrs	r1, r1, #5
 800ac7c:	6914      	ldr	r4, [r2, #16]
 800ac7e:	3101      	adds	r1, #1
 800ac80:	f102 0314 	add.w	r3, r2, #20
 800ac84:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ac88:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ac8c:	1f05      	subs	r5, r0, #4
 800ac8e:	42a3      	cmp	r3, r4
 800ac90:	d30c      	bcc.n	800acac <__copybits+0x36>
 800ac92:	1aa3      	subs	r3, r4, r2
 800ac94:	3b11      	subs	r3, #17
 800ac96:	f023 0303 	bic.w	r3, r3, #3
 800ac9a:	3211      	adds	r2, #17
 800ac9c:	42a2      	cmp	r2, r4
 800ac9e:	bf88      	it	hi
 800aca0:	2300      	movhi	r3, #0
 800aca2:	4418      	add	r0, r3
 800aca4:	2300      	movs	r3, #0
 800aca6:	4288      	cmp	r0, r1
 800aca8:	d305      	bcc.n	800acb6 <__copybits+0x40>
 800acaa:	bd70      	pop	{r4, r5, r6, pc}
 800acac:	f853 6b04 	ldr.w	r6, [r3], #4
 800acb0:	f845 6f04 	str.w	r6, [r5, #4]!
 800acb4:	e7eb      	b.n	800ac8e <__copybits+0x18>
 800acb6:	f840 3b04 	str.w	r3, [r0], #4
 800acba:	e7f4      	b.n	800aca6 <__copybits+0x30>

0800acbc <__any_on>:
 800acbc:	f100 0214 	add.w	r2, r0, #20
 800acc0:	6900      	ldr	r0, [r0, #16]
 800acc2:	114b      	asrs	r3, r1, #5
 800acc4:	4298      	cmp	r0, r3
 800acc6:	b510      	push	{r4, lr}
 800acc8:	db11      	blt.n	800acee <__any_on+0x32>
 800acca:	dd0a      	ble.n	800ace2 <__any_on+0x26>
 800accc:	f011 011f 	ands.w	r1, r1, #31
 800acd0:	d007      	beq.n	800ace2 <__any_on+0x26>
 800acd2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800acd6:	fa24 f001 	lsr.w	r0, r4, r1
 800acda:	fa00 f101 	lsl.w	r1, r0, r1
 800acde:	428c      	cmp	r4, r1
 800ace0:	d10b      	bne.n	800acfa <__any_on+0x3e>
 800ace2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ace6:	4293      	cmp	r3, r2
 800ace8:	d803      	bhi.n	800acf2 <__any_on+0x36>
 800acea:	2000      	movs	r0, #0
 800acec:	bd10      	pop	{r4, pc}
 800acee:	4603      	mov	r3, r0
 800acf0:	e7f7      	b.n	800ace2 <__any_on+0x26>
 800acf2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800acf6:	2900      	cmp	r1, #0
 800acf8:	d0f5      	beq.n	800ace6 <__any_on+0x2a>
 800acfa:	2001      	movs	r0, #1
 800acfc:	e7f6      	b.n	800acec <__any_on+0x30>

0800acfe <_calloc_r>:
 800acfe:	b513      	push	{r0, r1, r4, lr}
 800ad00:	434a      	muls	r2, r1
 800ad02:	4611      	mov	r1, r2
 800ad04:	9201      	str	r2, [sp, #4]
 800ad06:	f000 f859 	bl	800adbc <_malloc_r>
 800ad0a:	4604      	mov	r4, r0
 800ad0c:	b118      	cbz	r0, 800ad16 <_calloc_r+0x18>
 800ad0e:	9a01      	ldr	r2, [sp, #4]
 800ad10:	2100      	movs	r1, #0
 800ad12:	f7fc f8d9 	bl	8006ec8 <memset>
 800ad16:	4620      	mov	r0, r4
 800ad18:	b002      	add	sp, #8
 800ad1a:	bd10      	pop	{r4, pc}

0800ad1c <_free_r>:
 800ad1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ad1e:	2900      	cmp	r1, #0
 800ad20:	d048      	beq.n	800adb4 <_free_r+0x98>
 800ad22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad26:	9001      	str	r0, [sp, #4]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	f1a1 0404 	sub.w	r4, r1, #4
 800ad2e:	bfb8      	it	lt
 800ad30:	18e4      	addlt	r4, r4, r3
 800ad32:	f000 fd31 	bl	800b798 <__malloc_lock>
 800ad36:	4a20      	ldr	r2, [pc, #128]	; (800adb8 <_free_r+0x9c>)
 800ad38:	9801      	ldr	r0, [sp, #4]
 800ad3a:	6813      	ldr	r3, [r2, #0]
 800ad3c:	4615      	mov	r5, r2
 800ad3e:	b933      	cbnz	r3, 800ad4e <_free_r+0x32>
 800ad40:	6063      	str	r3, [r4, #4]
 800ad42:	6014      	str	r4, [r2, #0]
 800ad44:	b003      	add	sp, #12
 800ad46:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ad4a:	f000 bd2b 	b.w	800b7a4 <__malloc_unlock>
 800ad4e:	42a3      	cmp	r3, r4
 800ad50:	d90b      	bls.n	800ad6a <_free_r+0x4e>
 800ad52:	6821      	ldr	r1, [r4, #0]
 800ad54:	1862      	adds	r2, r4, r1
 800ad56:	4293      	cmp	r3, r2
 800ad58:	bf04      	itt	eq
 800ad5a:	681a      	ldreq	r2, [r3, #0]
 800ad5c:	685b      	ldreq	r3, [r3, #4]
 800ad5e:	6063      	str	r3, [r4, #4]
 800ad60:	bf04      	itt	eq
 800ad62:	1852      	addeq	r2, r2, r1
 800ad64:	6022      	streq	r2, [r4, #0]
 800ad66:	602c      	str	r4, [r5, #0]
 800ad68:	e7ec      	b.n	800ad44 <_free_r+0x28>
 800ad6a:	461a      	mov	r2, r3
 800ad6c:	685b      	ldr	r3, [r3, #4]
 800ad6e:	b10b      	cbz	r3, 800ad74 <_free_r+0x58>
 800ad70:	42a3      	cmp	r3, r4
 800ad72:	d9fa      	bls.n	800ad6a <_free_r+0x4e>
 800ad74:	6811      	ldr	r1, [r2, #0]
 800ad76:	1855      	adds	r5, r2, r1
 800ad78:	42a5      	cmp	r5, r4
 800ad7a:	d10b      	bne.n	800ad94 <_free_r+0x78>
 800ad7c:	6824      	ldr	r4, [r4, #0]
 800ad7e:	4421      	add	r1, r4
 800ad80:	1854      	adds	r4, r2, r1
 800ad82:	42a3      	cmp	r3, r4
 800ad84:	6011      	str	r1, [r2, #0]
 800ad86:	d1dd      	bne.n	800ad44 <_free_r+0x28>
 800ad88:	681c      	ldr	r4, [r3, #0]
 800ad8a:	685b      	ldr	r3, [r3, #4]
 800ad8c:	6053      	str	r3, [r2, #4]
 800ad8e:	4421      	add	r1, r4
 800ad90:	6011      	str	r1, [r2, #0]
 800ad92:	e7d7      	b.n	800ad44 <_free_r+0x28>
 800ad94:	d902      	bls.n	800ad9c <_free_r+0x80>
 800ad96:	230c      	movs	r3, #12
 800ad98:	6003      	str	r3, [r0, #0]
 800ad9a:	e7d3      	b.n	800ad44 <_free_r+0x28>
 800ad9c:	6825      	ldr	r5, [r4, #0]
 800ad9e:	1961      	adds	r1, r4, r5
 800ada0:	428b      	cmp	r3, r1
 800ada2:	bf04      	itt	eq
 800ada4:	6819      	ldreq	r1, [r3, #0]
 800ada6:	685b      	ldreq	r3, [r3, #4]
 800ada8:	6063      	str	r3, [r4, #4]
 800adaa:	bf04      	itt	eq
 800adac:	1949      	addeq	r1, r1, r5
 800adae:	6021      	streq	r1, [r4, #0]
 800adb0:	6054      	str	r4, [r2, #4]
 800adb2:	e7c7      	b.n	800ad44 <_free_r+0x28>
 800adb4:	b003      	add	sp, #12
 800adb6:	bd30      	pop	{r4, r5, pc}
 800adb8:	20000658 	.word	0x20000658

0800adbc <_malloc_r>:
 800adbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adbe:	1ccd      	adds	r5, r1, #3
 800adc0:	f025 0503 	bic.w	r5, r5, #3
 800adc4:	3508      	adds	r5, #8
 800adc6:	2d0c      	cmp	r5, #12
 800adc8:	bf38      	it	cc
 800adca:	250c      	movcc	r5, #12
 800adcc:	2d00      	cmp	r5, #0
 800adce:	4606      	mov	r6, r0
 800add0:	db01      	blt.n	800add6 <_malloc_r+0x1a>
 800add2:	42a9      	cmp	r1, r5
 800add4:	d903      	bls.n	800adde <_malloc_r+0x22>
 800add6:	230c      	movs	r3, #12
 800add8:	6033      	str	r3, [r6, #0]
 800adda:	2000      	movs	r0, #0
 800addc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800adde:	f000 fcdb 	bl	800b798 <__malloc_lock>
 800ade2:	4921      	ldr	r1, [pc, #132]	; (800ae68 <_malloc_r+0xac>)
 800ade4:	680a      	ldr	r2, [r1, #0]
 800ade6:	4614      	mov	r4, r2
 800ade8:	b99c      	cbnz	r4, 800ae12 <_malloc_r+0x56>
 800adea:	4f20      	ldr	r7, [pc, #128]	; (800ae6c <_malloc_r+0xb0>)
 800adec:	683b      	ldr	r3, [r7, #0]
 800adee:	b923      	cbnz	r3, 800adfa <_malloc_r+0x3e>
 800adf0:	4621      	mov	r1, r4
 800adf2:	4630      	mov	r0, r6
 800adf4:	f000 fafc 	bl	800b3f0 <_sbrk_r>
 800adf8:	6038      	str	r0, [r7, #0]
 800adfa:	4629      	mov	r1, r5
 800adfc:	4630      	mov	r0, r6
 800adfe:	f000 faf7 	bl	800b3f0 <_sbrk_r>
 800ae02:	1c43      	adds	r3, r0, #1
 800ae04:	d123      	bne.n	800ae4e <_malloc_r+0x92>
 800ae06:	230c      	movs	r3, #12
 800ae08:	6033      	str	r3, [r6, #0]
 800ae0a:	4630      	mov	r0, r6
 800ae0c:	f000 fcca 	bl	800b7a4 <__malloc_unlock>
 800ae10:	e7e3      	b.n	800adda <_malloc_r+0x1e>
 800ae12:	6823      	ldr	r3, [r4, #0]
 800ae14:	1b5b      	subs	r3, r3, r5
 800ae16:	d417      	bmi.n	800ae48 <_malloc_r+0x8c>
 800ae18:	2b0b      	cmp	r3, #11
 800ae1a:	d903      	bls.n	800ae24 <_malloc_r+0x68>
 800ae1c:	6023      	str	r3, [r4, #0]
 800ae1e:	441c      	add	r4, r3
 800ae20:	6025      	str	r5, [r4, #0]
 800ae22:	e004      	b.n	800ae2e <_malloc_r+0x72>
 800ae24:	6863      	ldr	r3, [r4, #4]
 800ae26:	42a2      	cmp	r2, r4
 800ae28:	bf0c      	ite	eq
 800ae2a:	600b      	streq	r3, [r1, #0]
 800ae2c:	6053      	strne	r3, [r2, #4]
 800ae2e:	4630      	mov	r0, r6
 800ae30:	f000 fcb8 	bl	800b7a4 <__malloc_unlock>
 800ae34:	f104 000b 	add.w	r0, r4, #11
 800ae38:	1d23      	adds	r3, r4, #4
 800ae3a:	f020 0007 	bic.w	r0, r0, #7
 800ae3e:	1ac2      	subs	r2, r0, r3
 800ae40:	d0cc      	beq.n	800addc <_malloc_r+0x20>
 800ae42:	1a1b      	subs	r3, r3, r0
 800ae44:	50a3      	str	r3, [r4, r2]
 800ae46:	e7c9      	b.n	800addc <_malloc_r+0x20>
 800ae48:	4622      	mov	r2, r4
 800ae4a:	6864      	ldr	r4, [r4, #4]
 800ae4c:	e7cc      	b.n	800ade8 <_malloc_r+0x2c>
 800ae4e:	1cc4      	adds	r4, r0, #3
 800ae50:	f024 0403 	bic.w	r4, r4, #3
 800ae54:	42a0      	cmp	r0, r4
 800ae56:	d0e3      	beq.n	800ae20 <_malloc_r+0x64>
 800ae58:	1a21      	subs	r1, r4, r0
 800ae5a:	4630      	mov	r0, r6
 800ae5c:	f000 fac8 	bl	800b3f0 <_sbrk_r>
 800ae60:	3001      	adds	r0, #1
 800ae62:	d1dd      	bne.n	800ae20 <_malloc_r+0x64>
 800ae64:	e7cf      	b.n	800ae06 <_malloc_r+0x4a>
 800ae66:	bf00      	nop
 800ae68:	20000658 	.word	0x20000658
 800ae6c:	2000065c 	.word	0x2000065c

0800ae70 <__ssputs_r>:
 800ae70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae74:	688e      	ldr	r6, [r1, #8]
 800ae76:	429e      	cmp	r6, r3
 800ae78:	4682      	mov	sl, r0
 800ae7a:	460c      	mov	r4, r1
 800ae7c:	4690      	mov	r8, r2
 800ae7e:	461f      	mov	r7, r3
 800ae80:	d838      	bhi.n	800aef4 <__ssputs_r+0x84>
 800ae82:	898a      	ldrh	r2, [r1, #12]
 800ae84:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ae88:	d032      	beq.n	800aef0 <__ssputs_r+0x80>
 800ae8a:	6825      	ldr	r5, [r4, #0]
 800ae8c:	6909      	ldr	r1, [r1, #16]
 800ae8e:	eba5 0901 	sub.w	r9, r5, r1
 800ae92:	6965      	ldr	r5, [r4, #20]
 800ae94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ae98:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ae9c:	3301      	adds	r3, #1
 800ae9e:	444b      	add	r3, r9
 800aea0:	106d      	asrs	r5, r5, #1
 800aea2:	429d      	cmp	r5, r3
 800aea4:	bf38      	it	cc
 800aea6:	461d      	movcc	r5, r3
 800aea8:	0553      	lsls	r3, r2, #21
 800aeaa:	d531      	bpl.n	800af10 <__ssputs_r+0xa0>
 800aeac:	4629      	mov	r1, r5
 800aeae:	f7ff ff85 	bl	800adbc <_malloc_r>
 800aeb2:	4606      	mov	r6, r0
 800aeb4:	b950      	cbnz	r0, 800aecc <__ssputs_r+0x5c>
 800aeb6:	230c      	movs	r3, #12
 800aeb8:	f8ca 3000 	str.w	r3, [sl]
 800aebc:	89a3      	ldrh	r3, [r4, #12]
 800aebe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aec2:	81a3      	strh	r3, [r4, #12]
 800aec4:	f04f 30ff 	mov.w	r0, #4294967295
 800aec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aecc:	6921      	ldr	r1, [r4, #16]
 800aece:	464a      	mov	r2, r9
 800aed0:	f7fb ffec 	bl	8006eac <memcpy>
 800aed4:	89a3      	ldrh	r3, [r4, #12]
 800aed6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aeda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aede:	81a3      	strh	r3, [r4, #12]
 800aee0:	6126      	str	r6, [r4, #16]
 800aee2:	6165      	str	r5, [r4, #20]
 800aee4:	444e      	add	r6, r9
 800aee6:	eba5 0509 	sub.w	r5, r5, r9
 800aeea:	6026      	str	r6, [r4, #0]
 800aeec:	60a5      	str	r5, [r4, #8]
 800aeee:	463e      	mov	r6, r7
 800aef0:	42be      	cmp	r6, r7
 800aef2:	d900      	bls.n	800aef6 <__ssputs_r+0x86>
 800aef4:	463e      	mov	r6, r7
 800aef6:	4632      	mov	r2, r6
 800aef8:	6820      	ldr	r0, [r4, #0]
 800aefa:	4641      	mov	r1, r8
 800aefc:	f000 fc32 	bl	800b764 <memmove>
 800af00:	68a3      	ldr	r3, [r4, #8]
 800af02:	6822      	ldr	r2, [r4, #0]
 800af04:	1b9b      	subs	r3, r3, r6
 800af06:	4432      	add	r2, r6
 800af08:	60a3      	str	r3, [r4, #8]
 800af0a:	6022      	str	r2, [r4, #0]
 800af0c:	2000      	movs	r0, #0
 800af0e:	e7db      	b.n	800aec8 <__ssputs_r+0x58>
 800af10:	462a      	mov	r2, r5
 800af12:	f000 fc4d 	bl	800b7b0 <_realloc_r>
 800af16:	4606      	mov	r6, r0
 800af18:	2800      	cmp	r0, #0
 800af1a:	d1e1      	bne.n	800aee0 <__ssputs_r+0x70>
 800af1c:	6921      	ldr	r1, [r4, #16]
 800af1e:	4650      	mov	r0, sl
 800af20:	f7ff fefc 	bl	800ad1c <_free_r>
 800af24:	e7c7      	b.n	800aeb6 <__ssputs_r+0x46>
	...

0800af28 <_svfiprintf_r>:
 800af28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af2c:	4698      	mov	r8, r3
 800af2e:	898b      	ldrh	r3, [r1, #12]
 800af30:	061b      	lsls	r3, r3, #24
 800af32:	b09d      	sub	sp, #116	; 0x74
 800af34:	4607      	mov	r7, r0
 800af36:	460d      	mov	r5, r1
 800af38:	4614      	mov	r4, r2
 800af3a:	d50e      	bpl.n	800af5a <_svfiprintf_r+0x32>
 800af3c:	690b      	ldr	r3, [r1, #16]
 800af3e:	b963      	cbnz	r3, 800af5a <_svfiprintf_r+0x32>
 800af40:	2140      	movs	r1, #64	; 0x40
 800af42:	f7ff ff3b 	bl	800adbc <_malloc_r>
 800af46:	6028      	str	r0, [r5, #0]
 800af48:	6128      	str	r0, [r5, #16]
 800af4a:	b920      	cbnz	r0, 800af56 <_svfiprintf_r+0x2e>
 800af4c:	230c      	movs	r3, #12
 800af4e:	603b      	str	r3, [r7, #0]
 800af50:	f04f 30ff 	mov.w	r0, #4294967295
 800af54:	e0d1      	b.n	800b0fa <_svfiprintf_r+0x1d2>
 800af56:	2340      	movs	r3, #64	; 0x40
 800af58:	616b      	str	r3, [r5, #20]
 800af5a:	2300      	movs	r3, #0
 800af5c:	9309      	str	r3, [sp, #36]	; 0x24
 800af5e:	2320      	movs	r3, #32
 800af60:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800af64:	f8cd 800c 	str.w	r8, [sp, #12]
 800af68:	2330      	movs	r3, #48	; 0x30
 800af6a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b114 <_svfiprintf_r+0x1ec>
 800af6e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800af72:	f04f 0901 	mov.w	r9, #1
 800af76:	4623      	mov	r3, r4
 800af78:	469a      	mov	sl, r3
 800af7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af7e:	b10a      	cbz	r2, 800af84 <_svfiprintf_r+0x5c>
 800af80:	2a25      	cmp	r2, #37	; 0x25
 800af82:	d1f9      	bne.n	800af78 <_svfiprintf_r+0x50>
 800af84:	ebba 0b04 	subs.w	fp, sl, r4
 800af88:	d00b      	beq.n	800afa2 <_svfiprintf_r+0x7a>
 800af8a:	465b      	mov	r3, fp
 800af8c:	4622      	mov	r2, r4
 800af8e:	4629      	mov	r1, r5
 800af90:	4638      	mov	r0, r7
 800af92:	f7ff ff6d 	bl	800ae70 <__ssputs_r>
 800af96:	3001      	adds	r0, #1
 800af98:	f000 80aa 	beq.w	800b0f0 <_svfiprintf_r+0x1c8>
 800af9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af9e:	445a      	add	r2, fp
 800afa0:	9209      	str	r2, [sp, #36]	; 0x24
 800afa2:	f89a 3000 	ldrb.w	r3, [sl]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	f000 80a2 	beq.w	800b0f0 <_svfiprintf_r+0x1c8>
 800afac:	2300      	movs	r3, #0
 800afae:	f04f 32ff 	mov.w	r2, #4294967295
 800afb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800afb6:	f10a 0a01 	add.w	sl, sl, #1
 800afba:	9304      	str	r3, [sp, #16]
 800afbc:	9307      	str	r3, [sp, #28]
 800afbe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800afc2:	931a      	str	r3, [sp, #104]	; 0x68
 800afc4:	4654      	mov	r4, sl
 800afc6:	2205      	movs	r2, #5
 800afc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afcc:	4851      	ldr	r0, [pc, #324]	; (800b114 <_svfiprintf_r+0x1ec>)
 800afce:	f7f5 f907 	bl	80001e0 <memchr>
 800afd2:	9a04      	ldr	r2, [sp, #16]
 800afd4:	b9d8      	cbnz	r0, 800b00e <_svfiprintf_r+0xe6>
 800afd6:	06d0      	lsls	r0, r2, #27
 800afd8:	bf44      	itt	mi
 800afda:	2320      	movmi	r3, #32
 800afdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800afe0:	0711      	lsls	r1, r2, #28
 800afe2:	bf44      	itt	mi
 800afe4:	232b      	movmi	r3, #43	; 0x2b
 800afe6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800afea:	f89a 3000 	ldrb.w	r3, [sl]
 800afee:	2b2a      	cmp	r3, #42	; 0x2a
 800aff0:	d015      	beq.n	800b01e <_svfiprintf_r+0xf6>
 800aff2:	9a07      	ldr	r2, [sp, #28]
 800aff4:	4654      	mov	r4, sl
 800aff6:	2000      	movs	r0, #0
 800aff8:	f04f 0c0a 	mov.w	ip, #10
 800affc:	4621      	mov	r1, r4
 800affe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b002:	3b30      	subs	r3, #48	; 0x30
 800b004:	2b09      	cmp	r3, #9
 800b006:	d94e      	bls.n	800b0a6 <_svfiprintf_r+0x17e>
 800b008:	b1b0      	cbz	r0, 800b038 <_svfiprintf_r+0x110>
 800b00a:	9207      	str	r2, [sp, #28]
 800b00c:	e014      	b.n	800b038 <_svfiprintf_r+0x110>
 800b00e:	eba0 0308 	sub.w	r3, r0, r8
 800b012:	fa09 f303 	lsl.w	r3, r9, r3
 800b016:	4313      	orrs	r3, r2
 800b018:	9304      	str	r3, [sp, #16]
 800b01a:	46a2      	mov	sl, r4
 800b01c:	e7d2      	b.n	800afc4 <_svfiprintf_r+0x9c>
 800b01e:	9b03      	ldr	r3, [sp, #12]
 800b020:	1d19      	adds	r1, r3, #4
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	9103      	str	r1, [sp, #12]
 800b026:	2b00      	cmp	r3, #0
 800b028:	bfbb      	ittet	lt
 800b02a:	425b      	neglt	r3, r3
 800b02c:	f042 0202 	orrlt.w	r2, r2, #2
 800b030:	9307      	strge	r3, [sp, #28]
 800b032:	9307      	strlt	r3, [sp, #28]
 800b034:	bfb8      	it	lt
 800b036:	9204      	strlt	r2, [sp, #16]
 800b038:	7823      	ldrb	r3, [r4, #0]
 800b03a:	2b2e      	cmp	r3, #46	; 0x2e
 800b03c:	d10c      	bne.n	800b058 <_svfiprintf_r+0x130>
 800b03e:	7863      	ldrb	r3, [r4, #1]
 800b040:	2b2a      	cmp	r3, #42	; 0x2a
 800b042:	d135      	bne.n	800b0b0 <_svfiprintf_r+0x188>
 800b044:	9b03      	ldr	r3, [sp, #12]
 800b046:	1d1a      	adds	r2, r3, #4
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	9203      	str	r2, [sp, #12]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	bfb8      	it	lt
 800b050:	f04f 33ff 	movlt.w	r3, #4294967295
 800b054:	3402      	adds	r4, #2
 800b056:	9305      	str	r3, [sp, #20]
 800b058:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b124 <_svfiprintf_r+0x1fc>
 800b05c:	7821      	ldrb	r1, [r4, #0]
 800b05e:	2203      	movs	r2, #3
 800b060:	4650      	mov	r0, sl
 800b062:	f7f5 f8bd 	bl	80001e0 <memchr>
 800b066:	b140      	cbz	r0, 800b07a <_svfiprintf_r+0x152>
 800b068:	2340      	movs	r3, #64	; 0x40
 800b06a:	eba0 000a 	sub.w	r0, r0, sl
 800b06e:	fa03 f000 	lsl.w	r0, r3, r0
 800b072:	9b04      	ldr	r3, [sp, #16]
 800b074:	4303      	orrs	r3, r0
 800b076:	3401      	adds	r4, #1
 800b078:	9304      	str	r3, [sp, #16]
 800b07a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b07e:	4826      	ldr	r0, [pc, #152]	; (800b118 <_svfiprintf_r+0x1f0>)
 800b080:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b084:	2206      	movs	r2, #6
 800b086:	f7f5 f8ab 	bl	80001e0 <memchr>
 800b08a:	2800      	cmp	r0, #0
 800b08c:	d038      	beq.n	800b100 <_svfiprintf_r+0x1d8>
 800b08e:	4b23      	ldr	r3, [pc, #140]	; (800b11c <_svfiprintf_r+0x1f4>)
 800b090:	bb1b      	cbnz	r3, 800b0da <_svfiprintf_r+0x1b2>
 800b092:	9b03      	ldr	r3, [sp, #12]
 800b094:	3307      	adds	r3, #7
 800b096:	f023 0307 	bic.w	r3, r3, #7
 800b09a:	3308      	adds	r3, #8
 800b09c:	9303      	str	r3, [sp, #12]
 800b09e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0a0:	4433      	add	r3, r6
 800b0a2:	9309      	str	r3, [sp, #36]	; 0x24
 800b0a4:	e767      	b.n	800af76 <_svfiprintf_r+0x4e>
 800b0a6:	fb0c 3202 	mla	r2, ip, r2, r3
 800b0aa:	460c      	mov	r4, r1
 800b0ac:	2001      	movs	r0, #1
 800b0ae:	e7a5      	b.n	800affc <_svfiprintf_r+0xd4>
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	3401      	adds	r4, #1
 800b0b4:	9305      	str	r3, [sp, #20]
 800b0b6:	4619      	mov	r1, r3
 800b0b8:	f04f 0c0a 	mov.w	ip, #10
 800b0bc:	4620      	mov	r0, r4
 800b0be:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b0c2:	3a30      	subs	r2, #48	; 0x30
 800b0c4:	2a09      	cmp	r2, #9
 800b0c6:	d903      	bls.n	800b0d0 <_svfiprintf_r+0x1a8>
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d0c5      	beq.n	800b058 <_svfiprintf_r+0x130>
 800b0cc:	9105      	str	r1, [sp, #20]
 800b0ce:	e7c3      	b.n	800b058 <_svfiprintf_r+0x130>
 800b0d0:	fb0c 2101 	mla	r1, ip, r1, r2
 800b0d4:	4604      	mov	r4, r0
 800b0d6:	2301      	movs	r3, #1
 800b0d8:	e7f0      	b.n	800b0bc <_svfiprintf_r+0x194>
 800b0da:	ab03      	add	r3, sp, #12
 800b0dc:	9300      	str	r3, [sp, #0]
 800b0de:	462a      	mov	r2, r5
 800b0e0:	4b0f      	ldr	r3, [pc, #60]	; (800b120 <_svfiprintf_r+0x1f8>)
 800b0e2:	a904      	add	r1, sp, #16
 800b0e4:	4638      	mov	r0, r7
 800b0e6:	f7fb ff97 	bl	8007018 <_printf_float>
 800b0ea:	1c42      	adds	r2, r0, #1
 800b0ec:	4606      	mov	r6, r0
 800b0ee:	d1d6      	bne.n	800b09e <_svfiprintf_r+0x176>
 800b0f0:	89ab      	ldrh	r3, [r5, #12]
 800b0f2:	065b      	lsls	r3, r3, #25
 800b0f4:	f53f af2c 	bmi.w	800af50 <_svfiprintf_r+0x28>
 800b0f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b0fa:	b01d      	add	sp, #116	; 0x74
 800b0fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b100:	ab03      	add	r3, sp, #12
 800b102:	9300      	str	r3, [sp, #0]
 800b104:	462a      	mov	r2, r5
 800b106:	4b06      	ldr	r3, [pc, #24]	; (800b120 <_svfiprintf_r+0x1f8>)
 800b108:	a904      	add	r1, sp, #16
 800b10a:	4638      	mov	r0, r7
 800b10c:	f7fc fa28 	bl	8007560 <_printf_i>
 800b110:	e7eb      	b.n	800b0ea <_svfiprintf_r+0x1c2>
 800b112:	bf00      	nop
 800b114:	0800be1c 	.word	0x0800be1c
 800b118:	0800be26 	.word	0x0800be26
 800b11c:	08007019 	.word	0x08007019
 800b120:	0800ae71 	.word	0x0800ae71
 800b124:	0800be22 	.word	0x0800be22

0800b128 <__sfputc_r>:
 800b128:	6893      	ldr	r3, [r2, #8]
 800b12a:	3b01      	subs	r3, #1
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	b410      	push	{r4}
 800b130:	6093      	str	r3, [r2, #8]
 800b132:	da08      	bge.n	800b146 <__sfputc_r+0x1e>
 800b134:	6994      	ldr	r4, [r2, #24]
 800b136:	42a3      	cmp	r3, r4
 800b138:	db01      	blt.n	800b13e <__sfputc_r+0x16>
 800b13a:	290a      	cmp	r1, #10
 800b13c:	d103      	bne.n	800b146 <__sfputc_r+0x1e>
 800b13e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b142:	f000 b9bb 	b.w	800b4bc <__swbuf_r>
 800b146:	6813      	ldr	r3, [r2, #0]
 800b148:	1c58      	adds	r0, r3, #1
 800b14a:	6010      	str	r0, [r2, #0]
 800b14c:	7019      	strb	r1, [r3, #0]
 800b14e:	4608      	mov	r0, r1
 800b150:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b154:	4770      	bx	lr

0800b156 <__sfputs_r>:
 800b156:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b158:	4606      	mov	r6, r0
 800b15a:	460f      	mov	r7, r1
 800b15c:	4614      	mov	r4, r2
 800b15e:	18d5      	adds	r5, r2, r3
 800b160:	42ac      	cmp	r4, r5
 800b162:	d101      	bne.n	800b168 <__sfputs_r+0x12>
 800b164:	2000      	movs	r0, #0
 800b166:	e007      	b.n	800b178 <__sfputs_r+0x22>
 800b168:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b16c:	463a      	mov	r2, r7
 800b16e:	4630      	mov	r0, r6
 800b170:	f7ff ffda 	bl	800b128 <__sfputc_r>
 800b174:	1c43      	adds	r3, r0, #1
 800b176:	d1f3      	bne.n	800b160 <__sfputs_r+0xa>
 800b178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b17c <_vfiprintf_r>:
 800b17c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b180:	460d      	mov	r5, r1
 800b182:	b09d      	sub	sp, #116	; 0x74
 800b184:	4614      	mov	r4, r2
 800b186:	4698      	mov	r8, r3
 800b188:	4606      	mov	r6, r0
 800b18a:	b118      	cbz	r0, 800b194 <_vfiprintf_r+0x18>
 800b18c:	6983      	ldr	r3, [r0, #24]
 800b18e:	b90b      	cbnz	r3, 800b194 <_vfiprintf_r+0x18>
 800b190:	f7fe fc68 	bl	8009a64 <__sinit>
 800b194:	4b89      	ldr	r3, [pc, #548]	; (800b3bc <_vfiprintf_r+0x240>)
 800b196:	429d      	cmp	r5, r3
 800b198:	d11b      	bne.n	800b1d2 <_vfiprintf_r+0x56>
 800b19a:	6875      	ldr	r5, [r6, #4]
 800b19c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b19e:	07d9      	lsls	r1, r3, #31
 800b1a0:	d405      	bmi.n	800b1ae <_vfiprintf_r+0x32>
 800b1a2:	89ab      	ldrh	r3, [r5, #12]
 800b1a4:	059a      	lsls	r2, r3, #22
 800b1a6:	d402      	bmi.n	800b1ae <_vfiprintf_r+0x32>
 800b1a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b1aa:	f7ff f86c 	bl	800a286 <__retarget_lock_acquire_recursive>
 800b1ae:	89ab      	ldrh	r3, [r5, #12]
 800b1b0:	071b      	lsls	r3, r3, #28
 800b1b2:	d501      	bpl.n	800b1b8 <_vfiprintf_r+0x3c>
 800b1b4:	692b      	ldr	r3, [r5, #16]
 800b1b6:	b9eb      	cbnz	r3, 800b1f4 <_vfiprintf_r+0x78>
 800b1b8:	4629      	mov	r1, r5
 800b1ba:	4630      	mov	r0, r6
 800b1bc:	f000 f9f0 	bl	800b5a0 <__swsetup_r>
 800b1c0:	b1c0      	cbz	r0, 800b1f4 <_vfiprintf_r+0x78>
 800b1c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b1c4:	07dc      	lsls	r4, r3, #31
 800b1c6:	d50e      	bpl.n	800b1e6 <_vfiprintf_r+0x6a>
 800b1c8:	f04f 30ff 	mov.w	r0, #4294967295
 800b1cc:	b01d      	add	sp, #116	; 0x74
 800b1ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1d2:	4b7b      	ldr	r3, [pc, #492]	; (800b3c0 <_vfiprintf_r+0x244>)
 800b1d4:	429d      	cmp	r5, r3
 800b1d6:	d101      	bne.n	800b1dc <_vfiprintf_r+0x60>
 800b1d8:	68b5      	ldr	r5, [r6, #8]
 800b1da:	e7df      	b.n	800b19c <_vfiprintf_r+0x20>
 800b1dc:	4b79      	ldr	r3, [pc, #484]	; (800b3c4 <_vfiprintf_r+0x248>)
 800b1de:	429d      	cmp	r5, r3
 800b1e0:	bf08      	it	eq
 800b1e2:	68f5      	ldreq	r5, [r6, #12]
 800b1e4:	e7da      	b.n	800b19c <_vfiprintf_r+0x20>
 800b1e6:	89ab      	ldrh	r3, [r5, #12]
 800b1e8:	0598      	lsls	r0, r3, #22
 800b1ea:	d4ed      	bmi.n	800b1c8 <_vfiprintf_r+0x4c>
 800b1ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b1ee:	f7ff f84b 	bl	800a288 <__retarget_lock_release_recursive>
 800b1f2:	e7e9      	b.n	800b1c8 <_vfiprintf_r+0x4c>
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	9309      	str	r3, [sp, #36]	; 0x24
 800b1f8:	2320      	movs	r3, #32
 800b1fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b1fe:	f8cd 800c 	str.w	r8, [sp, #12]
 800b202:	2330      	movs	r3, #48	; 0x30
 800b204:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b3c8 <_vfiprintf_r+0x24c>
 800b208:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b20c:	f04f 0901 	mov.w	r9, #1
 800b210:	4623      	mov	r3, r4
 800b212:	469a      	mov	sl, r3
 800b214:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b218:	b10a      	cbz	r2, 800b21e <_vfiprintf_r+0xa2>
 800b21a:	2a25      	cmp	r2, #37	; 0x25
 800b21c:	d1f9      	bne.n	800b212 <_vfiprintf_r+0x96>
 800b21e:	ebba 0b04 	subs.w	fp, sl, r4
 800b222:	d00b      	beq.n	800b23c <_vfiprintf_r+0xc0>
 800b224:	465b      	mov	r3, fp
 800b226:	4622      	mov	r2, r4
 800b228:	4629      	mov	r1, r5
 800b22a:	4630      	mov	r0, r6
 800b22c:	f7ff ff93 	bl	800b156 <__sfputs_r>
 800b230:	3001      	adds	r0, #1
 800b232:	f000 80aa 	beq.w	800b38a <_vfiprintf_r+0x20e>
 800b236:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b238:	445a      	add	r2, fp
 800b23a:	9209      	str	r2, [sp, #36]	; 0x24
 800b23c:	f89a 3000 	ldrb.w	r3, [sl]
 800b240:	2b00      	cmp	r3, #0
 800b242:	f000 80a2 	beq.w	800b38a <_vfiprintf_r+0x20e>
 800b246:	2300      	movs	r3, #0
 800b248:	f04f 32ff 	mov.w	r2, #4294967295
 800b24c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b250:	f10a 0a01 	add.w	sl, sl, #1
 800b254:	9304      	str	r3, [sp, #16]
 800b256:	9307      	str	r3, [sp, #28]
 800b258:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b25c:	931a      	str	r3, [sp, #104]	; 0x68
 800b25e:	4654      	mov	r4, sl
 800b260:	2205      	movs	r2, #5
 800b262:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b266:	4858      	ldr	r0, [pc, #352]	; (800b3c8 <_vfiprintf_r+0x24c>)
 800b268:	f7f4 ffba 	bl	80001e0 <memchr>
 800b26c:	9a04      	ldr	r2, [sp, #16]
 800b26e:	b9d8      	cbnz	r0, 800b2a8 <_vfiprintf_r+0x12c>
 800b270:	06d1      	lsls	r1, r2, #27
 800b272:	bf44      	itt	mi
 800b274:	2320      	movmi	r3, #32
 800b276:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b27a:	0713      	lsls	r3, r2, #28
 800b27c:	bf44      	itt	mi
 800b27e:	232b      	movmi	r3, #43	; 0x2b
 800b280:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b284:	f89a 3000 	ldrb.w	r3, [sl]
 800b288:	2b2a      	cmp	r3, #42	; 0x2a
 800b28a:	d015      	beq.n	800b2b8 <_vfiprintf_r+0x13c>
 800b28c:	9a07      	ldr	r2, [sp, #28]
 800b28e:	4654      	mov	r4, sl
 800b290:	2000      	movs	r0, #0
 800b292:	f04f 0c0a 	mov.w	ip, #10
 800b296:	4621      	mov	r1, r4
 800b298:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b29c:	3b30      	subs	r3, #48	; 0x30
 800b29e:	2b09      	cmp	r3, #9
 800b2a0:	d94e      	bls.n	800b340 <_vfiprintf_r+0x1c4>
 800b2a2:	b1b0      	cbz	r0, 800b2d2 <_vfiprintf_r+0x156>
 800b2a4:	9207      	str	r2, [sp, #28]
 800b2a6:	e014      	b.n	800b2d2 <_vfiprintf_r+0x156>
 800b2a8:	eba0 0308 	sub.w	r3, r0, r8
 800b2ac:	fa09 f303 	lsl.w	r3, r9, r3
 800b2b0:	4313      	orrs	r3, r2
 800b2b2:	9304      	str	r3, [sp, #16]
 800b2b4:	46a2      	mov	sl, r4
 800b2b6:	e7d2      	b.n	800b25e <_vfiprintf_r+0xe2>
 800b2b8:	9b03      	ldr	r3, [sp, #12]
 800b2ba:	1d19      	adds	r1, r3, #4
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	9103      	str	r1, [sp, #12]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	bfbb      	ittet	lt
 800b2c4:	425b      	neglt	r3, r3
 800b2c6:	f042 0202 	orrlt.w	r2, r2, #2
 800b2ca:	9307      	strge	r3, [sp, #28]
 800b2cc:	9307      	strlt	r3, [sp, #28]
 800b2ce:	bfb8      	it	lt
 800b2d0:	9204      	strlt	r2, [sp, #16]
 800b2d2:	7823      	ldrb	r3, [r4, #0]
 800b2d4:	2b2e      	cmp	r3, #46	; 0x2e
 800b2d6:	d10c      	bne.n	800b2f2 <_vfiprintf_r+0x176>
 800b2d8:	7863      	ldrb	r3, [r4, #1]
 800b2da:	2b2a      	cmp	r3, #42	; 0x2a
 800b2dc:	d135      	bne.n	800b34a <_vfiprintf_r+0x1ce>
 800b2de:	9b03      	ldr	r3, [sp, #12]
 800b2e0:	1d1a      	adds	r2, r3, #4
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	9203      	str	r2, [sp, #12]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	bfb8      	it	lt
 800b2ea:	f04f 33ff 	movlt.w	r3, #4294967295
 800b2ee:	3402      	adds	r4, #2
 800b2f0:	9305      	str	r3, [sp, #20]
 800b2f2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b3d8 <_vfiprintf_r+0x25c>
 800b2f6:	7821      	ldrb	r1, [r4, #0]
 800b2f8:	2203      	movs	r2, #3
 800b2fa:	4650      	mov	r0, sl
 800b2fc:	f7f4 ff70 	bl	80001e0 <memchr>
 800b300:	b140      	cbz	r0, 800b314 <_vfiprintf_r+0x198>
 800b302:	2340      	movs	r3, #64	; 0x40
 800b304:	eba0 000a 	sub.w	r0, r0, sl
 800b308:	fa03 f000 	lsl.w	r0, r3, r0
 800b30c:	9b04      	ldr	r3, [sp, #16]
 800b30e:	4303      	orrs	r3, r0
 800b310:	3401      	adds	r4, #1
 800b312:	9304      	str	r3, [sp, #16]
 800b314:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b318:	482c      	ldr	r0, [pc, #176]	; (800b3cc <_vfiprintf_r+0x250>)
 800b31a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b31e:	2206      	movs	r2, #6
 800b320:	f7f4 ff5e 	bl	80001e0 <memchr>
 800b324:	2800      	cmp	r0, #0
 800b326:	d03f      	beq.n	800b3a8 <_vfiprintf_r+0x22c>
 800b328:	4b29      	ldr	r3, [pc, #164]	; (800b3d0 <_vfiprintf_r+0x254>)
 800b32a:	bb1b      	cbnz	r3, 800b374 <_vfiprintf_r+0x1f8>
 800b32c:	9b03      	ldr	r3, [sp, #12]
 800b32e:	3307      	adds	r3, #7
 800b330:	f023 0307 	bic.w	r3, r3, #7
 800b334:	3308      	adds	r3, #8
 800b336:	9303      	str	r3, [sp, #12]
 800b338:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b33a:	443b      	add	r3, r7
 800b33c:	9309      	str	r3, [sp, #36]	; 0x24
 800b33e:	e767      	b.n	800b210 <_vfiprintf_r+0x94>
 800b340:	fb0c 3202 	mla	r2, ip, r2, r3
 800b344:	460c      	mov	r4, r1
 800b346:	2001      	movs	r0, #1
 800b348:	e7a5      	b.n	800b296 <_vfiprintf_r+0x11a>
 800b34a:	2300      	movs	r3, #0
 800b34c:	3401      	adds	r4, #1
 800b34e:	9305      	str	r3, [sp, #20]
 800b350:	4619      	mov	r1, r3
 800b352:	f04f 0c0a 	mov.w	ip, #10
 800b356:	4620      	mov	r0, r4
 800b358:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b35c:	3a30      	subs	r2, #48	; 0x30
 800b35e:	2a09      	cmp	r2, #9
 800b360:	d903      	bls.n	800b36a <_vfiprintf_r+0x1ee>
 800b362:	2b00      	cmp	r3, #0
 800b364:	d0c5      	beq.n	800b2f2 <_vfiprintf_r+0x176>
 800b366:	9105      	str	r1, [sp, #20]
 800b368:	e7c3      	b.n	800b2f2 <_vfiprintf_r+0x176>
 800b36a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b36e:	4604      	mov	r4, r0
 800b370:	2301      	movs	r3, #1
 800b372:	e7f0      	b.n	800b356 <_vfiprintf_r+0x1da>
 800b374:	ab03      	add	r3, sp, #12
 800b376:	9300      	str	r3, [sp, #0]
 800b378:	462a      	mov	r2, r5
 800b37a:	4b16      	ldr	r3, [pc, #88]	; (800b3d4 <_vfiprintf_r+0x258>)
 800b37c:	a904      	add	r1, sp, #16
 800b37e:	4630      	mov	r0, r6
 800b380:	f7fb fe4a 	bl	8007018 <_printf_float>
 800b384:	4607      	mov	r7, r0
 800b386:	1c78      	adds	r0, r7, #1
 800b388:	d1d6      	bne.n	800b338 <_vfiprintf_r+0x1bc>
 800b38a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b38c:	07d9      	lsls	r1, r3, #31
 800b38e:	d405      	bmi.n	800b39c <_vfiprintf_r+0x220>
 800b390:	89ab      	ldrh	r3, [r5, #12]
 800b392:	059a      	lsls	r2, r3, #22
 800b394:	d402      	bmi.n	800b39c <_vfiprintf_r+0x220>
 800b396:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b398:	f7fe ff76 	bl	800a288 <__retarget_lock_release_recursive>
 800b39c:	89ab      	ldrh	r3, [r5, #12]
 800b39e:	065b      	lsls	r3, r3, #25
 800b3a0:	f53f af12 	bmi.w	800b1c8 <_vfiprintf_r+0x4c>
 800b3a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b3a6:	e711      	b.n	800b1cc <_vfiprintf_r+0x50>
 800b3a8:	ab03      	add	r3, sp, #12
 800b3aa:	9300      	str	r3, [sp, #0]
 800b3ac:	462a      	mov	r2, r5
 800b3ae:	4b09      	ldr	r3, [pc, #36]	; (800b3d4 <_vfiprintf_r+0x258>)
 800b3b0:	a904      	add	r1, sp, #16
 800b3b2:	4630      	mov	r0, r6
 800b3b4:	f7fc f8d4 	bl	8007560 <_printf_i>
 800b3b8:	e7e4      	b.n	800b384 <_vfiprintf_r+0x208>
 800b3ba:	bf00      	nop
 800b3bc:	0800bc00 	.word	0x0800bc00
 800b3c0:	0800bc20 	.word	0x0800bc20
 800b3c4:	0800bbe0 	.word	0x0800bbe0
 800b3c8:	0800be1c 	.word	0x0800be1c
 800b3cc:	0800be26 	.word	0x0800be26
 800b3d0:	08007019 	.word	0x08007019
 800b3d4:	0800b157 	.word	0x0800b157
 800b3d8:	0800be22 	.word	0x0800be22
 800b3dc:	00000000 	.word	0x00000000

0800b3e0 <nan>:
 800b3e0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b3e8 <nan+0x8>
 800b3e4:	4770      	bx	lr
 800b3e6:	bf00      	nop
 800b3e8:	00000000 	.word	0x00000000
 800b3ec:	7ff80000 	.word	0x7ff80000

0800b3f0 <_sbrk_r>:
 800b3f0:	b538      	push	{r3, r4, r5, lr}
 800b3f2:	4d06      	ldr	r5, [pc, #24]	; (800b40c <_sbrk_r+0x1c>)
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	4604      	mov	r4, r0
 800b3f8:	4608      	mov	r0, r1
 800b3fa:	602b      	str	r3, [r5, #0]
 800b3fc:	f7f7 fa70 	bl	80028e0 <_sbrk>
 800b400:	1c43      	adds	r3, r0, #1
 800b402:	d102      	bne.n	800b40a <_sbrk_r+0x1a>
 800b404:	682b      	ldr	r3, [r5, #0]
 800b406:	b103      	cbz	r3, 800b40a <_sbrk_r+0x1a>
 800b408:	6023      	str	r3, [r4, #0]
 800b40a:	bd38      	pop	{r3, r4, r5, pc}
 800b40c:	20002da0 	.word	0x20002da0

0800b410 <__sread>:
 800b410:	b510      	push	{r4, lr}
 800b412:	460c      	mov	r4, r1
 800b414:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b418:	f000 f9f0 	bl	800b7fc <_read_r>
 800b41c:	2800      	cmp	r0, #0
 800b41e:	bfab      	itete	ge
 800b420:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b422:	89a3      	ldrhlt	r3, [r4, #12]
 800b424:	181b      	addge	r3, r3, r0
 800b426:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b42a:	bfac      	ite	ge
 800b42c:	6563      	strge	r3, [r4, #84]	; 0x54
 800b42e:	81a3      	strhlt	r3, [r4, #12]
 800b430:	bd10      	pop	{r4, pc}

0800b432 <__swrite>:
 800b432:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b436:	461f      	mov	r7, r3
 800b438:	898b      	ldrh	r3, [r1, #12]
 800b43a:	05db      	lsls	r3, r3, #23
 800b43c:	4605      	mov	r5, r0
 800b43e:	460c      	mov	r4, r1
 800b440:	4616      	mov	r6, r2
 800b442:	d505      	bpl.n	800b450 <__swrite+0x1e>
 800b444:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b448:	2302      	movs	r3, #2
 800b44a:	2200      	movs	r2, #0
 800b44c:	f000 f978 	bl	800b740 <_lseek_r>
 800b450:	89a3      	ldrh	r3, [r4, #12]
 800b452:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b456:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b45a:	81a3      	strh	r3, [r4, #12]
 800b45c:	4632      	mov	r2, r6
 800b45e:	463b      	mov	r3, r7
 800b460:	4628      	mov	r0, r5
 800b462:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b466:	f000 b889 	b.w	800b57c <_write_r>

0800b46a <__sseek>:
 800b46a:	b510      	push	{r4, lr}
 800b46c:	460c      	mov	r4, r1
 800b46e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b472:	f000 f965 	bl	800b740 <_lseek_r>
 800b476:	1c43      	adds	r3, r0, #1
 800b478:	89a3      	ldrh	r3, [r4, #12]
 800b47a:	bf15      	itete	ne
 800b47c:	6560      	strne	r0, [r4, #84]	; 0x54
 800b47e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b482:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b486:	81a3      	strheq	r3, [r4, #12]
 800b488:	bf18      	it	ne
 800b48a:	81a3      	strhne	r3, [r4, #12]
 800b48c:	bd10      	pop	{r4, pc}

0800b48e <__sclose>:
 800b48e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b492:	f000 b911 	b.w	800b6b8 <_close_r>

0800b496 <strncmp>:
 800b496:	b510      	push	{r4, lr}
 800b498:	b16a      	cbz	r2, 800b4b6 <strncmp+0x20>
 800b49a:	3901      	subs	r1, #1
 800b49c:	1884      	adds	r4, r0, r2
 800b49e:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b4a2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b4a6:	4293      	cmp	r3, r2
 800b4a8:	d103      	bne.n	800b4b2 <strncmp+0x1c>
 800b4aa:	42a0      	cmp	r0, r4
 800b4ac:	d001      	beq.n	800b4b2 <strncmp+0x1c>
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d1f5      	bne.n	800b49e <strncmp+0x8>
 800b4b2:	1a98      	subs	r0, r3, r2
 800b4b4:	bd10      	pop	{r4, pc}
 800b4b6:	4610      	mov	r0, r2
 800b4b8:	e7fc      	b.n	800b4b4 <strncmp+0x1e>
	...

0800b4bc <__swbuf_r>:
 800b4bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4be:	460e      	mov	r6, r1
 800b4c0:	4614      	mov	r4, r2
 800b4c2:	4605      	mov	r5, r0
 800b4c4:	b118      	cbz	r0, 800b4ce <__swbuf_r+0x12>
 800b4c6:	6983      	ldr	r3, [r0, #24]
 800b4c8:	b90b      	cbnz	r3, 800b4ce <__swbuf_r+0x12>
 800b4ca:	f7fe facb 	bl	8009a64 <__sinit>
 800b4ce:	4b21      	ldr	r3, [pc, #132]	; (800b554 <__swbuf_r+0x98>)
 800b4d0:	429c      	cmp	r4, r3
 800b4d2:	d12b      	bne.n	800b52c <__swbuf_r+0x70>
 800b4d4:	686c      	ldr	r4, [r5, #4]
 800b4d6:	69a3      	ldr	r3, [r4, #24]
 800b4d8:	60a3      	str	r3, [r4, #8]
 800b4da:	89a3      	ldrh	r3, [r4, #12]
 800b4dc:	071a      	lsls	r2, r3, #28
 800b4de:	d52f      	bpl.n	800b540 <__swbuf_r+0x84>
 800b4e0:	6923      	ldr	r3, [r4, #16]
 800b4e2:	b36b      	cbz	r3, 800b540 <__swbuf_r+0x84>
 800b4e4:	6923      	ldr	r3, [r4, #16]
 800b4e6:	6820      	ldr	r0, [r4, #0]
 800b4e8:	1ac0      	subs	r0, r0, r3
 800b4ea:	6963      	ldr	r3, [r4, #20]
 800b4ec:	b2f6      	uxtb	r6, r6
 800b4ee:	4283      	cmp	r3, r0
 800b4f0:	4637      	mov	r7, r6
 800b4f2:	dc04      	bgt.n	800b4fe <__swbuf_r+0x42>
 800b4f4:	4621      	mov	r1, r4
 800b4f6:	4628      	mov	r0, r5
 800b4f8:	f7fe fa20 	bl	800993c <_fflush_r>
 800b4fc:	bb30      	cbnz	r0, 800b54c <__swbuf_r+0x90>
 800b4fe:	68a3      	ldr	r3, [r4, #8]
 800b500:	3b01      	subs	r3, #1
 800b502:	60a3      	str	r3, [r4, #8]
 800b504:	6823      	ldr	r3, [r4, #0]
 800b506:	1c5a      	adds	r2, r3, #1
 800b508:	6022      	str	r2, [r4, #0]
 800b50a:	701e      	strb	r6, [r3, #0]
 800b50c:	6963      	ldr	r3, [r4, #20]
 800b50e:	3001      	adds	r0, #1
 800b510:	4283      	cmp	r3, r0
 800b512:	d004      	beq.n	800b51e <__swbuf_r+0x62>
 800b514:	89a3      	ldrh	r3, [r4, #12]
 800b516:	07db      	lsls	r3, r3, #31
 800b518:	d506      	bpl.n	800b528 <__swbuf_r+0x6c>
 800b51a:	2e0a      	cmp	r6, #10
 800b51c:	d104      	bne.n	800b528 <__swbuf_r+0x6c>
 800b51e:	4621      	mov	r1, r4
 800b520:	4628      	mov	r0, r5
 800b522:	f7fe fa0b 	bl	800993c <_fflush_r>
 800b526:	b988      	cbnz	r0, 800b54c <__swbuf_r+0x90>
 800b528:	4638      	mov	r0, r7
 800b52a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b52c:	4b0a      	ldr	r3, [pc, #40]	; (800b558 <__swbuf_r+0x9c>)
 800b52e:	429c      	cmp	r4, r3
 800b530:	d101      	bne.n	800b536 <__swbuf_r+0x7a>
 800b532:	68ac      	ldr	r4, [r5, #8]
 800b534:	e7cf      	b.n	800b4d6 <__swbuf_r+0x1a>
 800b536:	4b09      	ldr	r3, [pc, #36]	; (800b55c <__swbuf_r+0xa0>)
 800b538:	429c      	cmp	r4, r3
 800b53a:	bf08      	it	eq
 800b53c:	68ec      	ldreq	r4, [r5, #12]
 800b53e:	e7ca      	b.n	800b4d6 <__swbuf_r+0x1a>
 800b540:	4621      	mov	r1, r4
 800b542:	4628      	mov	r0, r5
 800b544:	f000 f82c 	bl	800b5a0 <__swsetup_r>
 800b548:	2800      	cmp	r0, #0
 800b54a:	d0cb      	beq.n	800b4e4 <__swbuf_r+0x28>
 800b54c:	f04f 37ff 	mov.w	r7, #4294967295
 800b550:	e7ea      	b.n	800b528 <__swbuf_r+0x6c>
 800b552:	bf00      	nop
 800b554:	0800bc00 	.word	0x0800bc00
 800b558:	0800bc20 	.word	0x0800bc20
 800b55c:	0800bbe0 	.word	0x0800bbe0

0800b560 <__ascii_wctomb>:
 800b560:	b149      	cbz	r1, 800b576 <__ascii_wctomb+0x16>
 800b562:	2aff      	cmp	r2, #255	; 0xff
 800b564:	bf85      	ittet	hi
 800b566:	238a      	movhi	r3, #138	; 0x8a
 800b568:	6003      	strhi	r3, [r0, #0]
 800b56a:	700a      	strbls	r2, [r1, #0]
 800b56c:	f04f 30ff 	movhi.w	r0, #4294967295
 800b570:	bf98      	it	ls
 800b572:	2001      	movls	r0, #1
 800b574:	4770      	bx	lr
 800b576:	4608      	mov	r0, r1
 800b578:	4770      	bx	lr
	...

0800b57c <_write_r>:
 800b57c:	b538      	push	{r3, r4, r5, lr}
 800b57e:	4d07      	ldr	r5, [pc, #28]	; (800b59c <_write_r+0x20>)
 800b580:	4604      	mov	r4, r0
 800b582:	4608      	mov	r0, r1
 800b584:	4611      	mov	r1, r2
 800b586:	2200      	movs	r2, #0
 800b588:	602a      	str	r2, [r5, #0]
 800b58a:	461a      	mov	r2, r3
 800b58c:	f7f6 feee 	bl	800236c <_write>
 800b590:	1c43      	adds	r3, r0, #1
 800b592:	d102      	bne.n	800b59a <_write_r+0x1e>
 800b594:	682b      	ldr	r3, [r5, #0]
 800b596:	b103      	cbz	r3, 800b59a <_write_r+0x1e>
 800b598:	6023      	str	r3, [r4, #0]
 800b59a:	bd38      	pop	{r3, r4, r5, pc}
 800b59c:	20002da0 	.word	0x20002da0

0800b5a0 <__swsetup_r>:
 800b5a0:	4b32      	ldr	r3, [pc, #200]	; (800b66c <__swsetup_r+0xcc>)
 800b5a2:	b570      	push	{r4, r5, r6, lr}
 800b5a4:	681d      	ldr	r5, [r3, #0]
 800b5a6:	4606      	mov	r6, r0
 800b5a8:	460c      	mov	r4, r1
 800b5aa:	b125      	cbz	r5, 800b5b6 <__swsetup_r+0x16>
 800b5ac:	69ab      	ldr	r3, [r5, #24]
 800b5ae:	b913      	cbnz	r3, 800b5b6 <__swsetup_r+0x16>
 800b5b0:	4628      	mov	r0, r5
 800b5b2:	f7fe fa57 	bl	8009a64 <__sinit>
 800b5b6:	4b2e      	ldr	r3, [pc, #184]	; (800b670 <__swsetup_r+0xd0>)
 800b5b8:	429c      	cmp	r4, r3
 800b5ba:	d10f      	bne.n	800b5dc <__swsetup_r+0x3c>
 800b5bc:	686c      	ldr	r4, [r5, #4]
 800b5be:	89a3      	ldrh	r3, [r4, #12]
 800b5c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b5c4:	0719      	lsls	r1, r3, #28
 800b5c6:	d42c      	bmi.n	800b622 <__swsetup_r+0x82>
 800b5c8:	06dd      	lsls	r5, r3, #27
 800b5ca:	d411      	bmi.n	800b5f0 <__swsetup_r+0x50>
 800b5cc:	2309      	movs	r3, #9
 800b5ce:	6033      	str	r3, [r6, #0]
 800b5d0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b5d4:	81a3      	strh	r3, [r4, #12]
 800b5d6:	f04f 30ff 	mov.w	r0, #4294967295
 800b5da:	e03e      	b.n	800b65a <__swsetup_r+0xba>
 800b5dc:	4b25      	ldr	r3, [pc, #148]	; (800b674 <__swsetup_r+0xd4>)
 800b5de:	429c      	cmp	r4, r3
 800b5e0:	d101      	bne.n	800b5e6 <__swsetup_r+0x46>
 800b5e2:	68ac      	ldr	r4, [r5, #8]
 800b5e4:	e7eb      	b.n	800b5be <__swsetup_r+0x1e>
 800b5e6:	4b24      	ldr	r3, [pc, #144]	; (800b678 <__swsetup_r+0xd8>)
 800b5e8:	429c      	cmp	r4, r3
 800b5ea:	bf08      	it	eq
 800b5ec:	68ec      	ldreq	r4, [r5, #12]
 800b5ee:	e7e6      	b.n	800b5be <__swsetup_r+0x1e>
 800b5f0:	0758      	lsls	r0, r3, #29
 800b5f2:	d512      	bpl.n	800b61a <__swsetup_r+0x7a>
 800b5f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b5f6:	b141      	cbz	r1, 800b60a <__swsetup_r+0x6a>
 800b5f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b5fc:	4299      	cmp	r1, r3
 800b5fe:	d002      	beq.n	800b606 <__swsetup_r+0x66>
 800b600:	4630      	mov	r0, r6
 800b602:	f7ff fb8b 	bl	800ad1c <_free_r>
 800b606:	2300      	movs	r3, #0
 800b608:	6363      	str	r3, [r4, #52]	; 0x34
 800b60a:	89a3      	ldrh	r3, [r4, #12]
 800b60c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b610:	81a3      	strh	r3, [r4, #12]
 800b612:	2300      	movs	r3, #0
 800b614:	6063      	str	r3, [r4, #4]
 800b616:	6923      	ldr	r3, [r4, #16]
 800b618:	6023      	str	r3, [r4, #0]
 800b61a:	89a3      	ldrh	r3, [r4, #12]
 800b61c:	f043 0308 	orr.w	r3, r3, #8
 800b620:	81a3      	strh	r3, [r4, #12]
 800b622:	6923      	ldr	r3, [r4, #16]
 800b624:	b94b      	cbnz	r3, 800b63a <__swsetup_r+0x9a>
 800b626:	89a3      	ldrh	r3, [r4, #12]
 800b628:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b62c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b630:	d003      	beq.n	800b63a <__swsetup_r+0x9a>
 800b632:	4621      	mov	r1, r4
 800b634:	4630      	mov	r0, r6
 800b636:	f7fe fe4d 	bl	800a2d4 <__smakebuf_r>
 800b63a:	89a0      	ldrh	r0, [r4, #12]
 800b63c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b640:	f010 0301 	ands.w	r3, r0, #1
 800b644:	d00a      	beq.n	800b65c <__swsetup_r+0xbc>
 800b646:	2300      	movs	r3, #0
 800b648:	60a3      	str	r3, [r4, #8]
 800b64a:	6963      	ldr	r3, [r4, #20]
 800b64c:	425b      	negs	r3, r3
 800b64e:	61a3      	str	r3, [r4, #24]
 800b650:	6923      	ldr	r3, [r4, #16]
 800b652:	b943      	cbnz	r3, 800b666 <__swsetup_r+0xc6>
 800b654:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b658:	d1ba      	bne.n	800b5d0 <__swsetup_r+0x30>
 800b65a:	bd70      	pop	{r4, r5, r6, pc}
 800b65c:	0781      	lsls	r1, r0, #30
 800b65e:	bf58      	it	pl
 800b660:	6963      	ldrpl	r3, [r4, #20]
 800b662:	60a3      	str	r3, [r4, #8]
 800b664:	e7f4      	b.n	800b650 <__swsetup_r+0xb0>
 800b666:	2000      	movs	r0, #0
 800b668:	e7f7      	b.n	800b65a <__swsetup_r+0xba>
 800b66a:	bf00      	nop
 800b66c:	20000010 	.word	0x20000010
 800b670:	0800bc00 	.word	0x0800bc00
 800b674:	0800bc20 	.word	0x0800bc20
 800b678:	0800bbe0 	.word	0x0800bbe0

0800b67c <__assert_func>:
 800b67c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b67e:	4614      	mov	r4, r2
 800b680:	461a      	mov	r2, r3
 800b682:	4b09      	ldr	r3, [pc, #36]	; (800b6a8 <__assert_func+0x2c>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	4605      	mov	r5, r0
 800b688:	68d8      	ldr	r0, [r3, #12]
 800b68a:	b14c      	cbz	r4, 800b6a0 <__assert_func+0x24>
 800b68c:	4b07      	ldr	r3, [pc, #28]	; (800b6ac <__assert_func+0x30>)
 800b68e:	9100      	str	r1, [sp, #0]
 800b690:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b694:	4906      	ldr	r1, [pc, #24]	; (800b6b0 <__assert_func+0x34>)
 800b696:	462b      	mov	r3, r5
 800b698:	f000 f81e 	bl	800b6d8 <fiprintf>
 800b69c:	f000 f8c0 	bl	800b820 <abort>
 800b6a0:	4b04      	ldr	r3, [pc, #16]	; (800b6b4 <__assert_func+0x38>)
 800b6a2:	461c      	mov	r4, r3
 800b6a4:	e7f3      	b.n	800b68e <__assert_func+0x12>
 800b6a6:	bf00      	nop
 800b6a8:	20000010 	.word	0x20000010
 800b6ac:	0800be2d 	.word	0x0800be2d
 800b6b0:	0800be3a 	.word	0x0800be3a
 800b6b4:	0800be68 	.word	0x0800be68

0800b6b8 <_close_r>:
 800b6b8:	b538      	push	{r3, r4, r5, lr}
 800b6ba:	4d06      	ldr	r5, [pc, #24]	; (800b6d4 <_close_r+0x1c>)
 800b6bc:	2300      	movs	r3, #0
 800b6be:	4604      	mov	r4, r0
 800b6c0:	4608      	mov	r0, r1
 800b6c2:	602b      	str	r3, [r5, #0]
 800b6c4:	f7f6 fe7e 	bl	80023c4 <_close>
 800b6c8:	1c43      	adds	r3, r0, #1
 800b6ca:	d102      	bne.n	800b6d2 <_close_r+0x1a>
 800b6cc:	682b      	ldr	r3, [r5, #0]
 800b6ce:	b103      	cbz	r3, 800b6d2 <_close_r+0x1a>
 800b6d0:	6023      	str	r3, [r4, #0]
 800b6d2:	bd38      	pop	{r3, r4, r5, pc}
 800b6d4:	20002da0 	.word	0x20002da0

0800b6d8 <fiprintf>:
 800b6d8:	b40e      	push	{r1, r2, r3}
 800b6da:	b503      	push	{r0, r1, lr}
 800b6dc:	4601      	mov	r1, r0
 800b6de:	ab03      	add	r3, sp, #12
 800b6e0:	4805      	ldr	r0, [pc, #20]	; (800b6f8 <fiprintf+0x20>)
 800b6e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6e6:	6800      	ldr	r0, [r0, #0]
 800b6e8:	9301      	str	r3, [sp, #4]
 800b6ea:	f7ff fd47 	bl	800b17c <_vfiprintf_r>
 800b6ee:	b002      	add	sp, #8
 800b6f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b6f4:	b003      	add	sp, #12
 800b6f6:	4770      	bx	lr
 800b6f8:	20000010 	.word	0x20000010

0800b6fc <_fstat_r>:
 800b6fc:	b538      	push	{r3, r4, r5, lr}
 800b6fe:	4d07      	ldr	r5, [pc, #28]	; (800b71c <_fstat_r+0x20>)
 800b700:	2300      	movs	r3, #0
 800b702:	4604      	mov	r4, r0
 800b704:	4608      	mov	r0, r1
 800b706:	4611      	mov	r1, r2
 800b708:	602b      	str	r3, [r5, #0]
 800b70a:	f7f6 feab 	bl	8002464 <_fstat>
 800b70e:	1c43      	adds	r3, r0, #1
 800b710:	d102      	bne.n	800b718 <_fstat_r+0x1c>
 800b712:	682b      	ldr	r3, [r5, #0]
 800b714:	b103      	cbz	r3, 800b718 <_fstat_r+0x1c>
 800b716:	6023      	str	r3, [r4, #0]
 800b718:	bd38      	pop	{r3, r4, r5, pc}
 800b71a:	bf00      	nop
 800b71c:	20002da0 	.word	0x20002da0

0800b720 <_isatty_r>:
 800b720:	b538      	push	{r3, r4, r5, lr}
 800b722:	4d06      	ldr	r5, [pc, #24]	; (800b73c <_isatty_r+0x1c>)
 800b724:	2300      	movs	r3, #0
 800b726:	4604      	mov	r4, r0
 800b728:	4608      	mov	r0, r1
 800b72a:	602b      	str	r3, [r5, #0]
 800b72c:	f7f6 fe08 	bl	8002340 <_isatty>
 800b730:	1c43      	adds	r3, r0, #1
 800b732:	d102      	bne.n	800b73a <_isatty_r+0x1a>
 800b734:	682b      	ldr	r3, [r5, #0]
 800b736:	b103      	cbz	r3, 800b73a <_isatty_r+0x1a>
 800b738:	6023      	str	r3, [r4, #0]
 800b73a:	bd38      	pop	{r3, r4, r5, pc}
 800b73c:	20002da0 	.word	0x20002da0

0800b740 <_lseek_r>:
 800b740:	b538      	push	{r3, r4, r5, lr}
 800b742:	4d07      	ldr	r5, [pc, #28]	; (800b760 <_lseek_r+0x20>)
 800b744:	4604      	mov	r4, r0
 800b746:	4608      	mov	r0, r1
 800b748:	4611      	mov	r1, r2
 800b74a:	2200      	movs	r2, #0
 800b74c:	602a      	str	r2, [r5, #0]
 800b74e:	461a      	mov	r2, r3
 800b750:	f7f6 fe4f 	bl	80023f2 <_lseek>
 800b754:	1c43      	adds	r3, r0, #1
 800b756:	d102      	bne.n	800b75e <_lseek_r+0x1e>
 800b758:	682b      	ldr	r3, [r5, #0]
 800b75a:	b103      	cbz	r3, 800b75e <_lseek_r+0x1e>
 800b75c:	6023      	str	r3, [r4, #0]
 800b75e:	bd38      	pop	{r3, r4, r5, pc}
 800b760:	20002da0 	.word	0x20002da0

0800b764 <memmove>:
 800b764:	4288      	cmp	r0, r1
 800b766:	b510      	push	{r4, lr}
 800b768:	eb01 0402 	add.w	r4, r1, r2
 800b76c:	d902      	bls.n	800b774 <memmove+0x10>
 800b76e:	4284      	cmp	r4, r0
 800b770:	4623      	mov	r3, r4
 800b772:	d807      	bhi.n	800b784 <memmove+0x20>
 800b774:	1e43      	subs	r3, r0, #1
 800b776:	42a1      	cmp	r1, r4
 800b778:	d008      	beq.n	800b78c <memmove+0x28>
 800b77a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b77e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b782:	e7f8      	b.n	800b776 <memmove+0x12>
 800b784:	4402      	add	r2, r0
 800b786:	4601      	mov	r1, r0
 800b788:	428a      	cmp	r2, r1
 800b78a:	d100      	bne.n	800b78e <memmove+0x2a>
 800b78c:	bd10      	pop	{r4, pc}
 800b78e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b792:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b796:	e7f7      	b.n	800b788 <memmove+0x24>

0800b798 <__malloc_lock>:
 800b798:	4801      	ldr	r0, [pc, #4]	; (800b7a0 <__malloc_lock+0x8>)
 800b79a:	f7fe bd74 	b.w	800a286 <__retarget_lock_acquire_recursive>
 800b79e:	bf00      	nop
 800b7a0:	20002d98 	.word	0x20002d98

0800b7a4 <__malloc_unlock>:
 800b7a4:	4801      	ldr	r0, [pc, #4]	; (800b7ac <__malloc_unlock+0x8>)
 800b7a6:	f7fe bd6f 	b.w	800a288 <__retarget_lock_release_recursive>
 800b7aa:	bf00      	nop
 800b7ac:	20002d98 	.word	0x20002d98

0800b7b0 <_realloc_r>:
 800b7b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7b2:	4607      	mov	r7, r0
 800b7b4:	4614      	mov	r4, r2
 800b7b6:	460e      	mov	r6, r1
 800b7b8:	b921      	cbnz	r1, 800b7c4 <_realloc_r+0x14>
 800b7ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b7be:	4611      	mov	r1, r2
 800b7c0:	f7ff bafc 	b.w	800adbc <_malloc_r>
 800b7c4:	b922      	cbnz	r2, 800b7d0 <_realloc_r+0x20>
 800b7c6:	f7ff faa9 	bl	800ad1c <_free_r>
 800b7ca:	4625      	mov	r5, r4
 800b7cc:	4628      	mov	r0, r5
 800b7ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b7d0:	f000 f82d 	bl	800b82e <_malloc_usable_size_r>
 800b7d4:	42a0      	cmp	r0, r4
 800b7d6:	d20f      	bcs.n	800b7f8 <_realloc_r+0x48>
 800b7d8:	4621      	mov	r1, r4
 800b7da:	4638      	mov	r0, r7
 800b7dc:	f7ff faee 	bl	800adbc <_malloc_r>
 800b7e0:	4605      	mov	r5, r0
 800b7e2:	2800      	cmp	r0, #0
 800b7e4:	d0f2      	beq.n	800b7cc <_realloc_r+0x1c>
 800b7e6:	4631      	mov	r1, r6
 800b7e8:	4622      	mov	r2, r4
 800b7ea:	f7fb fb5f 	bl	8006eac <memcpy>
 800b7ee:	4631      	mov	r1, r6
 800b7f0:	4638      	mov	r0, r7
 800b7f2:	f7ff fa93 	bl	800ad1c <_free_r>
 800b7f6:	e7e9      	b.n	800b7cc <_realloc_r+0x1c>
 800b7f8:	4635      	mov	r5, r6
 800b7fa:	e7e7      	b.n	800b7cc <_realloc_r+0x1c>

0800b7fc <_read_r>:
 800b7fc:	b538      	push	{r3, r4, r5, lr}
 800b7fe:	4d07      	ldr	r5, [pc, #28]	; (800b81c <_read_r+0x20>)
 800b800:	4604      	mov	r4, r0
 800b802:	4608      	mov	r0, r1
 800b804:	4611      	mov	r1, r2
 800b806:	2200      	movs	r2, #0
 800b808:	602a      	str	r2, [r5, #0]
 800b80a:	461a      	mov	r2, r3
 800b80c:	f7f6 fe02 	bl	8002414 <_read>
 800b810:	1c43      	adds	r3, r0, #1
 800b812:	d102      	bne.n	800b81a <_read_r+0x1e>
 800b814:	682b      	ldr	r3, [r5, #0]
 800b816:	b103      	cbz	r3, 800b81a <_read_r+0x1e>
 800b818:	6023      	str	r3, [r4, #0]
 800b81a:	bd38      	pop	{r3, r4, r5, pc}
 800b81c:	20002da0 	.word	0x20002da0

0800b820 <abort>:
 800b820:	b508      	push	{r3, lr}
 800b822:	2006      	movs	r0, #6
 800b824:	f000 f834 	bl	800b890 <raise>
 800b828:	2001      	movs	r0, #1
 800b82a:	f000 f85d 	bl	800b8e8 <_exit>

0800b82e <_malloc_usable_size_r>:
 800b82e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b832:	1f18      	subs	r0, r3, #4
 800b834:	2b00      	cmp	r3, #0
 800b836:	bfbc      	itt	lt
 800b838:	580b      	ldrlt	r3, [r1, r0]
 800b83a:	18c0      	addlt	r0, r0, r3
 800b83c:	4770      	bx	lr

0800b83e <_raise_r>:
 800b83e:	291f      	cmp	r1, #31
 800b840:	b538      	push	{r3, r4, r5, lr}
 800b842:	4604      	mov	r4, r0
 800b844:	460d      	mov	r5, r1
 800b846:	d904      	bls.n	800b852 <_raise_r+0x14>
 800b848:	2316      	movs	r3, #22
 800b84a:	6003      	str	r3, [r0, #0]
 800b84c:	f04f 30ff 	mov.w	r0, #4294967295
 800b850:	bd38      	pop	{r3, r4, r5, pc}
 800b852:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b854:	b112      	cbz	r2, 800b85c <_raise_r+0x1e>
 800b856:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b85a:	b94b      	cbnz	r3, 800b870 <_raise_r+0x32>
 800b85c:	4620      	mov	r0, r4
 800b85e:	f000 f831 	bl	800b8c4 <_getpid_r>
 800b862:	462a      	mov	r2, r5
 800b864:	4601      	mov	r1, r0
 800b866:	4620      	mov	r0, r4
 800b868:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b86c:	f000 b818 	b.w	800b8a0 <_kill_r>
 800b870:	2b01      	cmp	r3, #1
 800b872:	d00a      	beq.n	800b88a <_raise_r+0x4c>
 800b874:	1c59      	adds	r1, r3, #1
 800b876:	d103      	bne.n	800b880 <_raise_r+0x42>
 800b878:	2316      	movs	r3, #22
 800b87a:	6003      	str	r3, [r0, #0]
 800b87c:	2001      	movs	r0, #1
 800b87e:	e7e7      	b.n	800b850 <_raise_r+0x12>
 800b880:	2400      	movs	r4, #0
 800b882:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b886:	4628      	mov	r0, r5
 800b888:	4798      	blx	r3
 800b88a:	2000      	movs	r0, #0
 800b88c:	e7e0      	b.n	800b850 <_raise_r+0x12>
	...

0800b890 <raise>:
 800b890:	4b02      	ldr	r3, [pc, #8]	; (800b89c <raise+0xc>)
 800b892:	4601      	mov	r1, r0
 800b894:	6818      	ldr	r0, [r3, #0]
 800b896:	f7ff bfd2 	b.w	800b83e <_raise_r>
 800b89a:	bf00      	nop
 800b89c:	20000010 	.word	0x20000010

0800b8a0 <_kill_r>:
 800b8a0:	b538      	push	{r3, r4, r5, lr}
 800b8a2:	4d07      	ldr	r5, [pc, #28]	; (800b8c0 <_kill_r+0x20>)
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	4604      	mov	r4, r0
 800b8a8:	4608      	mov	r0, r1
 800b8aa:	4611      	mov	r1, r2
 800b8ac:	602b      	str	r3, [r5, #0]
 800b8ae:	f000 f813 	bl	800b8d8 <_kill>
 800b8b2:	1c43      	adds	r3, r0, #1
 800b8b4:	d102      	bne.n	800b8bc <_kill_r+0x1c>
 800b8b6:	682b      	ldr	r3, [r5, #0]
 800b8b8:	b103      	cbz	r3, 800b8bc <_kill_r+0x1c>
 800b8ba:	6023      	str	r3, [r4, #0]
 800b8bc:	bd38      	pop	{r3, r4, r5, pc}
 800b8be:	bf00      	nop
 800b8c0:	20002da0 	.word	0x20002da0

0800b8c4 <_getpid_r>:
 800b8c4:	f000 b800 	b.w	800b8c8 <_getpid>

0800b8c8 <_getpid>:
 800b8c8:	4b02      	ldr	r3, [pc, #8]	; (800b8d4 <_getpid+0xc>)
 800b8ca:	2258      	movs	r2, #88	; 0x58
 800b8cc:	601a      	str	r2, [r3, #0]
 800b8ce:	f04f 30ff 	mov.w	r0, #4294967295
 800b8d2:	4770      	bx	lr
 800b8d4:	20002da0 	.word	0x20002da0

0800b8d8 <_kill>:
 800b8d8:	4b02      	ldr	r3, [pc, #8]	; (800b8e4 <_kill+0xc>)
 800b8da:	2258      	movs	r2, #88	; 0x58
 800b8dc:	601a      	str	r2, [r3, #0]
 800b8de:	f04f 30ff 	mov.w	r0, #4294967295
 800b8e2:	4770      	bx	lr
 800b8e4:	20002da0 	.word	0x20002da0

0800b8e8 <_exit>:
 800b8e8:	e7fe      	b.n	800b8e8 <_exit>
	...

0800b8ec <_init>:
 800b8ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8ee:	bf00      	nop
 800b8f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8f2:	bc08      	pop	{r3}
 800b8f4:	469e      	mov	lr, r3
 800b8f6:	4770      	bx	lr

0800b8f8 <_fini>:
 800b8f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8fa:	bf00      	nop
 800b8fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8fe:	bc08      	pop	{r3}
 800b900:	469e      	mov	lr, r3
 800b902:	4770      	bx	lr
