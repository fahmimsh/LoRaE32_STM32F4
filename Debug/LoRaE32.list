
LoRaE32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d054  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000017d4  0800d1e8  0800d1e8  0001d1e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e9bc  0800e9bc  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800e9bc  0800e9bc  0001e9bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e9c4  0800e9c4  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e9c4  0800e9c4  0001e9c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e9c8  0800e9c8  0001e9c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800e9cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003574  200001e8  0800ebb4  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000375c  0800ebb4  0002375c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000160cb  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ce6  00000000  00000000  000362e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001068  00000000  00000000  00038fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f60  00000000  00000000  0003a038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023b57  00000000  00000000  0003af98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014fc0  00000000  00000000  0005eaef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d091e  00000000  00000000  00073aaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001443cd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b48  00000000  00000000  00144420  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000003c  00000000  00000000  00149f68  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000076  00000000  00000000  00149fa4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d1cc 	.word	0x0800d1cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800d1cc 	.word	0x0800d1cc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <ILI9341_DrawChar>:

	ILI9341_DrawRectangle(X0True, Y0True, xLen, yLen, color);
}

void ILI9341_DrawChar(char ch, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 8000fec:	b590      	push	{r4, r7, lr}
 8000fee:	b08d      	sub	sp, #52	; 0x34
 8000ff0:	af02      	add	r7, sp, #8
 8000ff2:	60b9      	str	r1, [r7, #8]
 8000ff4:	4611      	mov	r1, r2
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	73fb      	strb	r3, [r7, #15]
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	81bb      	strh	r3, [r7, #12]
 8001000:	4613      	mov	r3, r2
 8001002:	80fb      	strh	r3, [r7, #6]
	if ((ch < 31) || (ch > 127)) return;
 8001004:	7bfb      	ldrb	r3, [r7, #15]
 8001006:	2b1e      	cmp	r3, #30
 8001008:	d961      	bls.n	80010ce <ILI9341_DrawChar+0xe2>
 800100a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800100e:	2b00      	cmp	r3, #0
 8001010:	db5d      	blt.n	80010ce <ILI9341_DrawChar+0xe2>

	uint8_t fOffset, fWidth, fHeight, fBPL;
	uint8_t *tempChar;

	fOffset = font[0];
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	77fb      	strb	r3, [r7, #31]
	fWidth = font[1];
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	785b      	ldrb	r3, [r3, #1]
 800101c:	77bb      	strb	r3, [r7, #30]
	fHeight = font[2];
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	789b      	ldrb	r3, [r3, #2]
 8001022:	777b      	strb	r3, [r7, #29]
	fBPL = font[3];
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	78db      	ldrb	r3, [r3, #3]
 8001028:	773b      	strb	r3, [r7, #28]

	tempChar = (uint8_t*)&font[((ch - 0x20) * fOffset) + 4]; /* Current Character = Meta + (Character Index * Offset) */
 800102a:	7bfb      	ldrb	r3, [r7, #15]
 800102c:	3b20      	subs	r3, #32
 800102e:	7ffa      	ldrb	r2, [r7, #31]
 8001030:	fb02 f303 	mul.w	r3, r2, r3
 8001034:	3304      	adds	r3, #4
 8001036:	68ba      	ldr	r2, [r7, #8]
 8001038:	4413      	add	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]

	/* Clear background first */
	ILI9341_DrawRectangle(X, Y, fWidth, fHeight, bgcolor);
 800103c:	7fbb      	ldrb	r3, [r7, #30]
 800103e:	b29a      	uxth	r2, r3
 8001040:	7f7b      	ldrb	r3, [r7, #29]
 8001042:	b29c      	uxth	r4, r3
 8001044:	88f9      	ldrh	r1, [r7, #6]
 8001046:	89b8      	ldrh	r0, [r7, #12]
 8001048:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800104a:	9300      	str	r3, [sp, #0]
 800104c:	4623      	mov	r3, r4
 800104e:	f000 fc1d 	bl	800188c <ILI9341_DrawRectangle>

	for (int j=0; j < fHeight; j++)
 8001052:	2300      	movs	r3, #0
 8001054:	627b      	str	r3, [r7, #36]	; 0x24
 8001056:	e035      	b.n	80010c4 <ILI9341_DrawChar+0xd8>
	{
		for (int i=0; i < fWidth; i++)
 8001058:	2300      	movs	r3, #0
 800105a:	623b      	str	r3, [r7, #32]
 800105c:	e02b      	b.n	80010b6 <ILI9341_DrawChar+0xca>
		{
			uint8_t z =  tempChar[fBPL * i + ((j & 0xF8) >> 3) + 1]; /* (j & 0xF8) >> 3, increase one by 8-bits */
 800105e:	7f3b      	ldrb	r3, [r7, #28]
 8001060:	6a3a      	ldr	r2, [r7, #32]
 8001062:	fb02 f203 	mul.w	r2, r2, r3
 8001066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001068:	10db      	asrs	r3, r3, #3
 800106a:	f003 031f 	and.w	r3, r3, #31
 800106e:	4413      	add	r3, r2
 8001070:	3301      	adds	r3, #1
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	4413      	add	r3, r2
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	75fb      	strb	r3, [r7, #23]
			uint8_t b = 1 << (j & 0x07);
 800107a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800107c:	f003 0307 	and.w	r3, r3, #7
 8001080:	2201      	movs	r2, #1
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	75bb      	strb	r3, [r7, #22]
			if (( z & b ) != 0x00)
 8001088:	7dfa      	ldrb	r2, [r7, #23]
 800108a:	7dbb      	ldrb	r3, [r7, #22]
 800108c:	4013      	ands	r3, r2
 800108e:	b2db      	uxtb	r3, r3
 8001090:	2b00      	cmp	r3, #0
 8001092:	d00d      	beq.n	80010b0 <ILI9341_DrawChar+0xc4>
			{
				ILI9341_DrawPixel(X+i, Y+j, color);
 8001094:	6a3b      	ldr	r3, [r7, #32]
 8001096:	b29a      	uxth	r2, r3
 8001098:	89bb      	ldrh	r3, [r7, #12]
 800109a:	4413      	add	r3, r2
 800109c:	b298      	uxth	r0, r3
 800109e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a0:	b29a      	uxth	r2, r3
 80010a2:	88fb      	ldrh	r3, [r7, #6]
 80010a4:	4413      	add	r3, r2
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80010aa:	4619      	mov	r1, r3
 80010ac:	f000 fb88 	bl	80017c0 <ILI9341_DrawPixel>
		for (int i=0; i < fWidth; i++)
 80010b0:	6a3b      	ldr	r3, [r7, #32]
 80010b2:	3301      	adds	r3, #1
 80010b4:	623b      	str	r3, [r7, #32]
 80010b6:	7fbb      	ldrb	r3, [r7, #30]
 80010b8:	6a3a      	ldr	r2, [r7, #32]
 80010ba:	429a      	cmp	r2, r3
 80010bc:	dbcf      	blt.n	800105e <ILI9341_DrawChar+0x72>
	for (int j=0; j < fHeight; j++)
 80010be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c0:	3301      	adds	r3, #1
 80010c2:	627b      	str	r3, [r7, #36]	; 0x24
 80010c4:	7f7b      	ldrb	r3, [r7, #29]
 80010c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010c8:	429a      	cmp	r2, r3
 80010ca:	dbc5      	blt.n	8001058 <ILI9341_DrawChar+0x6c>
 80010cc:	e000      	b.n	80010d0 <ILI9341_DrawChar+0xe4>
	if ((ch < 31) || (ch > 127)) return;
 80010ce:	bf00      	nop
			}
		}
	}
}
 80010d0:	372c      	adds	r7, #44	; 0x2c
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd90      	pop	{r4, r7, pc}

080010d6 <ILI9341_DrawText>:

void ILI9341_DrawText(const char* str, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b08a      	sub	sp, #40	; 0x28
 80010da:	af02      	add	r7, sp, #8
 80010dc:	60f8      	str	r0, [r7, #12]
 80010de:	60b9      	str	r1, [r7, #8]
 80010e0:	4611      	mov	r1, r2
 80010e2:	461a      	mov	r2, r3
 80010e4:	460b      	mov	r3, r1
 80010e6:	80fb      	strh	r3, [r7, #6]
 80010e8:	4613      	mov	r3, r2
 80010ea:	80bb      	strh	r3, [r7, #4]
	uint8_t charWidth;			/* Width of character */
	uint8_t fOffset = font[0];	/* Offset of character */
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	77fb      	strb	r3, [r7, #31]
	uint8_t fWidth = font[1];	/* Width of font */
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	785b      	ldrb	r3, [r3, #1]
 80010f6:	77bb      	strb	r3, [r7, #30]

	while (*str)
 80010f8:	e02d      	b.n	8001156 <ILI9341_DrawText+0x80>
	{
		ILI9341_DrawChar(*str, font, X, Y, color, bgcolor);
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	7818      	ldrb	r0, [r3, #0]
 80010fe:	88b9      	ldrh	r1, [r7, #4]
 8001100:	88fa      	ldrh	r2, [r7, #6]
 8001102:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001104:	9301      	str	r3, [sp, #4]
 8001106:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001108:	9300      	str	r3, [sp, #0]
 800110a:	460b      	mov	r3, r1
 800110c:	68b9      	ldr	r1, [r7, #8]
 800110e:	f7ff ff6d 	bl	8000fec <ILI9341_DrawChar>

		/* Check character width and calculate proper position */
		uint8_t *tempChar = (uint8_t*)&font[((*str - 0x20) * fOffset) + 4];
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	3b20      	subs	r3, #32
 8001118:	7ffa      	ldrb	r2, [r7, #31]
 800111a:	fb02 f303 	mul.w	r3, r2, r3
 800111e:	3304      	adds	r3, #4
 8001120:	68ba      	ldr	r2, [r7, #8]
 8001122:	4413      	add	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
		charWidth = tempChar[0];
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	75fb      	strb	r3, [r7, #23]

		if(charWidth + 2 < fWidth)
 800112c:	7dfb      	ldrb	r3, [r7, #23]
 800112e:	1c9a      	adds	r2, r3, #2
 8001130:	7fbb      	ldrb	r3, [r7, #30]
 8001132:	429a      	cmp	r2, r3
 8001134:	da07      	bge.n	8001146 <ILI9341_DrawText+0x70>
		{
			/* If character width is smaller than font width */
			X += (charWidth + 2);
 8001136:	7dfb      	ldrb	r3, [r7, #23]
 8001138:	b29a      	uxth	r2, r3
 800113a:	88fb      	ldrh	r3, [r7, #6]
 800113c:	4413      	add	r3, r2
 800113e:	b29b      	uxth	r3, r3
 8001140:	3302      	adds	r3, #2
 8001142:	80fb      	strh	r3, [r7, #6]
 8001144:	e004      	b.n	8001150 <ILI9341_DrawText+0x7a>
		}
		else
		{
			X += fWidth;
 8001146:	7fbb      	ldrb	r3, [r7, #30]
 8001148:	b29a      	uxth	r2, r3
 800114a:	88fb      	ldrh	r3, [r7, #6]
 800114c:	4413      	add	r3, r2
 800114e:	80fb      	strh	r3, [r7, #6]
		}

		str++;
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	3301      	adds	r3, #1
 8001154:	60fb      	str	r3, [r7, #12]
	while (*str)
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d1cd      	bne.n	80010fa <ILI9341_DrawText+0x24>
	}
}
 800115e:	bf00      	nop
 8001160:	bf00      	nop
 8001162:	3720      	adds	r7, #32
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}

08001168 <HAL_SPI_TxCpltCallback>:

volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  /* Deselect when Tx Complete */
  if(hspi == HSPI_INSTANCE)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	4a06      	ldr	r2, [pc, #24]	; (800118c <HAL_SPI_TxCpltCallback+0x24>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d104      	bne.n	8001182 <HAL_SPI_TxCpltCallback+0x1a>
  {
	  HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001178:	2201      	movs	r2, #1
 800117a:	2101      	movs	r1, #1
 800117c:	4804      	ldr	r0, [pc, #16]	; (8001190 <HAL_SPI_TxCpltCallback+0x28>)
 800117e:	f003 fb6b 	bl	8004858 <HAL_GPIO_WritePin>
  }
}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	200035b0 	.word	0x200035b0
 8001190:	40020800 	.word	0x40020800

08001194 <ILI9341_SPI_Tx>:

static void ILI9341_SPI_Tx(uint8_t data)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 800119e:	bf00      	nop
 80011a0:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <ILI9341_SPI_Tx+0x30>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	2b02      	cmp	r3, #2
 80011ac:	d1f8      	bne.n	80011a0 <ILI9341_SPI_Tx+0xc>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, &data, 1);
 80011ae:	1dfb      	adds	r3, r7, #7
 80011b0:	2201      	movs	r2, #1
 80011b2:	4619      	mov	r1, r3
 80011b4:	4803      	ldr	r0, [pc, #12]	; (80011c4 <ILI9341_SPI_Tx+0x30>)
 80011b6:	f005 fdc1 	bl	8006d3c <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
}
 80011ba:	bf00      	nop
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	200035b0 	.word	0x200035b0

080011c8 <ILI9341_SPI_TxBuffer>:

static void ILI9341_SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	460b      	mov	r3, r1
 80011d2:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 80011d4:	bf00      	nop
 80011d6:	4b08      	ldr	r3, [pc, #32]	; (80011f8 <ILI9341_SPI_TxBuffer+0x30>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	f003 0302 	and.w	r3, r3, #2
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	d1f8      	bne.n	80011d6 <ILI9341_SPI_TxBuffer+0xe>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, buffer, len);
 80011e4:	887b      	ldrh	r3, [r7, #2]
 80011e6:	461a      	mov	r2, r3
 80011e8:	6879      	ldr	r1, [r7, #4]
 80011ea:	4803      	ldr	r0, [pc, #12]	; (80011f8 <ILI9341_SPI_TxBuffer+0x30>)
 80011ec:	f005 fda6 	bl	8006d3c <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, buffer, len, 10);
}
 80011f0:	bf00      	nop
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	200035b0 	.word	0x200035b0

080011fc <ILI9341_WriteCommand>:

void ILI9341_WriteCommand(uint8_t cmd)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	//command
 8001206:	2200      	movs	r2, #0
 8001208:	2101      	movs	r1, #1
 800120a:	4808      	ldr	r0, [pc, #32]	; (800122c <ILI9341_WriteCommand+0x30>)
 800120c:	f003 fb24 	bl	8004858 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8001210:	2200      	movs	r2, #0
 8001212:	2101      	movs	r1, #1
 8001214:	4806      	ldr	r0, [pc, #24]	; (8001230 <ILI9341_WriteCommand+0x34>)
 8001216:	f003 fb1f 	bl	8004858 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(cmd);
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff ffb9 	bl	8001194 <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	40020000 	.word	0x40020000
 8001230:	40020800 	.word	0x40020800

08001234 <ILI9341_WriteData>:

void ILI9341_WriteData(uint8_t data)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 800123e:	2201      	movs	r2, #1
 8001240:	2101      	movs	r1, #1
 8001242:	4808      	ldr	r0, [pc, #32]	; (8001264 <ILI9341_WriteData+0x30>)
 8001244:	f003 fb08 	bl	8004858 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8001248:	2200      	movs	r2, #0
 800124a:	2101      	movs	r1, #1
 800124c:	4806      	ldr	r0, [pc, #24]	; (8001268 <ILI9341_WriteData+0x34>)
 800124e:	f003 fb03 	bl	8004858 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(data);
 8001252:	79fb      	ldrb	r3, [r7, #7]
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff ff9d 	bl	8001194 <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 800125a:	bf00      	nop
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40020000 	.word	0x40020000
 8001268:	40020800 	.word	0x40020800

0800126c <ILI9341_WriteBuffer>:

void ILI9341_WriteBuffer(uint8_t *buffer, uint16_t len)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	460b      	mov	r3, r1
 8001276:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 8001278:	2201      	movs	r2, #1
 800127a:	2101      	movs	r1, #1
 800127c:	4808      	ldr	r0, [pc, #32]	; (80012a0 <ILI9341_WriteBuffer+0x34>)
 800127e:	f003 faeb 	bl	8004858 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8001282:	2200      	movs	r2, #0
 8001284:	2101      	movs	r1, #1
 8001286:	4807      	ldr	r0, [pc, #28]	; (80012a4 <ILI9341_WriteBuffer+0x38>)
 8001288:	f003 fae6 	bl	8004858 <HAL_GPIO_WritePin>
	ILI9341_SPI_TxBuffer(buffer, len);
 800128c:	887b      	ldrh	r3, [r7, #2]
 800128e:	4619      	mov	r1, r3
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f7ff ff99 	bl	80011c8 <ILI9341_SPI_TxBuffer>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8001296:	bf00      	nop
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40020000 	.word	0x40020000
 80012a4:	40020800 	.word	0x40020800

080012a8 <ILI9341_SetAddress>:

void ILI9341_SetAddress(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 80012a8:	b590      	push	{r4, r7, lr}
 80012aa:	b085      	sub	sp, #20
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4604      	mov	r4, r0
 80012b0:	4608      	mov	r0, r1
 80012b2:	4611      	mov	r1, r2
 80012b4:	461a      	mov	r2, r3
 80012b6:	4623      	mov	r3, r4
 80012b8:	80fb      	strh	r3, [r7, #6]
 80012ba:	4603      	mov	r3, r0
 80012bc:	80bb      	strh	r3, [r7, #4]
 80012be:	460b      	mov	r3, r1
 80012c0:	807b      	strh	r3, [r7, #2]
 80012c2:	4613      	mov	r3, r2
 80012c4:	803b      	strh	r3, [r7, #0]
	uint8_t buffer[4];
	buffer[0] = x1 >> 8;
 80012c6:	88fb      	ldrh	r3, [r7, #6]
 80012c8:	0a1b      	lsrs	r3, r3, #8
 80012ca:	b29b      	uxth	r3, r3
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	733b      	strb	r3, [r7, #12]
	buffer[1] = x1;
 80012d0:	88fb      	ldrh	r3, [r7, #6]
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	737b      	strb	r3, [r7, #13]
	buffer[2] = x2 >> 8;
 80012d6:	887b      	ldrh	r3, [r7, #2]
 80012d8:	0a1b      	lsrs	r3, r3, #8
 80012da:	b29b      	uxth	r3, r3
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	73bb      	strb	r3, [r7, #14]
	buffer[3] = x2;
 80012e0:	887b      	ldrh	r3, [r7, #2]
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2A);
 80012e6:	202a      	movs	r0, #42	; 0x2a
 80012e8:	f7ff ff88 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 80012ec:	f107 030c 	add.w	r3, r7, #12
 80012f0:	2104      	movs	r1, #4
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff ffba 	bl	800126c <ILI9341_WriteBuffer>

	buffer[0] = y1 >> 8;
 80012f8:	88bb      	ldrh	r3, [r7, #4]
 80012fa:	0a1b      	lsrs	r3, r3, #8
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	733b      	strb	r3, [r7, #12]
	buffer[1] = y1;
 8001302:	88bb      	ldrh	r3, [r7, #4]
 8001304:	b2db      	uxtb	r3, r3
 8001306:	737b      	strb	r3, [r7, #13]
	buffer[2] = y2 >> 8;
 8001308:	883b      	ldrh	r3, [r7, #0]
 800130a:	0a1b      	lsrs	r3, r3, #8
 800130c:	b29b      	uxth	r3, r3
 800130e:	b2db      	uxtb	r3, r3
 8001310:	73bb      	strb	r3, [r7, #14]
	buffer[3] = y2;
 8001312:	883b      	ldrh	r3, [r7, #0]
 8001314:	b2db      	uxtb	r3, r3
 8001316:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2B);
 8001318:	202b      	movs	r0, #43	; 0x2b
 800131a:	f7ff ff6f 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 800131e:	f107 030c 	add.w	r3, r7, #12
 8001322:	2104      	movs	r1, #4
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff ffa1 	bl	800126c <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);
 800132a:	202c      	movs	r0, #44	; 0x2c
 800132c:	f7ff ff66 	bl	80011fc <ILI9341_WriteCommand>
}
 8001330:	bf00      	nop
 8001332:	3714      	adds	r7, #20
 8001334:	46bd      	mov	sp, r7
 8001336:	bd90      	pop	{r4, r7, pc}

08001338 <ILI9341_Reset>:

void ILI9341_Reset(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);	//Disable
 800133c:	2200      	movs	r2, #0
 800133e:	2104      	movs	r1, #4
 8001340:	480c      	ldr	r0, [pc, #48]	; (8001374 <ILI9341_Reset+0x3c>)
 8001342:	f003 fa89 	bl	8004858 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001346:	200a      	movs	r0, #10
 8001348:	f002 fb9a 	bl	8003a80 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);		//Select
 800134c:	2200      	movs	r2, #0
 800134e:	2101      	movs	r1, #1
 8001350:	4808      	ldr	r0, [pc, #32]	; (8001374 <ILI9341_Reset+0x3c>)
 8001352:	f003 fa81 	bl	8004858 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001356:	200a      	movs	r0, #10
 8001358:	f002 fb92 	bl	8003a80 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 800135c:	2201      	movs	r2, #1
 800135e:	2104      	movs	r1, #4
 8001360:	4804      	ldr	r0, [pc, #16]	; (8001374 <ILI9341_Reset+0x3c>)
 8001362:	f003 fa79 	bl	8004858 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET); 		//Deselect
 8001366:	2201      	movs	r2, #1
 8001368:	2101      	movs	r1, #1
 800136a:	4802      	ldr	r0, [pc, #8]	; (8001374 <ILI9341_Reset+0x3c>)
 800136c:	f003 fa74 	bl	8004858 <HAL_GPIO_WritePin>
}
 8001370:	bf00      	nop
 8001372:	bd80      	pop	{r7, pc}
 8001374:	40020800 	.word	0x40020800

08001378 <ILI9341_Enable>:

void ILI9341_Enable(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 800137c:	2201      	movs	r2, #1
 800137e:	2104      	movs	r1, #4
 8001380:	4802      	ldr	r0, [pc, #8]	; (800138c <ILI9341_Enable+0x14>)
 8001382:	f003 fa69 	bl	8004858 <HAL_GPIO_WritePin>
}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40020800 	.word	0x40020800

08001390 <ILI9341_Init>:

void ILI9341_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
	ILI9341_Enable();
 8001394:	f7ff fff0 	bl	8001378 <ILI9341_Enable>
	ILI9341_Reset();
 8001398:	f7ff ffce 	bl	8001338 <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_WriteCommand(0x01);
 800139c:	2001      	movs	r0, #1
 800139e:	f7ff ff2d 	bl	80011fc <ILI9341_WriteCommand>
	HAL_Delay(10);
 80013a2:	200a      	movs	r0, #10
 80013a4:	f002 fb6c 	bl	8003a80 <HAL_Delay>

	//POWER CONTROL A
	ILI9341_WriteCommand(0xCB);
 80013a8:	20cb      	movs	r0, #203	; 0xcb
 80013aa:	f7ff ff27 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x39);
 80013ae:	2039      	movs	r0, #57	; 0x39
 80013b0:	f7ff ff40 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x2C);
 80013b4:	202c      	movs	r0, #44	; 0x2c
 80013b6:	f7ff ff3d 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 80013ba:	2000      	movs	r0, #0
 80013bc:	f7ff ff3a 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x34);
 80013c0:	2034      	movs	r0, #52	; 0x34
 80013c2:	f7ff ff37 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x02);
 80013c6:	2002      	movs	r0, #2
 80013c8:	f7ff ff34 	bl	8001234 <ILI9341_WriteData>

	//POWER CONTROL B
	ILI9341_WriteCommand(0xCF);
 80013cc:	20cf      	movs	r0, #207	; 0xcf
 80013ce:	f7ff ff15 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 80013d2:	2000      	movs	r0, #0
 80013d4:	f7ff ff2e 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 80013d8:	20c1      	movs	r0, #193	; 0xc1
 80013da:	f7ff ff2b 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x30);
 80013de:	2030      	movs	r0, #48	; 0x30
 80013e0:	f7ff ff28 	bl	8001234 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL A
	ILI9341_WriteCommand(0xE8);
 80013e4:	20e8      	movs	r0, #232	; 0xe8
 80013e6:	f7ff ff09 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x85);
 80013ea:	2085      	movs	r0, #133	; 0x85
 80013ec:	f7ff ff22 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 80013f0:	2000      	movs	r0, #0
 80013f2:	f7ff ff1f 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x78);
 80013f6:	2078      	movs	r0, #120	; 0x78
 80013f8:	f7ff ff1c 	bl	8001234 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL B
	ILI9341_WriteCommand(0xEA);
 80013fc:	20ea      	movs	r0, #234	; 0xea
 80013fe:	f7ff fefd 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8001402:	2000      	movs	r0, #0
 8001404:	f7ff ff16 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8001408:	2000      	movs	r0, #0
 800140a:	f7ff ff13 	bl	8001234 <ILI9341_WriteData>

	//POWER ON SEQUENCE CONTROL
	ILI9341_WriteCommand(0xED);
 800140e:	20ed      	movs	r0, #237	; 0xed
 8001410:	f7ff fef4 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x64);
 8001414:	2064      	movs	r0, #100	; 0x64
 8001416:	f7ff ff0d 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 800141a:	2003      	movs	r0, #3
 800141c:	f7ff ff0a 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x12);
 8001420:	2012      	movs	r0, #18
 8001422:	f7ff ff07 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x81);
 8001426:	2081      	movs	r0, #129	; 0x81
 8001428:	f7ff ff04 	bl	8001234 <ILI9341_WriteData>

	//PUMP RATIO CONTROL
	ILI9341_WriteCommand(0xF7);
 800142c:	20f7      	movs	r0, #247	; 0xf7
 800142e:	f7ff fee5 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x20);
 8001432:	2020      	movs	r0, #32
 8001434:	f7ff fefe 	bl	8001234 <ILI9341_WriteData>

	//POWER CONTROL,VRH[5:0]
	ILI9341_WriteCommand(0xC0);
 8001438:	20c0      	movs	r0, #192	; 0xc0
 800143a:	f7ff fedf 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x23);
 800143e:	2023      	movs	r0, #35	; 0x23
 8001440:	f7ff fef8 	bl	8001234 <ILI9341_WriteData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_WriteCommand(0xC1);
 8001444:	20c1      	movs	r0, #193	; 0xc1
 8001446:	f7ff fed9 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x10);
 800144a:	2010      	movs	r0, #16
 800144c:	f7ff fef2 	bl	8001234 <ILI9341_WriteData>

	//VCM CONTROL
	ILI9341_WriteCommand(0xC5);
 8001450:	20c5      	movs	r0, #197	; 0xc5
 8001452:	f7ff fed3 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x3E);
 8001456:	203e      	movs	r0, #62	; 0x3e
 8001458:	f7ff feec 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x28);
 800145c:	2028      	movs	r0, #40	; 0x28
 800145e:	f7ff fee9 	bl	8001234 <ILI9341_WriteData>

	//VCM CONTROL 2
	ILI9341_WriteCommand(0xC7);
 8001462:	20c7      	movs	r0, #199	; 0xc7
 8001464:	f7ff feca 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x86);
 8001468:	2086      	movs	r0, #134	; 0x86
 800146a:	f7ff fee3 	bl	8001234 <ILI9341_WriteData>

	//MEMORY ACCESS CONTROL
	ILI9341_WriteCommand(0x36);
 800146e:	2036      	movs	r0, #54	; 0x36
 8001470:	f7ff fec4 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x48);
 8001474:	2048      	movs	r0, #72	; 0x48
 8001476:	f7ff fedd 	bl	8001234 <ILI9341_WriteData>

	//PIXEL FORMAT
	ILI9341_WriteCommand(0x3A);
 800147a:	203a      	movs	r0, #58	; 0x3a
 800147c:	f7ff febe 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x55);
 8001480:	2055      	movs	r0, #85	; 0x55
 8001482:	f7ff fed7 	bl	8001234 <ILI9341_WriteData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_WriteCommand(0xB1);
 8001486:	20b1      	movs	r0, #177	; 0xb1
 8001488:	f7ff feb8 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 800148c:	2000      	movs	r0, #0
 800148e:	f7ff fed1 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x18);
 8001492:	2018      	movs	r0, #24
 8001494:	f7ff fece 	bl	8001234 <ILI9341_WriteData>

	//DISPLAY FUNCTION CONTROL
	ILI9341_WriteCommand(0xB6);
 8001498:	20b6      	movs	r0, #182	; 0xb6
 800149a:	f7ff feaf 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x08);
 800149e:	2008      	movs	r0, #8
 80014a0:	f7ff fec8 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x82);
 80014a4:	2082      	movs	r0, #130	; 0x82
 80014a6:	f7ff fec5 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x27);
 80014aa:	2027      	movs	r0, #39	; 0x27
 80014ac:	f7ff fec2 	bl	8001234 <ILI9341_WriteData>

	//3GAMMA FUNCTION DISABLE
	ILI9341_WriteCommand(0xF2);
 80014b0:	20f2      	movs	r0, #242	; 0xf2
 80014b2:	f7ff fea3 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 80014b6:	2000      	movs	r0, #0
 80014b8:	f7ff febc 	bl	8001234 <ILI9341_WriteData>

	//GAMMA CURVE SELECTED
	ILI9341_WriteCommand(0x26);
 80014bc:	2026      	movs	r0, #38	; 0x26
 80014be:	f7ff fe9d 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x01);
 80014c2:	2001      	movs	r0, #1
 80014c4:	f7ff feb6 	bl	8001234 <ILI9341_WriteData>

	//POSITIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE0);
 80014c8:	20e0      	movs	r0, #224	; 0xe0
 80014ca:	f7ff fe97 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x0F);
 80014ce:	200f      	movs	r0, #15
 80014d0:	f7ff feb0 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 80014d4:	2031      	movs	r0, #49	; 0x31
 80014d6:	f7ff fead 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x2B);
 80014da:	202b      	movs	r0, #43	; 0x2b
 80014dc:	f7ff feaa 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 80014e0:	200c      	movs	r0, #12
 80014e2:	f7ff fea7 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 80014e6:	200e      	movs	r0, #14
 80014e8:	f7ff fea4 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 80014ec:	2008      	movs	r0, #8
 80014ee:	f7ff fea1 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x4E);
 80014f2:	204e      	movs	r0, #78	; 0x4e
 80014f4:	f7ff fe9e 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0xF1);
 80014f8:	20f1      	movs	r0, #241	; 0xf1
 80014fa:	f7ff fe9b 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x37);
 80014fe:	2037      	movs	r0, #55	; 0x37
 8001500:	f7ff fe98 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8001504:	2007      	movs	r0, #7
 8001506:	f7ff fe95 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x10);
 800150a:	2010      	movs	r0, #16
 800150c:	f7ff fe92 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8001510:	2003      	movs	r0, #3
 8001512:	f7ff fe8f 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8001516:	200e      	movs	r0, #14
 8001518:	f7ff fe8c 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x09);
 800151c:	2009      	movs	r0, #9
 800151e:	f7ff fe89 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8001522:	2000      	movs	r0, #0
 8001524:	f7ff fe86 	bl	8001234 <ILI9341_WriteData>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE1);
 8001528:	20e1      	movs	r0, #225	; 0xe1
 800152a:	f7ff fe67 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 800152e:	2000      	movs	r0, #0
 8001530:	f7ff fe80 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8001534:	200e      	movs	r0, #14
 8001536:	f7ff fe7d 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x14);
 800153a:	2014      	movs	r0, #20
 800153c:	f7ff fe7a 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8001540:	2003      	movs	r0, #3
 8001542:	f7ff fe77 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x11);
 8001546:	2011      	movs	r0, #17
 8001548:	f7ff fe74 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 800154c:	2007      	movs	r0, #7
 800154e:	f7ff fe71 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8001552:	2031      	movs	r0, #49	; 0x31
 8001554:	f7ff fe6e 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8001558:	20c1      	movs	r0, #193	; 0xc1
 800155a:	f7ff fe6b 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x48);
 800155e:	2048      	movs	r0, #72	; 0x48
 8001560:	f7ff fe68 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8001564:	2008      	movs	r0, #8
 8001566:	f7ff fe65 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 800156a:	200f      	movs	r0, #15
 800156c:	f7ff fe62 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8001570:	200c      	movs	r0, #12
 8001572:	f7ff fe5f 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8001576:	2031      	movs	r0, #49	; 0x31
 8001578:	f7ff fe5c 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x36);
 800157c:	2036      	movs	r0, #54	; 0x36
 800157e:	f7ff fe59 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 8001582:	200f      	movs	r0, #15
 8001584:	f7ff fe56 	bl	8001234 <ILI9341_WriteData>

	//EXIT SLEEP
	ILI9341_WriteCommand(0x11);
 8001588:	2011      	movs	r0, #17
 800158a:	f7ff fe37 	bl	80011fc <ILI9341_WriteCommand>
	HAL_Delay(100);
 800158e:	2064      	movs	r0, #100	; 0x64
 8001590:	f002 fa76 	bl	8003a80 <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_WriteCommand(0x29);
 8001594:	2029      	movs	r0, #41	; 0x29
 8001596:	f7ff fe31 	bl	80011fc <ILI9341_WriteCommand>

	//STARTING ROTATION
	ILI9341_SetRotation(SCREEN_VERTICAL_1);
 800159a:	2000      	movs	r0, #0
 800159c:	f000 f802 	bl	80015a4 <ILI9341_SetRotation>
}
 80015a0:	bf00      	nop
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <ILI9341_SetRotation>:

void ILI9341_SetRotation(uint8_t rotation)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	71fb      	strb	r3, [r7, #7]
	ILI9341_WriteCommand(0x36);
 80015ae:	2036      	movs	r0, #54	; 0x36
 80015b0:	f7ff fe24 	bl	80011fc <ILI9341_WriteCommand>
	HAL_Delay(1);
 80015b4:	2001      	movs	r0, #1
 80015b6:	f002 fa63 	bl	8003a80 <HAL_Delay>

	switch(rotation)
 80015ba:	79fb      	ldrb	r3, [r7, #7]
 80015bc:	2b03      	cmp	r3, #3
 80015be:	d837      	bhi.n	8001630 <ILI9341_SetRotation+0x8c>
 80015c0:	a201      	add	r2, pc, #4	; (adr r2, 80015c8 <ILI9341_SetRotation+0x24>)
 80015c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015c6:	bf00      	nop
 80015c8:	080015d9 	.word	0x080015d9
 80015cc:	080015ef 	.word	0x080015ef
 80015d0:	08001605 	.word	0x08001605
 80015d4:	0800161b 	.word	0x0800161b
	{
	case SCREEN_VERTICAL_1:
		ILI9341_WriteData(0x40|0x08);
 80015d8:	2048      	movs	r0, #72	; 0x48
 80015da:	f7ff fe2b 	bl	8001234 <ILI9341_WriteData>
		LCD_WIDTH = 240;
 80015de:	4b17      	ldr	r3, [pc, #92]	; (800163c <ILI9341_SetRotation+0x98>)
 80015e0:	22f0      	movs	r2, #240	; 0xf0
 80015e2:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 80015e4:	4b16      	ldr	r3, [pc, #88]	; (8001640 <ILI9341_SetRotation+0x9c>)
 80015e6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80015ea:	801a      	strh	r2, [r3, #0]
		break;
 80015ec:	e021      	b.n	8001632 <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_1:
		ILI9341_WriteData(0x20|0x08);
 80015ee:	2028      	movs	r0, #40	; 0x28
 80015f0:	f7ff fe20 	bl	8001234 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 80015f4:	4b11      	ldr	r3, [pc, #68]	; (800163c <ILI9341_SetRotation+0x98>)
 80015f6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80015fa:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 80015fc:	4b10      	ldr	r3, [pc, #64]	; (8001640 <ILI9341_SetRotation+0x9c>)
 80015fe:	22f0      	movs	r2, #240	; 0xf0
 8001600:	801a      	strh	r2, [r3, #0]
		break;
 8001602:	e016      	b.n	8001632 <ILI9341_SetRotation+0x8e>
	case SCREEN_VERTICAL_2:
		ILI9341_WriteData(0x80|0x08);
 8001604:	2088      	movs	r0, #136	; 0x88
 8001606:	f7ff fe15 	bl	8001234 <ILI9341_WriteData>
		LCD_WIDTH  = 240;
 800160a:	4b0c      	ldr	r3, [pc, #48]	; (800163c <ILI9341_SetRotation+0x98>)
 800160c:	22f0      	movs	r2, #240	; 0xf0
 800160e:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8001610:	4b0b      	ldr	r3, [pc, #44]	; (8001640 <ILI9341_SetRotation+0x9c>)
 8001612:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001616:	801a      	strh	r2, [r3, #0]
		break;
 8001618:	e00b      	b.n	8001632 <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_2:
		ILI9341_WriteData(0x40|0x80|0x20|0x08);
 800161a:	20e8      	movs	r0, #232	; 0xe8
 800161c:	f7ff fe0a 	bl	8001234 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 8001620:	4b06      	ldr	r3, [pc, #24]	; (800163c <ILI9341_SetRotation+0x98>)
 8001622:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001626:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8001628:	4b05      	ldr	r3, [pc, #20]	; (8001640 <ILI9341_SetRotation+0x9c>)
 800162a:	22f0      	movs	r2, #240	; 0xf0
 800162c:	801a      	strh	r2, [r3, #0]
		break;
 800162e:	e000      	b.n	8001632 <ILI9341_SetRotation+0x8e>
	default:
		break;
 8001630:	bf00      	nop
	}
}
 8001632:	bf00      	nop
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	20000002 	.word	0x20000002
 8001640:	20000000 	.word	0x20000000

08001644 <ILI9341_DrawColorBurst>:
	uint8_t buffer[2] = {color>>8, color};
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
}

void ILI9341_DrawColorBurst(uint16_t color, uint32_t size)
{
 8001644:	b5b0      	push	{r4, r5, r7, lr}
 8001646:	b08c      	sub	sp, #48	; 0x30
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	6039      	str	r1, [r7, #0]
 800164e:	80fb      	strh	r3, [r7, #6]
 8001650:	466b      	mov	r3, sp
 8001652:	461d      	mov	r5, r3
	uint32_t BufferSize = 0;
 8001654:	2300      	movs	r3, #0
 8001656:	627b      	str	r3, [r7, #36]	; 0x24

	if((size*2) < BURST_MAX_SIZE)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001660:	d202      	bcs.n	8001668 <ILI9341_DrawColorBurst+0x24>
	{
		BufferSize = size;
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	627b      	str	r3, [r7, #36]	; 0x24
 8001666:	e002      	b.n	800166e <ILI9341_DrawColorBurst+0x2a>
	}
	else
	{
		BufferSize = BURST_MAX_SIZE;
 8001668:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800166c:	627b      	str	r3, [r7, #36]	; 0x24
	}

	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 800166e:	2201      	movs	r2, #1
 8001670:	2101      	movs	r1, #1
 8001672:	483d      	ldr	r0, [pc, #244]	; (8001768 <ILI9341_DrawColorBurst+0x124>)
 8001674:	f003 f8f0 	bl	8004858 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001678:	2200      	movs	r2, #0
 800167a:	2101      	movs	r1, #1
 800167c:	483b      	ldr	r0, [pc, #236]	; (800176c <ILI9341_DrawColorBurst+0x128>)
 800167e:	f003 f8eb 	bl	8004858 <HAL_GPIO_WritePin>

	uint8_t chifted = color>>8;
 8001682:	88fb      	ldrh	r3, [r7, #6]
 8001684:	0a1b      	lsrs	r3, r3, #8
 8001686:	b29b      	uxth	r3, r3
 8001688:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t BurstBuffer[BufferSize];
 800168c:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800168e:	4623      	mov	r3, r4
 8001690:	3b01      	subs	r3, #1
 8001692:	61fb      	str	r3, [r7, #28]
 8001694:	4620      	mov	r0, r4
 8001696:	f04f 0100 	mov.w	r1, #0
 800169a:	f04f 0200 	mov.w	r2, #0
 800169e:	f04f 0300 	mov.w	r3, #0
 80016a2:	00cb      	lsls	r3, r1, #3
 80016a4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80016a8:	00c2      	lsls	r2, r0, #3
 80016aa:	4620      	mov	r0, r4
 80016ac:	f04f 0100 	mov.w	r1, #0
 80016b0:	f04f 0200 	mov.w	r2, #0
 80016b4:	f04f 0300 	mov.w	r3, #0
 80016b8:	00cb      	lsls	r3, r1, #3
 80016ba:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80016be:	00c2      	lsls	r2, r0, #3
 80016c0:	1de3      	adds	r3, r4, #7
 80016c2:	08db      	lsrs	r3, r3, #3
 80016c4:	00db      	lsls	r3, r3, #3
 80016c6:	ebad 0d03 	sub.w	sp, sp, r3
 80016ca:	466b      	mov	r3, sp
 80016cc:	3300      	adds	r3, #0
 80016ce:	61bb      	str	r3, [r7, #24]

	for(uint32_t j = 0; j < BufferSize; j+=2)
 80016d0:	2300      	movs	r3, #0
 80016d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80016d4:	e00e      	b.n	80016f4 <ILI9341_DrawColorBurst+0xb0>
	{
		BurstBuffer[j] = chifted;
 80016d6:	69ba      	ldr	r2, [r7, #24]
 80016d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016da:	4413      	add	r3, r2
 80016dc:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80016e0:	701a      	strb	r2, [r3, #0]
		BurstBuffer[j+1] = color;
 80016e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016e4:	3301      	adds	r3, #1
 80016e6:	88fa      	ldrh	r2, [r7, #6]
 80016e8:	b2d1      	uxtb	r1, r2
 80016ea:	69ba      	ldr	r2, [r7, #24]
 80016ec:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < BufferSize; j+=2)
 80016ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016f0:	3302      	adds	r3, #2
 80016f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80016f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80016f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d3ec      	bcc.n	80016d6 <ILI9341_DrawColorBurst+0x92>
	}

	uint32_t SendingSize = size * 2;
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	617b      	str	r3, [r7, #20]
	uint32_t SendingInBlock = SendingSize / BufferSize;
 8001702:	697a      	ldr	r2, [r7, #20]
 8001704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001706:	fbb2 f3f3 	udiv	r3, r2, r3
 800170a:	613b      	str	r3, [r7, #16]
	uint32_t RemainderFromBlock = SendingSize % BufferSize;
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001710:	fbb3 f2f2 	udiv	r2, r3, r2
 8001714:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001716:	fb01 f202 	mul.w	r2, r1, r2
 800171a:	1a9b      	subs	r3, r3, r2
 800171c:	60fb      	str	r3, [r7, #12]

	if(SendingInBlock != 0)
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d010      	beq.n	8001746 <ILI9341_DrawColorBurst+0x102>
	{
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8001724:	2300      	movs	r3, #0
 8001726:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001728:	e009      	b.n	800173e <ILI9341_DrawColorBurst+0xfa>
		{
			HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, BufferSize, 10);
 800172a:	69b9      	ldr	r1, [r7, #24]
 800172c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172e:	b29a      	uxth	r2, r3
 8001730:	230a      	movs	r3, #10
 8001732:	480f      	ldr	r0, [pc, #60]	; (8001770 <ILI9341_DrawColorBurst+0x12c>)
 8001734:	f005 f9c5 	bl	8006ac2 <HAL_SPI_Transmit>
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8001738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800173a:	3301      	adds	r3, #1
 800173c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800173e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	429a      	cmp	r2, r3
 8001744:	d3f1      	bcc.n	800172a <ILI9341_DrawColorBurst+0xe6>
		}
	}

	HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, RemainderFromBlock, 10);
 8001746:	69b9      	ldr	r1, [r7, #24]
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	b29a      	uxth	r2, r3
 800174c:	230a      	movs	r3, #10
 800174e:	4808      	ldr	r0, [pc, #32]	; (8001770 <ILI9341_DrawColorBurst+0x12c>)
 8001750:	f005 f9b7 	bl	8006ac2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001754:	2201      	movs	r2, #1
 8001756:	2101      	movs	r1, #1
 8001758:	4804      	ldr	r0, [pc, #16]	; (800176c <ILI9341_DrawColorBurst+0x128>)
 800175a:	f003 f87d 	bl	8004858 <HAL_GPIO_WritePin>
 800175e:	46ad      	mov	sp, r5
}
 8001760:	bf00      	nop
 8001762:	3730      	adds	r7, #48	; 0x30
 8001764:	46bd      	mov	sp, r7
 8001766:	bdb0      	pop	{r4, r5, r7, pc}
 8001768:	40020000 	.word	0x40020000
 800176c:	40020800 	.word	0x40020800
 8001770:	200035b0 	.word	0x200035b0

08001774 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	4603      	mov	r3, r0
 800177c:	80fb      	strh	r3, [r7, #6]
	ILI9341_SetAddress(0, 0, LCD_WIDTH, LCD_HEIGHT);
 800177e:	4b0e      	ldr	r3, [pc, #56]	; (80017b8 <ILI9341_FillScreen+0x44>)
 8001780:	881b      	ldrh	r3, [r3, #0]
 8001782:	b29a      	uxth	r2, r3
 8001784:	4b0d      	ldr	r3, [pc, #52]	; (80017bc <ILI9341_FillScreen+0x48>)
 8001786:	881b      	ldrh	r3, [r3, #0]
 8001788:	b29b      	uxth	r3, r3
 800178a:	2100      	movs	r1, #0
 800178c:	2000      	movs	r0, #0
 800178e:	f7ff fd8b 	bl	80012a8 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, LCD_WIDTH*LCD_HEIGHT);
 8001792:	4b09      	ldr	r3, [pc, #36]	; (80017b8 <ILI9341_FillScreen+0x44>)
 8001794:	881b      	ldrh	r3, [r3, #0]
 8001796:	b29b      	uxth	r3, r3
 8001798:	461a      	mov	r2, r3
 800179a:	4b08      	ldr	r3, [pc, #32]	; (80017bc <ILI9341_FillScreen+0x48>)
 800179c:	881b      	ldrh	r3, [r3, #0]
 800179e:	b29b      	uxth	r3, r3
 80017a0:	fb03 f302 	mul.w	r3, r3, r2
 80017a4:	461a      	mov	r2, r3
 80017a6:	88fb      	ldrh	r3, [r7, #6]
 80017a8:	4611      	mov	r1, r2
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff ff4a 	bl	8001644 <ILI9341_DrawColorBurst>
}
 80017b0:	bf00      	nop
 80017b2:	3708      	adds	r7, #8
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	20000002 	.word	0x20000002
 80017bc:	20000000 	.word	0x20000000

080017c0 <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x,uint16_t y,uint16_t color)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b086      	sub	sp, #24
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	80fb      	strh	r3, [r7, #6]
 80017ca:	460b      	mov	r3, r1
 80017cc:	80bb      	strh	r3, [r7, #4]
 80017ce:	4613      	mov	r3, r2
 80017d0:	807b      	strh	r3, [r7, #2]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 80017d2:	4b2c      	ldr	r3, [pc, #176]	; (8001884 <ILI9341_DrawPixel+0xc4>)
 80017d4:	881b      	ldrh	r3, [r3, #0]
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	88fa      	ldrh	r2, [r7, #6]
 80017da:	429a      	cmp	r2, r3
 80017dc:	d24d      	bcs.n	800187a <ILI9341_DrawPixel+0xba>
 80017de:	4b2a      	ldr	r3, [pc, #168]	; (8001888 <ILI9341_DrawPixel+0xc8>)
 80017e0:	881b      	ldrh	r3, [r3, #0]
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	88ba      	ldrh	r2, [r7, #4]
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d247      	bcs.n	800187a <ILI9341_DrawPixel+0xba>

	uint8_t bufferX[4] = {x>>8, x, (x+1)>>8, (x+1)};
 80017ea:	88fb      	ldrh	r3, [r7, #6]
 80017ec:	0a1b      	lsrs	r3, r3, #8
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	753b      	strb	r3, [r7, #20]
 80017f4:	88fb      	ldrh	r3, [r7, #6]
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	757b      	strb	r3, [r7, #21]
 80017fa:	88fb      	ldrh	r3, [r7, #6]
 80017fc:	3301      	adds	r3, #1
 80017fe:	121b      	asrs	r3, r3, #8
 8001800:	b2db      	uxtb	r3, r3
 8001802:	75bb      	strb	r3, [r7, #22]
 8001804:	88fb      	ldrh	r3, [r7, #6]
 8001806:	b2db      	uxtb	r3, r3
 8001808:	3301      	adds	r3, #1
 800180a:	b2db      	uxtb	r3, r3
 800180c:	75fb      	strb	r3, [r7, #23]
	uint8_t bufferY[4] = {y>>8, y, (y+1)>>8, (y+1)};
 800180e:	88bb      	ldrh	r3, [r7, #4]
 8001810:	0a1b      	lsrs	r3, r3, #8
 8001812:	b29b      	uxth	r3, r3
 8001814:	b2db      	uxtb	r3, r3
 8001816:	743b      	strb	r3, [r7, #16]
 8001818:	88bb      	ldrh	r3, [r7, #4]
 800181a:	b2db      	uxtb	r3, r3
 800181c:	747b      	strb	r3, [r7, #17]
 800181e:	88bb      	ldrh	r3, [r7, #4]
 8001820:	3301      	adds	r3, #1
 8001822:	121b      	asrs	r3, r3, #8
 8001824:	b2db      	uxtb	r3, r3
 8001826:	74bb      	strb	r3, [r7, #18]
 8001828:	88bb      	ldrh	r3, [r7, #4]
 800182a:	b2db      	uxtb	r3, r3
 800182c:	3301      	adds	r3, #1
 800182e:	b2db      	uxtb	r3, r3
 8001830:	74fb      	strb	r3, [r7, #19]
	uint8_t bufferC[2] = {color>>8, color};
 8001832:	887b      	ldrh	r3, [r7, #2]
 8001834:	0a1b      	lsrs	r3, r3, #8
 8001836:	b29b      	uxth	r3, r3
 8001838:	b2db      	uxtb	r3, r3
 800183a:	733b      	strb	r3, [r7, #12]
 800183c:	887b      	ldrh	r3, [r7, #2]
 800183e:	b2db      	uxtb	r3, r3
 8001840:	737b      	strb	r3, [r7, #13]

	ILI9341_WriteCommand(0x2A);						//ADDRESS
 8001842:	202a      	movs	r0, #42	; 0x2a
 8001844:	f7ff fcda 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferX, sizeof(bufferX));	//XDATA
 8001848:	f107 0314 	add.w	r3, r7, #20
 800184c:	2104      	movs	r1, #4
 800184e:	4618      	mov	r0, r3
 8001850:	f7ff fd0c 	bl	800126c <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2B);						//ADDRESS
 8001854:	202b      	movs	r0, #43	; 0x2b
 8001856:	f7ff fcd1 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferY, sizeof(bufferY));	//YDATA
 800185a:	f107 0310 	add.w	r3, r7, #16
 800185e:	2104      	movs	r1, #4
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff fd03 	bl	800126c <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);						//ADDRESS
 8001866:	202c      	movs	r0, #44	; 0x2c
 8001868:	f7ff fcc8 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferC, sizeof(bufferC));	//COLOR
 800186c:	f107 030c 	add.w	r3, r7, #12
 8001870:	2102      	movs	r1, #2
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff fcfa 	bl	800126c <ILI9341_WriteBuffer>
 8001878:	e000      	b.n	800187c <ILI9341_DrawPixel+0xbc>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 800187a:	bf00      	nop
}
 800187c:	3718      	adds	r7, #24
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	20000002 	.word	0x20000002
 8001888:	20000000 	.word	0x20000000

0800188c <ILI9341_DrawRectangle>:

void ILI9341_DrawRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 800188c:	b590      	push	{r4, r7, lr}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	4604      	mov	r4, r0
 8001894:	4608      	mov	r0, r1
 8001896:	4611      	mov	r1, r2
 8001898:	461a      	mov	r2, r3
 800189a:	4623      	mov	r3, r4
 800189c:	80fb      	strh	r3, [r7, #6]
 800189e:	4603      	mov	r3, r0
 80018a0:	80bb      	strh	r3, [r7, #4]
 80018a2:	460b      	mov	r3, r1
 80018a4:	807b      	strh	r3, [r7, #2]
 80018a6:	4613      	mov	r3, r2
 80018a8:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 80018aa:	4b24      	ldr	r3, [pc, #144]	; (800193c <ILI9341_DrawRectangle+0xb0>)
 80018ac:	881b      	ldrh	r3, [r3, #0]
 80018ae:	b29b      	uxth	r3, r3
 80018b0:	88fa      	ldrh	r2, [r7, #6]
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d23d      	bcs.n	8001932 <ILI9341_DrawRectangle+0xa6>
 80018b6:	4b22      	ldr	r3, [pc, #136]	; (8001940 <ILI9341_DrawRectangle+0xb4>)
 80018b8:	881b      	ldrh	r3, [r3, #0]
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	88ba      	ldrh	r2, [r7, #4]
 80018be:	429a      	cmp	r2, r3
 80018c0:	d237      	bcs.n	8001932 <ILI9341_DrawRectangle+0xa6>

	if((x+width-1)>=LCD_WIDTH)
 80018c2:	88fa      	ldrh	r2, [r7, #6]
 80018c4:	887b      	ldrh	r3, [r7, #2]
 80018c6:	4413      	add	r3, r2
 80018c8:	4a1c      	ldr	r2, [pc, #112]	; (800193c <ILI9341_DrawRectangle+0xb0>)
 80018ca:	8812      	ldrh	r2, [r2, #0]
 80018cc:	b292      	uxth	r2, r2
 80018ce:	4293      	cmp	r3, r2
 80018d0:	dd05      	ble.n	80018de <ILI9341_DrawRectangle+0x52>
	{
		width=LCD_WIDTH-x;
 80018d2:	4b1a      	ldr	r3, [pc, #104]	; (800193c <ILI9341_DrawRectangle+0xb0>)
 80018d4:	881b      	ldrh	r3, [r3, #0]
 80018d6:	b29a      	uxth	r2, r3
 80018d8:	88fb      	ldrh	r3, [r7, #6]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	807b      	strh	r3, [r7, #2]
	}

	if((y+height-1)>=LCD_HEIGHT)
 80018de:	88ba      	ldrh	r2, [r7, #4]
 80018e0:	883b      	ldrh	r3, [r7, #0]
 80018e2:	4413      	add	r3, r2
 80018e4:	4a16      	ldr	r2, [pc, #88]	; (8001940 <ILI9341_DrawRectangle+0xb4>)
 80018e6:	8812      	ldrh	r2, [r2, #0]
 80018e8:	b292      	uxth	r2, r2
 80018ea:	4293      	cmp	r3, r2
 80018ec:	dd05      	ble.n	80018fa <ILI9341_DrawRectangle+0x6e>
	{
		height=LCD_HEIGHT-y;
 80018ee:	4b14      	ldr	r3, [pc, #80]	; (8001940 <ILI9341_DrawRectangle+0xb4>)
 80018f0:	881b      	ldrh	r3, [r3, #0]
 80018f2:	b29a      	uxth	r2, r3
 80018f4:	88bb      	ldrh	r3, [r7, #4]
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	803b      	strh	r3, [r7, #0]
	}

	ILI9341_SetAddress(x, y, x+width-1, y+height-1);
 80018fa:	88fa      	ldrh	r2, [r7, #6]
 80018fc:	887b      	ldrh	r3, [r7, #2]
 80018fe:	4413      	add	r3, r2
 8001900:	b29b      	uxth	r3, r3
 8001902:	3b01      	subs	r3, #1
 8001904:	b29c      	uxth	r4, r3
 8001906:	88ba      	ldrh	r2, [r7, #4]
 8001908:	883b      	ldrh	r3, [r7, #0]
 800190a:	4413      	add	r3, r2
 800190c:	b29b      	uxth	r3, r3
 800190e:	3b01      	subs	r3, #1
 8001910:	b29b      	uxth	r3, r3
 8001912:	88b9      	ldrh	r1, [r7, #4]
 8001914:	88f8      	ldrh	r0, [r7, #6]
 8001916:	4622      	mov	r2, r4
 8001918:	f7ff fcc6 	bl	80012a8 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, height*width);
 800191c:	883b      	ldrh	r3, [r7, #0]
 800191e:	887a      	ldrh	r2, [r7, #2]
 8001920:	fb02 f303 	mul.w	r3, r2, r3
 8001924:	461a      	mov	r2, r3
 8001926:	8b3b      	ldrh	r3, [r7, #24]
 8001928:	4611      	mov	r1, r2
 800192a:	4618      	mov	r0, r3
 800192c:	f7ff fe8a 	bl	8001644 <ILI9341_DrawColorBurst>
 8001930:	e000      	b.n	8001934 <ILI9341_DrawRectangle+0xa8>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001932:	bf00      	nop
}
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	bd90      	pop	{r4, r7, pc}
 800193a:	bf00      	nop
 800193c:	20000002 	.word	0x20000002
 8001940:	20000000 	.word	0x20000000

08001944 <ILI9341_DrawHLine>:

void ILI9341_DrawHLine(uint16_t x, uint16_t y, uint16_t width, uint16_t color)
{
 8001944:	b590      	push	{r4, r7, lr}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	4604      	mov	r4, r0
 800194c:	4608      	mov	r0, r1
 800194e:	4611      	mov	r1, r2
 8001950:	461a      	mov	r2, r3
 8001952:	4623      	mov	r3, r4
 8001954:	80fb      	strh	r3, [r7, #6]
 8001956:	4603      	mov	r3, r0
 8001958:	80bb      	strh	r3, [r7, #4]
 800195a:	460b      	mov	r3, r1
 800195c:	807b      	strh	r3, [r7, #2]
 800195e:	4613      	mov	r3, r2
 8001960:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001962:	4b18      	ldr	r3, [pc, #96]	; (80019c4 <ILI9341_DrawHLine+0x80>)
 8001964:	881b      	ldrh	r3, [r3, #0]
 8001966:	b29b      	uxth	r3, r3
 8001968:	88fa      	ldrh	r2, [r7, #6]
 800196a:	429a      	cmp	r2, r3
 800196c:	d225      	bcs.n	80019ba <ILI9341_DrawHLine+0x76>
 800196e:	4b16      	ldr	r3, [pc, #88]	; (80019c8 <ILI9341_DrawHLine+0x84>)
 8001970:	881b      	ldrh	r3, [r3, #0]
 8001972:	b29b      	uxth	r3, r3
 8001974:	88ba      	ldrh	r2, [r7, #4]
 8001976:	429a      	cmp	r2, r3
 8001978:	d21f      	bcs.n	80019ba <ILI9341_DrawHLine+0x76>

	if((x+width-1)>=LCD_WIDTH)
 800197a:	88fa      	ldrh	r2, [r7, #6]
 800197c:	887b      	ldrh	r3, [r7, #2]
 800197e:	4413      	add	r3, r2
 8001980:	4a10      	ldr	r2, [pc, #64]	; (80019c4 <ILI9341_DrawHLine+0x80>)
 8001982:	8812      	ldrh	r2, [r2, #0]
 8001984:	b292      	uxth	r2, r2
 8001986:	4293      	cmp	r3, r2
 8001988:	dd05      	ble.n	8001996 <ILI9341_DrawHLine+0x52>
	{
		width=LCD_WIDTH-x;
 800198a:	4b0e      	ldr	r3, [pc, #56]	; (80019c4 <ILI9341_DrawHLine+0x80>)
 800198c:	881b      	ldrh	r3, [r3, #0]
 800198e:	b29a      	uxth	r2, r3
 8001990:	88fb      	ldrh	r3, [r7, #6]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	807b      	strh	r3, [r7, #2]
	}

	ILI9341_SetAddress(x, y, x+width-1, y);
 8001996:	88fa      	ldrh	r2, [r7, #6]
 8001998:	887b      	ldrh	r3, [r7, #2]
 800199a:	4413      	add	r3, r2
 800199c:	b29b      	uxth	r3, r3
 800199e:	3b01      	subs	r3, #1
 80019a0:	b29a      	uxth	r2, r3
 80019a2:	88bb      	ldrh	r3, [r7, #4]
 80019a4:	88b9      	ldrh	r1, [r7, #4]
 80019a6:	88f8      	ldrh	r0, [r7, #6]
 80019a8:	f7ff fc7e 	bl	80012a8 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, width);
 80019ac:	887a      	ldrh	r2, [r7, #2]
 80019ae:	883b      	ldrh	r3, [r7, #0]
 80019b0:	4611      	mov	r1, r2
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7ff fe46 	bl	8001644 <ILI9341_DrawColorBurst>
 80019b8:	e000      	b.n	80019bc <ILI9341_DrawHLine+0x78>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 80019ba:	bf00      	nop
}
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd90      	pop	{r4, r7, pc}
 80019c2:	bf00      	nop
 80019c4:	20000002 	.word	0x20000002
 80019c8:	20000000 	.word	0x20000000

080019cc <ILI9341_DrawVLine>:

void ILI9341_DrawVLine(uint16_t x, uint16_t y, uint16_t height, uint16_t color)
{
 80019cc:	b590      	push	{r4, r7, lr}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4604      	mov	r4, r0
 80019d4:	4608      	mov	r0, r1
 80019d6:	4611      	mov	r1, r2
 80019d8:	461a      	mov	r2, r3
 80019da:	4623      	mov	r3, r4
 80019dc:	80fb      	strh	r3, [r7, #6]
 80019de:	4603      	mov	r3, r0
 80019e0:	80bb      	strh	r3, [r7, #4]
 80019e2:	460b      	mov	r3, r1
 80019e4:	807b      	strh	r3, [r7, #2]
 80019e6:	4613      	mov	r3, r2
 80019e8:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 80019ea:	4b18      	ldr	r3, [pc, #96]	; (8001a4c <ILI9341_DrawVLine+0x80>)
 80019ec:	881b      	ldrh	r3, [r3, #0]
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	88fa      	ldrh	r2, [r7, #6]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d225      	bcs.n	8001a42 <ILI9341_DrawVLine+0x76>
 80019f6:	4b16      	ldr	r3, [pc, #88]	; (8001a50 <ILI9341_DrawVLine+0x84>)
 80019f8:	881b      	ldrh	r3, [r3, #0]
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	88ba      	ldrh	r2, [r7, #4]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d21f      	bcs.n	8001a42 <ILI9341_DrawVLine+0x76>

	if((y+height-1)>=LCD_HEIGHT)
 8001a02:	88ba      	ldrh	r2, [r7, #4]
 8001a04:	887b      	ldrh	r3, [r7, #2]
 8001a06:	4413      	add	r3, r2
 8001a08:	4a11      	ldr	r2, [pc, #68]	; (8001a50 <ILI9341_DrawVLine+0x84>)
 8001a0a:	8812      	ldrh	r2, [r2, #0]
 8001a0c:	b292      	uxth	r2, r2
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	dd05      	ble.n	8001a1e <ILI9341_DrawVLine+0x52>
	{
		height=LCD_HEIGHT-y;
 8001a12:	4b0f      	ldr	r3, [pc, #60]	; (8001a50 <ILI9341_DrawVLine+0x84>)
 8001a14:	881b      	ldrh	r3, [r3, #0]
 8001a16:	b29a      	uxth	r2, r3
 8001a18:	88bb      	ldrh	r3, [r7, #4]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	807b      	strh	r3, [r7, #2]
	}

	ILI9341_SetAddress(x, y, x, y+height-1);
 8001a1e:	88ba      	ldrh	r2, [r7, #4]
 8001a20:	887b      	ldrh	r3, [r7, #2]
 8001a22:	4413      	add	r3, r2
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	3b01      	subs	r3, #1
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	88fa      	ldrh	r2, [r7, #6]
 8001a2c:	88b9      	ldrh	r1, [r7, #4]
 8001a2e:	88f8      	ldrh	r0, [r7, #6]
 8001a30:	f7ff fc3a 	bl	80012a8 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, height);
 8001a34:	887a      	ldrh	r2, [r7, #2]
 8001a36:	883b      	ldrh	r3, [r7, #0]
 8001a38:	4611      	mov	r1, r2
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7ff fe02 	bl	8001644 <ILI9341_DrawColorBurst>
 8001a40:	e000      	b.n	8001a44 <ILI9341_DrawVLine+0x78>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001a42:	bf00      	nop
}
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd90      	pop	{r4, r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	20000002 	.word	0x20000002
 8001a50:	20000000 	.word	0x20000000

08001a54 <wireWriteRegister>:
/*!
    @brief  Sends a single command byte over I2C
*/
/**************************************************************************/
void wireWriteRegister (uint8_t reg, uint16_t value)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b088      	sub	sp, #32
 8001a58:	af04      	add	r7, sp, #16
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	460a      	mov	r2, r1
 8001a5e:	71fb      	strb	r3, [r7, #7]
 8001a60:	4613      	mov	r3, r2
 8001a62:	80bb      	strh	r3, [r7, #4]
	uint8_t i2c_temp[2];
	i2c_temp[0] = value>>8;
 8001a64:	88bb      	ldrh	r3, [r7, #4]
 8001a66:	0a1b      	lsrs	r3, r3, #8
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	733b      	strb	r3, [r7, #12]
	i2c_temp[1] = value;
 8001a6e:	88bb      	ldrh	r3, [r7, #4]
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(&hi2c1, INA219_ADDRESS<<1, (uint16_t)reg, 1, i2c_temp, 2, 0xffffffff);
 8001a74:	79fb      	ldrb	r3, [r7, #7]
 8001a76:	b29a      	uxth	r2, r3
 8001a78:	f04f 33ff 	mov.w	r3, #4294967295
 8001a7c:	9302      	str	r3, [sp, #8]
 8001a7e:	2302      	movs	r3, #2
 8001a80:	9301      	str	r3, [sp, #4]
 8001a82:	f107 030c 	add.w	r3, r7, #12
 8001a86:	9300      	str	r3, [sp, #0]
 8001a88:	2301      	movs	r3, #1
 8001a8a:	2180      	movs	r1, #128	; 0x80
 8001a8c:	4804      	ldr	r0, [pc, #16]	; (8001aa0 <wireWriteRegister+0x4c>)
 8001a8e:	f003 f859 	bl	8004b44 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8001a92:	2001      	movs	r0, #1
 8001a94:	f001 fff4 	bl	8003a80 <HAL_Delay>
}
 8001a98:	bf00      	nop
 8001a9a:	3710      	adds	r7, #16
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	20002c3c 	.word	0x20002c3c

08001aa4 <wireReadRegister>:
/*!
    @brief  Reads a 16 bit values over I2C
*/
/**************************************************************************/
void wireReadRegister(uint8_t reg, uint16_t *value)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b088      	sub	sp, #32
 8001aa8:	af04      	add	r7, sp, #16
 8001aaa:	4603      	mov	r3, r0
 8001aac:	6039      	str	r1, [r7, #0]
 8001aae:	71fb      	strb	r3, [r7, #7]
	uint8_t i2c_temp[2];
	HAL_I2C_Mem_Read(&hi2c1, INA219_ADDRESS<<1, (uint16_t)reg, 1,i2c_temp, 2, 0xffffffff);
 8001ab0:	79fb      	ldrb	r3, [r7, #7]
 8001ab2:	b29a      	uxth	r2, r3
 8001ab4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ab8:	9302      	str	r3, [sp, #8]
 8001aba:	2302      	movs	r3, #2
 8001abc:	9301      	str	r3, [sp, #4]
 8001abe:	f107 030c 	add.w	r3, r7, #12
 8001ac2:	9300      	str	r3, [sp, #0]
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	2180      	movs	r1, #128	; 0x80
 8001ac8:	4809      	ldr	r0, [pc, #36]	; (8001af0 <wireReadRegister+0x4c>)
 8001aca:	f003 f935 	bl	8004d38 <HAL_I2C_Mem_Read>
	HAL_Delay(1);
 8001ace:	2001      	movs	r0, #1
 8001ad0:	f001 ffd6 	bl	8003a80 <HAL_Delay>
	*value = ((uint16_t)i2c_temp[0]<<8 )|(uint16_t)i2c_temp[1];
 8001ad4:	7b3b      	ldrb	r3, [r7, #12]
 8001ad6:	021b      	lsls	r3, r3, #8
 8001ad8:	b21a      	sxth	r2, r3
 8001ada:	7b7b      	ldrb	r3, [r7, #13]
 8001adc:	b21b      	sxth	r3, r3
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	b21b      	sxth	r3, r3
 8001ae2:	b29a      	uxth	r2, r3
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	801a      	strh	r2, [r3, #0]
}
 8001ae8:	bf00      	nop
 8001aea:	3710      	adds	r7, #16
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	20002c3c 	.word	0x20002c3c

08001af4 <setCalibration_16V_400mA>:
    @brief set device to alibration which uses the highest precision for
      current measurement (0.1mA), at the expense of
      only supporting 16V at 400mA max.
*/
/**************************************************************************/
void setCalibration_16V_400mA(void) {
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0

  // 5. Compute the calibration register
  // Cal = trunc (0.04096 / (Current_LSB * RSHUNT))
  // Cal = 8192 (0x2000)

  ina219_calValue = 8192;
 8001afa:	4b0e      	ldr	r3, [pc, #56]	; (8001b34 <setCalibration_16V_400mA+0x40>)
 8001afc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b00:	601a      	str	r2, [r3, #0]
  // MaximumPower = Max_Current_Before_Overflow * VBUS_MAX
  // MaximumPower = 0.4 * 16V
  // MaximumPower = 6.4W

  // Set multipliers to convert raw current/power values
  ina219_currentDivider_mA = 20;  // Current LSB = 50uA per bit (1000/50 = 20)
 8001b02:	4b0d      	ldr	r3, [pc, #52]	; (8001b38 <setCalibration_16V_400mA+0x44>)
 8001b04:	2214      	movs	r2, #20
 8001b06:	601a      	str	r2, [r3, #0]
  ina219_powerMultiplier_mW = 1;     // Power LSB = 1mW per bit
 8001b08:	4b0c      	ldr	r3, [pc, #48]	; (8001b3c <setCalibration_16V_400mA+0x48>)
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	601a      	str	r2, [r3, #0]

  // Set Calibration register to 'Cal' calculated above
  wireWriteRegister(INA219_REG_CALIBRATION, ina219_calValue);
 8001b0e:	4b09      	ldr	r3, [pc, #36]	; (8001b34 <setCalibration_16V_400mA+0x40>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	4619      	mov	r1, r3
 8001b16:	2005      	movs	r0, #5
 8001b18:	f7ff ff9c 	bl	8001a54 <wireWriteRegister>

  // Set Config register to take into account the settings above
  uint16_t config = INA219_CONFIG_BVOLTAGERANGE_16V |
 8001b1c:	f240 139f 	movw	r3, #415	; 0x19f
 8001b20:	80fb      	strh	r3, [r7, #6]
                    INA219_CONFIG_GAIN_1_40MV |
                    INA219_CONFIG_BADCRES_12BIT |
                    INA219_CONFIG_SADCRES_12BIT_1S_532US |
                    INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS;
  wireWriteRegister(INA219_REG_CONFIG, config);
 8001b22:	88fb      	ldrh	r3, [r7, #6]
 8001b24:	4619      	mov	r1, r3
 8001b26:	2000      	movs	r0, #0
 8001b28:	f7ff ff94 	bl	8001a54 <wireWriteRegister>
}
 8001b2c:	bf00      	nop
 8001b2e:	3708      	adds	r7, #8
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	20002a6c 	.word	0x20002a6c
 8001b38:	20000a60 	.word	0x20000a60
 8001b3c:	20000a64 	.word	0x20000a64

08001b40 <getBusVoltage_raw>:
/*!
    @brief  Gets the raw bus voltage (16-bit signed integer, so +-32767)
    @return the raw bus voltage reading
*/
/**************************************************************************/
int16_t getBusVoltage_raw() {
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
  uint16_t value;
  wireReadRegister(INA219_REG_BUSVOLTAGE, &value);
 8001b46:	1dbb      	adds	r3, r7, #6
 8001b48:	4619      	mov	r1, r3
 8001b4a:	2002      	movs	r0, #2
 8001b4c:	f7ff ffaa 	bl	8001aa4 <wireReadRegister>

  // Shift to the right 3 to drop CNVR and OVF and multiply by LSB
  return (int16_t)((value >> 3) * 4);
 8001b50:	88fb      	ldrh	r3, [r7, #6]
 8001b52:	08db      	lsrs	r3, r3, #3
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	b21b      	sxth	r3, r3
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3708      	adds	r7, #8
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <getCurrent_raw>:
/*!
    @brief  Gets the raw current value (16-bit signed integer, so +-32767)
    @return the raw current reading
*/
/**************************************************************************/
int16_t getCurrent_raw() {
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0

  // Sometimes a sharp load will reset the INA219, which will
  // reset the cal register, meaning CURRENT and POWER will
  // not be available ... avoid this by always setting a cal
  // value even if it's an unfortunate extra step
  wireWriteRegister(INA219_REG_CALIBRATION, ina219_calValue);
 8001b6a:	4b09      	ldr	r3, [pc, #36]	; (8001b90 <getCurrent_raw+0x2c>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	4619      	mov	r1, r3
 8001b72:	2005      	movs	r0, #5
 8001b74:	f7ff ff6e 	bl	8001a54 <wireWriteRegister>

  // Now we can safely read the CURRENT register!
  wireReadRegister(INA219_REG_CURRENT, &value);
 8001b78:	1dbb      	adds	r3, r7, #6
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	2004      	movs	r0, #4
 8001b7e:	f7ff ff91 	bl	8001aa4 <wireReadRegister>

  return (int16_t)value;
 8001b82:	88fb      	ldrh	r3, [r7, #6]
 8001b84:	b21b      	sxth	r3, r3
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	20002a6c 	.word	0x20002a6c

08001b94 <getPower_raw>:
/*!
    @brief  Gets the raw power value (16-bit signed integer, so +-32767)
    @return raw power reading
*/
/**************************************************************************/
int16_t getPower_raw() {
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0

  // Sometimes a sharp load will reset the INA219, which will
  // reset the cal register, meaning CURRENT and POWER will
  // not be available ... avoid this by always setting a cal
  // value even if it's an unfortunate extra step
  wireWriteRegister(INA219_REG_CALIBRATION, ina219_calValue);
 8001b9a:	4b09      	ldr	r3, [pc, #36]	; (8001bc0 <getPower_raw+0x2c>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	2005      	movs	r0, #5
 8001ba4:	f7ff ff56 	bl	8001a54 <wireWriteRegister>

  // Now we can safely read the POWER register!
  wireReadRegister(INA219_REG_POWER, &value);
 8001ba8:	1dbb      	adds	r3, r7, #6
 8001baa:	4619      	mov	r1, r3
 8001bac:	2003      	movs	r0, #3
 8001bae:	f7ff ff79 	bl	8001aa4 <wireReadRegister>

  return (int16_t)value;
 8001bb2:	88fb      	ldrh	r3, [r7, #6]
 8001bb4:	b21b      	sxth	r3, r3
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	20002a6c 	.word	0x20002a6c
 8001bc4:	00000000 	.word	0x00000000

08001bc8 <getBusVoltage_V>:
/*!
    @brief  Gets the shunt voltage in volts
    @return the bus voltage converted to volts
*/
/**************************************************************************/
float getBusVoltage_V() {
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
  int16_t value = getBusVoltage_raw();
 8001bce:	f7ff ffb7 	bl	8001b40 <getBusVoltage_raw>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	80fb      	strh	r3, [r7, #6]
  return value * 0.001;
 8001bd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7fe fca2 	bl	8000524 <__aeabi_i2d>
 8001be0:	a309      	add	r3, pc, #36	; (adr r3, 8001c08 <getBusVoltage_V+0x40>)
 8001be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be6:	f7fe fd07 	bl	80005f8 <__aeabi_dmul>
 8001bea:	4602      	mov	r2, r0
 8001bec:	460b      	mov	r3, r1
 8001bee:	4610      	mov	r0, r2
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	f7fe fff9 	bl	8000be8 <__aeabi_d2f>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	ee07 3a90 	vmov	s15, r3
}
 8001bfc:	eeb0 0a67 	vmov.f32	s0, s15
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	d2f1a9fc 	.word	0xd2f1a9fc
 8001c0c:	3f50624d 	.word	0x3f50624d

08001c10 <getCurrent_mA>:
    @brief  Gets the current value in mA, taking into account the
            config settings and current LSB
    @return the current reading convereted to milliamps
*/
/**************************************************************************/
float getCurrent_mA() {
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
  float valueDec = getCurrent_raw();
 8001c16:	f7ff ffa5 	bl	8001b64 <getCurrent_raw>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	ee07 3a90 	vmov	s15, r3
 8001c20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c24:	edc7 7a01 	vstr	s15, [r7, #4]
  valueDec /= ina219_currentDivider_mA;
 8001c28:	4b09      	ldr	r3, [pc, #36]	; (8001c50 <getCurrent_mA+0x40>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	ee07 3a90 	vmov	s15, r3
 8001c30:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c34:	edd7 6a01 	vldr	s13, [r7, #4]
 8001c38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c3c:	edc7 7a01 	vstr	s15, [r7, #4]
  return valueDec;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	ee07 3a90 	vmov	s15, r3
}
 8001c46:	eeb0 0a67 	vmov.f32	s0, s15
 8001c4a:	3708      	adds	r7, #8
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	20000a60 	.word	0x20000a60

08001c54 <getPower_mW>:
    @brief  Gets the power value in mW, taking into account the
            config settings and current LSB
    @return power reading converted to milliwatts
*/
/**************************************************************************/
float getPower_mW() {
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
  float valueDec = getPower_raw();
 8001c5a:	f7ff ff9b 	bl	8001b94 <getPower_raw>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	ee07 3a90 	vmov	s15, r3
 8001c64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c68:	edc7 7a01 	vstr	s15, [r7, #4]
  valueDec *= ina219_powerMultiplier_mW;
 8001c6c:	4b09      	ldr	r3, [pc, #36]	; (8001c94 <getPower_mW+0x40>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	ee07 3a90 	vmov	s15, r3
 8001c74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c78:	ed97 7a01 	vldr	s14, [r7, #4]
 8001c7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c80:	edc7 7a01 	vstr	s15, [r7, #4]
  return valueDec;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	ee07 3a90 	vmov	s15, r3
}
 8001c8a:	eeb0 0a67 	vmov.f32	s0, s15
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	20000a64 	.word	0x20000a64

08001c98 <set_time>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/**Fungsi ini digunakan untuk set timer jika dibutuhkan untuk set rtc
  */
void set_time(void){
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af00      	add	r7, sp, #0
	  RTC_TimeTypeDef sTime = {0};
 8001c9e:	1d3b      	adds	r3, r7, #4
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	605a      	str	r2, [r3, #4]
 8001ca6:	609a      	str	r2, [r3, #8]
 8001ca8:	60da      	str	r2, [r3, #12]
 8001caa:	611a      	str	r2, [r3, #16]
	  RTC_DateTypeDef sDate = {0};
 8001cac:	2300      	movs	r3, #0
 8001cae:	603b      	str	r3, [r7, #0]
	  /** Initialize RTC and set the Time and Date
	  */
	  sTime.Hours = 0x10;
 8001cb0:	2310      	movs	r3, #16
 8001cb2:	713b      	strb	r3, [r7, #4]
	  sTime.Minutes = 0x1;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	717b      	strb	r3, [r7, #5]
	  sTime.Seconds = 0x0;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	71bb      	strb	r3, [r7, #6]
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	613b      	str	r3, [r7, #16]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	617b      	str	r3, [r7, #20]
	  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001cc4:	1d3b      	adds	r3, r7, #4
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4812      	ldr	r0, [pc, #72]	; (8001d14 <set_time+0x7c>)
 8001ccc:	f004 fb9d 	bl	800640a <HAL_RTC_SetTime>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <set_time+0x42>
	  {
	    Error_Handler();
 8001cd6:	f001 fa7d 	bl	80031d4 <Error_Handler>
	  }
	  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	703b      	strb	r3, [r7, #0]
	  sDate.Month = RTC_MONTH_OCTOBER;
 8001cde:	2310      	movs	r3, #16
 8001ce0:	707b      	strb	r3, [r7, #1]
	  sDate.Date = 0x18;
 8001ce2:	2318      	movs	r3, #24
 8001ce4:	70bb      	strb	r3, [r7, #2]
	  sDate.Year = 0x21;
 8001ce6:	2321      	movs	r3, #33	; 0x21
 8001ce8:	70fb      	strb	r3, [r7, #3]

	  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001cea:	463b      	mov	r3, r7
 8001cec:	2201      	movs	r2, #1
 8001cee:	4619      	mov	r1, r3
 8001cf0:	4808      	ldr	r0, [pc, #32]	; (8001d14 <set_time+0x7c>)
 8001cf2:	f004 fca5 	bl	8006640 <HAL_RTC_SetDate>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d001      	beq.n	8001d00 <set_time+0x68>
	  {
	    Error_Handler();
 8001cfc:	f001 fa6a 	bl	80031d4 <Error_Handler>
	  }
	  /* USER CODE BEGIN RTC_Init 2 */
	  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);
 8001d00:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8001d04:	2101      	movs	r1, #1
 8001d06:	4803      	ldr	r0, [pc, #12]	; (8001d14 <set_time+0x7c>)
 8001d08:	f004 fe20 	bl	800694c <HAL_RTCEx_BKUPWrite>
	  /* USER CODE END RTC_Init 2 */

}
 8001d0c:	bf00      	nop
 8001d0e:	3718      	adds	r7, #24
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	20002d74 	.word	0x20002d74

08001d18 <getLCD>:
/**Fungsi ini digunakan untuk LCD*/

void getLCD(char *data_lat,char *data_lng, char *volt, char *amper, char *persen, char *gabungtanggal)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b086      	sub	sp, #24
 8001d1c:	af02      	add	r7, sp, #8
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	607a      	str	r2, [r7, #4]
 8001d24:	603b      	str	r3, [r7, #0]
	  ILI9341_DrawVLine(0, 0, 320, DARKGREEN);
 8001d26:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8001d2a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001d2e:	2100      	movs	r1, #0
 8001d30:	2000      	movs	r0, #0
 8001d32:	f7ff fe4b 	bl	80019cc <ILI9341_DrawVLine>
	  ILI9341_DrawVLine(2, 0, 320, DARKGREEN);
 8001d36:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8001d3a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001d3e:	2100      	movs	r1, #0
 8001d40:	2002      	movs	r0, #2
 8001d42:	f7ff fe43 	bl	80019cc <ILI9341_DrawVLine>
	  ILI9341_DrawText(gabungtanggal, FONT3, 9, 8, WHITE, BLACK);
 8001d46:	2300      	movs	r3, #0
 8001d48:	9301      	str	r3, [sp, #4]
 8001d4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d4e:	9300      	str	r3, [sp, #0]
 8001d50:	2308      	movs	r3, #8
 8001d52:	2209      	movs	r2, #9
 8001d54:	4997      	ldr	r1, [pc, #604]	; (8001fb4 <getLCD+0x29c>)
 8001d56:	69f8      	ldr	r0, [r7, #28]
 8001d58:	f7ff f9bd 	bl	80010d6 <ILI9341_DrawText>
	  ILI9341_DrawRectangle(190, 4, 8, 20, GREENYELLOW);
 8001d5c:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8001d60:	9300      	str	r3, [sp, #0]
 8001d62:	2314      	movs	r3, #20
 8001d64:	2208      	movs	r2, #8
 8001d66:	2104      	movs	r1, #4
 8001d68:	20be      	movs	r0, #190	; 0xbe
 8001d6a:	f7ff fd8f 	bl	800188c <ILI9341_DrawRectangle>
	  ILI9341_DrawRectangle(200, 4, 8, 20, GREENYELLOW);
 8001d6e:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8001d72:	9300      	str	r3, [sp, #0]
 8001d74:	2314      	movs	r3, #20
 8001d76:	2208      	movs	r2, #8
 8001d78:	2104      	movs	r1, #4
 8001d7a:	20c8      	movs	r0, #200	; 0xc8
 8001d7c:	f7ff fd86 	bl	800188c <ILI9341_DrawRectangle>
	  ILI9341_DrawRectangle(210, 4, 8, 20, GREENYELLOW);
 8001d80:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8001d84:	9300      	str	r3, [sp, #0]
 8001d86:	2314      	movs	r3, #20
 8001d88:	2208      	movs	r2, #8
 8001d8a:	2104      	movs	r1, #4
 8001d8c:	20d2      	movs	r0, #210	; 0xd2
 8001d8e:	f7ff fd7d 	bl	800188c <ILI9341_DrawRectangle>
	  ILI9341_DrawRectangle(220, 4, 8, 20, GREENYELLOW);
 8001d92:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8001d96:	9300      	str	r3, [sp, #0]
 8001d98:	2314      	movs	r3, #20
 8001d9a:	2208      	movs	r2, #8
 8001d9c:	2104      	movs	r1, #4
 8001d9e:	20dc      	movs	r0, #220	; 0xdc
 8001da0:	f7ff fd74 	bl	800188c <ILI9341_DrawRectangle>
	  ILI9341_DrawRectangle(230, 4, 8, 20, GREENYELLOW);
 8001da4:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8001da8:	9300      	str	r3, [sp, #0]
 8001daa:	2314      	movs	r3, #20
 8001dac:	2208      	movs	r2, #8
 8001dae:	2104      	movs	r1, #4
 8001db0:	20e6      	movs	r0, #230	; 0xe6
 8001db2:	f7ff fd6b 	bl	800188c <ILI9341_DrawRectangle>
	  ILI9341_DrawVLine(237, 0, 320, DARKGREEN);
 8001db6:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8001dba:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	20ed      	movs	r0, #237	; 0xed
 8001dc2:	f7ff fe03 	bl	80019cc <ILI9341_DrawVLine>
	  ILI9341_DrawVLine(239, 0, 320, DARKGREEN);
 8001dc6:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8001dca:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001dce:	2100      	movs	r1, #0
 8001dd0:	20ef      	movs	r0, #239	; 0xef
 8001dd2:	f7ff fdfb 	bl	80019cc <ILI9341_DrawVLine>
	  ILI9341_DrawHLine(0, 30, 240, DARKGREEN);
 8001dd6:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8001dda:	22f0      	movs	r2, #240	; 0xf0
 8001ddc:	211e      	movs	r1, #30
 8001dde:	2000      	movs	r0, #0
 8001de0:	f7ff fdb0 	bl	8001944 <ILI9341_DrawHLine>
	  ILI9341_DrawHLine(0, 32, 240, DARKGREEN);
 8001de4:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8001de8:	22f0      	movs	r2, #240	; 0xf0
 8001dea:	2120      	movs	r1, #32
 8001dec:	2000      	movs	r0, #0
 8001dee:	f7ff fda9 	bl	8001944 <ILI9341_DrawHLine>
	  ILI9341_DrawText("ID NODE : A", FONT3, 9, 40, WHITE, BLACK);
 8001df2:	2300      	movs	r3, #0
 8001df4:	9301      	str	r3, [sp, #4]
 8001df6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001dfa:	9300      	str	r3, [sp, #0]
 8001dfc:	2328      	movs	r3, #40	; 0x28
 8001dfe:	2209      	movs	r2, #9
 8001e00:	496c      	ldr	r1, [pc, #432]	; (8001fb4 <getLCD+0x29c>)
 8001e02:	486d      	ldr	r0, [pc, #436]	; (8001fb8 <getLCD+0x2a0>)
 8001e04:	f7ff f967 	bl	80010d6 <ILI9341_DrawText>
	  ILI9341_DrawText(volt, FONT3, 120, 40, WHITE, BLACK);
 8001e08:	2300      	movs	r3, #0
 8001e0a:	9301      	str	r3, [sp, #4]
 8001e0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e10:	9300      	str	r3, [sp, #0]
 8001e12:	2328      	movs	r3, #40	; 0x28
 8001e14:	2278      	movs	r2, #120	; 0x78
 8001e16:	4967      	ldr	r1, [pc, #412]	; (8001fb4 <getLCD+0x29c>)
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f7ff f95c 	bl	80010d6 <ILI9341_DrawText>
	  ILI9341_DrawText(amper, FONT3, 180, 40, WHITE, BLACK);
 8001e1e:	2300      	movs	r3, #0
 8001e20:	9301      	str	r3, [sp, #4]
 8001e22:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e26:	9300      	str	r3, [sp, #0]
 8001e28:	2328      	movs	r3, #40	; 0x28
 8001e2a:	22b4      	movs	r2, #180	; 0xb4
 8001e2c:	4961      	ldr	r1, [pc, #388]	; (8001fb4 <getLCD+0x29c>)
 8001e2e:	6838      	ldr	r0, [r7, #0]
 8001e30:	f7ff f951 	bl	80010d6 <ILI9341_DrawText>
	  ILI9341_DrawHLine(0, 60, 240, DARKGREEN);
 8001e34:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8001e38:	22f0      	movs	r2, #240	; 0xf0
 8001e3a:	213c      	movs	r1, #60	; 0x3c
 8001e3c:	2000      	movs	r0, #0
 8001e3e:	f7ff fd81 	bl	8001944 <ILI9341_DrawHLine>
	  ILI9341_DrawHLine(0, 62, 240, DARKGREEN);
 8001e42:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8001e46:	22f0      	movs	r2, #240	; 0xf0
 8001e48:	213e      	movs	r1, #62	; 0x3e
 8001e4a:	2000      	movs	r0, #0
 8001e4c:	f7ff fd7a 	bl	8001944 <ILI9341_DrawHLine>
	  ILI9341_DrawText("Masukkan Pesan yang anda kirim : ", FONT2, 9, 70, WHITE, BLACK);
 8001e50:	2300      	movs	r3, #0
 8001e52:	9301      	str	r3, [sp, #4]
 8001e54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e58:	9300      	str	r3, [sp, #0]
 8001e5a:	2346      	movs	r3, #70	; 0x46
 8001e5c:	2209      	movs	r2, #9
 8001e5e:	4957      	ldr	r1, [pc, #348]	; (8001fbc <getLCD+0x2a4>)
 8001e60:	4857      	ldr	r0, [pc, #348]	; (8001fc0 <getLCD+0x2a8>)
 8001e62:	f7ff f938 	bl	80010d6 <ILI9341_DrawText>
	  ILI9341_DrawHLine(0, 85, 240, DARKGREEN);
 8001e66:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8001e6a:	22f0      	movs	r2, #240	; 0xf0
 8001e6c:	2155      	movs	r1, #85	; 0x55
 8001e6e:	2000      	movs	r0, #0
 8001e70:	f7ff fd68 	bl	8001944 <ILI9341_DrawHLine>
	  ILI9341_DrawHLine(0, 87, 240, DARKGREEN);
 8001e74:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8001e78:	22f0      	movs	r2, #240	; 0xf0
 8001e7a:	2157      	movs	r1, #87	; 0x57
 8001e7c:	2000      	movs	r0, #0
 8001e7e:	f7ff fd61 	bl	8001944 <ILI9341_DrawHLine>
	  ILI9341_DrawText("Ini Pesan Anda", FONT2, 9, 95, WHITE, BLACK);
 8001e82:	2300      	movs	r3, #0
 8001e84:	9301      	str	r3, [sp, #4]
 8001e86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e8a:	9300      	str	r3, [sp, #0]
 8001e8c:	235f      	movs	r3, #95	; 0x5f
 8001e8e:	2209      	movs	r2, #9
 8001e90:	494a      	ldr	r1, [pc, #296]	; (8001fbc <getLCD+0x2a4>)
 8001e92:	484c      	ldr	r0, [pc, #304]	; (8001fc4 <getLCD+0x2ac>)
 8001e94:	f7ff f91f 	bl	80010d6 <ILI9341_DrawText>
	  ILI9341_DrawHLine(0, 150, 240, DARKGREEN);
 8001e98:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8001e9c:	22f0      	movs	r2, #240	; 0xf0
 8001e9e:	2196      	movs	r1, #150	; 0x96
 8001ea0:	2000      	movs	r0, #0
 8001ea2:	f7ff fd4f 	bl	8001944 <ILI9341_DrawHLine>
	  ILI9341_DrawHLine(0, 152, 240, DARKGREEN);
 8001ea6:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8001eaa:	22f0      	movs	r2, #240	; 0xf0
 8001eac:	2198      	movs	r1, #152	; 0x98
 8001eae:	2000      	movs	r0, #0
 8001eb0:	f7ff fd48 	bl	8001944 <ILI9341_DrawHLine>
	  ILI9341_DrawText("Anda Menerima Pesan : ", FONT2, 9, 160, WHITE, BLACK);
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	9301      	str	r3, [sp, #4]
 8001eb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ebc:	9300      	str	r3, [sp, #0]
 8001ebe:	23a0      	movs	r3, #160	; 0xa0
 8001ec0:	2209      	movs	r2, #9
 8001ec2:	493e      	ldr	r1, [pc, #248]	; (8001fbc <getLCD+0x2a4>)
 8001ec4:	4840      	ldr	r0, [pc, #256]	; (8001fc8 <getLCD+0x2b0>)
 8001ec6:	f7ff f906 	bl	80010d6 <ILI9341_DrawText>
	  ILI9341_DrawText("Ini Pesan dia", FONT2, 9, 175, WHITE, BLACK);
 8001eca:	2300      	movs	r3, #0
 8001ecc:	9301      	str	r3, [sp, #4]
 8001ece:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ed2:	9300      	str	r3, [sp, #0]
 8001ed4:	23af      	movs	r3, #175	; 0xaf
 8001ed6:	2209      	movs	r2, #9
 8001ed8:	4938      	ldr	r1, [pc, #224]	; (8001fbc <getLCD+0x2a4>)
 8001eda:	483c      	ldr	r0, [pc, #240]	; (8001fcc <getLCD+0x2b4>)
 8001edc:	f7ff f8fb 	bl	80010d6 <ILI9341_DrawText>
	  ILI9341_DrawHLine(0, 245, 240, DARKGREEN);
 8001ee0:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8001ee4:	22f0      	movs	r2, #240	; 0xf0
 8001ee6:	21f5      	movs	r1, #245	; 0xf5
 8001ee8:	2000      	movs	r0, #0
 8001eea:	f7ff fd2b 	bl	8001944 <ILI9341_DrawHLine>
	  ILI9341_DrawHLine(0, 247, 240, DARKGREEN);
 8001eee:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8001ef2:	22f0      	movs	r2, #240	; 0xf0
 8001ef4:	21f7      	movs	r1, #247	; 0xf7
 8001ef6:	2000      	movs	r0, #0
 8001ef8:	f7ff fd24 	bl	8001944 <ILI9341_DrawHLine>
	  ILI9341_DrawText("Lokasi   : ", FONT2, 9, 255, WHITE, BLACK);
 8001efc:	2300      	movs	r3, #0
 8001efe:	9301      	str	r3, [sp, #4]
 8001f00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f04:	9300      	str	r3, [sp, #0]
 8001f06:	23ff      	movs	r3, #255	; 0xff
 8001f08:	2209      	movs	r2, #9
 8001f0a:	492c      	ldr	r1, [pc, #176]	; (8001fbc <getLCD+0x2a4>)
 8001f0c:	4830      	ldr	r0, [pc, #192]	; (8001fd0 <getLCD+0x2b8>)
 8001f0e:	f7ff f8e2 	bl	80010d6 <ILI9341_DrawText>
	  ILI9341_DrawText("Latitude : ", FONT2, 9, 270, WHITE, BLACK);
 8001f12:	2300      	movs	r3, #0
 8001f14:	9301      	str	r3, [sp, #4]
 8001f16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f1a:	9300      	str	r3, [sp, #0]
 8001f1c:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8001f20:	2209      	movs	r2, #9
 8001f22:	4926      	ldr	r1, [pc, #152]	; (8001fbc <getLCD+0x2a4>)
 8001f24:	482b      	ldr	r0, [pc, #172]	; (8001fd4 <getLCD+0x2bc>)
 8001f26:	f7ff f8d6 	bl	80010d6 <ILI9341_DrawText>
	  ILI9341_DrawText(data_lat, FONT2, 75, 270, WHITE, BLACK);
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	9301      	str	r3, [sp, #4]
 8001f2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f32:	9300      	str	r3, [sp, #0]
 8001f34:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8001f38:	224b      	movs	r2, #75	; 0x4b
 8001f3a:	4920      	ldr	r1, [pc, #128]	; (8001fbc <getLCD+0x2a4>)
 8001f3c:	68f8      	ldr	r0, [r7, #12]
 8001f3e:	f7ff f8ca 	bl	80010d6 <ILI9341_DrawText>
	  ILI9341_DrawText("Longitude : ", FONT2, 9, 285, WHITE, BLACK);
 8001f42:	2300      	movs	r3, #0
 8001f44:	9301      	str	r3, [sp, #4]
 8001f46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f4a:	9300      	str	r3, [sp, #0]
 8001f4c:	f240 131d 	movw	r3, #285	; 0x11d
 8001f50:	2209      	movs	r2, #9
 8001f52:	491a      	ldr	r1, [pc, #104]	; (8001fbc <getLCD+0x2a4>)
 8001f54:	4820      	ldr	r0, [pc, #128]	; (8001fd8 <getLCD+0x2c0>)
 8001f56:	f7ff f8be 	bl	80010d6 <ILI9341_DrawText>
	  ILI9341_DrawText(data_lng, FONT2, 75, 285, WHITE, BLACK);
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	9301      	str	r3, [sp, #4]
 8001f5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f62:	9300      	str	r3, [sp, #0]
 8001f64:	f240 131d 	movw	r3, #285	; 0x11d
 8001f68:	224b      	movs	r2, #75	; 0x4b
 8001f6a:	4914      	ldr	r1, [pc, #80]	; (8001fbc <getLCD+0x2a4>)
 8001f6c:	68b8      	ldr	r0, [r7, #8]
 8001f6e:	f7ff f8b2 	bl	80010d6 <ILI9341_DrawText>
	  ILI9341_DrawHLine(0, 300, 240, DARKGREEN);
 8001f72:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8001f76:	22f0      	movs	r2, #240	; 0xf0
 8001f78:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001f7c:	2000      	movs	r0, #0
 8001f7e:	f7ff fce1 	bl	8001944 <ILI9341_DrawHLine>
	  ILI9341_DrawHLine(0, 300, 240, DARKGREEN);
 8001f82:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8001f86:	22f0      	movs	r2, #240	; 0xf0
 8001f88:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001f8c:	2000      	movs	r0, #0
 8001f8e:	f7ff fcd9 	bl	8001944 <ILI9341_DrawHLine>
	  ILI9341_DrawText("Copyright : www.pens.ac.id", FONT2, 30, 305, WHITE, BLACK);
 8001f92:	2300      	movs	r3, #0
 8001f94:	9301      	str	r3, [sp, #4]
 8001f96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f9a:	9300      	str	r3, [sp, #0]
 8001f9c:	f240 1331 	movw	r3, #305	; 0x131
 8001fa0:	221e      	movs	r2, #30
 8001fa2:	4906      	ldr	r1, [pc, #24]	; (8001fbc <getLCD+0x2a4>)
 8001fa4:	480d      	ldr	r0, [pc, #52]	; (8001fdc <getLCD+0x2c4>)
 8001fa6:	f7ff f896 	bl	80010d6 <ILI9341_DrawText>
}
 8001faa:	bf00      	nop
 8001fac:	3710      	adds	r7, #16
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	0800db80 	.word	0x0800db80
 8001fb8:	0800d1e8 	.word	0x0800d1e8
 8001fbc:	0800d39c 	.word	0x0800d39c
 8001fc0:	0800d1f4 	.word	0x0800d1f4
 8001fc4:	0800d218 	.word	0x0800d218
 8001fc8:	0800d228 	.word	0x0800d228
 8001fcc:	0800d240 	.word	0x0800d240
 8001fd0:	0800d250 	.word	0x0800d250
 8001fd4:	0800d25c 	.word	0x0800d25c
 8001fd8:	0800d268 	.word	0x0800d268
 8001fdc:	0800d278 	.word	0x0800d278

08001fe0 <get_time>:

/**Fungsi ini digunakan untuk membaca interanal RTC
  */
void get_time(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af00      	add	r7, sp, #0
	if (HAL_GetTick() - rtc_millis >= 500){
 8001fe6:	f001 fd3f 	bl	8003a68 <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	4b16      	ldr	r3, [pc, #88]	; (8002048 <get_time+0x68>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001ff6:	d323      	bcc.n	8002040 <get_time+0x60>
		rtc_millis = HAL_GetTick();
 8001ff8:	f001 fd36 	bl	8003a68 <HAL_GetTick>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	4a12      	ldr	r2, [pc, #72]	; (8002048 <get_time+0x68>)
 8002000:	6013      	str	r3, [r2, #0]
		 RTC_DateTypeDef gDate;
		 RTC_TimeTypeDef gTime;
		 HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8002002:	463b      	mov	r3, r7
 8002004:	2200      	movs	r2, #0
 8002006:	4619      	mov	r1, r3
 8002008:	4810      	ldr	r0, [pc, #64]	; (800204c <get_time+0x6c>)
 800200a:	f004 fabb 	bl	8006584 <HAL_RTC_GetTime>
		 HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 800200e:	f107 0314 	add.w	r3, r7, #20
 8002012:	2200      	movs	r2, #0
 8002014:	4619      	mov	r1, r3
 8002016:	480d      	ldr	r0, [pc, #52]	; (800204c <get_time+0x6c>)
 8002018:	f004 fbb9 	bl	800678e <HAL_RTC_GetDate>
		 jam = gTime.Hours; menit = gTime.Minutes; detik = gTime.Seconds;
 800201c:	783a      	ldrb	r2, [r7, #0]
 800201e:	4b0c      	ldr	r3, [pc, #48]	; (8002050 <get_time+0x70>)
 8002020:	701a      	strb	r2, [r3, #0]
 8002022:	787a      	ldrb	r2, [r7, #1]
 8002024:	4b0b      	ldr	r3, [pc, #44]	; (8002054 <get_time+0x74>)
 8002026:	701a      	strb	r2, [r3, #0]
 8002028:	78ba      	ldrb	r2, [r7, #2]
 800202a:	4b0b      	ldr	r3, [pc, #44]	; (8002058 <get_time+0x78>)
 800202c:	701a      	strb	r2, [r3, #0]
		 tanggal = gDate.Date; bulan = gDate.Month; tahun = gDate.Year;
 800202e:	7dba      	ldrb	r2, [r7, #22]
 8002030:	4b0a      	ldr	r3, [pc, #40]	; (800205c <get_time+0x7c>)
 8002032:	701a      	strb	r2, [r3, #0]
 8002034:	7d7a      	ldrb	r2, [r7, #21]
 8002036:	4b0a      	ldr	r3, [pc, #40]	; (8002060 <get_time+0x80>)
 8002038:	701a      	strb	r2, [r3, #0]
 800203a:	7dfa      	ldrb	r2, [r7, #23]
 800203c:	4b09      	ldr	r3, [pc, #36]	; (8002064 <get_time+0x84>)
 800203e:	701a      	strb	r2, [r3, #0]
//		 printf("%02d:%02d:%02d || %02d-%02d-%2d\r\n",jam, menit, detik,tanggal, bulan, 2000 + tahun);
	}
}
 8002040:	bf00      	nop
 8002042:	3718      	adds	r7, #24
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	20000a10 	.word	0x20000a10
 800204c:	20002d74 	.word	0x20002d74
 8002050:	20002d54 	.word	0x20002d54
 8002054:	20002c91 	.word	0x20002c91
 8002058:	20002dae 	.word	0x20002dae
 800205c:	20002c92 	.word	0x20002c92
 8002060:	20003690 	.word	0x20003690
 8002064:	20003680 	.word	0x20003680

08002068 <get_ampere_volt>:
/**Fungsi ini digunakan untuk membaca baterai
  */
void get_ampere_volt(void){
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
	setCalibration_16V_400mA();
 800206e:	f7ff fd41 	bl	8001af4 <setCalibration_16V_400mA>
	tegangan = getBusVoltage_V();
 8002072:	f7ff fda9 	bl	8001bc8 <getBusVoltage_V>
 8002076:	eef0 7a40 	vmov.f32	s15, s0
 800207a:	4b3d      	ldr	r3, [pc, #244]	; (8002170 <get_ampere_volt+0x108>)
 800207c:	edc3 7a00 	vstr	s15, [r3]
	Vshunt = getPower_mW();
 8002080:	f7ff fde8 	bl	8001c54 <getPower_mW>
 8002084:	eef0 7a40 	vmov.f32	s15, s0
 8002088:	4b3a      	ldr	r3, [pc, #232]	; (8002174 <get_ampere_volt+0x10c>)
 800208a:	edc3 7a00 	vstr	s15, [r3]
	arus = getCurrent_mA() * (-1);
 800208e:	f7ff fdbf 	bl	8001c10 <getCurrent_mA>
 8002092:	eef0 7a40 	vmov.f32	s15, s0
 8002096:	eef1 7a67 	vneg.f32	s15, s15
 800209a:	4b37      	ldr	r3, [pc, #220]	; (8002178 <get_ampere_volt+0x110>)
 800209c:	edc3 7a00 	vstr	s15, [r3]
	float maxVoltage = 12.4;
 80020a0:	4b36      	ldr	r3, [pc, #216]	; (800217c <get_ampere_volt+0x114>)
 80020a2:	607b      	str	r3, [r7, #4]
	float minVoltage = 11.2;
 80020a4:	4b36      	ldr	r3, [pc, #216]	; (8002180 <get_ampere_volt+0x118>)
 80020a6:	603b      	str	r3, [r7, #0]
	batteryPercentage = (tegangan - minVoltage) / (maxVoltage - minVoltage) * 100;
 80020a8:	4b31      	ldr	r3, [pc, #196]	; (8002170 <get_ampere_volt+0x108>)
 80020aa:	ed93 7a00 	vldr	s14, [r3]
 80020ae:	edd7 7a00 	vldr	s15, [r7]
 80020b2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80020b6:	ed97 7a01 	vldr	s14, [r7, #4]
 80020ba:	edd7 7a00 	vldr	s15, [r7]
 80020be:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020c6:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002184 <get_ampere_volt+0x11c>
 80020ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020ce:	4b2e      	ldr	r3, [pc, #184]	; (8002188 <get_ampere_volt+0x120>)
 80020d0:	edc3 7a00 	vstr	s15, [r3]
	if (batteryPercentage > 100) batteryPercentage = 100;
 80020d4:	4b2c      	ldr	r3, [pc, #176]	; (8002188 <get_ampere_volt+0x120>)
 80020d6:	edd3 7a00 	vldr	s15, [r3]
 80020da:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002184 <get_ampere_volt+0x11c>
 80020de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020e6:	dd03      	ble.n	80020f0 <get_ampere_volt+0x88>
 80020e8:	4b27      	ldr	r3, [pc, #156]	; (8002188 <get_ampere_volt+0x120>)
 80020ea:	4a28      	ldr	r2, [pc, #160]	; (800218c <get_ampere_volt+0x124>)
 80020ec:	601a      	str	r2, [r3, #0]
 80020ee:	e00b      	b.n	8002108 <get_ampere_volt+0xa0>
	else if (batteryPercentage < 0) batteryPercentage = 0;
 80020f0:	4b25      	ldr	r3, [pc, #148]	; (8002188 <get_ampere_volt+0x120>)
 80020f2:	edd3 7a00 	vldr	s15, [r3]
 80020f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80020fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020fe:	d503      	bpl.n	8002108 <get_ampere_volt+0xa0>
 8002100:	4b21      	ldr	r3, [pc, #132]	; (8002188 <get_ampere_volt+0x120>)
 8002102:	f04f 0200 	mov.w	r2, #0
 8002106:	601a      	str	r2, [r3, #0]
	if (HAL_GetTick() - ina219_millis >= 500){
 8002108:	f001 fcae 	bl	8003a68 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	4b20      	ldr	r3, [pc, #128]	; (8002190 <get_ampere_volt+0x128>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002118:	d325      	bcc.n	8002166 <get_ampere_volt+0xfe>
		ina219_millis = HAL_GetTick();
 800211a:	f001 fca5 	bl	8003a68 <HAL_GetTick>
 800211e:	4603      	mov	r3, r0
 8002120:	4a1b      	ldr	r2, [pc, #108]	; (8002190 <get_ampere_volt+0x128>)
 8002122:	6013      	str	r3, [r2, #0]
//		printf("Vbus: %.1f V| persen: %.1f percent | Ampere: %.1f mA\r\n",tegangan, batteryPercentage, arus);
		sprintf(volt, "%.4g", tegangan);
 8002124:	4b12      	ldr	r3, [pc, #72]	; (8002170 <get_ampere_volt+0x108>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4618      	mov	r0, r3
 800212a:	f7fe fa0d 	bl	8000548 <__aeabi_f2d>
 800212e:	4602      	mov	r2, r0
 8002130:	460b      	mov	r3, r1
 8002132:	4918      	ldr	r1, [pc, #96]	; (8002194 <get_ampere_volt+0x12c>)
 8002134:	4818      	ldr	r0, [pc, #96]	; (8002198 <get_ampere_volt+0x130>)
 8002136:	f007 fa85 	bl	8009644 <siprintf>
		sprintf(amper, "%.5g", arus);
 800213a:	4b0f      	ldr	r3, [pc, #60]	; (8002178 <get_ampere_volt+0x110>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4618      	mov	r0, r3
 8002140:	f7fe fa02 	bl	8000548 <__aeabi_f2d>
 8002144:	4602      	mov	r2, r0
 8002146:	460b      	mov	r3, r1
 8002148:	4914      	ldr	r1, [pc, #80]	; (800219c <get_ampere_volt+0x134>)
 800214a:	4815      	ldr	r0, [pc, #84]	; (80021a0 <get_ampere_volt+0x138>)
 800214c:	f007 fa7a 	bl	8009644 <siprintf>
		sprintf(persen, "%.2g", batteryPercentage);
 8002150:	4b0d      	ldr	r3, [pc, #52]	; (8002188 <get_ampere_volt+0x120>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4618      	mov	r0, r3
 8002156:	f7fe f9f7 	bl	8000548 <__aeabi_f2d>
 800215a:	4602      	mov	r2, r0
 800215c:	460b      	mov	r3, r1
 800215e:	4911      	ldr	r1, [pc, #68]	; (80021a4 <get_ampere_volt+0x13c>)
 8002160:	4811      	ldr	r0, [pc, #68]	; (80021a8 <get_ampere_volt+0x140>)
 8002162:	f007 fa6f 	bl	8009644 <siprintf>
//
	}
}
 8002166:	bf00      	nop
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	20000a20 	.word	0x20000a20
 8002174:	20000a24 	.word	0x20000a24
 8002178:	20000a28 	.word	0x20000a28
 800217c:	41466666 	.word	0x41466666
 8002180:	41333333 	.word	0x41333333
 8002184:	42c80000 	.word	0x42c80000
 8002188:	20000a2c 	.word	0x20000a2c
 800218c:	42c80000 	.word	0x42c80000
 8002190:	20000a14 	.word	0x20000a14
 8002194:	0800d294 	.word	0x0800d294
 8002198:	20003608 	.word	0x20003608
 800219c:	0800d29c 	.word	0x0800d29c
 80021a0:	20002ca8 	.word	0x20002ca8
 80021a4:	0800d2a4 	.word	0x0800d2a4
 80021a8:	20002cdc 	.word	0x20002cdc

080021ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021ac:	b5b0      	push	{r4, r5, r7, lr}
 80021ae:	b086      	sub	sp, #24
 80021b0:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021b2:	f001 fbf3 	bl	800399c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021b6:	f000 f8fb 	bl	80023b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021ba:	f000 fafb 	bl	80027b4 <MX_GPIO_Init>
  MX_DMA_Init();
 80021be:	f000 fabb 	bl	8002738 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80021c2:	f000 fa3b 	bl	800263c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80021c6:	f000 fa63 	bl	8002690 <MX_USART2_UART_Init>
  MX_RTC_Init();
 80021ca:	f000 f9a1 	bl	8002510 <MX_RTC_Init>
  MX_I2C1_Init();
 80021ce:	f000 f971 	bl	80024b4 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 80021d2:	f000 fa87 	bl	80026e4 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 80021d6:	f000 f9fb 	bl	80025d0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart1);
 80021da:	4858      	ldr	r0, [pc, #352]	; (800233c <main+0x190>)
 80021dc:	f001 f800 	bl	80031e0 <RetargetInit>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, RxBuf, RxBuf_SIZE);
 80021e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021e4:	4956      	ldr	r1, [pc, #344]	; (8002340 <main+0x194>)
 80021e6:	4857      	ldr	r0, [pc, #348]	; (8002344 <main+0x198>)
 80021e8:	f005 f93f 	bl	800746a <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 80021ec:	4b56      	ldr	r3, [pc, #344]	; (8002348 <main+0x19c>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	4b55      	ldr	r3, [pc, #340]	; (8002348 <main+0x19c>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f022 0208 	bic.w	r2, r2, #8
 80021fa:	601a      	str	r2, [r3, #0]
  HAL_UARTEx_ReceiveToIdle_DMA(&huart3, RxBuf_3, RxBuf_SIZE);
 80021fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002200:	4952      	ldr	r1, [pc, #328]	; (800234c <main+0x1a0>)
 8002202:	4853      	ldr	r0, [pc, #332]	; (8002350 <main+0x1a4>)
 8002204:	f005 f931 	bl	800746a <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8002208:	4b52      	ldr	r3, [pc, #328]	; (8002354 <main+0x1a8>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	4b51      	ldr	r3, [pc, #324]	; (8002354 <main+0x1a8>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f022 0208 	bic.w	r2, r2, #8
 8002216:	601a      	str	r2, [r3, #0]
  //set m0 m1
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);
 8002218:	2200      	movs	r2, #0
 800221a:	2104      	movs	r1, #4
 800221c:	484e      	ldr	r0, [pc, #312]	; (8002358 <main+0x1ac>)
 800221e:	f002 fb1b 	bl	8004858 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, 0);
 8002222:	2200      	movs	r2, #0
 8002224:	2108      	movs	r1, #8
 8002226:	484c      	ldr	r0, [pc, #304]	; (8002358 <main+0x1ac>)
 8002228:	f002 fb16 	bl	8004858 <HAL_GPIO_WritePin>
  if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0x32F2){
 800222c:	2101      	movs	r1, #1
 800222e:	484b      	ldr	r0, [pc, #300]	; (800235c <main+0x1b0>)
 8002230:	f004 fba6 	bl	8006980 <HAL_RTCEx_BKUPRead>
 8002234:	4603      	mov	r3, r0
 8002236:	f243 22f2 	movw	r2, #13042	; 0x32f2
 800223a:	4293      	cmp	r3, r2
 800223c:	d001      	beq.n	8002242 <main+0x96>
	  set_time();
 800223e:	f7ff fd2b 	bl	8001c98 <set_time>
  }
  //begin LCD
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, 1);
 8002242:	2201      	movs	r2, #1
 8002244:	2110      	movs	r1, #16
 8002246:	4846      	ldr	r0, [pc, #280]	; (8002360 <main+0x1b4>)
 8002248:	f002 fb06 	bl	8004858 <HAL_GPIO_WritePin>
  ILI9341_Init();
 800224c:	f7ff f8a0 	bl	8001390 <ILI9341_Init>
  ILI9341_FillScreen(BLACK);
 8002250:	2000      	movs	r0, #0
 8002252:	f7ff fa8f 	bl	8001774 <ILI9341_FillScreen>
  ILI9341_SetRotation(SCREEN_VERTICAL_2);
 8002256:	2002      	movs	r0, #2
 8002258:	f7ff f9a4 	bl	80015a4 <ILI9341_SetRotation>
  //begin keypad
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, 1);
 800225c:	2201      	movs	r2, #1
 800225e:	2110      	movs	r1, #16
 8002260:	483d      	ldr	r0, [pc, #244]	; (8002358 <main+0x1ac>)
 8002262:	f002 faf9 	bl	8004858 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, 1);
 8002266:	2201      	movs	r2, #1
 8002268:	2120      	movs	r1, #32
 800226a:	483b      	ldr	r0, [pc, #236]	; (8002358 <main+0x1ac>)
 800226c:	f002 faf4 	bl	8004858 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, 1);
 8002270:	2201      	movs	r2, #1
 8002272:	2140      	movs	r1, #64	; 0x40
 8002274:	4838      	ldr	r0, [pc, #224]	; (8002358 <main+0x1ac>)
 8002276:	f002 faef 	bl	8004858 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, 1);
 800227a:	2201      	movs	r2, #1
 800227c:	2180      	movs	r1, #128	; 0x80
 800227e:	4836      	ldr	r0, [pc, #216]	; (8002358 <main+0x1ac>)
 8002280:	f002 faea 	bl	8004858 <HAL_GPIO_WritePin>
  //Millis second set
  rtc_millis = HAL_GetTick();
 8002284:	f001 fbf0 	bl	8003a68 <HAL_GetTick>
 8002288:	4603      	mov	r3, r0
 800228a:	4a36      	ldr	r2, [pc, #216]	; (8002364 <main+0x1b8>)
 800228c:	6013      	str	r3, [r2, #0]
  ina219_millis = HAL_GetTick();
 800228e:	f001 fbeb 	bl	8003a68 <HAL_GetTick>
 8002292:	4603      	mov	r3, r0
 8002294:	4a34      	ldr	r2, [pc, #208]	; (8002368 <main+0x1bc>)
 8002296:	6013      	str	r3, [r2, #0]
  //kirim data dummy  *node,lat,long,data,jam, menit, detik, tegangan
  ukuranstring = sprintf((char*)buff_s, "*A,latitude,longitude,data,jam,menit,detik,baterai\r\n");
 8002298:	4934      	ldr	r1, [pc, #208]	; (800236c <main+0x1c0>)
 800229a:	4835      	ldr	r0, [pc, #212]	; (8002370 <main+0x1c4>)
 800229c:	f007 f9d2 	bl	8009644 <siprintf>
 80022a0:	4603      	mov	r3, r0
 80022a2:	b29a      	uxth	r2, r3
 80022a4:	4b33      	ldr	r3, [pc, #204]	; (8002374 <main+0x1c8>)
 80022a6:	801a      	strh	r2, [r3, #0]
  HAL_UART_Transmit(&huart2, buff_s, ukuranstring, 100);
 80022a8:	4b32      	ldr	r3, [pc, #200]	; (8002374 <main+0x1c8>)
 80022aa:	881a      	ldrh	r2, [r3, #0]
 80022ac:	2364      	movs	r3, #100	; 0x64
 80022ae:	4930      	ldr	r1, [pc, #192]	; (8002370 <main+0x1c4>)
 80022b0:	4824      	ldr	r0, [pc, #144]	; (8002344 <main+0x198>)
 80022b2:	f004 ffa6 	bl	8007202 <HAL_UART_Transmit>
  led_reaction(100, 600);
 80022b6:	f44f 7116 	mov.w	r1, #600	; 0x258
 80022ba:	2064      	movs	r0, #100	; 0x64
 80022bc:	f000 fde0 	bl	8002e80 <led_reaction>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  get_time();
 80022c0:	f7ff fe8e 	bl	8001fe0 <get_time>
//	  get_keypad(keyPressed);
	  get_ampere_volt();
 80022c4:	f7ff fed0 	bl	8002068 <get_ampere_volt>
//	  jam, menit, detik,tanggal, bulan, 2000 + tahun
	  snprintf( gabungtanggal, 50, "%02d:%02d:%02d || %02d-%02d-%2d\r\n",jam, menit, detik,tanggal, bulan, 2000 + tahun );
 80022c8:	4b2b      	ldr	r3, [pc, #172]	; (8002378 <main+0x1cc>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	461d      	mov	r5, r3
 80022ce:	4b2b      	ldr	r3, [pc, #172]	; (800237c <main+0x1d0>)
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	461a      	mov	r2, r3
 80022d4:	4b2a      	ldr	r3, [pc, #168]	; (8002380 <main+0x1d4>)
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	4619      	mov	r1, r3
 80022da:	4b2a      	ldr	r3, [pc, #168]	; (8002384 <main+0x1d8>)
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	4618      	mov	r0, r3
 80022e0:	4b29      	ldr	r3, [pc, #164]	; (8002388 <main+0x1dc>)
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	461c      	mov	r4, r3
 80022e6:	4b29      	ldr	r3, [pc, #164]	; (800238c <main+0x1e0>)
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80022ee:	9304      	str	r3, [sp, #16]
 80022f0:	9403      	str	r4, [sp, #12]
 80022f2:	9002      	str	r0, [sp, #8]
 80022f4:	9101      	str	r1, [sp, #4]
 80022f6:	9200      	str	r2, [sp, #0]
 80022f8:	462b      	mov	r3, r5
 80022fa:	4a25      	ldr	r2, [pc, #148]	; (8002390 <main+0x1e4>)
 80022fc:	2132      	movs	r1, #50	; 0x32
 80022fe:	4825      	ldr	r0, [pc, #148]	; (8002394 <main+0x1e8>)
 8002300:	f007 f96c 	bl	80095dc <sniprintf>
	  printf("%s\n", gabungtanggal);
 8002304:	4823      	ldr	r0, [pc, #140]	; (8002394 <main+0x1e8>)
 8002306:	f007 f895 	bl	8009434 <puts>
	  getLCD(lat, lon, volt, amper, strcat(persen, "%"),gabungtanggal);
 800230a:	4823      	ldr	r0, [pc, #140]	; (8002398 <main+0x1ec>)
 800230c:	f7fd ffb0 	bl	8000270 <strlen>
 8002310:	4603      	mov	r3, r0
 8002312:	461a      	mov	r2, r3
 8002314:	4b20      	ldr	r3, [pc, #128]	; (8002398 <main+0x1ec>)
 8002316:	4413      	add	r3, r2
 8002318:	4920      	ldr	r1, [pc, #128]	; (800239c <main+0x1f0>)
 800231a:	461a      	mov	r2, r3
 800231c:	460b      	mov	r3, r1
 800231e:	881b      	ldrh	r3, [r3, #0]
 8002320:	8013      	strh	r3, [r2, #0]
 8002322:	4b1d      	ldr	r3, [pc, #116]	; (8002398 <main+0x1ec>)
 8002324:	4a1b      	ldr	r2, [pc, #108]	; (8002394 <main+0x1e8>)
 8002326:	9201      	str	r2, [sp, #4]
 8002328:	9300      	str	r3, [sp, #0]
 800232a:	4b1d      	ldr	r3, [pc, #116]	; (80023a0 <main+0x1f4>)
 800232c:	4a1d      	ldr	r2, [pc, #116]	; (80023a4 <main+0x1f8>)
 800232e:	491e      	ldr	r1, [pc, #120]	; (80023a8 <main+0x1fc>)
 8002330:	481e      	ldr	r0, [pc, #120]	; (80023ac <main+0x200>)
 8002332:	f7ff fcf1 	bl	8001d18 <getLCD>
//	  printf("%02d:%02d:%02d || %02d-%02d-%2d\r\n",jam, menit, detik,tanggal, bulan, 2000 + tahun);
//	  printf("%s", lat);
	  get_gps();
 8002336:	f000 fe0b 	bl	8002f50 <get_gps>
	  get_time();
 800233a:	e7c1      	b.n	80022c0 <main+0x114>
 800233c:	20002d10 	.word	0x20002d10
 8002340:	20002db0 	.word	0x20002db0
 8002344:	2000363c 	.word	0x2000363c
 8002348:	20002a70 	.word	0x20002a70
 800234c:	20000604 	.word	0x20000604
 8002350:	20002bf8 	.word	0x20002bf8
 8002354:	20002b98 	.word	0x20002b98
 8002358:	40020c00 	.word	0x40020c00
 800235c:	20002d74 	.word	0x20002d74
 8002360:	40020800 	.word	0x40020800
 8002364:	20000a10 	.word	0x20000a10
 8002368:	20000a14 	.word	0x20000a14
 800236c:	0800d2ac 	.word	0x0800d2ac
 8002370:	20002ad0 	.word	0x20002ad0
 8002374:	20002dac 	.word	0x20002dac
 8002378:	20002d54 	.word	0x20002d54
 800237c:	20002c91 	.word	0x20002c91
 8002380:	20002dae 	.word	0x20002dae
 8002384:	20002c92 	.word	0x20002c92
 8002388:	20003690 	.word	0x20003690
 800238c:	20003680 	.word	0x20003680
 8002390:	0800d2e4 	.word	0x0800d2e4
 8002394:	20003710 	.word	0x20003710
 8002398:	20002cdc 	.word	0x20002cdc
 800239c:	0800d308 	.word	0x0800d308
 80023a0:	20002ca8 	.word	0x20002ca8
 80023a4:	20003608 	.word	0x20003608
 80023a8:	20002d98 	.word	0x20002d98
 80023ac:	200036f4 	.word	0x200036f4

080023b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b098      	sub	sp, #96	; 0x60
 80023b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80023ba:	2230      	movs	r2, #48	; 0x30
 80023bc:	2100      	movs	r1, #0
 80023be:	4618      	mov	r0, r3
 80023c0:	f006 f930 	bl	8008624 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023c4:	f107 031c 	add.w	r3, r7, #28
 80023c8:	2200      	movs	r2, #0
 80023ca:	601a      	str	r2, [r3, #0]
 80023cc:	605a      	str	r2, [r3, #4]
 80023ce:	609a      	str	r2, [r3, #8]
 80023d0:	60da      	str	r2, [r3, #12]
 80023d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023d4:	f107 030c 	add.w	r3, r7, #12
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]
 80023dc:	605a      	str	r2, [r3, #4]
 80023de:	609a      	str	r2, [r3, #8]
 80023e0:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80023e2:	2300      	movs	r3, #0
 80023e4:	60bb      	str	r3, [r7, #8]
 80023e6:	4b31      	ldr	r3, [pc, #196]	; (80024ac <SystemClock_Config+0xfc>)
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	4a30      	ldr	r2, [pc, #192]	; (80024ac <SystemClock_Config+0xfc>)
 80023ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023f0:	6413      	str	r3, [r2, #64]	; 0x40
 80023f2:	4b2e      	ldr	r3, [pc, #184]	; (80024ac <SystemClock_Config+0xfc>)
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023fa:	60bb      	str	r3, [r7, #8]
 80023fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80023fe:	2300      	movs	r3, #0
 8002400:	607b      	str	r3, [r7, #4]
 8002402:	4b2b      	ldr	r3, [pc, #172]	; (80024b0 <SystemClock_Config+0x100>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a2a      	ldr	r2, [pc, #168]	; (80024b0 <SystemClock_Config+0x100>)
 8002408:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800240c:	6013      	str	r3, [r2, #0]
 800240e:	4b28      	ldr	r3, [pc, #160]	; (80024b0 <SystemClock_Config+0x100>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002416:	607b      	str	r3, [r7, #4]
 8002418:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800241a:	2309      	movs	r3, #9
 800241c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800241e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002422:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002424:	2301      	movs	r3, #1
 8002426:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002428:	2302      	movs	r3, #2
 800242a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800242c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002430:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002432:	2304      	movs	r3, #4
 8002434:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002436:	23a8      	movs	r3, #168	; 0xa8
 8002438:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800243a:	2302      	movs	r3, #2
 800243c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800243e:	2304      	movs	r3, #4
 8002440:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002442:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002446:	4618      	mov	r0, r3
 8002448:	f003 f9f8 	bl	800583c <HAL_RCC_OscConfig>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002452:	f000 febf 	bl	80031d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002456:	230f      	movs	r3, #15
 8002458:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800245a:	2302      	movs	r3, #2
 800245c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800245e:	2300      	movs	r3, #0
 8002460:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002462:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002466:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002468:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800246c:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800246e:	f107 031c 	add.w	r3, r7, #28
 8002472:	2105      	movs	r1, #5
 8002474:	4618      	mov	r0, r3
 8002476:	f003 fc59 	bl	8005d2c <HAL_RCC_ClockConfig>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d001      	beq.n	8002484 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002480:	f000 fea8 	bl	80031d4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002484:	2302      	movs	r3, #2
 8002486:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002488:	f44f 7300 	mov.w	r3, #512	; 0x200
 800248c:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800248e:	f107 030c 	add.w	r3, r7, #12
 8002492:	4618      	mov	r0, r3
 8002494:	f003 fe46 	bl	8006124 <HAL_RCCEx_PeriphCLKConfig>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800249e:	f000 fe99 	bl	80031d4 <Error_Handler>
  }
}
 80024a2:	bf00      	nop
 80024a4:	3760      	adds	r7, #96	; 0x60
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	40023800 	.word	0x40023800
 80024b0:	40007000 	.word	0x40007000

080024b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80024b8:	4b12      	ldr	r3, [pc, #72]	; (8002504 <MX_I2C1_Init+0x50>)
 80024ba:	4a13      	ldr	r2, [pc, #76]	; (8002508 <MX_I2C1_Init+0x54>)
 80024bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80024be:	4b11      	ldr	r3, [pc, #68]	; (8002504 <MX_I2C1_Init+0x50>)
 80024c0:	4a12      	ldr	r2, [pc, #72]	; (800250c <MX_I2C1_Init+0x58>)
 80024c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80024c4:	4b0f      	ldr	r3, [pc, #60]	; (8002504 <MX_I2C1_Init+0x50>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80024ca:	4b0e      	ldr	r3, [pc, #56]	; (8002504 <MX_I2C1_Init+0x50>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024d0:	4b0c      	ldr	r3, [pc, #48]	; (8002504 <MX_I2C1_Init+0x50>)
 80024d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80024d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024d8:	4b0a      	ldr	r3, [pc, #40]	; (8002504 <MX_I2C1_Init+0x50>)
 80024da:	2200      	movs	r2, #0
 80024dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80024de:	4b09      	ldr	r3, [pc, #36]	; (8002504 <MX_I2C1_Init+0x50>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024e4:	4b07      	ldr	r3, [pc, #28]	; (8002504 <MX_I2C1_Init+0x50>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024ea:	4b06      	ldr	r3, [pc, #24]	; (8002504 <MX_I2C1_Init+0x50>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80024f0:	4804      	ldr	r0, [pc, #16]	; (8002504 <MX_I2C1_Init+0x50>)
 80024f2:	f002 f9e3 	bl	80048bc <HAL_I2C_Init>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d001      	beq.n	8002500 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80024fc:	f000 fe6a 	bl	80031d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002500:	bf00      	nop
 8002502:	bd80      	pop	{r7, pc}
 8002504:	20002c3c 	.word	0x20002c3c
 8002508:	40005400 	.word	0x40005400
 800250c:	000186a0 	.word	0x000186a0

08002510 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b086      	sub	sp, #24
 8002514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */
	//JANGAN LUPA DIKOMEN YA
  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002516:	1d3b      	adds	r3, r7, #4
 8002518:	2200      	movs	r2, #0
 800251a:	601a      	str	r2, [r3, #0]
 800251c:	605a      	str	r2, [r3, #4]
 800251e:	609a      	str	r2, [r3, #8]
 8002520:	60da      	str	r2, [r3, #12]
 8002522:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002524:	2300      	movs	r3, #0
 8002526:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002528:	4b27      	ldr	r3, [pc, #156]	; (80025c8 <MX_RTC_Init+0xb8>)
 800252a:	4a28      	ldr	r2, [pc, #160]	; (80025cc <MX_RTC_Init+0xbc>)
 800252c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800252e:	4b26      	ldr	r3, [pc, #152]	; (80025c8 <MX_RTC_Init+0xb8>)
 8002530:	2200      	movs	r2, #0
 8002532:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002534:	4b24      	ldr	r3, [pc, #144]	; (80025c8 <MX_RTC_Init+0xb8>)
 8002536:	227f      	movs	r2, #127	; 0x7f
 8002538:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800253a:	4b23      	ldr	r3, [pc, #140]	; (80025c8 <MX_RTC_Init+0xb8>)
 800253c:	22ff      	movs	r2, #255	; 0xff
 800253e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002540:	4b21      	ldr	r3, [pc, #132]	; (80025c8 <MX_RTC_Init+0xb8>)
 8002542:	2200      	movs	r2, #0
 8002544:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002546:	4b20      	ldr	r3, [pc, #128]	; (80025c8 <MX_RTC_Init+0xb8>)
 8002548:	2200      	movs	r2, #0
 800254a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800254c:	4b1e      	ldr	r3, [pc, #120]	; (80025c8 <MX_RTC_Init+0xb8>)
 800254e:	2200      	movs	r2, #0
 8002550:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002552:	481d      	ldr	r0, [pc, #116]	; (80025c8 <MX_RTC_Init+0xb8>)
 8002554:	f003 fec8 	bl	80062e8 <HAL_RTC_Init>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800255e:	f000 fe39 	bl	80031d4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x11;
 8002562:	2311      	movs	r3, #17
 8002564:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x35;
 8002566:	2335      	movs	r3, #53	; 0x35
 8002568:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x5;
 800256a:	2305      	movs	r3, #5
 800256c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800256e:	2300      	movs	r3, #0
 8002570:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002572:	2300      	movs	r3, #0
 8002574:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002576:	1d3b      	adds	r3, r7, #4
 8002578:	2201      	movs	r2, #1
 800257a:	4619      	mov	r1, r3
 800257c:	4812      	ldr	r0, [pc, #72]	; (80025c8 <MX_RTC_Init+0xb8>)
 800257e:	f003 ff44 	bl	800640a <HAL_RTC_SetTime>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d001      	beq.n	800258c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8002588:	f000 fe24 	bl	80031d4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800258c:	2301      	movs	r3, #1
 800258e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_OCTOBER;
 8002590:	2310      	movs	r3, #16
 8002592:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x18;
 8002594:	2318      	movs	r3, #24
 8002596:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x21;
 8002598:	2321      	movs	r3, #33	; 0x21
 800259a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800259c:	463b      	mov	r3, r7
 800259e:	2201      	movs	r2, #1
 80025a0:	4619      	mov	r1, r3
 80025a2:	4809      	ldr	r0, [pc, #36]	; (80025c8 <MX_RTC_Init+0xb8>)
 80025a4:	f004 f84c 	bl	8006640 <HAL_RTC_SetDate>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80025ae:	f000 fe11 	bl	80031d4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
	  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);
 80025b2:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80025b6:	2101      	movs	r1, #1
 80025b8:	4803      	ldr	r0, [pc, #12]	; (80025c8 <MX_RTC_Init+0xb8>)
 80025ba:	f004 f9c7 	bl	800694c <HAL_RTCEx_BKUPWrite>
  /* USER CODE END RTC_Init 2 */

}
 80025be:	bf00      	nop
 80025c0:	3718      	adds	r7, #24
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	20002d74 	.word	0x20002d74
 80025cc:	40002800 	.word	0x40002800

080025d0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80025d4:	4b17      	ldr	r3, [pc, #92]	; (8002634 <MX_SPI1_Init+0x64>)
 80025d6:	4a18      	ldr	r2, [pc, #96]	; (8002638 <MX_SPI1_Init+0x68>)
 80025d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80025da:	4b16      	ldr	r3, [pc, #88]	; (8002634 <MX_SPI1_Init+0x64>)
 80025dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80025e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80025e2:	4b14      	ldr	r3, [pc, #80]	; (8002634 <MX_SPI1_Init+0x64>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80025e8:	4b12      	ldr	r3, [pc, #72]	; (8002634 <MX_SPI1_Init+0x64>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80025ee:	4b11      	ldr	r3, [pc, #68]	; (8002634 <MX_SPI1_Init+0x64>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80025f4:	4b0f      	ldr	r3, [pc, #60]	; (8002634 <MX_SPI1_Init+0x64>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80025fa:	4b0e      	ldr	r3, [pc, #56]	; (8002634 <MX_SPI1_Init+0x64>)
 80025fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002600:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002602:	4b0c      	ldr	r3, [pc, #48]	; (8002634 <MX_SPI1_Init+0x64>)
 8002604:	2208      	movs	r2, #8
 8002606:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002608:	4b0a      	ldr	r3, [pc, #40]	; (8002634 <MX_SPI1_Init+0x64>)
 800260a:	2200      	movs	r2, #0
 800260c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800260e:	4b09      	ldr	r3, [pc, #36]	; (8002634 <MX_SPI1_Init+0x64>)
 8002610:	2200      	movs	r2, #0
 8002612:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002614:	4b07      	ldr	r3, [pc, #28]	; (8002634 <MX_SPI1_Init+0x64>)
 8002616:	2200      	movs	r2, #0
 8002618:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800261a:	4b06      	ldr	r3, [pc, #24]	; (8002634 <MX_SPI1_Init+0x64>)
 800261c:	220a      	movs	r2, #10
 800261e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002620:	4804      	ldr	r0, [pc, #16]	; (8002634 <MX_SPI1_Init+0x64>)
 8002622:	f004 f9c5 	bl	80069b0 <HAL_SPI_Init>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d001      	beq.n	8002630 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800262c:	f000 fdd2 	bl	80031d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002630:	bf00      	nop
 8002632:	bd80      	pop	{r7, pc}
 8002634:	200035b0 	.word	0x200035b0
 8002638:	40013000 	.word	0x40013000

0800263c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002640:	4b11      	ldr	r3, [pc, #68]	; (8002688 <MX_USART1_UART_Init+0x4c>)
 8002642:	4a12      	ldr	r2, [pc, #72]	; (800268c <MX_USART1_UART_Init+0x50>)
 8002644:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002646:	4b10      	ldr	r3, [pc, #64]	; (8002688 <MX_USART1_UART_Init+0x4c>)
 8002648:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800264c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800264e:	4b0e      	ldr	r3, [pc, #56]	; (8002688 <MX_USART1_UART_Init+0x4c>)
 8002650:	2200      	movs	r2, #0
 8002652:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002654:	4b0c      	ldr	r3, [pc, #48]	; (8002688 <MX_USART1_UART_Init+0x4c>)
 8002656:	2200      	movs	r2, #0
 8002658:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800265a:	4b0b      	ldr	r3, [pc, #44]	; (8002688 <MX_USART1_UART_Init+0x4c>)
 800265c:	2200      	movs	r2, #0
 800265e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002660:	4b09      	ldr	r3, [pc, #36]	; (8002688 <MX_USART1_UART_Init+0x4c>)
 8002662:	220c      	movs	r2, #12
 8002664:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002666:	4b08      	ldr	r3, [pc, #32]	; (8002688 <MX_USART1_UART_Init+0x4c>)
 8002668:	2200      	movs	r2, #0
 800266a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800266c:	4b06      	ldr	r3, [pc, #24]	; (8002688 <MX_USART1_UART_Init+0x4c>)
 800266e:	2200      	movs	r2, #0
 8002670:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002672:	4805      	ldr	r0, [pc, #20]	; (8002688 <MX_USART1_UART_Init+0x4c>)
 8002674:	f004 fd78 	bl	8007168 <HAL_UART_Init>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800267e:	f000 fda9 	bl	80031d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002682:	bf00      	nop
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	20002d10 	.word	0x20002d10
 800268c:	40011000 	.word	0x40011000

08002690 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002694:	4b11      	ldr	r3, [pc, #68]	; (80026dc <MX_USART2_UART_Init+0x4c>)
 8002696:	4a12      	ldr	r2, [pc, #72]	; (80026e0 <MX_USART2_UART_Init+0x50>)
 8002698:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800269a:	4b10      	ldr	r3, [pc, #64]	; (80026dc <MX_USART2_UART_Init+0x4c>)
 800269c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80026a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80026a2:	4b0e      	ldr	r3, [pc, #56]	; (80026dc <MX_USART2_UART_Init+0x4c>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80026a8:	4b0c      	ldr	r3, [pc, #48]	; (80026dc <MX_USART2_UART_Init+0x4c>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80026ae:	4b0b      	ldr	r3, [pc, #44]	; (80026dc <MX_USART2_UART_Init+0x4c>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80026b4:	4b09      	ldr	r3, [pc, #36]	; (80026dc <MX_USART2_UART_Init+0x4c>)
 80026b6:	220c      	movs	r2, #12
 80026b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026ba:	4b08      	ldr	r3, [pc, #32]	; (80026dc <MX_USART2_UART_Init+0x4c>)
 80026bc:	2200      	movs	r2, #0
 80026be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80026c0:	4b06      	ldr	r3, [pc, #24]	; (80026dc <MX_USART2_UART_Init+0x4c>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80026c6:	4805      	ldr	r0, [pc, #20]	; (80026dc <MX_USART2_UART_Init+0x4c>)
 80026c8:	f004 fd4e 	bl	8007168 <HAL_UART_Init>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80026d2:	f000 fd7f 	bl	80031d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80026d6:	bf00      	nop
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	2000363c 	.word	0x2000363c
 80026e0:	40004400 	.word	0x40004400

080026e4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80026e8:	4b11      	ldr	r3, [pc, #68]	; (8002730 <MX_USART3_UART_Init+0x4c>)
 80026ea:	4a12      	ldr	r2, [pc, #72]	; (8002734 <MX_USART3_UART_Init+0x50>)
 80026ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80026ee:	4b10      	ldr	r3, [pc, #64]	; (8002730 <MX_USART3_UART_Init+0x4c>)
 80026f0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80026f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80026f6:	4b0e      	ldr	r3, [pc, #56]	; (8002730 <MX_USART3_UART_Init+0x4c>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80026fc:	4b0c      	ldr	r3, [pc, #48]	; (8002730 <MX_USART3_UART_Init+0x4c>)
 80026fe:	2200      	movs	r2, #0
 8002700:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002702:	4b0b      	ldr	r3, [pc, #44]	; (8002730 <MX_USART3_UART_Init+0x4c>)
 8002704:	2200      	movs	r2, #0
 8002706:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002708:	4b09      	ldr	r3, [pc, #36]	; (8002730 <MX_USART3_UART_Init+0x4c>)
 800270a:	220c      	movs	r2, #12
 800270c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800270e:	4b08      	ldr	r3, [pc, #32]	; (8002730 <MX_USART3_UART_Init+0x4c>)
 8002710:	2200      	movs	r2, #0
 8002712:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002714:	4b06      	ldr	r3, [pc, #24]	; (8002730 <MX_USART3_UART_Init+0x4c>)
 8002716:	2200      	movs	r2, #0
 8002718:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800271a:	4805      	ldr	r0, [pc, #20]	; (8002730 <MX_USART3_UART_Init+0x4c>)
 800271c:	f004 fd24 	bl	8007168 <HAL_UART_Init>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002726:	f000 fd55 	bl	80031d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800272a:	bf00      	nop
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	20002bf8 	.word	0x20002bf8
 8002734:	40004800 	.word	0x40004800

08002738 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800273e:	2300      	movs	r3, #0
 8002740:	607b      	str	r3, [r7, #4]
 8002742:	4b1b      	ldr	r3, [pc, #108]	; (80027b0 <MX_DMA_Init+0x78>)
 8002744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002746:	4a1a      	ldr	r2, [pc, #104]	; (80027b0 <MX_DMA_Init+0x78>)
 8002748:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800274c:	6313      	str	r3, [r2, #48]	; 0x30
 800274e:	4b18      	ldr	r3, [pc, #96]	; (80027b0 <MX_DMA_Init+0x78>)
 8002750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002752:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002756:	607b      	str	r3, [r7, #4]
 8002758:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800275a:	2300      	movs	r3, #0
 800275c:	603b      	str	r3, [r7, #0]
 800275e:	4b14      	ldr	r3, [pc, #80]	; (80027b0 <MX_DMA_Init+0x78>)
 8002760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002762:	4a13      	ldr	r2, [pc, #76]	; (80027b0 <MX_DMA_Init+0x78>)
 8002764:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002768:	6313      	str	r3, [r2, #48]	; 0x30
 800276a:	4b11      	ldr	r3, [pc, #68]	; (80027b0 <MX_DMA_Init+0x78>)
 800276c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002772:	603b      	str	r3, [r7, #0]
 8002774:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002776:	2200      	movs	r2, #0
 8002778:	2100      	movs	r1, #0
 800277a:	200c      	movs	r0, #12
 800277c:	f001 fa7f 	bl	8003c7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002780:	200c      	movs	r0, #12
 8002782:	f001 fa98 	bl	8003cb6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002786:	2200      	movs	r2, #0
 8002788:	2100      	movs	r1, #0
 800278a:	2010      	movs	r0, #16
 800278c:	f001 fa77 	bl	8003c7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002790:	2010      	movs	r0, #16
 8002792:	f001 fa90 	bl	8003cb6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8002796:	2200      	movs	r2, #0
 8002798:	2100      	movs	r1, #0
 800279a:	203b      	movs	r0, #59	; 0x3b
 800279c:	f001 fa6f 	bl	8003c7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80027a0:	203b      	movs	r0, #59	; 0x3b
 80027a2:	f001 fa88 	bl	8003cb6 <HAL_NVIC_EnableIRQ>

}
 80027a6:	bf00      	nop
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	40023800 	.word	0x40023800

080027b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b08c      	sub	sp, #48	; 0x30
 80027b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ba:	f107 031c 	add.w	r3, r7, #28
 80027be:	2200      	movs	r2, #0
 80027c0:	601a      	str	r2, [r3, #0]
 80027c2:	605a      	str	r2, [r3, #4]
 80027c4:	609a      	str	r2, [r3, #8]
 80027c6:	60da      	str	r2, [r3, #12]
 80027c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80027ca:	2300      	movs	r3, #0
 80027cc:	61bb      	str	r3, [r7, #24]
 80027ce:	4b5d      	ldr	r3, [pc, #372]	; (8002944 <MX_GPIO_Init+0x190>)
 80027d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d2:	4a5c      	ldr	r2, [pc, #368]	; (8002944 <MX_GPIO_Init+0x190>)
 80027d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027d8:	6313      	str	r3, [r2, #48]	; 0x30
 80027da:	4b5a      	ldr	r3, [pc, #360]	; (8002944 <MX_GPIO_Init+0x190>)
 80027dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027e2:	61bb      	str	r3, [r7, #24]
 80027e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027e6:	2300      	movs	r3, #0
 80027e8:	617b      	str	r3, [r7, #20]
 80027ea:	4b56      	ldr	r3, [pc, #344]	; (8002944 <MX_GPIO_Init+0x190>)
 80027ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ee:	4a55      	ldr	r2, [pc, #340]	; (8002944 <MX_GPIO_Init+0x190>)
 80027f0:	f043 0304 	orr.w	r3, r3, #4
 80027f4:	6313      	str	r3, [r2, #48]	; 0x30
 80027f6:	4b53      	ldr	r3, [pc, #332]	; (8002944 <MX_GPIO_Init+0x190>)
 80027f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fa:	f003 0304 	and.w	r3, r3, #4
 80027fe:	617b      	str	r3, [r7, #20]
 8002800:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002802:	2300      	movs	r3, #0
 8002804:	613b      	str	r3, [r7, #16]
 8002806:	4b4f      	ldr	r3, [pc, #316]	; (8002944 <MX_GPIO_Init+0x190>)
 8002808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280a:	4a4e      	ldr	r2, [pc, #312]	; (8002944 <MX_GPIO_Init+0x190>)
 800280c:	f043 0301 	orr.w	r3, r3, #1
 8002810:	6313      	str	r3, [r2, #48]	; 0x30
 8002812:	4b4c      	ldr	r3, [pc, #304]	; (8002944 <MX_GPIO_Init+0x190>)
 8002814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	613b      	str	r3, [r7, #16]
 800281c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800281e:	2300      	movs	r3, #0
 8002820:	60fb      	str	r3, [r7, #12]
 8002822:	4b48      	ldr	r3, [pc, #288]	; (8002944 <MX_GPIO_Init+0x190>)
 8002824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002826:	4a47      	ldr	r2, [pc, #284]	; (8002944 <MX_GPIO_Init+0x190>)
 8002828:	f043 0310 	orr.w	r3, r3, #16
 800282c:	6313      	str	r3, [r2, #48]	; 0x30
 800282e:	4b45      	ldr	r3, [pc, #276]	; (8002944 <MX_GPIO_Init+0x190>)
 8002830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002832:	f003 0310 	and.w	r3, r3, #16
 8002836:	60fb      	str	r3, [r7, #12]
 8002838:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800283a:	2300      	movs	r3, #0
 800283c:	60bb      	str	r3, [r7, #8]
 800283e:	4b41      	ldr	r3, [pc, #260]	; (8002944 <MX_GPIO_Init+0x190>)
 8002840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002842:	4a40      	ldr	r2, [pc, #256]	; (8002944 <MX_GPIO_Init+0x190>)
 8002844:	f043 0302 	orr.w	r3, r3, #2
 8002848:	6313      	str	r3, [r2, #48]	; 0x30
 800284a:	4b3e      	ldr	r3, [pc, #248]	; (8002944 <MX_GPIO_Init+0x190>)
 800284c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	60bb      	str	r3, [r7, #8]
 8002854:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002856:	2300      	movs	r3, #0
 8002858:	607b      	str	r3, [r7, #4]
 800285a:	4b3a      	ldr	r3, [pc, #232]	; (8002944 <MX_GPIO_Init+0x190>)
 800285c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285e:	4a39      	ldr	r2, [pc, #228]	; (8002944 <MX_GPIO_Init+0x190>)
 8002860:	f043 0308 	orr.w	r3, r3, #8
 8002864:	6313      	str	r3, [r2, #48]	; 0x30
 8002866:	4b37      	ldr	r3, [pc, #220]	; (8002944 <MX_GPIO_Init+0x190>)
 8002868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286a:	f003 0308 	and.w	r3, r3, #8
 800286e:	607b      	str	r3, [r7, #4]
 8002870:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_4, GPIO_PIN_RESET);
 8002872:	2200      	movs	r2, #0
 8002874:	2115      	movs	r1, #21
 8002876:	4834      	ldr	r0, [pc, #208]	; (8002948 <MX_GPIO_Init+0x194>)
 8002878:	f001 ffee 	bl	8004858 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 800287c:	2200      	movs	r2, #0
 800287e:	2103      	movs	r1, #3
 8002880:	4832      	ldr	r0, [pc, #200]	; (800294c <MX_GPIO_Init+0x198>)
 8002882:	f001 ffe9 	bl	8004858 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14
 8002886:	2200      	movs	r2, #0
 8002888:	f44f 4156 	mov.w	r1, #54784	; 0xd600
 800288c:	4830      	ldr	r0, [pc, #192]	; (8002950 <MX_GPIO_Init+0x19c>)
 800288e:	f001 ffe3 	bl	8004858 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8002892:	2200      	movs	r2, #0
 8002894:	21f0      	movs	r1, #240	; 0xf0
 8002896:	482f      	ldr	r0, [pc, #188]	; (8002954 <MX_GPIO_Init+0x1a0>)
 8002898:	f001 ffde 	bl	8004858 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC2 PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_4;
 800289c:	2315      	movs	r3, #21
 800289e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028a0:	2301      	movs	r3, #1
 80028a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a4:	2300      	movs	r3, #0
 80028a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a8:	2300      	movs	r3, #0
 80028aa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028ac:	f107 031c 	add.w	r3, r7, #28
 80028b0:	4619      	mov	r1, r3
 80028b2:	4825      	ldr	r0, [pc, #148]	; (8002948 <MX_GPIO_Init+0x194>)
 80028b4:	f001 fe1c 	bl	80044f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80028b8:	2303      	movs	r3, #3
 80028ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028bc:	2301      	movs	r3, #1
 80028be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c0:	2300      	movs	r3, #0
 80028c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c4:	2300      	movs	r3, #0
 80028c6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028c8:	f107 031c 	add.w	r3, r7, #28
 80028cc:	4619      	mov	r1, r3
 80028ce:	481f      	ldr	r0, [pc, #124]	; (800294c <MX_GPIO_Init+0x198>)
 80028d0:	f001 fe0e 	bl	80044f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE9 PE10 PE12 PE14
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14
 80028d4:	f44f 4356 	mov.w	r3, #54784	; 0xd600
 80028d8:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028da:	2301      	movs	r3, #1
 80028dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028de:	2300      	movs	r3, #0
 80028e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e2:	2300      	movs	r3, #0
 80028e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80028e6:	f107 031c 	add.w	r3, r7, #28
 80028ea:	4619      	mov	r1, r3
 80028ec:	4818      	ldr	r0, [pc, #96]	; (8002950 <MX_GPIO_Init+0x19c>)
 80028ee:	f001 fdff 	bl	80044f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80028f2:	23f0      	movs	r3, #240	; 0xf0
 80028f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028f6:	2301      	movs	r3, #1
 80028f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fa:	2300      	movs	r3, #0
 80028fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028fe:	2300      	movs	r3, #0
 8002900:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002902:	f107 031c 	add.w	r3, r7, #28
 8002906:	4619      	mov	r1, r3
 8002908:	4812      	ldr	r0, [pc, #72]	; (8002954 <MX_GPIO_Init+0x1a0>)
 800290a:	f001 fdf1 	bl	80044f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
 800290e:	f44f 734a 	mov.w	r3, #808	; 0x328
 8002912:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002914:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002918:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291a:	2300      	movs	r3, #0
 800291c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800291e:	f107 031c 	add.w	r3, r7, #28
 8002922:	4619      	mov	r1, r3
 8002924:	480c      	ldr	r0, [pc, #48]	; (8002958 <MX_GPIO_Init+0x1a4>)
 8002926:	f001 fde3 	bl	80044f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800292a:	2200      	movs	r2, #0
 800292c:	2100      	movs	r1, #0
 800292e:	2017      	movs	r0, #23
 8002930:	f001 f9a5 	bl	8003c7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002934:	2017      	movs	r0, #23
 8002936:	f001 f9be 	bl	8003cb6 <HAL_NVIC_EnableIRQ>

}
 800293a:	bf00      	nop
 800293c:	3730      	adds	r7, #48	; 0x30
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	40023800 	.word	0x40023800
 8002948:	40020800 	.word	0x40020800
 800294c:	40020000 	.word	0x40020000
 8002950:	40021000 	.word	0x40021000
 8002954:	40020c00 	.word	0x40020c00
 8002958:	40020400 	.word	0x40020400

0800295c <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
/**Fungsi ini digunakan untuk interrupt LoRa E32 jika ada data masuk
  */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b086      	sub	sp, #24
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	460b      	mov	r3, r1
 8002966:	807b      	strh	r3, [r7, #2]
	//variable parse
	uint8_t new_Data[10];
	//uint8_t prev_Data;
	if (huart->Instance == USART2)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a62      	ldr	r2, [pc, #392]	; (8002af8 <HAL_UARTEx_RxEventCallback+0x19c>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d167      	bne.n	8002a42 <HAL_UARTEx_RxEventCallback+0xe6>
	{
		oldPos = newPos;  // Update the last position before copying new data
 8002972:	4b62      	ldr	r3, [pc, #392]	; (8002afc <HAL_UARTEx_RxEventCallback+0x1a0>)
 8002974:	881a      	ldrh	r2, [r3, #0]
 8002976:	4b62      	ldr	r3, [pc, #392]	; (8002b00 <HAL_UARTEx_RxEventCallback+0x1a4>)
 8002978:	801a      	strh	r2, [r3, #0]

		/* If the data in large and it is about to exceed the buffer size, we have to route it to the start of the buffer
		 * This is to maintain the circular buffer
		 * The old data in the main buffer will be overlapped
		 */
		if (oldPos+Size > MainBuf_SIZE)  // If the current position + new data size is greater than the main buffer
 800297a:	4b61      	ldr	r3, [pc, #388]	; (8002b00 <HAL_UARTEx_RxEventCallback+0x1a4>)
 800297c:	881b      	ldrh	r3, [r3, #0]
 800297e:	461a      	mov	r2, r3
 8002980:	887b      	ldrh	r3, [r7, #2]
 8002982:	4413      	add	r3, r2
 8002984:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002988:	dd22      	ble.n	80029d0 <HAL_UARTEx_RxEventCallback+0x74>
		{
			uint16_t datatocopy = MainBuf_SIZE-oldPos;  // find out how much space is left in the main buffer
 800298a:	4b5d      	ldr	r3, [pc, #372]	; (8002b00 <HAL_UARTEx_RxEventCallback+0x1a4>)
 800298c:	881b      	ldrh	r3, [r3, #0]
 800298e:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8002992:	82bb      	strh	r3, [r7, #20]
			memcpy ((uint8_t *)MainBuf+oldPos, RxBuf, datatocopy);  // copy data in that remaining space
 8002994:	4b5a      	ldr	r3, [pc, #360]	; (8002b00 <HAL_UARTEx_RxEventCallback+0x1a4>)
 8002996:	881b      	ldrh	r3, [r3, #0]
 8002998:	461a      	mov	r2, r3
 800299a:	4b5a      	ldr	r3, [pc, #360]	; (8002b04 <HAL_UARTEx_RxEventCallback+0x1a8>)
 800299c:	4413      	add	r3, r2
 800299e:	8aba      	ldrh	r2, [r7, #20]
 80029a0:	4959      	ldr	r1, [pc, #356]	; (8002b08 <HAL_UARTEx_RxEventCallback+0x1ac>)
 80029a2:	4618      	mov	r0, r3
 80029a4:	f005 fe30 	bl	8008608 <memcpy>

			oldPos = 0;  // point to the start of the buffer
 80029a8:	4b55      	ldr	r3, [pc, #340]	; (8002b00 <HAL_UARTEx_RxEventCallback+0x1a4>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)MainBuf, (uint8_t *)RxBuf+datatocopy, (Size-datatocopy));  // copy the remaining data
 80029ae:	8abb      	ldrh	r3, [r7, #20]
 80029b0:	4a55      	ldr	r2, [pc, #340]	; (8002b08 <HAL_UARTEx_RxEventCallback+0x1ac>)
 80029b2:	1899      	adds	r1, r3, r2
 80029b4:	887a      	ldrh	r2, [r7, #2]
 80029b6:	8abb      	ldrh	r3, [r7, #20]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	461a      	mov	r2, r3
 80029bc:	4851      	ldr	r0, [pc, #324]	; (8002b04 <HAL_UARTEx_RxEventCallback+0x1a8>)
 80029be:	f005 fe23 	bl	8008608 <memcpy>
			newPos = (Size-datatocopy);  // update the position
 80029c2:	887a      	ldrh	r2, [r7, #2]
 80029c4:	8abb      	ldrh	r3, [r7, #20]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	b29a      	uxth	r2, r3
 80029ca:	4b4c      	ldr	r3, [pc, #304]	; (8002afc <HAL_UARTEx_RxEventCallback+0x1a0>)
 80029cc:	801a      	strh	r2, [r3, #0]
 80029ce:	e010      	b.n	80029f2 <HAL_UARTEx_RxEventCallback+0x96>
		/* if the current position + new data size is less than the main buffer
		 * we will simply copy the data into the buffer and update the position
		 */
		else
		{
			memcpy ((uint8_t *)MainBuf+newPos, RxBuf, Size);
 80029d0:	4b4a      	ldr	r3, [pc, #296]	; (8002afc <HAL_UARTEx_RxEventCallback+0x1a0>)
 80029d2:	881b      	ldrh	r3, [r3, #0]
 80029d4:	461a      	mov	r2, r3
 80029d6:	4b4b      	ldr	r3, [pc, #300]	; (8002b04 <HAL_UARTEx_RxEventCallback+0x1a8>)
 80029d8:	4413      	add	r3, r2
 80029da:	887a      	ldrh	r2, [r7, #2]
 80029dc:	494a      	ldr	r1, [pc, #296]	; (8002b08 <HAL_UARTEx_RxEventCallback+0x1ac>)
 80029de:	4618      	mov	r0, r3
 80029e0:	f005 fe12 	bl	8008608 <memcpy>
			newPos = Size+oldPos;
 80029e4:	4b46      	ldr	r3, [pc, #280]	; (8002b00 <HAL_UARTEx_RxEventCallback+0x1a4>)
 80029e6:	881a      	ldrh	r2, [r3, #0]
 80029e8:	887b      	ldrh	r3, [r7, #2]
 80029ea:	4413      	add	r3, r2
 80029ec:	b29a      	uxth	r2, r3
 80029ee:	4b43      	ldr	r3, [pc, #268]	; (8002afc <HAL_UARTEx_RxEventCallback+0x1a0>)
 80029f0:	801a      	strh	r2, [r3, #0]
		}
		/* start the DMA again */
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *) RxBuf, RxBuf_SIZE);
 80029f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029f6:	4944      	ldr	r1, [pc, #272]	; (8002b08 <HAL_UARTEx_RxEventCallback+0x1ac>)
 80029f8:	4844      	ldr	r0, [pc, #272]	; (8002b0c <HAL_UARTEx_RxEventCallback+0x1b0>)
 80029fa:	f004 fd36 	bl	800746a <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 80029fe:	4b44      	ldr	r3, [pc, #272]	; (8002b10 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	4b42      	ldr	r3, [pc, #264]	; (8002b10 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f022 0208 	bic.w	r2, r2, #8
 8002a0c:	601a      	str	r2, [r3, #0]

		if(RxBuf_3[0] == '*'){ //*node,lat,long,data,jam, menit, detik, tegangan
 8002a0e:	4b41      	ldr	r3, [pc, #260]	; (8002b14 <HAL_UARTEx_RxEventCallback+0x1b8>)
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	2b2a      	cmp	r3, #42	; 0x2a
 8002a14:	d10b      	bne.n	8002a2e <HAL_UARTEx_RxEventCallback+0xd2>
			new_Data[0] = MainBuf[1];
 8002a16:	4b3b      	ldr	r3, [pc, #236]	; (8002b04 <HAL_UARTEx_RxEventCallback+0x1a8>)
 8002a18:	785b      	ldrb	r3, [r3, #1]
 8002a1a:	723b      	strb	r3, [r7, #8]
			if (new_Data[0]){
 8002a1c:	7a3b      	ldrb	r3, [r7, #8]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d005      	beq.n	8002a2e <HAL_UARTEx_RxEventCallback+0xd2>
				HAL_UART_Transmit(&huart2, MainBuf, Size, 100);
 8002a22:	887a      	ldrh	r2, [r7, #2]
 8002a24:	2364      	movs	r3, #100	; 0x64
 8002a26:	4937      	ldr	r1, [pc, #220]	; (8002b04 <HAL_UARTEx_RxEventCallback+0x1a8>)
 8002a28:	4838      	ldr	r0, [pc, #224]	; (8002b0c <HAL_UARTEx_RxEventCallback+0x1b0>)
 8002a2a:	f004 fbea 	bl	8007202 <HAL_UART_Transmit>
			}
			//prev_Data = new_Data[0];
		}
		printf("%s", MainBuf);
 8002a2e:	4935      	ldr	r1, [pc, #212]	; (8002b04 <HAL_UARTEx_RxEventCallback+0x1a8>)
 8002a30:	4839      	ldr	r0, [pc, #228]	; (8002b18 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8002a32:	f006 fc79 	bl	8009328 <iprintf>
		led_reaction(100, 600);
 8002a36:	f44f 7116 	mov.w	r1, #600	; 0x258
 8002a3a:	2064      	movs	r0, #100	; 0x64
 8002a3c:	f000 fa20 	bl	8002e80 <led_reaction>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t *) RxBuf_3, RxBuf_SIZE);
		__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
//		printf("%s", MainBuf_3); //gpsdata
		usart_3_state = true;
	}
}
 8002a40:	e055      	b.n	8002aee <HAL_UARTEx_RxEventCallback+0x192>
	}else if(huart->Instance == USART3){
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a35      	ldr	r2, [pc, #212]	; (8002b1c <HAL_UARTEx_RxEventCallback+0x1c0>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d150      	bne.n	8002aee <HAL_UARTEx_RxEventCallback+0x192>
		oldPos_3 = newPos_3;
 8002a4c:	4b34      	ldr	r3, [pc, #208]	; (8002b20 <HAL_UARTEx_RxEventCallback+0x1c4>)
 8002a4e:	881a      	ldrh	r2, [r3, #0]
 8002a50:	4b34      	ldr	r3, [pc, #208]	; (8002b24 <HAL_UARTEx_RxEventCallback+0x1c8>)
 8002a52:	801a      	strh	r2, [r3, #0]
		if (oldPos_3+Size > MainBuf_SIZE)  // If the current position + new data size is greater than the main buffer
 8002a54:	4b33      	ldr	r3, [pc, #204]	; (8002b24 <HAL_UARTEx_RxEventCallback+0x1c8>)
 8002a56:	881b      	ldrh	r3, [r3, #0]
 8002a58:	461a      	mov	r2, r3
 8002a5a:	887b      	ldrh	r3, [r7, #2]
 8002a5c:	4413      	add	r3, r2
 8002a5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a62:	dd22      	ble.n	8002aaa <HAL_UARTEx_RxEventCallback+0x14e>
			uint16_t datatocopy_3 = MainBuf_SIZE-oldPos_3;  // find out how much space is left in the main buffer
 8002a64:	4b2f      	ldr	r3, [pc, #188]	; (8002b24 <HAL_UARTEx_RxEventCallback+0x1c8>)
 8002a66:	881b      	ldrh	r3, [r3, #0]
 8002a68:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8002a6c:	82fb      	strh	r3, [r7, #22]
			memcpy ((uint8_t *)MainBuf_3+oldPos_3, RxBuf_3, datatocopy_3);  // copy data in that remaining space
 8002a6e:	4b2d      	ldr	r3, [pc, #180]	; (8002b24 <HAL_UARTEx_RxEventCallback+0x1c8>)
 8002a70:	881b      	ldrh	r3, [r3, #0]
 8002a72:	461a      	mov	r2, r3
 8002a74:	4b2c      	ldr	r3, [pc, #176]	; (8002b28 <HAL_UARTEx_RxEventCallback+0x1cc>)
 8002a76:	4413      	add	r3, r2
 8002a78:	8afa      	ldrh	r2, [r7, #22]
 8002a7a:	4926      	ldr	r1, [pc, #152]	; (8002b14 <HAL_UARTEx_RxEventCallback+0x1b8>)
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f005 fdc3 	bl	8008608 <memcpy>
			oldPos_3 = 0;  // point to the start of the buffer
 8002a82:	4b28      	ldr	r3, [pc, #160]	; (8002b24 <HAL_UARTEx_RxEventCallback+0x1c8>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)MainBuf_3, (uint8_t *)RxBuf_3+datatocopy_3, (Size-datatocopy_3));  // copy the remaining data
 8002a88:	8afb      	ldrh	r3, [r7, #22]
 8002a8a:	4a22      	ldr	r2, [pc, #136]	; (8002b14 <HAL_UARTEx_RxEventCallback+0x1b8>)
 8002a8c:	1899      	adds	r1, r3, r2
 8002a8e:	887a      	ldrh	r2, [r7, #2]
 8002a90:	8afb      	ldrh	r3, [r7, #22]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	461a      	mov	r2, r3
 8002a96:	4824      	ldr	r0, [pc, #144]	; (8002b28 <HAL_UARTEx_RxEventCallback+0x1cc>)
 8002a98:	f005 fdb6 	bl	8008608 <memcpy>
			newPos_3 = (Size-datatocopy_3);
 8002a9c:	887a      	ldrh	r2, [r7, #2]
 8002a9e:	8afb      	ldrh	r3, [r7, #22]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	b29a      	uxth	r2, r3
 8002aa4:	4b1e      	ldr	r3, [pc, #120]	; (8002b20 <HAL_UARTEx_RxEventCallback+0x1c4>)
 8002aa6:	801a      	strh	r2, [r3, #0]
 8002aa8:	e010      	b.n	8002acc <HAL_UARTEx_RxEventCallback+0x170>
			memcpy ((uint8_t *)MainBuf+newPos_3, RxBuf_3, Size);
 8002aaa:	4b1d      	ldr	r3, [pc, #116]	; (8002b20 <HAL_UARTEx_RxEventCallback+0x1c4>)
 8002aac:	881b      	ldrh	r3, [r3, #0]
 8002aae:	461a      	mov	r2, r3
 8002ab0:	4b14      	ldr	r3, [pc, #80]	; (8002b04 <HAL_UARTEx_RxEventCallback+0x1a8>)
 8002ab2:	4413      	add	r3, r2
 8002ab4:	887a      	ldrh	r2, [r7, #2]
 8002ab6:	4917      	ldr	r1, [pc, #92]	; (8002b14 <HAL_UARTEx_RxEventCallback+0x1b8>)
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f005 fda5 	bl	8008608 <memcpy>
			newPos_3 = Size+oldPos_3;
 8002abe:	4b19      	ldr	r3, [pc, #100]	; (8002b24 <HAL_UARTEx_RxEventCallback+0x1c8>)
 8002ac0:	881a      	ldrh	r2, [r3, #0]
 8002ac2:	887b      	ldrh	r3, [r7, #2]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	b29a      	uxth	r2, r3
 8002ac8:	4b15      	ldr	r3, [pc, #84]	; (8002b20 <HAL_UARTEx_RxEventCallback+0x1c4>)
 8002aca:	801a      	strh	r2, [r3, #0]
		HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t *) RxBuf_3, RxBuf_SIZE);
 8002acc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ad0:	4910      	ldr	r1, [pc, #64]	; (8002b14 <HAL_UARTEx_RxEventCallback+0x1b8>)
 8002ad2:	4816      	ldr	r0, [pc, #88]	; (8002b2c <HAL_UARTEx_RxEventCallback+0x1d0>)
 8002ad4:	f004 fcc9 	bl	800746a <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8002ad8:	4b15      	ldr	r3, [pc, #84]	; (8002b30 <HAL_UARTEx_RxEventCallback+0x1d4>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	4b14      	ldr	r3, [pc, #80]	; (8002b30 <HAL_UARTEx_RxEventCallback+0x1d4>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f022 0208 	bic.w	r2, r2, #8
 8002ae6:	601a      	str	r2, [r3, #0]
		usart_3_state = true;
 8002ae8:	4b12      	ldr	r3, [pc, #72]	; (8002b34 <HAL_UARTEx_RxEventCallback+0x1d8>)
 8002aea:	2201      	movs	r2, #1
 8002aec:	701a      	strb	r2, [r3, #0]
}
 8002aee:	bf00      	nop
 8002af0:	3718      	adds	r7, #24
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	40004400 	.word	0x40004400
 8002afc:	20000a08 	.word	0x20000a08
 8002b00:	20000a06 	.word	0x20000a06
 8002b04:	200031b0 	.word	0x200031b0
 8002b08:	20002db0 	.word	0x20002db0
 8002b0c:	2000363c 	.word	0x2000363c
 8002b10:	20002a70 	.word	0x20002a70
 8002b14:	20000604 	.word	0x20000604
 8002b18:	0800d30c 	.word	0x0800d30c
 8002b1c:	40004800 	.word	0x40004800
 8002b20:	20000a0c 	.word	0x20000a0c
 8002b24:	20000a0a 	.word	0x20000a0a
 8002b28:	20000204 	.word	0x20000204
 8002b2c:	20002bf8 	.word	0x20002bf8
 8002b30:	20002b98 	.word	0x20002b98
 8002b34:	20000a04 	.word	0x20000a04

08002b38 <HAL_GPIO_EXTI_Callback>:
/**Fungsi ini digunakan untuk keypad untuk mengirim pesan dan juga di intrupsi jika ada data masuk dari keypad
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	4603      	mov	r3, r0
 8002b40:	80fb      	strh	r3, [r7, #6]
  currentMillis = HAL_GetTick();
 8002b42:	f000 ff91 	bl	8003a68 <HAL_GetTick>
 8002b46:	4603      	mov	r3, r0
 8002b48:	4aa3      	ldr	r2, [pc, #652]	; (8002dd8 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8002b4a:	6013      	str	r3, [r2, #0]
  if (currentMillis - previousMillis > 10) {
 8002b4c:	4ba2      	ldr	r3, [pc, #648]	; (8002dd8 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	4ba2      	ldr	r3, [pc, #648]	; (8002ddc <HAL_GPIO_EXTI_Callback+0x2a4>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b0a      	cmp	r3, #10
 8002b58:	f240 817f 	bls.w	8002e5a <HAL_GPIO_EXTI_Callback+0x322>
    /*Configure GPIO pins : PB3 PB5 PB8 PB9 to GPIO_INPUT*/
    GPIO_InitStructPrivate.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
 8002b5c:	4ba0      	ldr	r3, [pc, #640]	; (8002de0 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8002b5e:	f44f 724a 	mov.w	r2, #808	; 0x328
 8002b62:	601a      	str	r2, [r3, #0]
    GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 8002b64:	4b9e      	ldr	r3, [pc, #632]	; (8002de0 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	605a      	str	r2, [r3, #4]
    GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8002b6a:	4b9d      	ldr	r3, [pc, #628]	; (8002de0 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	609a      	str	r2, [r3, #8]
    GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8002b70:	4b9b      	ldr	r3, [pc, #620]	; (8002de0 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructPrivate);
 8002b76:	499a      	ldr	r1, [pc, #616]	; (8002de0 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8002b78:	489a      	ldr	r0, [pc, #616]	; (8002de4 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8002b7a:	f001 fcb9 	bl	80044f0 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, 1);
 8002b7e:	2201      	movs	r2, #1
 8002b80:	2110      	movs	r1, #16
 8002b82:	4899      	ldr	r0, [pc, #612]	; (8002de8 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8002b84:	f001 fe68 	bl	8004858 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, 0);
 8002b88:	2200      	movs	r2, #0
 8002b8a:	2120      	movs	r1, #32
 8002b8c:	4896      	ldr	r0, [pc, #600]	; (8002de8 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8002b8e:	f001 fe63 	bl	8004858 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, 0);
 8002b92:	2200      	movs	r2, #0
 8002b94:	2140      	movs	r1, #64	; 0x40
 8002b96:	4894      	ldr	r0, [pc, #592]	; (8002de8 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8002b98:	f001 fe5e 	bl	8004858 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, 0);
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	2180      	movs	r1, #128	; 0x80
 8002ba0:	4891      	ldr	r0, [pc, #580]	; (8002de8 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8002ba2:	f001 fe59 	bl	8004858 <HAL_GPIO_WritePin>
    if(GPIO_Pin == GPIO_PIN_3 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3))
 8002ba6:	88fb      	ldrh	r3, [r7, #6]
 8002ba8:	2b08      	cmp	r3, #8
 8002baa:	d10a      	bne.n	8002bc2 <HAL_GPIO_EXTI_Callback+0x8a>
 8002bac:	2108      	movs	r1, #8
 8002bae:	488d      	ldr	r0, [pc, #564]	; (8002de4 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8002bb0:	f001 fe3a 	bl	8004828 <HAL_GPIO_ReadPin>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d003      	beq.n	8002bc2 <HAL_GPIO_EXTI_Callback+0x8a>
    {
      keyPressed = 14; //ASCII value of D
 8002bba:	4b8c      	ldr	r3, [pc, #560]	; (8002dec <HAL_GPIO_EXTI_Callback+0x2b4>)
 8002bbc:	220e      	movs	r2, #14
 8002bbe:	701a      	strb	r2, [r3, #0]
 8002bc0:	e02c      	b.n	8002c1c <HAL_GPIO_EXTI_Callback+0xe4>
    }
    else if(GPIO_Pin == GPIO_PIN_5 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5))
 8002bc2:	88fb      	ldrh	r3, [r7, #6]
 8002bc4:	2b20      	cmp	r3, #32
 8002bc6:	d10a      	bne.n	8002bde <HAL_GPIO_EXTI_Callback+0xa6>
 8002bc8:	2120      	movs	r1, #32
 8002bca:	4886      	ldr	r0, [pc, #536]	; (8002de4 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8002bcc:	f001 fe2c 	bl	8004828 <HAL_GPIO_ReadPin>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d003      	beq.n	8002bde <HAL_GPIO_EXTI_Callback+0xa6>
    {
      keyPressed = 13; //ASCII value of C
 8002bd6:	4b85      	ldr	r3, [pc, #532]	; (8002dec <HAL_GPIO_EXTI_Callback+0x2b4>)
 8002bd8:	220d      	movs	r2, #13
 8002bda:	701a      	strb	r2, [r3, #0]
 8002bdc:	e01e      	b.n	8002c1c <HAL_GPIO_EXTI_Callback+0xe4>
    }
    else if(GPIO_Pin == GPIO_PIN_8 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))
 8002bde:	88fb      	ldrh	r3, [r7, #6]
 8002be0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002be4:	d10b      	bne.n	8002bfe <HAL_GPIO_EXTI_Callback+0xc6>
 8002be6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002bea:	487e      	ldr	r0, [pc, #504]	; (8002de4 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8002bec:	f001 fe1c 	bl	8004828 <HAL_GPIO_ReadPin>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d003      	beq.n	8002bfe <HAL_GPIO_EXTI_Callback+0xc6>
    {
      keyPressed = 12; //ASCII value of B
 8002bf6:	4b7d      	ldr	r3, [pc, #500]	; (8002dec <HAL_GPIO_EXTI_Callback+0x2b4>)
 8002bf8:	220c      	movs	r2, #12
 8002bfa:	701a      	strb	r2, [r3, #0]
 8002bfc:	e00e      	b.n	8002c1c <HAL_GPIO_EXTI_Callback+0xe4>
    }
    else if(GPIO_Pin == GPIO_PIN_9 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9))
 8002bfe:	88fb      	ldrh	r3, [r7, #6]
 8002c00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c04:	d10a      	bne.n	8002c1c <HAL_GPIO_EXTI_Callback+0xe4>
 8002c06:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c0a:	4876      	ldr	r0, [pc, #472]	; (8002de4 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8002c0c:	f001 fe0c 	bl	8004828 <HAL_GPIO_ReadPin>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d002      	beq.n	8002c1c <HAL_GPIO_EXTI_Callback+0xe4>
    {
      keyPressed = 11; //ASCII value of A
 8002c16:	4b75      	ldr	r3, [pc, #468]	; (8002dec <HAL_GPIO_EXTI_Callback+0x2b4>)
 8002c18:	220b      	movs	r2, #11
 8002c1a:	701a      	strb	r2, [r3, #0]
    }

    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, 0);
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	2110      	movs	r1, #16
 8002c20:	4871      	ldr	r0, [pc, #452]	; (8002de8 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8002c22:	f001 fe19 	bl	8004858 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, 1);
 8002c26:	2201      	movs	r2, #1
 8002c28:	2120      	movs	r1, #32
 8002c2a:	486f      	ldr	r0, [pc, #444]	; (8002de8 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8002c2c:	f001 fe14 	bl	8004858 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, 0);
 8002c30:	2200      	movs	r2, #0
 8002c32:	2140      	movs	r1, #64	; 0x40
 8002c34:	486c      	ldr	r0, [pc, #432]	; (8002de8 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8002c36:	f001 fe0f 	bl	8004858 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, 0);
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	2180      	movs	r1, #128	; 0x80
 8002c3e:	486a      	ldr	r0, [pc, #424]	; (8002de8 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8002c40:	f001 fe0a 	bl	8004858 <HAL_GPIO_WritePin>

    if(GPIO_Pin == GPIO_PIN_3 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3))
 8002c44:	88fb      	ldrh	r3, [r7, #6]
 8002c46:	2b08      	cmp	r3, #8
 8002c48:	d10a      	bne.n	8002c60 <HAL_GPIO_EXTI_Callback+0x128>
 8002c4a:	2108      	movs	r1, #8
 8002c4c:	4865      	ldr	r0, [pc, #404]	; (8002de4 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8002c4e:	f001 fdeb 	bl	8004828 <HAL_GPIO_ReadPin>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d003      	beq.n	8002c60 <HAL_GPIO_EXTI_Callback+0x128>
    {
      keyPressed = 15; //ASCII value of #
 8002c58:	4b64      	ldr	r3, [pc, #400]	; (8002dec <HAL_GPIO_EXTI_Callback+0x2b4>)
 8002c5a:	220f      	movs	r2, #15
 8002c5c:	701a      	strb	r2, [r3, #0]
 8002c5e:	e02c      	b.n	8002cba <HAL_GPIO_EXTI_Callback+0x182>
    }
    else if(GPIO_Pin == GPIO_PIN_5 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5))
 8002c60:	88fb      	ldrh	r3, [r7, #6]
 8002c62:	2b20      	cmp	r3, #32
 8002c64:	d10a      	bne.n	8002c7c <HAL_GPIO_EXTI_Callback+0x144>
 8002c66:	2120      	movs	r1, #32
 8002c68:	485e      	ldr	r0, [pc, #376]	; (8002de4 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8002c6a:	f001 fddd 	bl	8004828 <HAL_GPIO_ReadPin>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d003      	beq.n	8002c7c <HAL_GPIO_EXTI_Callback+0x144>
    {
      keyPressed = 9; //ASCII value of 9
 8002c74:	4b5d      	ldr	r3, [pc, #372]	; (8002dec <HAL_GPIO_EXTI_Callback+0x2b4>)
 8002c76:	2209      	movs	r2, #9
 8002c78:	701a      	strb	r2, [r3, #0]
 8002c7a:	e01e      	b.n	8002cba <HAL_GPIO_EXTI_Callback+0x182>
    }
    else if(GPIO_Pin == GPIO_PIN_8 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))
 8002c7c:	88fb      	ldrh	r3, [r7, #6]
 8002c7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c82:	d10b      	bne.n	8002c9c <HAL_GPIO_EXTI_Callback+0x164>
 8002c84:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c88:	4856      	ldr	r0, [pc, #344]	; (8002de4 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8002c8a:	f001 fdcd 	bl	8004828 <HAL_GPIO_ReadPin>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d003      	beq.n	8002c9c <HAL_GPIO_EXTI_Callback+0x164>
    {
      keyPressed = 6; //ASCII value of 6
 8002c94:	4b55      	ldr	r3, [pc, #340]	; (8002dec <HAL_GPIO_EXTI_Callback+0x2b4>)
 8002c96:	2206      	movs	r2, #6
 8002c98:	701a      	strb	r2, [r3, #0]
 8002c9a:	e00e      	b.n	8002cba <HAL_GPIO_EXTI_Callback+0x182>
    }
    else if(GPIO_Pin == GPIO_PIN_9 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9))
 8002c9c:	88fb      	ldrh	r3, [r7, #6]
 8002c9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ca2:	d10a      	bne.n	8002cba <HAL_GPIO_EXTI_Callback+0x182>
 8002ca4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ca8:	484e      	ldr	r0, [pc, #312]	; (8002de4 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8002caa:	f001 fdbd 	bl	8004828 <HAL_GPIO_ReadPin>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d002      	beq.n	8002cba <HAL_GPIO_EXTI_Callback+0x182>
    {
      keyPressed = 3; //ASCII value of 3
 8002cb4:	4b4d      	ldr	r3, [pc, #308]	; (8002dec <HAL_GPIO_EXTI_Callback+0x2b4>)
 8002cb6:	2203      	movs	r2, #3
 8002cb8:	701a      	strb	r2, [r3, #0]
    }

    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, 0);
 8002cba:	2200      	movs	r2, #0
 8002cbc:	2110      	movs	r1, #16
 8002cbe:	484a      	ldr	r0, [pc, #296]	; (8002de8 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8002cc0:	f001 fdca 	bl	8004858 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, 0);
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	2120      	movs	r1, #32
 8002cc8:	4847      	ldr	r0, [pc, #284]	; (8002de8 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8002cca:	f001 fdc5 	bl	8004858 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, 1);
 8002cce:	2201      	movs	r2, #1
 8002cd0:	2140      	movs	r1, #64	; 0x40
 8002cd2:	4845      	ldr	r0, [pc, #276]	; (8002de8 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8002cd4:	f001 fdc0 	bl	8004858 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, 0);
 8002cd8:	2200      	movs	r2, #0
 8002cda:	2180      	movs	r1, #128	; 0x80
 8002cdc:	4842      	ldr	r0, [pc, #264]	; (8002de8 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8002cde:	f001 fdbb 	bl	8004858 <HAL_GPIO_WritePin>
    if(GPIO_Pin == GPIO_PIN_3 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3))
 8002ce2:	88fb      	ldrh	r3, [r7, #6]
 8002ce4:	2b08      	cmp	r3, #8
 8002ce6:	d10a      	bne.n	8002cfe <HAL_GPIO_EXTI_Callback+0x1c6>
 8002ce8:	2108      	movs	r1, #8
 8002cea:	483e      	ldr	r0, [pc, #248]	; (8002de4 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8002cec:	f001 fd9c 	bl	8004828 <HAL_GPIO_ReadPin>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d003      	beq.n	8002cfe <HAL_GPIO_EXTI_Callback+0x1c6>
    {
      keyPressed = 16; //ASCII value of 0
 8002cf6:	4b3d      	ldr	r3, [pc, #244]	; (8002dec <HAL_GPIO_EXTI_Callback+0x2b4>)
 8002cf8:	2210      	movs	r2, #16
 8002cfa:	701a      	strb	r2, [r3, #0]
 8002cfc:	e02c      	b.n	8002d58 <HAL_GPIO_EXTI_Callback+0x220>
    }
    else if(GPIO_Pin == GPIO_PIN_5 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5))
 8002cfe:	88fb      	ldrh	r3, [r7, #6]
 8002d00:	2b20      	cmp	r3, #32
 8002d02:	d10a      	bne.n	8002d1a <HAL_GPIO_EXTI_Callback+0x1e2>
 8002d04:	2120      	movs	r1, #32
 8002d06:	4837      	ldr	r0, [pc, #220]	; (8002de4 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8002d08:	f001 fd8e 	bl	8004828 <HAL_GPIO_ReadPin>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d003      	beq.n	8002d1a <HAL_GPIO_EXTI_Callback+0x1e2>
    {
      keyPressed = 8; //ASCII value of 8
 8002d12:	4b36      	ldr	r3, [pc, #216]	; (8002dec <HAL_GPIO_EXTI_Callback+0x2b4>)
 8002d14:	2208      	movs	r2, #8
 8002d16:	701a      	strb	r2, [r3, #0]
 8002d18:	e01e      	b.n	8002d58 <HAL_GPIO_EXTI_Callback+0x220>
    }
    else if(GPIO_Pin == GPIO_PIN_8 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))
 8002d1a:	88fb      	ldrh	r3, [r7, #6]
 8002d1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d20:	d10b      	bne.n	8002d3a <HAL_GPIO_EXTI_Callback+0x202>
 8002d22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d26:	482f      	ldr	r0, [pc, #188]	; (8002de4 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8002d28:	f001 fd7e 	bl	8004828 <HAL_GPIO_ReadPin>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d003      	beq.n	8002d3a <HAL_GPIO_EXTI_Callback+0x202>
    {
      keyPressed = 5; //ASCII value of 5
 8002d32:	4b2e      	ldr	r3, [pc, #184]	; (8002dec <HAL_GPIO_EXTI_Callback+0x2b4>)
 8002d34:	2205      	movs	r2, #5
 8002d36:	701a      	strb	r2, [r3, #0]
 8002d38:	e00e      	b.n	8002d58 <HAL_GPIO_EXTI_Callback+0x220>
    }
    else if(GPIO_Pin == GPIO_PIN_9 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9))
 8002d3a:	88fb      	ldrh	r3, [r7, #6]
 8002d3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d40:	d10a      	bne.n	8002d58 <HAL_GPIO_EXTI_Callback+0x220>
 8002d42:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d46:	4827      	ldr	r0, [pc, #156]	; (8002de4 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8002d48:	f001 fd6e 	bl	8004828 <HAL_GPIO_ReadPin>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d002      	beq.n	8002d58 <HAL_GPIO_EXTI_Callback+0x220>
    {
      keyPressed = 2; //ASCII value of 2
 8002d52:	4b26      	ldr	r3, [pc, #152]	; (8002dec <HAL_GPIO_EXTI_Callback+0x2b4>)
 8002d54:	2202      	movs	r2, #2
 8002d56:	701a      	strb	r2, [r3, #0]
    }

    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, 0);
 8002d58:	2200      	movs	r2, #0
 8002d5a:	2110      	movs	r1, #16
 8002d5c:	4822      	ldr	r0, [pc, #136]	; (8002de8 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8002d5e:	f001 fd7b 	bl	8004858 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, 0);
 8002d62:	2200      	movs	r2, #0
 8002d64:	2120      	movs	r1, #32
 8002d66:	4820      	ldr	r0, [pc, #128]	; (8002de8 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8002d68:	f001 fd76 	bl	8004858 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, 0);
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	2140      	movs	r1, #64	; 0x40
 8002d70:	481d      	ldr	r0, [pc, #116]	; (8002de8 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8002d72:	f001 fd71 	bl	8004858 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, 1);
 8002d76:	2201      	movs	r2, #1
 8002d78:	2180      	movs	r1, #128	; 0x80
 8002d7a:	481b      	ldr	r0, [pc, #108]	; (8002de8 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8002d7c:	f001 fd6c 	bl	8004858 <HAL_GPIO_WritePin>
    if(GPIO_Pin == GPIO_PIN_3 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3))
 8002d80:	88fb      	ldrh	r3, [r7, #6]
 8002d82:	2b08      	cmp	r3, #8
 8002d84:	d10a      	bne.n	8002d9c <HAL_GPIO_EXTI_Callback+0x264>
 8002d86:	2108      	movs	r1, #8
 8002d88:	4816      	ldr	r0, [pc, #88]	; (8002de4 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8002d8a:	f001 fd4d 	bl	8004828 <HAL_GPIO_ReadPin>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d003      	beq.n	8002d9c <HAL_GPIO_EXTI_Callback+0x264>
    {
      keyPressed = 17; //ASCII value of *
 8002d94:	4b15      	ldr	r3, [pc, #84]	; (8002dec <HAL_GPIO_EXTI_Callback+0x2b4>)
 8002d96:	2211      	movs	r2, #17
 8002d98:	701a      	strb	r2, [r3, #0]
 8002d9a:	e038      	b.n	8002e0e <HAL_GPIO_EXTI_Callback+0x2d6>
    }
    else if(GPIO_Pin == GPIO_PIN_5 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5))
 8002d9c:	88fb      	ldrh	r3, [r7, #6]
 8002d9e:	2b20      	cmp	r3, #32
 8002da0:	d10a      	bne.n	8002db8 <HAL_GPIO_EXTI_Callback+0x280>
 8002da2:	2120      	movs	r1, #32
 8002da4:	480f      	ldr	r0, [pc, #60]	; (8002de4 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8002da6:	f001 fd3f 	bl	8004828 <HAL_GPIO_ReadPin>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d003      	beq.n	8002db8 <HAL_GPIO_EXTI_Callback+0x280>
    {
      keyPressed = 7; //ASCII value of 7
 8002db0:	4b0e      	ldr	r3, [pc, #56]	; (8002dec <HAL_GPIO_EXTI_Callback+0x2b4>)
 8002db2:	2207      	movs	r2, #7
 8002db4:	701a      	strb	r2, [r3, #0]
 8002db6:	e02a      	b.n	8002e0e <HAL_GPIO_EXTI_Callback+0x2d6>
    }
    else if(GPIO_Pin == GPIO_PIN_8 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))
 8002db8:	88fb      	ldrh	r3, [r7, #6]
 8002dba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dbe:	d117      	bne.n	8002df0 <HAL_GPIO_EXTI_Callback+0x2b8>
 8002dc0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002dc4:	4807      	ldr	r0, [pc, #28]	; (8002de4 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8002dc6:	f001 fd2f 	bl	8004828 <HAL_GPIO_ReadPin>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d00f      	beq.n	8002df0 <HAL_GPIO_EXTI_Callback+0x2b8>
    {
      keyPressed = 4; //ASCII value of 4
 8002dd0:	4b06      	ldr	r3, [pc, #24]	; (8002dec <HAL_GPIO_EXTI_Callback+0x2b4>)
 8002dd2:	2204      	movs	r2, #4
 8002dd4:	701a      	strb	r2, [r3, #0]
 8002dd6:	e01a      	b.n	8002e0e <HAL_GPIO_EXTI_Callback+0x2d6>
 8002dd8:	20000a48 	.word	0x20000a48
 8002ddc:	20000a44 	.word	0x20000a44
 8002de0:	20000a30 	.word	0x20000a30
 8002de4:	40020400 	.word	0x40020400
 8002de8:	40020c00 	.word	0x40020c00
 8002dec:	20000a4c 	.word	0x20000a4c
    }
    else if(GPIO_Pin == GPIO_PIN_9 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9))
 8002df0:	88fb      	ldrh	r3, [r7, #6]
 8002df2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002df6:	d10a      	bne.n	8002e0e <HAL_GPIO_EXTI_Callback+0x2d6>
 8002df8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002dfc:	4819      	ldr	r0, [pc, #100]	; (8002e64 <HAL_GPIO_EXTI_Callback+0x32c>)
 8002dfe:	f001 fd13 	bl	8004828 <HAL_GPIO_ReadPin>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d002      	beq.n	8002e0e <HAL_GPIO_EXTI_Callback+0x2d6>
    {
      keyPressed = 1; //ASCII value of 1
 8002e08:	4b17      	ldr	r3, [pc, #92]	; (8002e68 <HAL_GPIO_EXTI_Callback+0x330>)
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	701a      	strb	r2, [r3, #0]
    }
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, 1);
 8002e0e:	2201      	movs	r2, #1
 8002e10:	2110      	movs	r1, #16
 8002e12:	4816      	ldr	r0, [pc, #88]	; (8002e6c <HAL_GPIO_EXTI_Callback+0x334>)
 8002e14:	f001 fd20 	bl	8004858 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, 1);
 8002e18:	2201      	movs	r2, #1
 8002e1a:	2120      	movs	r1, #32
 8002e1c:	4813      	ldr	r0, [pc, #76]	; (8002e6c <HAL_GPIO_EXTI_Callback+0x334>)
 8002e1e:	f001 fd1b 	bl	8004858 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, 1);
 8002e22:	2201      	movs	r2, #1
 8002e24:	2140      	movs	r1, #64	; 0x40
 8002e26:	4811      	ldr	r0, [pc, #68]	; (8002e6c <HAL_GPIO_EXTI_Callback+0x334>)
 8002e28:	f001 fd16 	bl	8004858 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, 1);
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	2180      	movs	r1, #128	; 0x80
 8002e30:	480e      	ldr	r0, [pc, #56]	; (8002e6c <HAL_GPIO_EXTI_Callback+0x334>)
 8002e32:	f001 fd11 	bl	8004858 <HAL_GPIO_WritePin>
    /*Configure GPIO pins : PB6 PB7 PB8 PB9 back to EXTI*/
    GPIO_InitStructPrivate.Mode = GPIO_MODE_IT_RISING;
 8002e36:	4b0e      	ldr	r3, [pc, #56]	; (8002e70 <HAL_GPIO_EXTI_Callback+0x338>)
 8002e38:	f44f 1288 	mov.w	r2, #1114112	; 0x110000
 8002e3c:	605a      	str	r2, [r3, #4]
    GPIO_InitStructPrivate.Pull = GPIO_PULLDOWN;
 8002e3e:	4b0c      	ldr	r3, [pc, #48]	; (8002e70 <HAL_GPIO_EXTI_Callback+0x338>)
 8002e40:	2202      	movs	r2, #2
 8002e42:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructPrivate);
 8002e44:	490a      	ldr	r1, [pc, #40]	; (8002e70 <HAL_GPIO_EXTI_Callback+0x338>)
 8002e46:	4807      	ldr	r0, [pc, #28]	; (8002e64 <HAL_GPIO_EXTI_Callback+0x32c>)
 8002e48:	f001 fb52 	bl	80044f0 <HAL_GPIO_Init>
    //printf("nilai key pad %d\r\n", keyPressed);
    previousMillis = currentMillis;
 8002e4c:	4b09      	ldr	r3, [pc, #36]	; (8002e74 <HAL_GPIO_EXTI_Callback+0x33c>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a09      	ldr	r2, [pc, #36]	; (8002e78 <HAL_GPIO_EXTI_Callback+0x340>)
 8002e52:	6013      	str	r3, [r2, #0]
    key_kondisi = true;
 8002e54:	4b09      	ldr	r3, [pc, #36]	; (8002e7c <HAL_GPIO_EXTI_Callback+0x344>)
 8002e56:	2201      	movs	r2, #1
 8002e58:	701a      	strb	r2, [r3, #0]
  }
}
 8002e5a:	bf00      	nop
 8002e5c:	3708      	adds	r7, #8
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	40020400 	.word	0x40020400
 8002e68:	20000a4c 	.word	0x20000a4c
 8002e6c:	40020c00 	.word	0x40020c00
 8002e70:	20000a30 	.word	0x20000a30
 8002e74:	20000a48 	.word	0x20000a48
 8002e78:	20000a44 	.word	0x20000a44
 8002e7c:	20000a4d 	.word	0x20000a4d

08002e80 <led_reaction>:
		led_reaction(100,100);
	  }
}
/**Fungsi ini LED Blink untuk indikasi
  */
void led_reaction(uint16_t led_time, uint16_t time_loop){
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	4603      	mov	r3, r0
 8002e88:	460a      	mov	r2, r1
 8002e8a:	80fb      	strh	r3, [r7, #6]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	80bb      	strh	r3, [r7, #4]
	led_loop_on = HAL_GetTick();
 8002e90:	f000 fdea 	bl	8003a68 <HAL_GetTick>
 8002e94:	4603      	mov	r3, r0
 8002e96:	4a29      	ldr	r2, [pc, #164]	; (8002f3c <led_reaction+0xbc>)
 8002e98:	6013      	str	r3, [r2, #0]
	while ((unsigned long)HAL_GetTick() - led_loop_on <= time_loop){
 8002e9a:	e041      	b.n	8002f20 <led_reaction+0xa0>
		if (HAL_GetTick() - led_prev_on >= led_time){
 8002e9c:	f000 fde4 	bl	8003a68 <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	4b27      	ldr	r3, [pc, #156]	; (8002f40 <led_reaction+0xc0>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	1ad2      	subs	r2, r2, r3
 8002ea8:	88fb      	ldrh	r3, [r7, #6]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d338      	bcc.n	8002f20 <led_reaction+0xa0>
			led_prev_on = HAL_GetTick();
 8002eae:	f000 fddb 	bl	8003a68 <HAL_GetTick>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	4a22      	ldr	r2, [pc, #136]	; (8002f40 <led_reaction+0xc0>)
 8002eb6:	6013      	str	r3, [r2, #0]
			if (led_hijau_kuning == 0){
 8002eb8:	4b22      	ldr	r3, [pc, #136]	; (8002f44 <led_reaction+0xc4>)
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	f083 0301 	eor.w	r3, r3, #1
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d003      	beq.n	8002ece <led_reaction+0x4e>
				led_hijau_kuning = 1;
 8002ec6:	4b1f      	ldr	r3, [pc, #124]	; (8002f44 <led_reaction+0xc4>)
 8002ec8:	2201      	movs	r2, #1
 8002eca:	701a      	strb	r2, [r3, #0]
 8002ecc:	e002      	b.n	8002ed4 <led_reaction+0x54>
			} else {
				led_hijau_kuning = 0;
 8002ece:	4b1d      	ldr	r3, [pc, #116]	; (8002f44 <led_reaction+0xc4>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	701a      	strb	r2, [r3, #0]
			}
			if (led_merah == 0){
 8002ed4:	4b1c      	ldr	r3, [pc, #112]	; (8002f48 <led_reaction+0xc8>)
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	f083 0301 	eor.w	r3, r3, #1
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d003      	beq.n	8002eea <led_reaction+0x6a>
				led_merah = 1;
 8002ee2:	4b19      	ldr	r3, [pc, #100]	; (8002f48 <led_reaction+0xc8>)
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	701a      	strb	r2, [r3, #0]
 8002ee8:	e002      	b.n	8002ef0 <led_reaction+0x70>
			} else {
				led_merah = 0;
 8002eea:	4b17      	ldr	r3, [pc, #92]	; (8002f48 <led_reaction+0xc8>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	701a      	strb	r2, [r3, #0]
			}
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, led_hijau_kuning);
 8002ef0:	4b14      	ldr	r3, [pc, #80]	; (8002f44 <led_reaction+0xc4>)
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002efa:	4814      	ldr	r0, [pc, #80]	; (8002f4c <led_reaction+0xcc>)
 8002efc:	f001 fcac 	bl	8004858 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, led_merah);
 8002f00:	4b11      	ldr	r3, [pc, #68]	; (8002f48 <led_reaction+0xc8>)
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	461a      	mov	r2, r3
 8002f06:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002f0a:	4810      	ldr	r0, [pc, #64]	; (8002f4c <led_reaction+0xcc>)
 8002f0c:	f001 fca4 	bl	8004858 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, led_hijau_kuning);
 8002f10:	4b0c      	ldr	r3, [pc, #48]	; (8002f44 <led_reaction+0xc4>)
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	461a      	mov	r2, r3
 8002f16:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002f1a:	480c      	ldr	r0, [pc, #48]	; (8002f4c <led_reaction+0xcc>)
 8002f1c:	f001 fc9c 	bl	8004858 <HAL_GPIO_WritePin>
	while ((unsigned long)HAL_GetTick() - led_loop_on <= time_loop){
 8002f20:	f000 fda2 	bl	8003a68 <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	4b05      	ldr	r3, [pc, #20]	; (8002f3c <led_reaction+0xbc>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	1ad2      	subs	r2, r2, r3
 8002f2c:	88bb      	ldrh	r3, [r7, #4]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d9b4      	bls.n	8002e9c <led_reaction+0x1c>
		}
	}
}
 8002f32:	bf00      	nop
 8002f34:	bf00      	nop
 8002f36:	3708      	adds	r7, #8
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	20000a1c 	.word	0x20000a1c
 8002f40:	20000a18 	.word	0x20000a18
 8002f44:	20000004 	.word	0x20000004
 8002f48:	20000a4e 	.word	0x20000a4e
 8002f4c:	40021000 	.word	0x40021000

08002f50 <get_gps>:
/**Fungsi ini untuk memparsing data GPS yaitu latitude longitude digunakan untuk melihat lokaasi alat
  */
void get_gps(){
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b08a      	sub	sp, #40	; 0x28
 8002f54:	af02      	add	r7, sp, #8
	if (usart_3_state == true){
 8002f56:	4b92      	ldr	r3, [pc, #584]	; (80031a0 <get_gps+0x250>)
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	f000 8106 	beq.w	800316c <get_gps+0x21c>
		//printf("%s", MainBuf_3);
//		printf("7.12122");
//		printf("test");
	  char *pointer; char *conv;
		  int length = sizeof(MainBuf_3);
 8002f60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f64:	60bb      	str	r3, [r7, #8]

		  memset(lat, '\0', 20);
 8002f66:	2214      	movs	r2, #20
 8002f68:	2100      	movs	r1, #0
 8002f6a:	488e      	ldr	r0, [pc, #568]	; (80031a4 <get_gps+0x254>)
 8002f6c:	f005 fb5a 	bl	8008624 <memset>
		  memset(lon, '\0', 20) ;
 8002f70:	2214      	movs	r2, #20
 8002f72:	2100      	movs	r1, #0
 8002f74:	488c      	ldr	r0, [pc, #560]	; (80031a8 <get_gps+0x258>)
 8002f76:	f005 fb55 	bl	8008624 <memset>
		  pointer = strchr((char*)MainBuf_3, '$');
 8002f7a:	2124      	movs	r1, #36	; 0x24
 8002f7c:	488b      	ldr	r0, [pc, #556]	; (80031ac <get_gps+0x25c>)
 8002f7e:	f006 fb81 	bl	8009684 <strchr>
 8002f82:	61f8      	str	r0, [r7, #28]
		  do{
			  char *ptrstart;
			  char *ptrend;
			  if(strncmp(pointer, "$GNGGA" , 6) == 0){ //$GNGGA
 8002f84:	2206      	movs	r2, #6
 8002f86:	498a      	ldr	r1, [pc, #552]	; (80031b0 <get_gps+0x260>)
 8002f88:	69f8      	ldr	r0, [r7, #28]
 8002f8a:	f006 fb88 	bl	800969e <strncmp>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d118      	bne.n	8002fc6 <get_gps+0x76>
				  ptrstart = (char*)memchr(pointer + 1, ',', length);
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	3301      	adds	r3, #1
 8002f98:	68ba      	ldr	r2, [r7, #8]
 8002f9a:	212c      	movs	r1, #44	; 0x2c
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7fd f917 	bl	80001d0 <memchr>
 8002fa2:	61b8      	str	r0, [r7, #24]
				  ptrstart = (char*)memchr(ptrstart + 1, ',', length);
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	68ba      	ldr	r2, [r7, #8]
 8002faa:	212c      	movs	r1, #44	; 0x2c
 8002fac:	4618      	mov	r0, r3
 8002fae:	f7fd f90f 	bl	80001d0 <memchr>
 8002fb2:	61b8      	str	r0, [r7, #24]
				  ptrend = (char*)memchr(ptrstart + 1, ',', length);
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	68ba      	ldr	r2, [r7, #8]
 8002fba:	212c      	movs	r1, #44	; 0x2c
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7fd f907 	bl	80001d0 <memchr>
 8002fc2:	6178      	str	r0, [r7, #20]
 8002fc4:	e049      	b.n	800305a <get_gps+0x10a>

			  } else if(strncmp(pointer, "$GNGLL", 6) == 0){ //$GNGLL
 8002fc6:	2206      	movs	r2, #6
 8002fc8:	497a      	ldr	r1, [pc, #488]	; (80031b4 <get_gps+0x264>)
 8002fca:	69f8      	ldr	r0, [r7, #28]
 8002fcc:	f006 fb67 	bl	800969e <strncmp>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d110      	bne.n	8002ff8 <get_gps+0xa8>
				  ptrstart = (char*)memchr(pointer + 1, ',', length);
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	3301      	adds	r3, #1
 8002fda:	68ba      	ldr	r2, [r7, #8]
 8002fdc:	212c      	movs	r1, #44	; 0x2c
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7fd f8f6 	bl	80001d0 <memchr>
 8002fe4:	61b8      	str	r0, [r7, #24]
				  ptrend = (char*)memchr(ptrstart + 1, ',', length);
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	3301      	adds	r3, #1
 8002fea:	68ba      	ldr	r2, [r7, #8]
 8002fec:	212c      	movs	r1, #44	; 0x2c
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7fd f8ee 	bl	80001d0 <memchr>
 8002ff4:	6178      	str	r0, [r7, #20]
 8002ff6:	e030      	b.n	800305a <get_gps+0x10a>

			  } else if(strncmp(pointer, "$GNRMC", 6) == 0){ //$GNRMC
 8002ff8:	2206      	movs	r2, #6
 8002ffa:	496f      	ldr	r1, [pc, #444]	; (80031b8 <get_gps+0x268>)
 8002ffc:	69f8      	ldr	r0, [r7, #28]
 8002ffe:	f006 fb4e 	bl	800969e <strncmp>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d120      	bne.n	800304a <get_gps+0xfa>
				  ptrstart = (char*)memchr(pointer + 1, ',', length);
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	3301      	adds	r3, #1
 800300c:	68ba      	ldr	r2, [r7, #8]
 800300e:	212c      	movs	r1, #44	; 0x2c
 8003010:	4618      	mov	r0, r3
 8003012:	f7fd f8dd 	bl	80001d0 <memchr>
 8003016:	61b8      	str	r0, [r7, #24]
				  ptrstart = (char*)memchr(ptrstart + 1, ',', length);
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	3301      	adds	r3, #1
 800301c:	68ba      	ldr	r2, [r7, #8]
 800301e:	212c      	movs	r1, #44	; 0x2c
 8003020:	4618      	mov	r0, r3
 8003022:	f7fd f8d5 	bl	80001d0 <memchr>
 8003026:	61b8      	str	r0, [r7, #24]
				  ptrstart = (char*)memchr(ptrstart + 1, ',', length);
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	3301      	adds	r3, #1
 800302c:	68ba      	ldr	r2, [r7, #8]
 800302e:	212c      	movs	r1, #44	; 0x2c
 8003030:	4618      	mov	r0, r3
 8003032:	f7fd f8cd 	bl	80001d0 <memchr>
 8003036:	61b8      	str	r0, [r7, #24]
				  ptrend = (char*)memchr(ptrstart + 1, ',', length);
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	3301      	adds	r3, #1
 800303c:	68ba      	ldr	r2, [r7, #8]
 800303e:	212c      	movs	r1, #44	; 0x2c
 8003040:	4618      	mov	r0, r3
 8003042:	f7fd f8c5 	bl	80001d0 <memchr>
 8003046:	6178      	str	r0, [r7, #20]
 8003048:	e007      	b.n	800305a <get_gps+0x10a>

			  } else {
				  pointer = strchr(pointer + 6, '$');
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	3306      	adds	r3, #6
 800304e:	2124      	movs	r1, #36	; 0x24
 8003050:	4618      	mov	r0, r3
 8003052:	f006 fb17 	bl	8009684 <strchr>
 8003056:	61f8      	str	r0, [r7, #28]
				  continue;
 8003058:	e080      	b.n	800315c <get_gps+0x20c>
			  }

			  for(int i = 1; i < (ptrend - ptrstart); i++) lat[i - 1] = ptrstart[i];
 800305a:	2301      	movs	r3, #1
 800305c:	613b      	str	r3, [r7, #16]
 800305e:	e00a      	b.n	8003076 <get_gps+0x126>
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	69ba      	ldr	r2, [r7, #24]
 8003064:	441a      	add	r2, r3
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	3b01      	subs	r3, #1
 800306a:	7811      	ldrb	r1, [r2, #0]
 800306c:	4a4d      	ldr	r2, [pc, #308]	; (80031a4 <get_gps+0x254>)
 800306e:	54d1      	strb	r1, [r2, r3]
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	3301      	adds	r3, #1
 8003074:	613b      	str	r3, [r7, #16]
 8003076:	697a      	ldr	r2, [r7, #20]
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	693a      	ldr	r2, [r7, #16]
 800307e:	429a      	cmp	r2, r3
 8003080:	dbee      	blt.n	8003060 <get_gps+0x110>
			  lat_a = *(ptrend + 1);
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	785a      	ldrb	r2, [r3, #1]
 8003086:	4b4d      	ldr	r3, [pc, #308]	; (80031bc <get_gps+0x26c>)
 8003088:	701a      	strb	r2, [r3, #0]

			  ptrstart = (char*)memchr(ptrend + 1, ',', length);
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	3301      	adds	r3, #1
 800308e:	68ba      	ldr	r2, [r7, #8]
 8003090:	212c      	movs	r1, #44	; 0x2c
 8003092:	4618      	mov	r0, r3
 8003094:	f7fd f89c 	bl	80001d0 <memchr>
 8003098:	61b8      	str	r0, [r7, #24]
			  ptrend = (char*)memchr(ptrstart + 1, ',', length);
 800309a:	69bb      	ldr	r3, [r7, #24]
 800309c:	3301      	adds	r3, #1
 800309e:	68ba      	ldr	r2, [r7, #8]
 80030a0:	212c      	movs	r1, #44	; 0x2c
 80030a2:	4618      	mov	r0, r3
 80030a4:	f7fd f894 	bl	80001d0 <memchr>
 80030a8:	6178      	str	r0, [r7, #20]

			  for(int i = 1; i < (ptrend - ptrstart); i++) lon[i - 1] = ptrstart[i];
 80030aa:	2301      	movs	r3, #1
 80030ac:	60fb      	str	r3, [r7, #12]
 80030ae:	e00a      	b.n	80030c6 <get_gps+0x176>
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	69ba      	ldr	r2, [r7, #24]
 80030b4:	441a      	add	r2, r3
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	3b01      	subs	r3, #1
 80030ba:	7811      	ldrb	r1, [r2, #0]
 80030bc:	4a3a      	ldr	r2, [pc, #232]	; (80031a8 <get_gps+0x258>)
 80030be:	54d1      	strb	r1, [r2, r3]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	3301      	adds	r3, #1
 80030c4:	60fb      	str	r3, [r7, #12]
 80030c6:	697a      	ldr	r2, [r7, #20]
 80030c8:	69bb      	ldr	r3, [r7, #24]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	68fa      	ldr	r2, [r7, #12]
 80030ce:	429a      	cmp	r2, r3
 80030d0:	dbee      	blt.n	80030b0 <get_gps+0x160>
			  lon_a = *(ptrend + 1);
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	785a      	ldrb	r2, [r3, #1]
 80030d6:	4b3a      	ldr	r3, [pc, #232]	; (80031c0 <get_gps+0x270>)
 80030d8:	701a      	strb	r2, [r3, #0]
			  if(lon[0] != '\0' && lat[0] != '\0'){
 80030da:	4b33      	ldr	r3, [pc, #204]	; (80031a8 <get_gps+0x258>)
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d035      	beq.n	800314e <get_gps+0x1fe>
 80030e2:	4b30      	ldr	r3, [pc, #192]	; (80031a4 <get_gps+0x254>)
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d031      	beq.n	800314e <get_gps+0x1fe>
				  printf("Lat: %s | %c\tLon: %s | %c\r\n", lat, lat_a, lon, lon_a);
 80030ea:	4b34      	ldr	r3, [pc, #208]	; (80031bc <get_gps+0x26c>)
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	461a      	mov	r2, r3
 80030f0:	4b33      	ldr	r3, [pc, #204]	; (80031c0 <get_gps+0x270>)
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	9300      	str	r3, [sp, #0]
 80030f6:	4b2c      	ldr	r3, [pc, #176]	; (80031a8 <get_gps+0x258>)
 80030f8:	492a      	ldr	r1, [pc, #168]	; (80031a4 <get_gps+0x254>)
 80030fa:	4832      	ldr	r0, [pc, #200]	; (80031c4 <get_gps+0x274>)
 80030fc:	f006 f914 	bl	8009328 <iprintf>
				  lat_gps = strtod((char*)lat, &conv);
 8003100:	1d3b      	adds	r3, r7, #4
 8003102:	4619      	mov	r1, r3
 8003104:	4827      	ldr	r0, [pc, #156]	; (80031a4 <get_gps+0x254>)
 8003106:	f007 f90b 	bl	800a320 <strtod>
 800310a:	eeb0 7a40 	vmov.f32	s14, s0
 800310e:	eef0 7a60 	vmov.f32	s15, s1
 8003112:	4b2d      	ldr	r3, [pc, #180]	; (80031c8 <get_gps+0x278>)
 8003114:	ed83 7b00 	vstr	d7, [r3]
						  //atof((char*)lat);
				  lon_gps = strtod((char*)lon, &conv);
 8003118:	1d3b      	adds	r3, r7, #4
 800311a:	4619      	mov	r1, r3
 800311c:	4822      	ldr	r0, [pc, #136]	; (80031a8 <get_gps+0x258>)
 800311e:	f007 f8ff 	bl	800a320 <strtod>
 8003122:	eeb0 7a40 	vmov.f32	s14, s0
 8003126:	eef0 7a60 	vmov.f32	s15, s1
 800312a:	4b28      	ldr	r3, [pc, #160]	; (80031cc <get_gps+0x27c>)
 800312c:	ed83 7b00 	vstr	d7, [r3]
						  //atof((char*)lon);
				  sprintf(lat, "%g", lat_gps);
 8003130:	4b25      	ldr	r3, [pc, #148]	; (80031c8 <get_gps+0x278>)
 8003132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003136:	4926      	ldr	r1, [pc, #152]	; (80031d0 <get_gps+0x280>)
 8003138:	481a      	ldr	r0, [pc, #104]	; (80031a4 <get_gps+0x254>)
 800313a:	f006 fa83 	bl	8009644 <siprintf>
				  sprintf(lon, "%g", lon_gps);
 800313e:	4b23      	ldr	r3, [pc, #140]	; (80031cc <get_gps+0x27c>)
 8003140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003144:	4922      	ldr	r1, [pc, #136]	; (80031d0 <get_gps+0x280>)
 8003146:	4818      	ldr	r0, [pc, #96]	; (80031a8 <get_gps+0x258>)
 8003148:	f006 fa7c 	bl	8009644 <siprintf>

				  break;
 800314c:	e00a      	b.n	8003164 <get_gps+0x214>
			  }

			  pointer = strchr(pointer + 4, '$');
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	3304      	adds	r3, #4
 8003152:	2124      	movs	r1, #36	; 0x24
 8003154:	4618      	mov	r0, r3
 8003156:	f006 fa95 	bl	8009684 <strchr>
 800315a:	61f8      	str	r0, [r7, #28]
		  }
		  while(pointer != NULL);
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	2b00      	cmp	r3, #0
 8003160:	f47f af10 	bne.w	8002f84 <get_gps+0x34>
		  usart_3_state = false;
 8003164:	4b0e      	ldr	r3, [pc, #56]	; (80031a0 <get_gps+0x250>)
 8003166:	2200      	movs	r2, #0
 8003168:	701a      	strb	r2, [r3, #0]
			else
			  {
				  sprintf(lat, "%g", -7.122323);
				  sprintf(lon, "%g", 122.32312);
			  }
}
 800316a:	e00d      	b.n	8003188 <get_gps+0x238>
				  sprintf(lat, "%g", -7.122323);
 800316c:	a308      	add	r3, pc, #32	; (adr r3, 8003190 <get_gps+0x240>)
 800316e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003172:	4917      	ldr	r1, [pc, #92]	; (80031d0 <get_gps+0x280>)
 8003174:	480b      	ldr	r0, [pc, #44]	; (80031a4 <get_gps+0x254>)
 8003176:	f006 fa65 	bl	8009644 <siprintf>
				  sprintf(lon, "%g", 122.32312);
 800317a:	a307      	add	r3, pc, #28	; (adr r3, 8003198 <get_gps+0x248>)
 800317c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003180:	4913      	ldr	r1, [pc, #76]	; (80031d0 <get_gps+0x280>)
 8003182:	4809      	ldr	r0, [pc, #36]	; (80031a8 <get_gps+0x258>)
 8003184:	f006 fa5e 	bl	8009644 <siprintf>
}
 8003188:	bf00      	nop
 800318a:	3720      	adds	r7, #32
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	3d9231c6 	.word	0x3d9231c6
 8003194:	c01c7d42 	.word	0xc01c7d42
 8003198:	ff822bbf 	.word	0xff822bbf
 800319c:	405e94ad 	.word	0x405e94ad
 80031a0:	20000a04 	.word	0x20000a04
 80031a4:	200036f4 	.word	0x200036f4
 80031a8:	20002d98 	.word	0x20002d98
 80031ac:	20000204 	.word	0x20000204
 80031b0:	0800d364 	.word	0x0800d364
 80031b4:	0800d36c 	.word	0x0800d36c
 80031b8:	0800d374 	.word	0x0800d374
 80031bc:	20002d94 	.word	0x20002d94
 80031c0:	20002c90 	.word	0x20002c90
 80031c4:	0800d37c 	.word	0x0800d37c
 80031c8:	20003688 	.word	0x20003688
 80031cc:	20003708 	.word	0x20003708
 80031d0:	0800d398 	.word	0x0800d398

080031d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80031d4:	b480      	push	{r7}
 80031d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80031d8:	b672      	cpsid	i
}
 80031da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80031dc:	e7fe      	b.n	80031dc <Error_Handler+0x8>
	...

080031e0 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 80031e8:	4a07      	ldr	r2, [pc, #28]	; (8003208 <RetargetInit+0x28>)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 80031ee:	4b07      	ldr	r3, [pc, #28]	; (800320c <RetargetInit+0x2c>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	6898      	ldr	r0, [r3, #8]
 80031f4:	2300      	movs	r3, #0
 80031f6:	2202      	movs	r2, #2
 80031f8:	2100      	movs	r1, #0
 80031fa:	f006 f923 	bl	8009444 <setvbuf>
}
 80031fe:	bf00      	nop
 8003200:	3708      	adds	r7, #8
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	20003744 	.word	0x20003744
 800320c:	20000014 	.word	0x20000014

08003210 <_isatty>:

int _isatty(int fd) {
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2b00      	cmp	r3, #0
 800321c:	db04      	blt.n	8003228 <_isatty+0x18>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2b02      	cmp	r3, #2
 8003222:	dc01      	bgt.n	8003228 <_isatty+0x18>
    return 1;
 8003224:	2301      	movs	r3, #1
 8003226:	e005      	b.n	8003234 <_isatty+0x24>

  errno = EBADF;
 8003228:	f005 f9c4 	bl	80085b4 <__errno>
 800322c:	4603      	mov	r3, r0
 800322e:	2209      	movs	r2, #9
 8003230:	601a      	str	r2, [r3, #0]
  return 0;
 8003232:	2300      	movs	r3, #0
}
 8003234:	4618      	mov	r0, r3
 8003236:	3708      	adds	r7, #8
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <_write>:

int _write(int fd, char* ptr, int len) {
 800323c:	b580      	push	{r7, lr}
 800323e:	b086      	sub	sp, #24
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2b01      	cmp	r3, #1
 800324c:	d002      	beq.n	8003254 <_write+0x18>
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2b02      	cmp	r3, #2
 8003252:	d111      	bne.n	8003278 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8003254:	4b0e      	ldr	r3, [pc, #56]	; (8003290 <_write+0x54>)
 8003256:	6818      	ldr	r0, [r3, #0]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	b29a      	uxth	r2, r3
 800325c:	f04f 33ff 	mov.w	r3, #4294967295
 8003260:	68b9      	ldr	r1, [r7, #8]
 8003262:	f003 ffce 	bl	8007202 <HAL_UART_Transmit>
 8003266:	4603      	mov	r3, r0
 8003268:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800326a:	7dfb      	ldrb	r3, [r7, #23]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d101      	bne.n	8003274 <_write+0x38>
      return len;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	e008      	b.n	8003286 <_write+0x4a>
    else
      return EIO;
 8003274:	2305      	movs	r3, #5
 8003276:	e006      	b.n	8003286 <_write+0x4a>
  }
  errno = EBADF;
 8003278:	f005 f99c 	bl	80085b4 <__errno>
 800327c:	4603      	mov	r3, r0
 800327e:	2209      	movs	r2, #9
 8003280:	601a      	str	r2, [r3, #0]
  return -1;
 8003282:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003286:	4618      	mov	r0, r3
 8003288:	3718      	adds	r7, #24
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	20003744 	.word	0x20003744

08003294 <_close>:

int _close(int fd) {
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	db04      	blt.n	80032ac <_close+0x18>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	dc01      	bgt.n	80032ac <_close+0x18>
    return 0;
 80032a8:	2300      	movs	r3, #0
 80032aa:	e006      	b.n	80032ba <_close+0x26>

  errno = EBADF;
 80032ac:	f005 f982 	bl	80085b4 <__errno>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2209      	movs	r2, #9
 80032b4:	601a      	str	r2, [r3, #0]
  return -1;
 80032b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3708      	adds	r7, #8
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b084      	sub	sp, #16
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	60f8      	str	r0, [r7, #12]
 80032ca:	60b9      	str	r1, [r7, #8]
 80032cc:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 80032ce:	f005 f971 	bl	80085b4 <__errno>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2209      	movs	r2, #9
 80032d6:	601a      	str	r2, [r3, #0]
  return -1;
 80032d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3710      	adds	r7, #16
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <_read>:

int _read(int fd, char* ptr, int len) {
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b086      	sub	sp, #24
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	60b9      	str	r1, [r7, #8]
 80032ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d110      	bne.n	8003318 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 80032f6:	4b0e      	ldr	r3, [pc, #56]	; (8003330 <_read+0x4c>)
 80032f8:	6818      	ldr	r0, [r3, #0]
 80032fa:	f04f 33ff 	mov.w	r3, #4294967295
 80032fe:	2201      	movs	r2, #1
 8003300:	68b9      	ldr	r1, [r7, #8]
 8003302:	f004 f810 	bl	8007326 <HAL_UART_Receive>
 8003306:	4603      	mov	r3, r0
 8003308:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800330a:	7dfb      	ldrb	r3, [r7, #23]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d101      	bne.n	8003314 <_read+0x30>
      return 1;
 8003310:	2301      	movs	r3, #1
 8003312:	e008      	b.n	8003326 <_read+0x42>
    else
      return EIO;
 8003314:	2305      	movs	r3, #5
 8003316:	e006      	b.n	8003326 <_read+0x42>
  }
  errno = EBADF;
 8003318:	f005 f94c 	bl	80085b4 <__errno>
 800331c:	4603      	mov	r3, r0
 800331e:	2209      	movs	r2, #9
 8003320:	601a      	str	r2, [r3, #0]
  return -1;
 8003322:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003326:	4618      	mov	r0, r3
 8003328:	3718      	adds	r7, #24
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	20003744 	.word	0x20003744

08003334 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2b00      	cmp	r3, #0
 8003342:	db08      	blt.n	8003356 <_fstat+0x22>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2b02      	cmp	r3, #2
 8003348:	dc05      	bgt.n	8003356 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003350:	605a      	str	r2, [r3, #4]
    return 0;
 8003352:	2300      	movs	r3, #0
 8003354:	e005      	b.n	8003362 <_fstat+0x2e>
  }

  errno = EBADF;
 8003356:	f005 f92d 	bl	80085b4 <__errno>
 800335a:	4603      	mov	r3, r0
 800335c:	2209      	movs	r2, #9
 800335e:	601a      	str	r2, [r3, #0]
  return 0;
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	3708      	adds	r7, #8
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
	...

0800336c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003372:	2300      	movs	r3, #0
 8003374:	607b      	str	r3, [r7, #4]
 8003376:	4b10      	ldr	r3, [pc, #64]	; (80033b8 <HAL_MspInit+0x4c>)
 8003378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800337a:	4a0f      	ldr	r2, [pc, #60]	; (80033b8 <HAL_MspInit+0x4c>)
 800337c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003380:	6453      	str	r3, [r2, #68]	; 0x44
 8003382:	4b0d      	ldr	r3, [pc, #52]	; (80033b8 <HAL_MspInit+0x4c>)
 8003384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003386:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800338a:	607b      	str	r3, [r7, #4]
 800338c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800338e:	2300      	movs	r3, #0
 8003390:	603b      	str	r3, [r7, #0]
 8003392:	4b09      	ldr	r3, [pc, #36]	; (80033b8 <HAL_MspInit+0x4c>)
 8003394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003396:	4a08      	ldr	r2, [pc, #32]	; (80033b8 <HAL_MspInit+0x4c>)
 8003398:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800339c:	6413      	str	r3, [r2, #64]	; 0x40
 800339e:	4b06      	ldr	r3, [pc, #24]	; (80033b8 <HAL_MspInit+0x4c>)
 80033a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033a6:	603b      	str	r3, [r7, #0]
 80033a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033aa:	bf00      	nop
 80033ac:	370c      	adds	r7, #12
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop
 80033b8:	40023800 	.word	0x40023800

080033bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b08a      	sub	sp, #40	; 0x28
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033c4:	f107 0314 	add.w	r3, r7, #20
 80033c8:	2200      	movs	r2, #0
 80033ca:	601a      	str	r2, [r3, #0]
 80033cc:	605a      	str	r2, [r3, #4]
 80033ce:	609a      	str	r2, [r3, #8]
 80033d0:	60da      	str	r2, [r3, #12]
 80033d2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a19      	ldr	r2, [pc, #100]	; (8003440 <HAL_I2C_MspInit+0x84>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d12b      	bne.n	8003436 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033de:	2300      	movs	r3, #0
 80033e0:	613b      	str	r3, [r7, #16]
 80033e2:	4b18      	ldr	r3, [pc, #96]	; (8003444 <HAL_I2C_MspInit+0x88>)
 80033e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e6:	4a17      	ldr	r2, [pc, #92]	; (8003444 <HAL_I2C_MspInit+0x88>)
 80033e8:	f043 0302 	orr.w	r3, r3, #2
 80033ec:	6313      	str	r3, [r2, #48]	; 0x30
 80033ee:	4b15      	ldr	r3, [pc, #84]	; (8003444 <HAL_I2C_MspInit+0x88>)
 80033f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f2:	f003 0302 	and.w	r3, r3, #2
 80033f6:	613b      	str	r3, [r7, #16]
 80033f8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80033fa:	23c0      	movs	r3, #192	; 0xc0
 80033fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80033fe:	2312      	movs	r3, #18
 8003400:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003402:	2301      	movs	r3, #1
 8003404:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003406:	2303      	movs	r3, #3
 8003408:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800340a:	2304      	movs	r3, #4
 800340c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800340e:	f107 0314 	add.w	r3, r7, #20
 8003412:	4619      	mov	r1, r3
 8003414:	480c      	ldr	r0, [pc, #48]	; (8003448 <HAL_I2C_MspInit+0x8c>)
 8003416:	f001 f86b 	bl	80044f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800341a:	2300      	movs	r3, #0
 800341c:	60fb      	str	r3, [r7, #12]
 800341e:	4b09      	ldr	r3, [pc, #36]	; (8003444 <HAL_I2C_MspInit+0x88>)
 8003420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003422:	4a08      	ldr	r2, [pc, #32]	; (8003444 <HAL_I2C_MspInit+0x88>)
 8003424:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003428:	6413      	str	r3, [r2, #64]	; 0x40
 800342a:	4b06      	ldr	r3, [pc, #24]	; (8003444 <HAL_I2C_MspInit+0x88>)
 800342c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003432:	60fb      	str	r3, [r7, #12]
 8003434:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003436:	bf00      	nop
 8003438:	3728      	adds	r7, #40	; 0x28
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	40005400 	.word	0x40005400
 8003444:	40023800 	.word	0x40023800
 8003448:	40020400 	.word	0x40020400

0800344c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a05      	ldr	r2, [pc, #20]	; (8003470 <HAL_RTC_MspInit+0x24>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d102      	bne.n	8003464 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800345e:	4b05      	ldr	r3, [pc, #20]	; (8003474 <HAL_RTC_MspInit+0x28>)
 8003460:	2201      	movs	r2, #1
 8003462:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003464:	bf00      	nop
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr
 8003470:	40002800 	.word	0x40002800
 8003474:	42470e3c 	.word	0x42470e3c

08003478 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b08a      	sub	sp, #40	; 0x28
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003480:	f107 0314 	add.w	r3, r7, #20
 8003484:	2200      	movs	r2, #0
 8003486:	601a      	str	r2, [r3, #0]
 8003488:	605a      	str	r2, [r3, #4]
 800348a:	609a      	str	r2, [r3, #8]
 800348c:	60da      	str	r2, [r3, #12]
 800348e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a30      	ldr	r2, [pc, #192]	; (8003558 <HAL_SPI_MspInit+0xe0>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d159      	bne.n	800354e <HAL_SPI_MspInit+0xd6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800349a:	2300      	movs	r3, #0
 800349c:	613b      	str	r3, [r7, #16]
 800349e:	4b2f      	ldr	r3, [pc, #188]	; (800355c <HAL_SPI_MspInit+0xe4>)
 80034a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a2:	4a2e      	ldr	r2, [pc, #184]	; (800355c <HAL_SPI_MspInit+0xe4>)
 80034a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80034a8:	6453      	str	r3, [r2, #68]	; 0x44
 80034aa:	4b2c      	ldr	r3, [pc, #176]	; (800355c <HAL_SPI_MspInit+0xe4>)
 80034ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034b2:	613b      	str	r3, [r7, #16]
 80034b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034b6:	2300      	movs	r3, #0
 80034b8:	60fb      	str	r3, [r7, #12]
 80034ba:	4b28      	ldr	r3, [pc, #160]	; (800355c <HAL_SPI_MspInit+0xe4>)
 80034bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034be:	4a27      	ldr	r2, [pc, #156]	; (800355c <HAL_SPI_MspInit+0xe4>)
 80034c0:	f043 0301 	orr.w	r3, r3, #1
 80034c4:	6313      	str	r3, [r2, #48]	; 0x30
 80034c6:	4b25      	ldr	r3, [pc, #148]	; (800355c <HAL_SPI_MspInit+0xe4>)
 80034c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ca:	f003 0301 	and.w	r3, r3, #1
 80034ce:	60fb      	str	r3, [r7, #12]
 80034d0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80034d2:	23a0      	movs	r3, #160	; 0xa0
 80034d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034d6:	2302      	movs	r3, #2
 80034d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034da:	2300      	movs	r3, #0
 80034dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034de:	2303      	movs	r3, #3
 80034e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80034e2:	2305      	movs	r3, #5
 80034e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034e6:	f107 0314 	add.w	r3, r7, #20
 80034ea:	4619      	mov	r1, r3
 80034ec:	481c      	ldr	r0, [pc, #112]	; (8003560 <HAL_SPI_MspInit+0xe8>)
 80034ee:	f000 ffff 	bl	80044f0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80034f2:	4b1c      	ldr	r3, [pc, #112]	; (8003564 <HAL_SPI_MspInit+0xec>)
 80034f4:	4a1c      	ldr	r2, [pc, #112]	; (8003568 <HAL_SPI_MspInit+0xf0>)
 80034f6:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80034f8:	4b1a      	ldr	r3, [pc, #104]	; (8003564 <HAL_SPI_MspInit+0xec>)
 80034fa:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80034fe:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003500:	4b18      	ldr	r3, [pc, #96]	; (8003564 <HAL_SPI_MspInit+0xec>)
 8003502:	2240      	movs	r2, #64	; 0x40
 8003504:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003506:	4b17      	ldr	r3, [pc, #92]	; (8003564 <HAL_SPI_MspInit+0xec>)
 8003508:	2200      	movs	r2, #0
 800350a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800350c:	4b15      	ldr	r3, [pc, #84]	; (8003564 <HAL_SPI_MspInit+0xec>)
 800350e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003512:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003514:	4b13      	ldr	r3, [pc, #76]	; (8003564 <HAL_SPI_MspInit+0xec>)
 8003516:	2200      	movs	r2, #0
 8003518:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800351a:	4b12      	ldr	r3, [pc, #72]	; (8003564 <HAL_SPI_MspInit+0xec>)
 800351c:	2200      	movs	r2, #0
 800351e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8003520:	4b10      	ldr	r3, [pc, #64]	; (8003564 <HAL_SPI_MspInit+0xec>)
 8003522:	2200      	movs	r2, #0
 8003524:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003526:	4b0f      	ldr	r3, [pc, #60]	; (8003564 <HAL_SPI_MspInit+0xec>)
 8003528:	2200      	movs	r2, #0
 800352a:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800352c:	4b0d      	ldr	r3, [pc, #52]	; (8003564 <HAL_SPI_MspInit+0xec>)
 800352e:	2200      	movs	r2, #0
 8003530:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003532:	480c      	ldr	r0, [pc, #48]	; (8003564 <HAL_SPI_MspInit+0xec>)
 8003534:	f000 fbda 	bl	8003cec <HAL_DMA_Init>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d001      	beq.n	8003542 <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 800353e:	f7ff fe49 	bl	80031d4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a07      	ldr	r2, [pc, #28]	; (8003564 <HAL_SPI_MspInit+0xec>)
 8003546:	649a      	str	r2, [r3, #72]	; 0x48
 8003548:	4a06      	ldr	r2, [pc, #24]	; (8003564 <HAL_SPI_MspInit+0xec>)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800354e:	bf00      	nop
 8003550:	3728      	adds	r7, #40	; 0x28
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	40013000 	.word	0x40013000
 800355c:	40023800 	.word	0x40023800
 8003560:	40020000 	.word	0x40020000
 8003564:	20003694 	.word	0x20003694
 8003568:	40026458 	.word	0x40026458

0800356c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b08e      	sub	sp, #56	; 0x38
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003574:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003578:	2200      	movs	r2, #0
 800357a:	601a      	str	r2, [r3, #0]
 800357c:	605a      	str	r2, [r3, #4]
 800357e:	609a      	str	r2, [r3, #8]
 8003580:	60da      	str	r2, [r3, #12]
 8003582:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a86      	ldr	r2, [pc, #536]	; (80037a4 <HAL_UART_MspInit+0x238>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d135      	bne.n	80035fa <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800358e:	2300      	movs	r3, #0
 8003590:	623b      	str	r3, [r7, #32]
 8003592:	4b85      	ldr	r3, [pc, #532]	; (80037a8 <HAL_UART_MspInit+0x23c>)
 8003594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003596:	4a84      	ldr	r2, [pc, #528]	; (80037a8 <HAL_UART_MspInit+0x23c>)
 8003598:	f043 0310 	orr.w	r3, r3, #16
 800359c:	6453      	str	r3, [r2, #68]	; 0x44
 800359e:	4b82      	ldr	r3, [pc, #520]	; (80037a8 <HAL_UART_MspInit+0x23c>)
 80035a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a2:	f003 0310 	and.w	r3, r3, #16
 80035a6:	623b      	str	r3, [r7, #32]
 80035a8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035aa:	2300      	movs	r3, #0
 80035ac:	61fb      	str	r3, [r7, #28]
 80035ae:	4b7e      	ldr	r3, [pc, #504]	; (80037a8 <HAL_UART_MspInit+0x23c>)
 80035b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b2:	4a7d      	ldr	r2, [pc, #500]	; (80037a8 <HAL_UART_MspInit+0x23c>)
 80035b4:	f043 0301 	orr.w	r3, r3, #1
 80035b8:	6313      	str	r3, [r2, #48]	; 0x30
 80035ba:	4b7b      	ldr	r3, [pc, #492]	; (80037a8 <HAL_UART_MspInit+0x23c>)
 80035bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035be:	f003 0301 	and.w	r3, r3, #1
 80035c2:	61fb      	str	r3, [r7, #28]
 80035c4:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80035c6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80035ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035cc:	2302      	movs	r3, #2
 80035ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d0:	2300      	movs	r3, #0
 80035d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035d4:	2303      	movs	r3, #3
 80035d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80035d8:	2307      	movs	r3, #7
 80035da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035e0:	4619      	mov	r1, r3
 80035e2:	4872      	ldr	r0, [pc, #456]	; (80037ac <HAL_UART_MspInit+0x240>)
 80035e4:	f000 ff84 	bl	80044f0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80035e8:	2200      	movs	r2, #0
 80035ea:	2100      	movs	r1, #0
 80035ec:	2025      	movs	r0, #37	; 0x25
 80035ee:	f000 fb46 	bl	8003c7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80035f2:	2025      	movs	r0, #37	; 0x25
 80035f4:	f000 fb5f 	bl	8003cb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80035f8:	e0cf      	b.n	800379a <HAL_UART_MspInit+0x22e>
  else if(huart->Instance==USART2)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a6c      	ldr	r2, [pc, #432]	; (80037b0 <HAL_UART_MspInit+0x244>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d162      	bne.n	80036ca <HAL_UART_MspInit+0x15e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003604:	2300      	movs	r3, #0
 8003606:	61bb      	str	r3, [r7, #24]
 8003608:	4b67      	ldr	r3, [pc, #412]	; (80037a8 <HAL_UART_MspInit+0x23c>)
 800360a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360c:	4a66      	ldr	r2, [pc, #408]	; (80037a8 <HAL_UART_MspInit+0x23c>)
 800360e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003612:	6413      	str	r3, [r2, #64]	; 0x40
 8003614:	4b64      	ldr	r3, [pc, #400]	; (80037a8 <HAL_UART_MspInit+0x23c>)
 8003616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003618:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800361c:	61bb      	str	r3, [r7, #24]
 800361e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003620:	2300      	movs	r3, #0
 8003622:	617b      	str	r3, [r7, #20]
 8003624:	4b60      	ldr	r3, [pc, #384]	; (80037a8 <HAL_UART_MspInit+0x23c>)
 8003626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003628:	4a5f      	ldr	r2, [pc, #380]	; (80037a8 <HAL_UART_MspInit+0x23c>)
 800362a:	f043 0301 	orr.w	r3, r3, #1
 800362e:	6313      	str	r3, [r2, #48]	; 0x30
 8003630:	4b5d      	ldr	r3, [pc, #372]	; (80037a8 <HAL_UART_MspInit+0x23c>)
 8003632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003634:	f003 0301 	and.w	r3, r3, #1
 8003638:	617b      	str	r3, [r7, #20]
 800363a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800363c:	230c      	movs	r3, #12
 800363e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003640:	2302      	movs	r3, #2
 8003642:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003644:	2300      	movs	r3, #0
 8003646:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003648:	2303      	movs	r3, #3
 800364a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800364c:	2307      	movs	r3, #7
 800364e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003650:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003654:	4619      	mov	r1, r3
 8003656:	4855      	ldr	r0, [pc, #340]	; (80037ac <HAL_UART_MspInit+0x240>)
 8003658:	f000 ff4a 	bl	80044f0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800365c:	4b55      	ldr	r3, [pc, #340]	; (80037b4 <HAL_UART_MspInit+0x248>)
 800365e:	4a56      	ldr	r2, [pc, #344]	; (80037b8 <HAL_UART_MspInit+0x24c>)
 8003660:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003662:	4b54      	ldr	r3, [pc, #336]	; (80037b4 <HAL_UART_MspInit+0x248>)
 8003664:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003668:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800366a:	4b52      	ldr	r3, [pc, #328]	; (80037b4 <HAL_UART_MspInit+0x248>)
 800366c:	2200      	movs	r2, #0
 800366e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003670:	4b50      	ldr	r3, [pc, #320]	; (80037b4 <HAL_UART_MspInit+0x248>)
 8003672:	2200      	movs	r2, #0
 8003674:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003676:	4b4f      	ldr	r3, [pc, #316]	; (80037b4 <HAL_UART_MspInit+0x248>)
 8003678:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800367c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800367e:	4b4d      	ldr	r3, [pc, #308]	; (80037b4 <HAL_UART_MspInit+0x248>)
 8003680:	2200      	movs	r2, #0
 8003682:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003684:	4b4b      	ldr	r3, [pc, #300]	; (80037b4 <HAL_UART_MspInit+0x248>)
 8003686:	2200      	movs	r2, #0
 8003688:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800368a:	4b4a      	ldr	r3, [pc, #296]	; (80037b4 <HAL_UART_MspInit+0x248>)
 800368c:	2200      	movs	r2, #0
 800368e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003690:	4b48      	ldr	r3, [pc, #288]	; (80037b4 <HAL_UART_MspInit+0x248>)
 8003692:	2200      	movs	r2, #0
 8003694:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003696:	4b47      	ldr	r3, [pc, #284]	; (80037b4 <HAL_UART_MspInit+0x248>)
 8003698:	2200      	movs	r2, #0
 800369a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800369c:	4845      	ldr	r0, [pc, #276]	; (80037b4 <HAL_UART_MspInit+0x248>)
 800369e:	f000 fb25 	bl	8003cec <HAL_DMA_Init>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d001      	beq.n	80036ac <HAL_UART_MspInit+0x140>
      Error_Handler();
 80036a8:	f7ff fd94 	bl	80031d4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	4a41      	ldr	r2, [pc, #260]	; (80037b4 <HAL_UART_MspInit+0x248>)
 80036b0:	639a      	str	r2, [r3, #56]	; 0x38
 80036b2:	4a40      	ldr	r2, [pc, #256]	; (80037b4 <HAL_UART_MspInit+0x248>)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80036b8:	2200      	movs	r2, #0
 80036ba:	2100      	movs	r1, #0
 80036bc:	2026      	movs	r0, #38	; 0x26
 80036be:	f000 fade 	bl	8003c7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80036c2:	2026      	movs	r0, #38	; 0x26
 80036c4:	f000 faf7 	bl	8003cb6 <HAL_NVIC_EnableIRQ>
}
 80036c8:	e067      	b.n	800379a <HAL_UART_MspInit+0x22e>
  else if(huart->Instance==USART3)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a3b      	ldr	r2, [pc, #236]	; (80037bc <HAL_UART_MspInit+0x250>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d162      	bne.n	800379a <HAL_UART_MspInit+0x22e>
    __HAL_RCC_USART3_CLK_ENABLE();
 80036d4:	2300      	movs	r3, #0
 80036d6:	613b      	str	r3, [r7, #16]
 80036d8:	4b33      	ldr	r3, [pc, #204]	; (80037a8 <HAL_UART_MspInit+0x23c>)
 80036da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036dc:	4a32      	ldr	r2, [pc, #200]	; (80037a8 <HAL_UART_MspInit+0x23c>)
 80036de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036e2:	6413      	str	r3, [r2, #64]	; 0x40
 80036e4:	4b30      	ldr	r3, [pc, #192]	; (80037a8 <HAL_UART_MspInit+0x23c>)
 80036e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036ec:	613b      	str	r3, [r7, #16]
 80036ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036f0:	2300      	movs	r3, #0
 80036f2:	60fb      	str	r3, [r7, #12]
 80036f4:	4b2c      	ldr	r3, [pc, #176]	; (80037a8 <HAL_UART_MspInit+0x23c>)
 80036f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f8:	4a2b      	ldr	r2, [pc, #172]	; (80037a8 <HAL_UART_MspInit+0x23c>)
 80036fa:	f043 0302 	orr.w	r3, r3, #2
 80036fe:	6313      	str	r3, [r2, #48]	; 0x30
 8003700:	4b29      	ldr	r3, [pc, #164]	; (80037a8 <HAL_UART_MspInit+0x23c>)
 8003702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003704:	f003 0302 	and.w	r3, r3, #2
 8003708:	60fb      	str	r3, [r7, #12]
 800370a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800370c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003710:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003712:	2302      	movs	r3, #2
 8003714:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003716:	2300      	movs	r3, #0
 8003718:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800371a:	2303      	movs	r3, #3
 800371c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800371e:	2307      	movs	r3, #7
 8003720:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003722:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003726:	4619      	mov	r1, r3
 8003728:	4825      	ldr	r0, [pc, #148]	; (80037c0 <HAL_UART_MspInit+0x254>)
 800372a:	f000 fee1 	bl	80044f0 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800372e:	4b25      	ldr	r3, [pc, #148]	; (80037c4 <HAL_UART_MspInit+0x258>)
 8003730:	4a25      	ldr	r2, [pc, #148]	; (80037c8 <HAL_UART_MspInit+0x25c>)
 8003732:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8003734:	4b23      	ldr	r3, [pc, #140]	; (80037c4 <HAL_UART_MspInit+0x258>)
 8003736:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800373a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800373c:	4b21      	ldr	r3, [pc, #132]	; (80037c4 <HAL_UART_MspInit+0x258>)
 800373e:	2200      	movs	r2, #0
 8003740:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003742:	4b20      	ldr	r3, [pc, #128]	; (80037c4 <HAL_UART_MspInit+0x258>)
 8003744:	2200      	movs	r2, #0
 8003746:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003748:	4b1e      	ldr	r3, [pc, #120]	; (80037c4 <HAL_UART_MspInit+0x258>)
 800374a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800374e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003750:	4b1c      	ldr	r3, [pc, #112]	; (80037c4 <HAL_UART_MspInit+0x258>)
 8003752:	2200      	movs	r2, #0
 8003754:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003756:	4b1b      	ldr	r3, [pc, #108]	; (80037c4 <HAL_UART_MspInit+0x258>)
 8003758:	2200      	movs	r2, #0
 800375a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800375c:	4b19      	ldr	r3, [pc, #100]	; (80037c4 <HAL_UART_MspInit+0x258>)
 800375e:	2200      	movs	r2, #0
 8003760:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003762:	4b18      	ldr	r3, [pc, #96]	; (80037c4 <HAL_UART_MspInit+0x258>)
 8003764:	2200      	movs	r2, #0
 8003766:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003768:	4b16      	ldr	r3, [pc, #88]	; (80037c4 <HAL_UART_MspInit+0x258>)
 800376a:	2200      	movs	r2, #0
 800376c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800376e:	4815      	ldr	r0, [pc, #84]	; (80037c4 <HAL_UART_MspInit+0x258>)
 8003770:	f000 fabc 	bl	8003cec <HAL_DMA_Init>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d001      	beq.n	800377e <HAL_UART_MspInit+0x212>
      Error_Handler();
 800377a:	f7ff fd2b 	bl	80031d4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a10      	ldr	r2, [pc, #64]	; (80037c4 <HAL_UART_MspInit+0x258>)
 8003782:	639a      	str	r2, [r3, #56]	; 0x38
 8003784:	4a0f      	ldr	r2, [pc, #60]	; (80037c4 <HAL_UART_MspInit+0x258>)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800378a:	2200      	movs	r2, #0
 800378c:	2100      	movs	r1, #0
 800378e:	2027      	movs	r0, #39	; 0x27
 8003790:	f000 fa75 	bl	8003c7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003794:	2027      	movs	r0, #39	; 0x27
 8003796:	f000 fa8e 	bl	8003cb6 <HAL_NVIC_EnableIRQ>
}
 800379a:	bf00      	nop
 800379c:	3738      	adds	r7, #56	; 0x38
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	40011000 	.word	0x40011000
 80037a8:	40023800 	.word	0x40023800
 80037ac:	40020000 	.word	0x40020000
 80037b0:	40004400 	.word	0x40004400
 80037b4:	20002a70 	.word	0x20002a70
 80037b8:	40026088 	.word	0x40026088
 80037bc:	40004800 	.word	0x40004800
 80037c0:	40020400 	.word	0x40020400
 80037c4:	20002b98 	.word	0x20002b98
 80037c8:	40026028 	.word	0x40026028

080037cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80037cc:	b480      	push	{r7}
 80037ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80037d0:	e7fe      	b.n	80037d0 <NMI_Handler+0x4>

080037d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80037d2:	b480      	push	{r7}
 80037d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80037d6:	e7fe      	b.n	80037d6 <HardFault_Handler+0x4>

080037d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80037d8:	b480      	push	{r7}
 80037da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80037dc:	e7fe      	b.n	80037dc <MemManage_Handler+0x4>

080037de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80037de:	b480      	push	{r7}
 80037e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80037e2:	e7fe      	b.n	80037e2 <BusFault_Handler+0x4>

080037e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80037e4:	b480      	push	{r7}
 80037e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80037e8:	e7fe      	b.n	80037e8 <UsageFault_Handler+0x4>

080037ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80037ea:	b480      	push	{r7}
 80037ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80037ee:	bf00      	nop
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80037f8:	b480      	push	{r7}
 80037fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80037fc:	bf00      	nop
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr

08003806 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003806:	b480      	push	{r7}
 8003808:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800380a:	bf00      	nop
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr

08003814 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003818:	f000 f912 	bl	8003a40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800381c:	bf00      	nop
 800381e:	bd80      	pop	{r7, pc}

08003820 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003824:	4802      	ldr	r0, [pc, #8]	; (8003830 <DMA1_Stream1_IRQHandler+0x10>)
 8003826:	f000 fbf9 	bl	800401c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800382a:	bf00      	nop
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	20002b98 	.word	0x20002b98

08003834 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003838:	4802      	ldr	r0, [pc, #8]	; (8003844 <DMA1_Stream5_IRQHandler+0x10>)
 800383a:	f000 fbef 	bl	800401c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800383e:	bf00      	nop
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	20002a70 	.word	0x20002a70

08003848 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800384c:	2020      	movs	r0, #32
 800384e:	f001 f81d 	bl	800488c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8003852:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003856:	f001 f819 	bl	800488c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 800385a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800385e:	f001 f815 	bl	800488c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003862:	bf00      	nop
 8003864:	bd80      	pop	{r7, pc}
	...

08003868 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800386c:	4802      	ldr	r0, [pc, #8]	; (8003878 <USART1_IRQHandler+0x10>)
 800386e:	f003 fe61 	bl	8007534 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003872:	bf00      	nop
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	20002d10 	.word	0x20002d10

0800387c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003880:	4802      	ldr	r0, [pc, #8]	; (800388c <USART2_IRQHandler+0x10>)
 8003882:	f003 fe57 	bl	8007534 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003886:	bf00      	nop
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	2000363c 	.word	0x2000363c

08003890 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003894:	4802      	ldr	r0, [pc, #8]	; (80038a0 <USART3_IRQHandler+0x10>)
 8003896:	f003 fe4d 	bl	8007534 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800389a:	bf00      	nop
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	20002bf8 	.word	0x20002bf8

080038a4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80038a8:	4802      	ldr	r0, [pc, #8]	; (80038b4 <DMA2_Stream3_IRQHandler+0x10>)
 80038aa:	f000 fbb7 	bl	800401c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80038ae:	bf00      	nop
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	20003694 	.word	0x20003694

080038b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b086      	sub	sp, #24
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80038c0:	4a14      	ldr	r2, [pc, #80]	; (8003914 <_sbrk+0x5c>)
 80038c2:	4b15      	ldr	r3, [pc, #84]	; (8003918 <_sbrk+0x60>)
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80038cc:	4b13      	ldr	r3, [pc, #76]	; (800391c <_sbrk+0x64>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d102      	bne.n	80038da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80038d4:	4b11      	ldr	r3, [pc, #68]	; (800391c <_sbrk+0x64>)
 80038d6:	4a12      	ldr	r2, [pc, #72]	; (8003920 <_sbrk+0x68>)
 80038d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80038da:	4b10      	ldr	r3, [pc, #64]	; (800391c <_sbrk+0x64>)
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4413      	add	r3, r2
 80038e2:	693a      	ldr	r2, [r7, #16]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d207      	bcs.n	80038f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80038e8:	f004 fe64 	bl	80085b4 <__errno>
 80038ec:	4603      	mov	r3, r0
 80038ee:	220c      	movs	r2, #12
 80038f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80038f2:	f04f 33ff 	mov.w	r3, #4294967295
 80038f6:	e009      	b.n	800390c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80038f8:	4b08      	ldr	r3, [pc, #32]	; (800391c <_sbrk+0x64>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80038fe:	4b07      	ldr	r3, [pc, #28]	; (800391c <_sbrk+0x64>)
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4413      	add	r3, r2
 8003906:	4a05      	ldr	r2, [pc, #20]	; (800391c <_sbrk+0x64>)
 8003908:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800390a:	68fb      	ldr	r3, [r7, #12]
}
 800390c:	4618      	mov	r0, r3
 800390e:	3718      	adds	r7, #24
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}
 8003914:	20020000 	.word	0x20020000
 8003918:	00000400 	.word	0x00000400
 800391c:	20000a50 	.word	0x20000a50
 8003920:	20003760 	.word	0x20003760

08003924 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003924:	b480      	push	{r7}
 8003926:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003928:	4b06      	ldr	r3, [pc, #24]	; (8003944 <SystemInit+0x20>)
 800392a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800392e:	4a05      	ldr	r2, [pc, #20]	; (8003944 <SystemInit+0x20>)
 8003930:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003934:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003938:	bf00      	nop
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop
 8003944:	e000ed00 	.word	0xe000ed00

08003948 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003948:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003980 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800394c:	480d      	ldr	r0, [pc, #52]	; (8003984 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800394e:	490e      	ldr	r1, [pc, #56]	; (8003988 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003950:	4a0e      	ldr	r2, [pc, #56]	; (800398c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003952:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003954:	e002      	b.n	800395c <LoopCopyDataInit>

08003956 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003956:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003958:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800395a:	3304      	adds	r3, #4

0800395c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800395c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800395e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003960:	d3f9      	bcc.n	8003956 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003962:	4a0b      	ldr	r2, [pc, #44]	; (8003990 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003964:	4c0b      	ldr	r4, [pc, #44]	; (8003994 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003966:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003968:	e001      	b.n	800396e <LoopFillZerobss>

0800396a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800396a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800396c:	3204      	adds	r2, #4

0800396e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800396e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003970:	d3fb      	bcc.n	800396a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003972:	f7ff ffd7 	bl	8003924 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003976:	f004 fe23 	bl	80085c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800397a:	f7fe fc17 	bl	80021ac <main>
  bx  lr    
 800397e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003980:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003984:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003988:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 800398c:	0800e9cc 	.word	0x0800e9cc
  ldr r2, =_sbss
 8003990:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8003994:	2000375c 	.word	0x2000375c

08003998 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003998:	e7fe      	b.n	8003998 <ADC_IRQHandler>
	...

0800399c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80039a0:	4b0e      	ldr	r3, [pc, #56]	; (80039dc <HAL_Init+0x40>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a0d      	ldr	r2, [pc, #52]	; (80039dc <HAL_Init+0x40>)
 80039a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80039ac:	4b0b      	ldr	r3, [pc, #44]	; (80039dc <HAL_Init+0x40>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a0a      	ldr	r2, [pc, #40]	; (80039dc <HAL_Init+0x40>)
 80039b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80039b8:	4b08      	ldr	r3, [pc, #32]	; (80039dc <HAL_Init+0x40>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a07      	ldr	r2, [pc, #28]	; (80039dc <HAL_Init+0x40>)
 80039be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039c4:	2003      	movs	r0, #3
 80039c6:	f000 f94f 	bl	8003c68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80039ca:	2000      	movs	r0, #0
 80039cc:	f000 f808 	bl	80039e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80039d0:	f7ff fccc 	bl	800336c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	40023c00 	.word	0x40023c00

080039e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80039e8:	4b12      	ldr	r3, [pc, #72]	; (8003a34 <HAL_InitTick+0x54>)
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	4b12      	ldr	r3, [pc, #72]	; (8003a38 <HAL_InitTick+0x58>)
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	4619      	mov	r1, r3
 80039f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80039f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80039fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80039fe:	4618      	mov	r0, r3
 8003a00:	f000 f967 	bl	8003cd2 <HAL_SYSTICK_Config>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d001      	beq.n	8003a0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e00e      	b.n	8003a2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2b0f      	cmp	r3, #15
 8003a12:	d80a      	bhi.n	8003a2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a14:	2200      	movs	r2, #0
 8003a16:	6879      	ldr	r1, [r7, #4]
 8003a18:	f04f 30ff 	mov.w	r0, #4294967295
 8003a1c:	f000 f92f 	bl	8003c7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a20:	4a06      	ldr	r2, [pc, #24]	; (8003a3c <HAL_InitTick+0x5c>)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003a26:	2300      	movs	r3, #0
 8003a28:	e000      	b.n	8003a2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3708      	adds	r7, #8
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	20000008 	.word	0x20000008
 8003a38:	20000010 	.word	0x20000010
 8003a3c:	2000000c 	.word	0x2000000c

08003a40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a40:	b480      	push	{r7}
 8003a42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a44:	4b06      	ldr	r3, [pc, #24]	; (8003a60 <HAL_IncTick+0x20>)
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	461a      	mov	r2, r3
 8003a4a:	4b06      	ldr	r3, [pc, #24]	; (8003a64 <HAL_IncTick+0x24>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4413      	add	r3, r2
 8003a50:	4a04      	ldr	r2, [pc, #16]	; (8003a64 <HAL_IncTick+0x24>)
 8003a52:	6013      	str	r3, [r2, #0]
}
 8003a54:	bf00      	nop
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop
 8003a60:	20000010 	.word	0x20000010
 8003a64:	20003748 	.word	0x20003748

08003a68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	af00      	add	r7, sp, #0
  return uwTick;
 8003a6c:	4b03      	ldr	r3, [pc, #12]	; (8003a7c <HAL_GetTick+0x14>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	20003748 	.word	0x20003748

08003a80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a88:	f7ff ffee 	bl	8003a68 <HAL_GetTick>
 8003a8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a98:	d005      	beq.n	8003aa6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a9a:	4b0a      	ldr	r3, [pc, #40]	; (8003ac4 <HAL_Delay+0x44>)
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003aa6:	bf00      	nop
 8003aa8:	f7ff ffde 	bl	8003a68 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	68fa      	ldr	r2, [r7, #12]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d8f7      	bhi.n	8003aa8 <HAL_Delay+0x28>
  {
  }
}
 8003ab8:	bf00      	nop
 8003aba:	bf00      	nop
 8003abc:	3710      	adds	r7, #16
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	20000010 	.word	0x20000010

08003ac8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b085      	sub	sp, #20
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f003 0307 	and.w	r3, r3, #7
 8003ad6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ad8:	4b0c      	ldr	r3, [pc, #48]	; (8003b0c <__NVIC_SetPriorityGrouping+0x44>)
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ade:	68ba      	ldr	r2, [r7, #8]
 8003ae0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003af0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003af4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003af8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003afa:	4a04      	ldr	r2, [pc, #16]	; (8003b0c <__NVIC_SetPriorityGrouping+0x44>)
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	60d3      	str	r3, [r2, #12]
}
 8003b00:	bf00      	nop
 8003b02:	3714      	adds	r7, #20
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr
 8003b0c:	e000ed00 	.word	0xe000ed00

08003b10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b10:	b480      	push	{r7}
 8003b12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b14:	4b04      	ldr	r3, [pc, #16]	; (8003b28 <__NVIC_GetPriorityGrouping+0x18>)
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	0a1b      	lsrs	r3, r3, #8
 8003b1a:	f003 0307 	and.w	r3, r3, #7
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr
 8003b28:	e000ed00 	.word	0xe000ed00

08003b2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	4603      	mov	r3, r0
 8003b34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	db0b      	blt.n	8003b56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b3e:	79fb      	ldrb	r3, [r7, #7]
 8003b40:	f003 021f 	and.w	r2, r3, #31
 8003b44:	4907      	ldr	r1, [pc, #28]	; (8003b64 <__NVIC_EnableIRQ+0x38>)
 8003b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b4a:	095b      	lsrs	r3, r3, #5
 8003b4c:	2001      	movs	r0, #1
 8003b4e:	fa00 f202 	lsl.w	r2, r0, r2
 8003b52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b56:	bf00      	nop
 8003b58:	370c      	adds	r7, #12
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	e000e100 	.word	0xe000e100

08003b68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	4603      	mov	r3, r0
 8003b70:	6039      	str	r1, [r7, #0]
 8003b72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	db0a      	blt.n	8003b92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	b2da      	uxtb	r2, r3
 8003b80:	490c      	ldr	r1, [pc, #48]	; (8003bb4 <__NVIC_SetPriority+0x4c>)
 8003b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b86:	0112      	lsls	r2, r2, #4
 8003b88:	b2d2      	uxtb	r2, r2
 8003b8a:	440b      	add	r3, r1
 8003b8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b90:	e00a      	b.n	8003ba8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	b2da      	uxtb	r2, r3
 8003b96:	4908      	ldr	r1, [pc, #32]	; (8003bb8 <__NVIC_SetPriority+0x50>)
 8003b98:	79fb      	ldrb	r3, [r7, #7]
 8003b9a:	f003 030f 	and.w	r3, r3, #15
 8003b9e:	3b04      	subs	r3, #4
 8003ba0:	0112      	lsls	r2, r2, #4
 8003ba2:	b2d2      	uxtb	r2, r2
 8003ba4:	440b      	add	r3, r1
 8003ba6:	761a      	strb	r2, [r3, #24]
}
 8003ba8:	bf00      	nop
 8003baa:	370c      	adds	r7, #12
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr
 8003bb4:	e000e100 	.word	0xe000e100
 8003bb8:	e000ed00 	.word	0xe000ed00

08003bbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b089      	sub	sp, #36	; 0x24
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	60b9      	str	r1, [r7, #8]
 8003bc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f003 0307 	and.w	r3, r3, #7
 8003bce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	f1c3 0307 	rsb	r3, r3, #7
 8003bd6:	2b04      	cmp	r3, #4
 8003bd8:	bf28      	it	cs
 8003bda:	2304      	movcs	r3, #4
 8003bdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	3304      	adds	r3, #4
 8003be2:	2b06      	cmp	r3, #6
 8003be4:	d902      	bls.n	8003bec <NVIC_EncodePriority+0x30>
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	3b03      	subs	r3, #3
 8003bea:	e000      	b.n	8003bee <NVIC_EncodePriority+0x32>
 8003bec:	2300      	movs	r3, #0
 8003bee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfa:	43da      	mvns	r2, r3
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	401a      	ands	r2, r3
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c04:	f04f 31ff 	mov.w	r1, #4294967295
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c0e:	43d9      	mvns	r1, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c14:	4313      	orrs	r3, r2
         );
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3724      	adds	r7, #36	; 0x24
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
	...

08003c24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b082      	sub	sp, #8
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c34:	d301      	bcc.n	8003c3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c36:	2301      	movs	r3, #1
 8003c38:	e00f      	b.n	8003c5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c3a:	4a0a      	ldr	r2, [pc, #40]	; (8003c64 <SysTick_Config+0x40>)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	3b01      	subs	r3, #1
 8003c40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c42:	210f      	movs	r1, #15
 8003c44:	f04f 30ff 	mov.w	r0, #4294967295
 8003c48:	f7ff ff8e 	bl	8003b68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c4c:	4b05      	ldr	r3, [pc, #20]	; (8003c64 <SysTick_Config+0x40>)
 8003c4e:	2200      	movs	r2, #0
 8003c50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c52:	4b04      	ldr	r3, [pc, #16]	; (8003c64 <SysTick_Config+0x40>)
 8003c54:	2207      	movs	r2, #7
 8003c56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3708      	adds	r7, #8
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	e000e010 	.word	0xe000e010

08003c68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b082      	sub	sp, #8
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f7ff ff29 	bl	8003ac8 <__NVIC_SetPriorityGrouping>
}
 8003c76:	bf00      	nop
 8003c78:	3708      	adds	r7, #8
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b086      	sub	sp, #24
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	4603      	mov	r3, r0
 8003c86:	60b9      	str	r1, [r7, #8]
 8003c88:	607a      	str	r2, [r7, #4]
 8003c8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c90:	f7ff ff3e 	bl	8003b10 <__NVIC_GetPriorityGrouping>
 8003c94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	68b9      	ldr	r1, [r7, #8]
 8003c9a:	6978      	ldr	r0, [r7, #20]
 8003c9c:	f7ff ff8e 	bl	8003bbc <NVIC_EncodePriority>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ca6:	4611      	mov	r1, r2
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f7ff ff5d 	bl	8003b68 <__NVIC_SetPriority>
}
 8003cae:	bf00      	nop
 8003cb0:	3718      	adds	r7, #24
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}

08003cb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cb6:	b580      	push	{r7, lr}
 8003cb8:	b082      	sub	sp, #8
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f7ff ff31 	bl	8003b2c <__NVIC_EnableIRQ>
}
 8003cca:	bf00      	nop
 8003ccc:	3708      	adds	r7, #8
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}

08003cd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003cd2:	b580      	push	{r7, lr}
 8003cd4:	b082      	sub	sp, #8
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f7ff ffa2 	bl	8003c24 <SysTick_Config>
 8003ce0:	4603      	mov	r3, r0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3708      	adds	r7, #8
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
	...

08003cec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b086      	sub	sp, #24
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003cf8:	f7ff feb6 	bl	8003a68 <HAL_GetTick>
 8003cfc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d101      	bne.n	8003d08 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e099      	b.n	8003e3c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2202      	movs	r2, #2
 8003d0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f022 0201 	bic.w	r2, r2, #1
 8003d26:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d28:	e00f      	b.n	8003d4a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d2a:	f7ff fe9d 	bl	8003a68 <HAL_GetTick>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	2b05      	cmp	r3, #5
 8003d36:	d908      	bls.n	8003d4a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2220      	movs	r2, #32
 8003d3c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2203      	movs	r2, #3
 8003d42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e078      	b.n	8003e3c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0301 	and.w	r3, r3, #1
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d1e8      	bne.n	8003d2a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003d60:	697a      	ldr	r2, [r7, #20]
 8003d62:	4b38      	ldr	r3, [pc, #224]	; (8003e44 <HAL_DMA_Init+0x158>)
 8003d64:	4013      	ands	r3, r2
 8003d66:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685a      	ldr	r2, [r3, #4]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d76:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	691b      	ldr	r3, [r3, #16]
 8003d7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	699b      	ldr	r3, [r3, #24]
 8003d88:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a1b      	ldr	r3, [r3, #32]
 8003d94:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d96:	697a      	ldr	r2, [r7, #20]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da0:	2b04      	cmp	r3, #4
 8003da2:	d107      	bne.n	8003db4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dac:	4313      	orrs	r3, r2
 8003dae:	697a      	ldr	r2, [r7, #20]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	697a      	ldr	r2, [r7, #20]
 8003dba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	695b      	ldr	r3, [r3, #20]
 8003dc2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	f023 0307 	bic.w	r3, r3, #7
 8003dca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd0:	697a      	ldr	r2, [r7, #20]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dda:	2b04      	cmp	r3, #4
 8003ddc:	d117      	bne.n	8003e0e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de2:	697a      	ldr	r2, [r7, #20]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d00e      	beq.n	8003e0e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f000 fb01 	bl	80043f8 <DMA_CheckFifoParam>
 8003df6:	4603      	mov	r3, r0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d008      	beq.n	8003e0e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2240      	movs	r2, #64	; 0x40
 8003e00:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2201      	movs	r2, #1
 8003e06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e016      	b.n	8003e3c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	697a      	ldr	r2, [r7, #20]
 8003e14:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 fab8 	bl	800438c <DMA_CalcBaseAndBitshift>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e24:	223f      	movs	r2, #63	; 0x3f
 8003e26:	409a      	lsls	r2, r3
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2201      	movs	r2, #1
 8003e36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003e3a:	2300      	movs	r3, #0
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3718      	adds	r7, #24
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	f010803f 	.word	0xf010803f

08003e48 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b086      	sub	sp, #24
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	60b9      	str	r1, [r7, #8]
 8003e52:	607a      	str	r2, [r7, #4]
 8003e54:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e56:	2300      	movs	r3, #0
 8003e58:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e5e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d101      	bne.n	8003e6e <HAL_DMA_Start_IT+0x26>
 8003e6a:	2302      	movs	r3, #2
 8003e6c:	e040      	b.n	8003ef0 <HAL_DMA_Start_IT+0xa8>
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2201      	movs	r2, #1
 8003e72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d12f      	bne.n	8003ee2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2202      	movs	r2, #2
 8003e86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	68b9      	ldr	r1, [r7, #8]
 8003e96:	68f8      	ldr	r0, [r7, #12]
 8003e98:	f000 fa4a 	bl	8004330 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ea0:	223f      	movs	r2, #63	; 0x3f
 8003ea2:	409a      	lsls	r2, r3
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f042 0216 	orr.w	r2, r2, #22
 8003eb6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d007      	beq.n	8003ed0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f042 0208 	orr.w	r2, r2, #8
 8003ece:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f042 0201 	orr.w	r2, r2, #1
 8003ede:	601a      	str	r2, [r3, #0]
 8003ee0:	e005      	b.n	8003eee <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003eea:	2302      	movs	r3, #2
 8003eec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003eee:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3718      	adds	r7, #24
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f04:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003f06:	f7ff fdaf 	bl	8003a68 <HAL_GetTick>
 8003f0a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	2b02      	cmp	r3, #2
 8003f16:	d008      	beq.n	8003f2a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2280      	movs	r2, #128	; 0x80
 8003f1c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e052      	b.n	8003fd0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f022 0216 	bic.w	r2, r2, #22
 8003f38:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	695a      	ldr	r2, [r3, #20]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f48:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d103      	bne.n	8003f5a <HAL_DMA_Abort+0x62>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d007      	beq.n	8003f6a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f022 0208 	bic.w	r2, r2, #8
 8003f68:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f022 0201 	bic.w	r2, r2, #1
 8003f78:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f7a:	e013      	b.n	8003fa4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f7c:	f7ff fd74 	bl	8003a68 <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	2b05      	cmp	r3, #5
 8003f88:	d90c      	bls.n	8003fa4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2220      	movs	r2, #32
 8003f8e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2203      	movs	r2, #3
 8003f94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e015      	b.n	8003fd0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0301 	and.w	r3, r3, #1
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d1e4      	bne.n	8003f7c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fb6:	223f      	movs	r2, #63	; 0x3f
 8003fb8:	409a      	lsls	r2, r3
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003fce:	2300      	movs	r3, #0
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3710      	adds	r7, #16
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d004      	beq.n	8003ff6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2280      	movs	r2, #128	; 0x80
 8003ff0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e00c      	b.n	8004010 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2205      	movs	r2, #5
 8003ffa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f022 0201 	bic.w	r2, r2, #1
 800400c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800400e:	2300      	movs	r3, #0
}
 8004010:	4618      	mov	r0, r3
 8004012:	370c      	adds	r7, #12
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr

0800401c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b086      	sub	sp, #24
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004024:	2300      	movs	r3, #0
 8004026:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004028:	4b92      	ldr	r3, [pc, #584]	; (8004274 <HAL_DMA_IRQHandler+0x258>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a92      	ldr	r2, [pc, #584]	; (8004278 <HAL_DMA_IRQHandler+0x25c>)
 800402e:	fba2 2303 	umull	r2, r3, r2, r3
 8004032:	0a9b      	lsrs	r3, r3, #10
 8004034:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800403a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004046:	2208      	movs	r2, #8
 8004048:	409a      	lsls	r2, r3
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	4013      	ands	r3, r2
 800404e:	2b00      	cmp	r3, #0
 8004050:	d01a      	beq.n	8004088 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0304 	and.w	r3, r3, #4
 800405c:	2b00      	cmp	r3, #0
 800405e:	d013      	beq.n	8004088 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f022 0204 	bic.w	r2, r2, #4
 800406e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004074:	2208      	movs	r2, #8
 8004076:	409a      	lsls	r2, r3
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004080:	f043 0201 	orr.w	r2, r3, #1
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800408c:	2201      	movs	r2, #1
 800408e:	409a      	lsls	r2, r3
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	4013      	ands	r3, r2
 8004094:	2b00      	cmp	r3, #0
 8004096:	d012      	beq.n	80040be <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00b      	beq.n	80040be <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040aa:	2201      	movs	r2, #1
 80040ac:	409a      	lsls	r2, r3
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040b6:	f043 0202 	orr.w	r2, r3, #2
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040c2:	2204      	movs	r2, #4
 80040c4:	409a      	lsls	r2, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	4013      	ands	r3, r2
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d012      	beq.n	80040f4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0302 	and.w	r3, r3, #2
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d00b      	beq.n	80040f4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040e0:	2204      	movs	r2, #4
 80040e2:	409a      	lsls	r2, r3
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ec:	f043 0204 	orr.w	r2, r3, #4
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040f8:	2210      	movs	r2, #16
 80040fa:	409a      	lsls	r2, r3
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	4013      	ands	r3, r2
 8004100:	2b00      	cmp	r3, #0
 8004102:	d043      	beq.n	800418c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0308 	and.w	r3, r3, #8
 800410e:	2b00      	cmp	r3, #0
 8004110:	d03c      	beq.n	800418c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004116:	2210      	movs	r2, #16
 8004118:	409a      	lsls	r2, r3
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d018      	beq.n	800415e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d108      	bne.n	800414c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413e:	2b00      	cmp	r3, #0
 8004140:	d024      	beq.n	800418c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	4798      	blx	r3
 800414a:	e01f      	b.n	800418c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004150:	2b00      	cmp	r3, #0
 8004152:	d01b      	beq.n	800418c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	4798      	blx	r3
 800415c:	e016      	b.n	800418c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004168:	2b00      	cmp	r3, #0
 800416a:	d107      	bne.n	800417c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f022 0208 	bic.w	r2, r2, #8
 800417a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004180:	2b00      	cmp	r3, #0
 8004182:	d003      	beq.n	800418c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004190:	2220      	movs	r2, #32
 8004192:	409a      	lsls	r2, r3
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	4013      	ands	r3, r2
 8004198:	2b00      	cmp	r3, #0
 800419a:	f000 808e 	beq.w	80042ba <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0310 	and.w	r3, r3, #16
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	f000 8086 	beq.w	80042ba <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041b2:	2220      	movs	r2, #32
 80041b4:	409a      	lsls	r2, r3
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	2b05      	cmp	r3, #5
 80041c4:	d136      	bne.n	8004234 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f022 0216 	bic.w	r2, r2, #22
 80041d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	695a      	ldr	r2, [r3, #20]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041e4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d103      	bne.n	80041f6 <HAL_DMA_IRQHandler+0x1da>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d007      	beq.n	8004206 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f022 0208 	bic.w	r2, r2, #8
 8004204:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800420a:	223f      	movs	r2, #63	; 0x3f
 800420c:	409a      	lsls	r2, r3
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2201      	movs	r2, #1
 8004216:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004226:	2b00      	cmp	r3, #0
 8004228:	d07d      	beq.n	8004326 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	4798      	blx	r3
        }
        return;
 8004232:	e078      	b.n	8004326 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d01c      	beq.n	800427c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800424c:	2b00      	cmp	r3, #0
 800424e:	d108      	bne.n	8004262 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004254:	2b00      	cmp	r3, #0
 8004256:	d030      	beq.n	80042ba <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	4798      	blx	r3
 8004260:	e02b      	b.n	80042ba <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004266:	2b00      	cmp	r3, #0
 8004268:	d027      	beq.n	80042ba <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	4798      	blx	r3
 8004272:	e022      	b.n	80042ba <HAL_DMA_IRQHandler+0x29e>
 8004274:	20000008 	.word	0x20000008
 8004278:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004286:	2b00      	cmp	r3, #0
 8004288:	d10f      	bne.n	80042aa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f022 0210 	bic.w	r2, r2, #16
 8004298:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2201      	movs	r2, #1
 800429e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d003      	beq.n	80042ba <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d032      	beq.n	8004328 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042c6:	f003 0301 	and.w	r3, r3, #1
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d022      	beq.n	8004314 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2205      	movs	r2, #5
 80042d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f022 0201 	bic.w	r2, r2, #1
 80042e4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	3301      	adds	r3, #1
 80042ea:	60bb      	str	r3, [r7, #8]
 80042ec:	697a      	ldr	r2, [r7, #20]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d307      	bcc.n	8004302 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0301 	and.w	r3, r3, #1
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d1f2      	bne.n	80042e6 <HAL_DMA_IRQHandler+0x2ca>
 8004300:	e000      	b.n	8004304 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004302:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004318:	2b00      	cmp	r3, #0
 800431a:	d005      	beq.n	8004328 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	4798      	blx	r3
 8004324:	e000      	b.n	8004328 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004326:	bf00      	nop
    }
  }
}
 8004328:	3718      	adds	r7, #24
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop

08004330 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004330:	b480      	push	{r7}
 8004332:	b085      	sub	sp, #20
 8004334:	af00      	add	r7, sp, #0
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	60b9      	str	r1, [r7, #8]
 800433a:	607a      	str	r2, [r7, #4]
 800433c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800434c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	683a      	ldr	r2, [r7, #0]
 8004354:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	2b40      	cmp	r3, #64	; 0x40
 800435c:	d108      	bne.n	8004370 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68ba      	ldr	r2, [r7, #8]
 800436c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800436e:	e007      	b.n	8004380 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	68ba      	ldr	r2, [r7, #8]
 8004376:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	60da      	str	r2, [r3, #12]
}
 8004380:	bf00      	nop
 8004382:	3714      	adds	r7, #20
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800438c:	b480      	push	{r7}
 800438e:	b085      	sub	sp, #20
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	b2db      	uxtb	r3, r3
 800439a:	3b10      	subs	r3, #16
 800439c:	4a14      	ldr	r2, [pc, #80]	; (80043f0 <DMA_CalcBaseAndBitshift+0x64>)
 800439e:	fba2 2303 	umull	r2, r3, r2, r3
 80043a2:	091b      	lsrs	r3, r3, #4
 80043a4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80043a6:	4a13      	ldr	r2, [pc, #76]	; (80043f4 <DMA_CalcBaseAndBitshift+0x68>)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	4413      	add	r3, r2
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	461a      	mov	r2, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2b03      	cmp	r3, #3
 80043b8:	d909      	bls.n	80043ce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80043c2:	f023 0303 	bic.w	r3, r3, #3
 80043c6:	1d1a      	adds	r2, r3, #4
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	659a      	str	r2, [r3, #88]	; 0x58
 80043cc:	e007      	b.n	80043de <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80043d6:	f023 0303 	bic.w	r3, r3, #3
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3714      	adds	r7, #20
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	aaaaaaab 	.word	0xaaaaaaab
 80043f4:	0800e4fc 	.word	0x0800e4fc

080043f8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b085      	sub	sp, #20
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004400:	2300      	movs	r3, #0
 8004402:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004408:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	699b      	ldr	r3, [r3, #24]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d11f      	bne.n	8004452 <DMA_CheckFifoParam+0x5a>
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	2b03      	cmp	r3, #3
 8004416:	d856      	bhi.n	80044c6 <DMA_CheckFifoParam+0xce>
 8004418:	a201      	add	r2, pc, #4	; (adr r2, 8004420 <DMA_CheckFifoParam+0x28>)
 800441a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800441e:	bf00      	nop
 8004420:	08004431 	.word	0x08004431
 8004424:	08004443 	.word	0x08004443
 8004428:	08004431 	.word	0x08004431
 800442c:	080044c7 	.word	0x080044c7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004434:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004438:	2b00      	cmp	r3, #0
 800443a:	d046      	beq.n	80044ca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004440:	e043      	b.n	80044ca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004446:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800444a:	d140      	bne.n	80044ce <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004450:	e03d      	b.n	80044ce <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	699b      	ldr	r3, [r3, #24]
 8004456:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800445a:	d121      	bne.n	80044a0 <DMA_CheckFifoParam+0xa8>
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	2b03      	cmp	r3, #3
 8004460:	d837      	bhi.n	80044d2 <DMA_CheckFifoParam+0xda>
 8004462:	a201      	add	r2, pc, #4	; (adr r2, 8004468 <DMA_CheckFifoParam+0x70>)
 8004464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004468:	08004479 	.word	0x08004479
 800446c:	0800447f 	.word	0x0800447f
 8004470:	08004479 	.word	0x08004479
 8004474:	08004491 	.word	0x08004491
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	73fb      	strb	r3, [r7, #15]
      break;
 800447c:	e030      	b.n	80044e0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004482:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d025      	beq.n	80044d6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800448e:	e022      	b.n	80044d6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004494:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004498:	d11f      	bne.n	80044da <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800449e:	e01c      	b.n	80044da <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d903      	bls.n	80044ae <DMA_CheckFifoParam+0xb6>
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	2b03      	cmp	r3, #3
 80044aa:	d003      	beq.n	80044b4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80044ac:	e018      	b.n	80044e0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	73fb      	strb	r3, [r7, #15]
      break;
 80044b2:	e015      	b.n	80044e0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d00e      	beq.n	80044de <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	73fb      	strb	r3, [r7, #15]
      break;
 80044c4:	e00b      	b.n	80044de <DMA_CheckFifoParam+0xe6>
      break;
 80044c6:	bf00      	nop
 80044c8:	e00a      	b.n	80044e0 <DMA_CheckFifoParam+0xe8>
      break;
 80044ca:	bf00      	nop
 80044cc:	e008      	b.n	80044e0 <DMA_CheckFifoParam+0xe8>
      break;
 80044ce:	bf00      	nop
 80044d0:	e006      	b.n	80044e0 <DMA_CheckFifoParam+0xe8>
      break;
 80044d2:	bf00      	nop
 80044d4:	e004      	b.n	80044e0 <DMA_CheckFifoParam+0xe8>
      break;
 80044d6:	bf00      	nop
 80044d8:	e002      	b.n	80044e0 <DMA_CheckFifoParam+0xe8>
      break;   
 80044da:	bf00      	nop
 80044dc:	e000      	b.n	80044e0 <DMA_CheckFifoParam+0xe8>
      break;
 80044de:	bf00      	nop
    }
  } 
  
  return status; 
 80044e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3714      	adds	r7, #20
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr
 80044ee:	bf00      	nop

080044f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b089      	sub	sp, #36	; 0x24
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80044fa:	2300      	movs	r3, #0
 80044fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80044fe:	2300      	movs	r3, #0
 8004500:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004502:	2300      	movs	r3, #0
 8004504:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004506:	2300      	movs	r3, #0
 8004508:	61fb      	str	r3, [r7, #28]
 800450a:	e16b      	b.n	80047e4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800450c:	2201      	movs	r2, #1
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	fa02 f303 	lsl.w	r3, r2, r3
 8004514:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	697a      	ldr	r2, [r7, #20]
 800451c:	4013      	ands	r3, r2
 800451e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004520:	693a      	ldr	r2, [r7, #16]
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	429a      	cmp	r2, r3
 8004526:	f040 815a 	bne.w	80047de <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f003 0303 	and.w	r3, r3, #3
 8004532:	2b01      	cmp	r3, #1
 8004534:	d005      	beq.n	8004542 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800453e:	2b02      	cmp	r3, #2
 8004540:	d130      	bne.n	80045a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	005b      	lsls	r3, r3, #1
 800454c:	2203      	movs	r2, #3
 800454e:	fa02 f303 	lsl.w	r3, r2, r3
 8004552:	43db      	mvns	r3, r3
 8004554:	69ba      	ldr	r2, [r7, #24]
 8004556:	4013      	ands	r3, r2
 8004558:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	68da      	ldr	r2, [r3, #12]
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	005b      	lsls	r3, r3, #1
 8004562:	fa02 f303 	lsl.w	r3, r2, r3
 8004566:	69ba      	ldr	r2, [r7, #24]
 8004568:	4313      	orrs	r3, r2
 800456a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	69ba      	ldr	r2, [r7, #24]
 8004570:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004578:	2201      	movs	r2, #1
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	fa02 f303 	lsl.w	r3, r2, r3
 8004580:	43db      	mvns	r3, r3
 8004582:	69ba      	ldr	r2, [r7, #24]
 8004584:	4013      	ands	r3, r2
 8004586:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	091b      	lsrs	r3, r3, #4
 800458e:	f003 0201 	and.w	r2, r3, #1
 8004592:	69fb      	ldr	r3, [r7, #28]
 8004594:	fa02 f303 	lsl.w	r3, r2, r3
 8004598:	69ba      	ldr	r2, [r7, #24]
 800459a:	4313      	orrs	r3, r2
 800459c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	69ba      	ldr	r2, [r7, #24]
 80045a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	f003 0303 	and.w	r3, r3, #3
 80045ac:	2b03      	cmp	r3, #3
 80045ae:	d017      	beq.n	80045e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	005b      	lsls	r3, r3, #1
 80045ba:	2203      	movs	r2, #3
 80045bc:	fa02 f303 	lsl.w	r3, r2, r3
 80045c0:	43db      	mvns	r3, r3
 80045c2:	69ba      	ldr	r2, [r7, #24]
 80045c4:	4013      	ands	r3, r2
 80045c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	689a      	ldr	r2, [r3, #8]
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	005b      	lsls	r3, r3, #1
 80045d0:	fa02 f303 	lsl.w	r3, r2, r3
 80045d4:	69ba      	ldr	r2, [r7, #24]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	69ba      	ldr	r2, [r7, #24]
 80045de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f003 0303 	and.w	r3, r3, #3
 80045e8:	2b02      	cmp	r3, #2
 80045ea:	d123      	bne.n	8004634 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	08da      	lsrs	r2, r3, #3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	3208      	adds	r2, #8
 80045f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	f003 0307 	and.w	r3, r3, #7
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	220f      	movs	r2, #15
 8004604:	fa02 f303 	lsl.w	r3, r2, r3
 8004608:	43db      	mvns	r3, r3
 800460a:	69ba      	ldr	r2, [r7, #24]
 800460c:	4013      	ands	r3, r2
 800460e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	691a      	ldr	r2, [r3, #16]
 8004614:	69fb      	ldr	r3, [r7, #28]
 8004616:	f003 0307 	and.w	r3, r3, #7
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	fa02 f303 	lsl.w	r3, r2, r3
 8004620:	69ba      	ldr	r2, [r7, #24]
 8004622:	4313      	orrs	r3, r2
 8004624:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004626:	69fb      	ldr	r3, [r7, #28]
 8004628:	08da      	lsrs	r2, r3, #3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	3208      	adds	r2, #8
 800462e:	69b9      	ldr	r1, [r7, #24]
 8004630:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	005b      	lsls	r3, r3, #1
 800463e:	2203      	movs	r2, #3
 8004640:	fa02 f303 	lsl.w	r3, r2, r3
 8004644:	43db      	mvns	r3, r3
 8004646:	69ba      	ldr	r2, [r7, #24]
 8004648:	4013      	ands	r3, r2
 800464a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	f003 0203 	and.w	r2, r3, #3
 8004654:	69fb      	ldr	r3, [r7, #28]
 8004656:	005b      	lsls	r3, r3, #1
 8004658:	fa02 f303 	lsl.w	r3, r2, r3
 800465c:	69ba      	ldr	r2, [r7, #24]
 800465e:	4313      	orrs	r3, r2
 8004660:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	69ba      	ldr	r2, [r7, #24]
 8004666:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004670:	2b00      	cmp	r3, #0
 8004672:	f000 80b4 	beq.w	80047de <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004676:	2300      	movs	r3, #0
 8004678:	60fb      	str	r3, [r7, #12]
 800467a:	4b60      	ldr	r3, [pc, #384]	; (80047fc <HAL_GPIO_Init+0x30c>)
 800467c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800467e:	4a5f      	ldr	r2, [pc, #380]	; (80047fc <HAL_GPIO_Init+0x30c>)
 8004680:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004684:	6453      	str	r3, [r2, #68]	; 0x44
 8004686:	4b5d      	ldr	r3, [pc, #372]	; (80047fc <HAL_GPIO_Init+0x30c>)
 8004688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800468a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800468e:	60fb      	str	r3, [r7, #12]
 8004690:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004692:	4a5b      	ldr	r2, [pc, #364]	; (8004800 <HAL_GPIO_Init+0x310>)
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	089b      	lsrs	r3, r3, #2
 8004698:	3302      	adds	r3, #2
 800469a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800469e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	f003 0303 	and.w	r3, r3, #3
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	220f      	movs	r2, #15
 80046aa:	fa02 f303 	lsl.w	r3, r2, r3
 80046ae:	43db      	mvns	r3, r3
 80046b0:	69ba      	ldr	r2, [r7, #24]
 80046b2:	4013      	ands	r3, r2
 80046b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a52      	ldr	r2, [pc, #328]	; (8004804 <HAL_GPIO_Init+0x314>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d02b      	beq.n	8004716 <HAL_GPIO_Init+0x226>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a51      	ldr	r2, [pc, #324]	; (8004808 <HAL_GPIO_Init+0x318>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d025      	beq.n	8004712 <HAL_GPIO_Init+0x222>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a50      	ldr	r2, [pc, #320]	; (800480c <HAL_GPIO_Init+0x31c>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d01f      	beq.n	800470e <HAL_GPIO_Init+0x21e>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a4f      	ldr	r2, [pc, #316]	; (8004810 <HAL_GPIO_Init+0x320>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d019      	beq.n	800470a <HAL_GPIO_Init+0x21a>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a4e      	ldr	r2, [pc, #312]	; (8004814 <HAL_GPIO_Init+0x324>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d013      	beq.n	8004706 <HAL_GPIO_Init+0x216>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a4d      	ldr	r2, [pc, #308]	; (8004818 <HAL_GPIO_Init+0x328>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d00d      	beq.n	8004702 <HAL_GPIO_Init+0x212>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a4c      	ldr	r2, [pc, #304]	; (800481c <HAL_GPIO_Init+0x32c>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d007      	beq.n	80046fe <HAL_GPIO_Init+0x20e>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a4b      	ldr	r2, [pc, #300]	; (8004820 <HAL_GPIO_Init+0x330>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d101      	bne.n	80046fa <HAL_GPIO_Init+0x20a>
 80046f6:	2307      	movs	r3, #7
 80046f8:	e00e      	b.n	8004718 <HAL_GPIO_Init+0x228>
 80046fa:	2308      	movs	r3, #8
 80046fc:	e00c      	b.n	8004718 <HAL_GPIO_Init+0x228>
 80046fe:	2306      	movs	r3, #6
 8004700:	e00a      	b.n	8004718 <HAL_GPIO_Init+0x228>
 8004702:	2305      	movs	r3, #5
 8004704:	e008      	b.n	8004718 <HAL_GPIO_Init+0x228>
 8004706:	2304      	movs	r3, #4
 8004708:	e006      	b.n	8004718 <HAL_GPIO_Init+0x228>
 800470a:	2303      	movs	r3, #3
 800470c:	e004      	b.n	8004718 <HAL_GPIO_Init+0x228>
 800470e:	2302      	movs	r3, #2
 8004710:	e002      	b.n	8004718 <HAL_GPIO_Init+0x228>
 8004712:	2301      	movs	r3, #1
 8004714:	e000      	b.n	8004718 <HAL_GPIO_Init+0x228>
 8004716:	2300      	movs	r3, #0
 8004718:	69fa      	ldr	r2, [r7, #28]
 800471a:	f002 0203 	and.w	r2, r2, #3
 800471e:	0092      	lsls	r2, r2, #2
 8004720:	4093      	lsls	r3, r2
 8004722:	69ba      	ldr	r2, [r7, #24]
 8004724:	4313      	orrs	r3, r2
 8004726:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004728:	4935      	ldr	r1, [pc, #212]	; (8004800 <HAL_GPIO_Init+0x310>)
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	089b      	lsrs	r3, r3, #2
 800472e:	3302      	adds	r3, #2
 8004730:	69ba      	ldr	r2, [r7, #24]
 8004732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004736:	4b3b      	ldr	r3, [pc, #236]	; (8004824 <HAL_GPIO_Init+0x334>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	43db      	mvns	r3, r3
 8004740:	69ba      	ldr	r2, [r7, #24]
 8004742:	4013      	ands	r3, r2
 8004744:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d003      	beq.n	800475a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004752:	69ba      	ldr	r2, [r7, #24]
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	4313      	orrs	r3, r2
 8004758:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800475a:	4a32      	ldr	r2, [pc, #200]	; (8004824 <HAL_GPIO_Init+0x334>)
 800475c:	69bb      	ldr	r3, [r7, #24]
 800475e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004760:	4b30      	ldr	r3, [pc, #192]	; (8004824 <HAL_GPIO_Init+0x334>)
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	43db      	mvns	r3, r3
 800476a:	69ba      	ldr	r2, [r7, #24]
 800476c:	4013      	ands	r3, r2
 800476e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004778:	2b00      	cmp	r3, #0
 800477a:	d003      	beq.n	8004784 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800477c:	69ba      	ldr	r2, [r7, #24]
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	4313      	orrs	r3, r2
 8004782:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004784:	4a27      	ldr	r2, [pc, #156]	; (8004824 <HAL_GPIO_Init+0x334>)
 8004786:	69bb      	ldr	r3, [r7, #24]
 8004788:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800478a:	4b26      	ldr	r3, [pc, #152]	; (8004824 <HAL_GPIO_Init+0x334>)
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	43db      	mvns	r3, r3
 8004794:	69ba      	ldr	r2, [r7, #24]
 8004796:	4013      	ands	r3, r2
 8004798:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d003      	beq.n	80047ae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80047a6:	69ba      	ldr	r2, [r7, #24]
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80047ae:	4a1d      	ldr	r2, [pc, #116]	; (8004824 <HAL_GPIO_Init+0x334>)
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80047b4:	4b1b      	ldr	r3, [pc, #108]	; (8004824 <HAL_GPIO_Init+0x334>)
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	43db      	mvns	r3, r3
 80047be:	69ba      	ldr	r2, [r7, #24]
 80047c0:	4013      	ands	r3, r2
 80047c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d003      	beq.n	80047d8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80047d0:	69ba      	ldr	r2, [r7, #24]
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80047d8:	4a12      	ldr	r2, [pc, #72]	; (8004824 <HAL_GPIO_Init+0x334>)
 80047da:	69bb      	ldr	r3, [r7, #24]
 80047dc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80047de:	69fb      	ldr	r3, [r7, #28]
 80047e0:	3301      	adds	r3, #1
 80047e2:	61fb      	str	r3, [r7, #28]
 80047e4:	69fb      	ldr	r3, [r7, #28]
 80047e6:	2b0f      	cmp	r3, #15
 80047e8:	f67f ae90 	bls.w	800450c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80047ec:	bf00      	nop
 80047ee:	bf00      	nop
 80047f0:	3724      	adds	r7, #36	; 0x24
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr
 80047fa:	bf00      	nop
 80047fc:	40023800 	.word	0x40023800
 8004800:	40013800 	.word	0x40013800
 8004804:	40020000 	.word	0x40020000
 8004808:	40020400 	.word	0x40020400
 800480c:	40020800 	.word	0x40020800
 8004810:	40020c00 	.word	0x40020c00
 8004814:	40021000 	.word	0x40021000
 8004818:	40021400 	.word	0x40021400
 800481c:	40021800 	.word	0x40021800
 8004820:	40021c00 	.word	0x40021c00
 8004824:	40013c00 	.word	0x40013c00

08004828 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004828:	b480      	push	{r7}
 800482a:	b085      	sub	sp, #20
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	460b      	mov	r3, r1
 8004832:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	691a      	ldr	r2, [r3, #16]
 8004838:	887b      	ldrh	r3, [r7, #2]
 800483a:	4013      	ands	r3, r2
 800483c:	2b00      	cmp	r3, #0
 800483e:	d002      	beq.n	8004846 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004840:	2301      	movs	r3, #1
 8004842:	73fb      	strb	r3, [r7, #15]
 8004844:	e001      	b.n	800484a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004846:	2300      	movs	r3, #0
 8004848:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800484a:	7bfb      	ldrb	r3, [r7, #15]
}
 800484c:	4618      	mov	r0, r3
 800484e:	3714      	adds	r7, #20
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr

08004858 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004858:	b480      	push	{r7}
 800485a:	b083      	sub	sp, #12
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	460b      	mov	r3, r1
 8004862:	807b      	strh	r3, [r7, #2]
 8004864:	4613      	mov	r3, r2
 8004866:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004868:	787b      	ldrb	r3, [r7, #1]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d003      	beq.n	8004876 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800486e:	887a      	ldrh	r2, [r7, #2]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004874:	e003      	b.n	800487e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004876:	887b      	ldrh	r3, [r7, #2]
 8004878:	041a      	lsls	r2, r3, #16
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	619a      	str	r2, [r3, #24]
}
 800487e:	bf00      	nop
 8004880:	370c      	adds	r7, #12
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
	...

0800488c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
 8004892:	4603      	mov	r3, r0
 8004894:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004896:	4b08      	ldr	r3, [pc, #32]	; (80048b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004898:	695a      	ldr	r2, [r3, #20]
 800489a:	88fb      	ldrh	r3, [r7, #6]
 800489c:	4013      	ands	r3, r2
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d006      	beq.n	80048b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80048a2:	4a05      	ldr	r2, [pc, #20]	; (80048b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80048a4:	88fb      	ldrh	r3, [r7, #6]
 80048a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80048a8:	88fb      	ldrh	r3, [r7, #6]
 80048aa:	4618      	mov	r0, r3
 80048ac:	f7fe f944 	bl	8002b38 <HAL_GPIO_EXTI_Callback>
  }
}
 80048b0:	bf00      	nop
 80048b2:	3708      	adds	r7, #8
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	40013c00 	.word	0x40013c00

080048bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b084      	sub	sp, #16
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d101      	bne.n	80048ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e12b      	b.n	8004b26 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d106      	bne.n	80048e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f7fe fd6a 	bl	80033bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2224      	movs	r2, #36	; 0x24
 80048ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f022 0201 	bic.w	r2, r2, #1
 80048fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800490e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800491e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004920:	f001 fbd8 	bl	80060d4 <HAL_RCC_GetPCLK1Freq>
 8004924:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	4a81      	ldr	r2, [pc, #516]	; (8004b30 <HAL_I2C_Init+0x274>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d807      	bhi.n	8004940 <HAL_I2C_Init+0x84>
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	4a80      	ldr	r2, [pc, #512]	; (8004b34 <HAL_I2C_Init+0x278>)
 8004934:	4293      	cmp	r3, r2
 8004936:	bf94      	ite	ls
 8004938:	2301      	movls	r3, #1
 800493a:	2300      	movhi	r3, #0
 800493c:	b2db      	uxtb	r3, r3
 800493e:	e006      	b.n	800494e <HAL_I2C_Init+0x92>
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	4a7d      	ldr	r2, [pc, #500]	; (8004b38 <HAL_I2C_Init+0x27c>)
 8004944:	4293      	cmp	r3, r2
 8004946:	bf94      	ite	ls
 8004948:	2301      	movls	r3, #1
 800494a:	2300      	movhi	r3, #0
 800494c:	b2db      	uxtb	r3, r3
 800494e:	2b00      	cmp	r3, #0
 8004950:	d001      	beq.n	8004956 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e0e7      	b.n	8004b26 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	4a78      	ldr	r2, [pc, #480]	; (8004b3c <HAL_I2C_Init+0x280>)
 800495a:	fba2 2303 	umull	r2, r3, r2, r3
 800495e:	0c9b      	lsrs	r3, r3, #18
 8004960:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	68ba      	ldr	r2, [r7, #8]
 8004972:	430a      	orrs	r2, r1
 8004974:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	6a1b      	ldr	r3, [r3, #32]
 800497c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	4a6a      	ldr	r2, [pc, #424]	; (8004b30 <HAL_I2C_Init+0x274>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d802      	bhi.n	8004990 <HAL_I2C_Init+0xd4>
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	3301      	adds	r3, #1
 800498e:	e009      	b.n	80049a4 <HAL_I2C_Init+0xe8>
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004996:	fb02 f303 	mul.w	r3, r2, r3
 800499a:	4a69      	ldr	r2, [pc, #420]	; (8004b40 <HAL_I2C_Init+0x284>)
 800499c:	fba2 2303 	umull	r2, r3, r2, r3
 80049a0:	099b      	lsrs	r3, r3, #6
 80049a2:	3301      	adds	r3, #1
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	6812      	ldr	r2, [r2, #0]
 80049a8:	430b      	orrs	r3, r1
 80049aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	69db      	ldr	r3, [r3, #28]
 80049b2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80049b6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	495c      	ldr	r1, [pc, #368]	; (8004b30 <HAL_I2C_Init+0x274>)
 80049c0:	428b      	cmp	r3, r1
 80049c2:	d819      	bhi.n	80049f8 <HAL_I2C_Init+0x13c>
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	1e59      	subs	r1, r3, #1
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	005b      	lsls	r3, r3, #1
 80049ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80049d2:	1c59      	adds	r1, r3, #1
 80049d4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80049d8:	400b      	ands	r3, r1
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d00a      	beq.n	80049f4 <HAL_I2C_Init+0x138>
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	1e59      	subs	r1, r3, #1
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	005b      	lsls	r3, r3, #1
 80049e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80049ec:	3301      	adds	r3, #1
 80049ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049f2:	e051      	b.n	8004a98 <HAL_I2C_Init+0x1dc>
 80049f4:	2304      	movs	r3, #4
 80049f6:	e04f      	b.n	8004a98 <HAL_I2C_Init+0x1dc>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d111      	bne.n	8004a24 <HAL_I2C_Init+0x168>
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	1e58      	subs	r0, r3, #1
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6859      	ldr	r1, [r3, #4]
 8004a08:	460b      	mov	r3, r1
 8004a0a:	005b      	lsls	r3, r3, #1
 8004a0c:	440b      	add	r3, r1
 8004a0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a12:	3301      	adds	r3, #1
 8004a14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	bf0c      	ite	eq
 8004a1c:	2301      	moveq	r3, #1
 8004a1e:	2300      	movne	r3, #0
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	e012      	b.n	8004a4a <HAL_I2C_Init+0x18e>
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	1e58      	subs	r0, r3, #1
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6859      	ldr	r1, [r3, #4]
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	440b      	add	r3, r1
 8004a32:	0099      	lsls	r1, r3, #2
 8004a34:	440b      	add	r3, r1
 8004a36:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	bf0c      	ite	eq
 8004a44:	2301      	moveq	r3, #1
 8004a46:	2300      	movne	r3, #0
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d001      	beq.n	8004a52 <HAL_I2C_Init+0x196>
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e022      	b.n	8004a98 <HAL_I2C_Init+0x1dc>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d10e      	bne.n	8004a78 <HAL_I2C_Init+0x1bc>
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	1e58      	subs	r0, r3, #1
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6859      	ldr	r1, [r3, #4]
 8004a62:	460b      	mov	r3, r1
 8004a64:	005b      	lsls	r3, r3, #1
 8004a66:	440b      	add	r3, r1
 8004a68:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a6c:	3301      	adds	r3, #1
 8004a6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a76:	e00f      	b.n	8004a98 <HAL_I2C_Init+0x1dc>
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	1e58      	subs	r0, r3, #1
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6859      	ldr	r1, [r3, #4]
 8004a80:	460b      	mov	r3, r1
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	440b      	add	r3, r1
 8004a86:	0099      	lsls	r1, r3, #2
 8004a88:	440b      	add	r3, r1
 8004a8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a8e:	3301      	adds	r3, #1
 8004a90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a98:	6879      	ldr	r1, [r7, #4]
 8004a9a:	6809      	ldr	r1, [r1, #0]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	69da      	ldr	r2, [r3, #28]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a1b      	ldr	r3, [r3, #32]
 8004ab2:	431a      	orrs	r2, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	430a      	orrs	r2, r1
 8004aba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004ac6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	6911      	ldr	r1, [r2, #16]
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	68d2      	ldr	r2, [r2, #12]
 8004ad2:	4311      	orrs	r1, r2
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	6812      	ldr	r2, [r2, #0]
 8004ad8:	430b      	orrs	r3, r1
 8004ada:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	695a      	ldr	r2, [r3, #20]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	699b      	ldr	r3, [r3, #24]
 8004aee:	431a      	orrs	r2, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	430a      	orrs	r2, r1
 8004af6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f042 0201 	orr.w	r2, r2, #1
 8004b06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2220      	movs	r2, #32
 8004b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3710      	adds	r7, #16
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	000186a0 	.word	0x000186a0
 8004b34:	001e847f 	.word	0x001e847f
 8004b38:	003d08ff 	.word	0x003d08ff
 8004b3c:	431bde83 	.word	0x431bde83
 8004b40:	10624dd3 	.word	0x10624dd3

08004b44 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b088      	sub	sp, #32
 8004b48:	af02      	add	r7, sp, #8
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	4608      	mov	r0, r1
 8004b4e:	4611      	mov	r1, r2
 8004b50:	461a      	mov	r2, r3
 8004b52:	4603      	mov	r3, r0
 8004b54:	817b      	strh	r3, [r7, #10]
 8004b56:	460b      	mov	r3, r1
 8004b58:	813b      	strh	r3, [r7, #8]
 8004b5a:	4613      	mov	r3, r2
 8004b5c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004b5e:	f7fe ff83 	bl	8003a68 <HAL_GetTick>
 8004b62:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	2b20      	cmp	r3, #32
 8004b6e:	f040 80d9 	bne.w	8004d24 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	9300      	str	r3, [sp, #0]
 8004b76:	2319      	movs	r3, #25
 8004b78:	2201      	movs	r2, #1
 8004b7a:	496d      	ldr	r1, [pc, #436]	; (8004d30 <HAL_I2C_Mem_Write+0x1ec>)
 8004b7c:	68f8      	ldr	r0, [r7, #12]
 8004b7e:	f000 fc7f 	bl	8005480 <I2C_WaitOnFlagUntilTimeout>
 8004b82:	4603      	mov	r3, r0
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d001      	beq.n	8004b8c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004b88:	2302      	movs	r3, #2
 8004b8a:	e0cc      	b.n	8004d26 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d101      	bne.n	8004b9a <HAL_I2C_Mem_Write+0x56>
 8004b96:	2302      	movs	r3, #2
 8004b98:	e0c5      	b.n	8004d26 <HAL_I2C_Mem_Write+0x1e2>
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 0301 	and.w	r3, r3, #1
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d007      	beq.n	8004bc0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f042 0201 	orr.w	r2, r2, #1
 8004bbe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2221      	movs	r2, #33	; 0x21
 8004bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2240      	movs	r2, #64	; 0x40
 8004bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2200      	movs	r2, #0
 8004be4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	6a3a      	ldr	r2, [r7, #32]
 8004bea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004bf0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bf6:	b29a      	uxth	r2, r3
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	4a4d      	ldr	r2, [pc, #308]	; (8004d34 <HAL_I2C_Mem_Write+0x1f0>)
 8004c00:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004c02:	88f8      	ldrh	r0, [r7, #6]
 8004c04:	893a      	ldrh	r2, [r7, #8]
 8004c06:	8979      	ldrh	r1, [r7, #10]
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	9301      	str	r3, [sp, #4]
 8004c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c0e:	9300      	str	r3, [sp, #0]
 8004c10:	4603      	mov	r3, r0
 8004c12:	68f8      	ldr	r0, [r7, #12]
 8004c14:	f000 fab6 	bl	8005184 <I2C_RequestMemoryWrite>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d052      	beq.n	8004cc4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e081      	b.n	8004d26 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c22:	697a      	ldr	r2, [r7, #20]
 8004c24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c26:	68f8      	ldr	r0, [r7, #12]
 8004c28:	f000 fd00 	bl	800562c <I2C_WaitOnTXEFlagUntilTimeout>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00d      	beq.n	8004c4e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c36:	2b04      	cmp	r3, #4
 8004c38:	d107      	bne.n	8004c4a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c48:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e06b      	b.n	8004d26 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c52:	781a      	ldrb	r2, [r3, #0]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5e:	1c5a      	adds	r2, r3, #1
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c68:	3b01      	subs	r3, #1
 8004c6a:	b29a      	uxth	r2, r3
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	3b01      	subs	r3, #1
 8004c78:	b29a      	uxth	r2, r3
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	695b      	ldr	r3, [r3, #20]
 8004c84:	f003 0304 	and.w	r3, r3, #4
 8004c88:	2b04      	cmp	r3, #4
 8004c8a:	d11b      	bne.n	8004cc4 <HAL_I2C_Mem_Write+0x180>
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d017      	beq.n	8004cc4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c98:	781a      	ldrb	r2, [r3, #0]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca4:	1c5a      	adds	r2, r3, #1
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cae:	3b01      	subs	r3, #1
 8004cb0:	b29a      	uxth	r2, r3
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	3b01      	subs	r3, #1
 8004cbe:	b29a      	uxth	r2, r3
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d1aa      	bne.n	8004c22 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ccc:	697a      	ldr	r2, [r7, #20]
 8004cce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004cd0:	68f8      	ldr	r0, [r7, #12]
 8004cd2:	f000 fcec 	bl	80056ae <I2C_WaitOnBTFFlagUntilTimeout>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d00d      	beq.n	8004cf8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce0:	2b04      	cmp	r3, #4
 8004ce2:	d107      	bne.n	8004cf4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cf2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e016      	b.n	8004d26 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2220      	movs	r2, #32
 8004d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004d20:	2300      	movs	r3, #0
 8004d22:	e000      	b.n	8004d26 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004d24:	2302      	movs	r3, #2
  }
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3718      	adds	r7, #24
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}
 8004d2e:	bf00      	nop
 8004d30:	00100002 	.word	0x00100002
 8004d34:	ffff0000 	.word	0xffff0000

08004d38 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b08c      	sub	sp, #48	; 0x30
 8004d3c:	af02      	add	r7, sp, #8
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	4608      	mov	r0, r1
 8004d42:	4611      	mov	r1, r2
 8004d44:	461a      	mov	r2, r3
 8004d46:	4603      	mov	r3, r0
 8004d48:	817b      	strh	r3, [r7, #10]
 8004d4a:	460b      	mov	r3, r1
 8004d4c:	813b      	strh	r3, [r7, #8]
 8004d4e:	4613      	mov	r3, r2
 8004d50:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004d52:	f7fe fe89 	bl	8003a68 <HAL_GetTick>
 8004d56:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	2b20      	cmp	r3, #32
 8004d62:	f040 8208 	bne.w	8005176 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d68:	9300      	str	r3, [sp, #0]
 8004d6a:	2319      	movs	r3, #25
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	497b      	ldr	r1, [pc, #492]	; (8004f5c <HAL_I2C_Mem_Read+0x224>)
 8004d70:	68f8      	ldr	r0, [r7, #12]
 8004d72:	f000 fb85 	bl	8005480 <I2C_WaitOnFlagUntilTimeout>
 8004d76:	4603      	mov	r3, r0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d001      	beq.n	8004d80 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004d7c:	2302      	movs	r3, #2
 8004d7e:	e1fb      	b.n	8005178 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d101      	bne.n	8004d8e <HAL_I2C_Mem_Read+0x56>
 8004d8a:	2302      	movs	r3, #2
 8004d8c:	e1f4      	b.n	8005178 <HAL_I2C_Mem_Read+0x440>
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2201      	movs	r2, #1
 8004d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 0301 	and.w	r3, r3, #1
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d007      	beq.n	8004db4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f042 0201 	orr.w	r2, r2, #1
 8004db2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004dc2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2222      	movs	r2, #34	; 0x22
 8004dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2240      	movs	r2, #64	; 0x40
 8004dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dde:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004de4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dea:	b29a      	uxth	r2, r3
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	4a5b      	ldr	r2, [pc, #364]	; (8004f60 <HAL_I2C_Mem_Read+0x228>)
 8004df4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004df6:	88f8      	ldrh	r0, [r7, #6]
 8004df8:	893a      	ldrh	r2, [r7, #8]
 8004dfa:	8979      	ldrh	r1, [r7, #10]
 8004dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfe:	9301      	str	r3, [sp, #4]
 8004e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e02:	9300      	str	r3, [sp, #0]
 8004e04:	4603      	mov	r3, r0
 8004e06:	68f8      	ldr	r0, [r7, #12]
 8004e08:	f000 fa52 	bl	80052b0 <I2C_RequestMemoryRead>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d001      	beq.n	8004e16 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e1b0      	b.n	8005178 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d113      	bne.n	8004e46 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e1e:	2300      	movs	r3, #0
 8004e20:	623b      	str	r3, [r7, #32]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	695b      	ldr	r3, [r3, #20]
 8004e28:	623b      	str	r3, [r7, #32]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	699b      	ldr	r3, [r3, #24]
 8004e30:	623b      	str	r3, [r7, #32]
 8004e32:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e42:	601a      	str	r2, [r3, #0]
 8004e44:	e184      	b.n	8005150 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d11b      	bne.n	8004e86 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e5c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e5e:	2300      	movs	r3, #0
 8004e60:	61fb      	str	r3, [r7, #28]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	695b      	ldr	r3, [r3, #20]
 8004e68:	61fb      	str	r3, [r7, #28]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	699b      	ldr	r3, [r3, #24]
 8004e70:	61fb      	str	r3, [r7, #28]
 8004e72:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e82:	601a      	str	r2, [r3, #0]
 8004e84:	e164      	b.n	8005150 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e8a:	2b02      	cmp	r3, #2
 8004e8c:	d11b      	bne.n	8004ec6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e9c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004eac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004eae:	2300      	movs	r3, #0
 8004eb0:	61bb      	str	r3, [r7, #24]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	695b      	ldr	r3, [r3, #20]
 8004eb8:	61bb      	str	r3, [r7, #24]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	699b      	ldr	r3, [r3, #24]
 8004ec0:	61bb      	str	r3, [r7, #24]
 8004ec2:	69bb      	ldr	r3, [r7, #24]
 8004ec4:	e144      	b.n	8005150 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	617b      	str	r3, [r7, #20]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	695b      	ldr	r3, [r3, #20]
 8004ed0:	617b      	str	r3, [r7, #20]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	699b      	ldr	r3, [r3, #24]
 8004ed8:	617b      	str	r3, [r7, #20]
 8004eda:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004edc:	e138      	b.n	8005150 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ee2:	2b03      	cmp	r3, #3
 8004ee4:	f200 80f1 	bhi.w	80050ca <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d123      	bne.n	8004f38 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ef2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004ef4:	68f8      	ldr	r0, [r7, #12]
 8004ef6:	f000 fc1b 	bl	8005730 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004efa:	4603      	mov	r3, r0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d001      	beq.n	8004f04 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	e139      	b.n	8005178 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	691a      	ldr	r2, [r3, #16]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0e:	b2d2      	uxtb	r2, r2
 8004f10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f16:	1c5a      	adds	r2, r3, #1
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f20:	3b01      	subs	r3, #1
 8004f22:	b29a      	uxth	r2, r3
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	3b01      	subs	r3, #1
 8004f30:	b29a      	uxth	r2, r3
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f36:	e10b      	b.n	8005150 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f3c:	2b02      	cmp	r3, #2
 8004f3e:	d14e      	bne.n	8004fde <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f42:	9300      	str	r3, [sp, #0]
 8004f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f46:	2200      	movs	r2, #0
 8004f48:	4906      	ldr	r1, [pc, #24]	; (8004f64 <HAL_I2C_Mem_Read+0x22c>)
 8004f4a:	68f8      	ldr	r0, [r7, #12]
 8004f4c:	f000 fa98 	bl	8005480 <I2C_WaitOnFlagUntilTimeout>
 8004f50:	4603      	mov	r3, r0
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d008      	beq.n	8004f68 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e10e      	b.n	8005178 <HAL_I2C_Mem_Read+0x440>
 8004f5a:	bf00      	nop
 8004f5c:	00100002 	.word	0x00100002
 8004f60:	ffff0000 	.word	0xffff0000
 8004f64:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	691a      	ldr	r2, [r3, #16]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f82:	b2d2      	uxtb	r2, r2
 8004f84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8a:	1c5a      	adds	r2, r3, #1
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f94:	3b01      	subs	r3, #1
 8004f96:	b29a      	uxth	r2, r3
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	3b01      	subs	r3, #1
 8004fa4:	b29a      	uxth	r2, r3
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	691a      	ldr	r2, [r3, #16]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb4:	b2d2      	uxtb	r2, r2
 8004fb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fbc:	1c5a      	adds	r2, r3, #1
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fc6:	3b01      	subs	r3, #1
 8004fc8:	b29a      	uxth	r2, r3
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	3b01      	subs	r3, #1
 8004fd6:	b29a      	uxth	r2, r3
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004fdc:	e0b8      	b.n	8005150 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe0:	9300      	str	r3, [sp, #0]
 8004fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	4966      	ldr	r1, [pc, #408]	; (8005180 <HAL_I2C_Mem_Read+0x448>)
 8004fe8:	68f8      	ldr	r0, [r7, #12]
 8004fea:	f000 fa49 	bl	8005480 <I2C_WaitOnFlagUntilTimeout>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d001      	beq.n	8004ff8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e0bf      	b.n	8005178 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005006:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	691a      	ldr	r2, [r3, #16]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005012:	b2d2      	uxtb	r2, r2
 8005014:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501a:	1c5a      	adds	r2, r3, #1
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005024:	3b01      	subs	r3, #1
 8005026:	b29a      	uxth	r2, r3
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005030:	b29b      	uxth	r3, r3
 8005032:	3b01      	subs	r3, #1
 8005034:	b29a      	uxth	r2, r3
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800503a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503c:	9300      	str	r3, [sp, #0]
 800503e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005040:	2200      	movs	r2, #0
 8005042:	494f      	ldr	r1, [pc, #316]	; (8005180 <HAL_I2C_Mem_Read+0x448>)
 8005044:	68f8      	ldr	r0, [r7, #12]
 8005046:	f000 fa1b 	bl	8005480 <I2C_WaitOnFlagUntilTimeout>
 800504a:	4603      	mov	r3, r0
 800504c:	2b00      	cmp	r3, #0
 800504e:	d001      	beq.n	8005054 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	e091      	b.n	8005178 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005062:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	691a      	ldr	r2, [r3, #16]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506e:	b2d2      	uxtb	r2, r2
 8005070:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005076:	1c5a      	adds	r2, r3, #1
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005080:	3b01      	subs	r3, #1
 8005082:	b29a      	uxth	r2, r3
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800508c:	b29b      	uxth	r3, r3
 800508e:	3b01      	subs	r3, #1
 8005090:	b29a      	uxth	r2, r3
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	691a      	ldr	r2, [r3, #16]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a0:	b2d2      	uxtb	r2, r2
 80050a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a8:	1c5a      	adds	r2, r3, #1
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050b2:	3b01      	subs	r3, #1
 80050b4:	b29a      	uxth	r2, r3
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050be:	b29b      	uxth	r3, r3
 80050c0:	3b01      	subs	r3, #1
 80050c2:	b29a      	uxth	r2, r3
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80050c8:	e042      	b.n	8005150 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050cc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80050ce:	68f8      	ldr	r0, [r7, #12]
 80050d0:	f000 fb2e 	bl	8005730 <I2C_WaitOnRXNEFlagUntilTimeout>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d001      	beq.n	80050de <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e04c      	b.n	8005178 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	691a      	ldr	r2, [r3, #16]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e8:	b2d2      	uxtb	r2, r2
 80050ea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f0:	1c5a      	adds	r2, r3, #1
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050fa:	3b01      	subs	r3, #1
 80050fc:	b29a      	uxth	r2, r3
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005106:	b29b      	uxth	r3, r3
 8005108:	3b01      	subs	r3, #1
 800510a:	b29a      	uxth	r2, r3
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	695b      	ldr	r3, [r3, #20]
 8005116:	f003 0304 	and.w	r3, r3, #4
 800511a:	2b04      	cmp	r3, #4
 800511c:	d118      	bne.n	8005150 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	691a      	ldr	r2, [r3, #16]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005128:	b2d2      	uxtb	r2, r2
 800512a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005130:	1c5a      	adds	r2, r3, #1
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800513a:	3b01      	subs	r3, #1
 800513c:	b29a      	uxth	r2, r3
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005146:	b29b      	uxth	r3, r3
 8005148:	3b01      	subs	r3, #1
 800514a:	b29a      	uxth	r2, r3
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005154:	2b00      	cmp	r3, #0
 8005156:	f47f aec2 	bne.w	8004ede <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2220      	movs	r2, #32
 800515e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2200      	movs	r2, #0
 8005166:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005172:	2300      	movs	r3, #0
 8005174:	e000      	b.n	8005178 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005176:	2302      	movs	r3, #2
  }
}
 8005178:	4618      	mov	r0, r3
 800517a:	3728      	adds	r7, #40	; 0x28
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}
 8005180:	00010004 	.word	0x00010004

08005184 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b088      	sub	sp, #32
 8005188:	af02      	add	r7, sp, #8
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	4608      	mov	r0, r1
 800518e:	4611      	mov	r1, r2
 8005190:	461a      	mov	r2, r3
 8005192:	4603      	mov	r3, r0
 8005194:	817b      	strh	r3, [r7, #10]
 8005196:	460b      	mov	r3, r1
 8005198:	813b      	strh	r3, [r7, #8]
 800519a:	4613      	mov	r3, r2
 800519c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80051ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b0:	9300      	str	r3, [sp, #0]
 80051b2:	6a3b      	ldr	r3, [r7, #32]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80051ba:	68f8      	ldr	r0, [r7, #12]
 80051bc:	f000 f960 	bl	8005480 <I2C_WaitOnFlagUntilTimeout>
 80051c0:	4603      	mov	r3, r0
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d00d      	beq.n	80051e2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051d4:	d103      	bne.n	80051de <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051dc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e05f      	b.n	80052a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80051e2:	897b      	ldrh	r3, [r7, #10]
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	461a      	mov	r2, r3
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80051f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80051f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f4:	6a3a      	ldr	r2, [r7, #32]
 80051f6:	492d      	ldr	r1, [pc, #180]	; (80052ac <I2C_RequestMemoryWrite+0x128>)
 80051f8:	68f8      	ldr	r0, [r7, #12]
 80051fa:	f000 f998 	bl	800552e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051fe:	4603      	mov	r3, r0
 8005200:	2b00      	cmp	r3, #0
 8005202:	d001      	beq.n	8005208 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	e04c      	b.n	80052a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005208:	2300      	movs	r3, #0
 800520a:	617b      	str	r3, [r7, #20]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	695b      	ldr	r3, [r3, #20]
 8005212:	617b      	str	r3, [r7, #20]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	699b      	ldr	r3, [r3, #24]
 800521a:	617b      	str	r3, [r7, #20]
 800521c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800521e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005220:	6a39      	ldr	r1, [r7, #32]
 8005222:	68f8      	ldr	r0, [r7, #12]
 8005224:	f000 fa02 	bl	800562c <I2C_WaitOnTXEFlagUntilTimeout>
 8005228:	4603      	mov	r3, r0
 800522a:	2b00      	cmp	r3, #0
 800522c:	d00d      	beq.n	800524a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005232:	2b04      	cmp	r3, #4
 8005234:	d107      	bne.n	8005246 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005244:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e02b      	b.n	80052a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800524a:	88fb      	ldrh	r3, [r7, #6]
 800524c:	2b01      	cmp	r3, #1
 800524e:	d105      	bne.n	800525c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005250:	893b      	ldrh	r3, [r7, #8]
 8005252:	b2da      	uxtb	r2, r3
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	611a      	str	r2, [r3, #16]
 800525a:	e021      	b.n	80052a0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800525c:	893b      	ldrh	r3, [r7, #8]
 800525e:	0a1b      	lsrs	r3, r3, #8
 8005260:	b29b      	uxth	r3, r3
 8005262:	b2da      	uxtb	r2, r3
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800526a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800526c:	6a39      	ldr	r1, [r7, #32]
 800526e:	68f8      	ldr	r0, [r7, #12]
 8005270:	f000 f9dc 	bl	800562c <I2C_WaitOnTXEFlagUntilTimeout>
 8005274:	4603      	mov	r3, r0
 8005276:	2b00      	cmp	r3, #0
 8005278:	d00d      	beq.n	8005296 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527e:	2b04      	cmp	r3, #4
 8005280:	d107      	bne.n	8005292 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005290:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e005      	b.n	80052a2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005296:	893b      	ldrh	r3, [r7, #8]
 8005298:	b2da      	uxtb	r2, r3
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80052a0:	2300      	movs	r3, #0
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3718      	adds	r7, #24
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop
 80052ac:	00010002 	.word	0x00010002

080052b0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b088      	sub	sp, #32
 80052b4:	af02      	add	r7, sp, #8
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	4608      	mov	r0, r1
 80052ba:	4611      	mov	r1, r2
 80052bc:	461a      	mov	r2, r3
 80052be:	4603      	mov	r3, r0
 80052c0:	817b      	strh	r3, [r7, #10]
 80052c2:	460b      	mov	r3, r1
 80052c4:	813b      	strh	r3, [r7, #8]
 80052c6:	4613      	mov	r3, r2
 80052c8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80052d8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80052ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ec:	9300      	str	r3, [sp, #0]
 80052ee:	6a3b      	ldr	r3, [r7, #32]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80052f6:	68f8      	ldr	r0, [r7, #12]
 80052f8:	f000 f8c2 	bl	8005480 <I2C_WaitOnFlagUntilTimeout>
 80052fc:	4603      	mov	r3, r0
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d00d      	beq.n	800531e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800530c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005310:	d103      	bne.n	800531a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005318:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800531a:	2303      	movs	r3, #3
 800531c:	e0aa      	b.n	8005474 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800531e:	897b      	ldrh	r3, [r7, #10]
 8005320:	b2db      	uxtb	r3, r3
 8005322:	461a      	mov	r2, r3
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800532c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800532e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005330:	6a3a      	ldr	r2, [r7, #32]
 8005332:	4952      	ldr	r1, [pc, #328]	; (800547c <I2C_RequestMemoryRead+0x1cc>)
 8005334:	68f8      	ldr	r0, [r7, #12]
 8005336:	f000 f8fa 	bl	800552e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800533a:	4603      	mov	r3, r0
 800533c:	2b00      	cmp	r3, #0
 800533e:	d001      	beq.n	8005344 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	e097      	b.n	8005474 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005344:	2300      	movs	r3, #0
 8005346:	617b      	str	r3, [r7, #20]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	695b      	ldr	r3, [r3, #20]
 800534e:	617b      	str	r3, [r7, #20]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	699b      	ldr	r3, [r3, #24]
 8005356:	617b      	str	r3, [r7, #20]
 8005358:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800535a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800535c:	6a39      	ldr	r1, [r7, #32]
 800535e:	68f8      	ldr	r0, [r7, #12]
 8005360:	f000 f964 	bl	800562c <I2C_WaitOnTXEFlagUntilTimeout>
 8005364:	4603      	mov	r3, r0
 8005366:	2b00      	cmp	r3, #0
 8005368:	d00d      	beq.n	8005386 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536e:	2b04      	cmp	r3, #4
 8005370:	d107      	bne.n	8005382 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005380:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e076      	b.n	8005474 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005386:	88fb      	ldrh	r3, [r7, #6]
 8005388:	2b01      	cmp	r3, #1
 800538a:	d105      	bne.n	8005398 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800538c:	893b      	ldrh	r3, [r7, #8]
 800538e:	b2da      	uxtb	r2, r3
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	611a      	str	r2, [r3, #16]
 8005396:	e021      	b.n	80053dc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005398:	893b      	ldrh	r3, [r7, #8]
 800539a:	0a1b      	lsrs	r3, r3, #8
 800539c:	b29b      	uxth	r3, r3
 800539e:	b2da      	uxtb	r2, r3
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053a8:	6a39      	ldr	r1, [r7, #32]
 80053aa:	68f8      	ldr	r0, [r7, #12]
 80053ac:	f000 f93e 	bl	800562c <I2C_WaitOnTXEFlagUntilTimeout>
 80053b0:	4603      	mov	r3, r0
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d00d      	beq.n	80053d2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ba:	2b04      	cmp	r3, #4
 80053bc:	d107      	bne.n	80053ce <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053cc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e050      	b.n	8005474 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80053d2:	893b      	ldrh	r3, [r7, #8]
 80053d4:	b2da      	uxtb	r2, r3
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053de:	6a39      	ldr	r1, [r7, #32]
 80053e0:	68f8      	ldr	r0, [r7, #12]
 80053e2:	f000 f923 	bl	800562c <I2C_WaitOnTXEFlagUntilTimeout>
 80053e6:	4603      	mov	r3, r0
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d00d      	beq.n	8005408 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f0:	2b04      	cmp	r3, #4
 80053f2:	d107      	bne.n	8005404 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005402:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e035      	b.n	8005474 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005416:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541a:	9300      	str	r3, [sp, #0]
 800541c:	6a3b      	ldr	r3, [r7, #32]
 800541e:	2200      	movs	r2, #0
 8005420:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005424:	68f8      	ldr	r0, [r7, #12]
 8005426:	f000 f82b 	bl	8005480 <I2C_WaitOnFlagUntilTimeout>
 800542a:	4603      	mov	r3, r0
 800542c:	2b00      	cmp	r3, #0
 800542e:	d00d      	beq.n	800544c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800543a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800543e:	d103      	bne.n	8005448 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005446:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005448:	2303      	movs	r3, #3
 800544a:	e013      	b.n	8005474 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800544c:	897b      	ldrh	r3, [r7, #10]
 800544e:	b2db      	uxtb	r3, r3
 8005450:	f043 0301 	orr.w	r3, r3, #1
 8005454:	b2da      	uxtb	r2, r3
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800545c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545e:	6a3a      	ldr	r2, [r7, #32]
 8005460:	4906      	ldr	r1, [pc, #24]	; (800547c <I2C_RequestMemoryRead+0x1cc>)
 8005462:	68f8      	ldr	r0, [r7, #12]
 8005464:	f000 f863 	bl	800552e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005468:	4603      	mov	r3, r0
 800546a:	2b00      	cmp	r3, #0
 800546c:	d001      	beq.n	8005472 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	e000      	b.n	8005474 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005472:	2300      	movs	r3, #0
}
 8005474:	4618      	mov	r0, r3
 8005476:	3718      	adds	r7, #24
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}
 800547c:	00010002 	.word	0x00010002

08005480 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b084      	sub	sp, #16
 8005484:	af00      	add	r7, sp, #0
 8005486:	60f8      	str	r0, [r7, #12]
 8005488:	60b9      	str	r1, [r7, #8]
 800548a:	603b      	str	r3, [r7, #0]
 800548c:	4613      	mov	r3, r2
 800548e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005490:	e025      	b.n	80054de <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005498:	d021      	beq.n	80054de <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800549a:	f7fe fae5 	bl	8003a68 <HAL_GetTick>
 800549e:	4602      	mov	r2, r0
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	1ad3      	subs	r3, r2, r3
 80054a4:	683a      	ldr	r2, [r7, #0]
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d302      	bcc.n	80054b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d116      	bne.n	80054de <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2200      	movs	r2, #0
 80054b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2220      	movs	r2, #32
 80054ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2200      	movs	r2, #0
 80054c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ca:	f043 0220 	orr.w	r2, r3, #32
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2200      	movs	r2, #0
 80054d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e023      	b.n	8005526 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	0c1b      	lsrs	r3, r3, #16
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d10d      	bne.n	8005504 <I2C_WaitOnFlagUntilTimeout+0x84>
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	695b      	ldr	r3, [r3, #20]
 80054ee:	43da      	mvns	r2, r3
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	4013      	ands	r3, r2
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	bf0c      	ite	eq
 80054fa:	2301      	moveq	r3, #1
 80054fc:	2300      	movne	r3, #0
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	461a      	mov	r2, r3
 8005502:	e00c      	b.n	800551e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	699b      	ldr	r3, [r3, #24]
 800550a:	43da      	mvns	r2, r3
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	4013      	ands	r3, r2
 8005510:	b29b      	uxth	r3, r3
 8005512:	2b00      	cmp	r3, #0
 8005514:	bf0c      	ite	eq
 8005516:	2301      	moveq	r3, #1
 8005518:	2300      	movne	r3, #0
 800551a:	b2db      	uxtb	r3, r3
 800551c:	461a      	mov	r2, r3
 800551e:	79fb      	ldrb	r3, [r7, #7]
 8005520:	429a      	cmp	r2, r3
 8005522:	d0b6      	beq.n	8005492 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005524:	2300      	movs	r3, #0
}
 8005526:	4618      	mov	r0, r3
 8005528:	3710      	adds	r7, #16
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}

0800552e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800552e:	b580      	push	{r7, lr}
 8005530:	b084      	sub	sp, #16
 8005532:	af00      	add	r7, sp, #0
 8005534:	60f8      	str	r0, [r7, #12]
 8005536:	60b9      	str	r1, [r7, #8]
 8005538:	607a      	str	r2, [r7, #4]
 800553a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800553c:	e051      	b.n	80055e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	695b      	ldr	r3, [r3, #20]
 8005544:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005548:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800554c:	d123      	bne.n	8005596 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800555c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005566:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2200      	movs	r2, #0
 800556c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2220      	movs	r2, #32
 8005572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005582:	f043 0204 	orr.w	r2, r3, #4
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2200      	movs	r2, #0
 800558e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	e046      	b.n	8005624 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800559c:	d021      	beq.n	80055e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800559e:	f7fe fa63 	bl	8003a68 <HAL_GetTick>
 80055a2:	4602      	mov	r2, r0
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	1ad3      	subs	r3, r2, r3
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d302      	bcc.n	80055b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d116      	bne.n	80055e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2200      	movs	r2, #0
 80055b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2220      	movs	r2, #32
 80055be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2200      	movs	r2, #0
 80055c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ce:	f043 0220 	orr.w	r2, r3, #32
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2200      	movs	r2, #0
 80055da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e020      	b.n	8005624 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	0c1b      	lsrs	r3, r3, #16
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d10c      	bne.n	8005606 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	695b      	ldr	r3, [r3, #20]
 80055f2:	43da      	mvns	r2, r3
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	4013      	ands	r3, r2
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	bf14      	ite	ne
 80055fe:	2301      	movne	r3, #1
 8005600:	2300      	moveq	r3, #0
 8005602:	b2db      	uxtb	r3, r3
 8005604:	e00b      	b.n	800561e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	699b      	ldr	r3, [r3, #24]
 800560c:	43da      	mvns	r2, r3
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	4013      	ands	r3, r2
 8005612:	b29b      	uxth	r3, r3
 8005614:	2b00      	cmp	r3, #0
 8005616:	bf14      	ite	ne
 8005618:	2301      	movne	r3, #1
 800561a:	2300      	moveq	r3, #0
 800561c:	b2db      	uxtb	r3, r3
 800561e:	2b00      	cmp	r3, #0
 8005620:	d18d      	bne.n	800553e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005622:	2300      	movs	r3, #0
}
 8005624:	4618      	mov	r0, r3
 8005626:	3710      	adds	r7, #16
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}

0800562c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b084      	sub	sp, #16
 8005630:	af00      	add	r7, sp, #0
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005638:	e02d      	b.n	8005696 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800563a:	68f8      	ldr	r0, [r7, #12]
 800563c:	f000 f8ce 	bl	80057dc <I2C_IsAcknowledgeFailed>
 8005640:	4603      	mov	r3, r0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d001      	beq.n	800564a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e02d      	b.n	80056a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005650:	d021      	beq.n	8005696 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005652:	f7fe fa09 	bl	8003a68 <HAL_GetTick>
 8005656:	4602      	mov	r2, r0
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	1ad3      	subs	r3, r2, r3
 800565c:	68ba      	ldr	r2, [r7, #8]
 800565e:	429a      	cmp	r2, r3
 8005660:	d302      	bcc.n	8005668 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d116      	bne.n	8005696 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2200      	movs	r2, #0
 800566c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2220      	movs	r2, #32
 8005672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2200      	movs	r2, #0
 800567a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005682:	f043 0220 	orr.w	r2, r3, #32
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2200      	movs	r2, #0
 800568e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e007      	b.n	80056a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	695b      	ldr	r3, [r3, #20]
 800569c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056a0:	2b80      	cmp	r3, #128	; 0x80
 80056a2:	d1ca      	bne.n	800563a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80056a4:	2300      	movs	r3, #0
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3710      	adds	r7, #16
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}

080056ae <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056ae:	b580      	push	{r7, lr}
 80056b0:	b084      	sub	sp, #16
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	60f8      	str	r0, [r7, #12]
 80056b6:	60b9      	str	r1, [r7, #8]
 80056b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80056ba:	e02d      	b.n	8005718 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80056bc:	68f8      	ldr	r0, [r7, #12]
 80056be:	f000 f88d 	bl	80057dc <I2C_IsAcknowledgeFailed>
 80056c2:	4603      	mov	r3, r0
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d001      	beq.n	80056cc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	e02d      	b.n	8005728 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056d2:	d021      	beq.n	8005718 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056d4:	f7fe f9c8 	bl	8003a68 <HAL_GetTick>
 80056d8:	4602      	mov	r2, r0
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	1ad3      	subs	r3, r2, r3
 80056de:	68ba      	ldr	r2, [r7, #8]
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d302      	bcc.n	80056ea <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d116      	bne.n	8005718 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2200      	movs	r2, #0
 80056ee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2220      	movs	r2, #32
 80056f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2200      	movs	r2, #0
 80056fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005704:	f043 0220 	orr.w	r2, r3, #32
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2200      	movs	r2, #0
 8005710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	e007      	b.n	8005728 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	695b      	ldr	r3, [r3, #20]
 800571e:	f003 0304 	and.w	r3, r3, #4
 8005722:	2b04      	cmp	r3, #4
 8005724:	d1ca      	bne.n	80056bc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005726:	2300      	movs	r3, #0
}
 8005728:	4618      	mov	r0, r3
 800572a:	3710      	adds	r7, #16
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}

08005730 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b084      	sub	sp, #16
 8005734:	af00      	add	r7, sp, #0
 8005736:	60f8      	str	r0, [r7, #12]
 8005738:	60b9      	str	r1, [r7, #8]
 800573a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800573c:	e042      	b.n	80057c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	695b      	ldr	r3, [r3, #20]
 8005744:	f003 0310 	and.w	r3, r3, #16
 8005748:	2b10      	cmp	r3, #16
 800574a:	d119      	bne.n	8005780 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f06f 0210 	mvn.w	r2, #16
 8005754:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2200      	movs	r2, #0
 800575a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2220      	movs	r2, #32
 8005760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2200      	movs	r2, #0
 8005768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2200      	movs	r2, #0
 8005778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	e029      	b.n	80057d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005780:	f7fe f972 	bl	8003a68 <HAL_GetTick>
 8005784:	4602      	mov	r2, r0
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	1ad3      	subs	r3, r2, r3
 800578a:	68ba      	ldr	r2, [r7, #8]
 800578c:	429a      	cmp	r2, r3
 800578e:	d302      	bcc.n	8005796 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d116      	bne.n	80057c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2200      	movs	r2, #0
 800579a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2220      	movs	r2, #32
 80057a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2200      	movs	r2, #0
 80057a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b0:	f043 0220 	orr.w	r2, r3, #32
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2200      	movs	r2, #0
 80057bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	e007      	b.n	80057d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	695b      	ldr	r3, [r3, #20]
 80057ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ce:	2b40      	cmp	r3, #64	; 0x40
 80057d0:	d1b5      	bne.n	800573e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80057d2:	2300      	movs	r3, #0
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3710      	adds	r7, #16
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}

080057dc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80057dc:	b480      	push	{r7}
 80057de:	b083      	sub	sp, #12
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	695b      	ldr	r3, [r3, #20]
 80057ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057f2:	d11b      	bne.n	800582c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80057fc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2220      	movs	r2, #32
 8005808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005818:	f043 0204 	orr.w	r2, r3, #4
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	e000      	b.n	800582e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800582c:	2300      	movs	r3, #0
}
 800582e:	4618      	mov	r0, r3
 8005830:	370c      	adds	r7, #12
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr
	...

0800583c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b086      	sub	sp, #24
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d101      	bne.n	800584e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	e264      	b.n	8005d18 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 0301 	and.w	r3, r3, #1
 8005856:	2b00      	cmp	r3, #0
 8005858:	d075      	beq.n	8005946 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800585a:	4ba3      	ldr	r3, [pc, #652]	; (8005ae8 <HAL_RCC_OscConfig+0x2ac>)
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	f003 030c 	and.w	r3, r3, #12
 8005862:	2b04      	cmp	r3, #4
 8005864:	d00c      	beq.n	8005880 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005866:	4ba0      	ldr	r3, [pc, #640]	; (8005ae8 <HAL_RCC_OscConfig+0x2ac>)
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800586e:	2b08      	cmp	r3, #8
 8005870:	d112      	bne.n	8005898 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005872:	4b9d      	ldr	r3, [pc, #628]	; (8005ae8 <HAL_RCC_OscConfig+0x2ac>)
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800587a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800587e:	d10b      	bne.n	8005898 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005880:	4b99      	ldr	r3, [pc, #612]	; (8005ae8 <HAL_RCC_OscConfig+0x2ac>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005888:	2b00      	cmp	r3, #0
 800588a:	d05b      	beq.n	8005944 <HAL_RCC_OscConfig+0x108>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d157      	bne.n	8005944 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	e23f      	b.n	8005d18 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058a0:	d106      	bne.n	80058b0 <HAL_RCC_OscConfig+0x74>
 80058a2:	4b91      	ldr	r3, [pc, #580]	; (8005ae8 <HAL_RCC_OscConfig+0x2ac>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a90      	ldr	r2, [pc, #576]	; (8005ae8 <HAL_RCC_OscConfig+0x2ac>)
 80058a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058ac:	6013      	str	r3, [r2, #0]
 80058ae:	e01d      	b.n	80058ec <HAL_RCC_OscConfig+0xb0>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80058b8:	d10c      	bne.n	80058d4 <HAL_RCC_OscConfig+0x98>
 80058ba:	4b8b      	ldr	r3, [pc, #556]	; (8005ae8 <HAL_RCC_OscConfig+0x2ac>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a8a      	ldr	r2, [pc, #552]	; (8005ae8 <HAL_RCC_OscConfig+0x2ac>)
 80058c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80058c4:	6013      	str	r3, [r2, #0]
 80058c6:	4b88      	ldr	r3, [pc, #544]	; (8005ae8 <HAL_RCC_OscConfig+0x2ac>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a87      	ldr	r2, [pc, #540]	; (8005ae8 <HAL_RCC_OscConfig+0x2ac>)
 80058cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058d0:	6013      	str	r3, [r2, #0]
 80058d2:	e00b      	b.n	80058ec <HAL_RCC_OscConfig+0xb0>
 80058d4:	4b84      	ldr	r3, [pc, #528]	; (8005ae8 <HAL_RCC_OscConfig+0x2ac>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a83      	ldr	r2, [pc, #524]	; (8005ae8 <HAL_RCC_OscConfig+0x2ac>)
 80058da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058de:	6013      	str	r3, [r2, #0]
 80058e0:	4b81      	ldr	r3, [pc, #516]	; (8005ae8 <HAL_RCC_OscConfig+0x2ac>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a80      	ldr	r2, [pc, #512]	; (8005ae8 <HAL_RCC_OscConfig+0x2ac>)
 80058e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d013      	beq.n	800591c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058f4:	f7fe f8b8 	bl	8003a68 <HAL_GetTick>
 80058f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058fa:	e008      	b.n	800590e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80058fc:	f7fe f8b4 	bl	8003a68 <HAL_GetTick>
 8005900:	4602      	mov	r2, r0
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	1ad3      	subs	r3, r2, r3
 8005906:	2b64      	cmp	r3, #100	; 0x64
 8005908:	d901      	bls.n	800590e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800590a:	2303      	movs	r3, #3
 800590c:	e204      	b.n	8005d18 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800590e:	4b76      	ldr	r3, [pc, #472]	; (8005ae8 <HAL_RCC_OscConfig+0x2ac>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005916:	2b00      	cmp	r3, #0
 8005918:	d0f0      	beq.n	80058fc <HAL_RCC_OscConfig+0xc0>
 800591a:	e014      	b.n	8005946 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800591c:	f7fe f8a4 	bl	8003a68 <HAL_GetTick>
 8005920:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005922:	e008      	b.n	8005936 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005924:	f7fe f8a0 	bl	8003a68 <HAL_GetTick>
 8005928:	4602      	mov	r2, r0
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	1ad3      	subs	r3, r2, r3
 800592e:	2b64      	cmp	r3, #100	; 0x64
 8005930:	d901      	bls.n	8005936 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005932:	2303      	movs	r3, #3
 8005934:	e1f0      	b.n	8005d18 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005936:	4b6c      	ldr	r3, [pc, #432]	; (8005ae8 <HAL_RCC_OscConfig+0x2ac>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800593e:	2b00      	cmp	r3, #0
 8005940:	d1f0      	bne.n	8005924 <HAL_RCC_OscConfig+0xe8>
 8005942:	e000      	b.n	8005946 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005944:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 0302 	and.w	r3, r3, #2
 800594e:	2b00      	cmp	r3, #0
 8005950:	d063      	beq.n	8005a1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005952:	4b65      	ldr	r3, [pc, #404]	; (8005ae8 <HAL_RCC_OscConfig+0x2ac>)
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	f003 030c 	and.w	r3, r3, #12
 800595a:	2b00      	cmp	r3, #0
 800595c:	d00b      	beq.n	8005976 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800595e:	4b62      	ldr	r3, [pc, #392]	; (8005ae8 <HAL_RCC_OscConfig+0x2ac>)
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005966:	2b08      	cmp	r3, #8
 8005968:	d11c      	bne.n	80059a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800596a:	4b5f      	ldr	r3, [pc, #380]	; (8005ae8 <HAL_RCC_OscConfig+0x2ac>)
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005972:	2b00      	cmp	r3, #0
 8005974:	d116      	bne.n	80059a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005976:	4b5c      	ldr	r3, [pc, #368]	; (8005ae8 <HAL_RCC_OscConfig+0x2ac>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 0302 	and.w	r3, r3, #2
 800597e:	2b00      	cmp	r3, #0
 8005980:	d005      	beq.n	800598e <HAL_RCC_OscConfig+0x152>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	2b01      	cmp	r3, #1
 8005988:	d001      	beq.n	800598e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	e1c4      	b.n	8005d18 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800598e:	4b56      	ldr	r3, [pc, #344]	; (8005ae8 <HAL_RCC_OscConfig+0x2ac>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	00db      	lsls	r3, r3, #3
 800599c:	4952      	ldr	r1, [pc, #328]	; (8005ae8 <HAL_RCC_OscConfig+0x2ac>)
 800599e:	4313      	orrs	r3, r2
 80059a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059a2:	e03a      	b.n	8005a1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d020      	beq.n	80059ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80059ac:	4b4f      	ldr	r3, [pc, #316]	; (8005aec <HAL_RCC_OscConfig+0x2b0>)
 80059ae:	2201      	movs	r2, #1
 80059b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059b2:	f7fe f859 	bl	8003a68 <HAL_GetTick>
 80059b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059b8:	e008      	b.n	80059cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80059ba:	f7fe f855 	bl	8003a68 <HAL_GetTick>
 80059be:	4602      	mov	r2, r0
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	1ad3      	subs	r3, r2, r3
 80059c4:	2b02      	cmp	r3, #2
 80059c6:	d901      	bls.n	80059cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80059c8:	2303      	movs	r3, #3
 80059ca:	e1a5      	b.n	8005d18 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059cc:	4b46      	ldr	r3, [pc, #280]	; (8005ae8 <HAL_RCC_OscConfig+0x2ac>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 0302 	and.w	r3, r3, #2
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d0f0      	beq.n	80059ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059d8:	4b43      	ldr	r3, [pc, #268]	; (8005ae8 <HAL_RCC_OscConfig+0x2ac>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	691b      	ldr	r3, [r3, #16]
 80059e4:	00db      	lsls	r3, r3, #3
 80059e6:	4940      	ldr	r1, [pc, #256]	; (8005ae8 <HAL_RCC_OscConfig+0x2ac>)
 80059e8:	4313      	orrs	r3, r2
 80059ea:	600b      	str	r3, [r1, #0]
 80059ec:	e015      	b.n	8005a1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80059ee:	4b3f      	ldr	r3, [pc, #252]	; (8005aec <HAL_RCC_OscConfig+0x2b0>)
 80059f0:	2200      	movs	r2, #0
 80059f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059f4:	f7fe f838 	bl	8003a68 <HAL_GetTick>
 80059f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059fa:	e008      	b.n	8005a0e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80059fc:	f7fe f834 	bl	8003a68 <HAL_GetTick>
 8005a00:	4602      	mov	r2, r0
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	1ad3      	subs	r3, r2, r3
 8005a06:	2b02      	cmp	r3, #2
 8005a08:	d901      	bls.n	8005a0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005a0a:	2303      	movs	r3, #3
 8005a0c:	e184      	b.n	8005d18 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a0e:	4b36      	ldr	r3, [pc, #216]	; (8005ae8 <HAL_RCC_OscConfig+0x2ac>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f003 0302 	and.w	r3, r3, #2
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d1f0      	bne.n	80059fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f003 0308 	and.w	r3, r3, #8
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d030      	beq.n	8005a88 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	695b      	ldr	r3, [r3, #20]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d016      	beq.n	8005a5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a2e:	4b30      	ldr	r3, [pc, #192]	; (8005af0 <HAL_RCC_OscConfig+0x2b4>)
 8005a30:	2201      	movs	r2, #1
 8005a32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a34:	f7fe f818 	bl	8003a68 <HAL_GetTick>
 8005a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a3a:	e008      	b.n	8005a4e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a3c:	f7fe f814 	bl	8003a68 <HAL_GetTick>
 8005a40:	4602      	mov	r2, r0
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	1ad3      	subs	r3, r2, r3
 8005a46:	2b02      	cmp	r3, #2
 8005a48:	d901      	bls.n	8005a4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005a4a:	2303      	movs	r3, #3
 8005a4c:	e164      	b.n	8005d18 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a4e:	4b26      	ldr	r3, [pc, #152]	; (8005ae8 <HAL_RCC_OscConfig+0x2ac>)
 8005a50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a52:	f003 0302 	and.w	r3, r3, #2
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d0f0      	beq.n	8005a3c <HAL_RCC_OscConfig+0x200>
 8005a5a:	e015      	b.n	8005a88 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a5c:	4b24      	ldr	r3, [pc, #144]	; (8005af0 <HAL_RCC_OscConfig+0x2b4>)
 8005a5e:	2200      	movs	r2, #0
 8005a60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a62:	f7fe f801 	bl	8003a68 <HAL_GetTick>
 8005a66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a68:	e008      	b.n	8005a7c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a6a:	f7fd fffd 	bl	8003a68 <HAL_GetTick>
 8005a6e:	4602      	mov	r2, r0
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	1ad3      	subs	r3, r2, r3
 8005a74:	2b02      	cmp	r3, #2
 8005a76:	d901      	bls.n	8005a7c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005a78:	2303      	movs	r3, #3
 8005a7a:	e14d      	b.n	8005d18 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a7c:	4b1a      	ldr	r3, [pc, #104]	; (8005ae8 <HAL_RCC_OscConfig+0x2ac>)
 8005a7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a80:	f003 0302 	and.w	r3, r3, #2
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d1f0      	bne.n	8005a6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 0304 	and.w	r3, r3, #4
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	f000 80a0 	beq.w	8005bd6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a96:	2300      	movs	r3, #0
 8005a98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a9a:	4b13      	ldr	r3, [pc, #76]	; (8005ae8 <HAL_RCC_OscConfig+0x2ac>)
 8005a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d10f      	bne.n	8005ac6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	60bb      	str	r3, [r7, #8]
 8005aaa:	4b0f      	ldr	r3, [pc, #60]	; (8005ae8 <HAL_RCC_OscConfig+0x2ac>)
 8005aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aae:	4a0e      	ldr	r2, [pc, #56]	; (8005ae8 <HAL_RCC_OscConfig+0x2ac>)
 8005ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ab4:	6413      	str	r3, [r2, #64]	; 0x40
 8005ab6:	4b0c      	ldr	r3, [pc, #48]	; (8005ae8 <HAL_RCC_OscConfig+0x2ac>)
 8005ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005abe:	60bb      	str	r3, [r7, #8]
 8005ac0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ac6:	4b0b      	ldr	r3, [pc, #44]	; (8005af4 <HAL_RCC_OscConfig+0x2b8>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d121      	bne.n	8005b16 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ad2:	4b08      	ldr	r3, [pc, #32]	; (8005af4 <HAL_RCC_OscConfig+0x2b8>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a07      	ldr	r2, [pc, #28]	; (8005af4 <HAL_RCC_OscConfig+0x2b8>)
 8005ad8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005adc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ade:	f7fd ffc3 	bl	8003a68 <HAL_GetTick>
 8005ae2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ae4:	e011      	b.n	8005b0a <HAL_RCC_OscConfig+0x2ce>
 8005ae6:	bf00      	nop
 8005ae8:	40023800 	.word	0x40023800
 8005aec:	42470000 	.word	0x42470000
 8005af0:	42470e80 	.word	0x42470e80
 8005af4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005af8:	f7fd ffb6 	bl	8003a68 <HAL_GetTick>
 8005afc:	4602      	mov	r2, r0
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	1ad3      	subs	r3, r2, r3
 8005b02:	2b02      	cmp	r3, #2
 8005b04:	d901      	bls.n	8005b0a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005b06:	2303      	movs	r3, #3
 8005b08:	e106      	b.n	8005d18 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b0a:	4b85      	ldr	r3, [pc, #532]	; (8005d20 <HAL_RCC_OscConfig+0x4e4>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d0f0      	beq.n	8005af8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d106      	bne.n	8005b2c <HAL_RCC_OscConfig+0x2f0>
 8005b1e:	4b81      	ldr	r3, [pc, #516]	; (8005d24 <HAL_RCC_OscConfig+0x4e8>)
 8005b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b22:	4a80      	ldr	r2, [pc, #512]	; (8005d24 <HAL_RCC_OscConfig+0x4e8>)
 8005b24:	f043 0301 	orr.w	r3, r3, #1
 8005b28:	6713      	str	r3, [r2, #112]	; 0x70
 8005b2a:	e01c      	b.n	8005b66 <HAL_RCC_OscConfig+0x32a>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	2b05      	cmp	r3, #5
 8005b32:	d10c      	bne.n	8005b4e <HAL_RCC_OscConfig+0x312>
 8005b34:	4b7b      	ldr	r3, [pc, #492]	; (8005d24 <HAL_RCC_OscConfig+0x4e8>)
 8005b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b38:	4a7a      	ldr	r2, [pc, #488]	; (8005d24 <HAL_RCC_OscConfig+0x4e8>)
 8005b3a:	f043 0304 	orr.w	r3, r3, #4
 8005b3e:	6713      	str	r3, [r2, #112]	; 0x70
 8005b40:	4b78      	ldr	r3, [pc, #480]	; (8005d24 <HAL_RCC_OscConfig+0x4e8>)
 8005b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b44:	4a77      	ldr	r2, [pc, #476]	; (8005d24 <HAL_RCC_OscConfig+0x4e8>)
 8005b46:	f043 0301 	orr.w	r3, r3, #1
 8005b4a:	6713      	str	r3, [r2, #112]	; 0x70
 8005b4c:	e00b      	b.n	8005b66 <HAL_RCC_OscConfig+0x32a>
 8005b4e:	4b75      	ldr	r3, [pc, #468]	; (8005d24 <HAL_RCC_OscConfig+0x4e8>)
 8005b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b52:	4a74      	ldr	r2, [pc, #464]	; (8005d24 <HAL_RCC_OscConfig+0x4e8>)
 8005b54:	f023 0301 	bic.w	r3, r3, #1
 8005b58:	6713      	str	r3, [r2, #112]	; 0x70
 8005b5a:	4b72      	ldr	r3, [pc, #456]	; (8005d24 <HAL_RCC_OscConfig+0x4e8>)
 8005b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b5e:	4a71      	ldr	r2, [pc, #452]	; (8005d24 <HAL_RCC_OscConfig+0x4e8>)
 8005b60:	f023 0304 	bic.w	r3, r3, #4
 8005b64:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d015      	beq.n	8005b9a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b6e:	f7fd ff7b 	bl	8003a68 <HAL_GetTick>
 8005b72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b74:	e00a      	b.n	8005b8c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b76:	f7fd ff77 	bl	8003a68 <HAL_GetTick>
 8005b7a:	4602      	mov	r2, r0
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	1ad3      	subs	r3, r2, r3
 8005b80:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d901      	bls.n	8005b8c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005b88:	2303      	movs	r3, #3
 8005b8a:	e0c5      	b.n	8005d18 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b8c:	4b65      	ldr	r3, [pc, #404]	; (8005d24 <HAL_RCC_OscConfig+0x4e8>)
 8005b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b90:	f003 0302 	and.w	r3, r3, #2
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d0ee      	beq.n	8005b76 <HAL_RCC_OscConfig+0x33a>
 8005b98:	e014      	b.n	8005bc4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b9a:	f7fd ff65 	bl	8003a68 <HAL_GetTick>
 8005b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ba0:	e00a      	b.n	8005bb8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ba2:	f7fd ff61 	bl	8003a68 <HAL_GetTick>
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	1ad3      	subs	r3, r2, r3
 8005bac:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d901      	bls.n	8005bb8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005bb4:	2303      	movs	r3, #3
 8005bb6:	e0af      	b.n	8005d18 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005bb8:	4b5a      	ldr	r3, [pc, #360]	; (8005d24 <HAL_RCC_OscConfig+0x4e8>)
 8005bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bbc:	f003 0302 	and.w	r3, r3, #2
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d1ee      	bne.n	8005ba2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005bc4:	7dfb      	ldrb	r3, [r7, #23]
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d105      	bne.n	8005bd6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bca:	4b56      	ldr	r3, [pc, #344]	; (8005d24 <HAL_RCC_OscConfig+0x4e8>)
 8005bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bce:	4a55      	ldr	r2, [pc, #340]	; (8005d24 <HAL_RCC_OscConfig+0x4e8>)
 8005bd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bd4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	699b      	ldr	r3, [r3, #24]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	f000 809b 	beq.w	8005d16 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005be0:	4b50      	ldr	r3, [pc, #320]	; (8005d24 <HAL_RCC_OscConfig+0x4e8>)
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	f003 030c 	and.w	r3, r3, #12
 8005be8:	2b08      	cmp	r3, #8
 8005bea:	d05c      	beq.n	8005ca6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	699b      	ldr	r3, [r3, #24]
 8005bf0:	2b02      	cmp	r3, #2
 8005bf2:	d141      	bne.n	8005c78 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bf4:	4b4c      	ldr	r3, [pc, #304]	; (8005d28 <HAL_RCC_OscConfig+0x4ec>)
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bfa:	f7fd ff35 	bl	8003a68 <HAL_GetTick>
 8005bfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c00:	e008      	b.n	8005c14 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c02:	f7fd ff31 	bl	8003a68 <HAL_GetTick>
 8005c06:	4602      	mov	r2, r0
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	1ad3      	subs	r3, r2, r3
 8005c0c:	2b02      	cmp	r3, #2
 8005c0e:	d901      	bls.n	8005c14 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005c10:	2303      	movs	r3, #3
 8005c12:	e081      	b.n	8005d18 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c14:	4b43      	ldr	r3, [pc, #268]	; (8005d24 <HAL_RCC_OscConfig+0x4e8>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d1f0      	bne.n	8005c02 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	69da      	ldr	r2, [r3, #28]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6a1b      	ldr	r3, [r3, #32]
 8005c28:	431a      	orrs	r2, r3
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2e:	019b      	lsls	r3, r3, #6
 8005c30:	431a      	orrs	r2, r3
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c36:	085b      	lsrs	r3, r3, #1
 8005c38:	3b01      	subs	r3, #1
 8005c3a:	041b      	lsls	r3, r3, #16
 8005c3c:	431a      	orrs	r2, r3
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c42:	061b      	lsls	r3, r3, #24
 8005c44:	4937      	ldr	r1, [pc, #220]	; (8005d24 <HAL_RCC_OscConfig+0x4e8>)
 8005c46:	4313      	orrs	r3, r2
 8005c48:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c4a:	4b37      	ldr	r3, [pc, #220]	; (8005d28 <HAL_RCC_OscConfig+0x4ec>)
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c50:	f7fd ff0a 	bl	8003a68 <HAL_GetTick>
 8005c54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c56:	e008      	b.n	8005c6a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c58:	f7fd ff06 	bl	8003a68 <HAL_GetTick>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	1ad3      	subs	r3, r2, r3
 8005c62:	2b02      	cmp	r3, #2
 8005c64:	d901      	bls.n	8005c6a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005c66:	2303      	movs	r3, #3
 8005c68:	e056      	b.n	8005d18 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c6a:	4b2e      	ldr	r3, [pc, #184]	; (8005d24 <HAL_RCC_OscConfig+0x4e8>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d0f0      	beq.n	8005c58 <HAL_RCC_OscConfig+0x41c>
 8005c76:	e04e      	b.n	8005d16 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c78:	4b2b      	ldr	r3, [pc, #172]	; (8005d28 <HAL_RCC_OscConfig+0x4ec>)
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c7e:	f7fd fef3 	bl	8003a68 <HAL_GetTick>
 8005c82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c84:	e008      	b.n	8005c98 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c86:	f7fd feef 	bl	8003a68 <HAL_GetTick>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	1ad3      	subs	r3, r2, r3
 8005c90:	2b02      	cmp	r3, #2
 8005c92:	d901      	bls.n	8005c98 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005c94:	2303      	movs	r3, #3
 8005c96:	e03f      	b.n	8005d18 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c98:	4b22      	ldr	r3, [pc, #136]	; (8005d24 <HAL_RCC_OscConfig+0x4e8>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d1f0      	bne.n	8005c86 <HAL_RCC_OscConfig+0x44a>
 8005ca4:	e037      	b.n	8005d16 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	699b      	ldr	r3, [r3, #24]
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d101      	bne.n	8005cb2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e032      	b.n	8005d18 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005cb2:	4b1c      	ldr	r3, [pc, #112]	; (8005d24 <HAL_RCC_OscConfig+0x4e8>)
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	699b      	ldr	r3, [r3, #24]
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d028      	beq.n	8005d12 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d121      	bne.n	8005d12 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d11a      	bne.n	8005d12 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005cdc:	68fa      	ldr	r2, [r7, #12]
 8005cde:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005ce2:	4013      	ands	r3, r2
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005ce8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d111      	bne.n	8005d12 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cf8:	085b      	lsrs	r3, r3, #1
 8005cfa:	3b01      	subs	r3, #1
 8005cfc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d107      	bne.n	8005d12 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d0c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d001      	beq.n	8005d16 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	e000      	b.n	8005d18 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005d16:	2300      	movs	r3, #0
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3718      	adds	r7, #24
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}
 8005d20:	40007000 	.word	0x40007000
 8005d24:	40023800 	.word	0x40023800
 8005d28:	42470060 	.word	0x42470060

08005d2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b084      	sub	sp, #16
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d101      	bne.n	8005d40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	e0cc      	b.n	8005eda <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005d40:	4b68      	ldr	r3, [pc, #416]	; (8005ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f003 0307 	and.w	r3, r3, #7
 8005d48:	683a      	ldr	r2, [r7, #0]
 8005d4a:	429a      	cmp	r2, r3
 8005d4c:	d90c      	bls.n	8005d68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d4e:	4b65      	ldr	r3, [pc, #404]	; (8005ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8005d50:	683a      	ldr	r2, [r7, #0]
 8005d52:	b2d2      	uxtb	r2, r2
 8005d54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d56:	4b63      	ldr	r3, [pc, #396]	; (8005ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f003 0307 	and.w	r3, r3, #7
 8005d5e:	683a      	ldr	r2, [r7, #0]
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d001      	beq.n	8005d68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005d64:	2301      	movs	r3, #1
 8005d66:	e0b8      	b.n	8005eda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f003 0302 	and.w	r3, r3, #2
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d020      	beq.n	8005db6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f003 0304 	and.w	r3, r3, #4
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d005      	beq.n	8005d8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d80:	4b59      	ldr	r3, [pc, #356]	; (8005ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	4a58      	ldr	r2, [pc, #352]	; (8005ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005d8a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f003 0308 	and.w	r3, r3, #8
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d005      	beq.n	8005da4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d98:	4b53      	ldr	r3, [pc, #332]	; (8005ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	4a52      	ldr	r2, [pc, #328]	; (8005ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005da2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005da4:	4b50      	ldr	r3, [pc, #320]	; (8005ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	494d      	ldr	r1, [pc, #308]	; (8005ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8005db2:	4313      	orrs	r3, r2
 8005db4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f003 0301 	and.w	r3, r3, #1
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d044      	beq.n	8005e4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d107      	bne.n	8005dda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dca:	4b47      	ldr	r3, [pc, #284]	; (8005ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d119      	bne.n	8005e0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e07f      	b.n	8005eda <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	2b02      	cmp	r3, #2
 8005de0:	d003      	beq.n	8005dea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005de6:	2b03      	cmp	r3, #3
 8005de8:	d107      	bne.n	8005dfa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005dea:	4b3f      	ldr	r3, [pc, #252]	; (8005ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d109      	bne.n	8005e0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	e06f      	b.n	8005eda <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dfa:	4b3b      	ldr	r3, [pc, #236]	; (8005ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f003 0302 	and.w	r3, r3, #2
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d101      	bne.n	8005e0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	e067      	b.n	8005eda <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e0a:	4b37      	ldr	r3, [pc, #220]	; (8005ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	f023 0203 	bic.w	r2, r3, #3
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	4934      	ldr	r1, [pc, #208]	; (8005ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e1c:	f7fd fe24 	bl	8003a68 <HAL_GetTick>
 8005e20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e22:	e00a      	b.n	8005e3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e24:	f7fd fe20 	bl	8003a68 <HAL_GetTick>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	1ad3      	subs	r3, r2, r3
 8005e2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d901      	bls.n	8005e3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005e36:	2303      	movs	r3, #3
 8005e38:	e04f      	b.n	8005eda <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e3a:	4b2b      	ldr	r3, [pc, #172]	; (8005ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	f003 020c 	and.w	r2, r3, #12
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d1eb      	bne.n	8005e24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005e4c:	4b25      	ldr	r3, [pc, #148]	; (8005ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f003 0307 	and.w	r3, r3, #7
 8005e54:	683a      	ldr	r2, [r7, #0]
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d20c      	bcs.n	8005e74 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e5a:	4b22      	ldr	r3, [pc, #136]	; (8005ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8005e5c:	683a      	ldr	r2, [r7, #0]
 8005e5e:	b2d2      	uxtb	r2, r2
 8005e60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e62:	4b20      	ldr	r3, [pc, #128]	; (8005ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f003 0307 	and.w	r3, r3, #7
 8005e6a:	683a      	ldr	r2, [r7, #0]
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d001      	beq.n	8005e74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005e70:	2301      	movs	r3, #1
 8005e72:	e032      	b.n	8005eda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f003 0304 	and.w	r3, r3, #4
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d008      	beq.n	8005e92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e80:	4b19      	ldr	r3, [pc, #100]	; (8005ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	4916      	ldr	r1, [pc, #88]	; (8005ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f003 0308 	and.w	r3, r3, #8
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d009      	beq.n	8005eb2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e9e:	4b12      	ldr	r3, [pc, #72]	; (8005ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	691b      	ldr	r3, [r3, #16]
 8005eaa:	00db      	lsls	r3, r3, #3
 8005eac:	490e      	ldr	r1, [pc, #56]	; (8005ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005eb2:	f000 f821 	bl	8005ef8 <HAL_RCC_GetSysClockFreq>
 8005eb6:	4602      	mov	r2, r0
 8005eb8:	4b0b      	ldr	r3, [pc, #44]	; (8005ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	091b      	lsrs	r3, r3, #4
 8005ebe:	f003 030f 	and.w	r3, r3, #15
 8005ec2:	490a      	ldr	r1, [pc, #40]	; (8005eec <HAL_RCC_ClockConfig+0x1c0>)
 8005ec4:	5ccb      	ldrb	r3, [r1, r3]
 8005ec6:	fa22 f303 	lsr.w	r3, r2, r3
 8005eca:	4a09      	ldr	r2, [pc, #36]	; (8005ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8005ecc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005ece:	4b09      	ldr	r3, [pc, #36]	; (8005ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f7fd fd84 	bl	80039e0 <HAL_InitTick>

  return HAL_OK;
 8005ed8:	2300      	movs	r3, #0
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3710      	adds	r7, #16
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	bf00      	nop
 8005ee4:	40023c00 	.word	0x40023c00
 8005ee8:	40023800 	.word	0x40023800
 8005eec:	0800e4e4 	.word	0x0800e4e4
 8005ef0:	20000008 	.word	0x20000008
 8005ef4:	2000000c 	.word	0x2000000c

08005ef8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ef8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005efc:	b084      	sub	sp, #16
 8005efe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005f00:	2300      	movs	r3, #0
 8005f02:	607b      	str	r3, [r7, #4]
 8005f04:	2300      	movs	r3, #0
 8005f06:	60fb      	str	r3, [r7, #12]
 8005f08:	2300      	movs	r3, #0
 8005f0a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f10:	4b67      	ldr	r3, [pc, #412]	; (80060b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	f003 030c 	and.w	r3, r3, #12
 8005f18:	2b08      	cmp	r3, #8
 8005f1a:	d00d      	beq.n	8005f38 <HAL_RCC_GetSysClockFreq+0x40>
 8005f1c:	2b08      	cmp	r3, #8
 8005f1e:	f200 80bd 	bhi.w	800609c <HAL_RCC_GetSysClockFreq+0x1a4>
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d002      	beq.n	8005f2c <HAL_RCC_GetSysClockFreq+0x34>
 8005f26:	2b04      	cmp	r3, #4
 8005f28:	d003      	beq.n	8005f32 <HAL_RCC_GetSysClockFreq+0x3a>
 8005f2a:	e0b7      	b.n	800609c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005f2c:	4b61      	ldr	r3, [pc, #388]	; (80060b4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005f2e:	60bb      	str	r3, [r7, #8]
       break;
 8005f30:	e0b7      	b.n	80060a2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005f32:	4b61      	ldr	r3, [pc, #388]	; (80060b8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005f34:	60bb      	str	r3, [r7, #8]
      break;
 8005f36:	e0b4      	b.n	80060a2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005f38:	4b5d      	ldr	r3, [pc, #372]	; (80060b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f40:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005f42:	4b5b      	ldr	r3, [pc, #364]	; (80060b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d04d      	beq.n	8005fea <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f4e:	4b58      	ldr	r3, [pc, #352]	; (80060b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	099b      	lsrs	r3, r3, #6
 8005f54:	461a      	mov	r2, r3
 8005f56:	f04f 0300 	mov.w	r3, #0
 8005f5a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005f5e:	f04f 0100 	mov.w	r1, #0
 8005f62:	ea02 0800 	and.w	r8, r2, r0
 8005f66:	ea03 0901 	and.w	r9, r3, r1
 8005f6a:	4640      	mov	r0, r8
 8005f6c:	4649      	mov	r1, r9
 8005f6e:	f04f 0200 	mov.w	r2, #0
 8005f72:	f04f 0300 	mov.w	r3, #0
 8005f76:	014b      	lsls	r3, r1, #5
 8005f78:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005f7c:	0142      	lsls	r2, r0, #5
 8005f7e:	4610      	mov	r0, r2
 8005f80:	4619      	mov	r1, r3
 8005f82:	ebb0 0008 	subs.w	r0, r0, r8
 8005f86:	eb61 0109 	sbc.w	r1, r1, r9
 8005f8a:	f04f 0200 	mov.w	r2, #0
 8005f8e:	f04f 0300 	mov.w	r3, #0
 8005f92:	018b      	lsls	r3, r1, #6
 8005f94:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005f98:	0182      	lsls	r2, r0, #6
 8005f9a:	1a12      	subs	r2, r2, r0
 8005f9c:	eb63 0301 	sbc.w	r3, r3, r1
 8005fa0:	f04f 0000 	mov.w	r0, #0
 8005fa4:	f04f 0100 	mov.w	r1, #0
 8005fa8:	00d9      	lsls	r1, r3, #3
 8005faa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005fae:	00d0      	lsls	r0, r2, #3
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	460b      	mov	r3, r1
 8005fb4:	eb12 0208 	adds.w	r2, r2, r8
 8005fb8:	eb43 0309 	adc.w	r3, r3, r9
 8005fbc:	f04f 0000 	mov.w	r0, #0
 8005fc0:	f04f 0100 	mov.w	r1, #0
 8005fc4:	0259      	lsls	r1, r3, #9
 8005fc6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005fca:	0250      	lsls	r0, r2, #9
 8005fcc:	4602      	mov	r2, r0
 8005fce:	460b      	mov	r3, r1
 8005fd0:	4610      	mov	r0, r2
 8005fd2:	4619      	mov	r1, r3
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	f04f 0300 	mov.w	r3, #0
 8005fdc:	f7fa fe54 	bl	8000c88 <__aeabi_uldivmod>
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	460b      	mov	r3, r1
 8005fe4:	4613      	mov	r3, r2
 8005fe6:	60fb      	str	r3, [r7, #12]
 8005fe8:	e04a      	b.n	8006080 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005fea:	4b31      	ldr	r3, [pc, #196]	; (80060b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	099b      	lsrs	r3, r3, #6
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	f04f 0300 	mov.w	r3, #0
 8005ff6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005ffa:	f04f 0100 	mov.w	r1, #0
 8005ffe:	ea02 0400 	and.w	r4, r2, r0
 8006002:	ea03 0501 	and.w	r5, r3, r1
 8006006:	4620      	mov	r0, r4
 8006008:	4629      	mov	r1, r5
 800600a:	f04f 0200 	mov.w	r2, #0
 800600e:	f04f 0300 	mov.w	r3, #0
 8006012:	014b      	lsls	r3, r1, #5
 8006014:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006018:	0142      	lsls	r2, r0, #5
 800601a:	4610      	mov	r0, r2
 800601c:	4619      	mov	r1, r3
 800601e:	1b00      	subs	r0, r0, r4
 8006020:	eb61 0105 	sbc.w	r1, r1, r5
 8006024:	f04f 0200 	mov.w	r2, #0
 8006028:	f04f 0300 	mov.w	r3, #0
 800602c:	018b      	lsls	r3, r1, #6
 800602e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006032:	0182      	lsls	r2, r0, #6
 8006034:	1a12      	subs	r2, r2, r0
 8006036:	eb63 0301 	sbc.w	r3, r3, r1
 800603a:	f04f 0000 	mov.w	r0, #0
 800603e:	f04f 0100 	mov.w	r1, #0
 8006042:	00d9      	lsls	r1, r3, #3
 8006044:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006048:	00d0      	lsls	r0, r2, #3
 800604a:	4602      	mov	r2, r0
 800604c:	460b      	mov	r3, r1
 800604e:	1912      	adds	r2, r2, r4
 8006050:	eb45 0303 	adc.w	r3, r5, r3
 8006054:	f04f 0000 	mov.w	r0, #0
 8006058:	f04f 0100 	mov.w	r1, #0
 800605c:	0299      	lsls	r1, r3, #10
 800605e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006062:	0290      	lsls	r0, r2, #10
 8006064:	4602      	mov	r2, r0
 8006066:	460b      	mov	r3, r1
 8006068:	4610      	mov	r0, r2
 800606a:	4619      	mov	r1, r3
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	461a      	mov	r2, r3
 8006070:	f04f 0300 	mov.w	r3, #0
 8006074:	f7fa fe08 	bl	8000c88 <__aeabi_uldivmod>
 8006078:	4602      	mov	r2, r0
 800607a:	460b      	mov	r3, r1
 800607c:	4613      	mov	r3, r2
 800607e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006080:	4b0b      	ldr	r3, [pc, #44]	; (80060b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	0c1b      	lsrs	r3, r3, #16
 8006086:	f003 0303 	and.w	r3, r3, #3
 800608a:	3301      	adds	r3, #1
 800608c:	005b      	lsls	r3, r3, #1
 800608e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006090:	68fa      	ldr	r2, [r7, #12]
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	fbb2 f3f3 	udiv	r3, r2, r3
 8006098:	60bb      	str	r3, [r7, #8]
      break;
 800609a:	e002      	b.n	80060a2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800609c:	4b05      	ldr	r3, [pc, #20]	; (80060b4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800609e:	60bb      	str	r3, [r7, #8]
      break;
 80060a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80060a2:	68bb      	ldr	r3, [r7, #8]
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3710      	adds	r7, #16
 80060a8:	46bd      	mov	sp, r7
 80060aa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80060ae:	bf00      	nop
 80060b0:	40023800 	.word	0x40023800
 80060b4:	00f42400 	.word	0x00f42400
 80060b8:	007a1200 	.word	0x007a1200

080060bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80060bc:	b480      	push	{r7}
 80060be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80060c0:	4b03      	ldr	r3, [pc, #12]	; (80060d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80060c2:	681b      	ldr	r3, [r3, #0]
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr
 80060ce:	bf00      	nop
 80060d0:	20000008 	.word	0x20000008

080060d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80060d8:	f7ff fff0 	bl	80060bc <HAL_RCC_GetHCLKFreq>
 80060dc:	4602      	mov	r2, r0
 80060de:	4b05      	ldr	r3, [pc, #20]	; (80060f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	0a9b      	lsrs	r3, r3, #10
 80060e4:	f003 0307 	and.w	r3, r3, #7
 80060e8:	4903      	ldr	r1, [pc, #12]	; (80060f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80060ea:	5ccb      	ldrb	r3, [r1, r3]
 80060ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	bd80      	pop	{r7, pc}
 80060f4:	40023800 	.word	0x40023800
 80060f8:	0800e4f4 	.word	0x0800e4f4

080060fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006100:	f7ff ffdc 	bl	80060bc <HAL_RCC_GetHCLKFreq>
 8006104:	4602      	mov	r2, r0
 8006106:	4b05      	ldr	r3, [pc, #20]	; (800611c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	0b5b      	lsrs	r3, r3, #13
 800610c:	f003 0307 	and.w	r3, r3, #7
 8006110:	4903      	ldr	r1, [pc, #12]	; (8006120 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006112:	5ccb      	ldrb	r3, [r1, r3]
 8006114:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006118:	4618      	mov	r0, r3
 800611a:	bd80      	pop	{r7, pc}
 800611c:	40023800 	.word	0x40023800
 8006120:	0800e4f4 	.word	0x0800e4f4

08006124 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b086      	sub	sp, #24
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800612c:	2300      	movs	r3, #0
 800612e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006130:	2300      	movs	r3, #0
 8006132:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f003 0301 	and.w	r3, r3, #1
 800613c:	2b00      	cmp	r3, #0
 800613e:	d105      	bne.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006148:	2b00      	cmp	r3, #0
 800614a:	d035      	beq.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800614c:	4b62      	ldr	r3, [pc, #392]	; (80062d8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800614e:	2200      	movs	r2, #0
 8006150:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006152:	f7fd fc89 	bl	8003a68 <HAL_GetTick>
 8006156:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006158:	e008      	b.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800615a:	f7fd fc85 	bl	8003a68 <HAL_GetTick>
 800615e:	4602      	mov	r2, r0
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	1ad3      	subs	r3, r2, r3
 8006164:	2b02      	cmp	r3, #2
 8006166:	d901      	bls.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006168:	2303      	movs	r3, #3
 800616a:	e0b0      	b.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800616c:	4b5b      	ldr	r3, [pc, #364]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006174:	2b00      	cmp	r3, #0
 8006176:	d1f0      	bne.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	019a      	lsls	r2, r3, #6
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	071b      	lsls	r3, r3, #28
 8006184:	4955      	ldr	r1, [pc, #340]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006186:	4313      	orrs	r3, r2
 8006188:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800618c:	4b52      	ldr	r3, [pc, #328]	; (80062d8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800618e:	2201      	movs	r2, #1
 8006190:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006192:	f7fd fc69 	bl	8003a68 <HAL_GetTick>
 8006196:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006198:	e008      	b.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800619a:	f7fd fc65 	bl	8003a68 <HAL_GetTick>
 800619e:	4602      	mov	r2, r0
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	1ad3      	subs	r3, r2, r3
 80061a4:	2b02      	cmp	r3, #2
 80061a6:	d901      	bls.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80061a8:	2303      	movs	r3, #3
 80061aa:	e090      	b.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80061ac:	4b4b      	ldr	r3, [pc, #300]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d0f0      	beq.n	800619a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f003 0302 	and.w	r3, r3, #2
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	f000 8083 	beq.w	80062cc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80061c6:	2300      	movs	r3, #0
 80061c8:	60fb      	str	r3, [r7, #12]
 80061ca:	4b44      	ldr	r3, [pc, #272]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80061cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ce:	4a43      	ldr	r2, [pc, #268]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80061d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061d4:	6413      	str	r3, [r2, #64]	; 0x40
 80061d6:	4b41      	ldr	r3, [pc, #260]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80061d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061de:	60fb      	str	r3, [r7, #12]
 80061e0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80061e2:	4b3f      	ldr	r3, [pc, #252]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a3e      	ldr	r2, [pc, #248]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80061e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061ec:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80061ee:	f7fd fc3b 	bl	8003a68 <HAL_GetTick>
 80061f2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80061f4:	e008      	b.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80061f6:	f7fd fc37 	bl	8003a68 <HAL_GetTick>
 80061fa:	4602      	mov	r2, r0
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	1ad3      	subs	r3, r2, r3
 8006200:	2b02      	cmp	r3, #2
 8006202:	d901      	bls.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006204:	2303      	movs	r3, #3
 8006206:	e062      	b.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006208:	4b35      	ldr	r3, [pc, #212]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006210:	2b00      	cmp	r3, #0
 8006212:	d0f0      	beq.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006214:	4b31      	ldr	r3, [pc, #196]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006218:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800621c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d02f      	beq.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800622c:	693a      	ldr	r2, [r7, #16]
 800622e:	429a      	cmp	r2, r3
 8006230:	d028      	beq.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006232:	4b2a      	ldr	r3, [pc, #168]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006236:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800623a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800623c:	4b29      	ldr	r3, [pc, #164]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800623e:	2201      	movs	r2, #1
 8006240:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006242:	4b28      	ldr	r3, [pc, #160]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006244:	2200      	movs	r2, #0
 8006246:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006248:	4a24      	ldr	r2, [pc, #144]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800624e:	4b23      	ldr	r3, [pc, #140]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006252:	f003 0301 	and.w	r3, r3, #1
 8006256:	2b01      	cmp	r3, #1
 8006258:	d114      	bne.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800625a:	f7fd fc05 	bl	8003a68 <HAL_GetTick>
 800625e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006260:	e00a      	b.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006262:	f7fd fc01 	bl	8003a68 <HAL_GetTick>
 8006266:	4602      	mov	r2, r0
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	1ad3      	subs	r3, r2, r3
 800626c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006270:	4293      	cmp	r3, r2
 8006272:	d901      	bls.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006274:	2303      	movs	r3, #3
 8006276:	e02a      	b.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006278:	4b18      	ldr	r3, [pc, #96]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800627a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800627c:	f003 0302 	and.w	r3, r3, #2
 8006280:	2b00      	cmp	r3, #0
 8006282:	d0ee      	beq.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800628c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006290:	d10d      	bne.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006292:	4b12      	ldr	r3, [pc, #72]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	68db      	ldr	r3, [r3, #12]
 800629e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80062a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062a6:	490d      	ldr	r1, [pc, #52]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80062a8:	4313      	orrs	r3, r2
 80062aa:	608b      	str	r3, [r1, #8]
 80062ac:	e005      	b.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x196>
 80062ae:	4b0b      	ldr	r3, [pc, #44]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	4a0a      	ldr	r2, [pc, #40]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80062b4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80062b8:	6093      	str	r3, [r2, #8]
 80062ba:	4b08      	ldr	r3, [pc, #32]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80062bc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	68db      	ldr	r3, [r3, #12]
 80062c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062c6:	4905      	ldr	r1, [pc, #20]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80062c8:	4313      	orrs	r3, r2
 80062ca:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80062cc:	2300      	movs	r3, #0
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3718      	adds	r7, #24
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	bf00      	nop
 80062d8:	42470068 	.word	0x42470068
 80062dc:	40023800 	.word	0x40023800
 80062e0:	40007000 	.word	0x40007000
 80062e4:	42470e40 	.word	0x42470e40

080062e8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b082      	sub	sp, #8
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d101      	bne.n	80062fa <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	e083      	b.n	8006402 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	7f5b      	ldrb	r3, [r3, #29]
 80062fe:	b2db      	uxtb	r3, r3
 8006300:	2b00      	cmp	r3, #0
 8006302:	d105      	bne.n	8006310 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2200      	movs	r2, #0
 8006308:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f7fd f89e 	bl	800344c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2202      	movs	r2, #2
 8006314:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	22ca      	movs	r2, #202	; 0xca
 800631c:	625a      	str	r2, [r3, #36]	; 0x24
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	2253      	movs	r2, #83	; 0x53
 8006324:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f000 faa8 	bl	800687c <RTC_EnterInitMode>
 800632c:	4603      	mov	r3, r0
 800632e:	2b00      	cmp	r3, #0
 8006330:	d008      	beq.n	8006344 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	22ff      	movs	r2, #255	; 0xff
 8006338:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2204      	movs	r2, #4
 800633e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8006340:	2301      	movs	r3, #1
 8006342:	e05e      	b.n	8006402 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	687a      	ldr	r2, [r7, #4]
 800634c:	6812      	ldr	r2, [r2, #0]
 800634e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006352:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006356:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	6899      	ldr	r1, [r3, #8]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	685a      	ldr	r2, [r3, #4]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	691b      	ldr	r3, [r3, #16]
 8006366:	431a      	orrs	r2, r3
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	695b      	ldr	r3, [r3, #20]
 800636c:	431a      	orrs	r2, r3
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	430a      	orrs	r2, r1
 8006374:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	687a      	ldr	r2, [r7, #4]
 800637c:	68d2      	ldr	r2, [r2, #12]
 800637e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	6919      	ldr	r1, [r3, #16]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	689b      	ldr	r3, [r3, #8]
 800638a:	041a      	lsls	r2, r3, #16
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	430a      	orrs	r2, r1
 8006392:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	68da      	ldr	r2, [r3, #12]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80063a2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	f003 0320 	and.w	r3, r3, #32
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d10e      	bne.n	80063d0 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f000 fa3a 	bl	800682c <HAL_RTC_WaitForSynchro>
 80063b8:	4603      	mov	r3, r0
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d008      	beq.n	80063d0 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	22ff      	movs	r2, #255	; 0xff
 80063c4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2204      	movs	r2, #4
 80063ca:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80063cc:	2301      	movs	r3, #1
 80063ce:	e018      	b.n	8006402 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80063de:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	699a      	ldr	r2, [r3, #24]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	430a      	orrs	r2, r1
 80063f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	22ff      	movs	r2, #255	; 0xff
 80063f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2201      	movs	r2, #1
 80063fe:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8006400:	2300      	movs	r3, #0
  }
}
 8006402:	4618      	mov	r0, r3
 8006404:	3708      	adds	r7, #8
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}

0800640a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800640a:	b590      	push	{r4, r7, lr}
 800640c:	b087      	sub	sp, #28
 800640e:	af00      	add	r7, sp, #0
 8006410:	60f8      	str	r0, [r7, #12]
 8006412:	60b9      	str	r1, [r7, #8]
 8006414:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006416:	2300      	movs	r3, #0
 8006418:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	7f1b      	ldrb	r3, [r3, #28]
 800641e:	2b01      	cmp	r3, #1
 8006420:	d101      	bne.n	8006426 <HAL_RTC_SetTime+0x1c>
 8006422:	2302      	movs	r3, #2
 8006424:	e0aa      	b.n	800657c <HAL_RTC_SetTime+0x172>
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2201      	movs	r2, #1
 800642a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2202      	movs	r2, #2
 8006430:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d126      	bne.n	8006486 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006442:	2b00      	cmp	r3, #0
 8006444:	d102      	bne.n	800644c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	2200      	movs	r2, #0
 800644a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	4618      	mov	r0, r3
 8006452:	f000 fa3f 	bl	80068d4 <RTC_ByteToBcd2>
 8006456:	4603      	mov	r3, r0
 8006458:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	785b      	ldrb	r3, [r3, #1]
 800645e:	4618      	mov	r0, r3
 8006460:	f000 fa38 	bl	80068d4 <RTC_ByteToBcd2>
 8006464:	4603      	mov	r3, r0
 8006466:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006468:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	789b      	ldrb	r3, [r3, #2]
 800646e:	4618      	mov	r0, r3
 8006470:	f000 fa30 	bl	80068d4 <RTC_ByteToBcd2>
 8006474:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8006476:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	78db      	ldrb	r3, [r3, #3]
 800647e:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006480:	4313      	orrs	r3, r2
 8006482:	617b      	str	r3, [r7, #20]
 8006484:	e018      	b.n	80064b8 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	689b      	ldr	r3, [r3, #8]
 800648c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006490:	2b00      	cmp	r3, #0
 8006492:	d102      	bne.n	800649a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	2200      	movs	r2, #0
 8006498:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	781b      	ldrb	r3, [r3, #0]
 800649e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	785b      	ldrb	r3, [r3, #1]
 80064a4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80064a6:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80064a8:	68ba      	ldr	r2, [r7, #8]
 80064aa:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80064ac:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	78db      	ldrb	r3, [r3, #3]
 80064b2:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80064b4:	4313      	orrs	r3, r2
 80064b6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	22ca      	movs	r2, #202	; 0xca
 80064be:	625a      	str	r2, [r3, #36]	; 0x24
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	2253      	movs	r2, #83	; 0x53
 80064c6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80064c8:	68f8      	ldr	r0, [r7, #12]
 80064ca:	f000 f9d7 	bl	800687c <RTC_EnterInitMode>
 80064ce:	4603      	mov	r3, r0
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d00b      	beq.n	80064ec <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	22ff      	movs	r2, #255	; 0xff
 80064da:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2204      	movs	r2, #4
 80064e0:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2200      	movs	r2, #0
 80064e6:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80064e8:	2301      	movs	r3, #1
 80064ea:	e047      	b.n	800657c <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80064f6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80064fa:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	689a      	ldr	r2, [r3, #8]
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800650a:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	6899      	ldr	r1, [r3, #8]
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	68da      	ldr	r2, [r3, #12]
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	691b      	ldr	r3, [r3, #16]
 800651a:	431a      	orrs	r2, r3
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	430a      	orrs	r2, r1
 8006522:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	68da      	ldr	r2, [r3, #12]
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006532:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	f003 0320 	and.w	r3, r3, #32
 800653e:	2b00      	cmp	r3, #0
 8006540:	d111      	bne.n	8006566 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006542:	68f8      	ldr	r0, [r7, #12]
 8006544:	f000 f972 	bl	800682c <HAL_RTC_WaitForSynchro>
 8006548:	4603      	mov	r3, r0
 800654a:	2b00      	cmp	r3, #0
 800654c:	d00b      	beq.n	8006566 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	22ff      	movs	r2, #255	; 0xff
 8006554:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2204      	movs	r2, #4
 800655a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2200      	movs	r2, #0
 8006560:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8006562:	2301      	movs	r3, #1
 8006564:	e00a      	b.n	800657c <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	22ff      	movs	r2, #255	; 0xff
 800656c:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2201      	movs	r2, #1
 8006572:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2200      	movs	r2, #0
 8006578:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800657a:	2300      	movs	r3, #0
  }
}
 800657c:	4618      	mov	r0, r3
 800657e:	371c      	adds	r7, #28
 8006580:	46bd      	mov	sp, r7
 8006582:	bd90      	pop	{r4, r7, pc}

08006584 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b086      	sub	sp, #24
 8006588:	af00      	add	r7, sp, #0
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	60b9      	str	r1, [r7, #8]
 800658e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006590:	2300      	movs	r3, #0
 8006592:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	691b      	ldr	r3, [r3, #16]
 80065a4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80065b6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80065ba:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	0c1b      	lsrs	r3, r3, #16
 80065c0:	b2db      	uxtb	r3, r3
 80065c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80065c6:	b2da      	uxtb	r2, r3
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	0a1b      	lsrs	r3, r3, #8
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065d6:	b2da      	uxtb	r2, r3
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	b2db      	uxtb	r3, r3
 80065e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065e4:	b2da      	uxtb	r2, r3
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	0c1b      	lsrs	r3, r3, #16
 80065ee:	b2db      	uxtb	r3, r3
 80065f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065f4:	b2da      	uxtb	r2, r3
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d11a      	bne.n	8006636 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	4618      	mov	r0, r3
 8006606:	f000 f983 	bl	8006910 <RTC_Bcd2ToByte>
 800660a:	4603      	mov	r3, r0
 800660c:	461a      	mov	r2, r3
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	785b      	ldrb	r3, [r3, #1]
 8006616:	4618      	mov	r0, r3
 8006618:	f000 f97a 	bl	8006910 <RTC_Bcd2ToByte>
 800661c:	4603      	mov	r3, r0
 800661e:	461a      	mov	r2, r3
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	789b      	ldrb	r3, [r3, #2]
 8006628:	4618      	mov	r0, r3
 800662a:	f000 f971 	bl	8006910 <RTC_Bcd2ToByte>
 800662e:	4603      	mov	r3, r0
 8006630:	461a      	mov	r2, r3
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006636:	2300      	movs	r3, #0
}
 8006638:	4618      	mov	r0, r3
 800663a:	3718      	adds	r7, #24
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}

08006640 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006640:	b590      	push	{r4, r7, lr}
 8006642:	b087      	sub	sp, #28
 8006644:	af00      	add	r7, sp, #0
 8006646:	60f8      	str	r0, [r7, #12]
 8006648:	60b9      	str	r1, [r7, #8]
 800664a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800664c:	2300      	movs	r3, #0
 800664e:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	7f1b      	ldrb	r3, [r3, #28]
 8006654:	2b01      	cmp	r3, #1
 8006656:	d101      	bne.n	800665c <HAL_RTC_SetDate+0x1c>
 8006658:	2302      	movs	r3, #2
 800665a:	e094      	b.n	8006786 <HAL_RTC_SetDate+0x146>
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2201      	movs	r2, #1
 8006660:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2202      	movs	r2, #2
 8006666:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d10e      	bne.n	800668c <HAL_RTC_SetDate+0x4c>
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	785b      	ldrb	r3, [r3, #1]
 8006672:	f003 0310 	and.w	r3, r3, #16
 8006676:	2b00      	cmp	r3, #0
 8006678:	d008      	beq.n	800668c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	785b      	ldrb	r3, [r3, #1]
 800667e:	f023 0310 	bic.w	r3, r3, #16
 8006682:	b2db      	uxtb	r3, r3
 8006684:	330a      	adds	r3, #10
 8006686:	b2da      	uxtb	r2, r3
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d11c      	bne.n	80066cc <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	78db      	ldrb	r3, [r3, #3]
 8006696:	4618      	mov	r0, r3
 8006698:	f000 f91c 	bl	80068d4 <RTC_ByteToBcd2>
 800669c:	4603      	mov	r3, r0
 800669e:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	785b      	ldrb	r3, [r3, #1]
 80066a4:	4618      	mov	r0, r3
 80066a6:	f000 f915 	bl	80068d4 <RTC_ByteToBcd2>
 80066aa:	4603      	mov	r3, r0
 80066ac:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80066ae:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	789b      	ldrb	r3, [r3, #2]
 80066b4:	4618      	mov	r0, r3
 80066b6:	f000 f90d 	bl	80068d4 <RTC_ByteToBcd2>
 80066ba:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80066bc:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80066c6:	4313      	orrs	r3, r2
 80066c8:	617b      	str	r3, [r7, #20]
 80066ca:	e00e      	b.n	80066ea <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	78db      	ldrb	r3, [r3, #3]
 80066d0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	785b      	ldrb	r3, [r3, #1]
 80066d6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80066d8:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80066da:	68ba      	ldr	r2, [r7, #8]
 80066dc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80066de:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	781b      	ldrb	r3, [r3, #0]
 80066e4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80066e6:	4313      	orrs	r3, r2
 80066e8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	22ca      	movs	r2, #202	; 0xca
 80066f0:	625a      	str	r2, [r3, #36]	; 0x24
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	2253      	movs	r2, #83	; 0x53
 80066f8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80066fa:	68f8      	ldr	r0, [r7, #12]
 80066fc:	f000 f8be 	bl	800687c <RTC_EnterInitMode>
 8006700:	4603      	mov	r3, r0
 8006702:	2b00      	cmp	r3, #0
 8006704:	d00b      	beq.n	800671e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	22ff      	movs	r2, #255	; 0xff
 800670c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2204      	movs	r2, #4
 8006712:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2200      	movs	r2, #0
 8006718:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	e033      	b.n	8006786 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681a      	ldr	r2, [r3, #0]
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006728:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800672c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	68da      	ldr	r2, [r3, #12]
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800673c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	f003 0320 	and.w	r3, r3, #32
 8006748:	2b00      	cmp	r3, #0
 800674a:	d111      	bne.n	8006770 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800674c:	68f8      	ldr	r0, [r7, #12]
 800674e:	f000 f86d 	bl	800682c <HAL_RTC_WaitForSynchro>
 8006752:	4603      	mov	r3, r0
 8006754:	2b00      	cmp	r3, #0
 8006756:	d00b      	beq.n	8006770 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	22ff      	movs	r2, #255	; 0xff
 800675e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2204      	movs	r2, #4
 8006764:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2200      	movs	r2, #0
 800676a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800676c:	2301      	movs	r3, #1
 800676e:	e00a      	b.n	8006786 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	22ff      	movs	r2, #255	; 0xff
 8006776:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2201      	movs	r2, #1
 800677c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2200      	movs	r2, #0
 8006782:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8006784:	2300      	movs	r3, #0
  }
}
 8006786:	4618      	mov	r0, r3
 8006788:	371c      	adds	r7, #28
 800678a:	46bd      	mov	sp, r7
 800678c:	bd90      	pop	{r4, r7, pc}

0800678e <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800678e:	b580      	push	{r7, lr}
 8006790:	b086      	sub	sp, #24
 8006792:	af00      	add	r7, sp, #0
 8006794:	60f8      	str	r0, [r7, #12]
 8006796:	60b9      	str	r1, [r7, #8]
 8006798:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800679a:	2300      	movs	r3, #0
 800679c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80067a8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80067ac:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	0c1b      	lsrs	r3, r3, #16
 80067b2:	b2da      	uxtb	r2, r3
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	0a1b      	lsrs	r3, r3, #8
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	f003 031f 	and.w	r3, r3, #31
 80067c2:	b2da      	uxtb	r2, r3
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80067d0:	b2da      	uxtb	r2, r3
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	0b5b      	lsrs	r3, r3, #13
 80067da:	b2db      	uxtb	r3, r3
 80067dc:	f003 0307 	and.w	r3, r3, #7
 80067e0:	b2da      	uxtb	r2, r3
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d11a      	bne.n	8006822 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	78db      	ldrb	r3, [r3, #3]
 80067f0:	4618      	mov	r0, r3
 80067f2:	f000 f88d 	bl	8006910 <RTC_Bcd2ToByte>
 80067f6:	4603      	mov	r3, r0
 80067f8:	461a      	mov	r2, r3
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	785b      	ldrb	r3, [r3, #1]
 8006802:	4618      	mov	r0, r3
 8006804:	f000 f884 	bl	8006910 <RTC_Bcd2ToByte>
 8006808:	4603      	mov	r3, r0
 800680a:	461a      	mov	r2, r3
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	789b      	ldrb	r3, [r3, #2]
 8006814:	4618      	mov	r0, r3
 8006816:	f000 f87b 	bl	8006910 <RTC_Bcd2ToByte>
 800681a:	4603      	mov	r3, r0
 800681c:	461a      	mov	r2, r3
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006822:	2300      	movs	r3, #0
}
 8006824:	4618      	mov	r0, r3
 8006826:	3718      	adds	r7, #24
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}

0800682c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b084      	sub	sp, #16
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006834:	2300      	movs	r3, #0
 8006836:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	68da      	ldr	r2, [r3, #12]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006846:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006848:	f7fd f90e 	bl	8003a68 <HAL_GetTick>
 800684c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800684e:	e009      	b.n	8006864 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006850:	f7fd f90a 	bl	8003a68 <HAL_GetTick>
 8006854:	4602      	mov	r2, r0
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	1ad3      	subs	r3, r2, r3
 800685a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800685e:	d901      	bls.n	8006864 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006860:	2303      	movs	r3, #3
 8006862:	e007      	b.n	8006874 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	68db      	ldr	r3, [r3, #12]
 800686a:	f003 0320 	and.w	r3, r3, #32
 800686e:	2b00      	cmp	r3, #0
 8006870:	d0ee      	beq.n	8006850 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006872:	2300      	movs	r3, #0
}
 8006874:	4618      	mov	r0, r3
 8006876:	3710      	adds	r7, #16
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}

0800687c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b084      	sub	sp, #16
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006884:	2300      	movs	r3, #0
 8006886:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	68db      	ldr	r3, [r3, #12]
 800688e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006892:	2b00      	cmp	r3, #0
 8006894:	d119      	bne.n	80068ca <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f04f 32ff 	mov.w	r2, #4294967295
 800689e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80068a0:	f7fd f8e2 	bl	8003a68 <HAL_GetTick>
 80068a4:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80068a6:	e009      	b.n	80068bc <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80068a8:	f7fd f8de 	bl	8003a68 <HAL_GetTick>
 80068ac:	4602      	mov	r2, r0
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	1ad3      	subs	r3, r2, r3
 80068b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80068b6:	d901      	bls.n	80068bc <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80068b8:	2303      	movs	r3, #3
 80068ba:	e007      	b.n	80068cc <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	68db      	ldr	r3, [r3, #12]
 80068c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d0ee      	beq.n	80068a8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80068ca:	2300      	movs	r3, #0
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3710      	adds	r7, #16
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}

080068d4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b085      	sub	sp, #20
 80068d8:	af00      	add	r7, sp, #0
 80068da:	4603      	mov	r3, r0
 80068dc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80068de:	2300      	movs	r3, #0
 80068e0:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 80068e2:	e005      	b.n	80068f0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	3301      	adds	r3, #1
 80068e8:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80068ea:	79fb      	ldrb	r3, [r7, #7]
 80068ec:	3b0a      	subs	r3, #10
 80068ee:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 80068f0:	79fb      	ldrb	r3, [r7, #7]
 80068f2:	2b09      	cmp	r3, #9
 80068f4:	d8f6      	bhi.n	80068e4 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	b2db      	uxtb	r3, r3
 80068fa:	011b      	lsls	r3, r3, #4
 80068fc:	b2da      	uxtb	r2, r3
 80068fe:	79fb      	ldrb	r3, [r7, #7]
 8006900:	4313      	orrs	r3, r2
 8006902:	b2db      	uxtb	r3, r3
}
 8006904:	4618      	mov	r0, r3
 8006906:	3714      	adds	r7, #20
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr

08006910 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006910:	b480      	push	{r7}
 8006912:	b085      	sub	sp, #20
 8006914:	af00      	add	r7, sp, #0
 8006916:	4603      	mov	r3, r0
 8006918:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800691a:	2300      	movs	r3, #0
 800691c:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800691e:	79fb      	ldrb	r3, [r7, #7]
 8006920:	091b      	lsrs	r3, r3, #4
 8006922:	b2db      	uxtb	r3, r3
 8006924:	461a      	mov	r2, r3
 8006926:	4613      	mov	r3, r2
 8006928:	009b      	lsls	r3, r3, #2
 800692a:	4413      	add	r3, r2
 800692c:	005b      	lsls	r3, r3, #1
 800692e:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8006930:	79fb      	ldrb	r3, [r7, #7]
 8006932:	f003 030f 	and.w	r3, r3, #15
 8006936:	b2da      	uxtb	r2, r3
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	b2db      	uxtb	r3, r3
 800693c:	4413      	add	r3, r2
 800693e:	b2db      	uxtb	r3, r3
}
 8006940:	4618      	mov	r0, r3
 8006942:	3714      	adds	r7, #20
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr

0800694c <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800694c:	b480      	push	{r7}
 800694e:	b087      	sub	sp, #28
 8006950:	af00      	add	r7, sp, #0
 8006952:	60f8      	str	r0, [r7, #12]
 8006954:	60b9      	str	r1, [r7, #8]
 8006956:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8006958:	2300      	movs	r3, #0
 800695a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	3350      	adds	r3, #80	; 0x50
 8006962:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	009b      	lsls	r3, r3, #2
 8006968:	697a      	ldr	r2, [r7, #20]
 800696a:	4413      	add	r3, r2
 800696c:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	687a      	ldr	r2, [r7, #4]
 8006972:	601a      	str	r2, [r3, #0]
}
 8006974:	bf00      	nop
 8006976:	371c      	adds	r7, #28
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr

08006980 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8006980:	b480      	push	{r7}
 8006982:	b085      	sub	sp, #20
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800698a:	2300      	movs	r3, #0
 800698c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	3350      	adds	r3, #80	; 0x50
 8006994:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	009b      	lsls	r3, r3, #2
 800699a:	68fa      	ldr	r2, [r7, #12]
 800699c:	4413      	add	r3, r2
 800699e:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3714      	adds	r7, #20
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr

080069b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b082      	sub	sp, #8
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d101      	bne.n	80069c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80069be:	2301      	movs	r3, #1
 80069c0:	e07b      	b.n	8006aba <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d108      	bne.n	80069dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069d2:	d009      	beq.n	80069e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2200      	movs	r2, #0
 80069d8:	61da      	str	r2, [r3, #28]
 80069da:	e005      	b.n	80069e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2200      	movs	r2, #0
 80069e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2200      	movs	r2, #0
 80069e6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2200      	movs	r2, #0
 80069ec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80069f4:	b2db      	uxtb	r3, r3
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d106      	bne.n	8006a08 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2200      	movs	r2, #0
 80069fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f7fc fd38 	bl	8003478 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2202      	movs	r2, #2
 8006a0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	681a      	ldr	r2, [r3, #0]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a1e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006a30:	431a      	orrs	r2, r3
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	68db      	ldr	r3, [r3, #12]
 8006a36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a3a:	431a      	orrs	r2, r3
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	691b      	ldr	r3, [r3, #16]
 8006a40:	f003 0302 	and.w	r3, r3, #2
 8006a44:	431a      	orrs	r2, r3
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	695b      	ldr	r3, [r3, #20]
 8006a4a:	f003 0301 	and.w	r3, r3, #1
 8006a4e:	431a      	orrs	r2, r3
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	699b      	ldr	r3, [r3, #24]
 8006a54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a58:	431a      	orrs	r2, r3
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	69db      	ldr	r3, [r3, #28]
 8006a5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a62:	431a      	orrs	r2, r3
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6a1b      	ldr	r3, [r3, #32]
 8006a68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a6c:	ea42 0103 	orr.w	r1, r2, r3
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a74:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	430a      	orrs	r2, r1
 8006a7e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	699b      	ldr	r3, [r3, #24]
 8006a84:	0c1b      	lsrs	r3, r3, #16
 8006a86:	f003 0104 	and.w	r1, r3, #4
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a8e:	f003 0210 	and.w	r2, r3, #16
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	430a      	orrs	r2, r1
 8006a98:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	69da      	ldr	r2, [r3, #28]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006aa8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2200      	movs	r2, #0
 8006aae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006ab8:	2300      	movs	r3, #0
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3708      	adds	r7, #8
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}

08006ac2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ac2:	b580      	push	{r7, lr}
 8006ac4:	b088      	sub	sp, #32
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	60f8      	str	r0, [r7, #12]
 8006aca:	60b9      	str	r1, [r7, #8]
 8006acc:	603b      	str	r3, [r7, #0]
 8006ace:	4613      	mov	r3, r2
 8006ad0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	d101      	bne.n	8006ae4 <HAL_SPI_Transmit+0x22>
 8006ae0:	2302      	movs	r3, #2
 8006ae2:	e126      	b.n	8006d32 <HAL_SPI_Transmit+0x270>
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006aec:	f7fc ffbc 	bl	8003a68 <HAL_GetTick>
 8006af0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006af2:	88fb      	ldrh	r3, [r7, #6]
 8006af4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006afc:	b2db      	uxtb	r3, r3
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	d002      	beq.n	8006b08 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006b02:	2302      	movs	r3, #2
 8006b04:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006b06:	e10b      	b.n	8006d20 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d002      	beq.n	8006b14 <HAL_SPI_Transmit+0x52>
 8006b0e:	88fb      	ldrh	r3, [r7, #6]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d102      	bne.n	8006b1a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006b14:	2301      	movs	r3, #1
 8006b16:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006b18:	e102      	b.n	8006d20 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2203      	movs	r2, #3
 8006b1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2200      	movs	r2, #0
 8006b26:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	68ba      	ldr	r2, [r7, #8]
 8006b2c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	88fa      	ldrh	r2, [r7, #6]
 8006b32:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	88fa      	ldrh	r2, [r7, #6]
 8006b38:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2200      	movs	r2, #0
 8006b44:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2200      	movs	r2, #0
 8006b56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b60:	d10f      	bne.n	8006b82 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	681a      	ldr	r2, [r3, #0]
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b70:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	681a      	ldr	r2, [r3, #0]
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b80:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b8c:	2b40      	cmp	r3, #64	; 0x40
 8006b8e:	d007      	beq.n	8006ba0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	681a      	ldr	r2, [r3, #0]
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b9e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	68db      	ldr	r3, [r3, #12]
 8006ba4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ba8:	d14b      	bne.n	8006c42 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d002      	beq.n	8006bb8 <HAL_SPI_Transmit+0xf6>
 8006bb2:	8afb      	ldrh	r3, [r7, #22]
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d13e      	bne.n	8006c36 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bbc:	881a      	ldrh	r2, [r3, #0]
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bc8:	1c9a      	adds	r2, r3, #2
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	3b01      	subs	r3, #1
 8006bd6:	b29a      	uxth	r2, r3
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006bdc:	e02b      	b.n	8006c36 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	f003 0302 	and.w	r3, r3, #2
 8006be8:	2b02      	cmp	r3, #2
 8006bea:	d112      	bne.n	8006c12 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bf0:	881a      	ldrh	r2, [r3, #0]
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bfc:	1c9a      	adds	r2, r3, #2
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	3b01      	subs	r3, #1
 8006c0a:	b29a      	uxth	r2, r3
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	86da      	strh	r2, [r3, #54]	; 0x36
 8006c10:	e011      	b.n	8006c36 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c12:	f7fc ff29 	bl	8003a68 <HAL_GetTick>
 8006c16:	4602      	mov	r2, r0
 8006c18:	69bb      	ldr	r3, [r7, #24]
 8006c1a:	1ad3      	subs	r3, r2, r3
 8006c1c:	683a      	ldr	r2, [r7, #0]
 8006c1e:	429a      	cmp	r2, r3
 8006c20:	d803      	bhi.n	8006c2a <HAL_SPI_Transmit+0x168>
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c28:	d102      	bne.n	8006c30 <HAL_SPI_Transmit+0x16e>
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d102      	bne.n	8006c36 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006c30:	2303      	movs	r3, #3
 8006c32:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006c34:	e074      	b.n	8006d20 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c3a:	b29b      	uxth	r3, r3
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d1ce      	bne.n	8006bde <HAL_SPI_Transmit+0x11c>
 8006c40:	e04c      	b.n	8006cdc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d002      	beq.n	8006c50 <HAL_SPI_Transmit+0x18e>
 8006c4a:	8afb      	ldrh	r3, [r7, #22]
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	d140      	bne.n	8006cd2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	330c      	adds	r3, #12
 8006c5a:	7812      	ldrb	r2, [r2, #0]
 8006c5c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c62:	1c5a      	adds	r2, r3, #1
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	3b01      	subs	r3, #1
 8006c70:	b29a      	uxth	r2, r3
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006c76:	e02c      	b.n	8006cd2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	f003 0302 	and.w	r3, r3, #2
 8006c82:	2b02      	cmp	r3, #2
 8006c84:	d113      	bne.n	8006cae <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	330c      	adds	r3, #12
 8006c90:	7812      	ldrb	r2, [r2, #0]
 8006c92:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c98:	1c5a      	adds	r2, r3, #1
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	3b01      	subs	r3, #1
 8006ca6:	b29a      	uxth	r2, r3
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	86da      	strh	r2, [r3, #54]	; 0x36
 8006cac:	e011      	b.n	8006cd2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006cae:	f7fc fedb 	bl	8003a68 <HAL_GetTick>
 8006cb2:	4602      	mov	r2, r0
 8006cb4:	69bb      	ldr	r3, [r7, #24]
 8006cb6:	1ad3      	subs	r3, r2, r3
 8006cb8:	683a      	ldr	r2, [r7, #0]
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d803      	bhi.n	8006cc6 <HAL_SPI_Transmit+0x204>
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cc4:	d102      	bne.n	8006ccc <HAL_SPI_Transmit+0x20a>
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d102      	bne.n	8006cd2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006ccc:	2303      	movs	r3, #3
 8006cce:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006cd0:	e026      	b.n	8006d20 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d1cd      	bne.n	8006c78 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006cdc:	69ba      	ldr	r2, [r7, #24]
 8006cde:	6839      	ldr	r1, [r7, #0]
 8006ce0:	68f8      	ldr	r0, [r7, #12]
 8006ce2:	f000 f9ff 	bl	80070e4 <SPI_EndRxTxTransaction>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d002      	beq.n	8006cf2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2220      	movs	r2, #32
 8006cf0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	689b      	ldr	r3, [r3, #8]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d10a      	bne.n	8006d10 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	613b      	str	r3, [r7, #16]
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	68db      	ldr	r3, [r3, #12]
 8006d04:	613b      	str	r3, [r7, #16]
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	689b      	ldr	r3, [r3, #8]
 8006d0c:	613b      	str	r3, [r7, #16]
 8006d0e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d002      	beq.n	8006d1e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	77fb      	strb	r3, [r7, #31]
 8006d1c:	e000      	b.n	8006d20 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006d1e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2201      	movs	r2, #1
 8006d24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006d30:	7ffb      	ldrb	r3, [r7, #31]
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3720      	adds	r7, #32
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}
	...

08006d3c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b086      	sub	sp, #24
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	60f8      	str	r0, [r7, #12]
 8006d44:	60b9      	str	r1, [r7, #8]
 8006d46:	4613      	mov	r3, r2
 8006d48:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	d101      	bne.n	8006d5c <HAL_SPI_Transmit_DMA+0x20>
 8006d58:	2302      	movs	r3, #2
 8006d5a:	e09b      	b.n	8006e94 <HAL_SPI_Transmit_DMA+0x158>
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2201      	movs	r2, #1
 8006d60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006d6a:	b2db      	uxtb	r3, r3
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d002      	beq.n	8006d76 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8006d70:	2302      	movs	r3, #2
 8006d72:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006d74:	e089      	b.n	8006e8a <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d002      	beq.n	8006d82 <HAL_SPI_Transmit_DMA+0x46>
 8006d7c:	88fb      	ldrh	r3, [r7, #6]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d102      	bne.n	8006d88 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8006d82:	2301      	movs	r3, #1
 8006d84:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006d86:	e080      	b.n	8006e8a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2203      	movs	r2, #3
 8006d8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2200      	movs	r2, #0
 8006d94:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	68ba      	ldr	r2, [r7, #8]
 8006d9a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	88fa      	ldrh	r2, [r7, #6]
 8006da0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	88fa      	ldrh	r2, [r7, #6]
 8006da6:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2200      	movs	r2, #0
 8006dac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2200      	movs	r2, #0
 8006db2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2200      	movs	r2, #0
 8006db8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006dce:	d10f      	bne.n	8006df0 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	681a      	ldr	r2, [r3, #0]
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006dde:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	681a      	ldr	r2, [r3, #0]
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006dee:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006df4:	4a29      	ldr	r2, [pc, #164]	; (8006e9c <HAL_SPI_Transmit_DMA+0x160>)
 8006df6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dfc:	4a28      	ldr	r2, [pc, #160]	; (8006ea0 <HAL_SPI_Transmit_DMA+0x164>)
 8006dfe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e04:	4a27      	ldr	r2, [pc, #156]	; (8006ea4 <HAL_SPI_Transmit_DMA+0x168>)
 8006e06:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e18:	4619      	mov	r1, r3
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	330c      	adds	r3, #12
 8006e20:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e26:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006e28:	f7fd f80e 	bl	8003e48 <HAL_DMA_Start_IT>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d00c      	beq.n	8006e4c <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e36:	f043 0210 	orr.w	r2, r3, #16
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2201      	movs	r2, #1
 8006e46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8006e4a:	e01e      	b.n	8006e8a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e56:	2b40      	cmp	r3, #64	; 0x40
 8006e58:	d007      	beq.n	8006e6a <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	681a      	ldr	r2, [r3, #0]
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e68:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	685a      	ldr	r2, [r3, #4]
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f042 0220 	orr.w	r2, r2, #32
 8006e78:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	685a      	ldr	r2, [r3, #4]
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f042 0202 	orr.w	r2, r2, #2
 8006e88:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006e92:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3718      	adds	r7, #24
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}
 8006e9c:	08006f79 	.word	0x08006f79
 8006ea0:	08006ed1 	.word	0x08006ed1
 8006ea4:	08006f95 	.word	0x08006f95

08006ea8 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b083      	sub	sp, #12
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8006eb0:	bf00      	nop
 8006eb2:	370c      	adds	r7, #12
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr

08006ebc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b083      	sub	sp, #12
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006ec4:	bf00      	nop
 8006ec6:	370c      	adds	r7, #12
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr

08006ed0 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b086      	sub	sp, #24
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006edc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ede:	f7fc fdc3 	bl	8003a68 <HAL_GetTick>
 8006ee2:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006eee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ef2:	d03b      	beq.n	8006f6c <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	685a      	ldr	r2, [r3, #4]
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f022 0220 	bic.w	r2, r2, #32
 8006f02:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	685a      	ldr	r2, [r3, #4]
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f022 0202 	bic.w	r2, r2, #2
 8006f12:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006f14:	693a      	ldr	r2, [r7, #16]
 8006f16:	2164      	movs	r1, #100	; 0x64
 8006f18:	6978      	ldr	r0, [r7, #20]
 8006f1a:	f000 f8e3 	bl	80070e4 <SPI_EndRxTxTransaction>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d005      	beq.n	8006f30 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f28:	f043 0220 	orr.w	r2, r3, #32
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	689b      	ldr	r3, [r3, #8]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d10a      	bne.n	8006f4e <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f38:	2300      	movs	r3, #0
 8006f3a:	60fb      	str	r3, [r7, #12]
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	68db      	ldr	r3, [r3, #12]
 8006f42:	60fb      	str	r3, [r7, #12]
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	60fb      	str	r3, [r7, #12]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	2200      	movs	r2, #0
 8006f52:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	2201      	movs	r2, #1
 8006f58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d003      	beq.n	8006f6c <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006f64:	6978      	ldr	r0, [r7, #20]
 8006f66:	f7ff ffa9 	bl	8006ebc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006f6a:	e002      	b.n	8006f72 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8006f6c:	6978      	ldr	r0, [r7, #20]
 8006f6e:	f7fa f8fb 	bl	8001168 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006f72:	3718      	adds	r7, #24
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}

08006f78 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b084      	sub	sp, #16
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f84:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8006f86:	68f8      	ldr	r0, [r7, #12]
 8006f88:	f7ff ff8e 	bl	8006ea8 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006f8c:	bf00      	nop
 8006f8e:	3710      	adds	r7, #16
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b084      	sub	sp, #16
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fa0:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	685a      	ldr	r2, [r3, #4]
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f022 0203 	bic.w	r2, r2, #3
 8006fb0:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fb6:	f043 0210 	orr.w	r2, r3, #16
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2201      	movs	r2, #1
 8006fc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006fc6:	68f8      	ldr	r0, [r7, #12]
 8006fc8:	f7ff ff78 	bl	8006ebc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006fcc:	bf00      	nop
 8006fce:	3710      	adds	r7, #16
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}

08006fd4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b088      	sub	sp, #32
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	60f8      	str	r0, [r7, #12]
 8006fdc:	60b9      	str	r1, [r7, #8]
 8006fde:	603b      	str	r3, [r7, #0]
 8006fe0:	4613      	mov	r3, r2
 8006fe2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006fe4:	f7fc fd40 	bl	8003a68 <HAL_GetTick>
 8006fe8:	4602      	mov	r2, r0
 8006fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fec:	1a9b      	subs	r3, r3, r2
 8006fee:	683a      	ldr	r2, [r7, #0]
 8006ff0:	4413      	add	r3, r2
 8006ff2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006ff4:	f7fc fd38 	bl	8003a68 <HAL_GetTick>
 8006ff8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006ffa:	4b39      	ldr	r3, [pc, #228]	; (80070e0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	015b      	lsls	r3, r3, #5
 8007000:	0d1b      	lsrs	r3, r3, #20
 8007002:	69fa      	ldr	r2, [r7, #28]
 8007004:	fb02 f303 	mul.w	r3, r2, r3
 8007008:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800700a:	e054      	b.n	80070b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007012:	d050      	beq.n	80070b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007014:	f7fc fd28 	bl	8003a68 <HAL_GetTick>
 8007018:	4602      	mov	r2, r0
 800701a:	69bb      	ldr	r3, [r7, #24]
 800701c:	1ad3      	subs	r3, r2, r3
 800701e:	69fa      	ldr	r2, [r7, #28]
 8007020:	429a      	cmp	r2, r3
 8007022:	d902      	bls.n	800702a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007024:	69fb      	ldr	r3, [r7, #28]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d13d      	bne.n	80070a6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	685a      	ldr	r2, [r3, #4]
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007038:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007042:	d111      	bne.n	8007068 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	689b      	ldr	r3, [r3, #8]
 8007048:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800704c:	d004      	beq.n	8007058 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	689b      	ldr	r3, [r3, #8]
 8007052:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007056:	d107      	bne.n	8007068 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	681a      	ldr	r2, [r3, #0]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007066:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800706c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007070:	d10f      	bne.n	8007092 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	681a      	ldr	r2, [r3, #0]
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007080:	601a      	str	r2, [r3, #0]
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	681a      	ldr	r2, [r3, #0]
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007090:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2201      	movs	r2, #1
 8007096:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2200      	movs	r2, #0
 800709e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80070a2:	2303      	movs	r3, #3
 80070a4:	e017      	b.n	80070d6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d101      	bne.n	80070b0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80070ac:	2300      	movs	r3, #0
 80070ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	3b01      	subs	r3, #1
 80070b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	689a      	ldr	r2, [r3, #8]
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	4013      	ands	r3, r2
 80070c0:	68ba      	ldr	r2, [r7, #8]
 80070c2:	429a      	cmp	r2, r3
 80070c4:	bf0c      	ite	eq
 80070c6:	2301      	moveq	r3, #1
 80070c8:	2300      	movne	r3, #0
 80070ca:	b2db      	uxtb	r3, r3
 80070cc:	461a      	mov	r2, r3
 80070ce:	79fb      	ldrb	r3, [r7, #7]
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d19b      	bne.n	800700c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80070d4:	2300      	movs	r3, #0
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3720      	adds	r7, #32
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}
 80070de:	bf00      	nop
 80070e0:	20000008 	.word	0x20000008

080070e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b088      	sub	sp, #32
 80070e8:	af02      	add	r7, sp, #8
 80070ea:	60f8      	str	r0, [r7, #12]
 80070ec:	60b9      	str	r1, [r7, #8]
 80070ee:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80070f0:	4b1b      	ldr	r3, [pc, #108]	; (8007160 <SPI_EndRxTxTransaction+0x7c>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a1b      	ldr	r2, [pc, #108]	; (8007164 <SPI_EndRxTxTransaction+0x80>)
 80070f6:	fba2 2303 	umull	r2, r3, r2, r3
 80070fa:	0d5b      	lsrs	r3, r3, #21
 80070fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007100:	fb02 f303 	mul.w	r3, r2, r3
 8007104:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800710e:	d112      	bne.n	8007136 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	9300      	str	r3, [sp, #0]
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	2200      	movs	r2, #0
 8007118:	2180      	movs	r1, #128	; 0x80
 800711a:	68f8      	ldr	r0, [r7, #12]
 800711c:	f7ff ff5a 	bl	8006fd4 <SPI_WaitFlagStateUntilTimeout>
 8007120:	4603      	mov	r3, r0
 8007122:	2b00      	cmp	r3, #0
 8007124:	d016      	beq.n	8007154 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800712a:	f043 0220 	orr.w	r2, r3, #32
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007132:	2303      	movs	r3, #3
 8007134:	e00f      	b.n	8007156 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d00a      	beq.n	8007152 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	3b01      	subs	r3, #1
 8007140:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800714c:	2b80      	cmp	r3, #128	; 0x80
 800714e:	d0f2      	beq.n	8007136 <SPI_EndRxTxTransaction+0x52>
 8007150:	e000      	b.n	8007154 <SPI_EndRxTxTransaction+0x70>
        break;
 8007152:	bf00      	nop
  }

  return HAL_OK;
 8007154:	2300      	movs	r3, #0
}
 8007156:	4618      	mov	r0, r3
 8007158:	3718      	adds	r7, #24
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}
 800715e:	bf00      	nop
 8007160:	20000008 	.word	0x20000008
 8007164:	165e9f81 	.word	0x165e9f81

08007168 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b082      	sub	sp, #8
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d101      	bne.n	800717a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007176:	2301      	movs	r3, #1
 8007178:	e03f      	b.n	80071fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007180:	b2db      	uxtb	r3, r3
 8007182:	2b00      	cmp	r3, #0
 8007184:	d106      	bne.n	8007194 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2200      	movs	r2, #0
 800718a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f7fc f9ec 	bl	800356c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2224      	movs	r2, #36	; 0x24
 8007198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	68da      	ldr	r2, [r3, #12]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80071aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f001 f839 	bl	8008224 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	691a      	ldr	r2, [r3, #16]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80071c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	695a      	ldr	r2, [r3, #20]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80071d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	68da      	ldr	r2, [r3, #12]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80071e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2200      	movs	r2, #0
 80071e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2220      	movs	r2, #32
 80071ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2220      	movs	r2, #32
 80071f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80071f8:	2300      	movs	r3, #0
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3708      	adds	r7, #8
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}

08007202 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007202:	b580      	push	{r7, lr}
 8007204:	b08a      	sub	sp, #40	; 0x28
 8007206:	af02      	add	r7, sp, #8
 8007208:	60f8      	str	r0, [r7, #12]
 800720a:	60b9      	str	r1, [r7, #8]
 800720c:	603b      	str	r3, [r7, #0]
 800720e:	4613      	mov	r3, r2
 8007210:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007212:	2300      	movs	r3, #0
 8007214:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800721c:	b2db      	uxtb	r3, r3
 800721e:	2b20      	cmp	r3, #32
 8007220:	d17c      	bne.n	800731c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d002      	beq.n	800722e <HAL_UART_Transmit+0x2c>
 8007228:	88fb      	ldrh	r3, [r7, #6]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d101      	bne.n	8007232 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800722e:	2301      	movs	r3, #1
 8007230:	e075      	b.n	800731e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007238:	2b01      	cmp	r3, #1
 800723a:	d101      	bne.n	8007240 <HAL_UART_Transmit+0x3e>
 800723c:	2302      	movs	r3, #2
 800723e:	e06e      	b.n	800731e <HAL_UART_Transmit+0x11c>
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2201      	movs	r2, #1
 8007244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2200      	movs	r2, #0
 800724c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2221      	movs	r2, #33	; 0x21
 8007252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007256:	f7fc fc07 	bl	8003a68 <HAL_GetTick>
 800725a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	88fa      	ldrh	r2, [r7, #6]
 8007260:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	88fa      	ldrh	r2, [r7, #6]
 8007266:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	689b      	ldr	r3, [r3, #8]
 800726c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007270:	d108      	bne.n	8007284 <HAL_UART_Transmit+0x82>
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	691b      	ldr	r3, [r3, #16]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d104      	bne.n	8007284 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800727a:	2300      	movs	r3, #0
 800727c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	61bb      	str	r3, [r7, #24]
 8007282:	e003      	b.n	800728c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007288:	2300      	movs	r3, #0
 800728a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2200      	movs	r2, #0
 8007290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007294:	e02a      	b.n	80072ec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	9300      	str	r3, [sp, #0]
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	2200      	movs	r2, #0
 800729e:	2180      	movs	r1, #128	; 0x80
 80072a0:	68f8      	ldr	r0, [r7, #12]
 80072a2:	f000 fcf5 	bl	8007c90 <UART_WaitOnFlagUntilTimeout>
 80072a6:	4603      	mov	r3, r0
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d001      	beq.n	80072b0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80072ac:	2303      	movs	r3, #3
 80072ae:	e036      	b.n	800731e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80072b0:	69fb      	ldr	r3, [r7, #28]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d10b      	bne.n	80072ce <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80072b6:	69bb      	ldr	r3, [r7, #24]
 80072b8:	881b      	ldrh	r3, [r3, #0]
 80072ba:	461a      	mov	r2, r3
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80072c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80072c6:	69bb      	ldr	r3, [r7, #24]
 80072c8:	3302      	adds	r3, #2
 80072ca:	61bb      	str	r3, [r7, #24]
 80072cc:	e007      	b.n	80072de <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80072ce:	69fb      	ldr	r3, [r7, #28]
 80072d0:	781a      	ldrb	r2, [r3, #0]
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80072d8:	69fb      	ldr	r3, [r7, #28]
 80072da:	3301      	adds	r3, #1
 80072dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	3b01      	subs	r3, #1
 80072e6:	b29a      	uxth	r2, r3
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80072f0:	b29b      	uxth	r3, r3
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d1cf      	bne.n	8007296 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	9300      	str	r3, [sp, #0]
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	2200      	movs	r2, #0
 80072fe:	2140      	movs	r1, #64	; 0x40
 8007300:	68f8      	ldr	r0, [r7, #12]
 8007302:	f000 fcc5 	bl	8007c90 <UART_WaitOnFlagUntilTimeout>
 8007306:	4603      	mov	r3, r0
 8007308:	2b00      	cmp	r3, #0
 800730a:	d001      	beq.n	8007310 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800730c:	2303      	movs	r3, #3
 800730e:	e006      	b.n	800731e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2220      	movs	r2, #32
 8007314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007318:	2300      	movs	r3, #0
 800731a:	e000      	b.n	800731e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800731c:	2302      	movs	r3, #2
  }
}
 800731e:	4618      	mov	r0, r3
 8007320:	3720      	adds	r7, #32
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}

08007326 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007326:	b580      	push	{r7, lr}
 8007328:	b08a      	sub	sp, #40	; 0x28
 800732a:	af02      	add	r7, sp, #8
 800732c:	60f8      	str	r0, [r7, #12]
 800732e:	60b9      	str	r1, [r7, #8]
 8007330:	603b      	str	r3, [r7, #0]
 8007332:	4613      	mov	r3, r2
 8007334:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007336:	2300      	movs	r3, #0
 8007338:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007340:	b2db      	uxtb	r3, r3
 8007342:	2b20      	cmp	r3, #32
 8007344:	f040 808c 	bne.w	8007460 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d002      	beq.n	8007354 <HAL_UART_Receive+0x2e>
 800734e:	88fb      	ldrh	r3, [r7, #6]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d101      	bne.n	8007358 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8007354:	2301      	movs	r3, #1
 8007356:	e084      	b.n	8007462 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800735e:	2b01      	cmp	r3, #1
 8007360:	d101      	bne.n	8007366 <HAL_UART_Receive+0x40>
 8007362:	2302      	movs	r3, #2
 8007364:	e07d      	b.n	8007462 <HAL_UART_Receive+0x13c>
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2201      	movs	r2, #1
 800736a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2200      	movs	r2, #0
 8007372:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2222      	movs	r2, #34	; 0x22
 8007378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2200      	movs	r2, #0
 8007380:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007382:	f7fc fb71 	bl	8003a68 <HAL_GetTick>
 8007386:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	88fa      	ldrh	r2, [r7, #6]
 800738c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	88fa      	ldrh	r2, [r7, #6]
 8007392:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	689b      	ldr	r3, [r3, #8]
 8007398:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800739c:	d108      	bne.n	80073b0 <HAL_UART_Receive+0x8a>
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	691b      	ldr	r3, [r3, #16]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d104      	bne.n	80073b0 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80073a6:	2300      	movs	r3, #0
 80073a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	61bb      	str	r3, [r7, #24]
 80073ae:	e003      	b.n	80073b8 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80073b4:	2300      	movs	r3, #0
 80073b6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2200      	movs	r2, #0
 80073bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80073c0:	e043      	b.n	800744a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	9300      	str	r3, [sp, #0]
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	2200      	movs	r2, #0
 80073ca:	2120      	movs	r1, #32
 80073cc:	68f8      	ldr	r0, [r7, #12]
 80073ce:	f000 fc5f 	bl	8007c90 <UART_WaitOnFlagUntilTimeout>
 80073d2:	4603      	mov	r3, r0
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d001      	beq.n	80073dc <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80073d8:	2303      	movs	r3, #3
 80073da:	e042      	b.n	8007462 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80073dc:	69fb      	ldr	r3, [r7, #28]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d10c      	bne.n	80073fc <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	b29b      	uxth	r3, r3
 80073ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073ee:	b29a      	uxth	r2, r3
 80073f0:	69bb      	ldr	r3, [r7, #24]
 80073f2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80073f4:	69bb      	ldr	r3, [r7, #24]
 80073f6:	3302      	adds	r3, #2
 80073f8:	61bb      	str	r3, [r7, #24]
 80073fa:	e01f      	b.n	800743c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	689b      	ldr	r3, [r3, #8]
 8007400:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007404:	d007      	beq.n	8007416 <HAL_UART_Receive+0xf0>
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	689b      	ldr	r3, [r3, #8]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d10a      	bne.n	8007424 <HAL_UART_Receive+0xfe>
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	691b      	ldr	r3, [r3, #16]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d106      	bne.n	8007424 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	685b      	ldr	r3, [r3, #4]
 800741c:	b2da      	uxtb	r2, r3
 800741e:	69fb      	ldr	r3, [r7, #28]
 8007420:	701a      	strb	r2, [r3, #0]
 8007422:	e008      	b.n	8007436 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	b2db      	uxtb	r3, r3
 800742c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007430:	b2da      	uxtb	r2, r3
 8007432:	69fb      	ldr	r3, [r7, #28]
 8007434:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8007436:	69fb      	ldr	r3, [r7, #28]
 8007438:	3301      	adds	r3, #1
 800743a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007440:	b29b      	uxth	r3, r3
 8007442:	3b01      	subs	r3, #1
 8007444:	b29a      	uxth	r2, r3
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800744e:	b29b      	uxth	r3, r3
 8007450:	2b00      	cmp	r3, #0
 8007452:	d1b6      	bne.n	80073c2 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	2220      	movs	r2, #32
 8007458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800745c:	2300      	movs	r3, #0
 800745e:	e000      	b.n	8007462 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8007460:	2302      	movs	r3, #2
  }
}
 8007462:	4618      	mov	r0, r3
 8007464:	3720      	adds	r7, #32
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}

0800746a <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800746a:	b580      	push	{r7, lr}
 800746c:	b08c      	sub	sp, #48	; 0x30
 800746e:	af00      	add	r7, sp, #0
 8007470:	60f8      	str	r0, [r7, #12]
 8007472:	60b9      	str	r1, [r7, #8]
 8007474:	4613      	mov	r3, r2
 8007476:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800747e:	b2db      	uxtb	r3, r3
 8007480:	2b20      	cmp	r3, #32
 8007482:	d152      	bne.n	800752a <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d002      	beq.n	8007490 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800748a:	88fb      	ldrh	r3, [r7, #6]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d101      	bne.n	8007494 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8007490:	2301      	movs	r3, #1
 8007492:	e04b      	b.n	800752c <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800749a:	2b01      	cmp	r3, #1
 800749c:	d101      	bne.n	80074a2 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 800749e:	2302      	movs	r3, #2
 80074a0:	e044      	b.n	800752c <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2201      	movs	r2, #1
 80074a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2201      	movs	r2, #1
 80074ae:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80074b0:	88fb      	ldrh	r3, [r7, #6]
 80074b2:	461a      	mov	r2, r3
 80074b4:	68b9      	ldr	r1, [r7, #8]
 80074b6:	68f8      	ldr	r0, [r7, #12]
 80074b8:	f000 fc58 	bl	8007d6c <UART_Start_Receive_DMA>
 80074bc:	4603      	mov	r3, r0
 80074be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80074c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d12c      	bne.n	8007524 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074ce:	2b01      	cmp	r3, #1
 80074d0:	d125      	bne.n	800751e <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80074d2:	2300      	movs	r3, #0
 80074d4:	613b      	str	r3, [r7, #16]
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	613b      	str	r3, [r7, #16]
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	685b      	ldr	r3, [r3, #4]
 80074e4:	613b      	str	r3, [r7, #16]
 80074e6:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	330c      	adds	r3, #12
 80074ee:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074f0:	69bb      	ldr	r3, [r7, #24]
 80074f2:	e853 3f00 	ldrex	r3, [r3]
 80074f6:	617b      	str	r3, [r7, #20]
   return(result);
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	f043 0310 	orr.w	r3, r3, #16
 80074fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	330c      	adds	r3, #12
 8007506:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007508:	627a      	str	r2, [r7, #36]	; 0x24
 800750a:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800750c:	6a39      	ldr	r1, [r7, #32]
 800750e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007510:	e841 2300 	strex	r3, r2, [r1]
 8007514:	61fb      	str	r3, [r7, #28]
   return(result);
 8007516:	69fb      	ldr	r3, [r7, #28]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d1e5      	bne.n	80074e8 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 800751c:	e002      	b.n	8007524 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800751e:	2301      	movs	r3, #1
 8007520:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8007524:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007528:	e000      	b.n	800752c <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 800752a:	2302      	movs	r3, #2
  }
}
 800752c:	4618      	mov	r0, r3
 800752e:	3730      	adds	r7, #48	; 0x30
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}

08007534 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b0ba      	sub	sp, #232	; 0xe8
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	68db      	ldr	r3, [r3, #12]
 800754c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	695b      	ldr	r3, [r3, #20]
 8007556:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800755a:	2300      	movs	r3, #0
 800755c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007560:	2300      	movs	r3, #0
 8007562:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007566:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800756a:	f003 030f 	and.w	r3, r3, #15
 800756e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007572:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007576:	2b00      	cmp	r3, #0
 8007578:	d10f      	bne.n	800759a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800757a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800757e:	f003 0320 	and.w	r3, r3, #32
 8007582:	2b00      	cmp	r3, #0
 8007584:	d009      	beq.n	800759a <HAL_UART_IRQHandler+0x66>
 8007586:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800758a:	f003 0320 	and.w	r3, r3, #32
 800758e:	2b00      	cmp	r3, #0
 8007590:	d003      	beq.n	800759a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f000 fd8b 	bl	80080ae <UART_Receive_IT>
      return;
 8007598:	e256      	b.n	8007a48 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800759a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800759e:	2b00      	cmp	r3, #0
 80075a0:	f000 80de 	beq.w	8007760 <HAL_UART_IRQHandler+0x22c>
 80075a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075a8:	f003 0301 	and.w	r3, r3, #1
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d106      	bne.n	80075be <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80075b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075b4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	f000 80d1 	beq.w	8007760 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80075be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075c2:	f003 0301 	and.w	r3, r3, #1
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d00b      	beq.n	80075e2 <HAL_UART_IRQHandler+0xae>
 80075ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d005      	beq.n	80075e2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075da:	f043 0201 	orr.w	r2, r3, #1
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80075e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075e6:	f003 0304 	and.w	r3, r3, #4
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d00b      	beq.n	8007606 <HAL_UART_IRQHandler+0xd2>
 80075ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075f2:	f003 0301 	and.w	r3, r3, #1
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d005      	beq.n	8007606 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075fe:	f043 0202 	orr.w	r2, r3, #2
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007606:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800760a:	f003 0302 	and.w	r3, r3, #2
 800760e:	2b00      	cmp	r3, #0
 8007610:	d00b      	beq.n	800762a <HAL_UART_IRQHandler+0xf6>
 8007612:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007616:	f003 0301 	and.w	r3, r3, #1
 800761a:	2b00      	cmp	r3, #0
 800761c:	d005      	beq.n	800762a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007622:	f043 0204 	orr.w	r2, r3, #4
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800762a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800762e:	f003 0308 	and.w	r3, r3, #8
 8007632:	2b00      	cmp	r3, #0
 8007634:	d011      	beq.n	800765a <HAL_UART_IRQHandler+0x126>
 8007636:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800763a:	f003 0320 	and.w	r3, r3, #32
 800763e:	2b00      	cmp	r3, #0
 8007640:	d105      	bne.n	800764e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007642:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007646:	f003 0301 	and.w	r3, r3, #1
 800764a:	2b00      	cmp	r3, #0
 800764c:	d005      	beq.n	800765a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007652:	f043 0208 	orr.w	r2, r3, #8
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800765e:	2b00      	cmp	r3, #0
 8007660:	f000 81ed 	beq.w	8007a3e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007664:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007668:	f003 0320 	and.w	r3, r3, #32
 800766c:	2b00      	cmp	r3, #0
 800766e:	d008      	beq.n	8007682 <HAL_UART_IRQHandler+0x14e>
 8007670:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007674:	f003 0320 	and.w	r3, r3, #32
 8007678:	2b00      	cmp	r3, #0
 800767a:	d002      	beq.n	8007682 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f000 fd16 	bl	80080ae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	695b      	ldr	r3, [r3, #20]
 8007688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800768c:	2b40      	cmp	r3, #64	; 0x40
 800768e:	bf0c      	ite	eq
 8007690:	2301      	moveq	r3, #1
 8007692:	2300      	movne	r3, #0
 8007694:	b2db      	uxtb	r3, r3
 8007696:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800769e:	f003 0308 	and.w	r3, r3, #8
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d103      	bne.n	80076ae <HAL_UART_IRQHandler+0x17a>
 80076a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d04f      	beq.n	800774e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f000 fc1e 	bl	8007ef0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	695b      	ldr	r3, [r3, #20]
 80076ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076be:	2b40      	cmp	r3, #64	; 0x40
 80076c0:	d141      	bne.n	8007746 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	3314      	adds	r3, #20
 80076c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80076d0:	e853 3f00 	ldrex	r3, [r3]
 80076d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80076d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80076dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	3314      	adds	r3, #20
 80076ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80076ee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80076f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80076fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80076fe:	e841 2300 	strex	r3, r2, [r1]
 8007702:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007706:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800770a:	2b00      	cmp	r3, #0
 800770c:	d1d9      	bne.n	80076c2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007712:	2b00      	cmp	r3, #0
 8007714:	d013      	beq.n	800773e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800771a:	4a7d      	ldr	r2, [pc, #500]	; (8007910 <HAL_UART_IRQHandler+0x3dc>)
 800771c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007722:	4618      	mov	r0, r3
 8007724:	f7fc fc58 	bl	8003fd8 <HAL_DMA_Abort_IT>
 8007728:	4603      	mov	r3, r0
 800772a:	2b00      	cmp	r3, #0
 800772c:	d016      	beq.n	800775c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007732:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007734:	687a      	ldr	r2, [r7, #4]
 8007736:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007738:	4610      	mov	r0, r2
 800773a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800773c:	e00e      	b.n	800775c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f000 f9a4 	bl	8007a8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007744:	e00a      	b.n	800775c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f000 f9a0 	bl	8007a8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800774c:	e006      	b.n	800775c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f000 f99c 	bl	8007a8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2200      	movs	r2, #0
 8007758:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800775a:	e170      	b.n	8007a3e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800775c:	bf00      	nop
    return;
 800775e:	e16e      	b.n	8007a3e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007764:	2b01      	cmp	r3, #1
 8007766:	f040 814a 	bne.w	80079fe <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800776a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800776e:	f003 0310 	and.w	r3, r3, #16
 8007772:	2b00      	cmp	r3, #0
 8007774:	f000 8143 	beq.w	80079fe <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007778:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800777c:	f003 0310 	and.w	r3, r3, #16
 8007780:	2b00      	cmp	r3, #0
 8007782:	f000 813c 	beq.w	80079fe <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007786:	2300      	movs	r3, #0
 8007788:	60bb      	str	r3, [r7, #8]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	60bb      	str	r3, [r7, #8]
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	60bb      	str	r3, [r7, #8]
 800779a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	695b      	ldr	r3, [r3, #20]
 80077a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077a6:	2b40      	cmp	r3, #64	; 0x40
 80077a8:	f040 80b4 	bne.w	8007914 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	685b      	ldr	r3, [r3, #4]
 80077b4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80077b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80077bc:	2b00      	cmp	r3, #0
 80077be:	f000 8140 	beq.w	8007a42 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80077c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80077ca:	429a      	cmp	r2, r3
 80077cc:	f080 8139 	bcs.w	8007a42 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80077d6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077dc:	69db      	ldr	r3, [r3, #28]
 80077de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077e2:	f000 8088 	beq.w	80078f6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	330c      	adds	r3, #12
 80077ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80077f4:	e853 3f00 	ldrex	r3, [r3]
 80077f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80077fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007800:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007804:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	330c      	adds	r3, #12
 800780e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007812:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007816:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800781a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800781e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007822:	e841 2300 	strex	r3, r2, [r1]
 8007826:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800782a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800782e:	2b00      	cmp	r3, #0
 8007830:	d1d9      	bne.n	80077e6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	3314      	adds	r3, #20
 8007838:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800783a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800783c:	e853 3f00 	ldrex	r3, [r3]
 8007840:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007842:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007844:	f023 0301 	bic.w	r3, r3, #1
 8007848:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	3314      	adds	r3, #20
 8007852:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007856:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800785a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800785c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800785e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007862:	e841 2300 	strex	r3, r2, [r1]
 8007866:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007868:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800786a:	2b00      	cmp	r3, #0
 800786c:	d1e1      	bne.n	8007832 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	3314      	adds	r3, #20
 8007874:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007876:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007878:	e853 3f00 	ldrex	r3, [r3]
 800787c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800787e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007880:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007884:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	3314      	adds	r3, #20
 800788e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007892:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007894:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007896:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007898:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800789a:	e841 2300 	strex	r3, r2, [r1]
 800789e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80078a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d1e3      	bne.n	800786e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2220      	movs	r2, #32
 80078aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2200      	movs	r2, #0
 80078b2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	330c      	adds	r3, #12
 80078ba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078be:	e853 3f00 	ldrex	r3, [r3]
 80078c2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80078c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078c6:	f023 0310 	bic.w	r3, r3, #16
 80078ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	330c      	adds	r3, #12
 80078d4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80078d8:	65ba      	str	r2, [r7, #88]	; 0x58
 80078da:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078dc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80078de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80078e0:	e841 2300 	strex	r3, r2, [r1]
 80078e4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80078e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d1e3      	bne.n	80078b4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078f0:	4618      	mov	r0, r3
 80078f2:	f7fc fb01 	bl	8003ef8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80078fe:	b29b      	uxth	r3, r3
 8007900:	1ad3      	subs	r3, r2, r3
 8007902:	b29b      	uxth	r3, r3
 8007904:	4619      	mov	r1, r3
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f7fb f828 	bl	800295c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800790c:	e099      	b.n	8007a42 <HAL_UART_IRQHandler+0x50e>
 800790e:	bf00      	nop
 8007910:	08007fb7 	.word	0x08007fb7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800791c:	b29b      	uxth	r3, r3
 800791e:	1ad3      	subs	r3, r2, r3
 8007920:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007928:	b29b      	uxth	r3, r3
 800792a:	2b00      	cmp	r3, #0
 800792c:	f000 808b 	beq.w	8007a46 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007930:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007934:	2b00      	cmp	r3, #0
 8007936:	f000 8086 	beq.w	8007a46 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	330c      	adds	r3, #12
 8007940:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007944:	e853 3f00 	ldrex	r3, [r3]
 8007948:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800794a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800794c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007950:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	330c      	adds	r3, #12
 800795a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800795e:	647a      	str	r2, [r7, #68]	; 0x44
 8007960:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007962:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007964:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007966:	e841 2300 	strex	r3, r2, [r1]
 800796a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800796c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800796e:	2b00      	cmp	r3, #0
 8007970:	d1e3      	bne.n	800793a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	3314      	adds	r3, #20
 8007978:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800797a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797c:	e853 3f00 	ldrex	r3, [r3]
 8007980:	623b      	str	r3, [r7, #32]
   return(result);
 8007982:	6a3b      	ldr	r3, [r7, #32]
 8007984:	f023 0301 	bic.w	r3, r3, #1
 8007988:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	3314      	adds	r3, #20
 8007992:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007996:	633a      	str	r2, [r7, #48]	; 0x30
 8007998:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800799a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800799c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800799e:	e841 2300 	strex	r3, r2, [r1]
 80079a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80079a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d1e3      	bne.n	8007972 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2220      	movs	r2, #32
 80079ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2200      	movs	r2, #0
 80079b6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	330c      	adds	r3, #12
 80079be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	e853 3f00 	ldrex	r3, [r3]
 80079c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	f023 0310 	bic.w	r3, r3, #16
 80079ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	330c      	adds	r3, #12
 80079d8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80079dc:	61fa      	str	r2, [r7, #28]
 80079de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079e0:	69b9      	ldr	r1, [r7, #24]
 80079e2:	69fa      	ldr	r2, [r7, #28]
 80079e4:	e841 2300 	strex	r3, r2, [r1]
 80079e8:	617b      	str	r3, [r7, #20]
   return(result);
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d1e3      	bne.n	80079b8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80079f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80079f4:	4619      	mov	r1, r3
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f7fa ffb0 	bl	800295c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80079fc:	e023      	b.n	8007a46 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80079fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d009      	beq.n	8007a1e <HAL_UART_IRQHandler+0x4ea>
 8007a0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d003      	beq.n	8007a1e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f000 fae1 	bl	8007fde <UART_Transmit_IT>
    return;
 8007a1c:	e014      	b.n	8007a48 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007a1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d00e      	beq.n	8007a48 <HAL_UART_IRQHandler+0x514>
 8007a2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d008      	beq.n	8007a48 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f000 fb21 	bl	800807e <UART_EndTransmit_IT>
    return;
 8007a3c:	e004      	b.n	8007a48 <HAL_UART_IRQHandler+0x514>
    return;
 8007a3e:	bf00      	nop
 8007a40:	e002      	b.n	8007a48 <HAL_UART_IRQHandler+0x514>
      return;
 8007a42:	bf00      	nop
 8007a44:	e000      	b.n	8007a48 <HAL_UART_IRQHandler+0x514>
      return;
 8007a46:	bf00      	nop
  }
}
 8007a48:	37e8      	adds	r7, #232	; 0xe8
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}
 8007a4e:	bf00      	nop

08007a50 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b083      	sub	sp, #12
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007a58:	bf00      	nop
 8007a5a:	370c      	adds	r7, #12
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a62:	4770      	bx	lr

08007a64 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007a64:	b480      	push	{r7}
 8007a66:	b083      	sub	sp, #12
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007a6c:	bf00      	nop
 8007a6e:	370c      	adds	r7, #12
 8007a70:	46bd      	mov	sp, r7
 8007a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a76:	4770      	bx	lr

08007a78 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b083      	sub	sp, #12
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007a80:	bf00      	nop
 8007a82:	370c      	adds	r7, #12
 8007a84:	46bd      	mov	sp, r7
 8007a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8a:	4770      	bx	lr

08007a8c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b083      	sub	sp, #12
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007a94:	bf00      	nop
 8007a96:	370c      	adds	r7, #12
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9e:	4770      	bx	lr

08007aa0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b09c      	sub	sp, #112	; 0x70
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aac:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d172      	bne.n	8007ba2 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007abc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007abe:	2200      	movs	r2, #0
 8007ac0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ac2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	330c      	adds	r3, #12
 8007ac8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007acc:	e853 3f00 	ldrex	r3, [r3]
 8007ad0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007ad2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ad4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ad8:	66bb      	str	r3, [r7, #104]	; 0x68
 8007ada:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	330c      	adds	r3, #12
 8007ae0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007ae2:	65ba      	str	r2, [r7, #88]	; 0x58
 8007ae4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ae6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007ae8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007aea:	e841 2300 	strex	r3, r2, [r1]
 8007aee:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007af0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d1e5      	bne.n	8007ac2 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007af6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	3314      	adds	r3, #20
 8007afc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b00:	e853 3f00 	ldrex	r3, [r3]
 8007b04:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b08:	f023 0301 	bic.w	r3, r3, #1
 8007b0c:	667b      	str	r3, [r7, #100]	; 0x64
 8007b0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	3314      	adds	r3, #20
 8007b14:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007b16:	647a      	str	r2, [r7, #68]	; 0x44
 8007b18:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b1a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007b1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b1e:	e841 2300 	strex	r3, r2, [r1]
 8007b22:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007b24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d1e5      	bne.n	8007af6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	3314      	adds	r3, #20
 8007b30:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b34:	e853 3f00 	ldrex	r3, [r3]
 8007b38:	623b      	str	r3, [r7, #32]
   return(result);
 8007b3a:	6a3b      	ldr	r3, [r7, #32]
 8007b3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b40:	663b      	str	r3, [r7, #96]	; 0x60
 8007b42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	3314      	adds	r3, #20
 8007b48:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007b4a:	633a      	str	r2, [r7, #48]	; 0x30
 8007b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b52:	e841 2300 	strex	r3, r2, [r1]
 8007b56:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d1e5      	bne.n	8007b2a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007b5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b60:	2220      	movs	r2, #32
 8007b62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b6a:	2b01      	cmp	r3, #1
 8007b6c:	d119      	bne.n	8007ba2 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	330c      	adds	r3, #12
 8007b74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	e853 3f00 	ldrex	r3, [r3]
 8007b7c:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	f023 0310 	bic.w	r3, r3, #16
 8007b84:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	330c      	adds	r3, #12
 8007b8c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007b8e:	61fa      	str	r2, [r7, #28]
 8007b90:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b92:	69b9      	ldr	r1, [r7, #24]
 8007b94:	69fa      	ldr	r2, [r7, #28]
 8007b96:	e841 2300 	strex	r3, r2, [r1]
 8007b9a:	617b      	str	r3, [r7, #20]
   return(result);
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d1e5      	bne.n	8007b6e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ba2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ba6:	2b01      	cmp	r3, #1
 8007ba8:	d106      	bne.n	8007bb8 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007baa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007bae:	4619      	mov	r1, r3
 8007bb0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007bb2:	f7fa fed3 	bl	800295c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007bb6:	e002      	b.n	8007bbe <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8007bb8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007bba:	f7ff ff53 	bl	8007a64 <HAL_UART_RxCpltCallback>
}
 8007bbe:	bf00      	nop
 8007bc0:	3770      	adds	r7, #112	; 0x70
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}

08007bc6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007bc6:	b580      	push	{r7, lr}
 8007bc8:	b084      	sub	sp, #16
 8007bca:	af00      	add	r7, sp, #0
 8007bcc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bd2:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	d108      	bne.n	8007bee <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007be0:	085b      	lsrs	r3, r3, #1
 8007be2:	b29b      	uxth	r3, r3
 8007be4:	4619      	mov	r1, r3
 8007be6:	68f8      	ldr	r0, [r7, #12]
 8007be8:	f7fa feb8 	bl	800295c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007bec:	e002      	b.n	8007bf4 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8007bee:	68f8      	ldr	r0, [r7, #12]
 8007bf0:	f7ff ff42 	bl	8007a78 <HAL_UART_RxHalfCpltCallback>
}
 8007bf4:	bf00      	nop
 8007bf6:	3710      	adds	r7, #16
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}

08007bfc <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b084      	sub	sp, #16
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007c04:	2300      	movs	r3, #0
 8007c06:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c0c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	695b      	ldr	r3, [r3, #20]
 8007c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c18:	2b80      	cmp	r3, #128	; 0x80
 8007c1a:	bf0c      	ite	eq
 8007c1c:	2301      	moveq	r3, #1
 8007c1e:	2300      	movne	r3, #0
 8007c20:	b2db      	uxtb	r3, r3
 8007c22:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c2a:	b2db      	uxtb	r3, r3
 8007c2c:	2b21      	cmp	r3, #33	; 0x21
 8007c2e:	d108      	bne.n	8007c42 <UART_DMAError+0x46>
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d005      	beq.n	8007c42 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007c3c:	68b8      	ldr	r0, [r7, #8]
 8007c3e:	f000 f92f 	bl	8007ea0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	695b      	ldr	r3, [r3, #20]
 8007c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c4c:	2b40      	cmp	r3, #64	; 0x40
 8007c4e:	bf0c      	ite	eq
 8007c50:	2301      	moveq	r3, #1
 8007c52:	2300      	movne	r3, #0
 8007c54:	b2db      	uxtb	r3, r3
 8007c56:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c5e:	b2db      	uxtb	r3, r3
 8007c60:	2b22      	cmp	r3, #34	; 0x22
 8007c62:	d108      	bne.n	8007c76 <UART_DMAError+0x7a>
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d005      	beq.n	8007c76 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007c70:	68b8      	ldr	r0, [r7, #8]
 8007c72:	f000 f93d 	bl	8007ef0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c7a:	f043 0210 	orr.w	r2, r3, #16
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007c82:	68b8      	ldr	r0, [r7, #8]
 8007c84:	f7ff ff02 	bl	8007a8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c88:	bf00      	nop
 8007c8a:	3710      	adds	r7, #16
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}

08007c90 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b090      	sub	sp, #64	; 0x40
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	60f8      	str	r0, [r7, #12]
 8007c98:	60b9      	str	r1, [r7, #8]
 8007c9a:	603b      	str	r3, [r7, #0]
 8007c9c:	4613      	mov	r3, r2
 8007c9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ca0:	e050      	b.n	8007d44 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ca2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ca8:	d04c      	beq.n	8007d44 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007caa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d007      	beq.n	8007cc0 <UART_WaitOnFlagUntilTimeout+0x30>
 8007cb0:	f7fb feda 	bl	8003a68 <HAL_GetTick>
 8007cb4:	4602      	mov	r2, r0
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	1ad3      	subs	r3, r2, r3
 8007cba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d241      	bcs.n	8007d44 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	330c      	adds	r3, #12
 8007cc6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cca:	e853 3f00 	ldrex	r3, [r3]
 8007cce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	330c      	adds	r3, #12
 8007cde:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007ce0:	637a      	str	r2, [r7, #52]	; 0x34
 8007ce2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007ce6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ce8:	e841 2300 	strex	r3, r2, [r1]
 8007cec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d1e5      	bne.n	8007cc0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	3314      	adds	r3, #20
 8007cfa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	e853 3f00 	ldrex	r3, [r3]
 8007d02:	613b      	str	r3, [r7, #16]
   return(result);
 8007d04:	693b      	ldr	r3, [r7, #16]
 8007d06:	f023 0301 	bic.w	r3, r3, #1
 8007d0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	3314      	adds	r3, #20
 8007d12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d14:	623a      	str	r2, [r7, #32]
 8007d16:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d18:	69f9      	ldr	r1, [r7, #28]
 8007d1a:	6a3a      	ldr	r2, [r7, #32]
 8007d1c:	e841 2300 	strex	r3, r2, [r1]
 8007d20:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d22:	69bb      	ldr	r3, [r7, #24]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d1e5      	bne.n	8007cf4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2220      	movs	r2, #32
 8007d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	2220      	movs	r2, #32
 8007d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007d40:	2303      	movs	r3, #3
 8007d42:	e00f      	b.n	8007d64 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	681a      	ldr	r2, [r3, #0]
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	4013      	ands	r3, r2
 8007d4e:	68ba      	ldr	r2, [r7, #8]
 8007d50:	429a      	cmp	r2, r3
 8007d52:	bf0c      	ite	eq
 8007d54:	2301      	moveq	r3, #1
 8007d56:	2300      	movne	r3, #0
 8007d58:	b2db      	uxtb	r3, r3
 8007d5a:	461a      	mov	r2, r3
 8007d5c:	79fb      	ldrb	r3, [r7, #7]
 8007d5e:	429a      	cmp	r2, r3
 8007d60:	d09f      	beq.n	8007ca2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007d62:	2300      	movs	r3, #0
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3740      	adds	r7, #64	; 0x40
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}

08007d6c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b098      	sub	sp, #96	; 0x60
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	60f8      	str	r0, [r7, #12]
 8007d74:	60b9      	str	r1, [r7, #8]
 8007d76:	4613      	mov	r3, r2
 8007d78:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007d7a:	68ba      	ldr	r2, [r7, #8]
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	88fa      	ldrh	r2, [r7, #6]
 8007d84:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	2222      	movs	r2, #34	; 0x22
 8007d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d98:	4a3e      	ldr	r2, [pc, #248]	; (8007e94 <UART_Start_Receive_DMA+0x128>)
 8007d9a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007da0:	4a3d      	ldr	r2, [pc, #244]	; (8007e98 <UART_Start_Receive_DMA+0x12c>)
 8007da2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007da8:	4a3c      	ldr	r2, [pc, #240]	; (8007e9c <UART_Start_Receive_DMA+0x130>)
 8007daa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007db0:	2200      	movs	r2, #0
 8007db2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007db4:	f107 0308 	add.w	r3, r7, #8
 8007db8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	3304      	adds	r3, #4
 8007dc4:	4619      	mov	r1, r3
 8007dc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007dc8:	681a      	ldr	r2, [r3, #0]
 8007dca:	88fb      	ldrh	r3, [r7, #6]
 8007dcc:	f7fc f83c 	bl	8003e48 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	613b      	str	r3, [r7, #16]
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	613b      	str	r3, [r7, #16]
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	613b      	str	r3, [r7, #16]
 8007de4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	2200      	movs	r2, #0
 8007dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	330c      	adds	r3, #12
 8007df4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007df6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007df8:	e853 3f00 	ldrex	r3, [r3]
 8007dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007dfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e04:	65bb      	str	r3, [r7, #88]	; 0x58
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	330c      	adds	r3, #12
 8007e0c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007e0e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007e10:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e12:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007e14:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007e16:	e841 2300 	strex	r3, r2, [r1]
 8007e1a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007e1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d1e5      	bne.n	8007dee <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	3314      	adds	r3, #20
 8007e28:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e2c:	e853 3f00 	ldrex	r3, [r3]
 8007e30:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e34:	f043 0301 	orr.w	r3, r3, #1
 8007e38:	657b      	str	r3, [r7, #84]	; 0x54
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	3314      	adds	r3, #20
 8007e40:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007e42:	63ba      	str	r2, [r7, #56]	; 0x38
 8007e44:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e46:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007e48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e4a:	e841 2300 	strex	r3, r2, [r1]
 8007e4e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d1e5      	bne.n	8007e22 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	3314      	adds	r3, #20
 8007e5c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e5e:	69bb      	ldr	r3, [r7, #24]
 8007e60:	e853 3f00 	ldrex	r3, [r3]
 8007e64:	617b      	str	r3, [r7, #20]
   return(result);
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e6c:	653b      	str	r3, [r7, #80]	; 0x50
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	3314      	adds	r3, #20
 8007e74:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007e76:	627a      	str	r2, [r7, #36]	; 0x24
 8007e78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e7a:	6a39      	ldr	r1, [r7, #32]
 8007e7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e7e:	e841 2300 	strex	r3, r2, [r1]
 8007e82:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e84:	69fb      	ldr	r3, [r7, #28]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d1e5      	bne.n	8007e56 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8007e8a:	2300      	movs	r3, #0
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3760      	adds	r7, #96	; 0x60
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}
 8007e94:	08007aa1 	.word	0x08007aa1
 8007e98:	08007bc7 	.word	0x08007bc7
 8007e9c:	08007bfd 	.word	0x08007bfd

08007ea0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b089      	sub	sp, #36	; 0x24
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	330c      	adds	r3, #12
 8007eae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	e853 3f00 	ldrex	r3, [r3]
 8007eb6:	60bb      	str	r3, [r7, #8]
   return(result);
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007ebe:	61fb      	str	r3, [r7, #28]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	330c      	adds	r3, #12
 8007ec6:	69fa      	ldr	r2, [r7, #28]
 8007ec8:	61ba      	str	r2, [r7, #24]
 8007eca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ecc:	6979      	ldr	r1, [r7, #20]
 8007ece:	69ba      	ldr	r2, [r7, #24]
 8007ed0:	e841 2300 	strex	r3, r2, [r1]
 8007ed4:	613b      	str	r3, [r7, #16]
   return(result);
 8007ed6:	693b      	ldr	r3, [r7, #16]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d1e5      	bne.n	8007ea8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2220      	movs	r2, #32
 8007ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007ee4:	bf00      	nop
 8007ee6:	3724      	adds	r7, #36	; 0x24
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr

08007ef0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b095      	sub	sp, #84	; 0x54
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	330c      	adds	r3, #12
 8007efe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f02:	e853 3f00 	ldrex	r3, [r3]
 8007f06:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f0a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	330c      	adds	r3, #12
 8007f16:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007f18:	643a      	str	r2, [r7, #64]	; 0x40
 8007f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f1c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007f1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007f20:	e841 2300 	strex	r3, r2, [r1]
 8007f24:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d1e5      	bne.n	8007ef8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	3314      	adds	r3, #20
 8007f32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f34:	6a3b      	ldr	r3, [r7, #32]
 8007f36:	e853 3f00 	ldrex	r3, [r3]
 8007f3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f3c:	69fb      	ldr	r3, [r7, #28]
 8007f3e:	f023 0301 	bic.w	r3, r3, #1
 8007f42:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	3314      	adds	r3, #20
 8007f4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f4c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007f4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f54:	e841 2300 	strex	r3, r2, [r1]
 8007f58:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d1e5      	bne.n	8007f2c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f64:	2b01      	cmp	r3, #1
 8007f66:	d119      	bne.n	8007f9c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	330c      	adds	r3, #12
 8007f6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	e853 3f00 	ldrex	r3, [r3]
 8007f76:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	f023 0310 	bic.w	r3, r3, #16
 8007f7e:	647b      	str	r3, [r7, #68]	; 0x44
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	330c      	adds	r3, #12
 8007f86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f88:	61ba      	str	r2, [r7, #24]
 8007f8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f8c:	6979      	ldr	r1, [r7, #20]
 8007f8e:	69ba      	ldr	r2, [r7, #24]
 8007f90:	e841 2300 	strex	r3, r2, [r1]
 8007f94:	613b      	str	r3, [r7, #16]
   return(result);
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d1e5      	bne.n	8007f68 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2220      	movs	r2, #32
 8007fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007faa:	bf00      	nop
 8007fac:	3754      	adds	r7, #84	; 0x54
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb4:	4770      	bx	lr

08007fb6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007fb6:	b580      	push	{r7, lr}
 8007fb8:	b084      	sub	sp, #16
 8007fba:	af00      	add	r7, sp, #0
 8007fbc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fc2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007fd0:	68f8      	ldr	r0, [r7, #12]
 8007fd2:	f7ff fd5b 	bl	8007a8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007fd6:	bf00      	nop
 8007fd8:	3710      	adds	r7, #16
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}

08007fde <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007fde:	b480      	push	{r7}
 8007fe0:	b085      	sub	sp, #20
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fec:	b2db      	uxtb	r3, r3
 8007fee:	2b21      	cmp	r3, #33	; 0x21
 8007ff0:	d13e      	bne.n	8008070 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	689b      	ldr	r3, [r3, #8]
 8007ff6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ffa:	d114      	bne.n	8008026 <UART_Transmit_IT+0x48>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	691b      	ldr	r3, [r3, #16]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d110      	bne.n	8008026 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6a1b      	ldr	r3, [r3, #32]
 8008008:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	881b      	ldrh	r3, [r3, #0]
 800800e:	461a      	mov	r2, r3
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008018:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6a1b      	ldr	r3, [r3, #32]
 800801e:	1c9a      	adds	r2, r3, #2
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	621a      	str	r2, [r3, #32]
 8008024:	e008      	b.n	8008038 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6a1b      	ldr	r3, [r3, #32]
 800802a:	1c59      	adds	r1, r3, #1
 800802c:	687a      	ldr	r2, [r7, #4]
 800802e:	6211      	str	r1, [r2, #32]
 8008030:	781a      	ldrb	r2, [r3, #0]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800803c:	b29b      	uxth	r3, r3
 800803e:	3b01      	subs	r3, #1
 8008040:	b29b      	uxth	r3, r3
 8008042:	687a      	ldr	r2, [r7, #4]
 8008044:	4619      	mov	r1, r3
 8008046:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008048:	2b00      	cmp	r3, #0
 800804a:	d10f      	bne.n	800806c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	68da      	ldr	r2, [r3, #12]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800805a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	68da      	ldr	r2, [r3, #12]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800806a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800806c:	2300      	movs	r3, #0
 800806e:	e000      	b.n	8008072 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008070:	2302      	movs	r3, #2
  }
}
 8008072:	4618      	mov	r0, r3
 8008074:	3714      	adds	r7, #20
 8008076:	46bd      	mov	sp, r7
 8008078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807c:	4770      	bx	lr

0800807e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800807e:	b580      	push	{r7, lr}
 8008080:	b082      	sub	sp, #8
 8008082:	af00      	add	r7, sp, #0
 8008084:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	68da      	ldr	r2, [r3, #12]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008094:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2220      	movs	r2, #32
 800809a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f7ff fcd6 	bl	8007a50 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80080a4:	2300      	movs	r3, #0
}
 80080a6:	4618      	mov	r0, r3
 80080a8:	3708      	adds	r7, #8
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}

080080ae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80080ae:	b580      	push	{r7, lr}
 80080b0:	b08c      	sub	sp, #48	; 0x30
 80080b2:	af00      	add	r7, sp, #0
 80080b4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80080bc:	b2db      	uxtb	r3, r3
 80080be:	2b22      	cmp	r3, #34	; 0x22
 80080c0:	f040 80ab 	bne.w	800821a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	689b      	ldr	r3, [r3, #8]
 80080c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080cc:	d117      	bne.n	80080fe <UART_Receive_IT+0x50>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	691b      	ldr	r3, [r3, #16]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d113      	bne.n	80080fe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80080d6:	2300      	movs	r3, #0
 80080d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080de:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	b29b      	uxth	r3, r3
 80080e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080ec:	b29a      	uxth	r2, r3
 80080ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080f6:	1c9a      	adds	r2, r3, #2
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	629a      	str	r2, [r3, #40]	; 0x28
 80080fc:	e026      	b.n	800814c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008102:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008104:	2300      	movs	r3, #0
 8008106:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	689b      	ldr	r3, [r3, #8]
 800810c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008110:	d007      	beq.n	8008122 <UART_Receive_IT+0x74>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	689b      	ldr	r3, [r3, #8]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d10a      	bne.n	8008130 <UART_Receive_IT+0x82>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	691b      	ldr	r3, [r3, #16]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d106      	bne.n	8008130 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	685b      	ldr	r3, [r3, #4]
 8008128:	b2da      	uxtb	r2, r3
 800812a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800812c:	701a      	strb	r2, [r3, #0]
 800812e:	e008      	b.n	8008142 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	685b      	ldr	r3, [r3, #4]
 8008136:	b2db      	uxtb	r3, r3
 8008138:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800813c:	b2da      	uxtb	r2, r3
 800813e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008140:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008146:	1c5a      	adds	r2, r3, #1
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008150:	b29b      	uxth	r3, r3
 8008152:	3b01      	subs	r3, #1
 8008154:	b29b      	uxth	r3, r3
 8008156:	687a      	ldr	r2, [r7, #4]
 8008158:	4619      	mov	r1, r3
 800815a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800815c:	2b00      	cmp	r3, #0
 800815e:	d15a      	bne.n	8008216 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	68da      	ldr	r2, [r3, #12]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f022 0220 	bic.w	r2, r2, #32
 800816e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	68da      	ldr	r2, [r3, #12]
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800817e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	695a      	ldr	r2, [r3, #20]
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f022 0201 	bic.w	r2, r2, #1
 800818e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2220      	movs	r2, #32
 8008194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800819c:	2b01      	cmp	r3, #1
 800819e:	d135      	bne.n	800820c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2200      	movs	r2, #0
 80081a4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	330c      	adds	r3, #12
 80081ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	e853 3f00 	ldrex	r3, [r3]
 80081b4:	613b      	str	r3, [r7, #16]
   return(result);
 80081b6:	693b      	ldr	r3, [r7, #16]
 80081b8:	f023 0310 	bic.w	r3, r3, #16
 80081bc:	627b      	str	r3, [r7, #36]	; 0x24
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	330c      	adds	r3, #12
 80081c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081c6:	623a      	str	r2, [r7, #32]
 80081c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ca:	69f9      	ldr	r1, [r7, #28]
 80081cc:	6a3a      	ldr	r2, [r7, #32]
 80081ce:	e841 2300 	strex	r3, r2, [r1]
 80081d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80081d4:	69bb      	ldr	r3, [r7, #24]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d1e5      	bne.n	80081a6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f003 0310 	and.w	r3, r3, #16
 80081e4:	2b10      	cmp	r3, #16
 80081e6:	d10a      	bne.n	80081fe <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80081e8:	2300      	movs	r3, #0
 80081ea:	60fb      	str	r3, [r7, #12]
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	60fb      	str	r3, [r7, #12]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	685b      	ldr	r3, [r3, #4]
 80081fa:	60fb      	str	r3, [r7, #12]
 80081fc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008202:	4619      	mov	r1, r3
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f7fa fba9 	bl	800295c <HAL_UARTEx_RxEventCallback>
 800820a:	e002      	b.n	8008212 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f7ff fc29 	bl	8007a64 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008212:	2300      	movs	r3, #0
 8008214:	e002      	b.n	800821c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008216:	2300      	movs	r3, #0
 8008218:	e000      	b.n	800821c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800821a:	2302      	movs	r3, #2
  }
}
 800821c:	4618      	mov	r0, r3
 800821e:	3730      	adds	r7, #48	; 0x30
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}

08008224 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008228:	b09f      	sub	sp, #124	; 0x7c
 800822a:	af00      	add	r7, sp, #0
 800822c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800822e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	691b      	ldr	r3, [r3, #16]
 8008234:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008238:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800823a:	68d9      	ldr	r1, [r3, #12]
 800823c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800823e:	681a      	ldr	r2, [r3, #0]
 8008240:	ea40 0301 	orr.w	r3, r0, r1
 8008244:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008246:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008248:	689a      	ldr	r2, [r3, #8]
 800824a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800824c:	691b      	ldr	r3, [r3, #16]
 800824e:	431a      	orrs	r2, r3
 8008250:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008252:	695b      	ldr	r3, [r3, #20]
 8008254:	431a      	orrs	r2, r3
 8008256:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008258:	69db      	ldr	r3, [r3, #28]
 800825a:	4313      	orrs	r3, r2
 800825c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800825e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	68db      	ldr	r3, [r3, #12]
 8008264:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008268:	f021 010c 	bic.w	r1, r1, #12
 800826c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800826e:	681a      	ldr	r2, [r3, #0]
 8008270:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008272:	430b      	orrs	r3, r1
 8008274:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008276:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	695b      	ldr	r3, [r3, #20]
 800827c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008280:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008282:	6999      	ldr	r1, [r3, #24]
 8008284:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008286:	681a      	ldr	r2, [r3, #0]
 8008288:	ea40 0301 	orr.w	r3, r0, r1
 800828c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800828e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008290:	681a      	ldr	r2, [r3, #0]
 8008292:	4bc5      	ldr	r3, [pc, #788]	; (80085a8 <UART_SetConfig+0x384>)
 8008294:	429a      	cmp	r2, r3
 8008296:	d004      	beq.n	80082a2 <UART_SetConfig+0x7e>
 8008298:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800829a:	681a      	ldr	r2, [r3, #0]
 800829c:	4bc3      	ldr	r3, [pc, #780]	; (80085ac <UART_SetConfig+0x388>)
 800829e:	429a      	cmp	r2, r3
 80082a0:	d103      	bne.n	80082aa <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80082a2:	f7fd ff2b 	bl	80060fc <HAL_RCC_GetPCLK2Freq>
 80082a6:	6778      	str	r0, [r7, #116]	; 0x74
 80082a8:	e002      	b.n	80082b0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80082aa:	f7fd ff13 	bl	80060d4 <HAL_RCC_GetPCLK1Freq>
 80082ae:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80082b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082b2:	69db      	ldr	r3, [r3, #28]
 80082b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082b8:	f040 80b6 	bne.w	8008428 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80082bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80082be:	461c      	mov	r4, r3
 80082c0:	f04f 0500 	mov.w	r5, #0
 80082c4:	4622      	mov	r2, r4
 80082c6:	462b      	mov	r3, r5
 80082c8:	1891      	adds	r1, r2, r2
 80082ca:	6439      	str	r1, [r7, #64]	; 0x40
 80082cc:	415b      	adcs	r3, r3
 80082ce:	647b      	str	r3, [r7, #68]	; 0x44
 80082d0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80082d4:	1912      	adds	r2, r2, r4
 80082d6:	eb45 0303 	adc.w	r3, r5, r3
 80082da:	f04f 0000 	mov.w	r0, #0
 80082de:	f04f 0100 	mov.w	r1, #0
 80082e2:	00d9      	lsls	r1, r3, #3
 80082e4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80082e8:	00d0      	lsls	r0, r2, #3
 80082ea:	4602      	mov	r2, r0
 80082ec:	460b      	mov	r3, r1
 80082ee:	1911      	adds	r1, r2, r4
 80082f0:	6639      	str	r1, [r7, #96]	; 0x60
 80082f2:	416b      	adcs	r3, r5
 80082f4:	667b      	str	r3, [r7, #100]	; 0x64
 80082f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082f8:	685b      	ldr	r3, [r3, #4]
 80082fa:	461a      	mov	r2, r3
 80082fc:	f04f 0300 	mov.w	r3, #0
 8008300:	1891      	adds	r1, r2, r2
 8008302:	63b9      	str	r1, [r7, #56]	; 0x38
 8008304:	415b      	adcs	r3, r3
 8008306:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008308:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800830c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8008310:	f7f8 fcba 	bl	8000c88 <__aeabi_uldivmod>
 8008314:	4602      	mov	r2, r0
 8008316:	460b      	mov	r3, r1
 8008318:	4ba5      	ldr	r3, [pc, #660]	; (80085b0 <UART_SetConfig+0x38c>)
 800831a:	fba3 2302 	umull	r2, r3, r3, r2
 800831e:	095b      	lsrs	r3, r3, #5
 8008320:	011e      	lsls	r6, r3, #4
 8008322:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008324:	461c      	mov	r4, r3
 8008326:	f04f 0500 	mov.w	r5, #0
 800832a:	4622      	mov	r2, r4
 800832c:	462b      	mov	r3, r5
 800832e:	1891      	adds	r1, r2, r2
 8008330:	6339      	str	r1, [r7, #48]	; 0x30
 8008332:	415b      	adcs	r3, r3
 8008334:	637b      	str	r3, [r7, #52]	; 0x34
 8008336:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800833a:	1912      	adds	r2, r2, r4
 800833c:	eb45 0303 	adc.w	r3, r5, r3
 8008340:	f04f 0000 	mov.w	r0, #0
 8008344:	f04f 0100 	mov.w	r1, #0
 8008348:	00d9      	lsls	r1, r3, #3
 800834a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800834e:	00d0      	lsls	r0, r2, #3
 8008350:	4602      	mov	r2, r0
 8008352:	460b      	mov	r3, r1
 8008354:	1911      	adds	r1, r2, r4
 8008356:	65b9      	str	r1, [r7, #88]	; 0x58
 8008358:	416b      	adcs	r3, r5
 800835a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800835c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800835e:	685b      	ldr	r3, [r3, #4]
 8008360:	461a      	mov	r2, r3
 8008362:	f04f 0300 	mov.w	r3, #0
 8008366:	1891      	adds	r1, r2, r2
 8008368:	62b9      	str	r1, [r7, #40]	; 0x28
 800836a:	415b      	adcs	r3, r3
 800836c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800836e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008372:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008376:	f7f8 fc87 	bl	8000c88 <__aeabi_uldivmod>
 800837a:	4602      	mov	r2, r0
 800837c:	460b      	mov	r3, r1
 800837e:	4b8c      	ldr	r3, [pc, #560]	; (80085b0 <UART_SetConfig+0x38c>)
 8008380:	fba3 1302 	umull	r1, r3, r3, r2
 8008384:	095b      	lsrs	r3, r3, #5
 8008386:	2164      	movs	r1, #100	; 0x64
 8008388:	fb01 f303 	mul.w	r3, r1, r3
 800838c:	1ad3      	subs	r3, r2, r3
 800838e:	00db      	lsls	r3, r3, #3
 8008390:	3332      	adds	r3, #50	; 0x32
 8008392:	4a87      	ldr	r2, [pc, #540]	; (80085b0 <UART_SetConfig+0x38c>)
 8008394:	fba2 2303 	umull	r2, r3, r2, r3
 8008398:	095b      	lsrs	r3, r3, #5
 800839a:	005b      	lsls	r3, r3, #1
 800839c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80083a0:	441e      	add	r6, r3
 80083a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80083a4:	4618      	mov	r0, r3
 80083a6:	f04f 0100 	mov.w	r1, #0
 80083aa:	4602      	mov	r2, r0
 80083ac:	460b      	mov	r3, r1
 80083ae:	1894      	adds	r4, r2, r2
 80083b0:	623c      	str	r4, [r7, #32]
 80083b2:	415b      	adcs	r3, r3
 80083b4:	627b      	str	r3, [r7, #36]	; 0x24
 80083b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80083ba:	1812      	adds	r2, r2, r0
 80083bc:	eb41 0303 	adc.w	r3, r1, r3
 80083c0:	f04f 0400 	mov.w	r4, #0
 80083c4:	f04f 0500 	mov.w	r5, #0
 80083c8:	00dd      	lsls	r5, r3, #3
 80083ca:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80083ce:	00d4      	lsls	r4, r2, #3
 80083d0:	4622      	mov	r2, r4
 80083d2:	462b      	mov	r3, r5
 80083d4:	1814      	adds	r4, r2, r0
 80083d6:	653c      	str	r4, [r7, #80]	; 0x50
 80083d8:	414b      	adcs	r3, r1
 80083da:	657b      	str	r3, [r7, #84]	; 0x54
 80083dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	461a      	mov	r2, r3
 80083e2:	f04f 0300 	mov.w	r3, #0
 80083e6:	1891      	adds	r1, r2, r2
 80083e8:	61b9      	str	r1, [r7, #24]
 80083ea:	415b      	adcs	r3, r3
 80083ec:	61fb      	str	r3, [r7, #28]
 80083ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80083f2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80083f6:	f7f8 fc47 	bl	8000c88 <__aeabi_uldivmod>
 80083fa:	4602      	mov	r2, r0
 80083fc:	460b      	mov	r3, r1
 80083fe:	4b6c      	ldr	r3, [pc, #432]	; (80085b0 <UART_SetConfig+0x38c>)
 8008400:	fba3 1302 	umull	r1, r3, r3, r2
 8008404:	095b      	lsrs	r3, r3, #5
 8008406:	2164      	movs	r1, #100	; 0x64
 8008408:	fb01 f303 	mul.w	r3, r1, r3
 800840c:	1ad3      	subs	r3, r2, r3
 800840e:	00db      	lsls	r3, r3, #3
 8008410:	3332      	adds	r3, #50	; 0x32
 8008412:	4a67      	ldr	r2, [pc, #412]	; (80085b0 <UART_SetConfig+0x38c>)
 8008414:	fba2 2303 	umull	r2, r3, r2, r3
 8008418:	095b      	lsrs	r3, r3, #5
 800841a:	f003 0207 	and.w	r2, r3, #7
 800841e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4432      	add	r2, r6
 8008424:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008426:	e0b9      	b.n	800859c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008428:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800842a:	461c      	mov	r4, r3
 800842c:	f04f 0500 	mov.w	r5, #0
 8008430:	4622      	mov	r2, r4
 8008432:	462b      	mov	r3, r5
 8008434:	1891      	adds	r1, r2, r2
 8008436:	6139      	str	r1, [r7, #16]
 8008438:	415b      	adcs	r3, r3
 800843a:	617b      	str	r3, [r7, #20]
 800843c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008440:	1912      	adds	r2, r2, r4
 8008442:	eb45 0303 	adc.w	r3, r5, r3
 8008446:	f04f 0000 	mov.w	r0, #0
 800844a:	f04f 0100 	mov.w	r1, #0
 800844e:	00d9      	lsls	r1, r3, #3
 8008450:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008454:	00d0      	lsls	r0, r2, #3
 8008456:	4602      	mov	r2, r0
 8008458:	460b      	mov	r3, r1
 800845a:	eb12 0804 	adds.w	r8, r2, r4
 800845e:	eb43 0905 	adc.w	r9, r3, r5
 8008462:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008464:	685b      	ldr	r3, [r3, #4]
 8008466:	4618      	mov	r0, r3
 8008468:	f04f 0100 	mov.w	r1, #0
 800846c:	f04f 0200 	mov.w	r2, #0
 8008470:	f04f 0300 	mov.w	r3, #0
 8008474:	008b      	lsls	r3, r1, #2
 8008476:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800847a:	0082      	lsls	r2, r0, #2
 800847c:	4640      	mov	r0, r8
 800847e:	4649      	mov	r1, r9
 8008480:	f7f8 fc02 	bl	8000c88 <__aeabi_uldivmod>
 8008484:	4602      	mov	r2, r0
 8008486:	460b      	mov	r3, r1
 8008488:	4b49      	ldr	r3, [pc, #292]	; (80085b0 <UART_SetConfig+0x38c>)
 800848a:	fba3 2302 	umull	r2, r3, r3, r2
 800848e:	095b      	lsrs	r3, r3, #5
 8008490:	011e      	lsls	r6, r3, #4
 8008492:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008494:	4618      	mov	r0, r3
 8008496:	f04f 0100 	mov.w	r1, #0
 800849a:	4602      	mov	r2, r0
 800849c:	460b      	mov	r3, r1
 800849e:	1894      	adds	r4, r2, r2
 80084a0:	60bc      	str	r4, [r7, #8]
 80084a2:	415b      	adcs	r3, r3
 80084a4:	60fb      	str	r3, [r7, #12]
 80084a6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80084aa:	1812      	adds	r2, r2, r0
 80084ac:	eb41 0303 	adc.w	r3, r1, r3
 80084b0:	f04f 0400 	mov.w	r4, #0
 80084b4:	f04f 0500 	mov.w	r5, #0
 80084b8:	00dd      	lsls	r5, r3, #3
 80084ba:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80084be:	00d4      	lsls	r4, r2, #3
 80084c0:	4622      	mov	r2, r4
 80084c2:	462b      	mov	r3, r5
 80084c4:	1814      	adds	r4, r2, r0
 80084c6:	64bc      	str	r4, [r7, #72]	; 0x48
 80084c8:	414b      	adcs	r3, r1
 80084ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80084cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084ce:	685b      	ldr	r3, [r3, #4]
 80084d0:	4618      	mov	r0, r3
 80084d2:	f04f 0100 	mov.w	r1, #0
 80084d6:	f04f 0200 	mov.w	r2, #0
 80084da:	f04f 0300 	mov.w	r3, #0
 80084de:	008b      	lsls	r3, r1, #2
 80084e0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80084e4:	0082      	lsls	r2, r0, #2
 80084e6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80084ea:	f7f8 fbcd 	bl	8000c88 <__aeabi_uldivmod>
 80084ee:	4602      	mov	r2, r0
 80084f0:	460b      	mov	r3, r1
 80084f2:	4b2f      	ldr	r3, [pc, #188]	; (80085b0 <UART_SetConfig+0x38c>)
 80084f4:	fba3 1302 	umull	r1, r3, r3, r2
 80084f8:	095b      	lsrs	r3, r3, #5
 80084fa:	2164      	movs	r1, #100	; 0x64
 80084fc:	fb01 f303 	mul.w	r3, r1, r3
 8008500:	1ad3      	subs	r3, r2, r3
 8008502:	011b      	lsls	r3, r3, #4
 8008504:	3332      	adds	r3, #50	; 0x32
 8008506:	4a2a      	ldr	r2, [pc, #168]	; (80085b0 <UART_SetConfig+0x38c>)
 8008508:	fba2 2303 	umull	r2, r3, r2, r3
 800850c:	095b      	lsrs	r3, r3, #5
 800850e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008512:	441e      	add	r6, r3
 8008514:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008516:	4618      	mov	r0, r3
 8008518:	f04f 0100 	mov.w	r1, #0
 800851c:	4602      	mov	r2, r0
 800851e:	460b      	mov	r3, r1
 8008520:	1894      	adds	r4, r2, r2
 8008522:	603c      	str	r4, [r7, #0]
 8008524:	415b      	adcs	r3, r3
 8008526:	607b      	str	r3, [r7, #4]
 8008528:	e9d7 2300 	ldrd	r2, r3, [r7]
 800852c:	1812      	adds	r2, r2, r0
 800852e:	eb41 0303 	adc.w	r3, r1, r3
 8008532:	f04f 0400 	mov.w	r4, #0
 8008536:	f04f 0500 	mov.w	r5, #0
 800853a:	00dd      	lsls	r5, r3, #3
 800853c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008540:	00d4      	lsls	r4, r2, #3
 8008542:	4622      	mov	r2, r4
 8008544:	462b      	mov	r3, r5
 8008546:	eb12 0a00 	adds.w	sl, r2, r0
 800854a:	eb43 0b01 	adc.w	fp, r3, r1
 800854e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008550:	685b      	ldr	r3, [r3, #4]
 8008552:	4618      	mov	r0, r3
 8008554:	f04f 0100 	mov.w	r1, #0
 8008558:	f04f 0200 	mov.w	r2, #0
 800855c:	f04f 0300 	mov.w	r3, #0
 8008560:	008b      	lsls	r3, r1, #2
 8008562:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008566:	0082      	lsls	r2, r0, #2
 8008568:	4650      	mov	r0, sl
 800856a:	4659      	mov	r1, fp
 800856c:	f7f8 fb8c 	bl	8000c88 <__aeabi_uldivmod>
 8008570:	4602      	mov	r2, r0
 8008572:	460b      	mov	r3, r1
 8008574:	4b0e      	ldr	r3, [pc, #56]	; (80085b0 <UART_SetConfig+0x38c>)
 8008576:	fba3 1302 	umull	r1, r3, r3, r2
 800857a:	095b      	lsrs	r3, r3, #5
 800857c:	2164      	movs	r1, #100	; 0x64
 800857e:	fb01 f303 	mul.w	r3, r1, r3
 8008582:	1ad3      	subs	r3, r2, r3
 8008584:	011b      	lsls	r3, r3, #4
 8008586:	3332      	adds	r3, #50	; 0x32
 8008588:	4a09      	ldr	r2, [pc, #36]	; (80085b0 <UART_SetConfig+0x38c>)
 800858a:	fba2 2303 	umull	r2, r3, r2, r3
 800858e:	095b      	lsrs	r3, r3, #5
 8008590:	f003 020f 	and.w	r2, r3, #15
 8008594:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4432      	add	r2, r6
 800859a:	609a      	str	r2, [r3, #8]
}
 800859c:	bf00      	nop
 800859e:	377c      	adds	r7, #124	; 0x7c
 80085a0:	46bd      	mov	sp, r7
 80085a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085a6:	bf00      	nop
 80085a8:	40011000 	.word	0x40011000
 80085ac:	40011400 	.word	0x40011400
 80085b0:	51eb851f 	.word	0x51eb851f

080085b4 <__errno>:
 80085b4:	4b01      	ldr	r3, [pc, #4]	; (80085bc <__errno+0x8>)
 80085b6:	6818      	ldr	r0, [r3, #0]
 80085b8:	4770      	bx	lr
 80085ba:	bf00      	nop
 80085bc:	20000014 	.word	0x20000014

080085c0 <__libc_init_array>:
 80085c0:	b570      	push	{r4, r5, r6, lr}
 80085c2:	4d0d      	ldr	r5, [pc, #52]	; (80085f8 <__libc_init_array+0x38>)
 80085c4:	4c0d      	ldr	r4, [pc, #52]	; (80085fc <__libc_init_array+0x3c>)
 80085c6:	1b64      	subs	r4, r4, r5
 80085c8:	10a4      	asrs	r4, r4, #2
 80085ca:	2600      	movs	r6, #0
 80085cc:	42a6      	cmp	r6, r4
 80085ce:	d109      	bne.n	80085e4 <__libc_init_array+0x24>
 80085d0:	4d0b      	ldr	r5, [pc, #44]	; (8008600 <__libc_init_array+0x40>)
 80085d2:	4c0c      	ldr	r4, [pc, #48]	; (8008604 <__libc_init_array+0x44>)
 80085d4:	f004 fdfa 	bl	800d1cc <_init>
 80085d8:	1b64      	subs	r4, r4, r5
 80085da:	10a4      	asrs	r4, r4, #2
 80085dc:	2600      	movs	r6, #0
 80085de:	42a6      	cmp	r6, r4
 80085e0:	d105      	bne.n	80085ee <__libc_init_array+0x2e>
 80085e2:	bd70      	pop	{r4, r5, r6, pc}
 80085e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80085e8:	4798      	blx	r3
 80085ea:	3601      	adds	r6, #1
 80085ec:	e7ee      	b.n	80085cc <__libc_init_array+0xc>
 80085ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80085f2:	4798      	blx	r3
 80085f4:	3601      	adds	r6, #1
 80085f6:	e7f2      	b.n	80085de <__libc_init_array+0x1e>
 80085f8:	0800e9c4 	.word	0x0800e9c4
 80085fc:	0800e9c4 	.word	0x0800e9c4
 8008600:	0800e9c4 	.word	0x0800e9c4
 8008604:	0800e9c8 	.word	0x0800e9c8

08008608 <memcpy>:
 8008608:	440a      	add	r2, r1
 800860a:	4291      	cmp	r1, r2
 800860c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008610:	d100      	bne.n	8008614 <memcpy+0xc>
 8008612:	4770      	bx	lr
 8008614:	b510      	push	{r4, lr}
 8008616:	f811 4b01 	ldrb.w	r4, [r1], #1
 800861a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800861e:	4291      	cmp	r1, r2
 8008620:	d1f9      	bne.n	8008616 <memcpy+0xe>
 8008622:	bd10      	pop	{r4, pc}

08008624 <memset>:
 8008624:	4402      	add	r2, r0
 8008626:	4603      	mov	r3, r0
 8008628:	4293      	cmp	r3, r2
 800862a:	d100      	bne.n	800862e <memset+0xa>
 800862c:	4770      	bx	lr
 800862e:	f803 1b01 	strb.w	r1, [r3], #1
 8008632:	e7f9      	b.n	8008628 <memset+0x4>

08008634 <__cvt>:
 8008634:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008638:	ec55 4b10 	vmov	r4, r5, d0
 800863c:	2d00      	cmp	r5, #0
 800863e:	460e      	mov	r6, r1
 8008640:	4619      	mov	r1, r3
 8008642:	462b      	mov	r3, r5
 8008644:	bfbb      	ittet	lt
 8008646:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800864a:	461d      	movlt	r5, r3
 800864c:	2300      	movge	r3, #0
 800864e:	232d      	movlt	r3, #45	; 0x2d
 8008650:	700b      	strb	r3, [r1, #0]
 8008652:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008654:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008658:	4691      	mov	r9, r2
 800865a:	f023 0820 	bic.w	r8, r3, #32
 800865e:	bfbc      	itt	lt
 8008660:	4622      	movlt	r2, r4
 8008662:	4614      	movlt	r4, r2
 8008664:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008668:	d005      	beq.n	8008676 <__cvt+0x42>
 800866a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800866e:	d100      	bne.n	8008672 <__cvt+0x3e>
 8008670:	3601      	adds	r6, #1
 8008672:	2102      	movs	r1, #2
 8008674:	e000      	b.n	8008678 <__cvt+0x44>
 8008676:	2103      	movs	r1, #3
 8008678:	ab03      	add	r3, sp, #12
 800867a:	9301      	str	r3, [sp, #4]
 800867c:	ab02      	add	r3, sp, #8
 800867e:	9300      	str	r3, [sp, #0]
 8008680:	ec45 4b10 	vmov	d0, r4, r5
 8008684:	4653      	mov	r3, sl
 8008686:	4632      	mov	r2, r6
 8008688:	f002 f82a 	bl	800a6e0 <_dtoa_r>
 800868c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008690:	4607      	mov	r7, r0
 8008692:	d102      	bne.n	800869a <__cvt+0x66>
 8008694:	f019 0f01 	tst.w	r9, #1
 8008698:	d022      	beq.n	80086e0 <__cvt+0xac>
 800869a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800869e:	eb07 0906 	add.w	r9, r7, r6
 80086a2:	d110      	bne.n	80086c6 <__cvt+0x92>
 80086a4:	783b      	ldrb	r3, [r7, #0]
 80086a6:	2b30      	cmp	r3, #48	; 0x30
 80086a8:	d10a      	bne.n	80086c0 <__cvt+0x8c>
 80086aa:	2200      	movs	r2, #0
 80086ac:	2300      	movs	r3, #0
 80086ae:	4620      	mov	r0, r4
 80086b0:	4629      	mov	r1, r5
 80086b2:	f7f8 fa09 	bl	8000ac8 <__aeabi_dcmpeq>
 80086b6:	b918      	cbnz	r0, 80086c0 <__cvt+0x8c>
 80086b8:	f1c6 0601 	rsb	r6, r6, #1
 80086bc:	f8ca 6000 	str.w	r6, [sl]
 80086c0:	f8da 3000 	ldr.w	r3, [sl]
 80086c4:	4499      	add	r9, r3
 80086c6:	2200      	movs	r2, #0
 80086c8:	2300      	movs	r3, #0
 80086ca:	4620      	mov	r0, r4
 80086cc:	4629      	mov	r1, r5
 80086ce:	f7f8 f9fb 	bl	8000ac8 <__aeabi_dcmpeq>
 80086d2:	b108      	cbz	r0, 80086d8 <__cvt+0xa4>
 80086d4:	f8cd 900c 	str.w	r9, [sp, #12]
 80086d8:	2230      	movs	r2, #48	; 0x30
 80086da:	9b03      	ldr	r3, [sp, #12]
 80086dc:	454b      	cmp	r3, r9
 80086de:	d307      	bcc.n	80086f0 <__cvt+0xbc>
 80086e0:	9b03      	ldr	r3, [sp, #12]
 80086e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80086e4:	1bdb      	subs	r3, r3, r7
 80086e6:	4638      	mov	r0, r7
 80086e8:	6013      	str	r3, [r2, #0]
 80086ea:	b004      	add	sp, #16
 80086ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086f0:	1c59      	adds	r1, r3, #1
 80086f2:	9103      	str	r1, [sp, #12]
 80086f4:	701a      	strb	r2, [r3, #0]
 80086f6:	e7f0      	b.n	80086da <__cvt+0xa6>

080086f8 <__exponent>:
 80086f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80086fa:	4603      	mov	r3, r0
 80086fc:	2900      	cmp	r1, #0
 80086fe:	bfb8      	it	lt
 8008700:	4249      	neglt	r1, r1
 8008702:	f803 2b02 	strb.w	r2, [r3], #2
 8008706:	bfb4      	ite	lt
 8008708:	222d      	movlt	r2, #45	; 0x2d
 800870a:	222b      	movge	r2, #43	; 0x2b
 800870c:	2909      	cmp	r1, #9
 800870e:	7042      	strb	r2, [r0, #1]
 8008710:	dd2a      	ble.n	8008768 <__exponent+0x70>
 8008712:	f10d 0407 	add.w	r4, sp, #7
 8008716:	46a4      	mov	ip, r4
 8008718:	270a      	movs	r7, #10
 800871a:	46a6      	mov	lr, r4
 800871c:	460a      	mov	r2, r1
 800871e:	fb91 f6f7 	sdiv	r6, r1, r7
 8008722:	fb07 1516 	mls	r5, r7, r6, r1
 8008726:	3530      	adds	r5, #48	; 0x30
 8008728:	2a63      	cmp	r2, #99	; 0x63
 800872a:	f104 34ff 	add.w	r4, r4, #4294967295
 800872e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008732:	4631      	mov	r1, r6
 8008734:	dcf1      	bgt.n	800871a <__exponent+0x22>
 8008736:	3130      	adds	r1, #48	; 0x30
 8008738:	f1ae 0502 	sub.w	r5, lr, #2
 800873c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008740:	1c44      	adds	r4, r0, #1
 8008742:	4629      	mov	r1, r5
 8008744:	4561      	cmp	r1, ip
 8008746:	d30a      	bcc.n	800875e <__exponent+0x66>
 8008748:	f10d 0209 	add.w	r2, sp, #9
 800874c:	eba2 020e 	sub.w	r2, r2, lr
 8008750:	4565      	cmp	r5, ip
 8008752:	bf88      	it	hi
 8008754:	2200      	movhi	r2, #0
 8008756:	4413      	add	r3, r2
 8008758:	1a18      	subs	r0, r3, r0
 800875a:	b003      	add	sp, #12
 800875c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800875e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008762:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008766:	e7ed      	b.n	8008744 <__exponent+0x4c>
 8008768:	2330      	movs	r3, #48	; 0x30
 800876a:	3130      	adds	r1, #48	; 0x30
 800876c:	7083      	strb	r3, [r0, #2]
 800876e:	70c1      	strb	r1, [r0, #3]
 8008770:	1d03      	adds	r3, r0, #4
 8008772:	e7f1      	b.n	8008758 <__exponent+0x60>

08008774 <_printf_float>:
 8008774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008778:	ed2d 8b02 	vpush	{d8}
 800877c:	b08d      	sub	sp, #52	; 0x34
 800877e:	460c      	mov	r4, r1
 8008780:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008784:	4616      	mov	r6, r2
 8008786:	461f      	mov	r7, r3
 8008788:	4605      	mov	r5, r0
 800878a:	f003 fabb 	bl	800bd04 <_localeconv_r>
 800878e:	f8d0 a000 	ldr.w	sl, [r0]
 8008792:	4650      	mov	r0, sl
 8008794:	f7f7 fd6c 	bl	8000270 <strlen>
 8008798:	2300      	movs	r3, #0
 800879a:	930a      	str	r3, [sp, #40]	; 0x28
 800879c:	6823      	ldr	r3, [r4, #0]
 800879e:	9305      	str	r3, [sp, #20]
 80087a0:	f8d8 3000 	ldr.w	r3, [r8]
 80087a4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80087a8:	3307      	adds	r3, #7
 80087aa:	f023 0307 	bic.w	r3, r3, #7
 80087ae:	f103 0208 	add.w	r2, r3, #8
 80087b2:	f8c8 2000 	str.w	r2, [r8]
 80087b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ba:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80087be:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80087c2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80087c6:	9307      	str	r3, [sp, #28]
 80087c8:	f8cd 8018 	str.w	r8, [sp, #24]
 80087cc:	ee08 0a10 	vmov	s16, r0
 80087d0:	4b9f      	ldr	r3, [pc, #636]	; (8008a50 <_printf_float+0x2dc>)
 80087d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80087d6:	f04f 32ff 	mov.w	r2, #4294967295
 80087da:	f7f8 f9a7 	bl	8000b2c <__aeabi_dcmpun>
 80087de:	bb88      	cbnz	r0, 8008844 <_printf_float+0xd0>
 80087e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80087e4:	4b9a      	ldr	r3, [pc, #616]	; (8008a50 <_printf_float+0x2dc>)
 80087e6:	f04f 32ff 	mov.w	r2, #4294967295
 80087ea:	f7f8 f981 	bl	8000af0 <__aeabi_dcmple>
 80087ee:	bb48      	cbnz	r0, 8008844 <_printf_float+0xd0>
 80087f0:	2200      	movs	r2, #0
 80087f2:	2300      	movs	r3, #0
 80087f4:	4640      	mov	r0, r8
 80087f6:	4649      	mov	r1, r9
 80087f8:	f7f8 f970 	bl	8000adc <__aeabi_dcmplt>
 80087fc:	b110      	cbz	r0, 8008804 <_printf_float+0x90>
 80087fe:	232d      	movs	r3, #45	; 0x2d
 8008800:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008804:	4b93      	ldr	r3, [pc, #588]	; (8008a54 <_printf_float+0x2e0>)
 8008806:	4894      	ldr	r0, [pc, #592]	; (8008a58 <_printf_float+0x2e4>)
 8008808:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800880c:	bf94      	ite	ls
 800880e:	4698      	movls	r8, r3
 8008810:	4680      	movhi	r8, r0
 8008812:	2303      	movs	r3, #3
 8008814:	6123      	str	r3, [r4, #16]
 8008816:	9b05      	ldr	r3, [sp, #20]
 8008818:	f023 0204 	bic.w	r2, r3, #4
 800881c:	6022      	str	r2, [r4, #0]
 800881e:	f04f 0900 	mov.w	r9, #0
 8008822:	9700      	str	r7, [sp, #0]
 8008824:	4633      	mov	r3, r6
 8008826:	aa0b      	add	r2, sp, #44	; 0x2c
 8008828:	4621      	mov	r1, r4
 800882a:	4628      	mov	r0, r5
 800882c:	f000 f9d8 	bl	8008be0 <_printf_common>
 8008830:	3001      	adds	r0, #1
 8008832:	f040 8090 	bne.w	8008956 <_printf_float+0x1e2>
 8008836:	f04f 30ff 	mov.w	r0, #4294967295
 800883a:	b00d      	add	sp, #52	; 0x34
 800883c:	ecbd 8b02 	vpop	{d8}
 8008840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008844:	4642      	mov	r2, r8
 8008846:	464b      	mov	r3, r9
 8008848:	4640      	mov	r0, r8
 800884a:	4649      	mov	r1, r9
 800884c:	f7f8 f96e 	bl	8000b2c <__aeabi_dcmpun>
 8008850:	b140      	cbz	r0, 8008864 <_printf_float+0xf0>
 8008852:	464b      	mov	r3, r9
 8008854:	2b00      	cmp	r3, #0
 8008856:	bfbc      	itt	lt
 8008858:	232d      	movlt	r3, #45	; 0x2d
 800885a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800885e:	487f      	ldr	r0, [pc, #508]	; (8008a5c <_printf_float+0x2e8>)
 8008860:	4b7f      	ldr	r3, [pc, #508]	; (8008a60 <_printf_float+0x2ec>)
 8008862:	e7d1      	b.n	8008808 <_printf_float+0x94>
 8008864:	6863      	ldr	r3, [r4, #4]
 8008866:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800886a:	9206      	str	r2, [sp, #24]
 800886c:	1c5a      	adds	r2, r3, #1
 800886e:	d13f      	bne.n	80088f0 <_printf_float+0x17c>
 8008870:	2306      	movs	r3, #6
 8008872:	6063      	str	r3, [r4, #4]
 8008874:	9b05      	ldr	r3, [sp, #20]
 8008876:	6861      	ldr	r1, [r4, #4]
 8008878:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800887c:	2300      	movs	r3, #0
 800887e:	9303      	str	r3, [sp, #12]
 8008880:	ab0a      	add	r3, sp, #40	; 0x28
 8008882:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008886:	ab09      	add	r3, sp, #36	; 0x24
 8008888:	ec49 8b10 	vmov	d0, r8, r9
 800888c:	9300      	str	r3, [sp, #0]
 800888e:	6022      	str	r2, [r4, #0]
 8008890:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008894:	4628      	mov	r0, r5
 8008896:	f7ff fecd 	bl	8008634 <__cvt>
 800889a:	9b06      	ldr	r3, [sp, #24]
 800889c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800889e:	2b47      	cmp	r3, #71	; 0x47
 80088a0:	4680      	mov	r8, r0
 80088a2:	d108      	bne.n	80088b6 <_printf_float+0x142>
 80088a4:	1cc8      	adds	r0, r1, #3
 80088a6:	db02      	blt.n	80088ae <_printf_float+0x13a>
 80088a8:	6863      	ldr	r3, [r4, #4]
 80088aa:	4299      	cmp	r1, r3
 80088ac:	dd41      	ble.n	8008932 <_printf_float+0x1be>
 80088ae:	f1ab 0b02 	sub.w	fp, fp, #2
 80088b2:	fa5f fb8b 	uxtb.w	fp, fp
 80088b6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80088ba:	d820      	bhi.n	80088fe <_printf_float+0x18a>
 80088bc:	3901      	subs	r1, #1
 80088be:	465a      	mov	r2, fp
 80088c0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80088c4:	9109      	str	r1, [sp, #36]	; 0x24
 80088c6:	f7ff ff17 	bl	80086f8 <__exponent>
 80088ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80088cc:	1813      	adds	r3, r2, r0
 80088ce:	2a01      	cmp	r2, #1
 80088d0:	4681      	mov	r9, r0
 80088d2:	6123      	str	r3, [r4, #16]
 80088d4:	dc02      	bgt.n	80088dc <_printf_float+0x168>
 80088d6:	6822      	ldr	r2, [r4, #0]
 80088d8:	07d2      	lsls	r2, r2, #31
 80088da:	d501      	bpl.n	80088e0 <_printf_float+0x16c>
 80088dc:	3301      	adds	r3, #1
 80088de:	6123      	str	r3, [r4, #16]
 80088e0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d09c      	beq.n	8008822 <_printf_float+0xae>
 80088e8:	232d      	movs	r3, #45	; 0x2d
 80088ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088ee:	e798      	b.n	8008822 <_printf_float+0xae>
 80088f0:	9a06      	ldr	r2, [sp, #24]
 80088f2:	2a47      	cmp	r2, #71	; 0x47
 80088f4:	d1be      	bne.n	8008874 <_printf_float+0x100>
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d1bc      	bne.n	8008874 <_printf_float+0x100>
 80088fa:	2301      	movs	r3, #1
 80088fc:	e7b9      	b.n	8008872 <_printf_float+0xfe>
 80088fe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008902:	d118      	bne.n	8008936 <_printf_float+0x1c2>
 8008904:	2900      	cmp	r1, #0
 8008906:	6863      	ldr	r3, [r4, #4]
 8008908:	dd0b      	ble.n	8008922 <_printf_float+0x1ae>
 800890a:	6121      	str	r1, [r4, #16]
 800890c:	b913      	cbnz	r3, 8008914 <_printf_float+0x1a0>
 800890e:	6822      	ldr	r2, [r4, #0]
 8008910:	07d0      	lsls	r0, r2, #31
 8008912:	d502      	bpl.n	800891a <_printf_float+0x1a6>
 8008914:	3301      	adds	r3, #1
 8008916:	440b      	add	r3, r1
 8008918:	6123      	str	r3, [r4, #16]
 800891a:	65a1      	str	r1, [r4, #88]	; 0x58
 800891c:	f04f 0900 	mov.w	r9, #0
 8008920:	e7de      	b.n	80088e0 <_printf_float+0x16c>
 8008922:	b913      	cbnz	r3, 800892a <_printf_float+0x1b6>
 8008924:	6822      	ldr	r2, [r4, #0]
 8008926:	07d2      	lsls	r2, r2, #31
 8008928:	d501      	bpl.n	800892e <_printf_float+0x1ba>
 800892a:	3302      	adds	r3, #2
 800892c:	e7f4      	b.n	8008918 <_printf_float+0x1a4>
 800892e:	2301      	movs	r3, #1
 8008930:	e7f2      	b.n	8008918 <_printf_float+0x1a4>
 8008932:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008936:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008938:	4299      	cmp	r1, r3
 800893a:	db05      	blt.n	8008948 <_printf_float+0x1d4>
 800893c:	6823      	ldr	r3, [r4, #0]
 800893e:	6121      	str	r1, [r4, #16]
 8008940:	07d8      	lsls	r0, r3, #31
 8008942:	d5ea      	bpl.n	800891a <_printf_float+0x1a6>
 8008944:	1c4b      	adds	r3, r1, #1
 8008946:	e7e7      	b.n	8008918 <_printf_float+0x1a4>
 8008948:	2900      	cmp	r1, #0
 800894a:	bfd4      	ite	le
 800894c:	f1c1 0202 	rsble	r2, r1, #2
 8008950:	2201      	movgt	r2, #1
 8008952:	4413      	add	r3, r2
 8008954:	e7e0      	b.n	8008918 <_printf_float+0x1a4>
 8008956:	6823      	ldr	r3, [r4, #0]
 8008958:	055a      	lsls	r2, r3, #21
 800895a:	d407      	bmi.n	800896c <_printf_float+0x1f8>
 800895c:	6923      	ldr	r3, [r4, #16]
 800895e:	4642      	mov	r2, r8
 8008960:	4631      	mov	r1, r6
 8008962:	4628      	mov	r0, r5
 8008964:	47b8      	blx	r7
 8008966:	3001      	adds	r0, #1
 8008968:	d12c      	bne.n	80089c4 <_printf_float+0x250>
 800896a:	e764      	b.n	8008836 <_printf_float+0xc2>
 800896c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008970:	f240 80e0 	bls.w	8008b34 <_printf_float+0x3c0>
 8008974:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008978:	2200      	movs	r2, #0
 800897a:	2300      	movs	r3, #0
 800897c:	f7f8 f8a4 	bl	8000ac8 <__aeabi_dcmpeq>
 8008980:	2800      	cmp	r0, #0
 8008982:	d034      	beq.n	80089ee <_printf_float+0x27a>
 8008984:	4a37      	ldr	r2, [pc, #220]	; (8008a64 <_printf_float+0x2f0>)
 8008986:	2301      	movs	r3, #1
 8008988:	4631      	mov	r1, r6
 800898a:	4628      	mov	r0, r5
 800898c:	47b8      	blx	r7
 800898e:	3001      	adds	r0, #1
 8008990:	f43f af51 	beq.w	8008836 <_printf_float+0xc2>
 8008994:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008998:	429a      	cmp	r2, r3
 800899a:	db02      	blt.n	80089a2 <_printf_float+0x22e>
 800899c:	6823      	ldr	r3, [r4, #0]
 800899e:	07d8      	lsls	r0, r3, #31
 80089a0:	d510      	bpl.n	80089c4 <_printf_float+0x250>
 80089a2:	ee18 3a10 	vmov	r3, s16
 80089a6:	4652      	mov	r2, sl
 80089a8:	4631      	mov	r1, r6
 80089aa:	4628      	mov	r0, r5
 80089ac:	47b8      	blx	r7
 80089ae:	3001      	adds	r0, #1
 80089b0:	f43f af41 	beq.w	8008836 <_printf_float+0xc2>
 80089b4:	f04f 0800 	mov.w	r8, #0
 80089b8:	f104 091a 	add.w	r9, r4, #26
 80089bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089be:	3b01      	subs	r3, #1
 80089c0:	4543      	cmp	r3, r8
 80089c2:	dc09      	bgt.n	80089d8 <_printf_float+0x264>
 80089c4:	6823      	ldr	r3, [r4, #0]
 80089c6:	079b      	lsls	r3, r3, #30
 80089c8:	f100 8105 	bmi.w	8008bd6 <_printf_float+0x462>
 80089cc:	68e0      	ldr	r0, [r4, #12]
 80089ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089d0:	4298      	cmp	r0, r3
 80089d2:	bfb8      	it	lt
 80089d4:	4618      	movlt	r0, r3
 80089d6:	e730      	b.n	800883a <_printf_float+0xc6>
 80089d8:	2301      	movs	r3, #1
 80089da:	464a      	mov	r2, r9
 80089dc:	4631      	mov	r1, r6
 80089de:	4628      	mov	r0, r5
 80089e0:	47b8      	blx	r7
 80089e2:	3001      	adds	r0, #1
 80089e4:	f43f af27 	beq.w	8008836 <_printf_float+0xc2>
 80089e8:	f108 0801 	add.w	r8, r8, #1
 80089ec:	e7e6      	b.n	80089bc <_printf_float+0x248>
 80089ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	dc39      	bgt.n	8008a68 <_printf_float+0x2f4>
 80089f4:	4a1b      	ldr	r2, [pc, #108]	; (8008a64 <_printf_float+0x2f0>)
 80089f6:	2301      	movs	r3, #1
 80089f8:	4631      	mov	r1, r6
 80089fa:	4628      	mov	r0, r5
 80089fc:	47b8      	blx	r7
 80089fe:	3001      	adds	r0, #1
 8008a00:	f43f af19 	beq.w	8008836 <_printf_float+0xc2>
 8008a04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a08:	4313      	orrs	r3, r2
 8008a0a:	d102      	bne.n	8008a12 <_printf_float+0x29e>
 8008a0c:	6823      	ldr	r3, [r4, #0]
 8008a0e:	07d9      	lsls	r1, r3, #31
 8008a10:	d5d8      	bpl.n	80089c4 <_printf_float+0x250>
 8008a12:	ee18 3a10 	vmov	r3, s16
 8008a16:	4652      	mov	r2, sl
 8008a18:	4631      	mov	r1, r6
 8008a1a:	4628      	mov	r0, r5
 8008a1c:	47b8      	blx	r7
 8008a1e:	3001      	adds	r0, #1
 8008a20:	f43f af09 	beq.w	8008836 <_printf_float+0xc2>
 8008a24:	f04f 0900 	mov.w	r9, #0
 8008a28:	f104 0a1a 	add.w	sl, r4, #26
 8008a2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a2e:	425b      	negs	r3, r3
 8008a30:	454b      	cmp	r3, r9
 8008a32:	dc01      	bgt.n	8008a38 <_printf_float+0x2c4>
 8008a34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a36:	e792      	b.n	800895e <_printf_float+0x1ea>
 8008a38:	2301      	movs	r3, #1
 8008a3a:	4652      	mov	r2, sl
 8008a3c:	4631      	mov	r1, r6
 8008a3e:	4628      	mov	r0, r5
 8008a40:	47b8      	blx	r7
 8008a42:	3001      	adds	r0, #1
 8008a44:	f43f aef7 	beq.w	8008836 <_printf_float+0xc2>
 8008a48:	f109 0901 	add.w	r9, r9, #1
 8008a4c:	e7ee      	b.n	8008a2c <_printf_float+0x2b8>
 8008a4e:	bf00      	nop
 8008a50:	7fefffff 	.word	0x7fefffff
 8008a54:	0800e508 	.word	0x0800e508
 8008a58:	0800e50c 	.word	0x0800e50c
 8008a5c:	0800e514 	.word	0x0800e514
 8008a60:	0800e510 	.word	0x0800e510
 8008a64:	0800e518 	.word	0x0800e518
 8008a68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a6a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008a6c:	429a      	cmp	r2, r3
 8008a6e:	bfa8      	it	ge
 8008a70:	461a      	movge	r2, r3
 8008a72:	2a00      	cmp	r2, #0
 8008a74:	4691      	mov	r9, r2
 8008a76:	dc37      	bgt.n	8008ae8 <_printf_float+0x374>
 8008a78:	f04f 0b00 	mov.w	fp, #0
 8008a7c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008a80:	f104 021a 	add.w	r2, r4, #26
 8008a84:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008a86:	9305      	str	r3, [sp, #20]
 8008a88:	eba3 0309 	sub.w	r3, r3, r9
 8008a8c:	455b      	cmp	r3, fp
 8008a8e:	dc33      	bgt.n	8008af8 <_printf_float+0x384>
 8008a90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a94:	429a      	cmp	r2, r3
 8008a96:	db3b      	blt.n	8008b10 <_printf_float+0x39c>
 8008a98:	6823      	ldr	r3, [r4, #0]
 8008a9a:	07da      	lsls	r2, r3, #31
 8008a9c:	d438      	bmi.n	8008b10 <_printf_float+0x39c>
 8008a9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008aa0:	9b05      	ldr	r3, [sp, #20]
 8008aa2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008aa4:	1ad3      	subs	r3, r2, r3
 8008aa6:	eba2 0901 	sub.w	r9, r2, r1
 8008aaa:	4599      	cmp	r9, r3
 8008aac:	bfa8      	it	ge
 8008aae:	4699      	movge	r9, r3
 8008ab0:	f1b9 0f00 	cmp.w	r9, #0
 8008ab4:	dc35      	bgt.n	8008b22 <_printf_float+0x3ae>
 8008ab6:	f04f 0800 	mov.w	r8, #0
 8008aba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008abe:	f104 0a1a 	add.w	sl, r4, #26
 8008ac2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008ac6:	1a9b      	subs	r3, r3, r2
 8008ac8:	eba3 0309 	sub.w	r3, r3, r9
 8008acc:	4543      	cmp	r3, r8
 8008ace:	f77f af79 	ble.w	80089c4 <_printf_float+0x250>
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	4652      	mov	r2, sl
 8008ad6:	4631      	mov	r1, r6
 8008ad8:	4628      	mov	r0, r5
 8008ada:	47b8      	blx	r7
 8008adc:	3001      	adds	r0, #1
 8008ade:	f43f aeaa 	beq.w	8008836 <_printf_float+0xc2>
 8008ae2:	f108 0801 	add.w	r8, r8, #1
 8008ae6:	e7ec      	b.n	8008ac2 <_printf_float+0x34e>
 8008ae8:	4613      	mov	r3, r2
 8008aea:	4631      	mov	r1, r6
 8008aec:	4642      	mov	r2, r8
 8008aee:	4628      	mov	r0, r5
 8008af0:	47b8      	blx	r7
 8008af2:	3001      	adds	r0, #1
 8008af4:	d1c0      	bne.n	8008a78 <_printf_float+0x304>
 8008af6:	e69e      	b.n	8008836 <_printf_float+0xc2>
 8008af8:	2301      	movs	r3, #1
 8008afa:	4631      	mov	r1, r6
 8008afc:	4628      	mov	r0, r5
 8008afe:	9205      	str	r2, [sp, #20]
 8008b00:	47b8      	blx	r7
 8008b02:	3001      	adds	r0, #1
 8008b04:	f43f ae97 	beq.w	8008836 <_printf_float+0xc2>
 8008b08:	9a05      	ldr	r2, [sp, #20]
 8008b0a:	f10b 0b01 	add.w	fp, fp, #1
 8008b0e:	e7b9      	b.n	8008a84 <_printf_float+0x310>
 8008b10:	ee18 3a10 	vmov	r3, s16
 8008b14:	4652      	mov	r2, sl
 8008b16:	4631      	mov	r1, r6
 8008b18:	4628      	mov	r0, r5
 8008b1a:	47b8      	blx	r7
 8008b1c:	3001      	adds	r0, #1
 8008b1e:	d1be      	bne.n	8008a9e <_printf_float+0x32a>
 8008b20:	e689      	b.n	8008836 <_printf_float+0xc2>
 8008b22:	9a05      	ldr	r2, [sp, #20]
 8008b24:	464b      	mov	r3, r9
 8008b26:	4442      	add	r2, r8
 8008b28:	4631      	mov	r1, r6
 8008b2a:	4628      	mov	r0, r5
 8008b2c:	47b8      	blx	r7
 8008b2e:	3001      	adds	r0, #1
 8008b30:	d1c1      	bne.n	8008ab6 <_printf_float+0x342>
 8008b32:	e680      	b.n	8008836 <_printf_float+0xc2>
 8008b34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b36:	2a01      	cmp	r2, #1
 8008b38:	dc01      	bgt.n	8008b3e <_printf_float+0x3ca>
 8008b3a:	07db      	lsls	r3, r3, #31
 8008b3c:	d538      	bpl.n	8008bb0 <_printf_float+0x43c>
 8008b3e:	2301      	movs	r3, #1
 8008b40:	4642      	mov	r2, r8
 8008b42:	4631      	mov	r1, r6
 8008b44:	4628      	mov	r0, r5
 8008b46:	47b8      	blx	r7
 8008b48:	3001      	adds	r0, #1
 8008b4a:	f43f ae74 	beq.w	8008836 <_printf_float+0xc2>
 8008b4e:	ee18 3a10 	vmov	r3, s16
 8008b52:	4652      	mov	r2, sl
 8008b54:	4631      	mov	r1, r6
 8008b56:	4628      	mov	r0, r5
 8008b58:	47b8      	blx	r7
 8008b5a:	3001      	adds	r0, #1
 8008b5c:	f43f ae6b 	beq.w	8008836 <_printf_float+0xc2>
 8008b60:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008b64:	2200      	movs	r2, #0
 8008b66:	2300      	movs	r3, #0
 8008b68:	f7f7 ffae 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b6c:	b9d8      	cbnz	r0, 8008ba6 <_printf_float+0x432>
 8008b6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b70:	f108 0201 	add.w	r2, r8, #1
 8008b74:	3b01      	subs	r3, #1
 8008b76:	4631      	mov	r1, r6
 8008b78:	4628      	mov	r0, r5
 8008b7a:	47b8      	blx	r7
 8008b7c:	3001      	adds	r0, #1
 8008b7e:	d10e      	bne.n	8008b9e <_printf_float+0x42a>
 8008b80:	e659      	b.n	8008836 <_printf_float+0xc2>
 8008b82:	2301      	movs	r3, #1
 8008b84:	4652      	mov	r2, sl
 8008b86:	4631      	mov	r1, r6
 8008b88:	4628      	mov	r0, r5
 8008b8a:	47b8      	blx	r7
 8008b8c:	3001      	adds	r0, #1
 8008b8e:	f43f ae52 	beq.w	8008836 <_printf_float+0xc2>
 8008b92:	f108 0801 	add.w	r8, r8, #1
 8008b96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b98:	3b01      	subs	r3, #1
 8008b9a:	4543      	cmp	r3, r8
 8008b9c:	dcf1      	bgt.n	8008b82 <_printf_float+0x40e>
 8008b9e:	464b      	mov	r3, r9
 8008ba0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008ba4:	e6dc      	b.n	8008960 <_printf_float+0x1ec>
 8008ba6:	f04f 0800 	mov.w	r8, #0
 8008baa:	f104 0a1a 	add.w	sl, r4, #26
 8008bae:	e7f2      	b.n	8008b96 <_printf_float+0x422>
 8008bb0:	2301      	movs	r3, #1
 8008bb2:	4642      	mov	r2, r8
 8008bb4:	e7df      	b.n	8008b76 <_printf_float+0x402>
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	464a      	mov	r2, r9
 8008bba:	4631      	mov	r1, r6
 8008bbc:	4628      	mov	r0, r5
 8008bbe:	47b8      	blx	r7
 8008bc0:	3001      	adds	r0, #1
 8008bc2:	f43f ae38 	beq.w	8008836 <_printf_float+0xc2>
 8008bc6:	f108 0801 	add.w	r8, r8, #1
 8008bca:	68e3      	ldr	r3, [r4, #12]
 8008bcc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008bce:	1a5b      	subs	r3, r3, r1
 8008bd0:	4543      	cmp	r3, r8
 8008bd2:	dcf0      	bgt.n	8008bb6 <_printf_float+0x442>
 8008bd4:	e6fa      	b.n	80089cc <_printf_float+0x258>
 8008bd6:	f04f 0800 	mov.w	r8, #0
 8008bda:	f104 0919 	add.w	r9, r4, #25
 8008bde:	e7f4      	b.n	8008bca <_printf_float+0x456>

08008be0 <_printf_common>:
 8008be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008be4:	4616      	mov	r6, r2
 8008be6:	4699      	mov	r9, r3
 8008be8:	688a      	ldr	r2, [r1, #8]
 8008bea:	690b      	ldr	r3, [r1, #16]
 8008bec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008bf0:	4293      	cmp	r3, r2
 8008bf2:	bfb8      	it	lt
 8008bf4:	4613      	movlt	r3, r2
 8008bf6:	6033      	str	r3, [r6, #0]
 8008bf8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008bfc:	4607      	mov	r7, r0
 8008bfe:	460c      	mov	r4, r1
 8008c00:	b10a      	cbz	r2, 8008c06 <_printf_common+0x26>
 8008c02:	3301      	adds	r3, #1
 8008c04:	6033      	str	r3, [r6, #0]
 8008c06:	6823      	ldr	r3, [r4, #0]
 8008c08:	0699      	lsls	r1, r3, #26
 8008c0a:	bf42      	ittt	mi
 8008c0c:	6833      	ldrmi	r3, [r6, #0]
 8008c0e:	3302      	addmi	r3, #2
 8008c10:	6033      	strmi	r3, [r6, #0]
 8008c12:	6825      	ldr	r5, [r4, #0]
 8008c14:	f015 0506 	ands.w	r5, r5, #6
 8008c18:	d106      	bne.n	8008c28 <_printf_common+0x48>
 8008c1a:	f104 0a19 	add.w	sl, r4, #25
 8008c1e:	68e3      	ldr	r3, [r4, #12]
 8008c20:	6832      	ldr	r2, [r6, #0]
 8008c22:	1a9b      	subs	r3, r3, r2
 8008c24:	42ab      	cmp	r3, r5
 8008c26:	dc26      	bgt.n	8008c76 <_printf_common+0x96>
 8008c28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008c2c:	1e13      	subs	r3, r2, #0
 8008c2e:	6822      	ldr	r2, [r4, #0]
 8008c30:	bf18      	it	ne
 8008c32:	2301      	movne	r3, #1
 8008c34:	0692      	lsls	r2, r2, #26
 8008c36:	d42b      	bmi.n	8008c90 <_printf_common+0xb0>
 8008c38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008c3c:	4649      	mov	r1, r9
 8008c3e:	4638      	mov	r0, r7
 8008c40:	47c0      	blx	r8
 8008c42:	3001      	adds	r0, #1
 8008c44:	d01e      	beq.n	8008c84 <_printf_common+0xa4>
 8008c46:	6823      	ldr	r3, [r4, #0]
 8008c48:	68e5      	ldr	r5, [r4, #12]
 8008c4a:	6832      	ldr	r2, [r6, #0]
 8008c4c:	f003 0306 	and.w	r3, r3, #6
 8008c50:	2b04      	cmp	r3, #4
 8008c52:	bf08      	it	eq
 8008c54:	1aad      	subeq	r5, r5, r2
 8008c56:	68a3      	ldr	r3, [r4, #8]
 8008c58:	6922      	ldr	r2, [r4, #16]
 8008c5a:	bf0c      	ite	eq
 8008c5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c60:	2500      	movne	r5, #0
 8008c62:	4293      	cmp	r3, r2
 8008c64:	bfc4      	itt	gt
 8008c66:	1a9b      	subgt	r3, r3, r2
 8008c68:	18ed      	addgt	r5, r5, r3
 8008c6a:	2600      	movs	r6, #0
 8008c6c:	341a      	adds	r4, #26
 8008c6e:	42b5      	cmp	r5, r6
 8008c70:	d11a      	bne.n	8008ca8 <_printf_common+0xc8>
 8008c72:	2000      	movs	r0, #0
 8008c74:	e008      	b.n	8008c88 <_printf_common+0xa8>
 8008c76:	2301      	movs	r3, #1
 8008c78:	4652      	mov	r2, sl
 8008c7a:	4649      	mov	r1, r9
 8008c7c:	4638      	mov	r0, r7
 8008c7e:	47c0      	blx	r8
 8008c80:	3001      	adds	r0, #1
 8008c82:	d103      	bne.n	8008c8c <_printf_common+0xac>
 8008c84:	f04f 30ff 	mov.w	r0, #4294967295
 8008c88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c8c:	3501      	adds	r5, #1
 8008c8e:	e7c6      	b.n	8008c1e <_printf_common+0x3e>
 8008c90:	18e1      	adds	r1, r4, r3
 8008c92:	1c5a      	adds	r2, r3, #1
 8008c94:	2030      	movs	r0, #48	; 0x30
 8008c96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008c9a:	4422      	add	r2, r4
 8008c9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008ca0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008ca4:	3302      	adds	r3, #2
 8008ca6:	e7c7      	b.n	8008c38 <_printf_common+0x58>
 8008ca8:	2301      	movs	r3, #1
 8008caa:	4622      	mov	r2, r4
 8008cac:	4649      	mov	r1, r9
 8008cae:	4638      	mov	r0, r7
 8008cb0:	47c0      	blx	r8
 8008cb2:	3001      	adds	r0, #1
 8008cb4:	d0e6      	beq.n	8008c84 <_printf_common+0xa4>
 8008cb6:	3601      	adds	r6, #1
 8008cb8:	e7d9      	b.n	8008c6e <_printf_common+0x8e>
	...

08008cbc <_printf_i>:
 8008cbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008cc0:	460c      	mov	r4, r1
 8008cc2:	4691      	mov	r9, r2
 8008cc4:	7e27      	ldrb	r7, [r4, #24]
 8008cc6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008cc8:	2f78      	cmp	r7, #120	; 0x78
 8008cca:	4680      	mov	r8, r0
 8008ccc:	469a      	mov	sl, r3
 8008cce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008cd2:	d807      	bhi.n	8008ce4 <_printf_i+0x28>
 8008cd4:	2f62      	cmp	r7, #98	; 0x62
 8008cd6:	d80a      	bhi.n	8008cee <_printf_i+0x32>
 8008cd8:	2f00      	cmp	r7, #0
 8008cda:	f000 80d8 	beq.w	8008e8e <_printf_i+0x1d2>
 8008cde:	2f58      	cmp	r7, #88	; 0x58
 8008ce0:	f000 80a3 	beq.w	8008e2a <_printf_i+0x16e>
 8008ce4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008ce8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008cec:	e03a      	b.n	8008d64 <_printf_i+0xa8>
 8008cee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008cf2:	2b15      	cmp	r3, #21
 8008cf4:	d8f6      	bhi.n	8008ce4 <_printf_i+0x28>
 8008cf6:	a001      	add	r0, pc, #4	; (adr r0, 8008cfc <_printf_i+0x40>)
 8008cf8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008cfc:	08008d55 	.word	0x08008d55
 8008d00:	08008d69 	.word	0x08008d69
 8008d04:	08008ce5 	.word	0x08008ce5
 8008d08:	08008ce5 	.word	0x08008ce5
 8008d0c:	08008ce5 	.word	0x08008ce5
 8008d10:	08008ce5 	.word	0x08008ce5
 8008d14:	08008d69 	.word	0x08008d69
 8008d18:	08008ce5 	.word	0x08008ce5
 8008d1c:	08008ce5 	.word	0x08008ce5
 8008d20:	08008ce5 	.word	0x08008ce5
 8008d24:	08008ce5 	.word	0x08008ce5
 8008d28:	08008e75 	.word	0x08008e75
 8008d2c:	08008d99 	.word	0x08008d99
 8008d30:	08008e57 	.word	0x08008e57
 8008d34:	08008ce5 	.word	0x08008ce5
 8008d38:	08008ce5 	.word	0x08008ce5
 8008d3c:	08008e97 	.word	0x08008e97
 8008d40:	08008ce5 	.word	0x08008ce5
 8008d44:	08008d99 	.word	0x08008d99
 8008d48:	08008ce5 	.word	0x08008ce5
 8008d4c:	08008ce5 	.word	0x08008ce5
 8008d50:	08008e5f 	.word	0x08008e5f
 8008d54:	680b      	ldr	r3, [r1, #0]
 8008d56:	1d1a      	adds	r2, r3, #4
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	600a      	str	r2, [r1, #0]
 8008d5c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008d60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008d64:	2301      	movs	r3, #1
 8008d66:	e0a3      	b.n	8008eb0 <_printf_i+0x1f4>
 8008d68:	6825      	ldr	r5, [r4, #0]
 8008d6a:	6808      	ldr	r0, [r1, #0]
 8008d6c:	062e      	lsls	r6, r5, #24
 8008d6e:	f100 0304 	add.w	r3, r0, #4
 8008d72:	d50a      	bpl.n	8008d8a <_printf_i+0xce>
 8008d74:	6805      	ldr	r5, [r0, #0]
 8008d76:	600b      	str	r3, [r1, #0]
 8008d78:	2d00      	cmp	r5, #0
 8008d7a:	da03      	bge.n	8008d84 <_printf_i+0xc8>
 8008d7c:	232d      	movs	r3, #45	; 0x2d
 8008d7e:	426d      	negs	r5, r5
 8008d80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d84:	485e      	ldr	r0, [pc, #376]	; (8008f00 <_printf_i+0x244>)
 8008d86:	230a      	movs	r3, #10
 8008d88:	e019      	b.n	8008dbe <_printf_i+0x102>
 8008d8a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008d8e:	6805      	ldr	r5, [r0, #0]
 8008d90:	600b      	str	r3, [r1, #0]
 8008d92:	bf18      	it	ne
 8008d94:	b22d      	sxthne	r5, r5
 8008d96:	e7ef      	b.n	8008d78 <_printf_i+0xbc>
 8008d98:	680b      	ldr	r3, [r1, #0]
 8008d9a:	6825      	ldr	r5, [r4, #0]
 8008d9c:	1d18      	adds	r0, r3, #4
 8008d9e:	6008      	str	r0, [r1, #0]
 8008da0:	0628      	lsls	r0, r5, #24
 8008da2:	d501      	bpl.n	8008da8 <_printf_i+0xec>
 8008da4:	681d      	ldr	r5, [r3, #0]
 8008da6:	e002      	b.n	8008dae <_printf_i+0xf2>
 8008da8:	0669      	lsls	r1, r5, #25
 8008daa:	d5fb      	bpl.n	8008da4 <_printf_i+0xe8>
 8008dac:	881d      	ldrh	r5, [r3, #0]
 8008dae:	4854      	ldr	r0, [pc, #336]	; (8008f00 <_printf_i+0x244>)
 8008db0:	2f6f      	cmp	r7, #111	; 0x6f
 8008db2:	bf0c      	ite	eq
 8008db4:	2308      	moveq	r3, #8
 8008db6:	230a      	movne	r3, #10
 8008db8:	2100      	movs	r1, #0
 8008dba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008dbe:	6866      	ldr	r6, [r4, #4]
 8008dc0:	60a6      	str	r6, [r4, #8]
 8008dc2:	2e00      	cmp	r6, #0
 8008dc4:	bfa2      	ittt	ge
 8008dc6:	6821      	ldrge	r1, [r4, #0]
 8008dc8:	f021 0104 	bicge.w	r1, r1, #4
 8008dcc:	6021      	strge	r1, [r4, #0]
 8008dce:	b90d      	cbnz	r5, 8008dd4 <_printf_i+0x118>
 8008dd0:	2e00      	cmp	r6, #0
 8008dd2:	d04d      	beq.n	8008e70 <_printf_i+0x1b4>
 8008dd4:	4616      	mov	r6, r2
 8008dd6:	fbb5 f1f3 	udiv	r1, r5, r3
 8008dda:	fb03 5711 	mls	r7, r3, r1, r5
 8008dde:	5dc7      	ldrb	r7, [r0, r7]
 8008de0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008de4:	462f      	mov	r7, r5
 8008de6:	42bb      	cmp	r3, r7
 8008de8:	460d      	mov	r5, r1
 8008dea:	d9f4      	bls.n	8008dd6 <_printf_i+0x11a>
 8008dec:	2b08      	cmp	r3, #8
 8008dee:	d10b      	bne.n	8008e08 <_printf_i+0x14c>
 8008df0:	6823      	ldr	r3, [r4, #0]
 8008df2:	07df      	lsls	r7, r3, #31
 8008df4:	d508      	bpl.n	8008e08 <_printf_i+0x14c>
 8008df6:	6923      	ldr	r3, [r4, #16]
 8008df8:	6861      	ldr	r1, [r4, #4]
 8008dfa:	4299      	cmp	r1, r3
 8008dfc:	bfde      	ittt	le
 8008dfe:	2330      	movle	r3, #48	; 0x30
 8008e00:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008e04:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008e08:	1b92      	subs	r2, r2, r6
 8008e0a:	6122      	str	r2, [r4, #16]
 8008e0c:	f8cd a000 	str.w	sl, [sp]
 8008e10:	464b      	mov	r3, r9
 8008e12:	aa03      	add	r2, sp, #12
 8008e14:	4621      	mov	r1, r4
 8008e16:	4640      	mov	r0, r8
 8008e18:	f7ff fee2 	bl	8008be0 <_printf_common>
 8008e1c:	3001      	adds	r0, #1
 8008e1e:	d14c      	bne.n	8008eba <_printf_i+0x1fe>
 8008e20:	f04f 30ff 	mov.w	r0, #4294967295
 8008e24:	b004      	add	sp, #16
 8008e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e2a:	4835      	ldr	r0, [pc, #212]	; (8008f00 <_printf_i+0x244>)
 8008e2c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008e30:	6823      	ldr	r3, [r4, #0]
 8008e32:	680e      	ldr	r6, [r1, #0]
 8008e34:	061f      	lsls	r7, r3, #24
 8008e36:	f856 5b04 	ldr.w	r5, [r6], #4
 8008e3a:	600e      	str	r6, [r1, #0]
 8008e3c:	d514      	bpl.n	8008e68 <_printf_i+0x1ac>
 8008e3e:	07d9      	lsls	r1, r3, #31
 8008e40:	bf44      	itt	mi
 8008e42:	f043 0320 	orrmi.w	r3, r3, #32
 8008e46:	6023      	strmi	r3, [r4, #0]
 8008e48:	b91d      	cbnz	r5, 8008e52 <_printf_i+0x196>
 8008e4a:	6823      	ldr	r3, [r4, #0]
 8008e4c:	f023 0320 	bic.w	r3, r3, #32
 8008e50:	6023      	str	r3, [r4, #0]
 8008e52:	2310      	movs	r3, #16
 8008e54:	e7b0      	b.n	8008db8 <_printf_i+0xfc>
 8008e56:	6823      	ldr	r3, [r4, #0]
 8008e58:	f043 0320 	orr.w	r3, r3, #32
 8008e5c:	6023      	str	r3, [r4, #0]
 8008e5e:	2378      	movs	r3, #120	; 0x78
 8008e60:	4828      	ldr	r0, [pc, #160]	; (8008f04 <_printf_i+0x248>)
 8008e62:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008e66:	e7e3      	b.n	8008e30 <_printf_i+0x174>
 8008e68:	065e      	lsls	r6, r3, #25
 8008e6a:	bf48      	it	mi
 8008e6c:	b2ad      	uxthmi	r5, r5
 8008e6e:	e7e6      	b.n	8008e3e <_printf_i+0x182>
 8008e70:	4616      	mov	r6, r2
 8008e72:	e7bb      	b.n	8008dec <_printf_i+0x130>
 8008e74:	680b      	ldr	r3, [r1, #0]
 8008e76:	6826      	ldr	r6, [r4, #0]
 8008e78:	6960      	ldr	r0, [r4, #20]
 8008e7a:	1d1d      	adds	r5, r3, #4
 8008e7c:	600d      	str	r5, [r1, #0]
 8008e7e:	0635      	lsls	r5, r6, #24
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	d501      	bpl.n	8008e88 <_printf_i+0x1cc>
 8008e84:	6018      	str	r0, [r3, #0]
 8008e86:	e002      	b.n	8008e8e <_printf_i+0x1d2>
 8008e88:	0671      	lsls	r1, r6, #25
 8008e8a:	d5fb      	bpl.n	8008e84 <_printf_i+0x1c8>
 8008e8c:	8018      	strh	r0, [r3, #0]
 8008e8e:	2300      	movs	r3, #0
 8008e90:	6123      	str	r3, [r4, #16]
 8008e92:	4616      	mov	r6, r2
 8008e94:	e7ba      	b.n	8008e0c <_printf_i+0x150>
 8008e96:	680b      	ldr	r3, [r1, #0]
 8008e98:	1d1a      	adds	r2, r3, #4
 8008e9a:	600a      	str	r2, [r1, #0]
 8008e9c:	681e      	ldr	r6, [r3, #0]
 8008e9e:	6862      	ldr	r2, [r4, #4]
 8008ea0:	2100      	movs	r1, #0
 8008ea2:	4630      	mov	r0, r6
 8008ea4:	f7f7 f994 	bl	80001d0 <memchr>
 8008ea8:	b108      	cbz	r0, 8008eae <_printf_i+0x1f2>
 8008eaa:	1b80      	subs	r0, r0, r6
 8008eac:	6060      	str	r0, [r4, #4]
 8008eae:	6863      	ldr	r3, [r4, #4]
 8008eb0:	6123      	str	r3, [r4, #16]
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008eb8:	e7a8      	b.n	8008e0c <_printf_i+0x150>
 8008eba:	6923      	ldr	r3, [r4, #16]
 8008ebc:	4632      	mov	r2, r6
 8008ebe:	4649      	mov	r1, r9
 8008ec0:	4640      	mov	r0, r8
 8008ec2:	47d0      	blx	sl
 8008ec4:	3001      	adds	r0, #1
 8008ec6:	d0ab      	beq.n	8008e20 <_printf_i+0x164>
 8008ec8:	6823      	ldr	r3, [r4, #0]
 8008eca:	079b      	lsls	r3, r3, #30
 8008ecc:	d413      	bmi.n	8008ef6 <_printf_i+0x23a>
 8008ece:	68e0      	ldr	r0, [r4, #12]
 8008ed0:	9b03      	ldr	r3, [sp, #12]
 8008ed2:	4298      	cmp	r0, r3
 8008ed4:	bfb8      	it	lt
 8008ed6:	4618      	movlt	r0, r3
 8008ed8:	e7a4      	b.n	8008e24 <_printf_i+0x168>
 8008eda:	2301      	movs	r3, #1
 8008edc:	4632      	mov	r2, r6
 8008ede:	4649      	mov	r1, r9
 8008ee0:	4640      	mov	r0, r8
 8008ee2:	47d0      	blx	sl
 8008ee4:	3001      	adds	r0, #1
 8008ee6:	d09b      	beq.n	8008e20 <_printf_i+0x164>
 8008ee8:	3501      	adds	r5, #1
 8008eea:	68e3      	ldr	r3, [r4, #12]
 8008eec:	9903      	ldr	r1, [sp, #12]
 8008eee:	1a5b      	subs	r3, r3, r1
 8008ef0:	42ab      	cmp	r3, r5
 8008ef2:	dcf2      	bgt.n	8008eda <_printf_i+0x21e>
 8008ef4:	e7eb      	b.n	8008ece <_printf_i+0x212>
 8008ef6:	2500      	movs	r5, #0
 8008ef8:	f104 0619 	add.w	r6, r4, #25
 8008efc:	e7f5      	b.n	8008eea <_printf_i+0x22e>
 8008efe:	bf00      	nop
 8008f00:	0800e51a 	.word	0x0800e51a
 8008f04:	0800e52b 	.word	0x0800e52b

08008f08 <_scanf_float>:
 8008f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f0c:	b087      	sub	sp, #28
 8008f0e:	4617      	mov	r7, r2
 8008f10:	9303      	str	r3, [sp, #12]
 8008f12:	688b      	ldr	r3, [r1, #8]
 8008f14:	1e5a      	subs	r2, r3, #1
 8008f16:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008f1a:	bf83      	ittte	hi
 8008f1c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008f20:	195b      	addhi	r3, r3, r5
 8008f22:	9302      	strhi	r3, [sp, #8]
 8008f24:	2300      	movls	r3, #0
 8008f26:	bf86      	itte	hi
 8008f28:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008f2c:	608b      	strhi	r3, [r1, #8]
 8008f2e:	9302      	strls	r3, [sp, #8]
 8008f30:	680b      	ldr	r3, [r1, #0]
 8008f32:	468b      	mov	fp, r1
 8008f34:	2500      	movs	r5, #0
 8008f36:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008f3a:	f84b 3b1c 	str.w	r3, [fp], #28
 8008f3e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008f42:	4680      	mov	r8, r0
 8008f44:	460c      	mov	r4, r1
 8008f46:	465e      	mov	r6, fp
 8008f48:	46aa      	mov	sl, r5
 8008f4a:	46a9      	mov	r9, r5
 8008f4c:	9501      	str	r5, [sp, #4]
 8008f4e:	68a2      	ldr	r2, [r4, #8]
 8008f50:	b152      	cbz	r2, 8008f68 <_scanf_float+0x60>
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	781b      	ldrb	r3, [r3, #0]
 8008f56:	2b4e      	cmp	r3, #78	; 0x4e
 8008f58:	d864      	bhi.n	8009024 <_scanf_float+0x11c>
 8008f5a:	2b40      	cmp	r3, #64	; 0x40
 8008f5c:	d83c      	bhi.n	8008fd8 <_scanf_float+0xd0>
 8008f5e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008f62:	b2c8      	uxtb	r0, r1
 8008f64:	280e      	cmp	r0, #14
 8008f66:	d93a      	bls.n	8008fde <_scanf_float+0xd6>
 8008f68:	f1b9 0f00 	cmp.w	r9, #0
 8008f6c:	d003      	beq.n	8008f76 <_scanf_float+0x6e>
 8008f6e:	6823      	ldr	r3, [r4, #0]
 8008f70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f74:	6023      	str	r3, [r4, #0]
 8008f76:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008f7a:	f1ba 0f01 	cmp.w	sl, #1
 8008f7e:	f200 8113 	bhi.w	80091a8 <_scanf_float+0x2a0>
 8008f82:	455e      	cmp	r6, fp
 8008f84:	f200 8105 	bhi.w	8009192 <_scanf_float+0x28a>
 8008f88:	2501      	movs	r5, #1
 8008f8a:	4628      	mov	r0, r5
 8008f8c:	b007      	add	sp, #28
 8008f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f92:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008f96:	2a0d      	cmp	r2, #13
 8008f98:	d8e6      	bhi.n	8008f68 <_scanf_float+0x60>
 8008f9a:	a101      	add	r1, pc, #4	; (adr r1, 8008fa0 <_scanf_float+0x98>)
 8008f9c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008fa0:	080090df 	.word	0x080090df
 8008fa4:	08008f69 	.word	0x08008f69
 8008fa8:	08008f69 	.word	0x08008f69
 8008fac:	08008f69 	.word	0x08008f69
 8008fb0:	0800913f 	.word	0x0800913f
 8008fb4:	08009117 	.word	0x08009117
 8008fb8:	08008f69 	.word	0x08008f69
 8008fbc:	08008f69 	.word	0x08008f69
 8008fc0:	080090ed 	.word	0x080090ed
 8008fc4:	08008f69 	.word	0x08008f69
 8008fc8:	08008f69 	.word	0x08008f69
 8008fcc:	08008f69 	.word	0x08008f69
 8008fd0:	08008f69 	.word	0x08008f69
 8008fd4:	080090a5 	.word	0x080090a5
 8008fd8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008fdc:	e7db      	b.n	8008f96 <_scanf_float+0x8e>
 8008fde:	290e      	cmp	r1, #14
 8008fe0:	d8c2      	bhi.n	8008f68 <_scanf_float+0x60>
 8008fe2:	a001      	add	r0, pc, #4	; (adr r0, 8008fe8 <_scanf_float+0xe0>)
 8008fe4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008fe8:	08009097 	.word	0x08009097
 8008fec:	08008f69 	.word	0x08008f69
 8008ff0:	08009097 	.word	0x08009097
 8008ff4:	0800912b 	.word	0x0800912b
 8008ff8:	08008f69 	.word	0x08008f69
 8008ffc:	08009045 	.word	0x08009045
 8009000:	08009081 	.word	0x08009081
 8009004:	08009081 	.word	0x08009081
 8009008:	08009081 	.word	0x08009081
 800900c:	08009081 	.word	0x08009081
 8009010:	08009081 	.word	0x08009081
 8009014:	08009081 	.word	0x08009081
 8009018:	08009081 	.word	0x08009081
 800901c:	08009081 	.word	0x08009081
 8009020:	08009081 	.word	0x08009081
 8009024:	2b6e      	cmp	r3, #110	; 0x6e
 8009026:	d809      	bhi.n	800903c <_scanf_float+0x134>
 8009028:	2b60      	cmp	r3, #96	; 0x60
 800902a:	d8b2      	bhi.n	8008f92 <_scanf_float+0x8a>
 800902c:	2b54      	cmp	r3, #84	; 0x54
 800902e:	d077      	beq.n	8009120 <_scanf_float+0x218>
 8009030:	2b59      	cmp	r3, #89	; 0x59
 8009032:	d199      	bne.n	8008f68 <_scanf_float+0x60>
 8009034:	2d07      	cmp	r5, #7
 8009036:	d197      	bne.n	8008f68 <_scanf_float+0x60>
 8009038:	2508      	movs	r5, #8
 800903a:	e029      	b.n	8009090 <_scanf_float+0x188>
 800903c:	2b74      	cmp	r3, #116	; 0x74
 800903e:	d06f      	beq.n	8009120 <_scanf_float+0x218>
 8009040:	2b79      	cmp	r3, #121	; 0x79
 8009042:	e7f6      	b.n	8009032 <_scanf_float+0x12a>
 8009044:	6821      	ldr	r1, [r4, #0]
 8009046:	05c8      	lsls	r0, r1, #23
 8009048:	d51a      	bpl.n	8009080 <_scanf_float+0x178>
 800904a:	9b02      	ldr	r3, [sp, #8]
 800904c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009050:	6021      	str	r1, [r4, #0]
 8009052:	f109 0901 	add.w	r9, r9, #1
 8009056:	b11b      	cbz	r3, 8009060 <_scanf_float+0x158>
 8009058:	3b01      	subs	r3, #1
 800905a:	3201      	adds	r2, #1
 800905c:	9302      	str	r3, [sp, #8]
 800905e:	60a2      	str	r2, [r4, #8]
 8009060:	68a3      	ldr	r3, [r4, #8]
 8009062:	3b01      	subs	r3, #1
 8009064:	60a3      	str	r3, [r4, #8]
 8009066:	6923      	ldr	r3, [r4, #16]
 8009068:	3301      	adds	r3, #1
 800906a:	6123      	str	r3, [r4, #16]
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	3b01      	subs	r3, #1
 8009070:	2b00      	cmp	r3, #0
 8009072:	607b      	str	r3, [r7, #4]
 8009074:	f340 8084 	ble.w	8009180 <_scanf_float+0x278>
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	3301      	adds	r3, #1
 800907c:	603b      	str	r3, [r7, #0]
 800907e:	e766      	b.n	8008f4e <_scanf_float+0x46>
 8009080:	eb1a 0f05 	cmn.w	sl, r5
 8009084:	f47f af70 	bne.w	8008f68 <_scanf_float+0x60>
 8009088:	6822      	ldr	r2, [r4, #0]
 800908a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800908e:	6022      	str	r2, [r4, #0]
 8009090:	f806 3b01 	strb.w	r3, [r6], #1
 8009094:	e7e4      	b.n	8009060 <_scanf_float+0x158>
 8009096:	6822      	ldr	r2, [r4, #0]
 8009098:	0610      	lsls	r0, r2, #24
 800909a:	f57f af65 	bpl.w	8008f68 <_scanf_float+0x60>
 800909e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80090a2:	e7f4      	b.n	800908e <_scanf_float+0x186>
 80090a4:	f1ba 0f00 	cmp.w	sl, #0
 80090a8:	d10e      	bne.n	80090c8 <_scanf_float+0x1c0>
 80090aa:	f1b9 0f00 	cmp.w	r9, #0
 80090ae:	d10e      	bne.n	80090ce <_scanf_float+0x1c6>
 80090b0:	6822      	ldr	r2, [r4, #0]
 80090b2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80090b6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80090ba:	d108      	bne.n	80090ce <_scanf_float+0x1c6>
 80090bc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80090c0:	6022      	str	r2, [r4, #0]
 80090c2:	f04f 0a01 	mov.w	sl, #1
 80090c6:	e7e3      	b.n	8009090 <_scanf_float+0x188>
 80090c8:	f1ba 0f02 	cmp.w	sl, #2
 80090cc:	d055      	beq.n	800917a <_scanf_float+0x272>
 80090ce:	2d01      	cmp	r5, #1
 80090d0:	d002      	beq.n	80090d8 <_scanf_float+0x1d0>
 80090d2:	2d04      	cmp	r5, #4
 80090d4:	f47f af48 	bne.w	8008f68 <_scanf_float+0x60>
 80090d8:	3501      	adds	r5, #1
 80090da:	b2ed      	uxtb	r5, r5
 80090dc:	e7d8      	b.n	8009090 <_scanf_float+0x188>
 80090de:	f1ba 0f01 	cmp.w	sl, #1
 80090e2:	f47f af41 	bne.w	8008f68 <_scanf_float+0x60>
 80090e6:	f04f 0a02 	mov.w	sl, #2
 80090ea:	e7d1      	b.n	8009090 <_scanf_float+0x188>
 80090ec:	b97d      	cbnz	r5, 800910e <_scanf_float+0x206>
 80090ee:	f1b9 0f00 	cmp.w	r9, #0
 80090f2:	f47f af3c 	bne.w	8008f6e <_scanf_float+0x66>
 80090f6:	6822      	ldr	r2, [r4, #0]
 80090f8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80090fc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009100:	f47f af39 	bne.w	8008f76 <_scanf_float+0x6e>
 8009104:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009108:	6022      	str	r2, [r4, #0]
 800910a:	2501      	movs	r5, #1
 800910c:	e7c0      	b.n	8009090 <_scanf_float+0x188>
 800910e:	2d03      	cmp	r5, #3
 8009110:	d0e2      	beq.n	80090d8 <_scanf_float+0x1d0>
 8009112:	2d05      	cmp	r5, #5
 8009114:	e7de      	b.n	80090d4 <_scanf_float+0x1cc>
 8009116:	2d02      	cmp	r5, #2
 8009118:	f47f af26 	bne.w	8008f68 <_scanf_float+0x60>
 800911c:	2503      	movs	r5, #3
 800911e:	e7b7      	b.n	8009090 <_scanf_float+0x188>
 8009120:	2d06      	cmp	r5, #6
 8009122:	f47f af21 	bne.w	8008f68 <_scanf_float+0x60>
 8009126:	2507      	movs	r5, #7
 8009128:	e7b2      	b.n	8009090 <_scanf_float+0x188>
 800912a:	6822      	ldr	r2, [r4, #0]
 800912c:	0591      	lsls	r1, r2, #22
 800912e:	f57f af1b 	bpl.w	8008f68 <_scanf_float+0x60>
 8009132:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009136:	6022      	str	r2, [r4, #0]
 8009138:	f8cd 9004 	str.w	r9, [sp, #4]
 800913c:	e7a8      	b.n	8009090 <_scanf_float+0x188>
 800913e:	6822      	ldr	r2, [r4, #0]
 8009140:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009144:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009148:	d006      	beq.n	8009158 <_scanf_float+0x250>
 800914a:	0550      	lsls	r0, r2, #21
 800914c:	f57f af0c 	bpl.w	8008f68 <_scanf_float+0x60>
 8009150:	f1b9 0f00 	cmp.w	r9, #0
 8009154:	f43f af0f 	beq.w	8008f76 <_scanf_float+0x6e>
 8009158:	0591      	lsls	r1, r2, #22
 800915a:	bf58      	it	pl
 800915c:	9901      	ldrpl	r1, [sp, #4]
 800915e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009162:	bf58      	it	pl
 8009164:	eba9 0101 	subpl.w	r1, r9, r1
 8009168:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800916c:	bf58      	it	pl
 800916e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009172:	6022      	str	r2, [r4, #0]
 8009174:	f04f 0900 	mov.w	r9, #0
 8009178:	e78a      	b.n	8009090 <_scanf_float+0x188>
 800917a:	f04f 0a03 	mov.w	sl, #3
 800917e:	e787      	b.n	8009090 <_scanf_float+0x188>
 8009180:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009184:	4639      	mov	r1, r7
 8009186:	4640      	mov	r0, r8
 8009188:	4798      	blx	r3
 800918a:	2800      	cmp	r0, #0
 800918c:	f43f aedf 	beq.w	8008f4e <_scanf_float+0x46>
 8009190:	e6ea      	b.n	8008f68 <_scanf_float+0x60>
 8009192:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009196:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800919a:	463a      	mov	r2, r7
 800919c:	4640      	mov	r0, r8
 800919e:	4798      	blx	r3
 80091a0:	6923      	ldr	r3, [r4, #16]
 80091a2:	3b01      	subs	r3, #1
 80091a4:	6123      	str	r3, [r4, #16]
 80091a6:	e6ec      	b.n	8008f82 <_scanf_float+0x7a>
 80091a8:	1e6b      	subs	r3, r5, #1
 80091aa:	2b06      	cmp	r3, #6
 80091ac:	d825      	bhi.n	80091fa <_scanf_float+0x2f2>
 80091ae:	2d02      	cmp	r5, #2
 80091b0:	d836      	bhi.n	8009220 <_scanf_float+0x318>
 80091b2:	455e      	cmp	r6, fp
 80091b4:	f67f aee8 	bls.w	8008f88 <_scanf_float+0x80>
 80091b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80091bc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80091c0:	463a      	mov	r2, r7
 80091c2:	4640      	mov	r0, r8
 80091c4:	4798      	blx	r3
 80091c6:	6923      	ldr	r3, [r4, #16]
 80091c8:	3b01      	subs	r3, #1
 80091ca:	6123      	str	r3, [r4, #16]
 80091cc:	e7f1      	b.n	80091b2 <_scanf_float+0x2aa>
 80091ce:	9802      	ldr	r0, [sp, #8]
 80091d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80091d4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80091d8:	9002      	str	r0, [sp, #8]
 80091da:	463a      	mov	r2, r7
 80091dc:	4640      	mov	r0, r8
 80091de:	4798      	blx	r3
 80091e0:	6923      	ldr	r3, [r4, #16]
 80091e2:	3b01      	subs	r3, #1
 80091e4:	6123      	str	r3, [r4, #16]
 80091e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80091ea:	fa5f fa8a 	uxtb.w	sl, sl
 80091ee:	f1ba 0f02 	cmp.w	sl, #2
 80091f2:	d1ec      	bne.n	80091ce <_scanf_float+0x2c6>
 80091f4:	3d03      	subs	r5, #3
 80091f6:	b2ed      	uxtb	r5, r5
 80091f8:	1b76      	subs	r6, r6, r5
 80091fa:	6823      	ldr	r3, [r4, #0]
 80091fc:	05da      	lsls	r2, r3, #23
 80091fe:	d52f      	bpl.n	8009260 <_scanf_float+0x358>
 8009200:	055b      	lsls	r3, r3, #21
 8009202:	d510      	bpl.n	8009226 <_scanf_float+0x31e>
 8009204:	455e      	cmp	r6, fp
 8009206:	f67f aebf 	bls.w	8008f88 <_scanf_float+0x80>
 800920a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800920e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009212:	463a      	mov	r2, r7
 8009214:	4640      	mov	r0, r8
 8009216:	4798      	blx	r3
 8009218:	6923      	ldr	r3, [r4, #16]
 800921a:	3b01      	subs	r3, #1
 800921c:	6123      	str	r3, [r4, #16]
 800921e:	e7f1      	b.n	8009204 <_scanf_float+0x2fc>
 8009220:	46aa      	mov	sl, r5
 8009222:	9602      	str	r6, [sp, #8]
 8009224:	e7df      	b.n	80091e6 <_scanf_float+0x2de>
 8009226:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800922a:	6923      	ldr	r3, [r4, #16]
 800922c:	2965      	cmp	r1, #101	; 0x65
 800922e:	f103 33ff 	add.w	r3, r3, #4294967295
 8009232:	f106 35ff 	add.w	r5, r6, #4294967295
 8009236:	6123      	str	r3, [r4, #16]
 8009238:	d00c      	beq.n	8009254 <_scanf_float+0x34c>
 800923a:	2945      	cmp	r1, #69	; 0x45
 800923c:	d00a      	beq.n	8009254 <_scanf_float+0x34c>
 800923e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009242:	463a      	mov	r2, r7
 8009244:	4640      	mov	r0, r8
 8009246:	4798      	blx	r3
 8009248:	6923      	ldr	r3, [r4, #16]
 800924a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800924e:	3b01      	subs	r3, #1
 8009250:	1eb5      	subs	r5, r6, #2
 8009252:	6123      	str	r3, [r4, #16]
 8009254:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009258:	463a      	mov	r2, r7
 800925a:	4640      	mov	r0, r8
 800925c:	4798      	blx	r3
 800925e:	462e      	mov	r6, r5
 8009260:	6825      	ldr	r5, [r4, #0]
 8009262:	f015 0510 	ands.w	r5, r5, #16
 8009266:	d158      	bne.n	800931a <_scanf_float+0x412>
 8009268:	7035      	strb	r5, [r6, #0]
 800926a:	6823      	ldr	r3, [r4, #0]
 800926c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009270:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009274:	d11c      	bne.n	80092b0 <_scanf_float+0x3a8>
 8009276:	9b01      	ldr	r3, [sp, #4]
 8009278:	454b      	cmp	r3, r9
 800927a:	eba3 0209 	sub.w	r2, r3, r9
 800927e:	d124      	bne.n	80092ca <_scanf_float+0x3c2>
 8009280:	2200      	movs	r2, #0
 8009282:	4659      	mov	r1, fp
 8009284:	4640      	mov	r0, r8
 8009286:	f001 f845 	bl	800a314 <_strtod_r>
 800928a:	9b03      	ldr	r3, [sp, #12]
 800928c:	6821      	ldr	r1, [r4, #0]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f011 0f02 	tst.w	r1, #2
 8009294:	ec57 6b10 	vmov	r6, r7, d0
 8009298:	f103 0204 	add.w	r2, r3, #4
 800929c:	d020      	beq.n	80092e0 <_scanf_float+0x3d8>
 800929e:	9903      	ldr	r1, [sp, #12]
 80092a0:	600a      	str	r2, [r1, #0]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	e9c3 6700 	strd	r6, r7, [r3]
 80092a8:	68e3      	ldr	r3, [r4, #12]
 80092aa:	3301      	adds	r3, #1
 80092ac:	60e3      	str	r3, [r4, #12]
 80092ae:	e66c      	b.n	8008f8a <_scanf_float+0x82>
 80092b0:	9b04      	ldr	r3, [sp, #16]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d0e4      	beq.n	8009280 <_scanf_float+0x378>
 80092b6:	9905      	ldr	r1, [sp, #20]
 80092b8:	230a      	movs	r3, #10
 80092ba:	462a      	mov	r2, r5
 80092bc:	3101      	adds	r1, #1
 80092be:	4640      	mov	r0, r8
 80092c0:	f001 f8be 	bl	800a440 <_strtol_r>
 80092c4:	9b04      	ldr	r3, [sp, #16]
 80092c6:	9e05      	ldr	r6, [sp, #20]
 80092c8:	1ac2      	subs	r2, r0, r3
 80092ca:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80092ce:	429e      	cmp	r6, r3
 80092d0:	bf28      	it	cs
 80092d2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80092d6:	4912      	ldr	r1, [pc, #72]	; (8009320 <_scanf_float+0x418>)
 80092d8:	4630      	mov	r0, r6
 80092da:	f000 f9b3 	bl	8009644 <siprintf>
 80092de:	e7cf      	b.n	8009280 <_scanf_float+0x378>
 80092e0:	f011 0f04 	tst.w	r1, #4
 80092e4:	9903      	ldr	r1, [sp, #12]
 80092e6:	600a      	str	r2, [r1, #0]
 80092e8:	d1db      	bne.n	80092a2 <_scanf_float+0x39a>
 80092ea:	f8d3 8000 	ldr.w	r8, [r3]
 80092ee:	ee10 2a10 	vmov	r2, s0
 80092f2:	ee10 0a10 	vmov	r0, s0
 80092f6:	463b      	mov	r3, r7
 80092f8:	4639      	mov	r1, r7
 80092fa:	f7f7 fc17 	bl	8000b2c <__aeabi_dcmpun>
 80092fe:	b128      	cbz	r0, 800930c <_scanf_float+0x404>
 8009300:	4808      	ldr	r0, [pc, #32]	; (8009324 <_scanf_float+0x41c>)
 8009302:	f000 f965 	bl	80095d0 <nanf>
 8009306:	ed88 0a00 	vstr	s0, [r8]
 800930a:	e7cd      	b.n	80092a8 <_scanf_float+0x3a0>
 800930c:	4630      	mov	r0, r6
 800930e:	4639      	mov	r1, r7
 8009310:	f7f7 fc6a 	bl	8000be8 <__aeabi_d2f>
 8009314:	f8c8 0000 	str.w	r0, [r8]
 8009318:	e7c6      	b.n	80092a8 <_scanf_float+0x3a0>
 800931a:	2500      	movs	r5, #0
 800931c:	e635      	b.n	8008f8a <_scanf_float+0x82>
 800931e:	bf00      	nop
 8009320:	0800e53c 	.word	0x0800e53c
 8009324:	0800e9b8 	.word	0x0800e9b8

08009328 <iprintf>:
 8009328:	b40f      	push	{r0, r1, r2, r3}
 800932a:	4b0a      	ldr	r3, [pc, #40]	; (8009354 <iprintf+0x2c>)
 800932c:	b513      	push	{r0, r1, r4, lr}
 800932e:	681c      	ldr	r4, [r3, #0]
 8009330:	b124      	cbz	r4, 800933c <iprintf+0x14>
 8009332:	69a3      	ldr	r3, [r4, #24]
 8009334:	b913      	cbnz	r3, 800933c <iprintf+0x14>
 8009336:	4620      	mov	r0, r4
 8009338:	f002 f8d8 	bl	800b4ec <__sinit>
 800933c:	ab05      	add	r3, sp, #20
 800933e:	9a04      	ldr	r2, [sp, #16]
 8009340:	68a1      	ldr	r1, [r4, #8]
 8009342:	9301      	str	r3, [sp, #4]
 8009344:	4620      	mov	r0, r4
 8009346:	f003 fc5d 	bl	800cc04 <_vfiprintf_r>
 800934a:	b002      	add	sp, #8
 800934c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009350:	b004      	add	sp, #16
 8009352:	4770      	bx	lr
 8009354:	20000014 	.word	0x20000014

08009358 <_puts_r>:
 8009358:	b570      	push	{r4, r5, r6, lr}
 800935a:	460e      	mov	r6, r1
 800935c:	4605      	mov	r5, r0
 800935e:	b118      	cbz	r0, 8009368 <_puts_r+0x10>
 8009360:	6983      	ldr	r3, [r0, #24]
 8009362:	b90b      	cbnz	r3, 8009368 <_puts_r+0x10>
 8009364:	f002 f8c2 	bl	800b4ec <__sinit>
 8009368:	69ab      	ldr	r3, [r5, #24]
 800936a:	68ac      	ldr	r4, [r5, #8]
 800936c:	b913      	cbnz	r3, 8009374 <_puts_r+0x1c>
 800936e:	4628      	mov	r0, r5
 8009370:	f002 f8bc 	bl	800b4ec <__sinit>
 8009374:	4b2c      	ldr	r3, [pc, #176]	; (8009428 <_puts_r+0xd0>)
 8009376:	429c      	cmp	r4, r3
 8009378:	d120      	bne.n	80093bc <_puts_r+0x64>
 800937a:	686c      	ldr	r4, [r5, #4]
 800937c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800937e:	07db      	lsls	r3, r3, #31
 8009380:	d405      	bmi.n	800938e <_puts_r+0x36>
 8009382:	89a3      	ldrh	r3, [r4, #12]
 8009384:	0598      	lsls	r0, r3, #22
 8009386:	d402      	bmi.n	800938e <_puts_r+0x36>
 8009388:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800938a:	f002 fcc0 	bl	800bd0e <__retarget_lock_acquire_recursive>
 800938e:	89a3      	ldrh	r3, [r4, #12]
 8009390:	0719      	lsls	r1, r3, #28
 8009392:	d51d      	bpl.n	80093d0 <_puts_r+0x78>
 8009394:	6923      	ldr	r3, [r4, #16]
 8009396:	b1db      	cbz	r3, 80093d0 <_puts_r+0x78>
 8009398:	3e01      	subs	r6, #1
 800939a:	68a3      	ldr	r3, [r4, #8]
 800939c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80093a0:	3b01      	subs	r3, #1
 80093a2:	60a3      	str	r3, [r4, #8]
 80093a4:	bb39      	cbnz	r1, 80093f6 <_puts_r+0x9e>
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	da38      	bge.n	800941c <_puts_r+0xc4>
 80093aa:	4622      	mov	r2, r4
 80093ac:	210a      	movs	r1, #10
 80093ae:	4628      	mov	r0, r5
 80093b0:	f001 f848 	bl	800a444 <__swbuf_r>
 80093b4:	3001      	adds	r0, #1
 80093b6:	d011      	beq.n	80093dc <_puts_r+0x84>
 80093b8:	250a      	movs	r5, #10
 80093ba:	e011      	b.n	80093e0 <_puts_r+0x88>
 80093bc:	4b1b      	ldr	r3, [pc, #108]	; (800942c <_puts_r+0xd4>)
 80093be:	429c      	cmp	r4, r3
 80093c0:	d101      	bne.n	80093c6 <_puts_r+0x6e>
 80093c2:	68ac      	ldr	r4, [r5, #8]
 80093c4:	e7da      	b.n	800937c <_puts_r+0x24>
 80093c6:	4b1a      	ldr	r3, [pc, #104]	; (8009430 <_puts_r+0xd8>)
 80093c8:	429c      	cmp	r4, r3
 80093ca:	bf08      	it	eq
 80093cc:	68ec      	ldreq	r4, [r5, #12]
 80093ce:	e7d5      	b.n	800937c <_puts_r+0x24>
 80093d0:	4621      	mov	r1, r4
 80093d2:	4628      	mov	r0, r5
 80093d4:	f001 f888 	bl	800a4e8 <__swsetup_r>
 80093d8:	2800      	cmp	r0, #0
 80093da:	d0dd      	beq.n	8009398 <_puts_r+0x40>
 80093dc:	f04f 35ff 	mov.w	r5, #4294967295
 80093e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80093e2:	07da      	lsls	r2, r3, #31
 80093e4:	d405      	bmi.n	80093f2 <_puts_r+0x9a>
 80093e6:	89a3      	ldrh	r3, [r4, #12]
 80093e8:	059b      	lsls	r3, r3, #22
 80093ea:	d402      	bmi.n	80093f2 <_puts_r+0x9a>
 80093ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80093ee:	f002 fc8f 	bl	800bd10 <__retarget_lock_release_recursive>
 80093f2:	4628      	mov	r0, r5
 80093f4:	bd70      	pop	{r4, r5, r6, pc}
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	da04      	bge.n	8009404 <_puts_r+0xac>
 80093fa:	69a2      	ldr	r2, [r4, #24]
 80093fc:	429a      	cmp	r2, r3
 80093fe:	dc06      	bgt.n	800940e <_puts_r+0xb6>
 8009400:	290a      	cmp	r1, #10
 8009402:	d004      	beq.n	800940e <_puts_r+0xb6>
 8009404:	6823      	ldr	r3, [r4, #0]
 8009406:	1c5a      	adds	r2, r3, #1
 8009408:	6022      	str	r2, [r4, #0]
 800940a:	7019      	strb	r1, [r3, #0]
 800940c:	e7c5      	b.n	800939a <_puts_r+0x42>
 800940e:	4622      	mov	r2, r4
 8009410:	4628      	mov	r0, r5
 8009412:	f001 f817 	bl	800a444 <__swbuf_r>
 8009416:	3001      	adds	r0, #1
 8009418:	d1bf      	bne.n	800939a <_puts_r+0x42>
 800941a:	e7df      	b.n	80093dc <_puts_r+0x84>
 800941c:	6823      	ldr	r3, [r4, #0]
 800941e:	250a      	movs	r5, #10
 8009420:	1c5a      	adds	r2, r3, #1
 8009422:	6022      	str	r2, [r4, #0]
 8009424:	701d      	strb	r5, [r3, #0]
 8009426:	e7db      	b.n	80093e0 <_puts_r+0x88>
 8009428:	0800e750 	.word	0x0800e750
 800942c:	0800e770 	.word	0x0800e770
 8009430:	0800e730 	.word	0x0800e730

08009434 <puts>:
 8009434:	4b02      	ldr	r3, [pc, #8]	; (8009440 <puts+0xc>)
 8009436:	4601      	mov	r1, r0
 8009438:	6818      	ldr	r0, [r3, #0]
 800943a:	f7ff bf8d 	b.w	8009358 <_puts_r>
 800943e:	bf00      	nop
 8009440:	20000014 	.word	0x20000014

08009444 <setvbuf>:
 8009444:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009448:	461d      	mov	r5, r3
 800944a:	4b5d      	ldr	r3, [pc, #372]	; (80095c0 <setvbuf+0x17c>)
 800944c:	681f      	ldr	r7, [r3, #0]
 800944e:	4604      	mov	r4, r0
 8009450:	460e      	mov	r6, r1
 8009452:	4690      	mov	r8, r2
 8009454:	b127      	cbz	r7, 8009460 <setvbuf+0x1c>
 8009456:	69bb      	ldr	r3, [r7, #24]
 8009458:	b913      	cbnz	r3, 8009460 <setvbuf+0x1c>
 800945a:	4638      	mov	r0, r7
 800945c:	f002 f846 	bl	800b4ec <__sinit>
 8009460:	4b58      	ldr	r3, [pc, #352]	; (80095c4 <setvbuf+0x180>)
 8009462:	429c      	cmp	r4, r3
 8009464:	d167      	bne.n	8009536 <setvbuf+0xf2>
 8009466:	687c      	ldr	r4, [r7, #4]
 8009468:	f1b8 0f02 	cmp.w	r8, #2
 800946c:	d006      	beq.n	800947c <setvbuf+0x38>
 800946e:	f1b8 0f01 	cmp.w	r8, #1
 8009472:	f200 809f 	bhi.w	80095b4 <setvbuf+0x170>
 8009476:	2d00      	cmp	r5, #0
 8009478:	f2c0 809c 	blt.w	80095b4 <setvbuf+0x170>
 800947c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800947e:	07db      	lsls	r3, r3, #31
 8009480:	d405      	bmi.n	800948e <setvbuf+0x4a>
 8009482:	89a3      	ldrh	r3, [r4, #12]
 8009484:	0598      	lsls	r0, r3, #22
 8009486:	d402      	bmi.n	800948e <setvbuf+0x4a>
 8009488:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800948a:	f002 fc40 	bl	800bd0e <__retarget_lock_acquire_recursive>
 800948e:	4621      	mov	r1, r4
 8009490:	4638      	mov	r0, r7
 8009492:	f001 ff97 	bl	800b3c4 <_fflush_r>
 8009496:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009498:	b141      	cbz	r1, 80094ac <setvbuf+0x68>
 800949a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800949e:	4299      	cmp	r1, r3
 80094a0:	d002      	beq.n	80094a8 <setvbuf+0x64>
 80094a2:	4638      	mov	r0, r7
 80094a4:	f003 f97e 	bl	800c7a4 <_free_r>
 80094a8:	2300      	movs	r3, #0
 80094aa:	6363      	str	r3, [r4, #52]	; 0x34
 80094ac:	2300      	movs	r3, #0
 80094ae:	61a3      	str	r3, [r4, #24]
 80094b0:	6063      	str	r3, [r4, #4]
 80094b2:	89a3      	ldrh	r3, [r4, #12]
 80094b4:	0619      	lsls	r1, r3, #24
 80094b6:	d503      	bpl.n	80094c0 <setvbuf+0x7c>
 80094b8:	6921      	ldr	r1, [r4, #16]
 80094ba:	4638      	mov	r0, r7
 80094bc:	f003 f972 	bl	800c7a4 <_free_r>
 80094c0:	89a3      	ldrh	r3, [r4, #12]
 80094c2:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80094c6:	f023 0303 	bic.w	r3, r3, #3
 80094ca:	f1b8 0f02 	cmp.w	r8, #2
 80094ce:	81a3      	strh	r3, [r4, #12]
 80094d0:	d06c      	beq.n	80095ac <setvbuf+0x168>
 80094d2:	ab01      	add	r3, sp, #4
 80094d4:	466a      	mov	r2, sp
 80094d6:	4621      	mov	r1, r4
 80094d8:	4638      	mov	r0, r7
 80094da:	f002 fc1a 	bl	800bd12 <__swhatbuf_r>
 80094de:	89a3      	ldrh	r3, [r4, #12]
 80094e0:	4318      	orrs	r0, r3
 80094e2:	81a0      	strh	r0, [r4, #12]
 80094e4:	2d00      	cmp	r5, #0
 80094e6:	d130      	bne.n	800954a <setvbuf+0x106>
 80094e8:	9d00      	ldr	r5, [sp, #0]
 80094ea:	4628      	mov	r0, r5
 80094ec:	f002 fc76 	bl	800bddc <malloc>
 80094f0:	4606      	mov	r6, r0
 80094f2:	2800      	cmp	r0, #0
 80094f4:	d155      	bne.n	80095a2 <setvbuf+0x15e>
 80094f6:	f8dd 9000 	ldr.w	r9, [sp]
 80094fa:	45a9      	cmp	r9, r5
 80094fc:	d14a      	bne.n	8009594 <setvbuf+0x150>
 80094fe:	f04f 35ff 	mov.w	r5, #4294967295
 8009502:	2200      	movs	r2, #0
 8009504:	60a2      	str	r2, [r4, #8]
 8009506:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800950a:	6022      	str	r2, [r4, #0]
 800950c:	6122      	str	r2, [r4, #16]
 800950e:	2201      	movs	r2, #1
 8009510:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009514:	6162      	str	r2, [r4, #20]
 8009516:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009518:	f043 0302 	orr.w	r3, r3, #2
 800951c:	07d2      	lsls	r2, r2, #31
 800951e:	81a3      	strh	r3, [r4, #12]
 8009520:	d405      	bmi.n	800952e <setvbuf+0xea>
 8009522:	f413 7f00 	tst.w	r3, #512	; 0x200
 8009526:	d102      	bne.n	800952e <setvbuf+0xea>
 8009528:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800952a:	f002 fbf1 	bl	800bd10 <__retarget_lock_release_recursive>
 800952e:	4628      	mov	r0, r5
 8009530:	b003      	add	sp, #12
 8009532:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009536:	4b24      	ldr	r3, [pc, #144]	; (80095c8 <setvbuf+0x184>)
 8009538:	429c      	cmp	r4, r3
 800953a:	d101      	bne.n	8009540 <setvbuf+0xfc>
 800953c:	68bc      	ldr	r4, [r7, #8]
 800953e:	e793      	b.n	8009468 <setvbuf+0x24>
 8009540:	4b22      	ldr	r3, [pc, #136]	; (80095cc <setvbuf+0x188>)
 8009542:	429c      	cmp	r4, r3
 8009544:	bf08      	it	eq
 8009546:	68fc      	ldreq	r4, [r7, #12]
 8009548:	e78e      	b.n	8009468 <setvbuf+0x24>
 800954a:	2e00      	cmp	r6, #0
 800954c:	d0cd      	beq.n	80094ea <setvbuf+0xa6>
 800954e:	69bb      	ldr	r3, [r7, #24]
 8009550:	b913      	cbnz	r3, 8009558 <setvbuf+0x114>
 8009552:	4638      	mov	r0, r7
 8009554:	f001 ffca 	bl	800b4ec <__sinit>
 8009558:	f1b8 0f01 	cmp.w	r8, #1
 800955c:	bf08      	it	eq
 800955e:	89a3      	ldrheq	r3, [r4, #12]
 8009560:	6026      	str	r6, [r4, #0]
 8009562:	bf04      	itt	eq
 8009564:	f043 0301 	orreq.w	r3, r3, #1
 8009568:	81a3      	strheq	r3, [r4, #12]
 800956a:	89a2      	ldrh	r2, [r4, #12]
 800956c:	f012 0308 	ands.w	r3, r2, #8
 8009570:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8009574:	d01c      	beq.n	80095b0 <setvbuf+0x16c>
 8009576:	07d3      	lsls	r3, r2, #31
 8009578:	bf41      	itttt	mi
 800957a:	2300      	movmi	r3, #0
 800957c:	426d      	negmi	r5, r5
 800957e:	60a3      	strmi	r3, [r4, #8]
 8009580:	61a5      	strmi	r5, [r4, #24]
 8009582:	bf58      	it	pl
 8009584:	60a5      	strpl	r5, [r4, #8]
 8009586:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8009588:	f015 0501 	ands.w	r5, r5, #1
 800958c:	d115      	bne.n	80095ba <setvbuf+0x176>
 800958e:	f412 7f00 	tst.w	r2, #512	; 0x200
 8009592:	e7c8      	b.n	8009526 <setvbuf+0xe2>
 8009594:	4648      	mov	r0, r9
 8009596:	f002 fc21 	bl	800bddc <malloc>
 800959a:	4606      	mov	r6, r0
 800959c:	2800      	cmp	r0, #0
 800959e:	d0ae      	beq.n	80094fe <setvbuf+0xba>
 80095a0:	464d      	mov	r5, r9
 80095a2:	89a3      	ldrh	r3, [r4, #12]
 80095a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095a8:	81a3      	strh	r3, [r4, #12]
 80095aa:	e7d0      	b.n	800954e <setvbuf+0x10a>
 80095ac:	2500      	movs	r5, #0
 80095ae:	e7a8      	b.n	8009502 <setvbuf+0xbe>
 80095b0:	60a3      	str	r3, [r4, #8]
 80095b2:	e7e8      	b.n	8009586 <setvbuf+0x142>
 80095b4:	f04f 35ff 	mov.w	r5, #4294967295
 80095b8:	e7b9      	b.n	800952e <setvbuf+0xea>
 80095ba:	2500      	movs	r5, #0
 80095bc:	e7b7      	b.n	800952e <setvbuf+0xea>
 80095be:	bf00      	nop
 80095c0:	20000014 	.word	0x20000014
 80095c4:	0800e750 	.word	0x0800e750
 80095c8:	0800e770 	.word	0x0800e770
 80095cc:	0800e730 	.word	0x0800e730

080095d0 <nanf>:
 80095d0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80095d8 <nanf+0x8>
 80095d4:	4770      	bx	lr
 80095d6:	bf00      	nop
 80095d8:	7fc00000 	.word	0x7fc00000

080095dc <sniprintf>:
 80095dc:	b40c      	push	{r2, r3}
 80095de:	b530      	push	{r4, r5, lr}
 80095e0:	4b17      	ldr	r3, [pc, #92]	; (8009640 <sniprintf+0x64>)
 80095e2:	1e0c      	subs	r4, r1, #0
 80095e4:	681d      	ldr	r5, [r3, #0]
 80095e6:	b09d      	sub	sp, #116	; 0x74
 80095e8:	da08      	bge.n	80095fc <sniprintf+0x20>
 80095ea:	238b      	movs	r3, #139	; 0x8b
 80095ec:	602b      	str	r3, [r5, #0]
 80095ee:	f04f 30ff 	mov.w	r0, #4294967295
 80095f2:	b01d      	add	sp, #116	; 0x74
 80095f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80095f8:	b002      	add	sp, #8
 80095fa:	4770      	bx	lr
 80095fc:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009600:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009604:	bf14      	ite	ne
 8009606:	f104 33ff 	addne.w	r3, r4, #4294967295
 800960a:	4623      	moveq	r3, r4
 800960c:	9304      	str	r3, [sp, #16]
 800960e:	9307      	str	r3, [sp, #28]
 8009610:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009614:	9002      	str	r0, [sp, #8]
 8009616:	9006      	str	r0, [sp, #24]
 8009618:	f8ad 3016 	strh.w	r3, [sp, #22]
 800961c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800961e:	ab21      	add	r3, sp, #132	; 0x84
 8009620:	a902      	add	r1, sp, #8
 8009622:	4628      	mov	r0, r5
 8009624:	9301      	str	r3, [sp, #4]
 8009626:	f003 f9c3 	bl	800c9b0 <_svfiprintf_r>
 800962a:	1c43      	adds	r3, r0, #1
 800962c:	bfbc      	itt	lt
 800962e:	238b      	movlt	r3, #139	; 0x8b
 8009630:	602b      	strlt	r3, [r5, #0]
 8009632:	2c00      	cmp	r4, #0
 8009634:	d0dd      	beq.n	80095f2 <sniprintf+0x16>
 8009636:	9b02      	ldr	r3, [sp, #8]
 8009638:	2200      	movs	r2, #0
 800963a:	701a      	strb	r2, [r3, #0]
 800963c:	e7d9      	b.n	80095f2 <sniprintf+0x16>
 800963e:	bf00      	nop
 8009640:	20000014 	.word	0x20000014

08009644 <siprintf>:
 8009644:	b40e      	push	{r1, r2, r3}
 8009646:	b500      	push	{lr}
 8009648:	b09c      	sub	sp, #112	; 0x70
 800964a:	ab1d      	add	r3, sp, #116	; 0x74
 800964c:	9002      	str	r0, [sp, #8]
 800964e:	9006      	str	r0, [sp, #24]
 8009650:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009654:	4809      	ldr	r0, [pc, #36]	; (800967c <siprintf+0x38>)
 8009656:	9107      	str	r1, [sp, #28]
 8009658:	9104      	str	r1, [sp, #16]
 800965a:	4909      	ldr	r1, [pc, #36]	; (8009680 <siprintf+0x3c>)
 800965c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009660:	9105      	str	r1, [sp, #20]
 8009662:	6800      	ldr	r0, [r0, #0]
 8009664:	9301      	str	r3, [sp, #4]
 8009666:	a902      	add	r1, sp, #8
 8009668:	f003 f9a2 	bl	800c9b0 <_svfiprintf_r>
 800966c:	9b02      	ldr	r3, [sp, #8]
 800966e:	2200      	movs	r2, #0
 8009670:	701a      	strb	r2, [r3, #0]
 8009672:	b01c      	add	sp, #112	; 0x70
 8009674:	f85d eb04 	ldr.w	lr, [sp], #4
 8009678:	b003      	add	sp, #12
 800967a:	4770      	bx	lr
 800967c:	20000014 	.word	0x20000014
 8009680:	ffff0208 	.word	0xffff0208

08009684 <strchr>:
 8009684:	b2c9      	uxtb	r1, r1
 8009686:	4603      	mov	r3, r0
 8009688:	f810 2b01 	ldrb.w	r2, [r0], #1
 800968c:	b11a      	cbz	r2, 8009696 <strchr+0x12>
 800968e:	428a      	cmp	r2, r1
 8009690:	d1f9      	bne.n	8009686 <strchr+0x2>
 8009692:	4618      	mov	r0, r3
 8009694:	4770      	bx	lr
 8009696:	2900      	cmp	r1, #0
 8009698:	bf18      	it	ne
 800969a:	2300      	movne	r3, #0
 800969c:	e7f9      	b.n	8009692 <strchr+0xe>

0800969e <strncmp>:
 800969e:	b510      	push	{r4, lr}
 80096a0:	b16a      	cbz	r2, 80096be <strncmp+0x20>
 80096a2:	3901      	subs	r1, #1
 80096a4:	1884      	adds	r4, r0, r2
 80096a6:	f810 3b01 	ldrb.w	r3, [r0], #1
 80096aa:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80096ae:	4293      	cmp	r3, r2
 80096b0:	d103      	bne.n	80096ba <strncmp+0x1c>
 80096b2:	42a0      	cmp	r0, r4
 80096b4:	d001      	beq.n	80096ba <strncmp+0x1c>
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d1f5      	bne.n	80096a6 <strncmp+0x8>
 80096ba:	1a98      	subs	r0, r3, r2
 80096bc:	bd10      	pop	{r4, pc}
 80096be:	4610      	mov	r0, r2
 80096c0:	e7fc      	b.n	80096bc <strncmp+0x1e>

080096c2 <sulp>:
 80096c2:	b570      	push	{r4, r5, r6, lr}
 80096c4:	4604      	mov	r4, r0
 80096c6:	460d      	mov	r5, r1
 80096c8:	ec45 4b10 	vmov	d0, r4, r5
 80096cc:	4616      	mov	r6, r2
 80096ce:	f002 ff0b 	bl	800c4e8 <__ulp>
 80096d2:	ec51 0b10 	vmov	r0, r1, d0
 80096d6:	b17e      	cbz	r6, 80096f8 <sulp+0x36>
 80096d8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80096dc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	dd09      	ble.n	80096f8 <sulp+0x36>
 80096e4:	051b      	lsls	r3, r3, #20
 80096e6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80096ea:	2400      	movs	r4, #0
 80096ec:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80096f0:	4622      	mov	r2, r4
 80096f2:	462b      	mov	r3, r5
 80096f4:	f7f6 ff80 	bl	80005f8 <__aeabi_dmul>
 80096f8:	bd70      	pop	{r4, r5, r6, pc}
 80096fa:	0000      	movs	r0, r0
 80096fc:	0000      	movs	r0, r0
	...

08009700 <_strtod_l>:
 8009700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009704:	b0a3      	sub	sp, #140	; 0x8c
 8009706:	461f      	mov	r7, r3
 8009708:	2300      	movs	r3, #0
 800970a:	931e      	str	r3, [sp, #120]	; 0x78
 800970c:	4ba4      	ldr	r3, [pc, #656]	; (80099a0 <_strtod_l+0x2a0>)
 800970e:	9219      	str	r2, [sp, #100]	; 0x64
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	9307      	str	r3, [sp, #28]
 8009714:	4604      	mov	r4, r0
 8009716:	4618      	mov	r0, r3
 8009718:	4688      	mov	r8, r1
 800971a:	f7f6 fda9 	bl	8000270 <strlen>
 800971e:	f04f 0a00 	mov.w	sl, #0
 8009722:	4605      	mov	r5, r0
 8009724:	f04f 0b00 	mov.w	fp, #0
 8009728:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800972c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800972e:	781a      	ldrb	r2, [r3, #0]
 8009730:	2a2b      	cmp	r2, #43	; 0x2b
 8009732:	d04c      	beq.n	80097ce <_strtod_l+0xce>
 8009734:	d839      	bhi.n	80097aa <_strtod_l+0xaa>
 8009736:	2a0d      	cmp	r2, #13
 8009738:	d832      	bhi.n	80097a0 <_strtod_l+0xa0>
 800973a:	2a08      	cmp	r2, #8
 800973c:	d832      	bhi.n	80097a4 <_strtod_l+0xa4>
 800973e:	2a00      	cmp	r2, #0
 8009740:	d03c      	beq.n	80097bc <_strtod_l+0xbc>
 8009742:	2300      	movs	r3, #0
 8009744:	930e      	str	r3, [sp, #56]	; 0x38
 8009746:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8009748:	7833      	ldrb	r3, [r6, #0]
 800974a:	2b30      	cmp	r3, #48	; 0x30
 800974c:	f040 80b4 	bne.w	80098b8 <_strtod_l+0x1b8>
 8009750:	7873      	ldrb	r3, [r6, #1]
 8009752:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009756:	2b58      	cmp	r3, #88	; 0x58
 8009758:	d16c      	bne.n	8009834 <_strtod_l+0x134>
 800975a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800975c:	9301      	str	r3, [sp, #4]
 800975e:	ab1e      	add	r3, sp, #120	; 0x78
 8009760:	9702      	str	r7, [sp, #8]
 8009762:	9300      	str	r3, [sp, #0]
 8009764:	4a8f      	ldr	r2, [pc, #572]	; (80099a4 <_strtod_l+0x2a4>)
 8009766:	ab1f      	add	r3, sp, #124	; 0x7c
 8009768:	a91d      	add	r1, sp, #116	; 0x74
 800976a:	4620      	mov	r0, r4
 800976c:	f001 ffc2 	bl	800b6f4 <__gethex>
 8009770:	f010 0707 	ands.w	r7, r0, #7
 8009774:	4605      	mov	r5, r0
 8009776:	d005      	beq.n	8009784 <_strtod_l+0x84>
 8009778:	2f06      	cmp	r7, #6
 800977a:	d12a      	bne.n	80097d2 <_strtod_l+0xd2>
 800977c:	3601      	adds	r6, #1
 800977e:	2300      	movs	r3, #0
 8009780:	961d      	str	r6, [sp, #116]	; 0x74
 8009782:	930e      	str	r3, [sp, #56]	; 0x38
 8009784:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009786:	2b00      	cmp	r3, #0
 8009788:	f040 8596 	bne.w	800a2b8 <_strtod_l+0xbb8>
 800978c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800978e:	b1db      	cbz	r3, 80097c8 <_strtod_l+0xc8>
 8009790:	4652      	mov	r2, sl
 8009792:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009796:	ec43 2b10 	vmov	d0, r2, r3
 800979a:	b023      	add	sp, #140	; 0x8c
 800979c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097a0:	2a20      	cmp	r2, #32
 80097a2:	d1ce      	bne.n	8009742 <_strtod_l+0x42>
 80097a4:	3301      	adds	r3, #1
 80097a6:	931d      	str	r3, [sp, #116]	; 0x74
 80097a8:	e7c0      	b.n	800972c <_strtod_l+0x2c>
 80097aa:	2a2d      	cmp	r2, #45	; 0x2d
 80097ac:	d1c9      	bne.n	8009742 <_strtod_l+0x42>
 80097ae:	2201      	movs	r2, #1
 80097b0:	920e      	str	r2, [sp, #56]	; 0x38
 80097b2:	1c5a      	adds	r2, r3, #1
 80097b4:	921d      	str	r2, [sp, #116]	; 0x74
 80097b6:	785b      	ldrb	r3, [r3, #1]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d1c4      	bne.n	8009746 <_strtod_l+0x46>
 80097bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80097be:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	f040 8576 	bne.w	800a2b4 <_strtod_l+0xbb4>
 80097c8:	4652      	mov	r2, sl
 80097ca:	465b      	mov	r3, fp
 80097cc:	e7e3      	b.n	8009796 <_strtod_l+0x96>
 80097ce:	2200      	movs	r2, #0
 80097d0:	e7ee      	b.n	80097b0 <_strtod_l+0xb0>
 80097d2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80097d4:	b13a      	cbz	r2, 80097e6 <_strtod_l+0xe6>
 80097d6:	2135      	movs	r1, #53	; 0x35
 80097d8:	a820      	add	r0, sp, #128	; 0x80
 80097da:	f002 ff90 	bl	800c6fe <__copybits>
 80097de:	991e      	ldr	r1, [sp, #120]	; 0x78
 80097e0:	4620      	mov	r0, r4
 80097e2:	f002 fb55 	bl	800be90 <_Bfree>
 80097e6:	3f01      	subs	r7, #1
 80097e8:	2f05      	cmp	r7, #5
 80097ea:	d807      	bhi.n	80097fc <_strtod_l+0xfc>
 80097ec:	e8df f007 	tbb	[pc, r7]
 80097f0:	1d180b0e 	.word	0x1d180b0e
 80097f4:	030e      	.short	0x030e
 80097f6:	f04f 0b00 	mov.w	fp, #0
 80097fa:	46da      	mov	sl, fp
 80097fc:	0728      	lsls	r0, r5, #28
 80097fe:	d5c1      	bpl.n	8009784 <_strtod_l+0x84>
 8009800:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8009804:	e7be      	b.n	8009784 <_strtod_l+0x84>
 8009806:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800980a:	e7f7      	b.n	80097fc <_strtod_l+0xfc>
 800980c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8009810:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8009812:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009816:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800981a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800981e:	e7ed      	b.n	80097fc <_strtod_l+0xfc>
 8009820:	f8df b184 	ldr.w	fp, [pc, #388]	; 80099a8 <_strtod_l+0x2a8>
 8009824:	f04f 0a00 	mov.w	sl, #0
 8009828:	e7e8      	b.n	80097fc <_strtod_l+0xfc>
 800982a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800982e:	f04f 3aff 	mov.w	sl, #4294967295
 8009832:	e7e3      	b.n	80097fc <_strtod_l+0xfc>
 8009834:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009836:	1c5a      	adds	r2, r3, #1
 8009838:	921d      	str	r2, [sp, #116]	; 0x74
 800983a:	785b      	ldrb	r3, [r3, #1]
 800983c:	2b30      	cmp	r3, #48	; 0x30
 800983e:	d0f9      	beq.n	8009834 <_strtod_l+0x134>
 8009840:	2b00      	cmp	r3, #0
 8009842:	d09f      	beq.n	8009784 <_strtod_l+0x84>
 8009844:	2301      	movs	r3, #1
 8009846:	f04f 0900 	mov.w	r9, #0
 800984a:	9304      	str	r3, [sp, #16]
 800984c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800984e:	930a      	str	r3, [sp, #40]	; 0x28
 8009850:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009854:	464f      	mov	r7, r9
 8009856:	220a      	movs	r2, #10
 8009858:	981d      	ldr	r0, [sp, #116]	; 0x74
 800985a:	7806      	ldrb	r6, [r0, #0]
 800985c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009860:	b2d9      	uxtb	r1, r3
 8009862:	2909      	cmp	r1, #9
 8009864:	d92a      	bls.n	80098bc <_strtod_l+0x1bc>
 8009866:	9907      	ldr	r1, [sp, #28]
 8009868:	462a      	mov	r2, r5
 800986a:	f7ff ff18 	bl	800969e <strncmp>
 800986e:	b398      	cbz	r0, 80098d8 <_strtod_l+0x1d8>
 8009870:	2000      	movs	r0, #0
 8009872:	4633      	mov	r3, r6
 8009874:	463d      	mov	r5, r7
 8009876:	9007      	str	r0, [sp, #28]
 8009878:	4602      	mov	r2, r0
 800987a:	2b65      	cmp	r3, #101	; 0x65
 800987c:	d001      	beq.n	8009882 <_strtod_l+0x182>
 800987e:	2b45      	cmp	r3, #69	; 0x45
 8009880:	d118      	bne.n	80098b4 <_strtod_l+0x1b4>
 8009882:	b91d      	cbnz	r5, 800988c <_strtod_l+0x18c>
 8009884:	9b04      	ldr	r3, [sp, #16]
 8009886:	4303      	orrs	r3, r0
 8009888:	d098      	beq.n	80097bc <_strtod_l+0xbc>
 800988a:	2500      	movs	r5, #0
 800988c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8009890:	f108 0301 	add.w	r3, r8, #1
 8009894:	931d      	str	r3, [sp, #116]	; 0x74
 8009896:	f898 3001 	ldrb.w	r3, [r8, #1]
 800989a:	2b2b      	cmp	r3, #43	; 0x2b
 800989c:	d075      	beq.n	800998a <_strtod_l+0x28a>
 800989e:	2b2d      	cmp	r3, #45	; 0x2d
 80098a0:	d07b      	beq.n	800999a <_strtod_l+0x29a>
 80098a2:	f04f 0c00 	mov.w	ip, #0
 80098a6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80098aa:	2909      	cmp	r1, #9
 80098ac:	f240 8082 	bls.w	80099b4 <_strtod_l+0x2b4>
 80098b0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80098b4:	2600      	movs	r6, #0
 80098b6:	e09d      	b.n	80099f4 <_strtod_l+0x2f4>
 80098b8:	2300      	movs	r3, #0
 80098ba:	e7c4      	b.n	8009846 <_strtod_l+0x146>
 80098bc:	2f08      	cmp	r7, #8
 80098be:	bfd8      	it	le
 80098c0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80098c2:	f100 0001 	add.w	r0, r0, #1
 80098c6:	bfda      	itte	le
 80098c8:	fb02 3301 	mlale	r3, r2, r1, r3
 80098cc:	9309      	strle	r3, [sp, #36]	; 0x24
 80098ce:	fb02 3909 	mlagt	r9, r2, r9, r3
 80098d2:	3701      	adds	r7, #1
 80098d4:	901d      	str	r0, [sp, #116]	; 0x74
 80098d6:	e7bf      	b.n	8009858 <_strtod_l+0x158>
 80098d8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80098da:	195a      	adds	r2, r3, r5
 80098dc:	921d      	str	r2, [sp, #116]	; 0x74
 80098de:	5d5b      	ldrb	r3, [r3, r5]
 80098e0:	2f00      	cmp	r7, #0
 80098e2:	d037      	beq.n	8009954 <_strtod_l+0x254>
 80098e4:	9007      	str	r0, [sp, #28]
 80098e6:	463d      	mov	r5, r7
 80098e8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80098ec:	2a09      	cmp	r2, #9
 80098ee:	d912      	bls.n	8009916 <_strtod_l+0x216>
 80098f0:	2201      	movs	r2, #1
 80098f2:	e7c2      	b.n	800987a <_strtod_l+0x17a>
 80098f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80098f6:	1c5a      	adds	r2, r3, #1
 80098f8:	921d      	str	r2, [sp, #116]	; 0x74
 80098fa:	785b      	ldrb	r3, [r3, #1]
 80098fc:	3001      	adds	r0, #1
 80098fe:	2b30      	cmp	r3, #48	; 0x30
 8009900:	d0f8      	beq.n	80098f4 <_strtod_l+0x1f4>
 8009902:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8009906:	2a08      	cmp	r2, #8
 8009908:	f200 84db 	bhi.w	800a2c2 <_strtod_l+0xbc2>
 800990c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800990e:	9007      	str	r0, [sp, #28]
 8009910:	2000      	movs	r0, #0
 8009912:	920a      	str	r2, [sp, #40]	; 0x28
 8009914:	4605      	mov	r5, r0
 8009916:	3b30      	subs	r3, #48	; 0x30
 8009918:	f100 0201 	add.w	r2, r0, #1
 800991c:	d014      	beq.n	8009948 <_strtod_l+0x248>
 800991e:	9907      	ldr	r1, [sp, #28]
 8009920:	4411      	add	r1, r2
 8009922:	9107      	str	r1, [sp, #28]
 8009924:	462a      	mov	r2, r5
 8009926:	eb00 0e05 	add.w	lr, r0, r5
 800992a:	210a      	movs	r1, #10
 800992c:	4572      	cmp	r2, lr
 800992e:	d113      	bne.n	8009958 <_strtod_l+0x258>
 8009930:	182a      	adds	r2, r5, r0
 8009932:	2a08      	cmp	r2, #8
 8009934:	f105 0501 	add.w	r5, r5, #1
 8009938:	4405      	add	r5, r0
 800993a:	dc1c      	bgt.n	8009976 <_strtod_l+0x276>
 800993c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800993e:	220a      	movs	r2, #10
 8009940:	fb02 3301 	mla	r3, r2, r1, r3
 8009944:	9309      	str	r3, [sp, #36]	; 0x24
 8009946:	2200      	movs	r2, #0
 8009948:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800994a:	1c59      	adds	r1, r3, #1
 800994c:	911d      	str	r1, [sp, #116]	; 0x74
 800994e:	785b      	ldrb	r3, [r3, #1]
 8009950:	4610      	mov	r0, r2
 8009952:	e7c9      	b.n	80098e8 <_strtod_l+0x1e8>
 8009954:	4638      	mov	r0, r7
 8009956:	e7d2      	b.n	80098fe <_strtod_l+0x1fe>
 8009958:	2a08      	cmp	r2, #8
 800995a:	dc04      	bgt.n	8009966 <_strtod_l+0x266>
 800995c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800995e:	434e      	muls	r6, r1
 8009960:	9609      	str	r6, [sp, #36]	; 0x24
 8009962:	3201      	adds	r2, #1
 8009964:	e7e2      	b.n	800992c <_strtod_l+0x22c>
 8009966:	f102 0c01 	add.w	ip, r2, #1
 800996a:	f1bc 0f10 	cmp.w	ip, #16
 800996e:	bfd8      	it	le
 8009970:	fb01 f909 	mulle.w	r9, r1, r9
 8009974:	e7f5      	b.n	8009962 <_strtod_l+0x262>
 8009976:	2d10      	cmp	r5, #16
 8009978:	bfdc      	itt	le
 800997a:	220a      	movle	r2, #10
 800997c:	fb02 3909 	mlale	r9, r2, r9, r3
 8009980:	e7e1      	b.n	8009946 <_strtod_l+0x246>
 8009982:	2300      	movs	r3, #0
 8009984:	9307      	str	r3, [sp, #28]
 8009986:	2201      	movs	r2, #1
 8009988:	e77c      	b.n	8009884 <_strtod_l+0x184>
 800998a:	f04f 0c00 	mov.w	ip, #0
 800998e:	f108 0302 	add.w	r3, r8, #2
 8009992:	931d      	str	r3, [sp, #116]	; 0x74
 8009994:	f898 3002 	ldrb.w	r3, [r8, #2]
 8009998:	e785      	b.n	80098a6 <_strtod_l+0x1a6>
 800999a:	f04f 0c01 	mov.w	ip, #1
 800999e:	e7f6      	b.n	800998e <_strtod_l+0x28e>
 80099a0:	0800e7fc 	.word	0x0800e7fc
 80099a4:	0800e544 	.word	0x0800e544
 80099a8:	7ff00000 	.word	0x7ff00000
 80099ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80099ae:	1c59      	adds	r1, r3, #1
 80099b0:	911d      	str	r1, [sp, #116]	; 0x74
 80099b2:	785b      	ldrb	r3, [r3, #1]
 80099b4:	2b30      	cmp	r3, #48	; 0x30
 80099b6:	d0f9      	beq.n	80099ac <_strtod_l+0x2ac>
 80099b8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80099bc:	2908      	cmp	r1, #8
 80099be:	f63f af79 	bhi.w	80098b4 <_strtod_l+0x1b4>
 80099c2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80099c6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80099c8:	9308      	str	r3, [sp, #32]
 80099ca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80099cc:	1c59      	adds	r1, r3, #1
 80099ce:	911d      	str	r1, [sp, #116]	; 0x74
 80099d0:	785b      	ldrb	r3, [r3, #1]
 80099d2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80099d6:	2e09      	cmp	r6, #9
 80099d8:	d937      	bls.n	8009a4a <_strtod_l+0x34a>
 80099da:	9e08      	ldr	r6, [sp, #32]
 80099dc:	1b89      	subs	r1, r1, r6
 80099de:	2908      	cmp	r1, #8
 80099e0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80099e4:	dc02      	bgt.n	80099ec <_strtod_l+0x2ec>
 80099e6:	4576      	cmp	r6, lr
 80099e8:	bfa8      	it	ge
 80099ea:	4676      	movge	r6, lr
 80099ec:	f1bc 0f00 	cmp.w	ip, #0
 80099f0:	d000      	beq.n	80099f4 <_strtod_l+0x2f4>
 80099f2:	4276      	negs	r6, r6
 80099f4:	2d00      	cmp	r5, #0
 80099f6:	d14f      	bne.n	8009a98 <_strtod_l+0x398>
 80099f8:	9904      	ldr	r1, [sp, #16]
 80099fa:	4301      	orrs	r1, r0
 80099fc:	f47f aec2 	bne.w	8009784 <_strtod_l+0x84>
 8009a00:	2a00      	cmp	r2, #0
 8009a02:	f47f aedb 	bne.w	80097bc <_strtod_l+0xbc>
 8009a06:	2b69      	cmp	r3, #105	; 0x69
 8009a08:	d027      	beq.n	8009a5a <_strtod_l+0x35a>
 8009a0a:	dc24      	bgt.n	8009a56 <_strtod_l+0x356>
 8009a0c:	2b49      	cmp	r3, #73	; 0x49
 8009a0e:	d024      	beq.n	8009a5a <_strtod_l+0x35a>
 8009a10:	2b4e      	cmp	r3, #78	; 0x4e
 8009a12:	f47f aed3 	bne.w	80097bc <_strtod_l+0xbc>
 8009a16:	499e      	ldr	r1, [pc, #632]	; (8009c90 <_strtod_l+0x590>)
 8009a18:	a81d      	add	r0, sp, #116	; 0x74
 8009a1a:	f002 f8c3 	bl	800bba4 <__match>
 8009a1e:	2800      	cmp	r0, #0
 8009a20:	f43f aecc 	beq.w	80097bc <_strtod_l+0xbc>
 8009a24:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009a26:	781b      	ldrb	r3, [r3, #0]
 8009a28:	2b28      	cmp	r3, #40	; 0x28
 8009a2a:	d12d      	bne.n	8009a88 <_strtod_l+0x388>
 8009a2c:	4999      	ldr	r1, [pc, #612]	; (8009c94 <_strtod_l+0x594>)
 8009a2e:	aa20      	add	r2, sp, #128	; 0x80
 8009a30:	a81d      	add	r0, sp, #116	; 0x74
 8009a32:	f002 f8cb 	bl	800bbcc <__hexnan>
 8009a36:	2805      	cmp	r0, #5
 8009a38:	d126      	bne.n	8009a88 <_strtod_l+0x388>
 8009a3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a3c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8009a40:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009a44:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009a48:	e69c      	b.n	8009784 <_strtod_l+0x84>
 8009a4a:	210a      	movs	r1, #10
 8009a4c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8009a50:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009a54:	e7b9      	b.n	80099ca <_strtod_l+0x2ca>
 8009a56:	2b6e      	cmp	r3, #110	; 0x6e
 8009a58:	e7db      	b.n	8009a12 <_strtod_l+0x312>
 8009a5a:	498f      	ldr	r1, [pc, #572]	; (8009c98 <_strtod_l+0x598>)
 8009a5c:	a81d      	add	r0, sp, #116	; 0x74
 8009a5e:	f002 f8a1 	bl	800bba4 <__match>
 8009a62:	2800      	cmp	r0, #0
 8009a64:	f43f aeaa 	beq.w	80097bc <_strtod_l+0xbc>
 8009a68:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009a6a:	498c      	ldr	r1, [pc, #560]	; (8009c9c <_strtod_l+0x59c>)
 8009a6c:	3b01      	subs	r3, #1
 8009a6e:	a81d      	add	r0, sp, #116	; 0x74
 8009a70:	931d      	str	r3, [sp, #116]	; 0x74
 8009a72:	f002 f897 	bl	800bba4 <__match>
 8009a76:	b910      	cbnz	r0, 8009a7e <_strtod_l+0x37e>
 8009a78:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009a7a:	3301      	adds	r3, #1
 8009a7c:	931d      	str	r3, [sp, #116]	; 0x74
 8009a7e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8009cac <_strtod_l+0x5ac>
 8009a82:	f04f 0a00 	mov.w	sl, #0
 8009a86:	e67d      	b.n	8009784 <_strtod_l+0x84>
 8009a88:	4885      	ldr	r0, [pc, #532]	; (8009ca0 <_strtod_l+0x5a0>)
 8009a8a:	f003 f9ed 	bl	800ce68 <nan>
 8009a8e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8009a92:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8009a96:	e675      	b.n	8009784 <_strtod_l+0x84>
 8009a98:	9b07      	ldr	r3, [sp, #28]
 8009a9a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a9c:	1af3      	subs	r3, r6, r3
 8009a9e:	2f00      	cmp	r7, #0
 8009aa0:	bf08      	it	eq
 8009aa2:	462f      	moveq	r7, r5
 8009aa4:	2d10      	cmp	r5, #16
 8009aa6:	9308      	str	r3, [sp, #32]
 8009aa8:	46a8      	mov	r8, r5
 8009aaa:	bfa8      	it	ge
 8009aac:	f04f 0810 	movge.w	r8, #16
 8009ab0:	f7f6 fd28 	bl	8000504 <__aeabi_ui2d>
 8009ab4:	2d09      	cmp	r5, #9
 8009ab6:	4682      	mov	sl, r0
 8009ab8:	468b      	mov	fp, r1
 8009aba:	dd13      	ble.n	8009ae4 <_strtod_l+0x3e4>
 8009abc:	4b79      	ldr	r3, [pc, #484]	; (8009ca4 <_strtod_l+0x5a4>)
 8009abe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009ac2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009ac6:	f7f6 fd97 	bl	80005f8 <__aeabi_dmul>
 8009aca:	4682      	mov	sl, r0
 8009acc:	4648      	mov	r0, r9
 8009ace:	468b      	mov	fp, r1
 8009ad0:	f7f6 fd18 	bl	8000504 <__aeabi_ui2d>
 8009ad4:	4602      	mov	r2, r0
 8009ad6:	460b      	mov	r3, r1
 8009ad8:	4650      	mov	r0, sl
 8009ada:	4659      	mov	r1, fp
 8009adc:	f7f6 fbd6 	bl	800028c <__adddf3>
 8009ae0:	4682      	mov	sl, r0
 8009ae2:	468b      	mov	fp, r1
 8009ae4:	2d0f      	cmp	r5, #15
 8009ae6:	dc38      	bgt.n	8009b5a <_strtod_l+0x45a>
 8009ae8:	9b08      	ldr	r3, [sp, #32]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	f43f ae4a 	beq.w	8009784 <_strtod_l+0x84>
 8009af0:	dd24      	ble.n	8009b3c <_strtod_l+0x43c>
 8009af2:	2b16      	cmp	r3, #22
 8009af4:	dc0b      	bgt.n	8009b0e <_strtod_l+0x40e>
 8009af6:	4d6b      	ldr	r5, [pc, #428]	; (8009ca4 <_strtod_l+0x5a4>)
 8009af8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8009afc:	e9d5 0100 	ldrd	r0, r1, [r5]
 8009b00:	4652      	mov	r2, sl
 8009b02:	465b      	mov	r3, fp
 8009b04:	f7f6 fd78 	bl	80005f8 <__aeabi_dmul>
 8009b08:	4682      	mov	sl, r0
 8009b0a:	468b      	mov	fp, r1
 8009b0c:	e63a      	b.n	8009784 <_strtod_l+0x84>
 8009b0e:	9a08      	ldr	r2, [sp, #32]
 8009b10:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8009b14:	4293      	cmp	r3, r2
 8009b16:	db20      	blt.n	8009b5a <_strtod_l+0x45a>
 8009b18:	4c62      	ldr	r4, [pc, #392]	; (8009ca4 <_strtod_l+0x5a4>)
 8009b1a:	f1c5 050f 	rsb	r5, r5, #15
 8009b1e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009b22:	4652      	mov	r2, sl
 8009b24:	465b      	mov	r3, fp
 8009b26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b2a:	f7f6 fd65 	bl	80005f8 <__aeabi_dmul>
 8009b2e:	9b08      	ldr	r3, [sp, #32]
 8009b30:	1b5d      	subs	r5, r3, r5
 8009b32:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009b36:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009b3a:	e7e3      	b.n	8009b04 <_strtod_l+0x404>
 8009b3c:	9b08      	ldr	r3, [sp, #32]
 8009b3e:	3316      	adds	r3, #22
 8009b40:	db0b      	blt.n	8009b5a <_strtod_l+0x45a>
 8009b42:	9b07      	ldr	r3, [sp, #28]
 8009b44:	4a57      	ldr	r2, [pc, #348]	; (8009ca4 <_strtod_l+0x5a4>)
 8009b46:	1b9e      	subs	r6, r3, r6
 8009b48:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8009b4c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009b50:	4650      	mov	r0, sl
 8009b52:	4659      	mov	r1, fp
 8009b54:	f7f6 fe7a 	bl	800084c <__aeabi_ddiv>
 8009b58:	e7d6      	b.n	8009b08 <_strtod_l+0x408>
 8009b5a:	9b08      	ldr	r3, [sp, #32]
 8009b5c:	eba5 0808 	sub.w	r8, r5, r8
 8009b60:	4498      	add	r8, r3
 8009b62:	f1b8 0f00 	cmp.w	r8, #0
 8009b66:	dd71      	ble.n	8009c4c <_strtod_l+0x54c>
 8009b68:	f018 030f 	ands.w	r3, r8, #15
 8009b6c:	d00a      	beq.n	8009b84 <_strtod_l+0x484>
 8009b6e:	494d      	ldr	r1, [pc, #308]	; (8009ca4 <_strtod_l+0x5a4>)
 8009b70:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009b74:	4652      	mov	r2, sl
 8009b76:	465b      	mov	r3, fp
 8009b78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b7c:	f7f6 fd3c 	bl	80005f8 <__aeabi_dmul>
 8009b80:	4682      	mov	sl, r0
 8009b82:	468b      	mov	fp, r1
 8009b84:	f038 080f 	bics.w	r8, r8, #15
 8009b88:	d04d      	beq.n	8009c26 <_strtod_l+0x526>
 8009b8a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8009b8e:	dd22      	ble.n	8009bd6 <_strtod_l+0x4d6>
 8009b90:	2500      	movs	r5, #0
 8009b92:	462e      	mov	r6, r5
 8009b94:	9509      	str	r5, [sp, #36]	; 0x24
 8009b96:	9507      	str	r5, [sp, #28]
 8009b98:	2322      	movs	r3, #34	; 0x22
 8009b9a:	f8df b110 	ldr.w	fp, [pc, #272]	; 8009cac <_strtod_l+0x5ac>
 8009b9e:	6023      	str	r3, [r4, #0]
 8009ba0:	f04f 0a00 	mov.w	sl, #0
 8009ba4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	f43f adec 	beq.w	8009784 <_strtod_l+0x84>
 8009bac:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009bae:	4620      	mov	r0, r4
 8009bb0:	f002 f96e 	bl	800be90 <_Bfree>
 8009bb4:	9907      	ldr	r1, [sp, #28]
 8009bb6:	4620      	mov	r0, r4
 8009bb8:	f002 f96a 	bl	800be90 <_Bfree>
 8009bbc:	4631      	mov	r1, r6
 8009bbe:	4620      	mov	r0, r4
 8009bc0:	f002 f966 	bl	800be90 <_Bfree>
 8009bc4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009bc6:	4620      	mov	r0, r4
 8009bc8:	f002 f962 	bl	800be90 <_Bfree>
 8009bcc:	4629      	mov	r1, r5
 8009bce:	4620      	mov	r0, r4
 8009bd0:	f002 f95e 	bl	800be90 <_Bfree>
 8009bd4:	e5d6      	b.n	8009784 <_strtod_l+0x84>
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009bdc:	4650      	mov	r0, sl
 8009bde:	4659      	mov	r1, fp
 8009be0:	4699      	mov	r9, r3
 8009be2:	f1b8 0f01 	cmp.w	r8, #1
 8009be6:	dc21      	bgt.n	8009c2c <_strtod_l+0x52c>
 8009be8:	b10b      	cbz	r3, 8009bee <_strtod_l+0x4ee>
 8009bea:	4682      	mov	sl, r0
 8009bec:	468b      	mov	fp, r1
 8009bee:	4b2e      	ldr	r3, [pc, #184]	; (8009ca8 <_strtod_l+0x5a8>)
 8009bf0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009bf4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8009bf8:	4652      	mov	r2, sl
 8009bfa:	465b      	mov	r3, fp
 8009bfc:	e9d9 0100 	ldrd	r0, r1, [r9]
 8009c00:	f7f6 fcfa 	bl	80005f8 <__aeabi_dmul>
 8009c04:	4b29      	ldr	r3, [pc, #164]	; (8009cac <_strtod_l+0x5ac>)
 8009c06:	460a      	mov	r2, r1
 8009c08:	400b      	ands	r3, r1
 8009c0a:	4929      	ldr	r1, [pc, #164]	; (8009cb0 <_strtod_l+0x5b0>)
 8009c0c:	428b      	cmp	r3, r1
 8009c0e:	4682      	mov	sl, r0
 8009c10:	d8be      	bhi.n	8009b90 <_strtod_l+0x490>
 8009c12:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009c16:	428b      	cmp	r3, r1
 8009c18:	bf86      	itte	hi
 8009c1a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8009cb4 <_strtod_l+0x5b4>
 8009c1e:	f04f 3aff 	movhi.w	sl, #4294967295
 8009c22:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8009c26:	2300      	movs	r3, #0
 8009c28:	9304      	str	r3, [sp, #16]
 8009c2a:	e081      	b.n	8009d30 <_strtod_l+0x630>
 8009c2c:	f018 0f01 	tst.w	r8, #1
 8009c30:	d007      	beq.n	8009c42 <_strtod_l+0x542>
 8009c32:	4b1d      	ldr	r3, [pc, #116]	; (8009ca8 <_strtod_l+0x5a8>)
 8009c34:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8009c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c3c:	f7f6 fcdc 	bl	80005f8 <__aeabi_dmul>
 8009c40:	2301      	movs	r3, #1
 8009c42:	f109 0901 	add.w	r9, r9, #1
 8009c46:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009c4a:	e7ca      	b.n	8009be2 <_strtod_l+0x4e2>
 8009c4c:	d0eb      	beq.n	8009c26 <_strtod_l+0x526>
 8009c4e:	f1c8 0800 	rsb	r8, r8, #0
 8009c52:	f018 020f 	ands.w	r2, r8, #15
 8009c56:	d00a      	beq.n	8009c6e <_strtod_l+0x56e>
 8009c58:	4b12      	ldr	r3, [pc, #72]	; (8009ca4 <_strtod_l+0x5a4>)
 8009c5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c5e:	4650      	mov	r0, sl
 8009c60:	4659      	mov	r1, fp
 8009c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c66:	f7f6 fdf1 	bl	800084c <__aeabi_ddiv>
 8009c6a:	4682      	mov	sl, r0
 8009c6c:	468b      	mov	fp, r1
 8009c6e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009c72:	d0d8      	beq.n	8009c26 <_strtod_l+0x526>
 8009c74:	f1b8 0f1f 	cmp.w	r8, #31
 8009c78:	dd1e      	ble.n	8009cb8 <_strtod_l+0x5b8>
 8009c7a:	2500      	movs	r5, #0
 8009c7c:	462e      	mov	r6, r5
 8009c7e:	9509      	str	r5, [sp, #36]	; 0x24
 8009c80:	9507      	str	r5, [sp, #28]
 8009c82:	2322      	movs	r3, #34	; 0x22
 8009c84:	f04f 0a00 	mov.w	sl, #0
 8009c88:	f04f 0b00 	mov.w	fp, #0
 8009c8c:	6023      	str	r3, [r4, #0]
 8009c8e:	e789      	b.n	8009ba4 <_strtod_l+0x4a4>
 8009c90:	0800e515 	.word	0x0800e515
 8009c94:	0800e558 	.word	0x0800e558
 8009c98:	0800e50d 	.word	0x0800e50d
 8009c9c:	0800e69c 	.word	0x0800e69c
 8009ca0:	0800e9b8 	.word	0x0800e9b8
 8009ca4:	0800e898 	.word	0x0800e898
 8009ca8:	0800e870 	.word	0x0800e870
 8009cac:	7ff00000 	.word	0x7ff00000
 8009cb0:	7ca00000 	.word	0x7ca00000
 8009cb4:	7fefffff 	.word	0x7fefffff
 8009cb8:	f018 0310 	ands.w	r3, r8, #16
 8009cbc:	bf18      	it	ne
 8009cbe:	236a      	movne	r3, #106	; 0x6a
 8009cc0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800a078 <_strtod_l+0x978>
 8009cc4:	9304      	str	r3, [sp, #16]
 8009cc6:	4650      	mov	r0, sl
 8009cc8:	4659      	mov	r1, fp
 8009cca:	2300      	movs	r3, #0
 8009ccc:	f018 0f01 	tst.w	r8, #1
 8009cd0:	d004      	beq.n	8009cdc <_strtod_l+0x5dc>
 8009cd2:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009cd6:	f7f6 fc8f 	bl	80005f8 <__aeabi_dmul>
 8009cda:	2301      	movs	r3, #1
 8009cdc:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009ce0:	f109 0908 	add.w	r9, r9, #8
 8009ce4:	d1f2      	bne.n	8009ccc <_strtod_l+0x5cc>
 8009ce6:	b10b      	cbz	r3, 8009cec <_strtod_l+0x5ec>
 8009ce8:	4682      	mov	sl, r0
 8009cea:	468b      	mov	fp, r1
 8009cec:	9b04      	ldr	r3, [sp, #16]
 8009cee:	b1bb      	cbz	r3, 8009d20 <_strtod_l+0x620>
 8009cf0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8009cf4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	4659      	mov	r1, fp
 8009cfc:	dd10      	ble.n	8009d20 <_strtod_l+0x620>
 8009cfe:	2b1f      	cmp	r3, #31
 8009d00:	f340 8128 	ble.w	8009f54 <_strtod_l+0x854>
 8009d04:	2b34      	cmp	r3, #52	; 0x34
 8009d06:	bfde      	ittt	le
 8009d08:	3b20      	suble	r3, #32
 8009d0a:	f04f 32ff 	movle.w	r2, #4294967295
 8009d0e:	fa02 f303 	lslle.w	r3, r2, r3
 8009d12:	f04f 0a00 	mov.w	sl, #0
 8009d16:	bfcc      	ite	gt
 8009d18:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009d1c:	ea03 0b01 	andle.w	fp, r3, r1
 8009d20:	2200      	movs	r2, #0
 8009d22:	2300      	movs	r3, #0
 8009d24:	4650      	mov	r0, sl
 8009d26:	4659      	mov	r1, fp
 8009d28:	f7f6 fece 	bl	8000ac8 <__aeabi_dcmpeq>
 8009d2c:	2800      	cmp	r0, #0
 8009d2e:	d1a4      	bne.n	8009c7a <_strtod_l+0x57a>
 8009d30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d32:	9300      	str	r3, [sp, #0]
 8009d34:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009d36:	462b      	mov	r3, r5
 8009d38:	463a      	mov	r2, r7
 8009d3a:	4620      	mov	r0, r4
 8009d3c:	f002 f914 	bl	800bf68 <__s2b>
 8009d40:	9009      	str	r0, [sp, #36]	; 0x24
 8009d42:	2800      	cmp	r0, #0
 8009d44:	f43f af24 	beq.w	8009b90 <_strtod_l+0x490>
 8009d48:	9b07      	ldr	r3, [sp, #28]
 8009d4a:	1b9e      	subs	r6, r3, r6
 8009d4c:	9b08      	ldr	r3, [sp, #32]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	bfb4      	ite	lt
 8009d52:	4633      	movlt	r3, r6
 8009d54:	2300      	movge	r3, #0
 8009d56:	9310      	str	r3, [sp, #64]	; 0x40
 8009d58:	9b08      	ldr	r3, [sp, #32]
 8009d5a:	2500      	movs	r5, #0
 8009d5c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009d60:	9318      	str	r3, [sp, #96]	; 0x60
 8009d62:	462e      	mov	r6, r5
 8009d64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d66:	4620      	mov	r0, r4
 8009d68:	6859      	ldr	r1, [r3, #4]
 8009d6a:	f002 f851 	bl	800be10 <_Balloc>
 8009d6e:	9007      	str	r0, [sp, #28]
 8009d70:	2800      	cmp	r0, #0
 8009d72:	f43f af11 	beq.w	8009b98 <_strtod_l+0x498>
 8009d76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d78:	691a      	ldr	r2, [r3, #16]
 8009d7a:	3202      	adds	r2, #2
 8009d7c:	f103 010c 	add.w	r1, r3, #12
 8009d80:	0092      	lsls	r2, r2, #2
 8009d82:	300c      	adds	r0, #12
 8009d84:	f7fe fc40 	bl	8008608 <memcpy>
 8009d88:	ec4b ab10 	vmov	d0, sl, fp
 8009d8c:	aa20      	add	r2, sp, #128	; 0x80
 8009d8e:	a91f      	add	r1, sp, #124	; 0x7c
 8009d90:	4620      	mov	r0, r4
 8009d92:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8009d96:	f002 fc23 	bl	800c5e0 <__d2b>
 8009d9a:	901e      	str	r0, [sp, #120]	; 0x78
 8009d9c:	2800      	cmp	r0, #0
 8009d9e:	f43f aefb 	beq.w	8009b98 <_strtod_l+0x498>
 8009da2:	2101      	movs	r1, #1
 8009da4:	4620      	mov	r0, r4
 8009da6:	f002 f979 	bl	800c09c <__i2b>
 8009daa:	4606      	mov	r6, r0
 8009dac:	2800      	cmp	r0, #0
 8009dae:	f43f aef3 	beq.w	8009b98 <_strtod_l+0x498>
 8009db2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009db4:	9904      	ldr	r1, [sp, #16]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	bfab      	itete	ge
 8009dba:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8009dbc:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8009dbe:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8009dc0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8009dc4:	bfac      	ite	ge
 8009dc6:	eb03 0902 	addge.w	r9, r3, r2
 8009dca:	1ad7      	sublt	r7, r2, r3
 8009dcc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009dce:	eba3 0801 	sub.w	r8, r3, r1
 8009dd2:	4490      	add	r8, r2
 8009dd4:	4ba3      	ldr	r3, [pc, #652]	; (800a064 <_strtod_l+0x964>)
 8009dd6:	f108 38ff 	add.w	r8, r8, #4294967295
 8009dda:	4598      	cmp	r8, r3
 8009ddc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009de0:	f280 80cc 	bge.w	8009f7c <_strtod_l+0x87c>
 8009de4:	eba3 0308 	sub.w	r3, r3, r8
 8009de8:	2b1f      	cmp	r3, #31
 8009dea:	eba2 0203 	sub.w	r2, r2, r3
 8009dee:	f04f 0101 	mov.w	r1, #1
 8009df2:	f300 80b6 	bgt.w	8009f62 <_strtod_l+0x862>
 8009df6:	fa01 f303 	lsl.w	r3, r1, r3
 8009dfa:	9311      	str	r3, [sp, #68]	; 0x44
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	930c      	str	r3, [sp, #48]	; 0x30
 8009e00:	eb09 0802 	add.w	r8, r9, r2
 8009e04:	9b04      	ldr	r3, [sp, #16]
 8009e06:	45c1      	cmp	r9, r8
 8009e08:	4417      	add	r7, r2
 8009e0a:	441f      	add	r7, r3
 8009e0c:	464b      	mov	r3, r9
 8009e0e:	bfa8      	it	ge
 8009e10:	4643      	movge	r3, r8
 8009e12:	42bb      	cmp	r3, r7
 8009e14:	bfa8      	it	ge
 8009e16:	463b      	movge	r3, r7
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	bfc2      	ittt	gt
 8009e1c:	eba8 0803 	subgt.w	r8, r8, r3
 8009e20:	1aff      	subgt	r7, r7, r3
 8009e22:	eba9 0903 	subgt.w	r9, r9, r3
 8009e26:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	dd17      	ble.n	8009e5c <_strtod_l+0x75c>
 8009e2c:	4631      	mov	r1, r6
 8009e2e:	461a      	mov	r2, r3
 8009e30:	4620      	mov	r0, r4
 8009e32:	f002 f9ef 	bl	800c214 <__pow5mult>
 8009e36:	4606      	mov	r6, r0
 8009e38:	2800      	cmp	r0, #0
 8009e3a:	f43f aead 	beq.w	8009b98 <_strtod_l+0x498>
 8009e3e:	4601      	mov	r1, r0
 8009e40:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009e42:	4620      	mov	r0, r4
 8009e44:	f002 f940 	bl	800c0c8 <__multiply>
 8009e48:	900f      	str	r0, [sp, #60]	; 0x3c
 8009e4a:	2800      	cmp	r0, #0
 8009e4c:	f43f aea4 	beq.w	8009b98 <_strtod_l+0x498>
 8009e50:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009e52:	4620      	mov	r0, r4
 8009e54:	f002 f81c 	bl	800be90 <_Bfree>
 8009e58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009e5a:	931e      	str	r3, [sp, #120]	; 0x78
 8009e5c:	f1b8 0f00 	cmp.w	r8, #0
 8009e60:	f300 8091 	bgt.w	8009f86 <_strtod_l+0x886>
 8009e64:	9b08      	ldr	r3, [sp, #32]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	dd08      	ble.n	8009e7c <_strtod_l+0x77c>
 8009e6a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009e6c:	9907      	ldr	r1, [sp, #28]
 8009e6e:	4620      	mov	r0, r4
 8009e70:	f002 f9d0 	bl	800c214 <__pow5mult>
 8009e74:	9007      	str	r0, [sp, #28]
 8009e76:	2800      	cmp	r0, #0
 8009e78:	f43f ae8e 	beq.w	8009b98 <_strtod_l+0x498>
 8009e7c:	2f00      	cmp	r7, #0
 8009e7e:	dd08      	ble.n	8009e92 <_strtod_l+0x792>
 8009e80:	9907      	ldr	r1, [sp, #28]
 8009e82:	463a      	mov	r2, r7
 8009e84:	4620      	mov	r0, r4
 8009e86:	f002 fa1f 	bl	800c2c8 <__lshift>
 8009e8a:	9007      	str	r0, [sp, #28]
 8009e8c:	2800      	cmp	r0, #0
 8009e8e:	f43f ae83 	beq.w	8009b98 <_strtod_l+0x498>
 8009e92:	f1b9 0f00 	cmp.w	r9, #0
 8009e96:	dd08      	ble.n	8009eaa <_strtod_l+0x7aa>
 8009e98:	4631      	mov	r1, r6
 8009e9a:	464a      	mov	r2, r9
 8009e9c:	4620      	mov	r0, r4
 8009e9e:	f002 fa13 	bl	800c2c8 <__lshift>
 8009ea2:	4606      	mov	r6, r0
 8009ea4:	2800      	cmp	r0, #0
 8009ea6:	f43f ae77 	beq.w	8009b98 <_strtod_l+0x498>
 8009eaa:	9a07      	ldr	r2, [sp, #28]
 8009eac:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009eae:	4620      	mov	r0, r4
 8009eb0:	f002 fa92 	bl	800c3d8 <__mdiff>
 8009eb4:	4605      	mov	r5, r0
 8009eb6:	2800      	cmp	r0, #0
 8009eb8:	f43f ae6e 	beq.w	8009b98 <_strtod_l+0x498>
 8009ebc:	68c3      	ldr	r3, [r0, #12]
 8009ebe:	930f      	str	r3, [sp, #60]	; 0x3c
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	60c3      	str	r3, [r0, #12]
 8009ec4:	4631      	mov	r1, r6
 8009ec6:	f002 fa6b 	bl	800c3a0 <__mcmp>
 8009eca:	2800      	cmp	r0, #0
 8009ecc:	da65      	bge.n	8009f9a <_strtod_l+0x89a>
 8009ece:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009ed0:	ea53 030a 	orrs.w	r3, r3, sl
 8009ed4:	f040 8087 	bne.w	8009fe6 <_strtod_l+0x8e6>
 8009ed8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	f040 8082 	bne.w	8009fe6 <_strtod_l+0x8e6>
 8009ee2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009ee6:	0d1b      	lsrs	r3, r3, #20
 8009ee8:	051b      	lsls	r3, r3, #20
 8009eea:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009eee:	d97a      	bls.n	8009fe6 <_strtod_l+0x8e6>
 8009ef0:	696b      	ldr	r3, [r5, #20]
 8009ef2:	b913      	cbnz	r3, 8009efa <_strtod_l+0x7fa>
 8009ef4:	692b      	ldr	r3, [r5, #16]
 8009ef6:	2b01      	cmp	r3, #1
 8009ef8:	dd75      	ble.n	8009fe6 <_strtod_l+0x8e6>
 8009efa:	4629      	mov	r1, r5
 8009efc:	2201      	movs	r2, #1
 8009efe:	4620      	mov	r0, r4
 8009f00:	f002 f9e2 	bl	800c2c8 <__lshift>
 8009f04:	4631      	mov	r1, r6
 8009f06:	4605      	mov	r5, r0
 8009f08:	f002 fa4a 	bl	800c3a0 <__mcmp>
 8009f0c:	2800      	cmp	r0, #0
 8009f0e:	dd6a      	ble.n	8009fe6 <_strtod_l+0x8e6>
 8009f10:	9904      	ldr	r1, [sp, #16]
 8009f12:	4a55      	ldr	r2, [pc, #340]	; (800a068 <_strtod_l+0x968>)
 8009f14:	465b      	mov	r3, fp
 8009f16:	2900      	cmp	r1, #0
 8009f18:	f000 8085 	beq.w	800a026 <_strtod_l+0x926>
 8009f1c:	ea02 010b 	and.w	r1, r2, fp
 8009f20:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009f24:	dc7f      	bgt.n	800a026 <_strtod_l+0x926>
 8009f26:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009f2a:	f77f aeaa 	ble.w	8009c82 <_strtod_l+0x582>
 8009f2e:	4a4f      	ldr	r2, [pc, #316]	; (800a06c <_strtod_l+0x96c>)
 8009f30:	2300      	movs	r3, #0
 8009f32:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8009f36:	4650      	mov	r0, sl
 8009f38:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8009f3c:	4659      	mov	r1, fp
 8009f3e:	f7f6 fb5b 	bl	80005f8 <__aeabi_dmul>
 8009f42:	460b      	mov	r3, r1
 8009f44:	4303      	orrs	r3, r0
 8009f46:	bf08      	it	eq
 8009f48:	2322      	moveq	r3, #34	; 0x22
 8009f4a:	4682      	mov	sl, r0
 8009f4c:	468b      	mov	fp, r1
 8009f4e:	bf08      	it	eq
 8009f50:	6023      	streq	r3, [r4, #0]
 8009f52:	e62b      	b.n	8009bac <_strtod_l+0x4ac>
 8009f54:	f04f 32ff 	mov.w	r2, #4294967295
 8009f58:	fa02 f303 	lsl.w	r3, r2, r3
 8009f5c:	ea03 0a0a 	and.w	sl, r3, sl
 8009f60:	e6de      	b.n	8009d20 <_strtod_l+0x620>
 8009f62:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8009f66:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8009f6a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8009f6e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8009f72:	fa01 f308 	lsl.w	r3, r1, r8
 8009f76:	930c      	str	r3, [sp, #48]	; 0x30
 8009f78:	9111      	str	r1, [sp, #68]	; 0x44
 8009f7a:	e741      	b.n	8009e00 <_strtod_l+0x700>
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	930c      	str	r3, [sp, #48]	; 0x30
 8009f80:	2301      	movs	r3, #1
 8009f82:	9311      	str	r3, [sp, #68]	; 0x44
 8009f84:	e73c      	b.n	8009e00 <_strtod_l+0x700>
 8009f86:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009f88:	4642      	mov	r2, r8
 8009f8a:	4620      	mov	r0, r4
 8009f8c:	f002 f99c 	bl	800c2c8 <__lshift>
 8009f90:	901e      	str	r0, [sp, #120]	; 0x78
 8009f92:	2800      	cmp	r0, #0
 8009f94:	f47f af66 	bne.w	8009e64 <_strtod_l+0x764>
 8009f98:	e5fe      	b.n	8009b98 <_strtod_l+0x498>
 8009f9a:	465f      	mov	r7, fp
 8009f9c:	d16e      	bne.n	800a07c <_strtod_l+0x97c>
 8009f9e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009fa0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009fa4:	b342      	cbz	r2, 8009ff8 <_strtod_l+0x8f8>
 8009fa6:	4a32      	ldr	r2, [pc, #200]	; (800a070 <_strtod_l+0x970>)
 8009fa8:	4293      	cmp	r3, r2
 8009faa:	d128      	bne.n	8009ffe <_strtod_l+0x8fe>
 8009fac:	9b04      	ldr	r3, [sp, #16]
 8009fae:	4650      	mov	r0, sl
 8009fb0:	b1eb      	cbz	r3, 8009fee <_strtod_l+0x8ee>
 8009fb2:	4a2d      	ldr	r2, [pc, #180]	; (800a068 <_strtod_l+0x968>)
 8009fb4:	403a      	ands	r2, r7
 8009fb6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8009fba:	f04f 31ff 	mov.w	r1, #4294967295
 8009fbe:	d819      	bhi.n	8009ff4 <_strtod_l+0x8f4>
 8009fc0:	0d12      	lsrs	r2, r2, #20
 8009fc2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8009fca:	4298      	cmp	r0, r3
 8009fcc:	d117      	bne.n	8009ffe <_strtod_l+0x8fe>
 8009fce:	4b29      	ldr	r3, [pc, #164]	; (800a074 <_strtod_l+0x974>)
 8009fd0:	429f      	cmp	r7, r3
 8009fd2:	d102      	bne.n	8009fda <_strtod_l+0x8da>
 8009fd4:	3001      	adds	r0, #1
 8009fd6:	f43f addf 	beq.w	8009b98 <_strtod_l+0x498>
 8009fda:	4b23      	ldr	r3, [pc, #140]	; (800a068 <_strtod_l+0x968>)
 8009fdc:	403b      	ands	r3, r7
 8009fde:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009fe2:	f04f 0a00 	mov.w	sl, #0
 8009fe6:	9b04      	ldr	r3, [sp, #16]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d1a0      	bne.n	8009f2e <_strtod_l+0x82e>
 8009fec:	e5de      	b.n	8009bac <_strtod_l+0x4ac>
 8009fee:	f04f 33ff 	mov.w	r3, #4294967295
 8009ff2:	e7ea      	b.n	8009fca <_strtod_l+0x8ca>
 8009ff4:	460b      	mov	r3, r1
 8009ff6:	e7e8      	b.n	8009fca <_strtod_l+0x8ca>
 8009ff8:	ea53 030a 	orrs.w	r3, r3, sl
 8009ffc:	d088      	beq.n	8009f10 <_strtod_l+0x810>
 8009ffe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a000:	b1db      	cbz	r3, 800a03a <_strtod_l+0x93a>
 800a002:	423b      	tst	r3, r7
 800a004:	d0ef      	beq.n	8009fe6 <_strtod_l+0x8e6>
 800a006:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a008:	9a04      	ldr	r2, [sp, #16]
 800a00a:	4650      	mov	r0, sl
 800a00c:	4659      	mov	r1, fp
 800a00e:	b1c3      	cbz	r3, 800a042 <_strtod_l+0x942>
 800a010:	f7ff fb57 	bl	80096c2 <sulp>
 800a014:	4602      	mov	r2, r0
 800a016:	460b      	mov	r3, r1
 800a018:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a01c:	f7f6 f936 	bl	800028c <__adddf3>
 800a020:	4682      	mov	sl, r0
 800a022:	468b      	mov	fp, r1
 800a024:	e7df      	b.n	8009fe6 <_strtod_l+0x8e6>
 800a026:	4013      	ands	r3, r2
 800a028:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a02c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a030:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a034:	f04f 3aff 	mov.w	sl, #4294967295
 800a038:	e7d5      	b.n	8009fe6 <_strtod_l+0x8e6>
 800a03a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a03c:	ea13 0f0a 	tst.w	r3, sl
 800a040:	e7e0      	b.n	800a004 <_strtod_l+0x904>
 800a042:	f7ff fb3e 	bl	80096c2 <sulp>
 800a046:	4602      	mov	r2, r0
 800a048:	460b      	mov	r3, r1
 800a04a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a04e:	f7f6 f91b 	bl	8000288 <__aeabi_dsub>
 800a052:	2200      	movs	r2, #0
 800a054:	2300      	movs	r3, #0
 800a056:	4682      	mov	sl, r0
 800a058:	468b      	mov	fp, r1
 800a05a:	f7f6 fd35 	bl	8000ac8 <__aeabi_dcmpeq>
 800a05e:	2800      	cmp	r0, #0
 800a060:	d0c1      	beq.n	8009fe6 <_strtod_l+0x8e6>
 800a062:	e60e      	b.n	8009c82 <_strtod_l+0x582>
 800a064:	fffffc02 	.word	0xfffffc02
 800a068:	7ff00000 	.word	0x7ff00000
 800a06c:	39500000 	.word	0x39500000
 800a070:	000fffff 	.word	0x000fffff
 800a074:	7fefffff 	.word	0x7fefffff
 800a078:	0800e570 	.word	0x0800e570
 800a07c:	4631      	mov	r1, r6
 800a07e:	4628      	mov	r0, r5
 800a080:	f002 fb0a 	bl	800c698 <__ratio>
 800a084:	ec59 8b10 	vmov	r8, r9, d0
 800a088:	ee10 0a10 	vmov	r0, s0
 800a08c:	2200      	movs	r2, #0
 800a08e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a092:	4649      	mov	r1, r9
 800a094:	f7f6 fd2c 	bl	8000af0 <__aeabi_dcmple>
 800a098:	2800      	cmp	r0, #0
 800a09a:	d07c      	beq.n	800a196 <_strtod_l+0xa96>
 800a09c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d04c      	beq.n	800a13c <_strtod_l+0xa3c>
 800a0a2:	4b95      	ldr	r3, [pc, #596]	; (800a2f8 <_strtod_l+0xbf8>)
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800a0aa:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800a2f8 <_strtod_l+0xbf8>
 800a0ae:	f04f 0800 	mov.w	r8, #0
 800a0b2:	4b92      	ldr	r3, [pc, #584]	; (800a2fc <_strtod_l+0xbfc>)
 800a0b4:	403b      	ands	r3, r7
 800a0b6:	9311      	str	r3, [sp, #68]	; 0x44
 800a0b8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a0ba:	4b91      	ldr	r3, [pc, #580]	; (800a300 <_strtod_l+0xc00>)
 800a0bc:	429a      	cmp	r2, r3
 800a0be:	f040 80b2 	bne.w	800a226 <_strtod_l+0xb26>
 800a0c2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a0c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a0ca:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800a0ce:	ec4b ab10 	vmov	d0, sl, fp
 800a0d2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800a0d6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a0da:	f002 fa05 	bl	800c4e8 <__ulp>
 800a0de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a0e2:	ec53 2b10 	vmov	r2, r3, d0
 800a0e6:	f7f6 fa87 	bl	80005f8 <__aeabi_dmul>
 800a0ea:	4652      	mov	r2, sl
 800a0ec:	465b      	mov	r3, fp
 800a0ee:	f7f6 f8cd 	bl	800028c <__adddf3>
 800a0f2:	460b      	mov	r3, r1
 800a0f4:	4981      	ldr	r1, [pc, #516]	; (800a2fc <_strtod_l+0xbfc>)
 800a0f6:	4a83      	ldr	r2, [pc, #524]	; (800a304 <_strtod_l+0xc04>)
 800a0f8:	4019      	ands	r1, r3
 800a0fa:	4291      	cmp	r1, r2
 800a0fc:	4682      	mov	sl, r0
 800a0fe:	d95e      	bls.n	800a1be <_strtod_l+0xabe>
 800a100:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a102:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a106:	4293      	cmp	r3, r2
 800a108:	d103      	bne.n	800a112 <_strtod_l+0xa12>
 800a10a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a10c:	3301      	adds	r3, #1
 800a10e:	f43f ad43 	beq.w	8009b98 <_strtod_l+0x498>
 800a112:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800a310 <_strtod_l+0xc10>
 800a116:	f04f 3aff 	mov.w	sl, #4294967295
 800a11a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a11c:	4620      	mov	r0, r4
 800a11e:	f001 feb7 	bl	800be90 <_Bfree>
 800a122:	9907      	ldr	r1, [sp, #28]
 800a124:	4620      	mov	r0, r4
 800a126:	f001 feb3 	bl	800be90 <_Bfree>
 800a12a:	4631      	mov	r1, r6
 800a12c:	4620      	mov	r0, r4
 800a12e:	f001 feaf 	bl	800be90 <_Bfree>
 800a132:	4629      	mov	r1, r5
 800a134:	4620      	mov	r0, r4
 800a136:	f001 feab 	bl	800be90 <_Bfree>
 800a13a:	e613      	b.n	8009d64 <_strtod_l+0x664>
 800a13c:	f1ba 0f00 	cmp.w	sl, #0
 800a140:	d11b      	bne.n	800a17a <_strtod_l+0xa7a>
 800a142:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a146:	b9f3      	cbnz	r3, 800a186 <_strtod_l+0xa86>
 800a148:	4b6b      	ldr	r3, [pc, #428]	; (800a2f8 <_strtod_l+0xbf8>)
 800a14a:	2200      	movs	r2, #0
 800a14c:	4640      	mov	r0, r8
 800a14e:	4649      	mov	r1, r9
 800a150:	f7f6 fcc4 	bl	8000adc <__aeabi_dcmplt>
 800a154:	b9d0      	cbnz	r0, 800a18c <_strtod_l+0xa8c>
 800a156:	4640      	mov	r0, r8
 800a158:	4649      	mov	r1, r9
 800a15a:	4b6b      	ldr	r3, [pc, #428]	; (800a308 <_strtod_l+0xc08>)
 800a15c:	2200      	movs	r2, #0
 800a15e:	f7f6 fa4b 	bl	80005f8 <__aeabi_dmul>
 800a162:	4680      	mov	r8, r0
 800a164:	4689      	mov	r9, r1
 800a166:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a16a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800a16e:	931b      	str	r3, [sp, #108]	; 0x6c
 800a170:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800a174:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800a178:	e79b      	b.n	800a0b2 <_strtod_l+0x9b2>
 800a17a:	f1ba 0f01 	cmp.w	sl, #1
 800a17e:	d102      	bne.n	800a186 <_strtod_l+0xa86>
 800a180:	2f00      	cmp	r7, #0
 800a182:	f43f ad7e 	beq.w	8009c82 <_strtod_l+0x582>
 800a186:	4b61      	ldr	r3, [pc, #388]	; (800a30c <_strtod_l+0xc0c>)
 800a188:	2200      	movs	r2, #0
 800a18a:	e78c      	b.n	800a0a6 <_strtod_l+0x9a6>
 800a18c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800a308 <_strtod_l+0xc08>
 800a190:	f04f 0800 	mov.w	r8, #0
 800a194:	e7e7      	b.n	800a166 <_strtod_l+0xa66>
 800a196:	4b5c      	ldr	r3, [pc, #368]	; (800a308 <_strtod_l+0xc08>)
 800a198:	4640      	mov	r0, r8
 800a19a:	4649      	mov	r1, r9
 800a19c:	2200      	movs	r2, #0
 800a19e:	f7f6 fa2b 	bl	80005f8 <__aeabi_dmul>
 800a1a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a1a4:	4680      	mov	r8, r0
 800a1a6:	4689      	mov	r9, r1
 800a1a8:	b933      	cbnz	r3, 800a1b8 <_strtod_l+0xab8>
 800a1aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a1ae:	9012      	str	r0, [sp, #72]	; 0x48
 800a1b0:	9313      	str	r3, [sp, #76]	; 0x4c
 800a1b2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800a1b6:	e7dd      	b.n	800a174 <_strtod_l+0xa74>
 800a1b8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800a1bc:	e7f9      	b.n	800a1b2 <_strtod_l+0xab2>
 800a1be:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800a1c2:	9b04      	ldr	r3, [sp, #16]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d1a8      	bne.n	800a11a <_strtod_l+0xa1a>
 800a1c8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a1cc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a1ce:	0d1b      	lsrs	r3, r3, #20
 800a1d0:	051b      	lsls	r3, r3, #20
 800a1d2:	429a      	cmp	r2, r3
 800a1d4:	d1a1      	bne.n	800a11a <_strtod_l+0xa1a>
 800a1d6:	4640      	mov	r0, r8
 800a1d8:	4649      	mov	r1, r9
 800a1da:	f7f6 fd6d 	bl	8000cb8 <__aeabi_d2lz>
 800a1de:	f7f6 f9dd 	bl	800059c <__aeabi_l2d>
 800a1e2:	4602      	mov	r2, r0
 800a1e4:	460b      	mov	r3, r1
 800a1e6:	4640      	mov	r0, r8
 800a1e8:	4649      	mov	r1, r9
 800a1ea:	f7f6 f84d 	bl	8000288 <__aeabi_dsub>
 800a1ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a1f0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a1f4:	ea43 030a 	orr.w	r3, r3, sl
 800a1f8:	4313      	orrs	r3, r2
 800a1fa:	4680      	mov	r8, r0
 800a1fc:	4689      	mov	r9, r1
 800a1fe:	d053      	beq.n	800a2a8 <_strtod_l+0xba8>
 800a200:	a335      	add	r3, pc, #212	; (adr r3, 800a2d8 <_strtod_l+0xbd8>)
 800a202:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a206:	f7f6 fc69 	bl	8000adc <__aeabi_dcmplt>
 800a20a:	2800      	cmp	r0, #0
 800a20c:	f47f acce 	bne.w	8009bac <_strtod_l+0x4ac>
 800a210:	a333      	add	r3, pc, #204	; (adr r3, 800a2e0 <_strtod_l+0xbe0>)
 800a212:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a216:	4640      	mov	r0, r8
 800a218:	4649      	mov	r1, r9
 800a21a:	f7f6 fc7d 	bl	8000b18 <__aeabi_dcmpgt>
 800a21e:	2800      	cmp	r0, #0
 800a220:	f43f af7b 	beq.w	800a11a <_strtod_l+0xa1a>
 800a224:	e4c2      	b.n	8009bac <_strtod_l+0x4ac>
 800a226:	9b04      	ldr	r3, [sp, #16]
 800a228:	b333      	cbz	r3, 800a278 <_strtod_l+0xb78>
 800a22a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a22c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a230:	d822      	bhi.n	800a278 <_strtod_l+0xb78>
 800a232:	a32d      	add	r3, pc, #180	; (adr r3, 800a2e8 <_strtod_l+0xbe8>)
 800a234:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a238:	4640      	mov	r0, r8
 800a23a:	4649      	mov	r1, r9
 800a23c:	f7f6 fc58 	bl	8000af0 <__aeabi_dcmple>
 800a240:	b1a0      	cbz	r0, 800a26c <_strtod_l+0xb6c>
 800a242:	4649      	mov	r1, r9
 800a244:	4640      	mov	r0, r8
 800a246:	f7f6 fcaf 	bl	8000ba8 <__aeabi_d2uiz>
 800a24a:	2801      	cmp	r0, #1
 800a24c:	bf38      	it	cc
 800a24e:	2001      	movcc	r0, #1
 800a250:	f7f6 f958 	bl	8000504 <__aeabi_ui2d>
 800a254:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a256:	4680      	mov	r8, r0
 800a258:	4689      	mov	r9, r1
 800a25a:	bb13      	cbnz	r3, 800a2a2 <_strtod_l+0xba2>
 800a25c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a260:	9014      	str	r0, [sp, #80]	; 0x50
 800a262:	9315      	str	r3, [sp, #84]	; 0x54
 800a264:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a268:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800a26c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a26e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a270:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a274:	1a9b      	subs	r3, r3, r2
 800a276:	930d      	str	r3, [sp, #52]	; 0x34
 800a278:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a27c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a280:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a284:	f002 f930 	bl	800c4e8 <__ulp>
 800a288:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a28c:	ec53 2b10 	vmov	r2, r3, d0
 800a290:	f7f6 f9b2 	bl	80005f8 <__aeabi_dmul>
 800a294:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a298:	f7f5 fff8 	bl	800028c <__adddf3>
 800a29c:	4682      	mov	sl, r0
 800a29e:	468b      	mov	fp, r1
 800a2a0:	e78f      	b.n	800a1c2 <_strtod_l+0xac2>
 800a2a2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800a2a6:	e7dd      	b.n	800a264 <_strtod_l+0xb64>
 800a2a8:	a311      	add	r3, pc, #68	; (adr r3, 800a2f0 <_strtod_l+0xbf0>)
 800a2aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ae:	f7f6 fc15 	bl	8000adc <__aeabi_dcmplt>
 800a2b2:	e7b4      	b.n	800a21e <_strtod_l+0xb1e>
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	930e      	str	r3, [sp, #56]	; 0x38
 800a2b8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a2ba:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a2bc:	6013      	str	r3, [r2, #0]
 800a2be:	f7ff ba65 	b.w	800978c <_strtod_l+0x8c>
 800a2c2:	2b65      	cmp	r3, #101	; 0x65
 800a2c4:	f43f ab5d 	beq.w	8009982 <_strtod_l+0x282>
 800a2c8:	2b45      	cmp	r3, #69	; 0x45
 800a2ca:	f43f ab5a 	beq.w	8009982 <_strtod_l+0x282>
 800a2ce:	2201      	movs	r2, #1
 800a2d0:	f7ff bb92 	b.w	80099f8 <_strtod_l+0x2f8>
 800a2d4:	f3af 8000 	nop.w
 800a2d8:	94a03595 	.word	0x94a03595
 800a2dc:	3fdfffff 	.word	0x3fdfffff
 800a2e0:	35afe535 	.word	0x35afe535
 800a2e4:	3fe00000 	.word	0x3fe00000
 800a2e8:	ffc00000 	.word	0xffc00000
 800a2ec:	41dfffff 	.word	0x41dfffff
 800a2f0:	94a03595 	.word	0x94a03595
 800a2f4:	3fcfffff 	.word	0x3fcfffff
 800a2f8:	3ff00000 	.word	0x3ff00000
 800a2fc:	7ff00000 	.word	0x7ff00000
 800a300:	7fe00000 	.word	0x7fe00000
 800a304:	7c9fffff 	.word	0x7c9fffff
 800a308:	3fe00000 	.word	0x3fe00000
 800a30c:	bff00000 	.word	0xbff00000
 800a310:	7fefffff 	.word	0x7fefffff

0800a314 <_strtod_r>:
 800a314:	4b01      	ldr	r3, [pc, #4]	; (800a31c <_strtod_r+0x8>)
 800a316:	f7ff b9f3 	b.w	8009700 <_strtod_l>
 800a31a:	bf00      	nop
 800a31c:	2000007c 	.word	0x2000007c

0800a320 <strtod>:
 800a320:	460a      	mov	r2, r1
 800a322:	4601      	mov	r1, r0
 800a324:	4802      	ldr	r0, [pc, #8]	; (800a330 <strtod+0x10>)
 800a326:	4b03      	ldr	r3, [pc, #12]	; (800a334 <strtod+0x14>)
 800a328:	6800      	ldr	r0, [r0, #0]
 800a32a:	f7ff b9e9 	b.w	8009700 <_strtod_l>
 800a32e:	bf00      	nop
 800a330:	20000014 	.word	0x20000014
 800a334:	2000007c 	.word	0x2000007c

0800a338 <_strtol_l.isra.0>:
 800a338:	2b01      	cmp	r3, #1
 800a33a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a33e:	d001      	beq.n	800a344 <_strtol_l.isra.0+0xc>
 800a340:	2b24      	cmp	r3, #36	; 0x24
 800a342:	d906      	bls.n	800a352 <_strtol_l.isra.0+0x1a>
 800a344:	f7fe f936 	bl	80085b4 <__errno>
 800a348:	2316      	movs	r3, #22
 800a34a:	6003      	str	r3, [r0, #0]
 800a34c:	2000      	movs	r0, #0
 800a34e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a352:	4f3a      	ldr	r7, [pc, #232]	; (800a43c <_strtol_l.isra.0+0x104>)
 800a354:	468e      	mov	lr, r1
 800a356:	4676      	mov	r6, lr
 800a358:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800a35c:	5de5      	ldrb	r5, [r4, r7]
 800a35e:	f015 0508 	ands.w	r5, r5, #8
 800a362:	d1f8      	bne.n	800a356 <_strtol_l.isra.0+0x1e>
 800a364:	2c2d      	cmp	r4, #45	; 0x2d
 800a366:	d134      	bne.n	800a3d2 <_strtol_l.isra.0+0x9a>
 800a368:	f89e 4000 	ldrb.w	r4, [lr]
 800a36c:	f04f 0801 	mov.w	r8, #1
 800a370:	f106 0e02 	add.w	lr, r6, #2
 800a374:	2b00      	cmp	r3, #0
 800a376:	d05c      	beq.n	800a432 <_strtol_l.isra.0+0xfa>
 800a378:	2b10      	cmp	r3, #16
 800a37a:	d10c      	bne.n	800a396 <_strtol_l.isra.0+0x5e>
 800a37c:	2c30      	cmp	r4, #48	; 0x30
 800a37e:	d10a      	bne.n	800a396 <_strtol_l.isra.0+0x5e>
 800a380:	f89e 4000 	ldrb.w	r4, [lr]
 800a384:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a388:	2c58      	cmp	r4, #88	; 0x58
 800a38a:	d14d      	bne.n	800a428 <_strtol_l.isra.0+0xf0>
 800a38c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800a390:	2310      	movs	r3, #16
 800a392:	f10e 0e02 	add.w	lr, lr, #2
 800a396:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800a39a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a39e:	2600      	movs	r6, #0
 800a3a0:	fbbc f9f3 	udiv	r9, ip, r3
 800a3a4:	4635      	mov	r5, r6
 800a3a6:	fb03 ca19 	mls	sl, r3, r9, ip
 800a3aa:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800a3ae:	2f09      	cmp	r7, #9
 800a3b0:	d818      	bhi.n	800a3e4 <_strtol_l.isra.0+0xac>
 800a3b2:	463c      	mov	r4, r7
 800a3b4:	42a3      	cmp	r3, r4
 800a3b6:	dd24      	ble.n	800a402 <_strtol_l.isra.0+0xca>
 800a3b8:	2e00      	cmp	r6, #0
 800a3ba:	db1f      	blt.n	800a3fc <_strtol_l.isra.0+0xc4>
 800a3bc:	45a9      	cmp	r9, r5
 800a3be:	d31d      	bcc.n	800a3fc <_strtol_l.isra.0+0xc4>
 800a3c0:	d101      	bne.n	800a3c6 <_strtol_l.isra.0+0x8e>
 800a3c2:	45a2      	cmp	sl, r4
 800a3c4:	db1a      	blt.n	800a3fc <_strtol_l.isra.0+0xc4>
 800a3c6:	fb05 4503 	mla	r5, r5, r3, r4
 800a3ca:	2601      	movs	r6, #1
 800a3cc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800a3d0:	e7eb      	b.n	800a3aa <_strtol_l.isra.0+0x72>
 800a3d2:	2c2b      	cmp	r4, #43	; 0x2b
 800a3d4:	bf08      	it	eq
 800a3d6:	f89e 4000 	ldrbeq.w	r4, [lr]
 800a3da:	46a8      	mov	r8, r5
 800a3dc:	bf08      	it	eq
 800a3de:	f106 0e02 	addeq.w	lr, r6, #2
 800a3e2:	e7c7      	b.n	800a374 <_strtol_l.isra.0+0x3c>
 800a3e4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800a3e8:	2f19      	cmp	r7, #25
 800a3ea:	d801      	bhi.n	800a3f0 <_strtol_l.isra.0+0xb8>
 800a3ec:	3c37      	subs	r4, #55	; 0x37
 800a3ee:	e7e1      	b.n	800a3b4 <_strtol_l.isra.0+0x7c>
 800a3f0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800a3f4:	2f19      	cmp	r7, #25
 800a3f6:	d804      	bhi.n	800a402 <_strtol_l.isra.0+0xca>
 800a3f8:	3c57      	subs	r4, #87	; 0x57
 800a3fa:	e7db      	b.n	800a3b4 <_strtol_l.isra.0+0x7c>
 800a3fc:	f04f 36ff 	mov.w	r6, #4294967295
 800a400:	e7e4      	b.n	800a3cc <_strtol_l.isra.0+0x94>
 800a402:	2e00      	cmp	r6, #0
 800a404:	da05      	bge.n	800a412 <_strtol_l.isra.0+0xda>
 800a406:	2322      	movs	r3, #34	; 0x22
 800a408:	6003      	str	r3, [r0, #0]
 800a40a:	4665      	mov	r5, ip
 800a40c:	b942      	cbnz	r2, 800a420 <_strtol_l.isra.0+0xe8>
 800a40e:	4628      	mov	r0, r5
 800a410:	e79d      	b.n	800a34e <_strtol_l.isra.0+0x16>
 800a412:	f1b8 0f00 	cmp.w	r8, #0
 800a416:	d000      	beq.n	800a41a <_strtol_l.isra.0+0xe2>
 800a418:	426d      	negs	r5, r5
 800a41a:	2a00      	cmp	r2, #0
 800a41c:	d0f7      	beq.n	800a40e <_strtol_l.isra.0+0xd6>
 800a41e:	b10e      	cbz	r6, 800a424 <_strtol_l.isra.0+0xec>
 800a420:	f10e 31ff 	add.w	r1, lr, #4294967295
 800a424:	6011      	str	r1, [r2, #0]
 800a426:	e7f2      	b.n	800a40e <_strtol_l.isra.0+0xd6>
 800a428:	2430      	movs	r4, #48	; 0x30
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d1b3      	bne.n	800a396 <_strtol_l.isra.0+0x5e>
 800a42e:	2308      	movs	r3, #8
 800a430:	e7b1      	b.n	800a396 <_strtol_l.isra.0+0x5e>
 800a432:	2c30      	cmp	r4, #48	; 0x30
 800a434:	d0a4      	beq.n	800a380 <_strtol_l.isra.0+0x48>
 800a436:	230a      	movs	r3, #10
 800a438:	e7ad      	b.n	800a396 <_strtol_l.isra.0+0x5e>
 800a43a:	bf00      	nop
 800a43c:	0800e599 	.word	0x0800e599

0800a440 <_strtol_r>:
 800a440:	f7ff bf7a 	b.w	800a338 <_strtol_l.isra.0>

0800a444 <__swbuf_r>:
 800a444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a446:	460e      	mov	r6, r1
 800a448:	4614      	mov	r4, r2
 800a44a:	4605      	mov	r5, r0
 800a44c:	b118      	cbz	r0, 800a456 <__swbuf_r+0x12>
 800a44e:	6983      	ldr	r3, [r0, #24]
 800a450:	b90b      	cbnz	r3, 800a456 <__swbuf_r+0x12>
 800a452:	f001 f84b 	bl	800b4ec <__sinit>
 800a456:	4b21      	ldr	r3, [pc, #132]	; (800a4dc <__swbuf_r+0x98>)
 800a458:	429c      	cmp	r4, r3
 800a45a:	d12b      	bne.n	800a4b4 <__swbuf_r+0x70>
 800a45c:	686c      	ldr	r4, [r5, #4]
 800a45e:	69a3      	ldr	r3, [r4, #24]
 800a460:	60a3      	str	r3, [r4, #8]
 800a462:	89a3      	ldrh	r3, [r4, #12]
 800a464:	071a      	lsls	r2, r3, #28
 800a466:	d52f      	bpl.n	800a4c8 <__swbuf_r+0x84>
 800a468:	6923      	ldr	r3, [r4, #16]
 800a46a:	b36b      	cbz	r3, 800a4c8 <__swbuf_r+0x84>
 800a46c:	6923      	ldr	r3, [r4, #16]
 800a46e:	6820      	ldr	r0, [r4, #0]
 800a470:	1ac0      	subs	r0, r0, r3
 800a472:	6963      	ldr	r3, [r4, #20]
 800a474:	b2f6      	uxtb	r6, r6
 800a476:	4283      	cmp	r3, r0
 800a478:	4637      	mov	r7, r6
 800a47a:	dc04      	bgt.n	800a486 <__swbuf_r+0x42>
 800a47c:	4621      	mov	r1, r4
 800a47e:	4628      	mov	r0, r5
 800a480:	f000 ffa0 	bl	800b3c4 <_fflush_r>
 800a484:	bb30      	cbnz	r0, 800a4d4 <__swbuf_r+0x90>
 800a486:	68a3      	ldr	r3, [r4, #8]
 800a488:	3b01      	subs	r3, #1
 800a48a:	60a3      	str	r3, [r4, #8]
 800a48c:	6823      	ldr	r3, [r4, #0]
 800a48e:	1c5a      	adds	r2, r3, #1
 800a490:	6022      	str	r2, [r4, #0]
 800a492:	701e      	strb	r6, [r3, #0]
 800a494:	6963      	ldr	r3, [r4, #20]
 800a496:	3001      	adds	r0, #1
 800a498:	4283      	cmp	r3, r0
 800a49a:	d004      	beq.n	800a4a6 <__swbuf_r+0x62>
 800a49c:	89a3      	ldrh	r3, [r4, #12]
 800a49e:	07db      	lsls	r3, r3, #31
 800a4a0:	d506      	bpl.n	800a4b0 <__swbuf_r+0x6c>
 800a4a2:	2e0a      	cmp	r6, #10
 800a4a4:	d104      	bne.n	800a4b0 <__swbuf_r+0x6c>
 800a4a6:	4621      	mov	r1, r4
 800a4a8:	4628      	mov	r0, r5
 800a4aa:	f000 ff8b 	bl	800b3c4 <_fflush_r>
 800a4ae:	b988      	cbnz	r0, 800a4d4 <__swbuf_r+0x90>
 800a4b0:	4638      	mov	r0, r7
 800a4b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4b4:	4b0a      	ldr	r3, [pc, #40]	; (800a4e0 <__swbuf_r+0x9c>)
 800a4b6:	429c      	cmp	r4, r3
 800a4b8:	d101      	bne.n	800a4be <__swbuf_r+0x7a>
 800a4ba:	68ac      	ldr	r4, [r5, #8]
 800a4bc:	e7cf      	b.n	800a45e <__swbuf_r+0x1a>
 800a4be:	4b09      	ldr	r3, [pc, #36]	; (800a4e4 <__swbuf_r+0xa0>)
 800a4c0:	429c      	cmp	r4, r3
 800a4c2:	bf08      	it	eq
 800a4c4:	68ec      	ldreq	r4, [r5, #12]
 800a4c6:	e7ca      	b.n	800a45e <__swbuf_r+0x1a>
 800a4c8:	4621      	mov	r1, r4
 800a4ca:	4628      	mov	r0, r5
 800a4cc:	f000 f80c 	bl	800a4e8 <__swsetup_r>
 800a4d0:	2800      	cmp	r0, #0
 800a4d2:	d0cb      	beq.n	800a46c <__swbuf_r+0x28>
 800a4d4:	f04f 37ff 	mov.w	r7, #4294967295
 800a4d8:	e7ea      	b.n	800a4b0 <__swbuf_r+0x6c>
 800a4da:	bf00      	nop
 800a4dc:	0800e750 	.word	0x0800e750
 800a4e0:	0800e770 	.word	0x0800e770
 800a4e4:	0800e730 	.word	0x0800e730

0800a4e8 <__swsetup_r>:
 800a4e8:	4b32      	ldr	r3, [pc, #200]	; (800a5b4 <__swsetup_r+0xcc>)
 800a4ea:	b570      	push	{r4, r5, r6, lr}
 800a4ec:	681d      	ldr	r5, [r3, #0]
 800a4ee:	4606      	mov	r6, r0
 800a4f0:	460c      	mov	r4, r1
 800a4f2:	b125      	cbz	r5, 800a4fe <__swsetup_r+0x16>
 800a4f4:	69ab      	ldr	r3, [r5, #24]
 800a4f6:	b913      	cbnz	r3, 800a4fe <__swsetup_r+0x16>
 800a4f8:	4628      	mov	r0, r5
 800a4fa:	f000 fff7 	bl	800b4ec <__sinit>
 800a4fe:	4b2e      	ldr	r3, [pc, #184]	; (800a5b8 <__swsetup_r+0xd0>)
 800a500:	429c      	cmp	r4, r3
 800a502:	d10f      	bne.n	800a524 <__swsetup_r+0x3c>
 800a504:	686c      	ldr	r4, [r5, #4]
 800a506:	89a3      	ldrh	r3, [r4, #12]
 800a508:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a50c:	0719      	lsls	r1, r3, #28
 800a50e:	d42c      	bmi.n	800a56a <__swsetup_r+0x82>
 800a510:	06dd      	lsls	r5, r3, #27
 800a512:	d411      	bmi.n	800a538 <__swsetup_r+0x50>
 800a514:	2309      	movs	r3, #9
 800a516:	6033      	str	r3, [r6, #0]
 800a518:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a51c:	81a3      	strh	r3, [r4, #12]
 800a51e:	f04f 30ff 	mov.w	r0, #4294967295
 800a522:	e03e      	b.n	800a5a2 <__swsetup_r+0xba>
 800a524:	4b25      	ldr	r3, [pc, #148]	; (800a5bc <__swsetup_r+0xd4>)
 800a526:	429c      	cmp	r4, r3
 800a528:	d101      	bne.n	800a52e <__swsetup_r+0x46>
 800a52a:	68ac      	ldr	r4, [r5, #8]
 800a52c:	e7eb      	b.n	800a506 <__swsetup_r+0x1e>
 800a52e:	4b24      	ldr	r3, [pc, #144]	; (800a5c0 <__swsetup_r+0xd8>)
 800a530:	429c      	cmp	r4, r3
 800a532:	bf08      	it	eq
 800a534:	68ec      	ldreq	r4, [r5, #12]
 800a536:	e7e6      	b.n	800a506 <__swsetup_r+0x1e>
 800a538:	0758      	lsls	r0, r3, #29
 800a53a:	d512      	bpl.n	800a562 <__swsetup_r+0x7a>
 800a53c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a53e:	b141      	cbz	r1, 800a552 <__swsetup_r+0x6a>
 800a540:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a544:	4299      	cmp	r1, r3
 800a546:	d002      	beq.n	800a54e <__swsetup_r+0x66>
 800a548:	4630      	mov	r0, r6
 800a54a:	f002 f92b 	bl	800c7a4 <_free_r>
 800a54e:	2300      	movs	r3, #0
 800a550:	6363      	str	r3, [r4, #52]	; 0x34
 800a552:	89a3      	ldrh	r3, [r4, #12]
 800a554:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a558:	81a3      	strh	r3, [r4, #12]
 800a55a:	2300      	movs	r3, #0
 800a55c:	6063      	str	r3, [r4, #4]
 800a55e:	6923      	ldr	r3, [r4, #16]
 800a560:	6023      	str	r3, [r4, #0]
 800a562:	89a3      	ldrh	r3, [r4, #12]
 800a564:	f043 0308 	orr.w	r3, r3, #8
 800a568:	81a3      	strh	r3, [r4, #12]
 800a56a:	6923      	ldr	r3, [r4, #16]
 800a56c:	b94b      	cbnz	r3, 800a582 <__swsetup_r+0x9a>
 800a56e:	89a3      	ldrh	r3, [r4, #12]
 800a570:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a574:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a578:	d003      	beq.n	800a582 <__swsetup_r+0x9a>
 800a57a:	4621      	mov	r1, r4
 800a57c:	4630      	mov	r0, r6
 800a57e:	f001 fbed 	bl	800bd5c <__smakebuf_r>
 800a582:	89a0      	ldrh	r0, [r4, #12]
 800a584:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a588:	f010 0301 	ands.w	r3, r0, #1
 800a58c:	d00a      	beq.n	800a5a4 <__swsetup_r+0xbc>
 800a58e:	2300      	movs	r3, #0
 800a590:	60a3      	str	r3, [r4, #8]
 800a592:	6963      	ldr	r3, [r4, #20]
 800a594:	425b      	negs	r3, r3
 800a596:	61a3      	str	r3, [r4, #24]
 800a598:	6923      	ldr	r3, [r4, #16]
 800a59a:	b943      	cbnz	r3, 800a5ae <__swsetup_r+0xc6>
 800a59c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a5a0:	d1ba      	bne.n	800a518 <__swsetup_r+0x30>
 800a5a2:	bd70      	pop	{r4, r5, r6, pc}
 800a5a4:	0781      	lsls	r1, r0, #30
 800a5a6:	bf58      	it	pl
 800a5a8:	6963      	ldrpl	r3, [r4, #20]
 800a5aa:	60a3      	str	r3, [r4, #8]
 800a5ac:	e7f4      	b.n	800a598 <__swsetup_r+0xb0>
 800a5ae:	2000      	movs	r0, #0
 800a5b0:	e7f7      	b.n	800a5a2 <__swsetup_r+0xba>
 800a5b2:	bf00      	nop
 800a5b4:	20000014 	.word	0x20000014
 800a5b8:	0800e750 	.word	0x0800e750
 800a5bc:	0800e770 	.word	0x0800e770
 800a5c0:	0800e730 	.word	0x0800e730

0800a5c4 <quorem>:
 800a5c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5c8:	6903      	ldr	r3, [r0, #16]
 800a5ca:	690c      	ldr	r4, [r1, #16]
 800a5cc:	42a3      	cmp	r3, r4
 800a5ce:	4607      	mov	r7, r0
 800a5d0:	f2c0 8081 	blt.w	800a6d6 <quorem+0x112>
 800a5d4:	3c01      	subs	r4, #1
 800a5d6:	f101 0814 	add.w	r8, r1, #20
 800a5da:	f100 0514 	add.w	r5, r0, #20
 800a5de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a5e2:	9301      	str	r3, [sp, #4]
 800a5e4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a5e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a5ec:	3301      	adds	r3, #1
 800a5ee:	429a      	cmp	r2, r3
 800a5f0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a5f4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a5f8:	fbb2 f6f3 	udiv	r6, r2, r3
 800a5fc:	d331      	bcc.n	800a662 <quorem+0x9e>
 800a5fe:	f04f 0e00 	mov.w	lr, #0
 800a602:	4640      	mov	r0, r8
 800a604:	46ac      	mov	ip, r5
 800a606:	46f2      	mov	sl, lr
 800a608:	f850 2b04 	ldr.w	r2, [r0], #4
 800a60c:	b293      	uxth	r3, r2
 800a60e:	fb06 e303 	mla	r3, r6, r3, lr
 800a612:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a616:	b29b      	uxth	r3, r3
 800a618:	ebaa 0303 	sub.w	r3, sl, r3
 800a61c:	0c12      	lsrs	r2, r2, #16
 800a61e:	f8dc a000 	ldr.w	sl, [ip]
 800a622:	fb06 e202 	mla	r2, r6, r2, lr
 800a626:	fa13 f38a 	uxtah	r3, r3, sl
 800a62a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a62e:	fa1f fa82 	uxth.w	sl, r2
 800a632:	f8dc 2000 	ldr.w	r2, [ip]
 800a636:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800a63a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a63e:	b29b      	uxth	r3, r3
 800a640:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a644:	4581      	cmp	r9, r0
 800a646:	f84c 3b04 	str.w	r3, [ip], #4
 800a64a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a64e:	d2db      	bcs.n	800a608 <quorem+0x44>
 800a650:	f855 300b 	ldr.w	r3, [r5, fp]
 800a654:	b92b      	cbnz	r3, 800a662 <quorem+0x9e>
 800a656:	9b01      	ldr	r3, [sp, #4]
 800a658:	3b04      	subs	r3, #4
 800a65a:	429d      	cmp	r5, r3
 800a65c:	461a      	mov	r2, r3
 800a65e:	d32e      	bcc.n	800a6be <quorem+0xfa>
 800a660:	613c      	str	r4, [r7, #16]
 800a662:	4638      	mov	r0, r7
 800a664:	f001 fe9c 	bl	800c3a0 <__mcmp>
 800a668:	2800      	cmp	r0, #0
 800a66a:	db24      	blt.n	800a6b6 <quorem+0xf2>
 800a66c:	3601      	adds	r6, #1
 800a66e:	4628      	mov	r0, r5
 800a670:	f04f 0c00 	mov.w	ip, #0
 800a674:	f858 2b04 	ldr.w	r2, [r8], #4
 800a678:	f8d0 e000 	ldr.w	lr, [r0]
 800a67c:	b293      	uxth	r3, r2
 800a67e:	ebac 0303 	sub.w	r3, ip, r3
 800a682:	0c12      	lsrs	r2, r2, #16
 800a684:	fa13 f38e 	uxtah	r3, r3, lr
 800a688:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a68c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a690:	b29b      	uxth	r3, r3
 800a692:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a696:	45c1      	cmp	r9, r8
 800a698:	f840 3b04 	str.w	r3, [r0], #4
 800a69c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a6a0:	d2e8      	bcs.n	800a674 <quorem+0xb0>
 800a6a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a6a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a6aa:	b922      	cbnz	r2, 800a6b6 <quorem+0xf2>
 800a6ac:	3b04      	subs	r3, #4
 800a6ae:	429d      	cmp	r5, r3
 800a6b0:	461a      	mov	r2, r3
 800a6b2:	d30a      	bcc.n	800a6ca <quorem+0x106>
 800a6b4:	613c      	str	r4, [r7, #16]
 800a6b6:	4630      	mov	r0, r6
 800a6b8:	b003      	add	sp, #12
 800a6ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6be:	6812      	ldr	r2, [r2, #0]
 800a6c0:	3b04      	subs	r3, #4
 800a6c2:	2a00      	cmp	r2, #0
 800a6c4:	d1cc      	bne.n	800a660 <quorem+0x9c>
 800a6c6:	3c01      	subs	r4, #1
 800a6c8:	e7c7      	b.n	800a65a <quorem+0x96>
 800a6ca:	6812      	ldr	r2, [r2, #0]
 800a6cc:	3b04      	subs	r3, #4
 800a6ce:	2a00      	cmp	r2, #0
 800a6d0:	d1f0      	bne.n	800a6b4 <quorem+0xf0>
 800a6d2:	3c01      	subs	r4, #1
 800a6d4:	e7eb      	b.n	800a6ae <quorem+0xea>
 800a6d6:	2000      	movs	r0, #0
 800a6d8:	e7ee      	b.n	800a6b8 <quorem+0xf4>
 800a6da:	0000      	movs	r0, r0
 800a6dc:	0000      	movs	r0, r0
	...

0800a6e0 <_dtoa_r>:
 800a6e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6e4:	ed2d 8b02 	vpush	{d8}
 800a6e8:	ec57 6b10 	vmov	r6, r7, d0
 800a6ec:	b095      	sub	sp, #84	; 0x54
 800a6ee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a6f0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a6f4:	9105      	str	r1, [sp, #20]
 800a6f6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800a6fa:	4604      	mov	r4, r0
 800a6fc:	9209      	str	r2, [sp, #36]	; 0x24
 800a6fe:	930f      	str	r3, [sp, #60]	; 0x3c
 800a700:	b975      	cbnz	r5, 800a720 <_dtoa_r+0x40>
 800a702:	2010      	movs	r0, #16
 800a704:	f001 fb6a 	bl	800bddc <malloc>
 800a708:	4602      	mov	r2, r0
 800a70a:	6260      	str	r0, [r4, #36]	; 0x24
 800a70c:	b920      	cbnz	r0, 800a718 <_dtoa_r+0x38>
 800a70e:	4bb2      	ldr	r3, [pc, #712]	; (800a9d8 <_dtoa_r+0x2f8>)
 800a710:	21ea      	movs	r1, #234	; 0xea
 800a712:	48b2      	ldr	r0, [pc, #712]	; (800a9dc <_dtoa_r+0x2fc>)
 800a714:	f002 fc22 	bl	800cf5c <__assert_func>
 800a718:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a71c:	6005      	str	r5, [r0, #0]
 800a71e:	60c5      	str	r5, [r0, #12]
 800a720:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a722:	6819      	ldr	r1, [r3, #0]
 800a724:	b151      	cbz	r1, 800a73c <_dtoa_r+0x5c>
 800a726:	685a      	ldr	r2, [r3, #4]
 800a728:	604a      	str	r2, [r1, #4]
 800a72a:	2301      	movs	r3, #1
 800a72c:	4093      	lsls	r3, r2
 800a72e:	608b      	str	r3, [r1, #8]
 800a730:	4620      	mov	r0, r4
 800a732:	f001 fbad 	bl	800be90 <_Bfree>
 800a736:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a738:	2200      	movs	r2, #0
 800a73a:	601a      	str	r2, [r3, #0]
 800a73c:	1e3b      	subs	r3, r7, #0
 800a73e:	bfb9      	ittee	lt
 800a740:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a744:	9303      	strlt	r3, [sp, #12]
 800a746:	2300      	movge	r3, #0
 800a748:	f8c8 3000 	strge.w	r3, [r8]
 800a74c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800a750:	4ba3      	ldr	r3, [pc, #652]	; (800a9e0 <_dtoa_r+0x300>)
 800a752:	bfbc      	itt	lt
 800a754:	2201      	movlt	r2, #1
 800a756:	f8c8 2000 	strlt.w	r2, [r8]
 800a75a:	ea33 0309 	bics.w	r3, r3, r9
 800a75e:	d11b      	bne.n	800a798 <_dtoa_r+0xb8>
 800a760:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a762:	f242 730f 	movw	r3, #9999	; 0x270f
 800a766:	6013      	str	r3, [r2, #0]
 800a768:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a76c:	4333      	orrs	r3, r6
 800a76e:	f000 857a 	beq.w	800b266 <_dtoa_r+0xb86>
 800a772:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a774:	b963      	cbnz	r3, 800a790 <_dtoa_r+0xb0>
 800a776:	4b9b      	ldr	r3, [pc, #620]	; (800a9e4 <_dtoa_r+0x304>)
 800a778:	e024      	b.n	800a7c4 <_dtoa_r+0xe4>
 800a77a:	4b9b      	ldr	r3, [pc, #620]	; (800a9e8 <_dtoa_r+0x308>)
 800a77c:	9300      	str	r3, [sp, #0]
 800a77e:	3308      	adds	r3, #8
 800a780:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a782:	6013      	str	r3, [r2, #0]
 800a784:	9800      	ldr	r0, [sp, #0]
 800a786:	b015      	add	sp, #84	; 0x54
 800a788:	ecbd 8b02 	vpop	{d8}
 800a78c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a790:	4b94      	ldr	r3, [pc, #592]	; (800a9e4 <_dtoa_r+0x304>)
 800a792:	9300      	str	r3, [sp, #0]
 800a794:	3303      	adds	r3, #3
 800a796:	e7f3      	b.n	800a780 <_dtoa_r+0xa0>
 800a798:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a79c:	2200      	movs	r2, #0
 800a79e:	ec51 0b17 	vmov	r0, r1, d7
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800a7a8:	f7f6 f98e 	bl	8000ac8 <__aeabi_dcmpeq>
 800a7ac:	4680      	mov	r8, r0
 800a7ae:	b158      	cbz	r0, 800a7c8 <_dtoa_r+0xe8>
 800a7b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a7b2:	2301      	movs	r3, #1
 800a7b4:	6013      	str	r3, [r2, #0]
 800a7b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	f000 8551 	beq.w	800b260 <_dtoa_r+0xb80>
 800a7be:	488b      	ldr	r0, [pc, #556]	; (800a9ec <_dtoa_r+0x30c>)
 800a7c0:	6018      	str	r0, [r3, #0]
 800a7c2:	1e43      	subs	r3, r0, #1
 800a7c4:	9300      	str	r3, [sp, #0]
 800a7c6:	e7dd      	b.n	800a784 <_dtoa_r+0xa4>
 800a7c8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a7cc:	aa12      	add	r2, sp, #72	; 0x48
 800a7ce:	a913      	add	r1, sp, #76	; 0x4c
 800a7d0:	4620      	mov	r0, r4
 800a7d2:	f001 ff05 	bl	800c5e0 <__d2b>
 800a7d6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a7da:	4683      	mov	fp, r0
 800a7dc:	2d00      	cmp	r5, #0
 800a7de:	d07c      	beq.n	800a8da <_dtoa_r+0x1fa>
 800a7e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a7e2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800a7e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a7ea:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800a7ee:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a7f2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a7f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a7fa:	4b7d      	ldr	r3, [pc, #500]	; (800a9f0 <_dtoa_r+0x310>)
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	4630      	mov	r0, r6
 800a800:	4639      	mov	r1, r7
 800a802:	f7f5 fd41 	bl	8000288 <__aeabi_dsub>
 800a806:	a36e      	add	r3, pc, #440	; (adr r3, 800a9c0 <_dtoa_r+0x2e0>)
 800a808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a80c:	f7f5 fef4 	bl	80005f8 <__aeabi_dmul>
 800a810:	a36d      	add	r3, pc, #436	; (adr r3, 800a9c8 <_dtoa_r+0x2e8>)
 800a812:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a816:	f7f5 fd39 	bl	800028c <__adddf3>
 800a81a:	4606      	mov	r6, r0
 800a81c:	4628      	mov	r0, r5
 800a81e:	460f      	mov	r7, r1
 800a820:	f7f5 fe80 	bl	8000524 <__aeabi_i2d>
 800a824:	a36a      	add	r3, pc, #424	; (adr r3, 800a9d0 <_dtoa_r+0x2f0>)
 800a826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a82a:	f7f5 fee5 	bl	80005f8 <__aeabi_dmul>
 800a82e:	4602      	mov	r2, r0
 800a830:	460b      	mov	r3, r1
 800a832:	4630      	mov	r0, r6
 800a834:	4639      	mov	r1, r7
 800a836:	f7f5 fd29 	bl	800028c <__adddf3>
 800a83a:	4606      	mov	r6, r0
 800a83c:	460f      	mov	r7, r1
 800a83e:	f7f6 f98b 	bl	8000b58 <__aeabi_d2iz>
 800a842:	2200      	movs	r2, #0
 800a844:	4682      	mov	sl, r0
 800a846:	2300      	movs	r3, #0
 800a848:	4630      	mov	r0, r6
 800a84a:	4639      	mov	r1, r7
 800a84c:	f7f6 f946 	bl	8000adc <__aeabi_dcmplt>
 800a850:	b148      	cbz	r0, 800a866 <_dtoa_r+0x186>
 800a852:	4650      	mov	r0, sl
 800a854:	f7f5 fe66 	bl	8000524 <__aeabi_i2d>
 800a858:	4632      	mov	r2, r6
 800a85a:	463b      	mov	r3, r7
 800a85c:	f7f6 f934 	bl	8000ac8 <__aeabi_dcmpeq>
 800a860:	b908      	cbnz	r0, 800a866 <_dtoa_r+0x186>
 800a862:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a866:	f1ba 0f16 	cmp.w	sl, #22
 800a86a:	d854      	bhi.n	800a916 <_dtoa_r+0x236>
 800a86c:	4b61      	ldr	r3, [pc, #388]	; (800a9f4 <_dtoa_r+0x314>)
 800a86e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a872:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a876:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a87a:	f7f6 f92f 	bl	8000adc <__aeabi_dcmplt>
 800a87e:	2800      	cmp	r0, #0
 800a880:	d04b      	beq.n	800a91a <_dtoa_r+0x23a>
 800a882:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a886:	2300      	movs	r3, #0
 800a888:	930e      	str	r3, [sp, #56]	; 0x38
 800a88a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a88c:	1b5d      	subs	r5, r3, r5
 800a88e:	1e6b      	subs	r3, r5, #1
 800a890:	9304      	str	r3, [sp, #16]
 800a892:	bf43      	ittte	mi
 800a894:	2300      	movmi	r3, #0
 800a896:	f1c5 0801 	rsbmi	r8, r5, #1
 800a89a:	9304      	strmi	r3, [sp, #16]
 800a89c:	f04f 0800 	movpl.w	r8, #0
 800a8a0:	f1ba 0f00 	cmp.w	sl, #0
 800a8a4:	db3b      	blt.n	800a91e <_dtoa_r+0x23e>
 800a8a6:	9b04      	ldr	r3, [sp, #16]
 800a8a8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800a8ac:	4453      	add	r3, sl
 800a8ae:	9304      	str	r3, [sp, #16]
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	9306      	str	r3, [sp, #24]
 800a8b4:	9b05      	ldr	r3, [sp, #20]
 800a8b6:	2b09      	cmp	r3, #9
 800a8b8:	d869      	bhi.n	800a98e <_dtoa_r+0x2ae>
 800a8ba:	2b05      	cmp	r3, #5
 800a8bc:	bfc4      	itt	gt
 800a8be:	3b04      	subgt	r3, #4
 800a8c0:	9305      	strgt	r3, [sp, #20]
 800a8c2:	9b05      	ldr	r3, [sp, #20]
 800a8c4:	f1a3 0302 	sub.w	r3, r3, #2
 800a8c8:	bfcc      	ite	gt
 800a8ca:	2500      	movgt	r5, #0
 800a8cc:	2501      	movle	r5, #1
 800a8ce:	2b03      	cmp	r3, #3
 800a8d0:	d869      	bhi.n	800a9a6 <_dtoa_r+0x2c6>
 800a8d2:	e8df f003 	tbb	[pc, r3]
 800a8d6:	4e2c      	.short	0x4e2c
 800a8d8:	5a4c      	.short	0x5a4c
 800a8da:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800a8de:	441d      	add	r5, r3
 800a8e0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a8e4:	2b20      	cmp	r3, #32
 800a8e6:	bfc1      	itttt	gt
 800a8e8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a8ec:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a8f0:	fa09 f303 	lslgt.w	r3, r9, r3
 800a8f4:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a8f8:	bfda      	itte	le
 800a8fa:	f1c3 0320 	rsble	r3, r3, #32
 800a8fe:	fa06 f003 	lslle.w	r0, r6, r3
 800a902:	4318      	orrgt	r0, r3
 800a904:	f7f5 fdfe 	bl	8000504 <__aeabi_ui2d>
 800a908:	2301      	movs	r3, #1
 800a90a:	4606      	mov	r6, r0
 800a90c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a910:	3d01      	subs	r5, #1
 800a912:	9310      	str	r3, [sp, #64]	; 0x40
 800a914:	e771      	b.n	800a7fa <_dtoa_r+0x11a>
 800a916:	2301      	movs	r3, #1
 800a918:	e7b6      	b.n	800a888 <_dtoa_r+0x1a8>
 800a91a:	900e      	str	r0, [sp, #56]	; 0x38
 800a91c:	e7b5      	b.n	800a88a <_dtoa_r+0x1aa>
 800a91e:	f1ca 0300 	rsb	r3, sl, #0
 800a922:	9306      	str	r3, [sp, #24]
 800a924:	2300      	movs	r3, #0
 800a926:	eba8 080a 	sub.w	r8, r8, sl
 800a92a:	930d      	str	r3, [sp, #52]	; 0x34
 800a92c:	e7c2      	b.n	800a8b4 <_dtoa_r+0x1d4>
 800a92e:	2300      	movs	r3, #0
 800a930:	9308      	str	r3, [sp, #32]
 800a932:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a934:	2b00      	cmp	r3, #0
 800a936:	dc39      	bgt.n	800a9ac <_dtoa_r+0x2cc>
 800a938:	f04f 0901 	mov.w	r9, #1
 800a93c:	f8cd 9004 	str.w	r9, [sp, #4]
 800a940:	464b      	mov	r3, r9
 800a942:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a946:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a948:	2200      	movs	r2, #0
 800a94a:	6042      	str	r2, [r0, #4]
 800a94c:	2204      	movs	r2, #4
 800a94e:	f102 0614 	add.w	r6, r2, #20
 800a952:	429e      	cmp	r6, r3
 800a954:	6841      	ldr	r1, [r0, #4]
 800a956:	d92f      	bls.n	800a9b8 <_dtoa_r+0x2d8>
 800a958:	4620      	mov	r0, r4
 800a95a:	f001 fa59 	bl	800be10 <_Balloc>
 800a95e:	9000      	str	r0, [sp, #0]
 800a960:	2800      	cmp	r0, #0
 800a962:	d14b      	bne.n	800a9fc <_dtoa_r+0x31c>
 800a964:	4b24      	ldr	r3, [pc, #144]	; (800a9f8 <_dtoa_r+0x318>)
 800a966:	4602      	mov	r2, r0
 800a968:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a96c:	e6d1      	b.n	800a712 <_dtoa_r+0x32>
 800a96e:	2301      	movs	r3, #1
 800a970:	e7de      	b.n	800a930 <_dtoa_r+0x250>
 800a972:	2300      	movs	r3, #0
 800a974:	9308      	str	r3, [sp, #32]
 800a976:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a978:	eb0a 0903 	add.w	r9, sl, r3
 800a97c:	f109 0301 	add.w	r3, r9, #1
 800a980:	2b01      	cmp	r3, #1
 800a982:	9301      	str	r3, [sp, #4]
 800a984:	bfb8      	it	lt
 800a986:	2301      	movlt	r3, #1
 800a988:	e7dd      	b.n	800a946 <_dtoa_r+0x266>
 800a98a:	2301      	movs	r3, #1
 800a98c:	e7f2      	b.n	800a974 <_dtoa_r+0x294>
 800a98e:	2501      	movs	r5, #1
 800a990:	2300      	movs	r3, #0
 800a992:	9305      	str	r3, [sp, #20]
 800a994:	9508      	str	r5, [sp, #32]
 800a996:	f04f 39ff 	mov.w	r9, #4294967295
 800a99a:	2200      	movs	r2, #0
 800a99c:	f8cd 9004 	str.w	r9, [sp, #4]
 800a9a0:	2312      	movs	r3, #18
 800a9a2:	9209      	str	r2, [sp, #36]	; 0x24
 800a9a4:	e7cf      	b.n	800a946 <_dtoa_r+0x266>
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	9308      	str	r3, [sp, #32]
 800a9aa:	e7f4      	b.n	800a996 <_dtoa_r+0x2b6>
 800a9ac:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800a9b0:	f8cd 9004 	str.w	r9, [sp, #4]
 800a9b4:	464b      	mov	r3, r9
 800a9b6:	e7c6      	b.n	800a946 <_dtoa_r+0x266>
 800a9b8:	3101      	adds	r1, #1
 800a9ba:	6041      	str	r1, [r0, #4]
 800a9bc:	0052      	lsls	r2, r2, #1
 800a9be:	e7c6      	b.n	800a94e <_dtoa_r+0x26e>
 800a9c0:	636f4361 	.word	0x636f4361
 800a9c4:	3fd287a7 	.word	0x3fd287a7
 800a9c8:	8b60c8b3 	.word	0x8b60c8b3
 800a9cc:	3fc68a28 	.word	0x3fc68a28
 800a9d0:	509f79fb 	.word	0x509f79fb
 800a9d4:	3fd34413 	.word	0x3fd34413
 800a9d8:	0800e6a6 	.word	0x0800e6a6
 800a9dc:	0800e6bd 	.word	0x0800e6bd
 800a9e0:	7ff00000 	.word	0x7ff00000
 800a9e4:	0800e6a2 	.word	0x0800e6a2
 800a9e8:	0800e699 	.word	0x0800e699
 800a9ec:	0800e519 	.word	0x0800e519
 800a9f0:	3ff80000 	.word	0x3ff80000
 800a9f4:	0800e898 	.word	0x0800e898
 800a9f8:	0800e71c 	.word	0x0800e71c
 800a9fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a9fe:	9a00      	ldr	r2, [sp, #0]
 800aa00:	601a      	str	r2, [r3, #0]
 800aa02:	9b01      	ldr	r3, [sp, #4]
 800aa04:	2b0e      	cmp	r3, #14
 800aa06:	f200 80ad 	bhi.w	800ab64 <_dtoa_r+0x484>
 800aa0a:	2d00      	cmp	r5, #0
 800aa0c:	f000 80aa 	beq.w	800ab64 <_dtoa_r+0x484>
 800aa10:	f1ba 0f00 	cmp.w	sl, #0
 800aa14:	dd36      	ble.n	800aa84 <_dtoa_r+0x3a4>
 800aa16:	4ac3      	ldr	r2, [pc, #780]	; (800ad24 <_dtoa_r+0x644>)
 800aa18:	f00a 030f 	and.w	r3, sl, #15
 800aa1c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800aa20:	ed93 7b00 	vldr	d7, [r3]
 800aa24:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800aa28:	ea4f 172a 	mov.w	r7, sl, asr #4
 800aa2c:	eeb0 8a47 	vmov.f32	s16, s14
 800aa30:	eef0 8a67 	vmov.f32	s17, s15
 800aa34:	d016      	beq.n	800aa64 <_dtoa_r+0x384>
 800aa36:	4bbc      	ldr	r3, [pc, #752]	; (800ad28 <_dtoa_r+0x648>)
 800aa38:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800aa3c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800aa40:	f7f5 ff04 	bl	800084c <__aeabi_ddiv>
 800aa44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa48:	f007 070f 	and.w	r7, r7, #15
 800aa4c:	2503      	movs	r5, #3
 800aa4e:	4eb6      	ldr	r6, [pc, #728]	; (800ad28 <_dtoa_r+0x648>)
 800aa50:	b957      	cbnz	r7, 800aa68 <_dtoa_r+0x388>
 800aa52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa56:	ec53 2b18 	vmov	r2, r3, d8
 800aa5a:	f7f5 fef7 	bl	800084c <__aeabi_ddiv>
 800aa5e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa62:	e029      	b.n	800aab8 <_dtoa_r+0x3d8>
 800aa64:	2502      	movs	r5, #2
 800aa66:	e7f2      	b.n	800aa4e <_dtoa_r+0x36e>
 800aa68:	07f9      	lsls	r1, r7, #31
 800aa6a:	d508      	bpl.n	800aa7e <_dtoa_r+0x39e>
 800aa6c:	ec51 0b18 	vmov	r0, r1, d8
 800aa70:	e9d6 2300 	ldrd	r2, r3, [r6]
 800aa74:	f7f5 fdc0 	bl	80005f8 <__aeabi_dmul>
 800aa78:	ec41 0b18 	vmov	d8, r0, r1
 800aa7c:	3501      	adds	r5, #1
 800aa7e:	107f      	asrs	r7, r7, #1
 800aa80:	3608      	adds	r6, #8
 800aa82:	e7e5      	b.n	800aa50 <_dtoa_r+0x370>
 800aa84:	f000 80a6 	beq.w	800abd4 <_dtoa_r+0x4f4>
 800aa88:	f1ca 0600 	rsb	r6, sl, #0
 800aa8c:	4ba5      	ldr	r3, [pc, #660]	; (800ad24 <_dtoa_r+0x644>)
 800aa8e:	4fa6      	ldr	r7, [pc, #664]	; (800ad28 <_dtoa_r+0x648>)
 800aa90:	f006 020f 	and.w	r2, r6, #15
 800aa94:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa9c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800aaa0:	f7f5 fdaa 	bl	80005f8 <__aeabi_dmul>
 800aaa4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aaa8:	1136      	asrs	r6, r6, #4
 800aaaa:	2300      	movs	r3, #0
 800aaac:	2502      	movs	r5, #2
 800aaae:	2e00      	cmp	r6, #0
 800aab0:	f040 8085 	bne.w	800abbe <_dtoa_r+0x4de>
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d1d2      	bne.n	800aa5e <_dtoa_r+0x37e>
 800aab8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	f000 808c 	beq.w	800abd8 <_dtoa_r+0x4f8>
 800aac0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800aac4:	4b99      	ldr	r3, [pc, #612]	; (800ad2c <_dtoa_r+0x64c>)
 800aac6:	2200      	movs	r2, #0
 800aac8:	4630      	mov	r0, r6
 800aaca:	4639      	mov	r1, r7
 800aacc:	f7f6 f806 	bl	8000adc <__aeabi_dcmplt>
 800aad0:	2800      	cmp	r0, #0
 800aad2:	f000 8081 	beq.w	800abd8 <_dtoa_r+0x4f8>
 800aad6:	9b01      	ldr	r3, [sp, #4]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d07d      	beq.n	800abd8 <_dtoa_r+0x4f8>
 800aadc:	f1b9 0f00 	cmp.w	r9, #0
 800aae0:	dd3c      	ble.n	800ab5c <_dtoa_r+0x47c>
 800aae2:	f10a 33ff 	add.w	r3, sl, #4294967295
 800aae6:	9307      	str	r3, [sp, #28]
 800aae8:	2200      	movs	r2, #0
 800aaea:	4b91      	ldr	r3, [pc, #580]	; (800ad30 <_dtoa_r+0x650>)
 800aaec:	4630      	mov	r0, r6
 800aaee:	4639      	mov	r1, r7
 800aaf0:	f7f5 fd82 	bl	80005f8 <__aeabi_dmul>
 800aaf4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aaf8:	3501      	adds	r5, #1
 800aafa:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800aafe:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ab02:	4628      	mov	r0, r5
 800ab04:	f7f5 fd0e 	bl	8000524 <__aeabi_i2d>
 800ab08:	4632      	mov	r2, r6
 800ab0a:	463b      	mov	r3, r7
 800ab0c:	f7f5 fd74 	bl	80005f8 <__aeabi_dmul>
 800ab10:	4b88      	ldr	r3, [pc, #544]	; (800ad34 <_dtoa_r+0x654>)
 800ab12:	2200      	movs	r2, #0
 800ab14:	f7f5 fbba 	bl	800028c <__adddf3>
 800ab18:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800ab1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab20:	9303      	str	r3, [sp, #12]
 800ab22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d15c      	bne.n	800abe2 <_dtoa_r+0x502>
 800ab28:	4b83      	ldr	r3, [pc, #524]	; (800ad38 <_dtoa_r+0x658>)
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	4630      	mov	r0, r6
 800ab2e:	4639      	mov	r1, r7
 800ab30:	f7f5 fbaa 	bl	8000288 <__aeabi_dsub>
 800ab34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ab38:	4606      	mov	r6, r0
 800ab3a:	460f      	mov	r7, r1
 800ab3c:	f7f5 ffec 	bl	8000b18 <__aeabi_dcmpgt>
 800ab40:	2800      	cmp	r0, #0
 800ab42:	f040 8296 	bne.w	800b072 <_dtoa_r+0x992>
 800ab46:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800ab4a:	4630      	mov	r0, r6
 800ab4c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ab50:	4639      	mov	r1, r7
 800ab52:	f7f5 ffc3 	bl	8000adc <__aeabi_dcmplt>
 800ab56:	2800      	cmp	r0, #0
 800ab58:	f040 8288 	bne.w	800b06c <_dtoa_r+0x98c>
 800ab5c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ab60:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ab64:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	f2c0 8158 	blt.w	800ae1c <_dtoa_r+0x73c>
 800ab6c:	f1ba 0f0e 	cmp.w	sl, #14
 800ab70:	f300 8154 	bgt.w	800ae1c <_dtoa_r+0x73c>
 800ab74:	4b6b      	ldr	r3, [pc, #428]	; (800ad24 <_dtoa_r+0x644>)
 800ab76:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ab7a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ab7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	f280 80e3 	bge.w	800ad4c <_dtoa_r+0x66c>
 800ab86:	9b01      	ldr	r3, [sp, #4]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	f300 80df 	bgt.w	800ad4c <_dtoa_r+0x66c>
 800ab8e:	f040 826d 	bne.w	800b06c <_dtoa_r+0x98c>
 800ab92:	4b69      	ldr	r3, [pc, #420]	; (800ad38 <_dtoa_r+0x658>)
 800ab94:	2200      	movs	r2, #0
 800ab96:	4640      	mov	r0, r8
 800ab98:	4649      	mov	r1, r9
 800ab9a:	f7f5 fd2d 	bl	80005f8 <__aeabi_dmul>
 800ab9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aba2:	f7f5 ffaf 	bl	8000b04 <__aeabi_dcmpge>
 800aba6:	9e01      	ldr	r6, [sp, #4]
 800aba8:	4637      	mov	r7, r6
 800abaa:	2800      	cmp	r0, #0
 800abac:	f040 8243 	bne.w	800b036 <_dtoa_r+0x956>
 800abb0:	9d00      	ldr	r5, [sp, #0]
 800abb2:	2331      	movs	r3, #49	; 0x31
 800abb4:	f805 3b01 	strb.w	r3, [r5], #1
 800abb8:	f10a 0a01 	add.w	sl, sl, #1
 800abbc:	e23f      	b.n	800b03e <_dtoa_r+0x95e>
 800abbe:	07f2      	lsls	r2, r6, #31
 800abc0:	d505      	bpl.n	800abce <_dtoa_r+0x4ee>
 800abc2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800abc6:	f7f5 fd17 	bl	80005f8 <__aeabi_dmul>
 800abca:	3501      	adds	r5, #1
 800abcc:	2301      	movs	r3, #1
 800abce:	1076      	asrs	r6, r6, #1
 800abd0:	3708      	adds	r7, #8
 800abd2:	e76c      	b.n	800aaae <_dtoa_r+0x3ce>
 800abd4:	2502      	movs	r5, #2
 800abd6:	e76f      	b.n	800aab8 <_dtoa_r+0x3d8>
 800abd8:	9b01      	ldr	r3, [sp, #4]
 800abda:	f8cd a01c 	str.w	sl, [sp, #28]
 800abde:	930c      	str	r3, [sp, #48]	; 0x30
 800abe0:	e78d      	b.n	800aafe <_dtoa_r+0x41e>
 800abe2:	9900      	ldr	r1, [sp, #0]
 800abe4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800abe6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800abe8:	4b4e      	ldr	r3, [pc, #312]	; (800ad24 <_dtoa_r+0x644>)
 800abea:	ed9d 7b02 	vldr	d7, [sp, #8]
 800abee:	4401      	add	r1, r0
 800abf0:	9102      	str	r1, [sp, #8]
 800abf2:	9908      	ldr	r1, [sp, #32]
 800abf4:	eeb0 8a47 	vmov.f32	s16, s14
 800abf8:	eef0 8a67 	vmov.f32	s17, s15
 800abfc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ac00:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ac04:	2900      	cmp	r1, #0
 800ac06:	d045      	beq.n	800ac94 <_dtoa_r+0x5b4>
 800ac08:	494c      	ldr	r1, [pc, #304]	; (800ad3c <_dtoa_r+0x65c>)
 800ac0a:	2000      	movs	r0, #0
 800ac0c:	f7f5 fe1e 	bl	800084c <__aeabi_ddiv>
 800ac10:	ec53 2b18 	vmov	r2, r3, d8
 800ac14:	f7f5 fb38 	bl	8000288 <__aeabi_dsub>
 800ac18:	9d00      	ldr	r5, [sp, #0]
 800ac1a:	ec41 0b18 	vmov	d8, r0, r1
 800ac1e:	4639      	mov	r1, r7
 800ac20:	4630      	mov	r0, r6
 800ac22:	f7f5 ff99 	bl	8000b58 <__aeabi_d2iz>
 800ac26:	900c      	str	r0, [sp, #48]	; 0x30
 800ac28:	f7f5 fc7c 	bl	8000524 <__aeabi_i2d>
 800ac2c:	4602      	mov	r2, r0
 800ac2e:	460b      	mov	r3, r1
 800ac30:	4630      	mov	r0, r6
 800ac32:	4639      	mov	r1, r7
 800ac34:	f7f5 fb28 	bl	8000288 <__aeabi_dsub>
 800ac38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac3a:	3330      	adds	r3, #48	; 0x30
 800ac3c:	f805 3b01 	strb.w	r3, [r5], #1
 800ac40:	ec53 2b18 	vmov	r2, r3, d8
 800ac44:	4606      	mov	r6, r0
 800ac46:	460f      	mov	r7, r1
 800ac48:	f7f5 ff48 	bl	8000adc <__aeabi_dcmplt>
 800ac4c:	2800      	cmp	r0, #0
 800ac4e:	d165      	bne.n	800ad1c <_dtoa_r+0x63c>
 800ac50:	4632      	mov	r2, r6
 800ac52:	463b      	mov	r3, r7
 800ac54:	4935      	ldr	r1, [pc, #212]	; (800ad2c <_dtoa_r+0x64c>)
 800ac56:	2000      	movs	r0, #0
 800ac58:	f7f5 fb16 	bl	8000288 <__aeabi_dsub>
 800ac5c:	ec53 2b18 	vmov	r2, r3, d8
 800ac60:	f7f5 ff3c 	bl	8000adc <__aeabi_dcmplt>
 800ac64:	2800      	cmp	r0, #0
 800ac66:	f040 80b9 	bne.w	800addc <_dtoa_r+0x6fc>
 800ac6a:	9b02      	ldr	r3, [sp, #8]
 800ac6c:	429d      	cmp	r5, r3
 800ac6e:	f43f af75 	beq.w	800ab5c <_dtoa_r+0x47c>
 800ac72:	4b2f      	ldr	r3, [pc, #188]	; (800ad30 <_dtoa_r+0x650>)
 800ac74:	ec51 0b18 	vmov	r0, r1, d8
 800ac78:	2200      	movs	r2, #0
 800ac7a:	f7f5 fcbd 	bl	80005f8 <__aeabi_dmul>
 800ac7e:	4b2c      	ldr	r3, [pc, #176]	; (800ad30 <_dtoa_r+0x650>)
 800ac80:	ec41 0b18 	vmov	d8, r0, r1
 800ac84:	2200      	movs	r2, #0
 800ac86:	4630      	mov	r0, r6
 800ac88:	4639      	mov	r1, r7
 800ac8a:	f7f5 fcb5 	bl	80005f8 <__aeabi_dmul>
 800ac8e:	4606      	mov	r6, r0
 800ac90:	460f      	mov	r7, r1
 800ac92:	e7c4      	b.n	800ac1e <_dtoa_r+0x53e>
 800ac94:	ec51 0b17 	vmov	r0, r1, d7
 800ac98:	f7f5 fcae 	bl	80005f8 <__aeabi_dmul>
 800ac9c:	9b02      	ldr	r3, [sp, #8]
 800ac9e:	9d00      	ldr	r5, [sp, #0]
 800aca0:	930c      	str	r3, [sp, #48]	; 0x30
 800aca2:	ec41 0b18 	vmov	d8, r0, r1
 800aca6:	4639      	mov	r1, r7
 800aca8:	4630      	mov	r0, r6
 800acaa:	f7f5 ff55 	bl	8000b58 <__aeabi_d2iz>
 800acae:	9011      	str	r0, [sp, #68]	; 0x44
 800acb0:	f7f5 fc38 	bl	8000524 <__aeabi_i2d>
 800acb4:	4602      	mov	r2, r0
 800acb6:	460b      	mov	r3, r1
 800acb8:	4630      	mov	r0, r6
 800acba:	4639      	mov	r1, r7
 800acbc:	f7f5 fae4 	bl	8000288 <__aeabi_dsub>
 800acc0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800acc2:	3330      	adds	r3, #48	; 0x30
 800acc4:	f805 3b01 	strb.w	r3, [r5], #1
 800acc8:	9b02      	ldr	r3, [sp, #8]
 800acca:	429d      	cmp	r5, r3
 800accc:	4606      	mov	r6, r0
 800acce:	460f      	mov	r7, r1
 800acd0:	f04f 0200 	mov.w	r2, #0
 800acd4:	d134      	bne.n	800ad40 <_dtoa_r+0x660>
 800acd6:	4b19      	ldr	r3, [pc, #100]	; (800ad3c <_dtoa_r+0x65c>)
 800acd8:	ec51 0b18 	vmov	r0, r1, d8
 800acdc:	f7f5 fad6 	bl	800028c <__adddf3>
 800ace0:	4602      	mov	r2, r0
 800ace2:	460b      	mov	r3, r1
 800ace4:	4630      	mov	r0, r6
 800ace6:	4639      	mov	r1, r7
 800ace8:	f7f5 ff16 	bl	8000b18 <__aeabi_dcmpgt>
 800acec:	2800      	cmp	r0, #0
 800acee:	d175      	bne.n	800addc <_dtoa_r+0x6fc>
 800acf0:	ec53 2b18 	vmov	r2, r3, d8
 800acf4:	4911      	ldr	r1, [pc, #68]	; (800ad3c <_dtoa_r+0x65c>)
 800acf6:	2000      	movs	r0, #0
 800acf8:	f7f5 fac6 	bl	8000288 <__aeabi_dsub>
 800acfc:	4602      	mov	r2, r0
 800acfe:	460b      	mov	r3, r1
 800ad00:	4630      	mov	r0, r6
 800ad02:	4639      	mov	r1, r7
 800ad04:	f7f5 feea 	bl	8000adc <__aeabi_dcmplt>
 800ad08:	2800      	cmp	r0, #0
 800ad0a:	f43f af27 	beq.w	800ab5c <_dtoa_r+0x47c>
 800ad0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ad10:	1e6b      	subs	r3, r5, #1
 800ad12:	930c      	str	r3, [sp, #48]	; 0x30
 800ad14:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ad18:	2b30      	cmp	r3, #48	; 0x30
 800ad1a:	d0f8      	beq.n	800ad0e <_dtoa_r+0x62e>
 800ad1c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800ad20:	e04a      	b.n	800adb8 <_dtoa_r+0x6d8>
 800ad22:	bf00      	nop
 800ad24:	0800e898 	.word	0x0800e898
 800ad28:	0800e870 	.word	0x0800e870
 800ad2c:	3ff00000 	.word	0x3ff00000
 800ad30:	40240000 	.word	0x40240000
 800ad34:	401c0000 	.word	0x401c0000
 800ad38:	40140000 	.word	0x40140000
 800ad3c:	3fe00000 	.word	0x3fe00000
 800ad40:	4baf      	ldr	r3, [pc, #700]	; (800b000 <_dtoa_r+0x920>)
 800ad42:	f7f5 fc59 	bl	80005f8 <__aeabi_dmul>
 800ad46:	4606      	mov	r6, r0
 800ad48:	460f      	mov	r7, r1
 800ad4a:	e7ac      	b.n	800aca6 <_dtoa_r+0x5c6>
 800ad4c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ad50:	9d00      	ldr	r5, [sp, #0]
 800ad52:	4642      	mov	r2, r8
 800ad54:	464b      	mov	r3, r9
 800ad56:	4630      	mov	r0, r6
 800ad58:	4639      	mov	r1, r7
 800ad5a:	f7f5 fd77 	bl	800084c <__aeabi_ddiv>
 800ad5e:	f7f5 fefb 	bl	8000b58 <__aeabi_d2iz>
 800ad62:	9002      	str	r0, [sp, #8]
 800ad64:	f7f5 fbde 	bl	8000524 <__aeabi_i2d>
 800ad68:	4642      	mov	r2, r8
 800ad6a:	464b      	mov	r3, r9
 800ad6c:	f7f5 fc44 	bl	80005f8 <__aeabi_dmul>
 800ad70:	4602      	mov	r2, r0
 800ad72:	460b      	mov	r3, r1
 800ad74:	4630      	mov	r0, r6
 800ad76:	4639      	mov	r1, r7
 800ad78:	f7f5 fa86 	bl	8000288 <__aeabi_dsub>
 800ad7c:	9e02      	ldr	r6, [sp, #8]
 800ad7e:	9f01      	ldr	r7, [sp, #4]
 800ad80:	3630      	adds	r6, #48	; 0x30
 800ad82:	f805 6b01 	strb.w	r6, [r5], #1
 800ad86:	9e00      	ldr	r6, [sp, #0]
 800ad88:	1bae      	subs	r6, r5, r6
 800ad8a:	42b7      	cmp	r7, r6
 800ad8c:	4602      	mov	r2, r0
 800ad8e:	460b      	mov	r3, r1
 800ad90:	d137      	bne.n	800ae02 <_dtoa_r+0x722>
 800ad92:	f7f5 fa7b 	bl	800028c <__adddf3>
 800ad96:	4642      	mov	r2, r8
 800ad98:	464b      	mov	r3, r9
 800ad9a:	4606      	mov	r6, r0
 800ad9c:	460f      	mov	r7, r1
 800ad9e:	f7f5 febb 	bl	8000b18 <__aeabi_dcmpgt>
 800ada2:	b9c8      	cbnz	r0, 800add8 <_dtoa_r+0x6f8>
 800ada4:	4642      	mov	r2, r8
 800ada6:	464b      	mov	r3, r9
 800ada8:	4630      	mov	r0, r6
 800adaa:	4639      	mov	r1, r7
 800adac:	f7f5 fe8c 	bl	8000ac8 <__aeabi_dcmpeq>
 800adb0:	b110      	cbz	r0, 800adb8 <_dtoa_r+0x6d8>
 800adb2:	9b02      	ldr	r3, [sp, #8]
 800adb4:	07d9      	lsls	r1, r3, #31
 800adb6:	d40f      	bmi.n	800add8 <_dtoa_r+0x6f8>
 800adb8:	4620      	mov	r0, r4
 800adba:	4659      	mov	r1, fp
 800adbc:	f001 f868 	bl	800be90 <_Bfree>
 800adc0:	2300      	movs	r3, #0
 800adc2:	702b      	strb	r3, [r5, #0]
 800adc4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800adc6:	f10a 0001 	add.w	r0, sl, #1
 800adca:	6018      	str	r0, [r3, #0]
 800adcc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800adce:	2b00      	cmp	r3, #0
 800add0:	f43f acd8 	beq.w	800a784 <_dtoa_r+0xa4>
 800add4:	601d      	str	r5, [r3, #0]
 800add6:	e4d5      	b.n	800a784 <_dtoa_r+0xa4>
 800add8:	f8cd a01c 	str.w	sl, [sp, #28]
 800addc:	462b      	mov	r3, r5
 800adde:	461d      	mov	r5, r3
 800ade0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ade4:	2a39      	cmp	r2, #57	; 0x39
 800ade6:	d108      	bne.n	800adfa <_dtoa_r+0x71a>
 800ade8:	9a00      	ldr	r2, [sp, #0]
 800adea:	429a      	cmp	r2, r3
 800adec:	d1f7      	bne.n	800adde <_dtoa_r+0x6fe>
 800adee:	9a07      	ldr	r2, [sp, #28]
 800adf0:	9900      	ldr	r1, [sp, #0]
 800adf2:	3201      	adds	r2, #1
 800adf4:	9207      	str	r2, [sp, #28]
 800adf6:	2230      	movs	r2, #48	; 0x30
 800adf8:	700a      	strb	r2, [r1, #0]
 800adfa:	781a      	ldrb	r2, [r3, #0]
 800adfc:	3201      	adds	r2, #1
 800adfe:	701a      	strb	r2, [r3, #0]
 800ae00:	e78c      	b.n	800ad1c <_dtoa_r+0x63c>
 800ae02:	4b7f      	ldr	r3, [pc, #508]	; (800b000 <_dtoa_r+0x920>)
 800ae04:	2200      	movs	r2, #0
 800ae06:	f7f5 fbf7 	bl	80005f8 <__aeabi_dmul>
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	4606      	mov	r6, r0
 800ae10:	460f      	mov	r7, r1
 800ae12:	f7f5 fe59 	bl	8000ac8 <__aeabi_dcmpeq>
 800ae16:	2800      	cmp	r0, #0
 800ae18:	d09b      	beq.n	800ad52 <_dtoa_r+0x672>
 800ae1a:	e7cd      	b.n	800adb8 <_dtoa_r+0x6d8>
 800ae1c:	9a08      	ldr	r2, [sp, #32]
 800ae1e:	2a00      	cmp	r2, #0
 800ae20:	f000 80c4 	beq.w	800afac <_dtoa_r+0x8cc>
 800ae24:	9a05      	ldr	r2, [sp, #20]
 800ae26:	2a01      	cmp	r2, #1
 800ae28:	f300 80a8 	bgt.w	800af7c <_dtoa_r+0x89c>
 800ae2c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ae2e:	2a00      	cmp	r2, #0
 800ae30:	f000 80a0 	beq.w	800af74 <_dtoa_r+0x894>
 800ae34:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ae38:	9e06      	ldr	r6, [sp, #24]
 800ae3a:	4645      	mov	r5, r8
 800ae3c:	9a04      	ldr	r2, [sp, #16]
 800ae3e:	2101      	movs	r1, #1
 800ae40:	441a      	add	r2, r3
 800ae42:	4620      	mov	r0, r4
 800ae44:	4498      	add	r8, r3
 800ae46:	9204      	str	r2, [sp, #16]
 800ae48:	f001 f928 	bl	800c09c <__i2b>
 800ae4c:	4607      	mov	r7, r0
 800ae4e:	2d00      	cmp	r5, #0
 800ae50:	dd0b      	ble.n	800ae6a <_dtoa_r+0x78a>
 800ae52:	9b04      	ldr	r3, [sp, #16]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	dd08      	ble.n	800ae6a <_dtoa_r+0x78a>
 800ae58:	42ab      	cmp	r3, r5
 800ae5a:	9a04      	ldr	r2, [sp, #16]
 800ae5c:	bfa8      	it	ge
 800ae5e:	462b      	movge	r3, r5
 800ae60:	eba8 0803 	sub.w	r8, r8, r3
 800ae64:	1aed      	subs	r5, r5, r3
 800ae66:	1ad3      	subs	r3, r2, r3
 800ae68:	9304      	str	r3, [sp, #16]
 800ae6a:	9b06      	ldr	r3, [sp, #24]
 800ae6c:	b1fb      	cbz	r3, 800aeae <_dtoa_r+0x7ce>
 800ae6e:	9b08      	ldr	r3, [sp, #32]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	f000 809f 	beq.w	800afb4 <_dtoa_r+0x8d4>
 800ae76:	2e00      	cmp	r6, #0
 800ae78:	dd11      	ble.n	800ae9e <_dtoa_r+0x7be>
 800ae7a:	4639      	mov	r1, r7
 800ae7c:	4632      	mov	r2, r6
 800ae7e:	4620      	mov	r0, r4
 800ae80:	f001 f9c8 	bl	800c214 <__pow5mult>
 800ae84:	465a      	mov	r2, fp
 800ae86:	4601      	mov	r1, r0
 800ae88:	4607      	mov	r7, r0
 800ae8a:	4620      	mov	r0, r4
 800ae8c:	f001 f91c 	bl	800c0c8 <__multiply>
 800ae90:	4659      	mov	r1, fp
 800ae92:	9007      	str	r0, [sp, #28]
 800ae94:	4620      	mov	r0, r4
 800ae96:	f000 fffb 	bl	800be90 <_Bfree>
 800ae9a:	9b07      	ldr	r3, [sp, #28]
 800ae9c:	469b      	mov	fp, r3
 800ae9e:	9b06      	ldr	r3, [sp, #24]
 800aea0:	1b9a      	subs	r2, r3, r6
 800aea2:	d004      	beq.n	800aeae <_dtoa_r+0x7ce>
 800aea4:	4659      	mov	r1, fp
 800aea6:	4620      	mov	r0, r4
 800aea8:	f001 f9b4 	bl	800c214 <__pow5mult>
 800aeac:	4683      	mov	fp, r0
 800aeae:	2101      	movs	r1, #1
 800aeb0:	4620      	mov	r0, r4
 800aeb2:	f001 f8f3 	bl	800c09c <__i2b>
 800aeb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	4606      	mov	r6, r0
 800aebc:	dd7c      	ble.n	800afb8 <_dtoa_r+0x8d8>
 800aebe:	461a      	mov	r2, r3
 800aec0:	4601      	mov	r1, r0
 800aec2:	4620      	mov	r0, r4
 800aec4:	f001 f9a6 	bl	800c214 <__pow5mult>
 800aec8:	9b05      	ldr	r3, [sp, #20]
 800aeca:	2b01      	cmp	r3, #1
 800aecc:	4606      	mov	r6, r0
 800aece:	dd76      	ble.n	800afbe <_dtoa_r+0x8de>
 800aed0:	2300      	movs	r3, #0
 800aed2:	9306      	str	r3, [sp, #24]
 800aed4:	6933      	ldr	r3, [r6, #16]
 800aed6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800aeda:	6918      	ldr	r0, [r3, #16]
 800aedc:	f001 f88e 	bl	800bffc <__hi0bits>
 800aee0:	f1c0 0020 	rsb	r0, r0, #32
 800aee4:	9b04      	ldr	r3, [sp, #16]
 800aee6:	4418      	add	r0, r3
 800aee8:	f010 001f 	ands.w	r0, r0, #31
 800aeec:	f000 8086 	beq.w	800affc <_dtoa_r+0x91c>
 800aef0:	f1c0 0320 	rsb	r3, r0, #32
 800aef4:	2b04      	cmp	r3, #4
 800aef6:	dd7f      	ble.n	800aff8 <_dtoa_r+0x918>
 800aef8:	f1c0 001c 	rsb	r0, r0, #28
 800aefc:	9b04      	ldr	r3, [sp, #16]
 800aefe:	4403      	add	r3, r0
 800af00:	4480      	add	r8, r0
 800af02:	4405      	add	r5, r0
 800af04:	9304      	str	r3, [sp, #16]
 800af06:	f1b8 0f00 	cmp.w	r8, #0
 800af0a:	dd05      	ble.n	800af18 <_dtoa_r+0x838>
 800af0c:	4659      	mov	r1, fp
 800af0e:	4642      	mov	r2, r8
 800af10:	4620      	mov	r0, r4
 800af12:	f001 f9d9 	bl	800c2c8 <__lshift>
 800af16:	4683      	mov	fp, r0
 800af18:	9b04      	ldr	r3, [sp, #16]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	dd05      	ble.n	800af2a <_dtoa_r+0x84a>
 800af1e:	4631      	mov	r1, r6
 800af20:	461a      	mov	r2, r3
 800af22:	4620      	mov	r0, r4
 800af24:	f001 f9d0 	bl	800c2c8 <__lshift>
 800af28:	4606      	mov	r6, r0
 800af2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d069      	beq.n	800b004 <_dtoa_r+0x924>
 800af30:	4631      	mov	r1, r6
 800af32:	4658      	mov	r0, fp
 800af34:	f001 fa34 	bl	800c3a0 <__mcmp>
 800af38:	2800      	cmp	r0, #0
 800af3a:	da63      	bge.n	800b004 <_dtoa_r+0x924>
 800af3c:	2300      	movs	r3, #0
 800af3e:	4659      	mov	r1, fp
 800af40:	220a      	movs	r2, #10
 800af42:	4620      	mov	r0, r4
 800af44:	f000 ffc6 	bl	800bed4 <__multadd>
 800af48:	9b08      	ldr	r3, [sp, #32]
 800af4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800af4e:	4683      	mov	fp, r0
 800af50:	2b00      	cmp	r3, #0
 800af52:	f000 818f 	beq.w	800b274 <_dtoa_r+0xb94>
 800af56:	4639      	mov	r1, r7
 800af58:	2300      	movs	r3, #0
 800af5a:	220a      	movs	r2, #10
 800af5c:	4620      	mov	r0, r4
 800af5e:	f000 ffb9 	bl	800bed4 <__multadd>
 800af62:	f1b9 0f00 	cmp.w	r9, #0
 800af66:	4607      	mov	r7, r0
 800af68:	f300 808e 	bgt.w	800b088 <_dtoa_r+0x9a8>
 800af6c:	9b05      	ldr	r3, [sp, #20]
 800af6e:	2b02      	cmp	r3, #2
 800af70:	dc50      	bgt.n	800b014 <_dtoa_r+0x934>
 800af72:	e089      	b.n	800b088 <_dtoa_r+0x9a8>
 800af74:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800af76:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800af7a:	e75d      	b.n	800ae38 <_dtoa_r+0x758>
 800af7c:	9b01      	ldr	r3, [sp, #4]
 800af7e:	1e5e      	subs	r6, r3, #1
 800af80:	9b06      	ldr	r3, [sp, #24]
 800af82:	42b3      	cmp	r3, r6
 800af84:	bfbf      	itttt	lt
 800af86:	9b06      	ldrlt	r3, [sp, #24]
 800af88:	9606      	strlt	r6, [sp, #24]
 800af8a:	1af2      	sublt	r2, r6, r3
 800af8c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800af8e:	bfb6      	itet	lt
 800af90:	189b      	addlt	r3, r3, r2
 800af92:	1b9e      	subge	r6, r3, r6
 800af94:	930d      	strlt	r3, [sp, #52]	; 0x34
 800af96:	9b01      	ldr	r3, [sp, #4]
 800af98:	bfb8      	it	lt
 800af9a:	2600      	movlt	r6, #0
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	bfb5      	itete	lt
 800afa0:	eba8 0503 	sublt.w	r5, r8, r3
 800afa4:	9b01      	ldrge	r3, [sp, #4]
 800afa6:	2300      	movlt	r3, #0
 800afa8:	4645      	movge	r5, r8
 800afaa:	e747      	b.n	800ae3c <_dtoa_r+0x75c>
 800afac:	9e06      	ldr	r6, [sp, #24]
 800afae:	9f08      	ldr	r7, [sp, #32]
 800afb0:	4645      	mov	r5, r8
 800afb2:	e74c      	b.n	800ae4e <_dtoa_r+0x76e>
 800afb4:	9a06      	ldr	r2, [sp, #24]
 800afb6:	e775      	b.n	800aea4 <_dtoa_r+0x7c4>
 800afb8:	9b05      	ldr	r3, [sp, #20]
 800afba:	2b01      	cmp	r3, #1
 800afbc:	dc18      	bgt.n	800aff0 <_dtoa_r+0x910>
 800afbe:	9b02      	ldr	r3, [sp, #8]
 800afc0:	b9b3      	cbnz	r3, 800aff0 <_dtoa_r+0x910>
 800afc2:	9b03      	ldr	r3, [sp, #12]
 800afc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800afc8:	b9a3      	cbnz	r3, 800aff4 <_dtoa_r+0x914>
 800afca:	9b03      	ldr	r3, [sp, #12]
 800afcc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800afd0:	0d1b      	lsrs	r3, r3, #20
 800afd2:	051b      	lsls	r3, r3, #20
 800afd4:	b12b      	cbz	r3, 800afe2 <_dtoa_r+0x902>
 800afd6:	9b04      	ldr	r3, [sp, #16]
 800afd8:	3301      	adds	r3, #1
 800afda:	9304      	str	r3, [sp, #16]
 800afdc:	f108 0801 	add.w	r8, r8, #1
 800afe0:	2301      	movs	r3, #1
 800afe2:	9306      	str	r3, [sp, #24]
 800afe4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	f47f af74 	bne.w	800aed4 <_dtoa_r+0x7f4>
 800afec:	2001      	movs	r0, #1
 800afee:	e779      	b.n	800aee4 <_dtoa_r+0x804>
 800aff0:	2300      	movs	r3, #0
 800aff2:	e7f6      	b.n	800afe2 <_dtoa_r+0x902>
 800aff4:	9b02      	ldr	r3, [sp, #8]
 800aff6:	e7f4      	b.n	800afe2 <_dtoa_r+0x902>
 800aff8:	d085      	beq.n	800af06 <_dtoa_r+0x826>
 800affa:	4618      	mov	r0, r3
 800affc:	301c      	adds	r0, #28
 800affe:	e77d      	b.n	800aefc <_dtoa_r+0x81c>
 800b000:	40240000 	.word	0x40240000
 800b004:	9b01      	ldr	r3, [sp, #4]
 800b006:	2b00      	cmp	r3, #0
 800b008:	dc38      	bgt.n	800b07c <_dtoa_r+0x99c>
 800b00a:	9b05      	ldr	r3, [sp, #20]
 800b00c:	2b02      	cmp	r3, #2
 800b00e:	dd35      	ble.n	800b07c <_dtoa_r+0x99c>
 800b010:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b014:	f1b9 0f00 	cmp.w	r9, #0
 800b018:	d10d      	bne.n	800b036 <_dtoa_r+0x956>
 800b01a:	4631      	mov	r1, r6
 800b01c:	464b      	mov	r3, r9
 800b01e:	2205      	movs	r2, #5
 800b020:	4620      	mov	r0, r4
 800b022:	f000 ff57 	bl	800bed4 <__multadd>
 800b026:	4601      	mov	r1, r0
 800b028:	4606      	mov	r6, r0
 800b02a:	4658      	mov	r0, fp
 800b02c:	f001 f9b8 	bl	800c3a0 <__mcmp>
 800b030:	2800      	cmp	r0, #0
 800b032:	f73f adbd 	bgt.w	800abb0 <_dtoa_r+0x4d0>
 800b036:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b038:	9d00      	ldr	r5, [sp, #0]
 800b03a:	ea6f 0a03 	mvn.w	sl, r3
 800b03e:	f04f 0800 	mov.w	r8, #0
 800b042:	4631      	mov	r1, r6
 800b044:	4620      	mov	r0, r4
 800b046:	f000 ff23 	bl	800be90 <_Bfree>
 800b04a:	2f00      	cmp	r7, #0
 800b04c:	f43f aeb4 	beq.w	800adb8 <_dtoa_r+0x6d8>
 800b050:	f1b8 0f00 	cmp.w	r8, #0
 800b054:	d005      	beq.n	800b062 <_dtoa_r+0x982>
 800b056:	45b8      	cmp	r8, r7
 800b058:	d003      	beq.n	800b062 <_dtoa_r+0x982>
 800b05a:	4641      	mov	r1, r8
 800b05c:	4620      	mov	r0, r4
 800b05e:	f000 ff17 	bl	800be90 <_Bfree>
 800b062:	4639      	mov	r1, r7
 800b064:	4620      	mov	r0, r4
 800b066:	f000 ff13 	bl	800be90 <_Bfree>
 800b06a:	e6a5      	b.n	800adb8 <_dtoa_r+0x6d8>
 800b06c:	2600      	movs	r6, #0
 800b06e:	4637      	mov	r7, r6
 800b070:	e7e1      	b.n	800b036 <_dtoa_r+0x956>
 800b072:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b074:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800b078:	4637      	mov	r7, r6
 800b07a:	e599      	b.n	800abb0 <_dtoa_r+0x4d0>
 800b07c:	9b08      	ldr	r3, [sp, #32]
 800b07e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b082:	2b00      	cmp	r3, #0
 800b084:	f000 80fd 	beq.w	800b282 <_dtoa_r+0xba2>
 800b088:	2d00      	cmp	r5, #0
 800b08a:	dd05      	ble.n	800b098 <_dtoa_r+0x9b8>
 800b08c:	4639      	mov	r1, r7
 800b08e:	462a      	mov	r2, r5
 800b090:	4620      	mov	r0, r4
 800b092:	f001 f919 	bl	800c2c8 <__lshift>
 800b096:	4607      	mov	r7, r0
 800b098:	9b06      	ldr	r3, [sp, #24]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d05c      	beq.n	800b158 <_dtoa_r+0xa78>
 800b09e:	6879      	ldr	r1, [r7, #4]
 800b0a0:	4620      	mov	r0, r4
 800b0a2:	f000 feb5 	bl	800be10 <_Balloc>
 800b0a6:	4605      	mov	r5, r0
 800b0a8:	b928      	cbnz	r0, 800b0b6 <_dtoa_r+0x9d6>
 800b0aa:	4b80      	ldr	r3, [pc, #512]	; (800b2ac <_dtoa_r+0xbcc>)
 800b0ac:	4602      	mov	r2, r0
 800b0ae:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b0b2:	f7ff bb2e 	b.w	800a712 <_dtoa_r+0x32>
 800b0b6:	693a      	ldr	r2, [r7, #16]
 800b0b8:	3202      	adds	r2, #2
 800b0ba:	0092      	lsls	r2, r2, #2
 800b0bc:	f107 010c 	add.w	r1, r7, #12
 800b0c0:	300c      	adds	r0, #12
 800b0c2:	f7fd faa1 	bl	8008608 <memcpy>
 800b0c6:	2201      	movs	r2, #1
 800b0c8:	4629      	mov	r1, r5
 800b0ca:	4620      	mov	r0, r4
 800b0cc:	f001 f8fc 	bl	800c2c8 <__lshift>
 800b0d0:	9b00      	ldr	r3, [sp, #0]
 800b0d2:	3301      	adds	r3, #1
 800b0d4:	9301      	str	r3, [sp, #4]
 800b0d6:	9b00      	ldr	r3, [sp, #0]
 800b0d8:	444b      	add	r3, r9
 800b0da:	9307      	str	r3, [sp, #28]
 800b0dc:	9b02      	ldr	r3, [sp, #8]
 800b0de:	f003 0301 	and.w	r3, r3, #1
 800b0e2:	46b8      	mov	r8, r7
 800b0e4:	9306      	str	r3, [sp, #24]
 800b0e6:	4607      	mov	r7, r0
 800b0e8:	9b01      	ldr	r3, [sp, #4]
 800b0ea:	4631      	mov	r1, r6
 800b0ec:	3b01      	subs	r3, #1
 800b0ee:	4658      	mov	r0, fp
 800b0f0:	9302      	str	r3, [sp, #8]
 800b0f2:	f7ff fa67 	bl	800a5c4 <quorem>
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	3330      	adds	r3, #48	; 0x30
 800b0fa:	9004      	str	r0, [sp, #16]
 800b0fc:	4641      	mov	r1, r8
 800b0fe:	4658      	mov	r0, fp
 800b100:	9308      	str	r3, [sp, #32]
 800b102:	f001 f94d 	bl	800c3a0 <__mcmp>
 800b106:	463a      	mov	r2, r7
 800b108:	4681      	mov	r9, r0
 800b10a:	4631      	mov	r1, r6
 800b10c:	4620      	mov	r0, r4
 800b10e:	f001 f963 	bl	800c3d8 <__mdiff>
 800b112:	68c2      	ldr	r2, [r0, #12]
 800b114:	9b08      	ldr	r3, [sp, #32]
 800b116:	4605      	mov	r5, r0
 800b118:	bb02      	cbnz	r2, 800b15c <_dtoa_r+0xa7c>
 800b11a:	4601      	mov	r1, r0
 800b11c:	4658      	mov	r0, fp
 800b11e:	f001 f93f 	bl	800c3a0 <__mcmp>
 800b122:	9b08      	ldr	r3, [sp, #32]
 800b124:	4602      	mov	r2, r0
 800b126:	4629      	mov	r1, r5
 800b128:	4620      	mov	r0, r4
 800b12a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800b12e:	f000 feaf 	bl	800be90 <_Bfree>
 800b132:	9b05      	ldr	r3, [sp, #20]
 800b134:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b136:	9d01      	ldr	r5, [sp, #4]
 800b138:	ea43 0102 	orr.w	r1, r3, r2
 800b13c:	9b06      	ldr	r3, [sp, #24]
 800b13e:	430b      	orrs	r3, r1
 800b140:	9b08      	ldr	r3, [sp, #32]
 800b142:	d10d      	bne.n	800b160 <_dtoa_r+0xa80>
 800b144:	2b39      	cmp	r3, #57	; 0x39
 800b146:	d029      	beq.n	800b19c <_dtoa_r+0xabc>
 800b148:	f1b9 0f00 	cmp.w	r9, #0
 800b14c:	dd01      	ble.n	800b152 <_dtoa_r+0xa72>
 800b14e:	9b04      	ldr	r3, [sp, #16]
 800b150:	3331      	adds	r3, #49	; 0x31
 800b152:	9a02      	ldr	r2, [sp, #8]
 800b154:	7013      	strb	r3, [r2, #0]
 800b156:	e774      	b.n	800b042 <_dtoa_r+0x962>
 800b158:	4638      	mov	r0, r7
 800b15a:	e7b9      	b.n	800b0d0 <_dtoa_r+0x9f0>
 800b15c:	2201      	movs	r2, #1
 800b15e:	e7e2      	b.n	800b126 <_dtoa_r+0xa46>
 800b160:	f1b9 0f00 	cmp.w	r9, #0
 800b164:	db06      	blt.n	800b174 <_dtoa_r+0xa94>
 800b166:	9905      	ldr	r1, [sp, #20]
 800b168:	ea41 0909 	orr.w	r9, r1, r9
 800b16c:	9906      	ldr	r1, [sp, #24]
 800b16e:	ea59 0101 	orrs.w	r1, r9, r1
 800b172:	d120      	bne.n	800b1b6 <_dtoa_r+0xad6>
 800b174:	2a00      	cmp	r2, #0
 800b176:	ddec      	ble.n	800b152 <_dtoa_r+0xa72>
 800b178:	4659      	mov	r1, fp
 800b17a:	2201      	movs	r2, #1
 800b17c:	4620      	mov	r0, r4
 800b17e:	9301      	str	r3, [sp, #4]
 800b180:	f001 f8a2 	bl	800c2c8 <__lshift>
 800b184:	4631      	mov	r1, r6
 800b186:	4683      	mov	fp, r0
 800b188:	f001 f90a 	bl	800c3a0 <__mcmp>
 800b18c:	2800      	cmp	r0, #0
 800b18e:	9b01      	ldr	r3, [sp, #4]
 800b190:	dc02      	bgt.n	800b198 <_dtoa_r+0xab8>
 800b192:	d1de      	bne.n	800b152 <_dtoa_r+0xa72>
 800b194:	07da      	lsls	r2, r3, #31
 800b196:	d5dc      	bpl.n	800b152 <_dtoa_r+0xa72>
 800b198:	2b39      	cmp	r3, #57	; 0x39
 800b19a:	d1d8      	bne.n	800b14e <_dtoa_r+0xa6e>
 800b19c:	9a02      	ldr	r2, [sp, #8]
 800b19e:	2339      	movs	r3, #57	; 0x39
 800b1a0:	7013      	strb	r3, [r2, #0]
 800b1a2:	462b      	mov	r3, r5
 800b1a4:	461d      	mov	r5, r3
 800b1a6:	3b01      	subs	r3, #1
 800b1a8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b1ac:	2a39      	cmp	r2, #57	; 0x39
 800b1ae:	d050      	beq.n	800b252 <_dtoa_r+0xb72>
 800b1b0:	3201      	adds	r2, #1
 800b1b2:	701a      	strb	r2, [r3, #0]
 800b1b4:	e745      	b.n	800b042 <_dtoa_r+0x962>
 800b1b6:	2a00      	cmp	r2, #0
 800b1b8:	dd03      	ble.n	800b1c2 <_dtoa_r+0xae2>
 800b1ba:	2b39      	cmp	r3, #57	; 0x39
 800b1bc:	d0ee      	beq.n	800b19c <_dtoa_r+0xabc>
 800b1be:	3301      	adds	r3, #1
 800b1c0:	e7c7      	b.n	800b152 <_dtoa_r+0xa72>
 800b1c2:	9a01      	ldr	r2, [sp, #4]
 800b1c4:	9907      	ldr	r1, [sp, #28]
 800b1c6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b1ca:	428a      	cmp	r2, r1
 800b1cc:	d02a      	beq.n	800b224 <_dtoa_r+0xb44>
 800b1ce:	4659      	mov	r1, fp
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	220a      	movs	r2, #10
 800b1d4:	4620      	mov	r0, r4
 800b1d6:	f000 fe7d 	bl	800bed4 <__multadd>
 800b1da:	45b8      	cmp	r8, r7
 800b1dc:	4683      	mov	fp, r0
 800b1de:	f04f 0300 	mov.w	r3, #0
 800b1e2:	f04f 020a 	mov.w	r2, #10
 800b1e6:	4641      	mov	r1, r8
 800b1e8:	4620      	mov	r0, r4
 800b1ea:	d107      	bne.n	800b1fc <_dtoa_r+0xb1c>
 800b1ec:	f000 fe72 	bl	800bed4 <__multadd>
 800b1f0:	4680      	mov	r8, r0
 800b1f2:	4607      	mov	r7, r0
 800b1f4:	9b01      	ldr	r3, [sp, #4]
 800b1f6:	3301      	adds	r3, #1
 800b1f8:	9301      	str	r3, [sp, #4]
 800b1fa:	e775      	b.n	800b0e8 <_dtoa_r+0xa08>
 800b1fc:	f000 fe6a 	bl	800bed4 <__multadd>
 800b200:	4639      	mov	r1, r7
 800b202:	4680      	mov	r8, r0
 800b204:	2300      	movs	r3, #0
 800b206:	220a      	movs	r2, #10
 800b208:	4620      	mov	r0, r4
 800b20a:	f000 fe63 	bl	800bed4 <__multadd>
 800b20e:	4607      	mov	r7, r0
 800b210:	e7f0      	b.n	800b1f4 <_dtoa_r+0xb14>
 800b212:	f1b9 0f00 	cmp.w	r9, #0
 800b216:	9a00      	ldr	r2, [sp, #0]
 800b218:	bfcc      	ite	gt
 800b21a:	464d      	movgt	r5, r9
 800b21c:	2501      	movle	r5, #1
 800b21e:	4415      	add	r5, r2
 800b220:	f04f 0800 	mov.w	r8, #0
 800b224:	4659      	mov	r1, fp
 800b226:	2201      	movs	r2, #1
 800b228:	4620      	mov	r0, r4
 800b22a:	9301      	str	r3, [sp, #4]
 800b22c:	f001 f84c 	bl	800c2c8 <__lshift>
 800b230:	4631      	mov	r1, r6
 800b232:	4683      	mov	fp, r0
 800b234:	f001 f8b4 	bl	800c3a0 <__mcmp>
 800b238:	2800      	cmp	r0, #0
 800b23a:	dcb2      	bgt.n	800b1a2 <_dtoa_r+0xac2>
 800b23c:	d102      	bne.n	800b244 <_dtoa_r+0xb64>
 800b23e:	9b01      	ldr	r3, [sp, #4]
 800b240:	07db      	lsls	r3, r3, #31
 800b242:	d4ae      	bmi.n	800b1a2 <_dtoa_r+0xac2>
 800b244:	462b      	mov	r3, r5
 800b246:	461d      	mov	r5, r3
 800b248:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b24c:	2a30      	cmp	r2, #48	; 0x30
 800b24e:	d0fa      	beq.n	800b246 <_dtoa_r+0xb66>
 800b250:	e6f7      	b.n	800b042 <_dtoa_r+0x962>
 800b252:	9a00      	ldr	r2, [sp, #0]
 800b254:	429a      	cmp	r2, r3
 800b256:	d1a5      	bne.n	800b1a4 <_dtoa_r+0xac4>
 800b258:	f10a 0a01 	add.w	sl, sl, #1
 800b25c:	2331      	movs	r3, #49	; 0x31
 800b25e:	e779      	b.n	800b154 <_dtoa_r+0xa74>
 800b260:	4b13      	ldr	r3, [pc, #76]	; (800b2b0 <_dtoa_r+0xbd0>)
 800b262:	f7ff baaf 	b.w	800a7c4 <_dtoa_r+0xe4>
 800b266:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b268:	2b00      	cmp	r3, #0
 800b26a:	f47f aa86 	bne.w	800a77a <_dtoa_r+0x9a>
 800b26e:	4b11      	ldr	r3, [pc, #68]	; (800b2b4 <_dtoa_r+0xbd4>)
 800b270:	f7ff baa8 	b.w	800a7c4 <_dtoa_r+0xe4>
 800b274:	f1b9 0f00 	cmp.w	r9, #0
 800b278:	dc03      	bgt.n	800b282 <_dtoa_r+0xba2>
 800b27a:	9b05      	ldr	r3, [sp, #20]
 800b27c:	2b02      	cmp	r3, #2
 800b27e:	f73f aec9 	bgt.w	800b014 <_dtoa_r+0x934>
 800b282:	9d00      	ldr	r5, [sp, #0]
 800b284:	4631      	mov	r1, r6
 800b286:	4658      	mov	r0, fp
 800b288:	f7ff f99c 	bl	800a5c4 <quorem>
 800b28c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b290:	f805 3b01 	strb.w	r3, [r5], #1
 800b294:	9a00      	ldr	r2, [sp, #0]
 800b296:	1aaa      	subs	r2, r5, r2
 800b298:	4591      	cmp	r9, r2
 800b29a:	ddba      	ble.n	800b212 <_dtoa_r+0xb32>
 800b29c:	4659      	mov	r1, fp
 800b29e:	2300      	movs	r3, #0
 800b2a0:	220a      	movs	r2, #10
 800b2a2:	4620      	mov	r0, r4
 800b2a4:	f000 fe16 	bl	800bed4 <__multadd>
 800b2a8:	4683      	mov	fp, r0
 800b2aa:	e7eb      	b.n	800b284 <_dtoa_r+0xba4>
 800b2ac:	0800e71c 	.word	0x0800e71c
 800b2b0:	0800e518 	.word	0x0800e518
 800b2b4:	0800e699 	.word	0x0800e699

0800b2b8 <__sflush_r>:
 800b2b8:	898a      	ldrh	r2, [r1, #12]
 800b2ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2be:	4605      	mov	r5, r0
 800b2c0:	0710      	lsls	r0, r2, #28
 800b2c2:	460c      	mov	r4, r1
 800b2c4:	d458      	bmi.n	800b378 <__sflush_r+0xc0>
 800b2c6:	684b      	ldr	r3, [r1, #4]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	dc05      	bgt.n	800b2d8 <__sflush_r+0x20>
 800b2cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	dc02      	bgt.n	800b2d8 <__sflush_r+0x20>
 800b2d2:	2000      	movs	r0, #0
 800b2d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b2da:	2e00      	cmp	r6, #0
 800b2dc:	d0f9      	beq.n	800b2d2 <__sflush_r+0x1a>
 800b2de:	2300      	movs	r3, #0
 800b2e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b2e4:	682f      	ldr	r7, [r5, #0]
 800b2e6:	602b      	str	r3, [r5, #0]
 800b2e8:	d032      	beq.n	800b350 <__sflush_r+0x98>
 800b2ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b2ec:	89a3      	ldrh	r3, [r4, #12]
 800b2ee:	075a      	lsls	r2, r3, #29
 800b2f0:	d505      	bpl.n	800b2fe <__sflush_r+0x46>
 800b2f2:	6863      	ldr	r3, [r4, #4]
 800b2f4:	1ac0      	subs	r0, r0, r3
 800b2f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b2f8:	b10b      	cbz	r3, 800b2fe <__sflush_r+0x46>
 800b2fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b2fc:	1ac0      	subs	r0, r0, r3
 800b2fe:	2300      	movs	r3, #0
 800b300:	4602      	mov	r2, r0
 800b302:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b304:	6a21      	ldr	r1, [r4, #32]
 800b306:	4628      	mov	r0, r5
 800b308:	47b0      	blx	r6
 800b30a:	1c43      	adds	r3, r0, #1
 800b30c:	89a3      	ldrh	r3, [r4, #12]
 800b30e:	d106      	bne.n	800b31e <__sflush_r+0x66>
 800b310:	6829      	ldr	r1, [r5, #0]
 800b312:	291d      	cmp	r1, #29
 800b314:	d82c      	bhi.n	800b370 <__sflush_r+0xb8>
 800b316:	4a2a      	ldr	r2, [pc, #168]	; (800b3c0 <__sflush_r+0x108>)
 800b318:	40ca      	lsrs	r2, r1
 800b31a:	07d6      	lsls	r6, r2, #31
 800b31c:	d528      	bpl.n	800b370 <__sflush_r+0xb8>
 800b31e:	2200      	movs	r2, #0
 800b320:	6062      	str	r2, [r4, #4]
 800b322:	04d9      	lsls	r1, r3, #19
 800b324:	6922      	ldr	r2, [r4, #16]
 800b326:	6022      	str	r2, [r4, #0]
 800b328:	d504      	bpl.n	800b334 <__sflush_r+0x7c>
 800b32a:	1c42      	adds	r2, r0, #1
 800b32c:	d101      	bne.n	800b332 <__sflush_r+0x7a>
 800b32e:	682b      	ldr	r3, [r5, #0]
 800b330:	b903      	cbnz	r3, 800b334 <__sflush_r+0x7c>
 800b332:	6560      	str	r0, [r4, #84]	; 0x54
 800b334:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b336:	602f      	str	r7, [r5, #0]
 800b338:	2900      	cmp	r1, #0
 800b33a:	d0ca      	beq.n	800b2d2 <__sflush_r+0x1a>
 800b33c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b340:	4299      	cmp	r1, r3
 800b342:	d002      	beq.n	800b34a <__sflush_r+0x92>
 800b344:	4628      	mov	r0, r5
 800b346:	f001 fa2d 	bl	800c7a4 <_free_r>
 800b34a:	2000      	movs	r0, #0
 800b34c:	6360      	str	r0, [r4, #52]	; 0x34
 800b34e:	e7c1      	b.n	800b2d4 <__sflush_r+0x1c>
 800b350:	6a21      	ldr	r1, [r4, #32]
 800b352:	2301      	movs	r3, #1
 800b354:	4628      	mov	r0, r5
 800b356:	47b0      	blx	r6
 800b358:	1c41      	adds	r1, r0, #1
 800b35a:	d1c7      	bne.n	800b2ec <__sflush_r+0x34>
 800b35c:	682b      	ldr	r3, [r5, #0]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d0c4      	beq.n	800b2ec <__sflush_r+0x34>
 800b362:	2b1d      	cmp	r3, #29
 800b364:	d001      	beq.n	800b36a <__sflush_r+0xb2>
 800b366:	2b16      	cmp	r3, #22
 800b368:	d101      	bne.n	800b36e <__sflush_r+0xb6>
 800b36a:	602f      	str	r7, [r5, #0]
 800b36c:	e7b1      	b.n	800b2d2 <__sflush_r+0x1a>
 800b36e:	89a3      	ldrh	r3, [r4, #12]
 800b370:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b374:	81a3      	strh	r3, [r4, #12]
 800b376:	e7ad      	b.n	800b2d4 <__sflush_r+0x1c>
 800b378:	690f      	ldr	r7, [r1, #16]
 800b37a:	2f00      	cmp	r7, #0
 800b37c:	d0a9      	beq.n	800b2d2 <__sflush_r+0x1a>
 800b37e:	0793      	lsls	r3, r2, #30
 800b380:	680e      	ldr	r6, [r1, #0]
 800b382:	bf08      	it	eq
 800b384:	694b      	ldreq	r3, [r1, #20]
 800b386:	600f      	str	r7, [r1, #0]
 800b388:	bf18      	it	ne
 800b38a:	2300      	movne	r3, #0
 800b38c:	eba6 0807 	sub.w	r8, r6, r7
 800b390:	608b      	str	r3, [r1, #8]
 800b392:	f1b8 0f00 	cmp.w	r8, #0
 800b396:	dd9c      	ble.n	800b2d2 <__sflush_r+0x1a>
 800b398:	6a21      	ldr	r1, [r4, #32]
 800b39a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b39c:	4643      	mov	r3, r8
 800b39e:	463a      	mov	r2, r7
 800b3a0:	4628      	mov	r0, r5
 800b3a2:	47b0      	blx	r6
 800b3a4:	2800      	cmp	r0, #0
 800b3a6:	dc06      	bgt.n	800b3b6 <__sflush_r+0xfe>
 800b3a8:	89a3      	ldrh	r3, [r4, #12]
 800b3aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3ae:	81a3      	strh	r3, [r4, #12]
 800b3b0:	f04f 30ff 	mov.w	r0, #4294967295
 800b3b4:	e78e      	b.n	800b2d4 <__sflush_r+0x1c>
 800b3b6:	4407      	add	r7, r0
 800b3b8:	eba8 0800 	sub.w	r8, r8, r0
 800b3bc:	e7e9      	b.n	800b392 <__sflush_r+0xda>
 800b3be:	bf00      	nop
 800b3c0:	20400001 	.word	0x20400001

0800b3c4 <_fflush_r>:
 800b3c4:	b538      	push	{r3, r4, r5, lr}
 800b3c6:	690b      	ldr	r3, [r1, #16]
 800b3c8:	4605      	mov	r5, r0
 800b3ca:	460c      	mov	r4, r1
 800b3cc:	b913      	cbnz	r3, 800b3d4 <_fflush_r+0x10>
 800b3ce:	2500      	movs	r5, #0
 800b3d0:	4628      	mov	r0, r5
 800b3d2:	bd38      	pop	{r3, r4, r5, pc}
 800b3d4:	b118      	cbz	r0, 800b3de <_fflush_r+0x1a>
 800b3d6:	6983      	ldr	r3, [r0, #24]
 800b3d8:	b90b      	cbnz	r3, 800b3de <_fflush_r+0x1a>
 800b3da:	f000 f887 	bl	800b4ec <__sinit>
 800b3de:	4b14      	ldr	r3, [pc, #80]	; (800b430 <_fflush_r+0x6c>)
 800b3e0:	429c      	cmp	r4, r3
 800b3e2:	d11b      	bne.n	800b41c <_fflush_r+0x58>
 800b3e4:	686c      	ldr	r4, [r5, #4]
 800b3e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d0ef      	beq.n	800b3ce <_fflush_r+0xa>
 800b3ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b3f0:	07d0      	lsls	r0, r2, #31
 800b3f2:	d404      	bmi.n	800b3fe <_fflush_r+0x3a>
 800b3f4:	0599      	lsls	r1, r3, #22
 800b3f6:	d402      	bmi.n	800b3fe <_fflush_r+0x3a>
 800b3f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b3fa:	f000 fc88 	bl	800bd0e <__retarget_lock_acquire_recursive>
 800b3fe:	4628      	mov	r0, r5
 800b400:	4621      	mov	r1, r4
 800b402:	f7ff ff59 	bl	800b2b8 <__sflush_r>
 800b406:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b408:	07da      	lsls	r2, r3, #31
 800b40a:	4605      	mov	r5, r0
 800b40c:	d4e0      	bmi.n	800b3d0 <_fflush_r+0xc>
 800b40e:	89a3      	ldrh	r3, [r4, #12]
 800b410:	059b      	lsls	r3, r3, #22
 800b412:	d4dd      	bmi.n	800b3d0 <_fflush_r+0xc>
 800b414:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b416:	f000 fc7b 	bl	800bd10 <__retarget_lock_release_recursive>
 800b41a:	e7d9      	b.n	800b3d0 <_fflush_r+0xc>
 800b41c:	4b05      	ldr	r3, [pc, #20]	; (800b434 <_fflush_r+0x70>)
 800b41e:	429c      	cmp	r4, r3
 800b420:	d101      	bne.n	800b426 <_fflush_r+0x62>
 800b422:	68ac      	ldr	r4, [r5, #8]
 800b424:	e7df      	b.n	800b3e6 <_fflush_r+0x22>
 800b426:	4b04      	ldr	r3, [pc, #16]	; (800b438 <_fflush_r+0x74>)
 800b428:	429c      	cmp	r4, r3
 800b42a:	bf08      	it	eq
 800b42c:	68ec      	ldreq	r4, [r5, #12]
 800b42e:	e7da      	b.n	800b3e6 <_fflush_r+0x22>
 800b430:	0800e750 	.word	0x0800e750
 800b434:	0800e770 	.word	0x0800e770
 800b438:	0800e730 	.word	0x0800e730

0800b43c <std>:
 800b43c:	2300      	movs	r3, #0
 800b43e:	b510      	push	{r4, lr}
 800b440:	4604      	mov	r4, r0
 800b442:	e9c0 3300 	strd	r3, r3, [r0]
 800b446:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b44a:	6083      	str	r3, [r0, #8]
 800b44c:	8181      	strh	r1, [r0, #12]
 800b44e:	6643      	str	r3, [r0, #100]	; 0x64
 800b450:	81c2      	strh	r2, [r0, #14]
 800b452:	6183      	str	r3, [r0, #24]
 800b454:	4619      	mov	r1, r3
 800b456:	2208      	movs	r2, #8
 800b458:	305c      	adds	r0, #92	; 0x5c
 800b45a:	f7fd f8e3 	bl	8008624 <memset>
 800b45e:	4b05      	ldr	r3, [pc, #20]	; (800b474 <std+0x38>)
 800b460:	6263      	str	r3, [r4, #36]	; 0x24
 800b462:	4b05      	ldr	r3, [pc, #20]	; (800b478 <std+0x3c>)
 800b464:	62a3      	str	r3, [r4, #40]	; 0x28
 800b466:	4b05      	ldr	r3, [pc, #20]	; (800b47c <std+0x40>)
 800b468:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b46a:	4b05      	ldr	r3, [pc, #20]	; (800b480 <std+0x44>)
 800b46c:	6224      	str	r4, [r4, #32]
 800b46e:	6323      	str	r3, [r4, #48]	; 0x30
 800b470:	bd10      	pop	{r4, pc}
 800b472:	bf00      	nop
 800b474:	0800ce99 	.word	0x0800ce99
 800b478:	0800cebb 	.word	0x0800cebb
 800b47c:	0800cef3 	.word	0x0800cef3
 800b480:	0800cf17 	.word	0x0800cf17

0800b484 <_cleanup_r>:
 800b484:	4901      	ldr	r1, [pc, #4]	; (800b48c <_cleanup_r+0x8>)
 800b486:	f000 b8af 	b.w	800b5e8 <_fwalk_reent>
 800b48a:	bf00      	nop
 800b48c:	0800b3c5 	.word	0x0800b3c5

0800b490 <__sfmoreglue>:
 800b490:	b570      	push	{r4, r5, r6, lr}
 800b492:	1e4a      	subs	r2, r1, #1
 800b494:	2568      	movs	r5, #104	; 0x68
 800b496:	4355      	muls	r5, r2
 800b498:	460e      	mov	r6, r1
 800b49a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b49e:	f001 f9d1 	bl	800c844 <_malloc_r>
 800b4a2:	4604      	mov	r4, r0
 800b4a4:	b140      	cbz	r0, 800b4b8 <__sfmoreglue+0x28>
 800b4a6:	2100      	movs	r1, #0
 800b4a8:	e9c0 1600 	strd	r1, r6, [r0]
 800b4ac:	300c      	adds	r0, #12
 800b4ae:	60a0      	str	r0, [r4, #8]
 800b4b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b4b4:	f7fd f8b6 	bl	8008624 <memset>
 800b4b8:	4620      	mov	r0, r4
 800b4ba:	bd70      	pop	{r4, r5, r6, pc}

0800b4bc <__sfp_lock_acquire>:
 800b4bc:	4801      	ldr	r0, [pc, #4]	; (800b4c4 <__sfp_lock_acquire+0x8>)
 800b4be:	f000 bc26 	b.w	800bd0e <__retarget_lock_acquire_recursive>
 800b4c2:	bf00      	nop
 800b4c4:	20003754 	.word	0x20003754

0800b4c8 <__sfp_lock_release>:
 800b4c8:	4801      	ldr	r0, [pc, #4]	; (800b4d0 <__sfp_lock_release+0x8>)
 800b4ca:	f000 bc21 	b.w	800bd10 <__retarget_lock_release_recursive>
 800b4ce:	bf00      	nop
 800b4d0:	20003754 	.word	0x20003754

0800b4d4 <__sinit_lock_acquire>:
 800b4d4:	4801      	ldr	r0, [pc, #4]	; (800b4dc <__sinit_lock_acquire+0x8>)
 800b4d6:	f000 bc1a 	b.w	800bd0e <__retarget_lock_acquire_recursive>
 800b4da:	bf00      	nop
 800b4dc:	2000374f 	.word	0x2000374f

0800b4e0 <__sinit_lock_release>:
 800b4e0:	4801      	ldr	r0, [pc, #4]	; (800b4e8 <__sinit_lock_release+0x8>)
 800b4e2:	f000 bc15 	b.w	800bd10 <__retarget_lock_release_recursive>
 800b4e6:	bf00      	nop
 800b4e8:	2000374f 	.word	0x2000374f

0800b4ec <__sinit>:
 800b4ec:	b510      	push	{r4, lr}
 800b4ee:	4604      	mov	r4, r0
 800b4f0:	f7ff fff0 	bl	800b4d4 <__sinit_lock_acquire>
 800b4f4:	69a3      	ldr	r3, [r4, #24]
 800b4f6:	b11b      	cbz	r3, 800b500 <__sinit+0x14>
 800b4f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b4fc:	f7ff bff0 	b.w	800b4e0 <__sinit_lock_release>
 800b500:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b504:	6523      	str	r3, [r4, #80]	; 0x50
 800b506:	4b13      	ldr	r3, [pc, #76]	; (800b554 <__sinit+0x68>)
 800b508:	4a13      	ldr	r2, [pc, #76]	; (800b558 <__sinit+0x6c>)
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	62a2      	str	r2, [r4, #40]	; 0x28
 800b50e:	42a3      	cmp	r3, r4
 800b510:	bf04      	itt	eq
 800b512:	2301      	moveq	r3, #1
 800b514:	61a3      	streq	r3, [r4, #24]
 800b516:	4620      	mov	r0, r4
 800b518:	f000 f820 	bl	800b55c <__sfp>
 800b51c:	6060      	str	r0, [r4, #4]
 800b51e:	4620      	mov	r0, r4
 800b520:	f000 f81c 	bl	800b55c <__sfp>
 800b524:	60a0      	str	r0, [r4, #8]
 800b526:	4620      	mov	r0, r4
 800b528:	f000 f818 	bl	800b55c <__sfp>
 800b52c:	2200      	movs	r2, #0
 800b52e:	60e0      	str	r0, [r4, #12]
 800b530:	2104      	movs	r1, #4
 800b532:	6860      	ldr	r0, [r4, #4]
 800b534:	f7ff ff82 	bl	800b43c <std>
 800b538:	68a0      	ldr	r0, [r4, #8]
 800b53a:	2201      	movs	r2, #1
 800b53c:	2109      	movs	r1, #9
 800b53e:	f7ff ff7d 	bl	800b43c <std>
 800b542:	68e0      	ldr	r0, [r4, #12]
 800b544:	2202      	movs	r2, #2
 800b546:	2112      	movs	r1, #18
 800b548:	f7ff ff78 	bl	800b43c <std>
 800b54c:	2301      	movs	r3, #1
 800b54e:	61a3      	str	r3, [r4, #24]
 800b550:	e7d2      	b.n	800b4f8 <__sinit+0xc>
 800b552:	bf00      	nop
 800b554:	0800e504 	.word	0x0800e504
 800b558:	0800b485 	.word	0x0800b485

0800b55c <__sfp>:
 800b55c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b55e:	4607      	mov	r7, r0
 800b560:	f7ff ffac 	bl	800b4bc <__sfp_lock_acquire>
 800b564:	4b1e      	ldr	r3, [pc, #120]	; (800b5e0 <__sfp+0x84>)
 800b566:	681e      	ldr	r6, [r3, #0]
 800b568:	69b3      	ldr	r3, [r6, #24]
 800b56a:	b913      	cbnz	r3, 800b572 <__sfp+0x16>
 800b56c:	4630      	mov	r0, r6
 800b56e:	f7ff ffbd 	bl	800b4ec <__sinit>
 800b572:	3648      	adds	r6, #72	; 0x48
 800b574:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b578:	3b01      	subs	r3, #1
 800b57a:	d503      	bpl.n	800b584 <__sfp+0x28>
 800b57c:	6833      	ldr	r3, [r6, #0]
 800b57e:	b30b      	cbz	r3, 800b5c4 <__sfp+0x68>
 800b580:	6836      	ldr	r6, [r6, #0]
 800b582:	e7f7      	b.n	800b574 <__sfp+0x18>
 800b584:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b588:	b9d5      	cbnz	r5, 800b5c0 <__sfp+0x64>
 800b58a:	4b16      	ldr	r3, [pc, #88]	; (800b5e4 <__sfp+0x88>)
 800b58c:	60e3      	str	r3, [r4, #12]
 800b58e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b592:	6665      	str	r5, [r4, #100]	; 0x64
 800b594:	f000 fbba 	bl	800bd0c <__retarget_lock_init_recursive>
 800b598:	f7ff ff96 	bl	800b4c8 <__sfp_lock_release>
 800b59c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b5a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b5a4:	6025      	str	r5, [r4, #0]
 800b5a6:	61a5      	str	r5, [r4, #24]
 800b5a8:	2208      	movs	r2, #8
 800b5aa:	4629      	mov	r1, r5
 800b5ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b5b0:	f7fd f838 	bl	8008624 <memset>
 800b5b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b5b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b5bc:	4620      	mov	r0, r4
 800b5be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5c0:	3468      	adds	r4, #104	; 0x68
 800b5c2:	e7d9      	b.n	800b578 <__sfp+0x1c>
 800b5c4:	2104      	movs	r1, #4
 800b5c6:	4638      	mov	r0, r7
 800b5c8:	f7ff ff62 	bl	800b490 <__sfmoreglue>
 800b5cc:	4604      	mov	r4, r0
 800b5ce:	6030      	str	r0, [r6, #0]
 800b5d0:	2800      	cmp	r0, #0
 800b5d2:	d1d5      	bne.n	800b580 <__sfp+0x24>
 800b5d4:	f7ff ff78 	bl	800b4c8 <__sfp_lock_release>
 800b5d8:	230c      	movs	r3, #12
 800b5da:	603b      	str	r3, [r7, #0]
 800b5dc:	e7ee      	b.n	800b5bc <__sfp+0x60>
 800b5de:	bf00      	nop
 800b5e0:	0800e504 	.word	0x0800e504
 800b5e4:	ffff0001 	.word	0xffff0001

0800b5e8 <_fwalk_reent>:
 800b5e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5ec:	4606      	mov	r6, r0
 800b5ee:	4688      	mov	r8, r1
 800b5f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b5f4:	2700      	movs	r7, #0
 800b5f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b5fa:	f1b9 0901 	subs.w	r9, r9, #1
 800b5fe:	d505      	bpl.n	800b60c <_fwalk_reent+0x24>
 800b600:	6824      	ldr	r4, [r4, #0]
 800b602:	2c00      	cmp	r4, #0
 800b604:	d1f7      	bne.n	800b5f6 <_fwalk_reent+0xe>
 800b606:	4638      	mov	r0, r7
 800b608:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b60c:	89ab      	ldrh	r3, [r5, #12]
 800b60e:	2b01      	cmp	r3, #1
 800b610:	d907      	bls.n	800b622 <_fwalk_reent+0x3a>
 800b612:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b616:	3301      	adds	r3, #1
 800b618:	d003      	beq.n	800b622 <_fwalk_reent+0x3a>
 800b61a:	4629      	mov	r1, r5
 800b61c:	4630      	mov	r0, r6
 800b61e:	47c0      	blx	r8
 800b620:	4307      	orrs	r7, r0
 800b622:	3568      	adds	r5, #104	; 0x68
 800b624:	e7e9      	b.n	800b5fa <_fwalk_reent+0x12>

0800b626 <rshift>:
 800b626:	6903      	ldr	r3, [r0, #16]
 800b628:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b62c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b630:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b634:	f100 0414 	add.w	r4, r0, #20
 800b638:	dd45      	ble.n	800b6c6 <rshift+0xa0>
 800b63a:	f011 011f 	ands.w	r1, r1, #31
 800b63e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b642:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b646:	d10c      	bne.n	800b662 <rshift+0x3c>
 800b648:	f100 0710 	add.w	r7, r0, #16
 800b64c:	4629      	mov	r1, r5
 800b64e:	42b1      	cmp	r1, r6
 800b650:	d334      	bcc.n	800b6bc <rshift+0x96>
 800b652:	1a9b      	subs	r3, r3, r2
 800b654:	009b      	lsls	r3, r3, #2
 800b656:	1eea      	subs	r2, r5, #3
 800b658:	4296      	cmp	r6, r2
 800b65a:	bf38      	it	cc
 800b65c:	2300      	movcc	r3, #0
 800b65e:	4423      	add	r3, r4
 800b660:	e015      	b.n	800b68e <rshift+0x68>
 800b662:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b666:	f1c1 0820 	rsb	r8, r1, #32
 800b66a:	40cf      	lsrs	r7, r1
 800b66c:	f105 0e04 	add.w	lr, r5, #4
 800b670:	46a1      	mov	r9, r4
 800b672:	4576      	cmp	r6, lr
 800b674:	46f4      	mov	ip, lr
 800b676:	d815      	bhi.n	800b6a4 <rshift+0x7e>
 800b678:	1a9b      	subs	r3, r3, r2
 800b67a:	009a      	lsls	r2, r3, #2
 800b67c:	3a04      	subs	r2, #4
 800b67e:	3501      	adds	r5, #1
 800b680:	42ae      	cmp	r6, r5
 800b682:	bf38      	it	cc
 800b684:	2200      	movcc	r2, #0
 800b686:	18a3      	adds	r3, r4, r2
 800b688:	50a7      	str	r7, [r4, r2]
 800b68a:	b107      	cbz	r7, 800b68e <rshift+0x68>
 800b68c:	3304      	adds	r3, #4
 800b68e:	1b1a      	subs	r2, r3, r4
 800b690:	42a3      	cmp	r3, r4
 800b692:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b696:	bf08      	it	eq
 800b698:	2300      	moveq	r3, #0
 800b69a:	6102      	str	r2, [r0, #16]
 800b69c:	bf08      	it	eq
 800b69e:	6143      	streq	r3, [r0, #20]
 800b6a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b6a4:	f8dc c000 	ldr.w	ip, [ip]
 800b6a8:	fa0c fc08 	lsl.w	ip, ip, r8
 800b6ac:	ea4c 0707 	orr.w	r7, ip, r7
 800b6b0:	f849 7b04 	str.w	r7, [r9], #4
 800b6b4:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b6b8:	40cf      	lsrs	r7, r1
 800b6ba:	e7da      	b.n	800b672 <rshift+0x4c>
 800b6bc:	f851 cb04 	ldr.w	ip, [r1], #4
 800b6c0:	f847 cf04 	str.w	ip, [r7, #4]!
 800b6c4:	e7c3      	b.n	800b64e <rshift+0x28>
 800b6c6:	4623      	mov	r3, r4
 800b6c8:	e7e1      	b.n	800b68e <rshift+0x68>

0800b6ca <__hexdig_fun>:
 800b6ca:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b6ce:	2b09      	cmp	r3, #9
 800b6d0:	d802      	bhi.n	800b6d8 <__hexdig_fun+0xe>
 800b6d2:	3820      	subs	r0, #32
 800b6d4:	b2c0      	uxtb	r0, r0
 800b6d6:	4770      	bx	lr
 800b6d8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b6dc:	2b05      	cmp	r3, #5
 800b6de:	d801      	bhi.n	800b6e4 <__hexdig_fun+0x1a>
 800b6e0:	3847      	subs	r0, #71	; 0x47
 800b6e2:	e7f7      	b.n	800b6d4 <__hexdig_fun+0xa>
 800b6e4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b6e8:	2b05      	cmp	r3, #5
 800b6ea:	d801      	bhi.n	800b6f0 <__hexdig_fun+0x26>
 800b6ec:	3827      	subs	r0, #39	; 0x27
 800b6ee:	e7f1      	b.n	800b6d4 <__hexdig_fun+0xa>
 800b6f0:	2000      	movs	r0, #0
 800b6f2:	4770      	bx	lr

0800b6f4 <__gethex>:
 800b6f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6f8:	ed2d 8b02 	vpush	{d8}
 800b6fc:	b089      	sub	sp, #36	; 0x24
 800b6fe:	ee08 0a10 	vmov	s16, r0
 800b702:	9304      	str	r3, [sp, #16]
 800b704:	4bbc      	ldr	r3, [pc, #752]	; (800b9f8 <__gethex+0x304>)
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	9301      	str	r3, [sp, #4]
 800b70a:	4618      	mov	r0, r3
 800b70c:	468b      	mov	fp, r1
 800b70e:	4690      	mov	r8, r2
 800b710:	f7f4 fdae 	bl	8000270 <strlen>
 800b714:	9b01      	ldr	r3, [sp, #4]
 800b716:	f8db 2000 	ldr.w	r2, [fp]
 800b71a:	4403      	add	r3, r0
 800b71c:	4682      	mov	sl, r0
 800b71e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b722:	9305      	str	r3, [sp, #20]
 800b724:	1c93      	adds	r3, r2, #2
 800b726:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b72a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b72e:	32fe      	adds	r2, #254	; 0xfe
 800b730:	18d1      	adds	r1, r2, r3
 800b732:	461f      	mov	r7, r3
 800b734:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b738:	9100      	str	r1, [sp, #0]
 800b73a:	2830      	cmp	r0, #48	; 0x30
 800b73c:	d0f8      	beq.n	800b730 <__gethex+0x3c>
 800b73e:	f7ff ffc4 	bl	800b6ca <__hexdig_fun>
 800b742:	4604      	mov	r4, r0
 800b744:	2800      	cmp	r0, #0
 800b746:	d13a      	bne.n	800b7be <__gethex+0xca>
 800b748:	9901      	ldr	r1, [sp, #4]
 800b74a:	4652      	mov	r2, sl
 800b74c:	4638      	mov	r0, r7
 800b74e:	f7fd ffa6 	bl	800969e <strncmp>
 800b752:	4605      	mov	r5, r0
 800b754:	2800      	cmp	r0, #0
 800b756:	d168      	bne.n	800b82a <__gethex+0x136>
 800b758:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b75c:	eb07 060a 	add.w	r6, r7, sl
 800b760:	f7ff ffb3 	bl	800b6ca <__hexdig_fun>
 800b764:	2800      	cmp	r0, #0
 800b766:	d062      	beq.n	800b82e <__gethex+0x13a>
 800b768:	4633      	mov	r3, r6
 800b76a:	7818      	ldrb	r0, [r3, #0]
 800b76c:	2830      	cmp	r0, #48	; 0x30
 800b76e:	461f      	mov	r7, r3
 800b770:	f103 0301 	add.w	r3, r3, #1
 800b774:	d0f9      	beq.n	800b76a <__gethex+0x76>
 800b776:	f7ff ffa8 	bl	800b6ca <__hexdig_fun>
 800b77a:	2301      	movs	r3, #1
 800b77c:	fab0 f480 	clz	r4, r0
 800b780:	0964      	lsrs	r4, r4, #5
 800b782:	4635      	mov	r5, r6
 800b784:	9300      	str	r3, [sp, #0]
 800b786:	463a      	mov	r2, r7
 800b788:	4616      	mov	r6, r2
 800b78a:	3201      	adds	r2, #1
 800b78c:	7830      	ldrb	r0, [r6, #0]
 800b78e:	f7ff ff9c 	bl	800b6ca <__hexdig_fun>
 800b792:	2800      	cmp	r0, #0
 800b794:	d1f8      	bne.n	800b788 <__gethex+0x94>
 800b796:	9901      	ldr	r1, [sp, #4]
 800b798:	4652      	mov	r2, sl
 800b79a:	4630      	mov	r0, r6
 800b79c:	f7fd ff7f 	bl	800969e <strncmp>
 800b7a0:	b980      	cbnz	r0, 800b7c4 <__gethex+0xd0>
 800b7a2:	b94d      	cbnz	r5, 800b7b8 <__gethex+0xc4>
 800b7a4:	eb06 050a 	add.w	r5, r6, sl
 800b7a8:	462a      	mov	r2, r5
 800b7aa:	4616      	mov	r6, r2
 800b7ac:	3201      	adds	r2, #1
 800b7ae:	7830      	ldrb	r0, [r6, #0]
 800b7b0:	f7ff ff8b 	bl	800b6ca <__hexdig_fun>
 800b7b4:	2800      	cmp	r0, #0
 800b7b6:	d1f8      	bne.n	800b7aa <__gethex+0xb6>
 800b7b8:	1bad      	subs	r5, r5, r6
 800b7ba:	00ad      	lsls	r5, r5, #2
 800b7bc:	e004      	b.n	800b7c8 <__gethex+0xd4>
 800b7be:	2400      	movs	r4, #0
 800b7c0:	4625      	mov	r5, r4
 800b7c2:	e7e0      	b.n	800b786 <__gethex+0x92>
 800b7c4:	2d00      	cmp	r5, #0
 800b7c6:	d1f7      	bne.n	800b7b8 <__gethex+0xc4>
 800b7c8:	7833      	ldrb	r3, [r6, #0]
 800b7ca:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b7ce:	2b50      	cmp	r3, #80	; 0x50
 800b7d0:	d13b      	bne.n	800b84a <__gethex+0x156>
 800b7d2:	7873      	ldrb	r3, [r6, #1]
 800b7d4:	2b2b      	cmp	r3, #43	; 0x2b
 800b7d6:	d02c      	beq.n	800b832 <__gethex+0x13e>
 800b7d8:	2b2d      	cmp	r3, #45	; 0x2d
 800b7da:	d02e      	beq.n	800b83a <__gethex+0x146>
 800b7dc:	1c71      	adds	r1, r6, #1
 800b7de:	f04f 0900 	mov.w	r9, #0
 800b7e2:	7808      	ldrb	r0, [r1, #0]
 800b7e4:	f7ff ff71 	bl	800b6ca <__hexdig_fun>
 800b7e8:	1e43      	subs	r3, r0, #1
 800b7ea:	b2db      	uxtb	r3, r3
 800b7ec:	2b18      	cmp	r3, #24
 800b7ee:	d82c      	bhi.n	800b84a <__gethex+0x156>
 800b7f0:	f1a0 0210 	sub.w	r2, r0, #16
 800b7f4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b7f8:	f7ff ff67 	bl	800b6ca <__hexdig_fun>
 800b7fc:	1e43      	subs	r3, r0, #1
 800b7fe:	b2db      	uxtb	r3, r3
 800b800:	2b18      	cmp	r3, #24
 800b802:	d91d      	bls.n	800b840 <__gethex+0x14c>
 800b804:	f1b9 0f00 	cmp.w	r9, #0
 800b808:	d000      	beq.n	800b80c <__gethex+0x118>
 800b80a:	4252      	negs	r2, r2
 800b80c:	4415      	add	r5, r2
 800b80e:	f8cb 1000 	str.w	r1, [fp]
 800b812:	b1e4      	cbz	r4, 800b84e <__gethex+0x15a>
 800b814:	9b00      	ldr	r3, [sp, #0]
 800b816:	2b00      	cmp	r3, #0
 800b818:	bf14      	ite	ne
 800b81a:	2700      	movne	r7, #0
 800b81c:	2706      	moveq	r7, #6
 800b81e:	4638      	mov	r0, r7
 800b820:	b009      	add	sp, #36	; 0x24
 800b822:	ecbd 8b02 	vpop	{d8}
 800b826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b82a:	463e      	mov	r6, r7
 800b82c:	4625      	mov	r5, r4
 800b82e:	2401      	movs	r4, #1
 800b830:	e7ca      	b.n	800b7c8 <__gethex+0xd4>
 800b832:	f04f 0900 	mov.w	r9, #0
 800b836:	1cb1      	adds	r1, r6, #2
 800b838:	e7d3      	b.n	800b7e2 <__gethex+0xee>
 800b83a:	f04f 0901 	mov.w	r9, #1
 800b83e:	e7fa      	b.n	800b836 <__gethex+0x142>
 800b840:	230a      	movs	r3, #10
 800b842:	fb03 0202 	mla	r2, r3, r2, r0
 800b846:	3a10      	subs	r2, #16
 800b848:	e7d4      	b.n	800b7f4 <__gethex+0x100>
 800b84a:	4631      	mov	r1, r6
 800b84c:	e7df      	b.n	800b80e <__gethex+0x11a>
 800b84e:	1bf3      	subs	r3, r6, r7
 800b850:	3b01      	subs	r3, #1
 800b852:	4621      	mov	r1, r4
 800b854:	2b07      	cmp	r3, #7
 800b856:	dc0b      	bgt.n	800b870 <__gethex+0x17c>
 800b858:	ee18 0a10 	vmov	r0, s16
 800b85c:	f000 fad8 	bl	800be10 <_Balloc>
 800b860:	4604      	mov	r4, r0
 800b862:	b940      	cbnz	r0, 800b876 <__gethex+0x182>
 800b864:	4b65      	ldr	r3, [pc, #404]	; (800b9fc <__gethex+0x308>)
 800b866:	4602      	mov	r2, r0
 800b868:	21de      	movs	r1, #222	; 0xde
 800b86a:	4865      	ldr	r0, [pc, #404]	; (800ba00 <__gethex+0x30c>)
 800b86c:	f001 fb76 	bl	800cf5c <__assert_func>
 800b870:	3101      	adds	r1, #1
 800b872:	105b      	asrs	r3, r3, #1
 800b874:	e7ee      	b.n	800b854 <__gethex+0x160>
 800b876:	f100 0914 	add.w	r9, r0, #20
 800b87a:	f04f 0b00 	mov.w	fp, #0
 800b87e:	f1ca 0301 	rsb	r3, sl, #1
 800b882:	f8cd 9008 	str.w	r9, [sp, #8]
 800b886:	f8cd b000 	str.w	fp, [sp]
 800b88a:	9306      	str	r3, [sp, #24]
 800b88c:	42b7      	cmp	r7, r6
 800b88e:	d340      	bcc.n	800b912 <__gethex+0x21e>
 800b890:	9802      	ldr	r0, [sp, #8]
 800b892:	9b00      	ldr	r3, [sp, #0]
 800b894:	f840 3b04 	str.w	r3, [r0], #4
 800b898:	eba0 0009 	sub.w	r0, r0, r9
 800b89c:	1080      	asrs	r0, r0, #2
 800b89e:	0146      	lsls	r6, r0, #5
 800b8a0:	6120      	str	r0, [r4, #16]
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	f000 fbaa 	bl	800bffc <__hi0bits>
 800b8a8:	1a30      	subs	r0, r6, r0
 800b8aa:	f8d8 6000 	ldr.w	r6, [r8]
 800b8ae:	42b0      	cmp	r0, r6
 800b8b0:	dd63      	ble.n	800b97a <__gethex+0x286>
 800b8b2:	1b87      	subs	r7, r0, r6
 800b8b4:	4639      	mov	r1, r7
 800b8b6:	4620      	mov	r0, r4
 800b8b8:	f000 ff44 	bl	800c744 <__any_on>
 800b8bc:	4682      	mov	sl, r0
 800b8be:	b1a8      	cbz	r0, 800b8ec <__gethex+0x1f8>
 800b8c0:	1e7b      	subs	r3, r7, #1
 800b8c2:	1159      	asrs	r1, r3, #5
 800b8c4:	f003 021f 	and.w	r2, r3, #31
 800b8c8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b8cc:	f04f 0a01 	mov.w	sl, #1
 800b8d0:	fa0a f202 	lsl.w	r2, sl, r2
 800b8d4:	420a      	tst	r2, r1
 800b8d6:	d009      	beq.n	800b8ec <__gethex+0x1f8>
 800b8d8:	4553      	cmp	r3, sl
 800b8da:	dd05      	ble.n	800b8e8 <__gethex+0x1f4>
 800b8dc:	1eb9      	subs	r1, r7, #2
 800b8de:	4620      	mov	r0, r4
 800b8e0:	f000 ff30 	bl	800c744 <__any_on>
 800b8e4:	2800      	cmp	r0, #0
 800b8e6:	d145      	bne.n	800b974 <__gethex+0x280>
 800b8e8:	f04f 0a02 	mov.w	sl, #2
 800b8ec:	4639      	mov	r1, r7
 800b8ee:	4620      	mov	r0, r4
 800b8f0:	f7ff fe99 	bl	800b626 <rshift>
 800b8f4:	443d      	add	r5, r7
 800b8f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b8fa:	42ab      	cmp	r3, r5
 800b8fc:	da4c      	bge.n	800b998 <__gethex+0x2a4>
 800b8fe:	ee18 0a10 	vmov	r0, s16
 800b902:	4621      	mov	r1, r4
 800b904:	f000 fac4 	bl	800be90 <_Bfree>
 800b908:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b90a:	2300      	movs	r3, #0
 800b90c:	6013      	str	r3, [r2, #0]
 800b90e:	27a3      	movs	r7, #163	; 0xa3
 800b910:	e785      	b.n	800b81e <__gethex+0x12a>
 800b912:	1e73      	subs	r3, r6, #1
 800b914:	9a05      	ldr	r2, [sp, #20]
 800b916:	9303      	str	r3, [sp, #12]
 800b918:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b91c:	4293      	cmp	r3, r2
 800b91e:	d019      	beq.n	800b954 <__gethex+0x260>
 800b920:	f1bb 0f20 	cmp.w	fp, #32
 800b924:	d107      	bne.n	800b936 <__gethex+0x242>
 800b926:	9b02      	ldr	r3, [sp, #8]
 800b928:	9a00      	ldr	r2, [sp, #0]
 800b92a:	f843 2b04 	str.w	r2, [r3], #4
 800b92e:	9302      	str	r3, [sp, #8]
 800b930:	2300      	movs	r3, #0
 800b932:	9300      	str	r3, [sp, #0]
 800b934:	469b      	mov	fp, r3
 800b936:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b93a:	f7ff fec6 	bl	800b6ca <__hexdig_fun>
 800b93e:	9b00      	ldr	r3, [sp, #0]
 800b940:	f000 000f 	and.w	r0, r0, #15
 800b944:	fa00 f00b 	lsl.w	r0, r0, fp
 800b948:	4303      	orrs	r3, r0
 800b94a:	9300      	str	r3, [sp, #0]
 800b94c:	f10b 0b04 	add.w	fp, fp, #4
 800b950:	9b03      	ldr	r3, [sp, #12]
 800b952:	e00d      	b.n	800b970 <__gethex+0x27c>
 800b954:	9b03      	ldr	r3, [sp, #12]
 800b956:	9a06      	ldr	r2, [sp, #24]
 800b958:	4413      	add	r3, r2
 800b95a:	42bb      	cmp	r3, r7
 800b95c:	d3e0      	bcc.n	800b920 <__gethex+0x22c>
 800b95e:	4618      	mov	r0, r3
 800b960:	9901      	ldr	r1, [sp, #4]
 800b962:	9307      	str	r3, [sp, #28]
 800b964:	4652      	mov	r2, sl
 800b966:	f7fd fe9a 	bl	800969e <strncmp>
 800b96a:	9b07      	ldr	r3, [sp, #28]
 800b96c:	2800      	cmp	r0, #0
 800b96e:	d1d7      	bne.n	800b920 <__gethex+0x22c>
 800b970:	461e      	mov	r6, r3
 800b972:	e78b      	b.n	800b88c <__gethex+0x198>
 800b974:	f04f 0a03 	mov.w	sl, #3
 800b978:	e7b8      	b.n	800b8ec <__gethex+0x1f8>
 800b97a:	da0a      	bge.n	800b992 <__gethex+0x29e>
 800b97c:	1a37      	subs	r7, r6, r0
 800b97e:	4621      	mov	r1, r4
 800b980:	ee18 0a10 	vmov	r0, s16
 800b984:	463a      	mov	r2, r7
 800b986:	f000 fc9f 	bl	800c2c8 <__lshift>
 800b98a:	1bed      	subs	r5, r5, r7
 800b98c:	4604      	mov	r4, r0
 800b98e:	f100 0914 	add.w	r9, r0, #20
 800b992:	f04f 0a00 	mov.w	sl, #0
 800b996:	e7ae      	b.n	800b8f6 <__gethex+0x202>
 800b998:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b99c:	42a8      	cmp	r0, r5
 800b99e:	dd72      	ble.n	800ba86 <__gethex+0x392>
 800b9a0:	1b45      	subs	r5, r0, r5
 800b9a2:	42ae      	cmp	r6, r5
 800b9a4:	dc36      	bgt.n	800ba14 <__gethex+0x320>
 800b9a6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b9aa:	2b02      	cmp	r3, #2
 800b9ac:	d02a      	beq.n	800ba04 <__gethex+0x310>
 800b9ae:	2b03      	cmp	r3, #3
 800b9b0:	d02c      	beq.n	800ba0c <__gethex+0x318>
 800b9b2:	2b01      	cmp	r3, #1
 800b9b4:	d115      	bne.n	800b9e2 <__gethex+0x2ee>
 800b9b6:	42ae      	cmp	r6, r5
 800b9b8:	d113      	bne.n	800b9e2 <__gethex+0x2ee>
 800b9ba:	2e01      	cmp	r6, #1
 800b9bc:	d10b      	bne.n	800b9d6 <__gethex+0x2e2>
 800b9be:	9a04      	ldr	r2, [sp, #16]
 800b9c0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b9c4:	6013      	str	r3, [r2, #0]
 800b9c6:	2301      	movs	r3, #1
 800b9c8:	6123      	str	r3, [r4, #16]
 800b9ca:	f8c9 3000 	str.w	r3, [r9]
 800b9ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b9d0:	2762      	movs	r7, #98	; 0x62
 800b9d2:	601c      	str	r4, [r3, #0]
 800b9d4:	e723      	b.n	800b81e <__gethex+0x12a>
 800b9d6:	1e71      	subs	r1, r6, #1
 800b9d8:	4620      	mov	r0, r4
 800b9da:	f000 feb3 	bl	800c744 <__any_on>
 800b9de:	2800      	cmp	r0, #0
 800b9e0:	d1ed      	bne.n	800b9be <__gethex+0x2ca>
 800b9e2:	ee18 0a10 	vmov	r0, s16
 800b9e6:	4621      	mov	r1, r4
 800b9e8:	f000 fa52 	bl	800be90 <_Bfree>
 800b9ec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	6013      	str	r3, [r2, #0]
 800b9f2:	2750      	movs	r7, #80	; 0x50
 800b9f4:	e713      	b.n	800b81e <__gethex+0x12a>
 800b9f6:	bf00      	nop
 800b9f8:	0800e7fc 	.word	0x0800e7fc
 800b9fc:	0800e71c 	.word	0x0800e71c
 800ba00:	0800e790 	.word	0x0800e790
 800ba04:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d1eb      	bne.n	800b9e2 <__gethex+0x2ee>
 800ba0a:	e7d8      	b.n	800b9be <__gethex+0x2ca>
 800ba0c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d1d5      	bne.n	800b9be <__gethex+0x2ca>
 800ba12:	e7e6      	b.n	800b9e2 <__gethex+0x2ee>
 800ba14:	1e6f      	subs	r7, r5, #1
 800ba16:	f1ba 0f00 	cmp.w	sl, #0
 800ba1a:	d131      	bne.n	800ba80 <__gethex+0x38c>
 800ba1c:	b127      	cbz	r7, 800ba28 <__gethex+0x334>
 800ba1e:	4639      	mov	r1, r7
 800ba20:	4620      	mov	r0, r4
 800ba22:	f000 fe8f 	bl	800c744 <__any_on>
 800ba26:	4682      	mov	sl, r0
 800ba28:	117b      	asrs	r3, r7, #5
 800ba2a:	2101      	movs	r1, #1
 800ba2c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800ba30:	f007 071f 	and.w	r7, r7, #31
 800ba34:	fa01 f707 	lsl.w	r7, r1, r7
 800ba38:	421f      	tst	r7, r3
 800ba3a:	4629      	mov	r1, r5
 800ba3c:	4620      	mov	r0, r4
 800ba3e:	bf18      	it	ne
 800ba40:	f04a 0a02 	orrne.w	sl, sl, #2
 800ba44:	1b76      	subs	r6, r6, r5
 800ba46:	f7ff fdee 	bl	800b626 <rshift>
 800ba4a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ba4e:	2702      	movs	r7, #2
 800ba50:	f1ba 0f00 	cmp.w	sl, #0
 800ba54:	d048      	beq.n	800bae8 <__gethex+0x3f4>
 800ba56:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ba5a:	2b02      	cmp	r3, #2
 800ba5c:	d015      	beq.n	800ba8a <__gethex+0x396>
 800ba5e:	2b03      	cmp	r3, #3
 800ba60:	d017      	beq.n	800ba92 <__gethex+0x39e>
 800ba62:	2b01      	cmp	r3, #1
 800ba64:	d109      	bne.n	800ba7a <__gethex+0x386>
 800ba66:	f01a 0f02 	tst.w	sl, #2
 800ba6a:	d006      	beq.n	800ba7a <__gethex+0x386>
 800ba6c:	f8d9 0000 	ldr.w	r0, [r9]
 800ba70:	ea4a 0a00 	orr.w	sl, sl, r0
 800ba74:	f01a 0f01 	tst.w	sl, #1
 800ba78:	d10e      	bne.n	800ba98 <__gethex+0x3a4>
 800ba7a:	f047 0710 	orr.w	r7, r7, #16
 800ba7e:	e033      	b.n	800bae8 <__gethex+0x3f4>
 800ba80:	f04f 0a01 	mov.w	sl, #1
 800ba84:	e7d0      	b.n	800ba28 <__gethex+0x334>
 800ba86:	2701      	movs	r7, #1
 800ba88:	e7e2      	b.n	800ba50 <__gethex+0x35c>
 800ba8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ba8c:	f1c3 0301 	rsb	r3, r3, #1
 800ba90:	9315      	str	r3, [sp, #84]	; 0x54
 800ba92:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d0f0      	beq.n	800ba7a <__gethex+0x386>
 800ba98:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ba9c:	f104 0314 	add.w	r3, r4, #20
 800baa0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800baa4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800baa8:	f04f 0c00 	mov.w	ip, #0
 800baac:	4618      	mov	r0, r3
 800baae:	f853 2b04 	ldr.w	r2, [r3], #4
 800bab2:	f1b2 3fff 	cmp.w	r2, #4294967295
 800bab6:	d01c      	beq.n	800baf2 <__gethex+0x3fe>
 800bab8:	3201      	adds	r2, #1
 800baba:	6002      	str	r2, [r0, #0]
 800babc:	2f02      	cmp	r7, #2
 800babe:	f104 0314 	add.w	r3, r4, #20
 800bac2:	d13f      	bne.n	800bb44 <__gethex+0x450>
 800bac4:	f8d8 2000 	ldr.w	r2, [r8]
 800bac8:	3a01      	subs	r2, #1
 800baca:	42b2      	cmp	r2, r6
 800bacc:	d10a      	bne.n	800bae4 <__gethex+0x3f0>
 800bace:	1171      	asrs	r1, r6, #5
 800bad0:	2201      	movs	r2, #1
 800bad2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bad6:	f006 061f 	and.w	r6, r6, #31
 800bada:	fa02 f606 	lsl.w	r6, r2, r6
 800bade:	421e      	tst	r6, r3
 800bae0:	bf18      	it	ne
 800bae2:	4617      	movne	r7, r2
 800bae4:	f047 0720 	orr.w	r7, r7, #32
 800bae8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800baea:	601c      	str	r4, [r3, #0]
 800baec:	9b04      	ldr	r3, [sp, #16]
 800baee:	601d      	str	r5, [r3, #0]
 800baf0:	e695      	b.n	800b81e <__gethex+0x12a>
 800baf2:	4299      	cmp	r1, r3
 800baf4:	f843 cc04 	str.w	ip, [r3, #-4]
 800baf8:	d8d8      	bhi.n	800baac <__gethex+0x3b8>
 800bafa:	68a3      	ldr	r3, [r4, #8]
 800bafc:	459b      	cmp	fp, r3
 800bafe:	db19      	blt.n	800bb34 <__gethex+0x440>
 800bb00:	6861      	ldr	r1, [r4, #4]
 800bb02:	ee18 0a10 	vmov	r0, s16
 800bb06:	3101      	adds	r1, #1
 800bb08:	f000 f982 	bl	800be10 <_Balloc>
 800bb0c:	4681      	mov	r9, r0
 800bb0e:	b918      	cbnz	r0, 800bb18 <__gethex+0x424>
 800bb10:	4b1a      	ldr	r3, [pc, #104]	; (800bb7c <__gethex+0x488>)
 800bb12:	4602      	mov	r2, r0
 800bb14:	2184      	movs	r1, #132	; 0x84
 800bb16:	e6a8      	b.n	800b86a <__gethex+0x176>
 800bb18:	6922      	ldr	r2, [r4, #16]
 800bb1a:	3202      	adds	r2, #2
 800bb1c:	f104 010c 	add.w	r1, r4, #12
 800bb20:	0092      	lsls	r2, r2, #2
 800bb22:	300c      	adds	r0, #12
 800bb24:	f7fc fd70 	bl	8008608 <memcpy>
 800bb28:	4621      	mov	r1, r4
 800bb2a:	ee18 0a10 	vmov	r0, s16
 800bb2e:	f000 f9af 	bl	800be90 <_Bfree>
 800bb32:	464c      	mov	r4, r9
 800bb34:	6923      	ldr	r3, [r4, #16]
 800bb36:	1c5a      	adds	r2, r3, #1
 800bb38:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bb3c:	6122      	str	r2, [r4, #16]
 800bb3e:	2201      	movs	r2, #1
 800bb40:	615a      	str	r2, [r3, #20]
 800bb42:	e7bb      	b.n	800babc <__gethex+0x3c8>
 800bb44:	6922      	ldr	r2, [r4, #16]
 800bb46:	455a      	cmp	r2, fp
 800bb48:	dd0b      	ble.n	800bb62 <__gethex+0x46e>
 800bb4a:	2101      	movs	r1, #1
 800bb4c:	4620      	mov	r0, r4
 800bb4e:	f7ff fd6a 	bl	800b626 <rshift>
 800bb52:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bb56:	3501      	adds	r5, #1
 800bb58:	42ab      	cmp	r3, r5
 800bb5a:	f6ff aed0 	blt.w	800b8fe <__gethex+0x20a>
 800bb5e:	2701      	movs	r7, #1
 800bb60:	e7c0      	b.n	800bae4 <__gethex+0x3f0>
 800bb62:	f016 061f 	ands.w	r6, r6, #31
 800bb66:	d0fa      	beq.n	800bb5e <__gethex+0x46a>
 800bb68:	449a      	add	sl, r3
 800bb6a:	f1c6 0620 	rsb	r6, r6, #32
 800bb6e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800bb72:	f000 fa43 	bl	800bffc <__hi0bits>
 800bb76:	42b0      	cmp	r0, r6
 800bb78:	dbe7      	blt.n	800bb4a <__gethex+0x456>
 800bb7a:	e7f0      	b.n	800bb5e <__gethex+0x46a>
 800bb7c:	0800e71c 	.word	0x0800e71c

0800bb80 <L_shift>:
 800bb80:	f1c2 0208 	rsb	r2, r2, #8
 800bb84:	0092      	lsls	r2, r2, #2
 800bb86:	b570      	push	{r4, r5, r6, lr}
 800bb88:	f1c2 0620 	rsb	r6, r2, #32
 800bb8c:	6843      	ldr	r3, [r0, #4]
 800bb8e:	6804      	ldr	r4, [r0, #0]
 800bb90:	fa03 f506 	lsl.w	r5, r3, r6
 800bb94:	432c      	orrs	r4, r5
 800bb96:	40d3      	lsrs	r3, r2
 800bb98:	6004      	str	r4, [r0, #0]
 800bb9a:	f840 3f04 	str.w	r3, [r0, #4]!
 800bb9e:	4288      	cmp	r0, r1
 800bba0:	d3f4      	bcc.n	800bb8c <L_shift+0xc>
 800bba2:	bd70      	pop	{r4, r5, r6, pc}

0800bba4 <__match>:
 800bba4:	b530      	push	{r4, r5, lr}
 800bba6:	6803      	ldr	r3, [r0, #0]
 800bba8:	3301      	adds	r3, #1
 800bbaa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bbae:	b914      	cbnz	r4, 800bbb6 <__match+0x12>
 800bbb0:	6003      	str	r3, [r0, #0]
 800bbb2:	2001      	movs	r0, #1
 800bbb4:	bd30      	pop	{r4, r5, pc}
 800bbb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bbba:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800bbbe:	2d19      	cmp	r5, #25
 800bbc0:	bf98      	it	ls
 800bbc2:	3220      	addls	r2, #32
 800bbc4:	42a2      	cmp	r2, r4
 800bbc6:	d0f0      	beq.n	800bbaa <__match+0x6>
 800bbc8:	2000      	movs	r0, #0
 800bbca:	e7f3      	b.n	800bbb4 <__match+0x10>

0800bbcc <__hexnan>:
 800bbcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbd0:	680b      	ldr	r3, [r1, #0]
 800bbd2:	6801      	ldr	r1, [r0, #0]
 800bbd4:	115e      	asrs	r6, r3, #5
 800bbd6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bbda:	f013 031f 	ands.w	r3, r3, #31
 800bbde:	b087      	sub	sp, #28
 800bbe0:	bf18      	it	ne
 800bbe2:	3604      	addne	r6, #4
 800bbe4:	2500      	movs	r5, #0
 800bbe6:	1f37      	subs	r7, r6, #4
 800bbe8:	4682      	mov	sl, r0
 800bbea:	4690      	mov	r8, r2
 800bbec:	9301      	str	r3, [sp, #4]
 800bbee:	f846 5c04 	str.w	r5, [r6, #-4]
 800bbf2:	46b9      	mov	r9, r7
 800bbf4:	463c      	mov	r4, r7
 800bbf6:	9502      	str	r5, [sp, #8]
 800bbf8:	46ab      	mov	fp, r5
 800bbfa:	784a      	ldrb	r2, [r1, #1]
 800bbfc:	1c4b      	adds	r3, r1, #1
 800bbfe:	9303      	str	r3, [sp, #12]
 800bc00:	b342      	cbz	r2, 800bc54 <__hexnan+0x88>
 800bc02:	4610      	mov	r0, r2
 800bc04:	9105      	str	r1, [sp, #20]
 800bc06:	9204      	str	r2, [sp, #16]
 800bc08:	f7ff fd5f 	bl	800b6ca <__hexdig_fun>
 800bc0c:	2800      	cmp	r0, #0
 800bc0e:	d14f      	bne.n	800bcb0 <__hexnan+0xe4>
 800bc10:	9a04      	ldr	r2, [sp, #16]
 800bc12:	9905      	ldr	r1, [sp, #20]
 800bc14:	2a20      	cmp	r2, #32
 800bc16:	d818      	bhi.n	800bc4a <__hexnan+0x7e>
 800bc18:	9b02      	ldr	r3, [sp, #8]
 800bc1a:	459b      	cmp	fp, r3
 800bc1c:	dd13      	ble.n	800bc46 <__hexnan+0x7a>
 800bc1e:	454c      	cmp	r4, r9
 800bc20:	d206      	bcs.n	800bc30 <__hexnan+0x64>
 800bc22:	2d07      	cmp	r5, #7
 800bc24:	dc04      	bgt.n	800bc30 <__hexnan+0x64>
 800bc26:	462a      	mov	r2, r5
 800bc28:	4649      	mov	r1, r9
 800bc2a:	4620      	mov	r0, r4
 800bc2c:	f7ff ffa8 	bl	800bb80 <L_shift>
 800bc30:	4544      	cmp	r4, r8
 800bc32:	d950      	bls.n	800bcd6 <__hexnan+0x10a>
 800bc34:	2300      	movs	r3, #0
 800bc36:	f1a4 0904 	sub.w	r9, r4, #4
 800bc3a:	f844 3c04 	str.w	r3, [r4, #-4]
 800bc3e:	f8cd b008 	str.w	fp, [sp, #8]
 800bc42:	464c      	mov	r4, r9
 800bc44:	461d      	mov	r5, r3
 800bc46:	9903      	ldr	r1, [sp, #12]
 800bc48:	e7d7      	b.n	800bbfa <__hexnan+0x2e>
 800bc4a:	2a29      	cmp	r2, #41	; 0x29
 800bc4c:	d156      	bne.n	800bcfc <__hexnan+0x130>
 800bc4e:	3102      	adds	r1, #2
 800bc50:	f8ca 1000 	str.w	r1, [sl]
 800bc54:	f1bb 0f00 	cmp.w	fp, #0
 800bc58:	d050      	beq.n	800bcfc <__hexnan+0x130>
 800bc5a:	454c      	cmp	r4, r9
 800bc5c:	d206      	bcs.n	800bc6c <__hexnan+0xa0>
 800bc5e:	2d07      	cmp	r5, #7
 800bc60:	dc04      	bgt.n	800bc6c <__hexnan+0xa0>
 800bc62:	462a      	mov	r2, r5
 800bc64:	4649      	mov	r1, r9
 800bc66:	4620      	mov	r0, r4
 800bc68:	f7ff ff8a 	bl	800bb80 <L_shift>
 800bc6c:	4544      	cmp	r4, r8
 800bc6e:	d934      	bls.n	800bcda <__hexnan+0x10e>
 800bc70:	f1a8 0204 	sub.w	r2, r8, #4
 800bc74:	4623      	mov	r3, r4
 800bc76:	f853 1b04 	ldr.w	r1, [r3], #4
 800bc7a:	f842 1f04 	str.w	r1, [r2, #4]!
 800bc7e:	429f      	cmp	r7, r3
 800bc80:	d2f9      	bcs.n	800bc76 <__hexnan+0xaa>
 800bc82:	1b3b      	subs	r3, r7, r4
 800bc84:	f023 0303 	bic.w	r3, r3, #3
 800bc88:	3304      	adds	r3, #4
 800bc8a:	3401      	adds	r4, #1
 800bc8c:	3e03      	subs	r6, #3
 800bc8e:	42b4      	cmp	r4, r6
 800bc90:	bf88      	it	hi
 800bc92:	2304      	movhi	r3, #4
 800bc94:	4443      	add	r3, r8
 800bc96:	2200      	movs	r2, #0
 800bc98:	f843 2b04 	str.w	r2, [r3], #4
 800bc9c:	429f      	cmp	r7, r3
 800bc9e:	d2fb      	bcs.n	800bc98 <__hexnan+0xcc>
 800bca0:	683b      	ldr	r3, [r7, #0]
 800bca2:	b91b      	cbnz	r3, 800bcac <__hexnan+0xe0>
 800bca4:	4547      	cmp	r7, r8
 800bca6:	d127      	bne.n	800bcf8 <__hexnan+0x12c>
 800bca8:	2301      	movs	r3, #1
 800bcaa:	603b      	str	r3, [r7, #0]
 800bcac:	2005      	movs	r0, #5
 800bcae:	e026      	b.n	800bcfe <__hexnan+0x132>
 800bcb0:	3501      	adds	r5, #1
 800bcb2:	2d08      	cmp	r5, #8
 800bcb4:	f10b 0b01 	add.w	fp, fp, #1
 800bcb8:	dd06      	ble.n	800bcc8 <__hexnan+0xfc>
 800bcba:	4544      	cmp	r4, r8
 800bcbc:	d9c3      	bls.n	800bc46 <__hexnan+0x7a>
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	f844 3c04 	str.w	r3, [r4, #-4]
 800bcc4:	2501      	movs	r5, #1
 800bcc6:	3c04      	subs	r4, #4
 800bcc8:	6822      	ldr	r2, [r4, #0]
 800bcca:	f000 000f 	and.w	r0, r0, #15
 800bcce:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800bcd2:	6022      	str	r2, [r4, #0]
 800bcd4:	e7b7      	b.n	800bc46 <__hexnan+0x7a>
 800bcd6:	2508      	movs	r5, #8
 800bcd8:	e7b5      	b.n	800bc46 <__hexnan+0x7a>
 800bcda:	9b01      	ldr	r3, [sp, #4]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d0df      	beq.n	800bca0 <__hexnan+0xd4>
 800bce0:	f04f 32ff 	mov.w	r2, #4294967295
 800bce4:	f1c3 0320 	rsb	r3, r3, #32
 800bce8:	fa22 f303 	lsr.w	r3, r2, r3
 800bcec:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800bcf0:	401a      	ands	r2, r3
 800bcf2:	f846 2c04 	str.w	r2, [r6, #-4]
 800bcf6:	e7d3      	b.n	800bca0 <__hexnan+0xd4>
 800bcf8:	3f04      	subs	r7, #4
 800bcfa:	e7d1      	b.n	800bca0 <__hexnan+0xd4>
 800bcfc:	2004      	movs	r0, #4
 800bcfe:	b007      	add	sp, #28
 800bd00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bd04 <_localeconv_r>:
 800bd04:	4800      	ldr	r0, [pc, #0]	; (800bd08 <_localeconv_r+0x4>)
 800bd06:	4770      	bx	lr
 800bd08:	2000016c 	.word	0x2000016c

0800bd0c <__retarget_lock_init_recursive>:
 800bd0c:	4770      	bx	lr

0800bd0e <__retarget_lock_acquire_recursive>:
 800bd0e:	4770      	bx	lr

0800bd10 <__retarget_lock_release_recursive>:
 800bd10:	4770      	bx	lr

0800bd12 <__swhatbuf_r>:
 800bd12:	b570      	push	{r4, r5, r6, lr}
 800bd14:	460e      	mov	r6, r1
 800bd16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd1a:	2900      	cmp	r1, #0
 800bd1c:	b096      	sub	sp, #88	; 0x58
 800bd1e:	4614      	mov	r4, r2
 800bd20:	461d      	mov	r5, r3
 800bd22:	da07      	bge.n	800bd34 <__swhatbuf_r+0x22>
 800bd24:	2300      	movs	r3, #0
 800bd26:	602b      	str	r3, [r5, #0]
 800bd28:	89b3      	ldrh	r3, [r6, #12]
 800bd2a:	061a      	lsls	r2, r3, #24
 800bd2c:	d410      	bmi.n	800bd50 <__swhatbuf_r+0x3e>
 800bd2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd32:	e00e      	b.n	800bd52 <__swhatbuf_r+0x40>
 800bd34:	466a      	mov	r2, sp
 800bd36:	f001 f951 	bl	800cfdc <_fstat_r>
 800bd3a:	2800      	cmp	r0, #0
 800bd3c:	dbf2      	blt.n	800bd24 <__swhatbuf_r+0x12>
 800bd3e:	9a01      	ldr	r2, [sp, #4]
 800bd40:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bd44:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bd48:	425a      	negs	r2, r3
 800bd4a:	415a      	adcs	r2, r3
 800bd4c:	602a      	str	r2, [r5, #0]
 800bd4e:	e7ee      	b.n	800bd2e <__swhatbuf_r+0x1c>
 800bd50:	2340      	movs	r3, #64	; 0x40
 800bd52:	2000      	movs	r0, #0
 800bd54:	6023      	str	r3, [r4, #0]
 800bd56:	b016      	add	sp, #88	; 0x58
 800bd58:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bd5c <__smakebuf_r>:
 800bd5c:	898b      	ldrh	r3, [r1, #12]
 800bd5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bd60:	079d      	lsls	r5, r3, #30
 800bd62:	4606      	mov	r6, r0
 800bd64:	460c      	mov	r4, r1
 800bd66:	d507      	bpl.n	800bd78 <__smakebuf_r+0x1c>
 800bd68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bd6c:	6023      	str	r3, [r4, #0]
 800bd6e:	6123      	str	r3, [r4, #16]
 800bd70:	2301      	movs	r3, #1
 800bd72:	6163      	str	r3, [r4, #20]
 800bd74:	b002      	add	sp, #8
 800bd76:	bd70      	pop	{r4, r5, r6, pc}
 800bd78:	ab01      	add	r3, sp, #4
 800bd7a:	466a      	mov	r2, sp
 800bd7c:	f7ff ffc9 	bl	800bd12 <__swhatbuf_r>
 800bd80:	9900      	ldr	r1, [sp, #0]
 800bd82:	4605      	mov	r5, r0
 800bd84:	4630      	mov	r0, r6
 800bd86:	f000 fd5d 	bl	800c844 <_malloc_r>
 800bd8a:	b948      	cbnz	r0, 800bda0 <__smakebuf_r+0x44>
 800bd8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd90:	059a      	lsls	r2, r3, #22
 800bd92:	d4ef      	bmi.n	800bd74 <__smakebuf_r+0x18>
 800bd94:	f023 0303 	bic.w	r3, r3, #3
 800bd98:	f043 0302 	orr.w	r3, r3, #2
 800bd9c:	81a3      	strh	r3, [r4, #12]
 800bd9e:	e7e3      	b.n	800bd68 <__smakebuf_r+0xc>
 800bda0:	4b0d      	ldr	r3, [pc, #52]	; (800bdd8 <__smakebuf_r+0x7c>)
 800bda2:	62b3      	str	r3, [r6, #40]	; 0x28
 800bda4:	89a3      	ldrh	r3, [r4, #12]
 800bda6:	6020      	str	r0, [r4, #0]
 800bda8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bdac:	81a3      	strh	r3, [r4, #12]
 800bdae:	9b00      	ldr	r3, [sp, #0]
 800bdb0:	6163      	str	r3, [r4, #20]
 800bdb2:	9b01      	ldr	r3, [sp, #4]
 800bdb4:	6120      	str	r0, [r4, #16]
 800bdb6:	b15b      	cbz	r3, 800bdd0 <__smakebuf_r+0x74>
 800bdb8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bdbc:	4630      	mov	r0, r6
 800bdbe:	f001 f91f 	bl	800d000 <_isatty_r>
 800bdc2:	b128      	cbz	r0, 800bdd0 <__smakebuf_r+0x74>
 800bdc4:	89a3      	ldrh	r3, [r4, #12]
 800bdc6:	f023 0303 	bic.w	r3, r3, #3
 800bdca:	f043 0301 	orr.w	r3, r3, #1
 800bdce:	81a3      	strh	r3, [r4, #12]
 800bdd0:	89a0      	ldrh	r0, [r4, #12]
 800bdd2:	4305      	orrs	r5, r0
 800bdd4:	81a5      	strh	r5, [r4, #12]
 800bdd6:	e7cd      	b.n	800bd74 <__smakebuf_r+0x18>
 800bdd8:	0800b485 	.word	0x0800b485

0800bddc <malloc>:
 800bddc:	4b02      	ldr	r3, [pc, #8]	; (800bde8 <malloc+0xc>)
 800bdde:	4601      	mov	r1, r0
 800bde0:	6818      	ldr	r0, [r3, #0]
 800bde2:	f000 bd2f 	b.w	800c844 <_malloc_r>
 800bde6:	bf00      	nop
 800bde8:	20000014 	.word	0x20000014

0800bdec <__ascii_mbtowc>:
 800bdec:	b082      	sub	sp, #8
 800bdee:	b901      	cbnz	r1, 800bdf2 <__ascii_mbtowc+0x6>
 800bdf0:	a901      	add	r1, sp, #4
 800bdf2:	b142      	cbz	r2, 800be06 <__ascii_mbtowc+0x1a>
 800bdf4:	b14b      	cbz	r3, 800be0a <__ascii_mbtowc+0x1e>
 800bdf6:	7813      	ldrb	r3, [r2, #0]
 800bdf8:	600b      	str	r3, [r1, #0]
 800bdfa:	7812      	ldrb	r2, [r2, #0]
 800bdfc:	1e10      	subs	r0, r2, #0
 800bdfe:	bf18      	it	ne
 800be00:	2001      	movne	r0, #1
 800be02:	b002      	add	sp, #8
 800be04:	4770      	bx	lr
 800be06:	4610      	mov	r0, r2
 800be08:	e7fb      	b.n	800be02 <__ascii_mbtowc+0x16>
 800be0a:	f06f 0001 	mvn.w	r0, #1
 800be0e:	e7f8      	b.n	800be02 <__ascii_mbtowc+0x16>

0800be10 <_Balloc>:
 800be10:	b570      	push	{r4, r5, r6, lr}
 800be12:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800be14:	4604      	mov	r4, r0
 800be16:	460d      	mov	r5, r1
 800be18:	b976      	cbnz	r6, 800be38 <_Balloc+0x28>
 800be1a:	2010      	movs	r0, #16
 800be1c:	f7ff ffde 	bl	800bddc <malloc>
 800be20:	4602      	mov	r2, r0
 800be22:	6260      	str	r0, [r4, #36]	; 0x24
 800be24:	b920      	cbnz	r0, 800be30 <_Balloc+0x20>
 800be26:	4b18      	ldr	r3, [pc, #96]	; (800be88 <_Balloc+0x78>)
 800be28:	4818      	ldr	r0, [pc, #96]	; (800be8c <_Balloc+0x7c>)
 800be2a:	2166      	movs	r1, #102	; 0x66
 800be2c:	f001 f896 	bl	800cf5c <__assert_func>
 800be30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800be34:	6006      	str	r6, [r0, #0]
 800be36:	60c6      	str	r6, [r0, #12]
 800be38:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800be3a:	68f3      	ldr	r3, [r6, #12]
 800be3c:	b183      	cbz	r3, 800be60 <_Balloc+0x50>
 800be3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800be40:	68db      	ldr	r3, [r3, #12]
 800be42:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800be46:	b9b8      	cbnz	r0, 800be78 <_Balloc+0x68>
 800be48:	2101      	movs	r1, #1
 800be4a:	fa01 f605 	lsl.w	r6, r1, r5
 800be4e:	1d72      	adds	r2, r6, #5
 800be50:	0092      	lsls	r2, r2, #2
 800be52:	4620      	mov	r0, r4
 800be54:	f000 fc97 	bl	800c786 <_calloc_r>
 800be58:	b160      	cbz	r0, 800be74 <_Balloc+0x64>
 800be5a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800be5e:	e00e      	b.n	800be7e <_Balloc+0x6e>
 800be60:	2221      	movs	r2, #33	; 0x21
 800be62:	2104      	movs	r1, #4
 800be64:	4620      	mov	r0, r4
 800be66:	f000 fc8e 	bl	800c786 <_calloc_r>
 800be6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800be6c:	60f0      	str	r0, [r6, #12]
 800be6e:	68db      	ldr	r3, [r3, #12]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d1e4      	bne.n	800be3e <_Balloc+0x2e>
 800be74:	2000      	movs	r0, #0
 800be76:	bd70      	pop	{r4, r5, r6, pc}
 800be78:	6802      	ldr	r2, [r0, #0]
 800be7a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800be7e:	2300      	movs	r3, #0
 800be80:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800be84:	e7f7      	b.n	800be76 <_Balloc+0x66>
 800be86:	bf00      	nop
 800be88:	0800e6a6 	.word	0x0800e6a6
 800be8c:	0800e810 	.word	0x0800e810

0800be90 <_Bfree>:
 800be90:	b570      	push	{r4, r5, r6, lr}
 800be92:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800be94:	4605      	mov	r5, r0
 800be96:	460c      	mov	r4, r1
 800be98:	b976      	cbnz	r6, 800beb8 <_Bfree+0x28>
 800be9a:	2010      	movs	r0, #16
 800be9c:	f7ff ff9e 	bl	800bddc <malloc>
 800bea0:	4602      	mov	r2, r0
 800bea2:	6268      	str	r0, [r5, #36]	; 0x24
 800bea4:	b920      	cbnz	r0, 800beb0 <_Bfree+0x20>
 800bea6:	4b09      	ldr	r3, [pc, #36]	; (800becc <_Bfree+0x3c>)
 800bea8:	4809      	ldr	r0, [pc, #36]	; (800bed0 <_Bfree+0x40>)
 800beaa:	218a      	movs	r1, #138	; 0x8a
 800beac:	f001 f856 	bl	800cf5c <__assert_func>
 800beb0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800beb4:	6006      	str	r6, [r0, #0]
 800beb6:	60c6      	str	r6, [r0, #12]
 800beb8:	b13c      	cbz	r4, 800beca <_Bfree+0x3a>
 800beba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bebc:	6862      	ldr	r2, [r4, #4]
 800bebe:	68db      	ldr	r3, [r3, #12]
 800bec0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bec4:	6021      	str	r1, [r4, #0]
 800bec6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800beca:	bd70      	pop	{r4, r5, r6, pc}
 800becc:	0800e6a6 	.word	0x0800e6a6
 800bed0:	0800e810 	.word	0x0800e810

0800bed4 <__multadd>:
 800bed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bed8:	690e      	ldr	r6, [r1, #16]
 800beda:	4607      	mov	r7, r0
 800bedc:	4698      	mov	r8, r3
 800bede:	460c      	mov	r4, r1
 800bee0:	f101 0014 	add.w	r0, r1, #20
 800bee4:	2300      	movs	r3, #0
 800bee6:	6805      	ldr	r5, [r0, #0]
 800bee8:	b2a9      	uxth	r1, r5
 800beea:	fb02 8101 	mla	r1, r2, r1, r8
 800beee:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800bef2:	0c2d      	lsrs	r5, r5, #16
 800bef4:	fb02 c505 	mla	r5, r2, r5, ip
 800bef8:	b289      	uxth	r1, r1
 800befa:	3301      	adds	r3, #1
 800befc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800bf00:	429e      	cmp	r6, r3
 800bf02:	f840 1b04 	str.w	r1, [r0], #4
 800bf06:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800bf0a:	dcec      	bgt.n	800bee6 <__multadd+0x12>
 800bf0c:	f1b8 0f00 	cmp.w	r8, #0
 800bf10:	d022      	beq.n	800bf58 <__multadd+0x84>
 800bf12:	68a3      	ldr	r3, [r4, #8]
 800bf14:	42b3      	cmp	r3, r6
 800bf16:	dc19      	bgt.n	800bf4c <__multadd+0x78>
 800bf18:	6861      	ldr	r1, [r4, #4]
 800bf1a:	4638      	mov	r0, r7
 800bf1c:	3101      	adds	r1, #1
 800bf1e:	f7ff ff77 	bl	800be10 <_Balloc>
 800bf22:	4605      	mov	r5, r0
 800bf24:	b928      	cbnz	r0, 800bf32 <__multadd+0x5e>
 800bf26:	4602      	mov	r2, r0
 800bf28:	4b0d      	ldr	r3, [pc, #52]	; (800bf60 <__multadd+0x8c>)
 800bf2a:	480e      	ldr	r0, [pc, #56]	; (800bf64 <__multadd+0x90>)
 800bf2c:	21b5      	movs	r1, #181	; 0xb5
 800bf2e:	f001 f815 	bl	800cf5c <__assert_func>
 800bf32:	6922      	ldr	r2, [r4, #16]
 800bf34:	3202      	adds	r2, #2
 800bf36:	f104 010c 	add.w	r1, r4, #12
 800bf3a:	0092      	lsls	r2, r2, #2
 800bf3c:	300c      	adds	r0, #12
 800bf3e:	f7fc fb63 	bl	8008608 <memcpy>
 800bf42:	4621      	mov	r1, r4
 800bf44:	4638      	mov	r0, r7
 800bf46:	f7ff ffa3 	bl	800be90 <_Bfree>
 800bf4a:	462c      	mov	r4, r5
 800bf4c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800bf50:	3601      	adds	r6, #1
 800bf52:	f8c3 8014 	str.w	r8, [r3, #20]
 800bf56:	6126      	str	r6, [r4, #16]
 800bf58:	4620      	mov	r0, r4
 800bf5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf5e:	bf00      	nop
 800bf60:	0800e71c 	.word	0x0800e71c
 800bf64:	0800e810 	.word	0x0800e810

0800bf68 <__s2b>:
 800bf68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf6c:	460c      	mov	r4, r1
 800bf6e:	4615      	mov	r5, r2
 800bf70:	461f      	mov	r7, r3
 800bf72:	2209      	movs	r2, #9
 800bf74:	3308      	adds	r3, #8
 800bf76:	4606      	mov	r6, r0
 800bf78:	fb93 f3f2 	sdiv	r3, r3, r2
 800bf7c:	2100      	movs	r1, #0
 800bf7e:	2201      	movs	r2, #1
 800bf80:	429a      	cmp	r2, r3
 800bf82:	db09      	blt.n	800bf98 <__s2b+0x30>
 800bf84:	4630      	mov	r0, r6
 800bf86:	f7ff ff43 	bl	800be10 <_Balloc>
 800bf8a:	b940      	cbnz	r0, 800bf9e <__s2b+0x36>
 800bf8c:	4602      	mov	r2, r0
 800bf8e:	4b19      	ldr	r3, [pc, #100]	; (800bff4 <__s2b+0x8c>)
 800bf90:	4819      	ldr	r0, [pc, #100]	; (800bff8 <__s2b+0x90>)
 800bf92:	21ce      	movs	r1, #206	; 0xce
 800bf94:	f000 ffe2 	bl	800cf5c <__assert_func>
 800bf98:	0052      	lsls	r2, r2, #1
 800bf9a:	3101      	adds	r1, #1
 800bf9c:	e7f0      	b.n	800bf80 <__s2b+0x18>
 800bf9e:	9b08      	ldr	r3, [sp, #32]
 800bfa0:	6143      	str	r3, [r0, #20]
 800bfa2:	2d09      	cmp	r5, #9
 800bfa4:	f04f 0301 	mov.w	r3, #1
 800bfa8:	6103      	str	r3, [r0, #16]
 800bfaa:	dd16      	ble.n	800bfda <__s2b+0x72>
 800bfac:	f104 0909 	add.w	r9, r4, #9
 800bfb0:	46c8      	mov	r8, r9
 800bfb2:	442c      	add	r4, r5
 800bfb4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bfb8:	4601      	mov	r1, r0
 800bfba:	3b30      	subs	r3, #48	; 0x30
 800bfbc:	220a      	movs	r2, #10
 800bfbe:	4630      	mov	r0, r6
 800bfc0:	f7ff ff88 	bl	800bed4 <__multadd>
 800bfc4:	45a0      	cmp	r8, r4
 800bfc6:	d1f5      	bne.n	800bfb4 <__s2b+0x4c>
 800bfc8:	f1a5 0408 	sub.w	r4, r5, #8
 800bfcc:	444c      	add	r4, r9
 800bfce:	1b2d      	subs	r5, r5, r4
 800bfd0:	1963      	adds	r3, r4, r5
 800bfd2:	42bb      	cmp	r3, r7
 800bfd4:	db04      	blt.n	800bfe0 <__s2b+0x78>
 800bfd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bfda:	340a      	adds	r4, #10
 800bfdc:	2509      	movs	r5, #9
 800bfde:	e7f6      	b.n	800bfce <__s2b+0x66>
 800bfe0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bfe4:	4601      	mov	r1, r0
 800bfe6:	3b30      	subs	r3, #48	; 0x30
 800bfe8:	220a      	movs	r2, #10
 800bfea:	4630      	mov	r0, r6
 800bfec:	f7ff ff72 	bl	800bed4 <__multadd>
 800bff0:	e7ee      	b.n	800bfd0 <__s2b+0x68>
 800bff2:	bf00      	nop
 800bff4:	0800e71c 	.word	0x0800e71c
 800bff8:	0800e810 	.word	0x0800e810

0800bffc <__hi0bits>:
 800bffc:	0c03      	lsrs	r3, r0, #16
 800bffe:	041b      	lsls	r3, r3, #16
 800c000:	b9d3      	cbnz	r3, 800c038 <__hi0bits+0x3c>
 800c002:	0400      	lsls	r0, r0, #16
 800c004:	2310      	movs	r3, #16
 800c006:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c00a:	bf04      	itt	eq
 800c00c:	0200      	lsleq	r0, r0, #8
 800c00e:	3308      	addeq	r3, #8
 800c010:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c014:	bf04      	itt	eq
 800c016:	0100      	lsleq	r0, r0, #4
 800c018:	3304      	addeq	r3, #4
 800c01a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c01e:	bf04      	itt	eq
 800c020:	0080      	lsleq	r0, r0, #2
 800c022:	3302      	addeq	r3, #2
 800c024:	2800      	cmp	r0, #0
 800c026:	db05      	blt.n	800c034 <__hi0bits+0x38>
 800c028:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c02c:	f103 0301 	add.w	r3, r3, #1
 800c030:	bf08      	it	eq
 800c032:	2320      	moveq	r3, #32
 800c034:	4618      	mov	r0, r3
 800c036:	4770      	bx	lr
 800c038:	2300      	movs	r3, #0
 800c03a:	e7e4      	b.n	800c006 <__hi0bits+0xa>

0800c03c <__lo0bits>:
 800c03c:	6803      	ldr	r3, [r0, #0]
 800c03e:	f013 0207 	ands.w	r2, r3, #7
 800c042:	4601      	mov	r1, r0
 800c044:	d00b      	beq.n	800c05e <__lo0bits+0x22>
 800c046:	07da      	lsls	r2, r3, #31
 800c048:	d424      	bmi.n	800c094 <__lo0bits+0x58>
 800c04a:	0798      	lsls	r0, r3, #30
 800c04c:	bf49      	itett	mi
 800c04e:	085b      	lsrmi	r3, r3, #1
 800c050:	089b      	lsrpl	r3, r3, #2
 800c052:	2001      	movmi	r0, #1
 800c054:	600b      	strmi	r3, [r1, #0]
 800c056:	bf5c      	itt	pl
 800c058:	600b      	strpl	r3, [r1, #0]
 800c05a:	2002      	movpl	r0, #2
 800c05c:	4770      	bx	lr
 800c05e:	b298      	uxth	r0, r3
 800c060:	b9b0      	cbnz	r0, 800c090 <__lo0bits+0x54>
 800c062:	0c1b      	lsrs	r3, r3, #16
 800c064:	2010      	movs	r0, #16
 800c066:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c06a:	bf04      	itt	eq
 800c06c:	0a1b      	lsreq	r3, r3, #8
 800c06e:	3008      	addeq	r0, #8
 800c070:	071a      	lsls	r2, r3, #28
 800c072:	bf04      	itt	eq
 800c074:	091b      	lsreq	r3, r3, #4
 800c076:	3004      	addeq	r0, #4
 800c078:	079a      	lsls	r2, r3, #30
 800c07a:	bf04      	itt	eq
 800c07c:	089b      	lsreq	r3, r3, #2
 800c07e:	3002      	addeq	r0, #2
 800c080:	07da      	lsls	r2, r3, #31
 800c082:	d403      	bmi.n	800c08c <__lo0bits+0x50>
 800c084:	085b      	lsrs	r3, r3, #1
 800c086:	f100 0001 	add.w	r0, r0, #1
 800c08a:	d005      	beq.n	800c098 <__lo0bits+0x5c>
 800c08c:	600b      	str	r3, [r1, #0]
 800c08e:	4770      	bx	lr
 800c090:	4610      	mov	r0, r2
 800c092:	e7e8      	b.n	800c066 <__lo0bits+0x2a>
 800c094:	2000      	movs	r0, #0
 800c096:	4770      	bx	lr
 800c098:	2020      	movs	r0, #32
 800c09a:	4770      	bx	lr

0800c09c <__i2b>:
 800c09c:	b510      	push	{r4, lr}
 800c09e:	460c      	mov	r4, r1
 800c0a0:	2101      	movs	r1, #1
 800c0a2:	f7ff feb5 	bl	800be10 <_Balloc>
 800c0a6:	4602      	mov	r2, r0
 800c0a8:	b928      	cbnz	r0, 800c0b6 <__i2b+0x1a>
 800c0aa:	4b05      	ldr	r3, [pc, #20]	; (800c0c0 <__i2b+0x24>)
 800c0ac:	4805      	ldr	r0, [pc, #20]	; (800c0c4 <__i2b+0x28>)
 800c0ae:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c0b2:	f000 ff53 	bl	800cf5c <__assert_func>
 800c0b6:	2301      	movs	r3, #1
 800c0b8:	6144      	str	r4, [r0, #20]
 800c0ba:	6103      	str	r3, [r0, #16]
 800c0bc:	bd10      	pop	{r4, pc}
 800c0be:	bf00      	nop
 800c0c0:	0800e71c 	.word	0x0800e71c
 800c0c4:	0800e810 	.word	0x0800e810

0800c0c8 <__multiply>:
 800c0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0cc:	4614      	mov	r4, r2
 800c0ce:	690a      	ldr	r2, [r1, #16]
 800c0d0:	6923      	ldr	r3, [r4, #16]
 800c0d2:	429a      	cmp	r2, r3
 800c0d4:	bfb8      	it	lt
 800c0d6:	460b      	movlt	r3, r1
 800c0d8:	460d      	mov	r5, r1
 800c0da:	bfbc      	itt	lt
 800c0dc:	4625      	movlt	r5, r4
 800c0de:	461c      	movlt	r4, r3
 800c0e0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800c0e4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c0e8:	68ab      	ldr	r3, [r5, #8]
 800c0ea:	6869      	ldr	r1, [r5, #4]
 800c0ec:	eb0a 0709 	add.w	r7, sl, r9
 800c0f0:	42bb      	cmp	r3, r7
 800c0f2:	b085      	sub	sp, #20
 800c0f4:	bfb8      	it	lt
 800c0f6:	3101      	addlt	r1, #1
 800c0f8:	f7ff fe8a 	bl	800be10 <_Balloc>
 800c0fc:	b930      	cbnz	r0, 800c10c <__multiply+0x44>
 800c0fe:	4602      	mov	r2, r0
 800c100:	4b42      	ldr	r3, [pc, #264]	; (800c20c <__multiply+0x144>)
 800c102:	4843      	ldr	r0, [pc, #268]	; (800c210 <__multiply+0x148>)
 800c104:	f240 115d 	movw	r1, #349	; 0x15d
 800c108:	f000 ff28 	bl	800cf5c <__assert_func>
 800c10c:	f100 0614 	add.w	r6, r0, #20
 800c110:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800c114:	4633      	mov	r3, r6
 800c116:	2200      	movs	r2, #0
 800c118:	4543      	cmp	r3, r8
 800c11a:	d31e      	bcc.n	800c15a <__multiply+0x92>
 800c11c:	f105 0c14 	add.w	ip, r5, #20
 800c120:	f104 0314 	add.w	r3, r4, #20
 800c124:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800c128:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800c12c:	9202      	str	r2, [sp, #8]
 800c12e:	ebac 0205 	sub.w	r2, ip, r5
 800c132:	3a15      	subs	r2, #21
 800c134:	f022 0203 	bic.w	r2, r2, #3
 800c138:	3204      	adds	r2, #4
 800c13a:	f105 0115 	add.w	r1, r5, #21
 800c13e:	458c      	cmp	ip, r1
 800c140:	bf38      	it	cc
 800c142:	2204      	movcc	r2, #4
 800c144:	9201      	str	r2, [sp, #4]
 800c146:	9a02      	ldr	r2, [sp, #8]
 800c148:	9303      	str	r3, [sp, #12]
 800c14a:	429a      	cmp	r2, r3
 800c14c:	d808      	bhi.n	800c160 <__multiply+0x98>
 800c14e:	2f00      	cmp	r7, #0
 800c150:	dc55      	bgt.n	800c1fe <__multiply+0x136>
 800c152:	6107      	str	r7, [r0, #16]
 800c154:	b005      	add	sp, #20
 800c156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c15a:	f843 2b04 	str.w	r2, [r3], #4
 800c15e:	e7db      	b.n	800c118 <__multiply+0x50>
 800c160:	f8b3 a000 	ldrh.w	sl, [r3]
 800c164:	f1ba 0f00 	cmp.w	sl, #0
 800c168:	d020      	beq.n	800c1ac <__multiply+0xe4>
 800c16a:	f105 0e14 	add.w	lr, r5, #20
 800c16e:	46b1      	mov	r9, r6
 800c170:	2200      	movs	r2, #0
 800c172:	f85e 4b04 	ldr.w	r4, [lr], #4
 800c176:	f8d9 b000 	ldr.w	fp, [r9]
 800c17a:	b2a1      	uxth	r1, r4
 800c17c:	fa1f fb8b 	uxth.w	fp, fp
 800c180:	fb0a b101 	mla	r1, sl, r1, fp
 800c184:	4411      	add	r1, r2
 800c186:	f8d9 2000 	ldr.w	r2, [r9]
 800c18a:	0c24      	lsrs	r4, r4, #16
 800c18c:	0c12      	lsrs	r2, r2, #16
 800c18e:	fb0a 2404 	mla	r4, sl, r4, r2
 800c192:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800c196:	b289      	uxth	r1, r1
 800c198:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800c19c:	45f4      	cmp	ip, lr
 800c19e:	f849 1b04 	str.w	r1, [r9], #4
 800c1a2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800c1a6:	d8e4      	bhi.n	800c172 <__multiply+0xaa>
 800c1a8:	9901      	ldr	r1, [sp, #4]
 800c1aa:	5072      	str	r2, [r6, r1]
 800c1ac:	9a03      	ldr	r2, [sp, #12]
 800c1ae:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c1b2:	3304      	adds	r3, #4
 800c1b4:	f1b9 0f00 	cmp.w	r9, #0
 800c1b8:	d01f      	beq.n	800c1fa <__multiply+0x132>
 800c1ba:	6834      	ldr	r4, [r6, #0]
 800c1bc:	f105 0114 	add.w	r1, r5, #20
 800c1c0:	46b6      	mov	lr, r6
 800c1c2:	f04f 0a00 	mov.w	sl, #0
 800c1c6:	880a      	ldrh	r2, [r1, #0]
 800c1c8:	f8be b002 	ldrh.w	fp, [lr, #2]
 800c1cc:	fb09 b202 	mla	r2, r9, r2, fp
 800c1d0:	4492      	add	sl, r2
 800c1d2:	b2a4      	uxth	r4, r4
 800c1d4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800c1d8:	f84e 4b04 	str.w	r4, [lr], #4
 800c1dc:	f851 4b04 	ldr.w	r4, [r1], #4
 800c1e0:	f8be 2000 	ldrh.w	r2, [lr]
 800c1e4:	0c24      	lsrs	r4, r4, #16
 800c1e6:	fb09 2404 	mla	r4, r9, r4, r2
 800c1ea:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800c1ee:	458c      	cmp	ip, r1
 800c1f0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800c1f4:	d8e7      	bhi.n	800c1c6 <__multiply+0xfe>
 800c1f6:	9a01      	ldr	r2, [sp, #4]
 800c1f8:	50b4      	str	r4, [r6, r2]
 800c1fa:	3604      	adds	r6, #4
 800c1fc:	e7a3      	b.n	800c146 <__multiply+0x7e>
 800c1fe:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c202:	2b00      	cmp	r3, #0
 800c204:	d1a5      	bne.n	800c152 <__multiply+0x8a>
 800c206:	3f01      	subs	r7, #1
 800c208:	e7a1      	b.n	800c14e <__multiply+0x86>
 800c20a:	bf00      	nop
 800c20c:	0800e71c 	.word	0x0800e71c
 800c210:	0800e810 	.word	0x0800e810

0800c214 <__pow5mult>:
 800c214:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c218:	4615      	mov	r5, r2
 800c21a:	f012 0203 	ands.w	r2, r2, #3
 800c21e:	4606      	mov	r6, r0
 800c220:	460f      	mov	r7, r1
 800c222:	d007      	beq.n	800c234 <__pow5mult+0x20>
 800c224:	4c25      	ldr	r4, [pc, #148]	; (800c2bc <__pow5mult+0xa8>)
 800c226:	3a01      	subs	r2, #1
 800c228:	2300      	movs	r3, #0
 800c22a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c22e:	f7ff fe51 	bl	800bed4 <__multadd>
 800c232:	4607      	mov	r7, r0
 800c234:	10ad      	asrs	r5, r5, #2
 800c236:	d03d      	beq.n	800c2b4 <__pow5mult+0xa0>
 800c238:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c23a:	b97c      	cbnz	r4, 800c25c <__pow5mult+0x48>
 800c23c:	2010      	movs	r0, #16
 800c23e:	f7ff fdcd 	bl	800bddc <malloc>
 800c242:	4602      	mov	r2, r0
 800c244:	6270      	str	r0, [r6, #36]	; 0x24
 800c246:	b928      	cbnz	r0, 800c254 <__pow5mult+0x40>
 800c248:	4b1d      	ldr	r3, [pc, #116]	; (800c2c0 <__pow5mult+0xac>)
 800c24a:	481e      	ldr	r0, [pc, #120]	; (800c2c4 <__pow5mult+0xb0>)
 800c24c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c250:	f000 fe84 	bl	800cf5c <__assert_func>
 800c254:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c258:	6004      	str	r4, [r0, #0]
 800c25a:	60c4      	str	r4, [r0, #12]
 800c25c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c260:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c264:	b94c      	cbnz	r4, 800c27a <__pow5mult+0x66>
 800c266:	f240 2171 	movw	r1, #625	; 0x271
 800c26a:	4630      	mov	r0, r6
 800c26c:	f7ff ff16 	bl	800c09c <__i2b>
 800c270:	2300      	movs	r3, #0
 800c272:	f8c8 0008 	str.w	r0, [r8, #8]
 800c276:	4604      	mov	r4, r0
 800c278:	6003      	str	r3, [r0, #0]
 800c27a:	f04f 0900 	mov.w	r9, #0
 800c27e:	07eb      	lsls	r3, r5, #31
 800c280:	d50a      	bpl.n	800c298 <__pow5mult+0x84>
 800c282:	4639      	mov	r1, r7
 800c284:	4622      	mov	r2, r4
 800c286:	4630      	mov	r0, r6
 800c288:	f7ff ff1e 	bl	800c0c8 <__multiply>
 800c28c:	4639      	mov	r1, r7
 800c28e:	4680      	mov	r8, r0
 800c290:	4630      	mov	r0, r6
 800c292:	f7ff fdfd 	bl	800be90 <_Bfree>
 800c296:	4647      	mov	r7, r8
 800c298:	106d      	asrs	r5, r5, #1
 800c29a:	d00b      	beq.n	800c2b4 <__pow5mult+0xa0>
 800c29c:	6820      	ldr	r0, [r4, #0]
 800c29e:	b938      	cbnz	r0, 800c2b0 <__pow5mult+0x9c>
 800c2a0:	4622      	mov	r2, r4
 800c2a2:	4621      	mov	r1, r4
 800c2a4:	4630      	mov	r0, r6
 800c2a6:	f7ff ff0f 	bl	800c0c8 <__multiply>
 800c2aa:	6020      	str	r0, [r4, #0]
 800c2ac:	f8c0 9000 	str.w	r9, [r0]
 800c2b0:	4604      	mov	r4, r0
 800c2b2:	e7e4      	b.n	800c27e <__pow5mult+0x6a>
 800c2b4:	4638      	mov	r0, r7
 800c2b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2ba:	bf00      	nop
 800c2bc:	0800e960 	.word	0x0800e960
 800c2c0:	0800e6a6 	.word	0x0800e6a6
 800c2c4:	0800e810 	.word	0x0800e810

0800c2c8 <__lshift>:
 800c2c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2cc:	460c      	mov	r4, r1
 800c2ce:	6849      	ldr	r1, [r1, #4]
 800c2d0:	6923      	ldr	r3, [r4, #16]
 800c2d2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c2d6:	68a3      	ldr	r3, [r4, #8]
 800c2d8:	4607      	mov	r7, r0
 800c2da:	4691      	mov	r9, r2
 800c2dc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c2e0:	f108 0601 	add.w	r6, r8, #1
 800c2e4:	42b3      	cmp	r3, r6
 800c2e6:	db0b      	blt.n	800c300 <__lshift+0x38>
 800c2e8:	4638      	mov	r0, r7
 800c2ea:	f7ff fd91 	bl	800be10 <_Balloc>
 800c2ee:	4605      	mov	r5, r0
 800c2f0:	b948      	cbnz	r0, 800c306 <__lshift+0x3e>
 800c2f2:	4602      	mov	r2, r0
 800c2f4:	4b28      	ldr	r3, [pc, #160]	; (800c398 <__lshift+0xd0>)
 800c2f6:	4829      	ldr	r0, [pc, #164]	; (800c39c <__lshift+0xd4>)
 800c2f8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c2fc:	f000 fe2e 	bl	800cf5c <__assert_func>
 800c300:	3101      	adds	r1, #1
 800c302:	005b      	lsls	r3, r3, #1
 800c304:	e7ee      	b.n	800c2e4 <__lshift+0x1c>
 800c306:	2300      	movs	r3, #0
 800c308:	f100 0114 	add.w	r1, r0, #20
 800c30c:	f100 0210 	add.w	r2, r0, #16
 800c310:	4618      	mov	r0, r3
 800c312:	4553      	cmp	r3, sl
 800c314:	db33      	blt.n	800c37e <__lshift+0xb6>
 800c316:	6920      	ldr	r0, [r4, #16]
 800c318:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c31c:	f104 0314 	add.w	r3, r4, #20
 800c320:	f019 091f 	ands.w	r9, r9, #31
 800c324:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c328:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c32c:	d02b      	beq.n	800c386 <__lshift+0xbe>
 800c32e:	f1c9 0e20 	rsb	lr, r9, #32
 800c332:	468a      	mov	sl, r1
 800c334:	2200      	movs	r2, #0
 800c336:	6818      	ldr	r0, [r3, #0]
 800c338:	fa00 f009 	lsl.w	r0, r0, r9
 800c33c:	4302      	orrs	r2, r0
 800c33e:	f84a 2b04 	str.w	r2, [sl], #4
 800c342:	f853 2b04 	ldr.w	r2, [r3], #4
 800c346:	459c      	cmp	ip, r3
 800c348:	fa22 f20e 	lsr.w	r2, r2, lr
 800c34c:	d8f3      	bhi.n	800c336 <__lshift+0x6e>
 800c34e:	ebac 0304 	sub.w	r3, ip, r4
 800c352:	3b15      	subs	r3, #21
 800c354:	f023 0303 	bic.w	r3, r3, #3
 800c358:	3304      	adds	r3, #4
 800c35a:	f104 0015 	add.w	r0, r4, #21
 800c35e:	4584      	cmp	ip, r0
 800c360:	bf38      	it	cc
 800c362:	2304      	movcc	r3, #4
 800c364:	50ca      	str	r2, [r1, r3]
 800c366:	b10a      	cbz	r2, 800c36c <__lshift+0xa4>
 800c368:	f108 0602 	add.w	r6, r8, #2
 800c36c:	3e01      	subs	r6, #1
 800c36e:	4638      	mov	r0, r7
 800c370:	612e      	str	r6, [r5, #16]
 800c372:	4621      	mov	r1, r4
 800c374:	f7ff fd8c 	bl	800be90 <_Bfree>
 800c378:	4628      	mov	r0, r5
 800c37a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c37e:	f842 0f04 	str.w	r0, [r2, #4]!
 800c382:	3301      	adds	r3, #1
 800c384:	e7c5      	b.n	800c312 <__lshift+0x4a>
 800c386:	3904      	subs	r1, #4
 800c388:	f853 2b04 	ldr.w	r2, [r3], #4
 800c38c:	f841 2f04 	str.w	r2, [r1, #4]!
 800c390:	459c      	cmp	ip, r3
 800c392:	d8f9      	bhi.n	800c388 <__lshift+0xc0>
 800c394:	e7ea      	b.n	800c36c <__lshift+0xa4>
 800c396:	bf00      	nop
 800c398:	0800e71c 	.word	0x0800e71c
 800c39c:	0800e810 	.word	0x0800e810

0800c3a0 <__mcmp>:
 800c3a0:	b530      	push	{r4, r5, lr}
 800c3a2:	6902      	ldr	r2, [r0, #16]
 800c3a4:	690c      	ldr	r4, [r1, #16]
 800c3a6:	1b12      	subs	r2, r2, r4
 800c3a8:	d10e      	bne.n	800c3c8 <__mcmp+0x28>
 800c3aa:	f100 0314 	add.w	r3, r0, #20
 800c3ae:	3114      	adds	r1, #20
 800c3b0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c3b4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c3b8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c3bc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c3c0:	42a5      	cmp	r5, r4
 800c3c2:	d003      	beq.n	800c3cc <__mcmp+0x2c>
 800c3c4:	d305      	bcc.n	800c3d2 <__mcmp+0x32>
 800c3c6:	2201      	movs	r2, #1
 800c3c8:	4610      	mov	r0, r2
 800c3ca:	bd30      	pop	{r4, r5, pc}
 800c3cc:	4283      	cmp	r3, r0
 800c3ce:	d3f3      	bcc.n	800c3b8 <__mcmp+0x18>
 800c3d0:	e7fa      	b.n	800c3c8 <__mcmp+0x28>
 800c3d2:	f04f 32ff 	mov.w	r2, #4294967295
 800c3d6:	e7f7      	b.n	800c3c8 <__mcmp+0x28>

0800c3d8 <__mdiff>:
 800c3d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3dc:	460c      	mov	r4, r1
 800c3de:	4606      	mov	r6, r0
 800c3e0:	4611      	mov	r1, r2
 800c3e2:	4620      	mov	r0, r4
 800c3e4:	4617      	mov	r7, r2
 800c3e6:	f7ff ffdb 	bl	800c3a0 <__mcmp>
 800c3ea:	1e05      	subs	r5, r0, #0
 800c3ec:	d110      	bne.n	800c410 <__mdiff+0x38>
 800c3ee:	4629      	mov	r1, r5
 800c3f0:	4630      	mov	r0, r6
 800c3f2:	f7ff fd0d 	bl	800be10 <_Balloc>
 800c3f6:	b930      	cbnz	r0, 800c406 <__mdiff+0x2e>
 800c3f8:	4b39      	ldr	r3, [pc, #228]	; (800c4e0 <__mdiff+0x108>)
 800c3fa:	4602      	mov	r2, r0
 800c3fc:	f240 2132 	movw	r1, #562	; 0x232
 800c400:	4838      	ldr	r0, [pc, #224]	; (800c4e4 <__mdiff+0x10c>)
 800c402:	f000 fdab 	bl	800cf5c <__assert_func>
 800c406:	2301      	movs	r3, #1
 800c408:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c40c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c410:	bfa4      	itt	ge
 800c412:	463b      	movge	r3, r7
 800c414:	4627      	movge	r7, r4
 800c416:	4630      	mov	r0, r6
 800c418:	6879      	ldr	r1, [r7, #4]
 800c41a:	bfa6      	itte	ge
 800c41c:	461c      	movge	r4, r3
 800c41e:	2500      	movge	r5, #0
 800c420:	2501      	movlt	r5, #1
 800c422:	f7ff fcf5 	bl	800be10 <_Balloc>
 800c426:	b920      	cbnz	r0, 800c432 <__mdiff+0x5a>
 800c428:	4b2d      	ldr	r3, [pc, #180]	; (800c4e0 <__mdiff+0x108>)
 800c42a:	4602      	mov	r2, r0
 800c42c:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c430:	e7e6      	b.n	800c400 <__mdiff+0x28>
 800c432:	693e      	ldr	r6, [r7, #16]
 800c434:	60c5      	str	r5, [r0, #12]
 800c436:	6925      	ldr	r5, [r4, #16]
 800c438:	f107 0114 	add.w	r1, r7, #20
 800c43c:	f104 0914 	add.w	r9, r4, #20
 800c440:	f100 0e14 	add.w	lr, r0, #20
 800c444:	f107 0210 	add.w	r2, r7, #16
 800c448:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800c44c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800c450:	46f2      	mov	sl, lr
 800c452:	2700      	movs	r7, #0
 800c454:	f859 3b04 	ldr.w	r3, [r9], #4
 800c458:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c45c:	fa1f f883 	uxth.w	r8, r3
 800c460:	fa17 f78b 	uxtah	r7, r7, fp
 800c464:	0c1b      	lsrs	r3, r3, #16
 800c466:	eba7 0808 	sub.w	r8, r7, r8
 800c46a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c46e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c472:	fa1f f888 	uxth.w	r8, r8
 800c476:	141f      	asrs	r7, r3, #16
 800c478:	454d      	cmp	r5, r9
 800c47a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c47e:	f84a 3b04 	str.w	r3, [sl], #4
 800c482:	d8e7      	bhi.n	800c454 <__mdiff+0x7c>
 800c484:	1b2b      	subs	r3, r5, r4
 800c486:	3b15      	subs	r3, #21
 800c488:	f023 0303 	bic.w	r3, r3, #3
 800c48c:	3304      	adds	r3, #4
 800c48e:	3415      	adds	r4, #21
 800c490:	42a5      	cmp	r5, r4
 800c492:	bf38      	it	cc
 800c494:	2304      	movcc	r3, #4
 800c496:	4419      	add	r1, r3
 800c498:	4473      	add	r3, lr
 800c49a:	469e      	mov	lr, r3
 800c49c:	460d      	mov	r5, r1
 800c49e:	4565      	cmp	r5, ip
 800c4a0:	d30e      	bcc.n	800c4c0 <__mdiff+0xe8>
 800c4a2:	f10c 0203 	add.w	r2, ip, #3
 800c4a6:	1a52      	subs	r2, r2, r1
 800c4a8:	f022 0203 	bic.w	r2, r2, #3
 800c4ac:	3903      	subs	r1, #3
 800c4ae:	458c      	cmp	ip, r1
 800c4b0:	bf38      	it	cc
 800c4b2:	2200      	movcc	r2, #0
 800c4b4:	441a      	add	r2, r3
 800c4b6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c4ba:	b17b      	cbz	r3, 800c4dc <__mdiff+0x104>
 800c4bc:	6106      	str	r6, [r0, #16]
 800c4be:	e7a5      	b.n	800c40c <__mdiff+0x34>
 800c4c0:	f855 8b04 	ldr.w	r8, [r5], #4
 800c4c4:	fa17 f488 	uxtah	r4, r7, r8
 800c4c8:	1422      	asrs	r2, r4, #16
 800c4ca:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800c4ce:	b2a4      	uxth	r4, r4
 800c4d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800c4d4:	f84e 4b04 	str.w	r4, [lr], #4
 800c4d8:	1417      	asrs	r7, r2, #16
 800c4da:	e7e0      	b.n	800c49e <__mdiff+0xc6>
 800c4dc:	3e01      	subs	r6, #1
 800c4de:	e7ea      	b.n	800c4b6 <__mdiff+0xde>
 800c4e0:	0800e71c 	.word	0x0800e71c
 800c4e4:	0800e810 	.word	0x0800e810

0800c4e8 <__ulp>:
 800c4e8:	b082      	sub	sp, #8
 800c4ea:	ed8d 0b00 	vstr	d0, [sp]
 800c4ee:	9b01      	ldr	r3, [sp, #4]
 800c4f0:	4912      	ldr	r1, [pc, #72]	; (800c53c <__ulp+0x54>)
 800c4f2:	4019      	ands	r1, r3
 800c4f4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800c4f8:	2900      	cmp	r1, #0
 800c4fa:	dd05      	ble.n	800c508 <__ulp+0x20>
 800c4fc:	2200      	movs	r2, #0
 800c4fe:	460b      	mov	r3, r1
 800c500:	ec43 2b10 	vmov	d0, r2, r3
 800c504:	b002      	add	sp, #8
 800c506:	4770      	bx	lr
 800c508:	4249      	negs	r1, r1
 800c50a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800c50e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800c512:	f04f 0200 	mov.w	r2, #0
 800c516:	f04f 0300 	mov.w	r3, #0
 800c51a:	da04      	bge.n	800c526 <__ulp+0x3e>
 800c51c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c520:	fa41 f300 	asr.w	r3, r1, r0
 800c524:	e7ec      	b.n	800c500 <__ulp+0x18>
 800c526:	f1a0 0114 	sub.w	r1, r0, #20
 800c52a:	291e      	cmp	r1, #30
 800c52c:	bfda      	itte	le
 800c52e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800c532:	fa20 f101 	lsrle.w	r1, r0, r1
 800c536:	2101      	movgt	r1, #1
 800c538:	460a      	mov	r2, r1
 800c53a:	e7e1      	b.n	800c500 <__ulp+0x18>
 800c53c:	7ff00000 	.word	0x7ff00000

0800c540 <__b2d>:
 800c540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c542:	6905      	ldr	r5, [r0, #16]
 800c544:	f100 0714 	add.w	r7, r0, #20
 800c548:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c54c:	1f2e      	subs	r6, r5, #4
 800c54e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c552:	4620      	mov	r0, r4
 800c554:	f7ff fd52 	bl	800bffc <__hi0bits>
 800c558:	f1c0 0320 	rsb	r3, r0, #32
 800c55c:	280a      	cmp	r0, #10
 800c55e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800c5dc <__b2d+0x9c>
 800c562:	600b      	str	r3, [r1, #0]
 800c564:	dc14      	bgt.n	800c590 <__b2d+0x50>
 800c566:	f1c0 0e0b 	rsb	lr, r0, #11
 800c56a:	fa24 f10e 	lsr.w	r1, r4, lr
 800c56e:	42b7      	cmp	r7, r6
 800c570:	ea41 030c 	orr.w	r3, r1, ip
 800c574:	bf34      	ite	cc
 800c576:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c57a:	2100      	movcs	r1, #0
 800c57c:	3015      	adds	r0, #21
 800c57e:	fa04 f000 	lsl.w	r0, r4, r0
 800c582:	fa21 f10e 	lsr.w	r1, r1, lr
 800c586:	ea40 0201 	orr.w	r2, r0, r1
 800c58a:	ec43 2b10 	vmov	d0, r2, r3
 800c58e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c590:	42b7      	cmp	r7, r6
 800c592:	bf3a      	itte	cc
 800c594:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c598:	f1a5 0608 	subcc.w	r6, r5, #8
 800c59c:	2100      	movcs	r1, #0
 800c59e:	380b      	subs	r0, #11
 800c5a0:	d017      	beq.n	800c5d2 <__b2d+0x92>
 800c5a2:	f1c0 0c20 	rsb	ip, r0, #32
 800c5a6:	fa04 f500 	lsl.w	r5, r4, r0
 800c5aa:	42be      	cmp	r6, r7
 800c5ac:	fa21 f40c 	lsr.w	r4, r1, ip
 800c5b0:	ea45 0504 	orr.w	r5, r5, r4
 800c5b4:	bf8c      	ite	hi
 800c5b6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c5ba:	2400      	movls	r4, #0
 800c5bc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800c5c0:	fa01 f000 	lsl.w	r0, r1, r0
 800c5c4:	fa24 f40c 	lsr.w	r4, r4, ip
 800c5c8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c5cc:	ea40 0204 	orr.w	r2, r0, r4
 800c5d0:	e7db      	b.n	800c58a <__b2d+0x4a>
 800c5d2:	ea44 030c 	orr.w	r3, r4, ip
 800c5d6:	460a      	mov	r2, r1
 800c5d8:	e7d7      	b.n	800c58a <__b2d+0x4a>
 800c5da:	bf00      	nop
 800c5dc:	3ff00000 	.word	0x3ff00000

0800c5e0 <__d2b>:
 800c5e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c5e4:	4689      	mov	r9, r1
 800c5e6:	2101      	movs	r1, #1
 800c5e8:	ec57 6b10 	vmov	r6, r7, d0
 800c5ec:	4690      	mov	r8, r2
 800c5ee:	f7ff fc0f 	bl	800be10 <_Balloc>
 800c5f2:	4604      	mov	r4, r0
 800c5f4:	b930      	cbnz	r0, 800c604 <__d2b+0x24>
 800c5f6:	4602      	mov	r2, r0
 800c5f8:	4b25      	ldr	r3, [pc, #148]	; (800c690 <__d2b+0xb0>)
 800c5fa:	4826      	ldr	r0, [pc, #152]	; (800c694 <__d2b+0xb4>)
 800c5fc:	f240 310a 	movw	r1, #778	; 0x30a
 800c600:	f000 fcac 	bl	800cf5c <__assert_func>
 800c604:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c608:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c60c:	bb35      	cbnz	r5, 800c65c <__d2b+0x7c>
 800c60e:	2e00      	cmp	r6, #0
 800c610:	9301      	str	r3, [sp, #4]
 800c612:	d028      	beq.n	800c666 <__d2b+0x86>
 800c614:	4668      	mov	r0, sp
 800c616:	9600      	str	r6, [sp, #0]
 800c618:	f7ff fd10 	bl	800c03c <__lo0bits>
 800c61c:	9900      	ldr	r1, [sp, #0]
 800c61e:	b300      	cbz	r0, 800c662 <__d2b+0x82>
 800c620:	9a01      	ldr	r2, [sp, #4]
 800c622:	f1c0 0320 	rsb	r3, r0, #32
 800c626:	fa02 f303 	lsl.w	r3, r2, r3
 800c62a:	430b      	orrs	r3, r1
 800c62c:	40c2      	lsrs	r2, r0
 800c62e:	6163      	str	r3, [r4, #20]
 800c630:	9201      	str	r2, [sp, #4]
 800c632:	9b01      	ldr	r3, [sp, #4]
 800c634:	61a3      	str	r3, [r4, #24]
 800c636:	2b00      	cmp	r3, #0
 800c638:	bf14      	ite	ne
 800c63a:	2202      	movne	r2, #2
 800c63c:	2201      	moveq	r2, #1
 800c63e:	6122      	str	r2, [r4, #16]
 800c640:	b1d5      	cbz	r5, 800c678 <__d2b+0x98>
 800c642:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c646:	4405      	add	r5, r0
 800c648:	f8c9 5000 	str.w	r5, [r9]
 800c64c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c650:	f8c8 0000 	str.w	r0, [r8]
 800c654:	4620      	mov	r0, r4
 800c656:	b003      	add	sp, #12
 800c658:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c65c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c660:	e7d5      	b.n	800c60e <__d2b+0x2e>
 800c662:	6161      	str	r1, [r4, #20]
 800c664:	e7e5      	b.n	800c632 <__d2b+0x52>
 800c666:	a801      	add	r0, sp, #4
 800c668:	f7ff fce8 	bl	800c03c <__lo0bits>
 800c66c:	9b01      	ldr	r3, [sp, #4]
 800c66e:	6163      	str	r3, [r4, #20]
 800c670:	2201      	movs	r2, #1
 800c672:	6122      	str	r2, [r4, #16]
 800c674:	3020      	adds	r0, #32
 800c676:	e7e3      	b.n	800c640 <__d2b+0x60>
 800c678:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c67c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c680:	f8c9 0000 	str.w	r0, [r9]
 800c684:	6918      	ldr	r0, [r3, #16]
 800c686:	f7ff fcb9 	bl	800bffc <__hi0bits>
 800c68a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c68e:	e7df      	b.n	800c650 <__d2b+0x70>
 800c690:	0800e71c 	.word	0x0800e71c
 800c694:	0800e810 	.word	0x0800e810

0800c698 <__ratio>:
 800c698:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c69c:	4688      	mov	r8, r1
 800c69e:	4669      	mov	r1, sp
 800c6a0:	4681      	mov	r9, r0
 800c6a2:	f7ff ff4d 	bl	800c540 <__b2d>
 800c6a6:	a901      	add	r1, sp, #4
 800c6a8:	4640      	mov	r0, r8
 800c6aa:	ec55 4b10 	vmov	r4, r5, d0
 800c6ae:	f7ff ff47 	bl	800c540 <__b2d>
 800c6b2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c6b6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c6ba:	eba3 0c02 	sub.w	ip, r3, r2
 800c6be:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c6c2:	1a9b      	subs	r3, r3, r2
 800c6c4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c6c8:	ec51 0b10 	vmov	r0, r1, d0
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	bfd6      	itet	le
 800c6d0:	460a      	movle	r2, r1
 800c6d2:	462a      	movgt	r2, r5
 800c6d4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c6d8:	468b      	mov	fp, r1
 800c6da:	462f      	mov	r7, r5
 800c6dc:	bfd4      	ite	le
 800c6de:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c6e2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c6e6:	4620      	mov	r0, r4
 800c6e8:	ee10 2a10 	vmov	r2, s0
 800c6ec:	465b      	mov	r3, fp
 800c6ee:	4639      	mov	r1, r7
 800c6f0:	f7f4 f8ac 	bl	800084c <__aeabi_ddiv>
 800c6f4:	ec41 0b10 	vmov	d0, r0, r1
 800c6f8:	b003      	add	sp, #12
 800c6fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c6fe <__copybits>:
 800c6fe:	3901      	subs	r1, #1
 800c700:	b570      	push	{r4, r5, r6, lr}
 800c702:	1149      	asrs	r1, r1, #5
 800c704:	6914      	ldr	r4, [r2, #16]
 800c706:	3101      	adds	r1, #1
 800c708:	f102 0314 	add.w	r3, r2, #20
 800c70c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c710:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c714:	1f05      	subs	r5, r0, #4
 800c716:	42a3      	cmp	r3, r4
 800c718:	d30c      	bcc.n	800c734 <__copybits+0x36>
 800c71a:	1aa3      	subs	r3, r4, r2
 800c71c:	3b11      	subs	r3, #17
 800c71e:	f023 0303 	bic.w	r3, r3, #3
 800c722:	3211      	adds	r2, #17
 800c724:	42a2      	cmp	r2, r4
 800c726:	bf88      	it	hi
 800c728:	2300      	movhi	r3, #0
 800c72a:	4418      	add	r0, r3
 800c72c:	2300      	movs	r3, #0
 800c72e:	4288      	cmp	r0, r1
 800c730:	d305      	bcc.n	800c73e <__copybits+0x40>
 800c732:	bd70      	pop	{r4, r5, r6, pc}
 800c734:	f853 6b04 	ldr.w	r6, [r3], #4
 800c738:	f845 6f04 	str.w	r6, [r5, #4]!
 800c73c:	e7eb      	b.n	800c716 <__copybits+0x18>
 800c73e:	f840 3b04 	str.w	r3, [r0], #4
 800c742:	e7f4      	b.n	800c72e <__copybits+0x30>

0800c744 <__any_on>:
 800c744:	f100 0214 	add.w	r2, r0, #20
 800c748:	6900      	ldr	r0, [r0, #16]
 800c74a:	114b      	asrs	r3, r1, #5
 800c74c:	4298      	cmp	r0, r3
 800c74e:	b510      	push	{r4, lr}
 800c750:	db11      	blt.n	800c776 <__any_on+0x32>
 800c752:	dd0a      	ble.n	800c76a <__any_on+0x26>
 800c754:	f011 011f 	ands.w	r1, r1, #31
 800c758:	d007      	beq.n	800c76a <__any_on+0x26>
 800c75a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c75e:	fa24 f001 	lsr.w	r0, r4, r1
 800c762:	fa00 f101 	lsl.w	r1, r0, r1
 800c766:	428c      	cmp	r4, r1
 800c768:	d10b      	bne.n	800c782 <__any_on+0x3e>
 800c76a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c76e:	4293      	cmp	r3, r2
 800c770:	d803      	bhi.n	800c77a <__any_on+0x36>
 800c772:	2000      	movs	r0, #0
 800c774:	bd10      	pop	{r4, pc}
 800c776:	4603      	mov	r3, r0
 800c778:	e7f7      	b.n	800c76a <__any_on+0x26>
 800c77a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c77e:	2900      	cmp	r1, #0
 800c780:	d0f5      	beq.n	800c76e <__any_on+0x2a>
 800c782:	2001      	movs	r0, #1
 800c784:	e7f6      	b.n	800c774 <__any_on+0x30>

0800c786 <_calloc_r>:
 800c786:	b513      	push	{r0, r1, r4, lr}
 800c788:	434a      	muls	r2, r1
 800c78a:	4611      	mov	r1, r2
 800c78c:	9201      	str	r2, [sp, #4]
 800c78e:	f000 f859 	bl	800c844 <_malloc_r>
 800c792:	4604      	mov	r4, r0
 800c794:	b118      	cbz	r0, 800c79e <_calloc_r+0x18>
 800c796:	9a01      	ldr	r2, [sp, #4]
 800c798:	2100      	movs	r1, #0
 800c79a:	f7fb ff43 	bl	8008624 <memset>
 800c79e:	4620      	mov	r0, r4
 800c7a0:	b002      	add	sp, #8
 800c7a2:	bd10      	pop	{r4, pc}

0800c7a4 <_free_r>:
 800c7a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c7a6:	2900      	cmp	r1, #0
 800c7a8:	d048      	beq.n	800c83c <_free_r+0x98>
 800c7aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c7ae:	9001      	str	r0, [sp, #4]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	f1a1 0404 	sub.w	r4, r1, #4
 800c7b6:	bfb8      	it	lt
 800c7b8:	18e4      	addlt	r4, r4, r3
 800c7ba:	f000 fc5d 	bl	800d078 <__malloc_lock>
 800c7be:	4a20      	ldr	r2, [pc, #128]	; (800c840 <_free_r+0x9c>)
 800c7c0:	9801      	ldr	r0, [sp, #4]
 800c7c2:	6813      	ldr	r3, [r2, #0]
 800c7c4:	4615      	mov	r5, r2
 800c7c6:	b933      	cbnz	r3, 800c7d6 <_free_r+0x32>
 800c7c8:	6063      	str	r3, [r4, #4]
 800c7ca:	6014      	str	r4, [r2, #0]
 800c7cc:	b003      	add	sp, #12
 800c7ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c7d2:	f000 bc57 	b.w	800d084 <__malloc_unlock>
 800c7d6:	42a3      	cmp	r3, r4
 800c7d8:	d90b      	bls.n	800c7f2 <_free_r+0x4e>
 800c7da:	6821      	ldr	r1, [r4, #0]
 800c7dc:	1862      	adds	r2, r4, r1
 800c7de:	4293      	cmp	r3, r2
 800c7e0:	bf04      	itt	eq
 800c7e2:	681a      	ldreq	r2, [r3, #0]
 800c7e4:	685b      	ldreq	r3, [r3, #4]
 800c7e6:	6063      	str	r3, [r4, #4]
 800c7e8:	bf04      	itt	eq
 800c7ea:	1852      	addeq	r2, r2, r1
 800c7ec:	6022      	streq	r2, [r4, #0]
 800c7ee:	602c      	str	r4, [r5, #0]
 800c7f0:	e7ec      	b.n	800c7cc <_free_r+0x28>
 800c7f2:	461a      	mov	r2, r3
 800c7f4:	685b      	ldr	r3, [r3, #4]
 800c7f6:	b10b      	cbz	r3, 800c7fc <_free_r+0x58>
 800c7f8:	42a3      	cmp	r3, r4
 800c7fa:	d9fa      	bls.n	800c7f2 <_free_r+0x4e>
 800c7fc:	6811      	ldr	r1, [r2, #0]
 800c7fe:	1855      	adds	r5, r2, r1
 800c800:	42a5      	cmp	r5, r4
 800c802:	d10b      	bne.n	800c81c <_free_r+0x78>
 800c804:	6824      	ldr	r4, [r4, #0]
 800c806:	4421      	add	r1, r4
 800c808:	1854      	adds	r4, r2, r1
 800c80a:	42a3      	cmp	r3, r4
 800c80c:	6011      	str	r1, [r2, #0]
 800c80e:	d1dd      	bne.n	800c7cc <_free_r+0x28>
 800c810:	681c      	ldr	r4, [r3, #0]
 800c812:	685b      	ldr	r3, [r3, #4]
 800c814:	6053      	str	r3, [r2, #4]
 800c816:	4421      	add	r1, r4
 800c818:	6011      	str	r1, [r2, #0]
 800c81a:	e7d7      	b.n	800c7cc <_free_r+0x28>
 800c81c:	d902      	bls.n	800c824 <_free_r+0x80>
 800c81e:	230c      	movs	r3, #12
 800c820:	6003      	str	r3, [r0, #0]
 800c822:	e7d3      	b.n	800c7cc <_free_r+0x28>
 800c824:	6825      	ldr	r5, [r4, #0]
 800c826:	1961      	adds	r1, r4, r5
 800c828:	428b      	cmp	r3, r1
 800c82a:	bf04      	itt	eq
 800c82c:	6819      	ldreq	r1, [r3, #0]
 800c82e:	685b      	ldreq	r3, [r3, #4]
 800c830:	6063      	str	r3, [r4, #4]
 800c832:	bf04      	itt	eq
 800c834:	1949      	addeq	r1, r1, r5
 800c836:	6021      	streq	r1, [r4, #0]
 800c838:	6054      	str	r4, [r2, #4]
 800c83a:	e7c7      	b.n	800c7cc <_free_r+0x28>
 800c83c:	b003      	add	sp, #12
 800c83e:	bd30      	pop	{r4, r5, pc}
 800c840:	20000a54 	.word	0x20000a54

0800c844 <_malloc_r>:
 800c844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c846:	1ccd      	adds	r5, r1, #3
 800c848:	f025 0503 	bic.w	r5, r5, #3
 800c84c:	3508      	adds	r5, #8
 800c84e:	2d0c      	cmp	r5, #12
 800c850:	bf38      	it	cc
 800c852:	250c      	movcc	r5, #12
 800c854:	2d00      	cmp	r5, #0
 800c856:	4606      	mov	r6, r0
 800c858:	db01      	blt.n	800c85e <_malloc_r+0x1a>
 800c85a:	42a9      	cmp	r1, r5
 800c85c:	d903      	bls.n	800c866 <_malloc_r+0x22>
 800c85e:	230c      	movs	r3, #12
 800c860:	6033      	str	r3, [r6, #0]
 800c862:	2000      	movs	r0, #0
 800c864:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c866:	f000 fc07 	bl	800d078 <__malloc_lock>
 800c86a:	4921      	ldr	r1, [pc, #132]	; (800c8f0 <_malloc_r+0xac>)
 800c86c:	680a      	ldr	r2, [r1, #0]
 800c86e:	4614      	mov	r4, r2
 800c870:	b99c      	cbnz	r4, 800c89a <_malloc_r+0x56>
 800c872:	4f20      	ldr	r7, [pc, #128]	; (800c8f4 <_malloc_r+0xb0>)
 800c874:	683b      	ldr	r3, [r7, #0]
 800c876:	b923      	cbnz	r3, 800c882 <_malloc_r+0x3e>
 800c878:	4621      	mov	r1, r4
 800c87a:	4630      	mov	r0, r6
 800c87c:	f000 fafc 	bl	800ce78 <_sbrk_r>
 800c880:	6038      	str	r0, [r7, #0]
 800c882:	4629      	mov	r1, r5
 800c884:	4630      	mov	r0, r6
 800c886:	f000 faf7 	bl	800ce78 <_sbrk_r>
 800c88a:	1c43      	adds	r3, r0, #1
 800c88c:	d123      	bne.n	800c8d6 <_malloc_r+0x92>
 800c88e:	230c      	movs	r3, #12
 800c890:	6033      	str	r3, [r6, #0]
 800c892:	4630      	mov	r0, r6
 800c894:	f000 fbf6 	bl	800d084 <__malloc_unlock>
 800c898:	e7e3      	b.n	800c862 <_malloc_r+0x1e>
 800c89a:	6823      	ldr	r3, [r4, #0]
 800c89c:	1b5b      	subs	r3, r3, r5
 800c89e:	d417      	bmi.n	800c8d0 <_malloc_r+0x8c>
 800c8a0:	2b0b      	cmp	r3, #11
 800c8a2:	d903      	bls.n	800c8ac <_malloc_r+0x68>
 800c8a4:	6023      	str	r3, [r4, #0]
 800c8a6:	441c      	add	r4, r3
 800c8a8:	6025      	str	r5, [r4, #0]
 800c8aa:	e004      	b.n	800c8b6 <_malloc_r+0x72>
 800c8ac:	6863      	ldr	r3, [r4, #4]
 800c8ae:	42a2      	cmp	r2, r4
 800c8b0:	bf0c      	ite	eq
 800c8b2:	600b      	streq	r3, [r1, #0]
 800c8b4:	6053      	strne	r3, [r2, #4]
 800c8b6:	4630      	mov	r0, r6
 800c8b8:	f000 fbe4 	bl	800d084 <__malloc_unlock>
 800c8bc:	f104 000b 	add.w	r0, r4, #11
 800c8c0:	1d23      	adds	r3, r4, #4
 800c8c2:	f020 0007 	bic.w	r0, r0, #7
 800c8c6:	1ac2      	subs	r2, r0, r3
 800c8c8:	d0cc      	beq.n	800c864 <_malloc_r+0x20>
 800c8ca:	1a1b      	subs	r3, r3, r0
 800c8cc:	50a3      	str	r3, [r4, r2]
 800c8ce:	e7c9      	b.n	800c864 <_malloc_r+0x20>
 800c8d0:	4622      	mov	r2, r4
 800c8d2:	6864      	ldr	r4, [r4, #4]
 800c8d4:	e7cc      	b.n	800c870 <_malloc_r+0x2c>
 800c8d6:	1cc4      	adds	r4, r0, #3
 800c8d8:	f024 0403 	bic.w	r4, r4, #3
 800c8dc:	42a0      	cmp	r0, r4
 800c8de:	d0e3      	beq.n	800c8a8 <_malloc_r+0x64>
 800c8e0:	1a21      	subs	r1, r4, r0
 800c8e2:	4630      	mov	r0, r6
 800c8e4:	f000 fac8 	bl	800ce78 <_sbrk_r>
 800c8e8:	3001      	adds	r0, #1
 800c8ea:	d1dd      	bne.n	800c8a8 <_malloc_r+0x64>
 800c8ec:	e7cf      	b.n	800c88e <_malloc_r+0x4a>
 800c8ee:	bf00      	nop
 800c8f0:	20000a54 	.word	0x20000a54
 800c8f4:	20000a58 	.word	0x20000a58

0800c8f8 <__ssputs_r>:
 800c8f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c8fc:	688e      	ldr	r6, [r1, #8]
 800c8fe:	429e      	cmp	r6, r3
 800c900:	4682      	mov	sl, r0
 800c902:	460c      	mov	r4, r1
 800c904:	4690      	mov	r8, r2
 800c906:	461f      	mov	r7, r3
 800c908:	d838      	bhi.n	800c97c <__ssputs_r+0x84>
 800c90a:	898a      	ldrh	r2, [r1, #12]
 800c90c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c910:	d032      	beq.n	800c978 <__ssputs_r+0x80>
 800c912:	6825      	ldr	r5, [r4, #0]
 800c914:	6909      	ldr	r1, [r1, #16]
 800c916:	eba5 0901 	sub.w	r9, r5, r1
 800c91a:	6965      	ldr	r5, [r4, #20]
 800c91c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c920:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c924:	3301      	adds	r3, #1
 800c926:	444b      	add	r3, r9
 800c928:	106d      	asrs	r5, r5, #1
 800c92a:	429d      	cmp	r5, r3
 800c92c:	bf38      	it	cc
 800c92e:	461d      	movcc	r5, r3
 800c930:	0553      	lsls	r3, r2, #21
 800c932:	d531      	bpl.n	800c998 <__ssputs_r+0xa0>
 800c934:	4629      	mov	r1, r5
 800c936:	f7ff ff85 	bl	800c844 <_malloc_r>
 800c93a:	4606      	mov	r6, r0
 800c93c:	b950      	cbnz	r0, 800c954 <__ssputs_r+0x5c>
 800c93e:	230c      	movs	r3, #12
 800c940:	f8ca 3000 	str.w	r3, [sl]
 800c944:	89a3      	ldrh	r3, [r4, #12]
 800c946:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c94a:	81a3      	strh	r3, [r4, #12]
 800c94c:	f04f 30ff 	mov.w	r0, #4294967295
 800c950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c954:	6921      	ldr	r1, [r4, #16]
 800c956:	464a      	mov	r2, r9
 800c958:	f7fb fe56 	bl	8008608 <memcpy>
 800c95c:	89a3      	ldrh	r3, [r4, #12]
 800c95e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c962:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c966:	81a3      	strh	r3, [r4, #12]
 800c968:	6126      	str	r6, [r4, #16]
 800c96a:	6165      	str	r5, [r4, #20]
 800c96c:	444e      	add	r6, r9
 800c96e:	eba5 0509 	sub.w	r5, r5, r9
 800c972:	6026      	str	r6, [r4, #0]
 800c974:	60a5      	str	r5, [r4, #8]
 800c976:	463e      	mov	r6, r7
 800c978:	42be      	cmp	r6, r7
 800c97a:	d900      	bls.n	800c97e <__ssputs_r+0x86>
 800c97c:	463e      	mov	r6, r7
 800c97e:	4632      	mov	r2, r6
 800c980:	6820      	ldr	r0, [r4, #0]
 800c982:	4641      	mov	r1, r8
 800c984:	f000 fb5e 	bl	800d044 <memmove>
 800c988:	68a3      	ldr	r3, [r4, #8]
 800c98a:	6822      	ldr	r2, [r4, #0]
 800c98c:	1b9b      	subs	r3, r3, r6
 800c98e:	4432      	add	r2, r6
 800c990:	60a3      	str	r3, [r4, #8]
 800c992:	6022      	str	r2, [r4, #0]
 800c994:	2000      	movs	r0, #0
 800c996:	e7db      	b.n	800c950 <__ssputs_r+0x58>
 800c998:	462a      	mov	r2, r5
 800c99a:	f000 fb79 	bl	800d090 <_realloc_r>
 800c99e:	4606      	mov	r6, r0
 800c9a0:	2800      	cmp	r0, #0
 800c9a2:	d1e1      	bne.n	800c968 <__ssputs_r+0x70>
 800c9a4:	6921      	ldr	r1, [r4, #16]
 800c9a6:	4650      	mov	r0, sl
 800c9a8:	f7ff fefc 	bl	800c7a4 <_free_r>
 800c9ac:	e7c7      	b.n	800c93e <__ssputs_r+0x46>
	...

0800c9b0 <_svfiprintf_r>:
 800c9b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9b4:	4698      	mov	r8, r3
 800c9b6:	898b      	ldrh	r3, [r1, #12]
 800c9b8:	061b      	lsls	r3, r3, #24
 800c9ba:	b09d      	sub	sp, #116	; 0x74
 800c9bc:	4607      	mov	r7, r0
 800c9be:	460d      	mov	r5, r1
 800c9c0:	4614      	mov	r4, r2
 800c9c2:	d50e      	bpl.n	800c9e2 <_svfiprintf_r+0x32>
 800c9c4:	690b      	ldr	r3, [r1, #16]
 800c9c6:	b963      	cbnz	r3, 800c9e2 <_svfiprintf_r+0x32>
 800c9c8:	2140      	movs	r1, #64	; 0x40
 800c9ca:	f7ff ff3b 	bl	800c844 <_malloc_r>
 800c9ce:	6028      	str	r0, [r5, #0]
 800c9d0:	6128      	str	r0, [r5, #16]
 800c9d2:	b920      	cbnz	r0, 800c9de <_svfiprintf_r+0x2e>
 800c9d4:	230c      	movs	r3, #12
 800c9d6:	603b      	str	r3, [r7, #0]
 800c9d8:	f04f 30ff 	mov.w	r0, #4294967295
 800c9dc:	e0d1      	b.n	800cb82 <_svfiprintf_r+0x1d2>
 800c9de:	2340      	movs	r3, #64	; 0x40
 800c9e0:	616b      	str	r3, [r5, #20]
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	9309      	str	r3, [sp, #36]	; 0x24
 800c9e6:	2320      	movs	r3, #32
 800c9e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c9ec:	f8cd 800c 	str.w	r8, [sp, #12]
 800c9f0:	2330      	movs	r3, #48	; 0x30
 800c9f2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800cb9c <_svfiprintf_r+0x1ec>
 800c9f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c9fa:	f04f 0901 	mov.w	r9, #1
 800c9fe:	4623      	mov	r3, r4
 800ca00:	469a      	mov	sl, r3
 800ca02:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca06:	b10a      	cbz	r2, 800ca0c <_svfiprintf_r+0x5c>
 800ca08:	2a25      	cmp	r2, #37	; 0x25
 800ca0a:	d1f9      	bne.n	800ca00 <_svfiprintf_r+0x50>
 800ca0c:	ebba 0b04 	subs.w	fp, sl, r4
 800ca10:	d00b      	beq.n	800ca2a <_svfiprintf_r+0x7a>
 800ca12:	465b      	mov	r3, fp
 800ca14:	4622      	mov	r2, r4
 800ca16:	4629      	mov	r1, r5
 800ca18:	4638      	mov	r0, r7
 800ca1a:	f7ff ff6d 	bl	800c8f8 <__ssputs_r>
 800ca1e:	3001      	adds	r0, #1
 800ca20:	f000 80aa 	beq.w	800cb78 <_svfiprintf_r+0x1c8>
 800ca24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ca26:	445a      	add	r2, fp
 800ca28:	9209      	str	r2, [sp, #36]	; 0x24
 800ca2a:	f89a 3000 	ldrb.w	r3, [sl]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	f000 80a2 	beq.w	800cb78 <_svfiprintf_r+0x1c8>
 800ca34:	2300      	movs	r3, #0
 800ca36:	f04f 32ff 	mov.w	r2, #4294967295
 800ca3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ca3e:	f10a 0a01 	add.w	sl, sl, #1
 800ca42:	9304      	str	r3, [sp, #16]
 800ca44:	9307      	str	r3, [sp, #28]
 800ca46:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ca4a:	931a      	str	r3, [sp, #104]	; 0x68
 800ca4c:	4654      	mov	r4, sl
 800ca4e:	2205      	movs	r2, #5
 800ca50:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca54:	4851      	ldr	r0, [pc, #324]	; (800cb9c <_svfiprintf_r+0x1ec>)
 800ca56:	f7f3 fbbb 	bl	80001d0 <memchr>
 800ca5a:	9a04      	ldr	r2, [sp, #16]
 800ca5c:	b9d8      	cbnz	r0, 800ca96 <_svfiprintf_r+0xe6>
 800ca5e:	06d0      	lsls	r0, r2, #27
 800ca60:	bf44      	itt	mi
 800ca62:	2320      	movmi	r3, #32
 800ca64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ca68:	0711      	lsls	r1, r2, #28
 800ca6a:	bf44      	itt	mi
 800ca6c:	232b      	movmi	r3, #43	; 0x2b
 800ca6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ca72:	f89a 3000 	ldrb.w	r3, [sl]
 800ca76:	2b2a      	cmp	r3, #42	; 0x2a
 800ca78:	d015      	beq.n	800caa6 <_svfiprintf_r+0xf6>
 800ca7a:	9a07      	ldr	r2, [sp, #28]
 800ca7c:	4654      	mov	r4, sl
 800ca7e:	2000      	movs	r0, #0
 800ca80:	f04f 0c0a 	mov.w	ip, #10
 800ca84:	4621      	mov	r1, r4
 800ca86:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ca8a:	3b30      	subs	r3, #48	; 0x30
 800ca8c:	2b09      	cmp	r3, #9
 800ca8e:	d94e      	bls.n	800cb2e <_svfiprintf_r+0x17e>
 800ca90:	b1b0      	cbz	r0, 800cac0 <_svfiprintf_r+0x110>
 800ca92:	9207      	str	r2, [sp, #28]
 800ca94:	e014      	b.n	800cac0 <_svfiprintf_r+0x110>
 800ca96:	eba0 0308 	sub.w	r3, r0, r8
 800ca9a:	fa09 f303 	lsl.w	r3, r9, r3
 800ca9e:	4313      	orrs	r3, r2
 800caa0:	9304      	str	r3, [sp, #16]
 800caa2:	46a2      	mov	sl, r4
 800caa4:	e7d2      	b.n	800ca4c <_svfiprintf_r+0x9c>
 800caa6:	9b03      	ldr	r3, [sp, #12]
 800caa8:	1d19      	adds	r1, r3, #4
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	9103      	str	r1, [sp, #12]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	bfbb      	ittet	lt
 800cab2:	425b      	neglt	r3, r3
 800cab4:	f042 0202 	orrlt.w	r2, r2, #2
 800cab8:	9307      	strge	r3, [sp, #28]
 800caba:	9307      	strlt	r3, [sp, #28]
 800cabc:	bfb8      	it	lt
 800cabe:	9204      	strlt	r2, [sp, #16]
 800cac0:	7823      	ldrb	r3, [r4, #0]
 800cac2:	2b2e      	cmp	r3, #46	; 0x2e
 800cac4:	d10c      	bne.n	800cae0 <_svfiprintf_r+0x130>
 800cac6:	7863      	ldrb	r3, [r4, #1]
 800cac8:	2b2a      	cmp	r3, #42	; 0x2a
 800caca:	d135      	bne.n	800cb38 <_svfiprintf_r+0x188>
 800cacc:	9b03      	ldr	r3, [sp, #12]
 800cace:	1d1a      	adds	r2, r3, #4
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	9203      	str	r2, [sp, #12]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	bfb8      	it	lt
 800cad8:	f04f 33ff 	movlt.w	r3, #4294967295
 800cadc:	3402      	adds	r4, #2
 800cade:	9305      	str	r3, [sp, #20]
 800cae0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cbac <_svfiprintf_r+0x1fc>
 800cae4:	7821      	ldrb	r1, [r4, #0]
 800cae6:	2203      	movs	r2, #3
 800cae8:	4650      	mov	r0, sl
 800caea:	f7f3 fb71 	bl	80001d0 <memchr>
 800caee:	b140      	cbz	r0, 800cb02 <_svfiprintf_r+0x152>
 800caf0:	2340      	movs	r3, #64	; 0x40
 800caf2:	eba0 000a 	sub.w	r0, r0, sl
 800caf6:	fa03 f000 	lsl.w	r0, r3, r0
 800cafa:	9b04      	ldr	r3, [sp, #16]
 800cafc:	4303      	orrs	r3, r0
 800cafe:	3401      	adds	r4, #1
 800cb00:	9304      	str	r3, [sp, #16]
 800cb02:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb06:	4826      	ldr	r0, [pc, #152]	; (800cba0 <_svfiprintf_r+0x1f0>)
 800cb08:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cb0c:	2206      	movs	r2, #6
 800cb0e:	f7f3 fb5f 	bl	80001d0 <memchr>
 800cb12:	2800      	cmp	r0, #0
 800cb14:	d038      	beq.n	800cb88 <_svfiprintf_r+0x1d8>
 800cb16:	4b23      	ldr	r3, [pc, #140]	; (800cba4 <_svfiprintf_r+0x1f4>)
 800cb18:	bb1b      	cbnz	r3, 800cb62 <_svfiprintf_r+0x1b2>
 800cb1a:	9b03      	ldr	r3, [sp, #12]
 800cb1c:	3307      	adds	r3, #7
 800cb1e:	f023 0307 	bic.w	r3, r3, #7
 800cb22:	3308      	adds	r3, #8
 800cb24:	9303      	str	r3, [sp, #12]
 800cb26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb28:	4433      	add	r3, r6
 800cb2a:	9309      	str	r3, [sp, #36]	; 0x24
 800cb2c:	e767      	b.n	800c9fe <_svfiprintf_r+0x4e>
 800cb2e:	fb0c 3202 	mla	r2, ip, r2, r3
 800cb32:	460c      	mov	r4, r1
 800cb34:	2001      	movs	r0, #1
 800cb36:	e7a5      	b.n	800ca84 <_svfiprintf_r+0xd4>
 800cb38:	2300      	movs	r3, #0
 800cb3a:	3401      	adds	r4, #1
 800cb3c:	9305      	str	r3, [sp, #20]
 800cb3e:	4619      	mov	r1, r3
 800cb40:	f04f 0c0a 	mov.w	ip, #10
 800cb44:	4620      	mov	r0, r4
 800cb46:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cb4a:	3a30      	subs	r2, #48	; 0x30
 800cb4c:	2a09      	cmp	r2, #9
 800cb4e:	d903      	bls.n	800cb58 <_svfiprintf_r+0x1a8>
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d0c5      	beq.n	800cae0 <_svfiprintf_r+0x130>
 800cb54:	9105      	str	r1, [sp, #20]
 800cb56:	e7c3      	b.n	800cae0 <_svfiprintf_r+0x130>
 800cb58:	fb0c 2101 	mla	r1, ip, r1, r2
 800cb5c:	4604      	mov	r4, r0
 800cb5e:	2301      	movs	r3, #1
 800cb60:	e7f0      	b.n	800cb44 <_svfiprintf_r+0x194>
 800cb62:	ab03      	add	r3, sp, #12
 800cb64:	9300      	str	r3, [sp, #0]
 800cb66:	462a      	mov	r2, r5
 800cb68:	4b0f      	ldr	r3, [pc, #60]	; (800cba8 <_svfiprintf_r+0x1f8>)
 800cb6a:	a904      	add	r1, sp, #16
 800cb6c:	4638      	mov	r0, r7
 800cb6e:	f7fb fe01 	bl	8008774 <_printf_float>
 800cb72:	1c42      	adds	r2, r0, #1
 800cb74:	4606      	mov	r6, r0
 800cb76:	d1d6      	bne.n	800cb26 <_svfiprintf_r+0x176>
 800cb78:	89ab      	ldrh	r3, [r5, #12]
 800cb7a:	065b      	lsls	r3, r3, #25
 800cb7c:	f53f af2c 	bmi.w	800c9d8 <_svfiprintf_r+0x28>
 800cb80:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cb82:	b01d      	add	sp, #116	; 0x74
 800cb84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb88:	ab03      	add	r3, sp, #12
 800cb8a:	9300      	str	r3, [sp, #0]
 800cb8c:	462a      	mov	r2, r5
 800cb8e:	4b06      	ldr	r3, [pc, #24]	; (800cba8 <_svfiprintf_r+0x1f8>)
 800cb90:	a904      	add	r1, sp, #16
 800cb92:	4638      	mov	r0, r7
 800cb94:	f7fc f892 	bl	8008cbc <_printf_i>
 800cb98:	e7eb      	b.n	800cb72 <_svfiprintf_r+0x1c2>
 800cb9a:	bf00      	nop
 800cb9c:	0800e96c 	.word	0x0800e96c
 800cba0:	0800e976 	.word	0x0800e976
 800cba4:	08008775 	.word	0x08008775
 800cba8:	0800c8f9 	.word	0x0800c8f9
 800cbac:	0800e972 	.word	0x0800e972

0800cbb0 <__sfputc_r>:
 800cbb0:	6893      	ldr	r3, [r2, #8]
 800cbb2:	3b01      	subs	r3, #1
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	b410      	push	{r4}
 800cbb8:	6093      	str	r3, [r2, #8]
 800cbba:	da08      	bge.n	800cbce <__sfputc_r+0x1e>
 800cbbc:	6994      	ldr	r4, [r2, #24]
 800cbbe:	42a3      	cmp	r3, r4
 800cbc0:	db01      	blt.n	800cbc6 <__sfputc_r+0x16>
 800cbc2:	290a      	cmp	r1, #10
 800cbc4:	d103      	bne.n	800cbce <__sfputc_r+0x1e>
 800cbc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cbca:	f7fd bc3b 	b.w	800a444 <__swbuf_r>
 800cbce:	6813      	ldr	r3, [r2, #0]
 800cbd0:	1c58      	adds	r0, r3, #1
 800cbd2:	6010      	str	r0, [r2, #0]
 800cbd4:	7019      	strb	r1, [r3, #0]
 800cbd6:	4608      	mov	r0, r1
 800cbd8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cbdc:	4770      	bx	lr

0800cbde <__sfputs_r>:
 800cbde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbe0:	4606      	mov	r6, r0
 800cbe2:	460f      	mov	r7, r1
 800cbe4:	4614      	mov	r4, r2
 800cbe6:	18d5      	adds	r5, r2, r3
 800cbe8:	42ac      	cmp	r4, r5
 800cbea:	d101      	bne.n	800cbf0 <__sfputs_r+0x12>
 800cbec:	2000      	movs	r0, #0
 800cbee:	e007      	b.n	800cc00 <__sfputs_r+0x22>
 800cbf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbf4:	463a      	mov	r2, r7
 800cbf6:	4630      	mov	r0, r6
 800cbf8:	f7ff ffda 	bl	800cbb0 <__sfputc_r>
 800cbfc:	1c43      	adds	r3, r0, #1
 800cbfe:	d1f3      	bne.n	800cbe8 <__sfputs_r+0xa>
 800cc00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cc04 <_vfiprintf_r>:
 800cc04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc08:	460d      	mov	r5, r1
 800cc0a:	b09d      	sub	sp, #116	; 0x74
 800cc0c:	4614      	mov	r4, r2
 800cc0e:	4698      	mov	r8, r3
 800cc10:	4606      	mov	r6, r0
 800cc12:	b118      	cbz	r0, 800cc1c <_vfiprintf_r+0x18>
 800cc14:	6983      	ldr	r3, [r0, #24]
 800cc16:	b90b      	cbnz	r3, 800cc1c <_vfiprintf_r+0x18>
 800cc18:	f7fe fc68 	bl	800b4ec <__sinit>
 800cc1c:	4b89      	ldr	r3, [pc, #548]	; (800ce44 <_vfiprintf_r+0x240>)
 800cc1e:	429d      	cmp	r5, r3
 800cc20:	d11b      	bne.n	800cc5a <_vfiprintf_r+0x56>
 800cc22:	6875      	ldr	r5, [r6, #4]
 800cc24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cc26:	07d9      	lsls	r1, r3, #31
 800cc28:	d405      	bmi.n	800cc36 <_vfiprintf_r+0x32>
 800cc2a:	89ab      	ldrh	r3, [r5, #12]
 800cc2c:	059a      	lsls	r2, r3, #22
 800cc2e:	d402      	bmi.n	800cc36 <_vfiprintf_r+0x32>
 800cc30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cc32:	f7ff f86c 	bl	800bd0e <__retarget_lock_acquire_recursive>
 800cc36:	89ab      	ldrh	r3, [r5, #12]
 800cc38:	071b      	lsls	r3, r3, #28
 800cc3a:	d501      	bpl.n	800cc40 <_vfiprintf_r+0x3c>
 800cc3c:	692b      	ldr	r3, [r5, #16]
 800cc3e:	b9eb      	cbnz	r3, 800cc7c <_vfiprintf_r+0x78>
 800cc40:	4629      	mov	r1, r5
 800cc42:	4630      	mov	r0, r6
 800cc44:	f7fd fc50 	bl	800a4e8 <__swsetup_r>
 800cc48:	b1c0      	cbz	r0, 800cc7c <_vfiprintf_r+0x78>
 800cc4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cc4c:	07dc      	lsls	r4, r3, #31
 800cc4e:	d50e      	bpl.n	800cc6e <_vfiprintf_r+0x6a>
 800cc50:	f04f 30ff 	mov.w	r0, #4294967295
 800cc54:	b01d      	add	sp, #116	; 0x74
 800cc56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc5a:	4b7b      	ldr	r3, [pc, #492]	; (800ce48 <_vfiprintf_r+0x244>)
 800cc5c:	429d      	cmp	r5, r3
 800cc5e:	d101      	bne.n	800cc64 <_vfiprintf_r+0x60>
 800cc60:	68b5      	ldr	r5, [r6, #8]
 800cc62:	e7df      	b.n	800cc24 <_vfiprintf_r+0x20>
 800cc64:	4b79      	ldr	r3, [pc, #484]	; (800ce4c <_vfiprintf_r+0x248>)
 800cc66:	429d      	cmp	r5, r3
 800cc68:	bf08      	it	eq
 800cc6a:	68f5      	ldreq	r5, [r6, #12]
 800cc6c:	e7da      	b.n	800cc24 <_vfiprintf_r+0x20>
 800cc6e:	89ab      	ldrh	r3, [r5, #12]
 800cc70:	0598      	lsls	r0, r3, #22
 800cc72:	d4ed      	bmi.n	800cc50 <_vfiprintf_r+0x4c>
 800cc74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cc76:	f7ff f84b 	bl	800bd10 <__retarget_lock_release_recursive>
 800cc7a:	e7e9      	b.n	800cc50 <_vfiprintf_r+0x4c>
 800cc7c:	2300      	movs	r3, #0
 800cc7e:	9309      	str	r3, [sp, #36]	; 0x24
 800cc80:	2320      	movs	r3, #32
 800cc82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cc86:	f8cd 800c 	str.w	r8, [sp, #12]
 800cc8a:	2330      	movs	r3, #48	; 0x30
 800cc8c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ce50 <_vfiprintf_r+0x24c>
 800cc90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cc94:	f04f 0901 	mov.w	r9, #1
 800cc98:	4623      	mov	r3, r4
 800cc9a:	469a      	mov	sl, r3
 800cc9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cca0:	b10a      	cbz	r2, 800cca6 <_vfiprintf_r+0xa2>
 800cca2:	2a25      	cmp	r2, #37	; 0x25
 800cca4:	d1f9      	bne.n	800cc9a <_vfiprintf_r+0x96>
 800cca6:	ebba 0b04 	subs.w	fp, sl, r4
 800ccaa:	d00b      	beq.n	800ccc4 <_vfiprintf_r+0xc0>
 800ccac:	465b      	mov	r3, fp
 800ccae:	4622      	mov	r2, r4
 800ccb0:	4629      	mov	r1, r5
 800ccb2:	4630      	mov	r0, r6
 800ccb4:	f7ff ff93 	bl	800cbde <__sfputs_r>
 800ccb8:	3001      	adds	r0, #1
 800ccba:	f000 80aa 	beq.w	800ce12 <_vfiprintf_r+0x20e>
 800ccbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ccc0:	445a      	add	r2, fp
 800ccc2:	9209      	str	r2, [sp, #36]	; 0x24
 800ccc4:	f89a 3000 	ldrb.w	r3, [sl]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	f000 80a2 	beq.w	800ce12 <_vfiprintf_r+0x20e>
 800ccce:	2300      	movs	r3, #0
 800ccd0:	f04f 32ff 	mov.w	r2, #4294967295
 800ccd4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ccd8:	f10a 0a01 	add.w	sl, sl, #1
 800ccdc:	9304      	str	r3, [sp, #16]
 800ccde:	9307      	str	r3, [sp, #28]
 800cce0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cce4:	931a      	str	r3, [sp, #104]	; 0x68
 800cce6:	4654      	mov	r4, sl
 800cce8:	2205      	movs	r2, #5
 800ccea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ccee:	4858      	ldr	r0, [pc, #352]	; (800ce50 <_vfiprintf_r+0x24c>)
 800ccf0:	f7f3 fa6e 	bl	80001d0 <memchr>
 800ccf4:	9a04      	ldr	r2, [sp, #16]
 800ccf6:	b9d8      	cbnz	r0, 800cd30 <_vfiprintf_r+0x12c>
 800ccf8:	06d1      	lsls	r1, r2, #27
 800ccfa:	bf44      	itt	mi
 800ccfc:	2320      	movmi	r3, #32
 800ccfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd02:	0713      	lsls	r3, r2, #28
 800cd04:	bf44      	itt	mi
 800cd06:	232b      	movmi	r3, #43	; 0x2b
 800cd08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd0c:	f89a 3000 	ldrb.w	r3, [sl]
 800cd10:	2b2a      	cmp	r3, #42	; 0x2a
 800cd12:	d015      	beq.n	800cd40 <_vfiprintf_r+0x13c>
 800cd14:	9a07      	ldr	r2, [sp, #28]
 800cd16:	4654      	mov	r4, sl
 800cd18:	2000      	movs	r0, #0
 800cd1a:	f04f 0c0a 	mov.w	ip, #10
 800cd1e:	4621      	mov	r1, r4
 800cd20:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd24:	3b30      	subs	r3, #48	; 0x30
 800cd26:	2b09      	cmp	r3, #9
 800cd28:	d94e      	bls.n	800cdc8 <_vfiprintf_r+0x1c4>
 800cd2a:	b1b0      	cbz	r0, 800cd5a <_vfiprintf_r+0x156>
 800cd2c:	9207      	str	r2, [sp, #28]
 800cd2e:	e014      	b.n	800cd5a <_vfiprintf_r+0x156>
 800cd30:	eba0 0308 	sub.w	r3, r0, r8
 800cd34:	fa09 f303 	lsl.w	r3, r9, r3
 800cd38:	4313      	orrs	r3, r2
 800cd3a:	9304      	str	r3, [sp, #16]
 800cd3c:	46a2      	mov	sl, r4
 800cd3e:	e7d2      	b.n	800cce6 <_vfiprintf_r+0xe2>
 800cd40:	9b03      	ldr	r3, [sp, #12]
 800cd42:	1d19      	adds	r1, r3, #4
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	9103      	str	r1, [sp, #12]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	bfbb      	ittet	lt
 800cd4c:	425b      	neglt	r3, r3
 800cd4e:	f042 0202 	orrlt.w	r2, r2, #2
 800cd52:	9307      	strge	r3, [sp, #28]
 800cd54:	9307      	strlt	r3, [sp, #28]
 800cd56:	bfb8      	it	lt
 800cd58:	9204      	strlt	r2, [sp, #16]
 800cd5a:	7823      	ldrb	r3, [r4, #0]
 800cd5c:	2b2e      	cmp	r3, #46	; 0x2e
 800cd5e:	d10c      	bne.n	800cd7a <_vfiprintf_r+0x176>
 800cd60:	7863      	ldrb	r3, [r4, #1]
 800cd62:	2b2a      	cmp	r3, #42	; 0x2a
 800cd64:	d135      	bne.n	800cdd2 <_vfiprintf_r+0x1ce>
 800cd66:	9b03      	ldr	r3, [sp, #12]
 800cd68:	1d1a      	adds	r2, r3, #4
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	9203      	str	r2, [sp, #12]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	bfb8      	it	lt
 800cd72:	f04f 33ff 	movlt.w	r3, #4294967295
 800cd76:	3402      	adds	r4, #2
 800cd78:	9305      	str	r3, [sp, #20]
 800cd7a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ce60 <_vfiprintf_r+0x25c>
 800cd7e:	7821      	ldrb	r1, [r4, #0]
 800cd80:	2203      	movs	r2, #3
 800cd82:	4650      	mov	r0, sl
 800cd84:	f7f3 fa24 	bl	80001d0 <memchr>
 800cd88:	b140      	cbz	r0, 800cd9c <_vfiprintf_r+0x198>
 800cd8a:	2340      	movs	r3, #64	; 0x40
 800cd8c:	eba0 000a 	sub.w	r0, r0, sl
 800cd90:	fa03 f000 	lsl.w	r0, r3, r0
 800cd94:	9b04      	ldr	r3, [sp, #16]
 800cd96:	4303      	orrs	r3, r0
 800cd98:	3401      	adds	r4, #1
 800cd9a:	9304      	str	r3, [sp, #16]
 800cd9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cda0:	482c      	ldr	r0, [pc, #176]	; (800ce54 <_vfiprintf_r+0x250>)
 800cda2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cda6:	2206      	movs	r2, #6
 800cda8:	f7f3 fa12 	bl	80001d0 <memchr>
 800cdac:	2800      	cmp	r0, #0
 800cdae:	d03f      	beq.n	800ce30 <_vfiprintf_r+0x22c>
 800cdb0:	4b29      	ldr	r3, [pc, #164]	; (800ce58 <_vfiprintf_r+0x254>)
 800cdb2:	bb1b      	cbnz	r3, 800cdfc <_vfiprintf_r+0x1f8>
 800cdb4:	9b03      	ldr	r3, [sp, #12]
 800cdb6:	3307      	adds	r3, #7
 800cdb8:	f023 0307 	bic.w	r3, r3, #7
 800cdbc:	3308      	adds	r3, #8
 800cdbe:	9303      	str	r3, [sp, #12]
 800cdc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdc2:	443b      	add	r3, r7
 800cdc4:	9309      	str	r3, [sp, #36]	; 0x24
 800cdc6:	e767      	b.n	800cc98 <_vfiprintf_r+0x94>
 800cdc8:	fb0c 3202 	mla	r2, ip, r2, r3
 800cdcc:	460c      	mov	r4, r1
 800cdce:	2001      	movs	r0, #1
 800cdd0:	e7a5      	b.n	800cd1e <_vfiprintf_r+0x11a>
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	3401      	adds	r4, #1
 800cdd6:	9305      	str	r3, [sp, #20]
 800cdd8:	4619      	mov	r1, r3
 800cdda:	f04f 0c0a 	mov.w	ip, #10
 800cdde:	4620      	mov	r0, r4
 800cde0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cde4:	3a30      	subs	r2, #48	; 0x30
 800cde6:	2a09      	cmp	r2, #9
 800cde8:	d903      	bls.n	800cdf2 <_vfiprintf_r+0x1ee>
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d0c5      	beq.n	800cd7a <_vfiprintf_r+0x176>
 800cdee:	9105      	str	r1, [sp, #20]
 800cdf0:	e7c3      	b.n	800cd7a <_vfiprintf_r+0x176>
 800cdf2:	fb0c 2101 	mla	r1, ip, r1, r2
 800cdf6:	4604      	mov	r4, r0
 800cdf8:	2301      	movs	r3, #1
 800cdfa:	e7f0      	b.n	800cdde <_vfiprintf_r+0x1da>
 800cdfc:	ab03      	add	r3, sp, #12
 800cdfe:	9300      	str	r3, [sp, #0]
 800ce00:	462a      	mov	r2, r5
 800ce02:	4b16      	ldr	r3, [pc, #88]	; (800ce5c <_vfiprintf_r+0x258>)
 800ce04:	a904      	add	r1, sp, #16
 800ce06:	4630      	mov	r0, r6
 800ce08:	f7fb fcb4 	bl	8008774 <_printf_float>
 800ce0c:	4607      	mov	r7, r0
 800ce0e:	1c78      	adds	r0, r7, #1
 800ce10:	d1d6      	bne.n	800cdc0 <_vfiprintf_r+0x1bc>
 800ce12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ce14:	07d9      	lsls	r1, r3, #31
 800ce16:	d405      	bmi.n	800ce24 <_vfiprintf_r+0x220>
 800ce18:	89ab      	ldrh	r3, [r5, #12]
 800ce1a:	059a      	lsls	r2, r3, #22
 800ce1c:	d402      	bmi.n	800ce24 <_vfiprintf_r+0x220>
 800ce1e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ce20:	f7fe ff76 	bl	800bd10 <__retarget_lock_release_recursive>
 800ce24:	89ab      	ldrh	r3, [r5, #12]
 800ce26:	065b      	lsls	r3, r3, #25
 800ce28:	f53f af12 	bmi.w	800cc50 <_vfiprintf_r+0x4c>
 800ce2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ce2e:	e711      	b.n	800cc54 <_vfiprintf_r+0x50>
 800ce30:	ab03      	add	r3, sp, #12
 800ce32:	9300      	str	r3, [sp, #0]
 800ce34:	462a      	mov	r2, r5
 800ce36:	4b09      	ldr	r3, [pc, #36]	; (800ce5c <_vfiprintf_r+0x258>)
 800ce38:	a904      	add	r1, sp, #16
 800ce3a:	4630      	mov	r0, r6
 800ce3c:	f7fb ff3e 	bl	8008cbc <_printf_i>
 800ce40:	e7e4      	b.n	800ce0c <_vfiprintf_r+0x208>
 800ce42:	bf00      	nop
 800ce44:	0800e750 	.word	0x0800e750
 800ce48:	0800e770 	.word	0x0800e770
 800ce4c:	0800e730 	.word	0x0800e730
 800ce50:	0800e96c 	.word	0x0800e96c
 800ce54:	0800e976 	.word	0x0800e976
 800ce58:	08008775 	.word	0x08008775
 800ce5c:	0800cbdf 	.word	0x0800cbdf
 800ce60:	0800e972 	.word	0x0800e972
 800ce64:	00000000 	.word	0x00000000

0800ce68 <nan>:
 800ce68:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ce70 <nan+0x8>
 800ce6c:	4770      	bx	lr
 800ce6e:	bf00      	nop
 800ce70:	00000000 	.word	0x00000000
 800ce74:	7ff80000 	.word	0x7ff80000

0800ce78 <_sbrk_r>:
 800ce78:	b538      	push	{r3, r4, r5, lr}
 800ce7a:	4d06      	ldr	r5, [pc, #24]	; (800ce94 <_sbrk_r+0x1c>)
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	4604      	mov	r4, r0
 800ce80:	4608      	mov	r0, r1
 800ce82:	602b      	str	r3, [r5, #0]
 800ce84:	f7f6 fd18 	bl	80038b8 <_sbrk>
 800ce88:	1c43      	adds	r3, r0, #1
 800ce8a:	d102      	bne.n	800ce92 <_sbrk_r+0x1a>
 800ce8c:	682b      	ldr	r3, [r5, #0]
 800ce8e:	b103      	cbz	r3, 800ce92 <_sbrk_r+0x1a>
 800ce90:	6023      	str	r3, [r4, #0]
 800ce92:	bd38      	pop	{r3, r4, r5, pc}
 800ce94:	20003758 	.word	0x20003758

0800ce98 <__sread>:
 800ce98:	b510      	push	{r4, lr}
 800ce9a:	460c      	mov	r4, r1
 800ce9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cea0:	f000 f91c 	bl	800d0dc <_read_r>
 800cea4:	2800      	cmp	r0, #0
 800cea6:	bfab      	itete	ge
 800cea8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ceaa:	89a3      	ldrhlt	r3, [r4, #12]
 800ceac:	181b      	addge	r3, r3, r0
 800ceae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ceb2:	bfac      	ite	ge
 800ceb4:	6563      	strge	r3, [r4, #84]	; 0x54
 800ceb6:	81a3      	strhlt	r3, [r4, #12]
 800ceb8:	bd10      	pop	{r4, pc}

0800ceba <__swrite>:
 800ceba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cebe:	461f      	mov	r7, r3
 800cec0:	898b      	ldrh	r3, [r1, #12]
 800cec2:	05db      	lsls	r3, r3, #23
 800cec4:	4605      	mov	r5, r0
 800cec6:	460c      	mov	r4, r1
 800cec8:	4616      	mov	r6, r2
 800ceca:	d505      	bpl.n	800ced8 <__swrite+0x1e>
 800cecc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ced0:	2302      	movs	r3, #2
 800ced2:	2200      	movs	r2, #0
 800ced4:	f000 f8a4 	bl	800d020 <_lseek_r>
 800ced8:	89a3      	ldrh	r3, [r4, #12]
 800ceda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cede:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cee2:	81a3      	strh	r3, [r4, #12]
 800cee4:	4632      	mov	r2, r6
 800cee6:	463b      	mov	r3, r7
 800cee8:	4628      	mov	r0, r5
 800ceea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ceee:	f000 b823 	b.w	800cf38 <_write_r>

0800cef2 <__sseek>:
 800cef2:	b510      	push	{r4, lr}
 800cef4:	460c      	mov	r4, r1
 800cef6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cefa:	f000 f891 	bl	800d020 <_lseek_r>
 800cefe:	1c43      	adds	r3, r0, #1
 800cf00:	89a3      	ldrh	r3, [r4, #12]
 800cf02:	bf15      	itete	ne
 800cf04:	6560      	strne	r0, [r4, #84]	; 0x54
 800cf06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cf0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cf0e:	81a3      	strheq	r3, [r4, #12]
 800cf10:	bf18      	it	ne
 800cf12:	81a3      	strhne	r3, [r4, #12]
 800cf14:	bd10      	pop	{r4, pc}

0800cf16 <__sclose>:
 800cf16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf1a:	f000 b83d 	b.w	800cf98 <_close_r>

0800cf1e <__ascii_wctomb>:
 800cf1e:	b149      	cbz	r1, 800cf34 <__ascii_wctomb+0x16>
 800cf20:	2aff      	cmp	r2, #255	; 0xff
 800cf22:	bf85      	ittet	hi
 800cf24:	238a      	movhi	r3, #138	; 0x8a
 800cf26:	6003      	strhi	r3, [r0, #0]
 800cf28:	700a      	strbls	r2, [r1, #0]
 800cf2a:	f04f 30ff 	movhi.w	r0, #4294967295
 800cf2e:	bf98      	it	ls
 800cf30:	2001      	movls	r0, #1
 800cf32:	4770      	bx	lr
 800cf34:	4608      	mov	r0, r1
 800cf36:	4770      	bx	lr

0800cf38 <_write_r>:
 800cf38:	b538      	push	{r3, r4, r5, lr}
 800cf3a:	4d07      	ldr	r5, [pc, #28]	; (800cf58 <_write_r+0x20>)
 800cf3c:	4604      	mov	r4, r0
 800cf3e:	4608      	mov	r0, r1
 800cf40:	4611      	mov	r1, r2
 800cf42:	2200      	movs	r2, #0
 800cf44:	602a      	str	r2, [r5, #0]
 800cf46:	461a      	mov	r2, r3
 800cf48:	f7f6 f978 	bl	800323c <_write>
 800cf4c:	1c43      	adds	r3, r0, #1
 800cf4e:	d102      	bne.n	800cf56 <_write_r+0x1e>
 800cf50:	682b      	ldr	r3, [r5, #0]
 800cf52:	b103      	cbz	r3, 800cf56 <_write_r+0x1e>
 800cf54:	6023      	str	r3, [r4, #0]
 800cf56:	bd38      	pop	{r3, r4, r5, pc}
 800cf58:	20003758 	.word	0x20003758

0800cf5c <__assert_func>:
 800cf5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cf5e:	4614      	mov	r4, r2
 800cf60:	461a      	mov	r2, r3
 800cf62:	4b09      	ldr	r3, [pc, #36]	; (800cf88 <__assert_func+0x2c>)
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	4605      	mov	r5, r0
 800cf68:	68d8      	ldr	r0, [r3, #12]
 800cf6a:	b14c      	cbz	r4, 800cf80 <__assert_func+0x24>
 800cf6c:	4b07      	ldr	r3, [pc, #28]	; (800cf8c <__assert_func+0x30>)
 800cf6e:	9100      	str	r1, [sp, #0]
 800cf70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cf74:	4906      	ldr	r1, [pc, #24]	; (800cf90 <__assert_func+0x34>)
 800cf76:	462b      	mov	r3, r5
 800cf78:	f000 f81e 	bl	800cfb8 <fiprintf>
 800cf7c:	f000 f8c0 	bl	800d100 <abort>
 800cf80:	4b04      	ldr	r3, [pc, #16]	; (800cf94 <__assert_func+0x38>)
 800cf82:	461c      	mov	r4, r3
 800cf84:	e7f3      	b.n	800cf6e <__assert_func+0x12>
 800cf86:	bf00      	nop
 800cf88:	20000014 	.word	0x20000014
 800cf8c:	0800e97d 	.word	0x0800e97d
 800cf90:	0800e98a 	.word	0x0800e98a
 800cf94:	0800e9b8 	.word	0x0800e9b8

0800cf98 <_close_r>:
 800cf98:	b538      	push	{r3, r4, r5, lr}
 800cf9a:	4d06      	ldr	r5, [pc, #24]	; (800cfb4 <_close_r+0x1c>)
 800cf9c:	2300      	movs	r3, #0
 800cf9e:	4604      	mov	r4, r0
 800cfa0:	4608      	mov	r0, r1
 800cfa2:	602b      	str	r3, [r5, #0]
 800cfa4:	f7f6 f976 	bl	8003294 <_close>
 800cfa8:	1c43      	adds	r3, r0, #1
 800cfaa:	d102      	bne.n	800cfb2 <_close_r+0x1a>
 800cfac:	682b      	ldr	r3, [r5, #0]
 800cfae:	b103      	cbz	r3, 800cfb2 <_close_r+0x1a>
 800cfb0:	6023      	str	r3, [r4, #0]
 800cfb2:	bd38      	pop	{r3, r4, r5, pc}
 800cfb4:	20003758 	.word	0x20003758

0800cfb8 <fiprintf>:
 800cfb8:	b40e      	push	{r1, r2, r3}
 800cfba:	b503      	push	{r0, r1, lr}
 800cfbc:	4601      	mov	r1, r0
 800cfbe:	ab03      	add	r3, sp, #12
 800cfc0:	4805      	ldr	r0, [pc, #20]	; (800cfd8 <fiprintf+0x20>)
 800cfc2:	f853 2b04 	ldr.w	r2, [r3], #4
 800cfc6:	6800      	ldr	r0, [r0, #0]
 800cfc8:	9301      	str	r3, [sp, #4]
 800cfca:	f7ff fe1b 	bl	800cc04 <_vfiprintf_r>
 800cfce:	b002      	add	sp, #8
 800cfd0:	f85d eb04 	ldr.w	lr, [sp], #4
 800cfd4:	b003      	add	sp, #12
 800cfd6:	4770      	bx	lr
 800cfd8:	20000014 	.word	0x20000014

0800cfdc <_fstat_r>:
 800cfdc:	b538      	push	{r3, r4, r5, lr}
 800cfde:	4d07      	ldr	r5, [pc, #28]	; (800cffc <_fstat_r+0x20>)
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	4604      	mov	r4, r0
 800cfe4:	4608      	mov	r0, r1
 800cfe6:	4611      	mov	r1, r2
 800cfe8:	602b      	str	r3, [r5, #0]
 800cfea:	f7f6 f9a3 	bl	8003334 <_fstat>
 800cfee:	1c43      	adds	r3, r0, #1
 800cff0:	d102      	bne.n	800cff8 <_fstat_r+0x1c>
 800cff2:	682b      	ldr	r3, [r5, #0]
 800cff4:	b103      	cbz	r3, 800cff8 <_fstat_r+0x1c>
 800cff6:	6023      	str	r3, [r4, #0]
 800cff8:	bd38      	pop	{r3, r4, r5, pc}
 800cffa:	bf00      	nop
 800cffc:	20003758 	.word	0x20003758

0800d000 <_isatty_r>:
 800d000:	b538      	push	{r3, r4, r5, lr}
 800d002:	4d06      	ldr	r5, [pc, #24]	; (800d01c <_isatty_r+0x1c>)
 800d004:	2300      	movs	r3, #0
 800d006:	4604      	mov	r4, r0
 800d008:	4608      	mov	r0, r1
 800d00a:	602b      	str	r3, [r5, #0]
 800d00c:	f7f6 f900 	bl	8003210 <_isatty>
 800d010:	1c43      	adds	r3, r0, #1
 800d012:	d102      	bne.n	800d01a <_isatty_r+0x1a>
 800d014:	682b      	ldr	r3, [r5, #0]
 800d016:	b103      	cbz	r3, 800d01a <_isatty_r+0x1a>
 800d018:	6023      	str	r3, [r4, #0]
 800d01a:	bd38      	pop	{r3, r4, r5, pc}
 800d01c:	20003758 	.word	0x20003758

0800d020 <_lseek_r>:
 800d020:	b538      	push	{r3, r4, r5, lr}
 800d022:	4d07      	ldr	r5, [pc, #28]	; (800d040 <_lseek_r+0x20>)
 800d024:	4604      	mov	r4, r0
 800d026:	4608      	mov	r0, r1
 800d028:	4611      	mov	r1, r2
 800d02a:	2200      	movs	r2, #0
 800d02c:	602a      	str	r2, [r5, #0]
 800d02e:	461a      	mov	r2, r3
 800d030:	f7f6 f947 	bl	80032c2 <_lseek>
 800d034:	1c43      	adds	r3, r0, #1
 800d036:	d102      	bne.n	800d03e <_lseek_r+0x1e>
 800d038:	682b      	ldr	r3, [r5, #0]
 800d03a:	b103      	cbz	r3, 800d03e <_lseek_r+0x1e>
 800d03c:	6023      	str	r3, [r4, #0]
 800d03e:	bd38      	pop	{r3, r4, r5, pc}
 800d040:	20003758 	.word	0x20003758

0800d044 <memmove>:
 800d044:	4288      	cmp	r0, r1
 800d046:	b510      	push	{r4, lr}
 800d048:	eb01 0402 	add.w	r4, r1, r2
 800d04c:	d902      	bls.n	800d054 <memmove+0x10>
 800d04e:	4284      	cmp	r4, r0
 800d050:	4623      	mov	r3, r4
 800d052:	d807      	bhi.n	800d064 <memmove+0x20>
 800d054:	1e43      	subs	r3, r0, #1
 800d056:	42a1      	cmp	r1, r4
 800d058:	d008      	beq.n	800d06c <memmove+0x28>
 800d05a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d05e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d062:	e7f8      	b.n	800d056 <memmove+0x12>
 800d064:	4402      	add	r2, r0
 800d066:	4601      	mov	r1, r0
 800d068:	428a      	cmp	r2, r1
 800d06a:	d100      	bne.n	800d06e <memmove+0x2a>
 800d06c:	bd10      	pop	{r4, pc}
 800d06e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d072:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d076:	e7f7      	b.n	800d068 <memmove+0x24>

0800d078 <__malloc_lock>:
 800d078:	4801      	ldr	r0, [pc, #4]	; (800d080 <__malloc_lock+0x8>)
 800d07a:	f7fe be48 	b.w	800bd0e <__retarget_lock_acquire_recursive>
 800d07e:	bf00      	nop
 800d080:	20003750 	.word	0x20003750

0800d084 <__malloc_unlock>:
 800d084:	4801      	ldr	r0, [pc, #4]	; (800d08c <__malloc_unlock+0x8>)
 800d086:	f7fe be43 	b.w	800bd10 <__retarget_lock_release_recursive>
 800d08a:	bf00      	nop
 800d08c:	20003750 	.word	0x20003750

0800d090 <_realloc_r>:
 800d090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d092:	4607      	mov	r7, r0
 800d094:	4614      	mov	r4, r2
 800d096:	460e      	mov	r6, r1
 800d098:	b921      	cbnz	r1, 800d0a4 <_realloc_r+0x14>
 800d09a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d09e:	4611      	mov	r1, r2
 800d0a0:	f7ff bbd0 	b.w	800c844 <_malloc_r>
 800d0a4:	b922      	cbnz	r2, 800d0b0 <_realloc_r+0x20>
 800d0a6:	f7ff fb7d 	bl	800c7a4 <_free_r>
 800d0aa:	4625      	mov	r5, r4
 800d0ac:	4628      	mov	r0, r5
 800d0ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d0b0:	f000 f82d 	bl	800d10e <_malloc_usable_size_r>
 800d0b4:	42a0      	cmp	r0, r4
 800d0b6:	d20f      	bcs.n	800d0d8 <_realloc_r+0x48>
 800d0b8:	4621      	mov	r1, r4
 800d0ba:	4638      	mov	r0, r7
 800d0bc:	f7ff fbc2 	bl	800c844 <_malloc_r>
 800d0c0:	4605      	mov	r5, r0
 800d0c2:	2800      	cmp	r0, #0
 800d0c4:	d0f2      	beq.n	800d0ac <_realloc_r+0x1c>
 800d0c6:	4631      	mov	r1, r6
 800d0c8:	4622      	mov	r2, r4
 800d0ca:	f7fb fa9d 	bl	8008608 <memcpy>
 800d0ce:	4631      	mov	r1, r6
 800d0d0:	4638      	mov	r0, r7
 800d0d2:	f7ff fb67 	bl	800c7a4 <_free_r>
 800d0d6:	e7e9      	b.n	800d0ac <_realloc_r+0x1c>
 800d0d8:	4635      	mov	r5, r6
 800d0da:	e7e7      	b.n	800d0ac <_realloc_r+0x1c>

0800d0dc <_read_r>:
 800d0dc:	b538      	push	{r3, r4, r5, lr}
 800d0de:	4d07      	ldr	r5, [pc, #28]	; (800d0fc <_read_r+0x20>)
 800d0e0:	4604      	mov	r4, r0
 800d0e2:	4608      	mov	r0, r1
 800d0e4:	4611      	mov	r1, r2
 800d0e6:	2200      	movs	r2, #0
 800d0e8:	602a      	str	r2, [r5, #0]
 800d0ea:	461a      	mov	r2, r3
 800d0ec:	f7f6 f8fa 	bl	80032e4 <_read>
 800d0f0:	1c43      	adds	r3, r0, #1
 800d0f2:	d102      	bne.n	800d0fa <_read_r+0x1e>
 800d0f4:	682b      	ldr	r3, [r5, #0]
 800d0f6:	b103      	cbz	r3, 800d0fa <_read_r+0x1e>
 800d0f8:	6023      	str	r3, [r4, #0]
 800d0fa:	bd38      	pop	{r3, r4, r5, pc}
 800d0fc:	20003758 	.word	0x20003758

0800d100 <abort>:
 800d100:	b508      	push	{r3, lr}
 800d102:	2006      	movs	r0, #6
 800d104:	f000 f834 	bl	800d170 <raise>
 800d108:	2001      	movs	r0, #1
 800d10a:	f000 f85d 	bl	800d1c8 <_exit>

0800d10e <_malloc_usable_size_r>:
 800d10e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d112:	1f18      	subs	r0, r3, #4
 800d114:	2b00      	cmp	r3, #0
 800d116:	bfbc      	itt	lt
 800d118:	580b      	ldrlt	r3, [r1, r0]
 800d11a:	18c0      	addlt	r0, r0, r3
 800d11c:	4770      	bx	lr

0800d11e <_raise_r>:
 800d11e:	291f      	cmp	r1, #31
 800d120:	b538      	push	{r3, r4, r5, lr}
 800d122:	4604      	mov	r4, r0
 800d124:	460d      	mov	r5, r1
 800d126:	d904      	bls.n	800d132 <_raise_r+0x14>
 800d128:	2316      	movs	r3, #22
 800d12a:	6003      	str	r3, [r0, #0]
 800d12c:	f04f 30ff 	mov.w	r0, #4294967295
 800d130:	bd38      	pop	{r3, r4, r5, pc}
 800d132:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d134:	b112      	cbz	r2, 800d13c <_raise_r+0x1e>
 800d136:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d13a:	b94b      	cbnz	r3, 800d150 <_raise_r+0x32>
 800d13c:	4620      	mov	r0, r4
 800d13e:	f000 f831 	bl	800d1a4 <_getpid_r>
 800d142:	462a      	mov	r2, r5
 800d144:	4601      	mov	r1, r0
 800d146:	4620      	mov	r0, r4
 800d148:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d14c:	f000 b818 	b.w	800d180 <_kill_r>
 800d150:	2b01      	cmp	r3, #1
 800d152:	d00a      	beq.n	800d16a <_raise_r+0x4c>
 800d154:	1c59      	adds	r1, r3, #1
 800d156:	d103      	bne.n	800d160 <_raise_r+0x42>
 800d158:	2316      	movs	r3, #22
 800d15a:	6003      	str	r3, [r0, #0]
 800d15c:	2001      	movs	r0, #1
 800d15e:	e7e7      	b.n	800d130 <_raise_r+0x12>
 800d160:	2400      	movs	r4, #0
 800d162:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d166:	4628      	mov	r0, r5
 800d168:	4798      	blx	r3
 800d16a:	2000      	movs	r0, #0
 800d16c:	e7e0      	b.n	800d130 <_raise_r+0x12>
	...

0800d170 <raise>:
 800d170:	4b02      	ldr	r3, [pc, #8]	; (800d17c <raise+0xc>)
 800d172:	4601      	mov	r1, r0
 800d174:	6818      	ldr	r0, [r3, #0]
 800d176:	f7ff bfd2 	b.w	800d11e <_raise_r>
 800d17a:	bf00      	nop
 800d17c:	20000014 	.word	0x20000014

0800d180 <_kill_r>:
 800d180:	b538      	push	{r3, r4, r5, lr}
 800d182:	4d07      	ldr	r5, [pc, #28]	; (800d1a0 <_kill_r+0x20>)
 800d184:	2300      	movs	r3, #0
 800d186:	4604      	mov	r4, r0
 800d188:	4608      	mov	r0, r1
 800d18a:	4611      	mov	r1, r2
 800d18c:	602b      	str	r3, [r5, #0]
 800d18e:	f000 f813 	bl	800d1b8 <_kill>
 800d192:	1c43      	adds	r3, r0, #1
 800d194:	d102      	bne.n	800d19c <_kill_r+0x1c>
 800d196:	682b      	ldr	r3, [r5, #0]
 800d198:	b103      	cbz	r3, 800d19c <_kill_r+0x1c>
 800d19a:	6023      	str	r3, [r4, #0]
 800d19c:	bd38      	pop	{r3, r4, r5, pc}
 800d19e:	bf00      	nop
 800d1a0:	20003758 	.word	0x20003758

0800d1a4 <_getpid_r>:
 800d1a4:	f000 b800 	b.w	800d1a8 <_getpid>

0800d1a8 <_getpid>:
 800d1a8:	4b02      	ldr	r3, [pc, #8]	; (800d1b4 <_getpid+0xc>)
 800d1aa:	2258      	movs	r2, #88	; 0x58
 800d1ac:	601a      	str	r2, [r3, #0]
 800d1ae:	f04f 30ff 	mov.w	r0, #4294967295
 800d1b2:	4770      	bx	lr
 800d1b4:	20003758 	.word	0x20003758

0800d1b8 <_kill>:
 800d1b8:	4b02      	ldr	r3, [pc, #8]	; (800d1c4 <_kill+0xc>)
 800d1ba:	2258      	movs	r2, #88	; 0x58
 800d1bc:	601a      	str	r2, [r3, #0]
 800d1be:	f04f 30ff 	mov.w	r0, #4294967295
 800d1c2:	4770      	bx	lr
 800d1c4:	20003758 	.word	0x20003758

0800d1c8 <_exit>:
 800d1c8:	e7fe      	b.n	800d1c8 <_exit>
	...

0800d1cc <_init>:
 800d1cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1ce:	bf00      	nop
 800d1d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d1d2:	bc08      	pop	{r3}
 800d1d4:	469e      	mov	lr, r3
 800d1d6:	4770      	bx	lr

0800d1d8 <_fini>:
 800d1d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1da:	bf00      	nop
 800d1dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d1de:	bc08      	pop	{r3}
 800d1e0:	469e      	mov	lr, r3
 800d1e2:	4770      	bx	lr
