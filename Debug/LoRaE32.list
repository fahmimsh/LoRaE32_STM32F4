
LoRaE32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d42c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000017f4  0800d5c0  0800d5c0  0001d5c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800edb4  0800edb4  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800edb4  0800edb4  0001edb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800edbc  0800edbc  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800edbc  0800edbc  0001edbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800edc0  0800edc0  0001edc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800edc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000370c  200001ec  0800efb0  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200038f8  0800efb0  000238f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   000163ed  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d24  00000000  00000000  00036609  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001088  00000000  00000000  00039330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f80  00000000  00000000  0003a3b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022498  00000000  00000000  0003b338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015072  00000000  00000000  0005d7d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d0a54  00000000  00000000  00072842  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00143296  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c0c  00000000  00000000  001432ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000003c  00000000  00000000  00148ef8  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000076  00000000  00000000  00148f34  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001ec 	.word	0x200001ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d5a4 	.word	0x0800d5a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	0800d5a4 	.word	0x0800d5a4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <ILI9341_DrawFilledRectangleCoord>:
		ILI9341_DrawPixel(X1, Y1, color);
	}
}

void ILI9341_DrawFilledRectangleCoord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t color)
{
 8000fec:	b590      	push	{r4, r7, lr}
 8000fee:	b089      	sub	sp, #36	; 0x24
 8000ff0:	af02      	add	r7, sp, #8
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	4611      	mov	r1, r2
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	4623      	mov	r3, r4
 8000ffc:	80fb      	strh	r3, [r7, #6]
 8000ffe:	4603      	mov	r3, r0
 8001000:	80bb      	strh	r3, [r7, #4]
 8001002:	460b      	mov	r3, r1
 8001004:	807b      	strh	r3, [r7, #2]
 8001006:	4613      	mov	r3, r2
 8001008:	803b      	strh	r3, [r7, #0]
	uint16_t xLen = 0;
 800100a:	2300      	movs	r3, #0
 800100c:	82fb      	strh	r3, [r7, #22]
	uint16_t yLen = 0;
 800100e:	2300      	movs	r3, #0
 8001010:	82bb      	strh	r3, [r7, #20]
	uint8_t negX = 0;
 8001012:	2300      	movs	r3, #0
 8001014:	74fb      	strb	r3, [r7, #19]
	uint8_t negY = 0;
 8001016:	2300      	movs	r3, #0
 8001018:	74bb      	strb	r3, [r7, #18]
	int32_t negCalc = 0;
 800101a:	2300      	movs	r3, #0
 800101c:	60bb      	str	r3, [r7, #8]
	uint16_t X0True = 0;
 800101e:	2300      	movs	r3, #0
 8001020:	823b      	strh	r3, [r7, #16]
	uint16_t Y0True = 0;
 8001022:	2300      	movs	r3, #0
 8001024:	81fb      	strh	r3, [r7, #14]

	negCalc = X1 - X0;
 8001026:	887a      	ldrh	r2, [r7, #2]
 8001028:	88fb      	ldrh	r3, [r7, #6]
 800102a:	1ad3      	subs	r3, r2, r3
 800102c:	60bb      	str	r3, [r7, #8]
	if(negCalc < 0) negX = 1;
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	2b00      	cmp	r3, #0
 8001032:	da01      	bge.n	8001038 <ILI9341_DrawFilledRectangleCoord+0x4c>
 8001034:	2301      	movs	r3, #1
 8001036:	74fb      	strb	r3, [r7, #19]
	negCalc = 0;
 8001038:	2300      	movs	r3, #0
 800103a:	60bb      	str	r3, [r7, #8]

	negCalc = Y1 - Y0;
 800103c:	883a      	ldrh	r2, [r7, #0]
 800103e:	88bb      	ldrh	r3, [r7, #4]
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	60bb      	str	r3, [r7, #8]
	if(negCalc < 0) negY = 1;
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	2b00      	cmp	r3, #0
 8001048:	da01      	bge.n	800104e <ILI9341_DrawFilledRectangleCoord+0x62>
 800104a:	2301      	movs	r3, #1
 800104c:	74bb      	strb	r3, [r7, #18]

	if(!negX)
 800104e:	7cfb      	ldrb	r3, [r7, #19]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d106      	bne.n	8001062 <ILI9341_DrawFilledRectangleCoord+0x76>
	{
		xLen = X1 - X0;
 8001054:	887a      	ldrh	r2, [r7, #2]
 8001056:	88fb      	ldrh	r3, [r7, #6]
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	82fb      	strh	r3, [r7, #22]
		X0True = X0;
 800105c:	88fb      	ldrh	r3, [r7, #6]
 800105e:	823b      	strh	r3, [r7, #16]
 8001060:	e005      	b.n	800106e <ILI9341_DrawFilledRectangleCoord+0x82>
	}
	else
	{
		xLen = X0 - X1;
 8001062:	88fa      	ldrh	r2, [r7, #6]
 8001064:	887b      	ldrh	r3, [r7, #2]
 8001066:	1ad3      	subs	r3, r2, r3
 8001068:	82fb      	strh	r3, [r7, #22]
		X0True = X1;
 800106a:	887b      	ldrh	r3, [r7, #2]
 800106c:	823b      	strh	r3, [r7, #16]
	}

	if(!negY)
 800106e:	7cbb      	ldrb	r3, [r7, #18]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d106      	bne.n	8001082 <ILI9341_DrawFilledRectangleCoord+0x96>
	{
		yLen = Y1 - Y0;
 8001074:	883a      	ldrh	r2, [r7, #0]
 8001076:	88bb      	ldrh	r3, [r7, #4]
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	82bb      	strh	r3, [r7, #20]
		Y0True = Y0;
 800107c:	88bb      	ldrh	r3, [r7, #4]
 800107e:	81fb      	strh	r3, [r7, #14]
 8001080:	e005      	b.n	800108e <ILI9341_DrawFilledRectangleCoord+0xa2>
	}
	else
	{
		yLen = Y0 - Y1;
 8001082:	88ba      	ldrh	r2, [r7, #4]
 8001084:	883b      	ldrh	r3, [r7, #0]
 8001086:	1ad3      	subs	r3, r2, r3
 8001088:	82bb      	strh	r3, [r7, #20]
		Y0True = Y1;
 800108a:	883b      	ldrh	r3, [r7, #0]
 800108c:	81fb      	strh	r3, [r7, #14]
	}

	ILI9341_DrawRectangle(X0True, Y0True, xLen, yLen, color);
 800108e:	8abc      	ldrh	r4, [r7, #20]
 8001090:	8afa      	ldrh	r2, [r7, #22]
 8001092:	89f9      	ldrh	r1, [r7, #14]
 8001094:	8a38      	ldrh	r0, [r7, #16]
 8001096:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001098:	9300      	str	r3, [sp, #0]
 800109a:	4623      	mov	r3, r4
 800109c:	f000 fc54 	bl	8001948 <ILI9341_DrawRectangle>
}
 80010a0:	bf00      	nop
 80010a2:	371c      	adds	r7, #28
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd90      	pop	{r4, r7, pc}

080010a8 <ILI9341_DrawChar>:

void ILI9341_DrawChar(char ch, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 80010a8:	b590      	push	{r4, r7, lr}
 80010aa:	b08d      	sub	sp, #52	; 0x34
 80010ac:	af02      	add	r7, sp, #8
 80010ae:	60b9      	str	r1, [r7, #8]
 80010b0:	4611      	mov	r1, r2
 80010b2:	461a      	mov	r2, r3
 80010b4:	4603      	mov	r3, r0
 80010b6:	73fb      	strb	r3, [r7, #15]
 80010b8:	460b      	mov	r3, r1
 80010ba:	81bb      	strh	r3, [r7, #12]
 80010bc:	4613      	mov	r3, r2
 80010be:	80fb      	strh	r3, [r7, #6]
	if ((ch < 31) || (ch > 127)) return;
 80010c0:	7bfb      	ldrb	r3, [r7, #15]
 80010c2:	2b1e      	cmp	r3, #30
 80010c4:	d961      	bls.n	800118a <ILI9341_DrawChar+0xe2>
 80010c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	db5d      	blt.n	800118a <ILI9341_DrawChar+0xe2>

	uint8_t fOffset, fWidth, fHeight, fBPL;
	uint8_t *tempChar;

	fOffset = font[0];
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	77fb      	strb	r3, [r7, #31]
	fWidth = font[1];
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	785b      	ldrb	r3, [r3, #1]
 80010d8:	77bb      	strb	r3, [r7, #30]
	fHeight = font[2];
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	789b      	ldrb	r3, [r3, #2]
 80010de:	777b      	strb	r3, [r7, #29]
	fBPL = font[3];
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	78db      	ldrb	r3, [r3, #3]
 80010e4:	773b      	strb	r3, [r7, #28]

	tempChar = (uint8_t*)&font[((ch - 0x20) * fOffset) + 4]; /* Current Character = Meta + (Character Index * Offset) */
 80010e6:	7bfb      	ldrb	r3, [r7, #15]
 80010e8:	3b20      	subs	r3, #32
 80010ea:	7ffa      	ldrb	r2, [r7, #31]
 80010ec:	fb02 f303 	mul.w	r3, r2, r3
 80010f0:	3304      	adds	r3, #4
 80010f2:	68ba      	ldr	r2, [r7, #8]
 80010f4:	4413      	add	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]

	/* Clear background first */
	ILI9341_DrawRectangle(X, Y, fWidth, fHeight, bgcolor);
 80010f8:	7fbb      	ldrb	r3, [r7, #30]
 80010fa:	b29a      	uxth	r2, r3
 80010fc:	7f7b      	ldrb	r3, [r7, #29]
 80010fe:	b29c      	uxth	r4, r3
 8001100:	88f9      	ldrh	r1, [r7, #6]
 8001102:	89b8      	ldrh	r0, [r7, #12]
 8001104:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001106:	9300      	str	r3, [sp, #0]
 8001108:	4623      	mov	r3, r4
 800110a:	f000 fc1d 	bl	8001948 <ILI9341_DrawRectangle>

	for (int j=0; j < fHeight; j++)
 800110e:	2300      	movs	r3, #0
 8001110:	627b      	str	r3, [r7, #36]	; 0x24
 8001112:	e035      	b.n	8001180 <ILI9341_DrawChar+0xd8>
	{
		for (int i=0; i < fWidth; i++)
 8001114:	2300      	movs	r3, #0
 8001116:	623b      	str	r3, [r7, #32]
 8001118:	e02b      	b.n	8001172 <ILI9341_DrawChar+0xca>
		{
			uint8_t z =  tempChar[fBPL * i + ((j & 0xF8) >> 3) + 1]; /* (j & 0xF8) >> 3, increase one by 8-bits */
 800111a:	7f3b      	ldrb	r3, [r7, #28]
 800111c:	6a3a      	ldr	r2, [r7, #32]
 800111e:	fb02 f203 	mul.w	r2, r2, r3
 8001122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001124:	10db      	asrs	r3, r3, #3
 8001126:	f003 031f 	and.w	r3, r3, #31
 800112a:	4413      	add	r3, r2
 800112c:	3301      	adds	r3, #1
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	4413      	add	r3, r2
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	75fb      	strb	r3, [r7, #23]
			uint8_t b = 1 << (j & 0x07);
 8001136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001138:	f003 0307 	and.w	r3, r3, #7
 800113c:	2201      	movs	r2, #1
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	75bb      	strb	r3, [r7, #22]
			if (( z & b ) != 0x00)
 8001144:	7dfa      	ldrb	r2, [r7, #23]
 8001146:	7dbb      	ldrb	r3, [r7, #22]
 8001148:	4013      	ands	r3, r2
 800114a:	b2db      	uxtb	r3, r3
 800114c:	2b00      	cmp	r3, #0
 800114e:	d00d      	beq.n	800116c <ILI9341_DrawChar+0xc4>
			{
				ILI9341_DrawPixel(X+i, Y+j, color);
 8001150:	6a3b      	ldr	r3, [r7, #32]
 8001152:	b29a      	uxth	r2, r3
 8001154:	89bb      	ldrh	r3, [r7, #12]
 8001156:	4413      	add	r3, r2
 8001158:	b298      	uxth	r0, r3
 800115a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800115c:	b29a      	uxth	r2, r3
 800115e:	88fb      	ldrh	r3, [r7, #6]
 8001160:	4413      	add	r3, r2
 8001162:	b29b      	uxth	r3, r3
 8001164:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8001166:	4619      	mov	r1, r3
 8001168:	f000 fb88 	bl	800187c <ILI9341_DrawPixel>
		for (int i=0; i < fWidth; i++)
 800116c:	6a3b      	ldr	r3, [r7, #32]
 800116e:	3301      	adds	r3, #1
 8001170:	623b      	str	r3, [r7, #32]
 8001172:	7fbb      	ldrb	r3, [r7, #30]
 8001174:	6a3a      	ldr	r2, [r7, #32]
 8001176:	429a      	cmp	r2, r3
 8001178:	dbcf      	blt.n	800111a <ILI9341_DrawChar+0x72>
	for (int j=0; j < fHeight; j++)
 800117a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117c:	3301      	adds	r3, #1
 800117e:	627b      	str	r3, [r7, #36]	; 0x24
 8001180:	7f7b      	ldrb	r3, [r7, #29]
 8001182:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001184:	429a      	cmp	r2, r3
 8001186:	dbc5      	blt.n	8001114 <ILI9341_DrawChar+0x6c>
 8001188:	e000      	b.n	800118c <ILI9341_DrawChar+0xe4>
	if ((ch < 31) || (ch > 127)) return;
 800118a:	bf00      	nop
			}
		}
	}
}
 800118c:	372c      	adds	r7, #44	; 0x2c
 800118e:	46bd      	mov	sp, r7
 8001190:	bd90      	pop	{r4, r7, pc}

08001192 <ILI9341_DrawText>:

void ILI9341_DrawText(const char* str, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 8001192:	b580      	push	{r7, lr}
 8001194:	b08a      	sub	sp, #40	; 0x28
 8001196:	af02      	add	r7, sp, #8
 8001198:	60f8      	str	r0, [r7, #12]
 800119a:	60b9      	str	r1, [r7, #8]
 800119c:	4611      	mov	r1, r2
 800119e:	461a      	mov	r2, r3
 80011a0:	460b      	mov	r3, r1
 80011a2:	80fb      	strh	r3, [r7, #6]
 80011a4:	4613      	mov	r3, r2
 80011a6:	80bb      	strh	r3, [r7, #4]
	uint8_t charWidth;			/* Width of character */
	uint8_t fOffset = font[0];	/* Offset of character */
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	77fb      	strb	r3, [r7, #31]
	uint8_t fWidth = font[1];	/* Width of font */
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	785b      	ldrb	r3, [r3, #1]
 80011b2:	77bb      	strb	r3, [r7, #30]

	while (*str)
 80011b4:	e02d      	b.n	8001212 <ILI9341_DrawText+0x80>
	{
		ILI9341_DrawChar(*str, font, X, Y, color, bgcolor);
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	7818      	ldrb	r0, [r3, #0]
 80011ba:	88b9      	ldrh	r1, [r7, #4]
 80011bc:	88fa      	ldrh	r2, [r7, #6]
 80011be:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80011c0:	9301      	str	r3, [sp, #4]
 80011c2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80011c4:	9300      	str	r3, [sp, #0]
 80011c6:	460b      	mov	r3, r1
 80011c8:	68b9      	ldr	r1, [r7, #8]
 80011ca:	f7ff ff6d 	bl	80010a8 <ILI9341_DrawChar>

		/* Check character width and calculate proper position */
		uint8_t *tempChar = (uint8_t*)&font[((*str - 0x20) * fOffset) + 4];
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	3b20      	subs	r3, #32
 80011d4:	7ffa      	ldrb	r2, [r7, #31]
 80011d6:	fb02 f303 	mul.w	r3, r2, r3
 80011da:	3304      	adds	r3, #4
 80011dc:	68ba      	ldr	r2, [r7, #8]
 80011de:	4413      	add	r3, r2
 80011e0:	61bb      	str	r3, [r7, #24]
		charWidth = tempChar[0];
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	75fb      	strb	r3, [r7, #23]

		if(charWidth + 2 < fWidth)
 80011e8:	7dfb      	ldrb	r3, [r7, #23]
 80011ea:	1c9a      	adds	r2, r3, #2
 80011ec:	7fbb      	ldrb	r3, [r7, #30]
 80011ee:	429a      	cmp	r2, r3
 80011f0:	da07      	bge.n	8001202 <ILI9341_DrawText+0x70>
		{
			/* If character width is smaller than font width */
			X += (charWidth + 2);
 80011f2:	7dfb      	ldrb	r3, [r7, #23]
 80011f4:	b29a      	uxth	r2, r3
 80011f6:	88fb      	ldrh	r3, [r7, #6]
 80011f8:	4413      	add	r3, r2
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	3302      	adds	r3, #2
 80011fe:	80fb      	strh	r3, [r7, #6]
 8001200:	e004      	b.n	800120c <ILI9341_DrawText+0x7a>
		}
		else
		{
			X += fWidth;
 8001202:	7fbb      	ldrb	r3, [r7, #30]
 8001204:	b29a      	uxth	r2, r3
 8001206:	88fb      	ldrh	r3, [r7, #6]
 8001208:	4413      	add	r3, r2
 800120a:	80fb      	strh	r3, [r7, #6]
		}

		str++;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	3301      	adds	r3, #1
 8001210:	60fb      	str	r3, [r7, #12]
	while (*str)
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d1cd      	bne.n	80011b6 <ILI9341_DrawText+0x24>
	}
}
 800121a:	bf00      	nop
 800121c:	bf00      	nop
 800121e:	3720      	adds	r7, #32
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}

08001224 <HAL_SPI_TxCpltCallback>:

volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  /* Deselect when Tx Complete */
  if(hspi == HSPI_INSTANCE)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	4a06      	ldr	r2, [pc, #24]	; (8001248 <HAL_SPI_TxCpltCallback+0x24>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d104      	bne.n	800123e <HAL_SPI_TxCpltCallback+0x1a>
  {
	  HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001234:	2201      	movs	r2, #1
 8001236:	2101      	movs	r1, #1
 8001238:	4804      	ldr	r0, [pc, #16]	; (800124c <HAL_SPI_TxCpltCallback+0x28>)
 800123a:	f003 fcef 	bl	8004c1c <HAL_GPIO_WritePin>
  }
}
 800123e:	bf00      	nop
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	200036f4 	.word	0x200036f4
 800124c:	40020800 	.word	0x40020800

08001250 <ILI9341_SPI_Tx>:

static void ILI9341_SPI_Tx(uint8_t data)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 800125a:	bf00      	nop
 800125c:	4b08      	ldr	r3, [pc, #32]	; (8001280 <ILI9341_SPI_Tx+0x30>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	f003 0302 	and.w	r3, r3, #2
 8001266:	2b02      	cmp	r3, #2
 8001268:	d1f8      	bne.n	800125c <ILI9341_SPI_Tx+0xc>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, &data, 1);
 800126a:	1dfb      	adds	r3, r7, #7
 800126c:	2201      	movs	r2, #1
 800126e:	4619      	mov	r1, r3
 8001270:	4803      	ldr	r0, [pc, #12]	; (8001280 <ILI9341_SPI_Tx+0x30>)
 8001272:	f005 ff45 	bl	8007100 <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
}
 8001276:	bf00      	nop
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	200036f4 	.word	0x200036f4

08001284 <ILI9341_SPI_TxBuffer>:

static void ILI9341_SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	460b      	mov	r3, r1
 800128e:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8001290:	bf00      	nop
 8001292:	4b08      	ldr	r3, [pc, #32]	; (80012b4 <ILI9341_SPI_TxBuffer+0x30>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	f003 0302 	and.w	r3, r3, #2
 800129c:	2b02      	cmp	r3, #2
 800129e:	d1f8      	bne.n	8001292 <ILI9341_SPI_TxBuffer+0xe>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, buffer, len);
 80012a0:	887b      	ldrh	r3, [r7, #2]
 80012a2:	461a      	mov	r2, r3
 80012a4:	6879      	ldr	r1, [r7, #4]
 80012a6:	4803      	ldr	r0, [pc, #12]	; (80012b4 <ILI9341_SPI_TxBuffer+0x30>)
 80012a8:	f005 ff2a 	bl	8007100 <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, buffer, len, 10);
}
 80012ac:	bf00      	nop
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	200036f4 	.word	0x200036f4

080012b8 <ILI9341_WriteCommand>:

void ILI9341_WriteCommand(uint8_t cmd)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	//command
 80012c2:	2200      	movs	r2, #0
 80012c4:	2101      	movs	r1, #1
 80012c6:	4808      	ldr	r0, [pc, #32]	; (80012e8 <ILI9341_WriteCommand+0x30>)
 80012c8:	f003 fca8 	bl	8004c1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 80012cc:	2200      	movs	r2, #0
 80012ce:	2101      	movs	r1, #1
 80012d0:	4806      	ldr	r0, [pc, #24]	; (80012ec <ILI9341_WriteCommand+0x34>)
 80012d2:	f003 fca3 	bl	8004c1c <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(cmd);
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff ffb9 	bl	8001250 <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 80012de:	bf00      	nop
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40020000 	.word	0x40020000
 80012ec:	40020800 	.word	0x40020800

080012f0 <ILI9341_WriteData>:

void ILI9341_WriteData(uint8_t data)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 80012fa:	2201      	movs	r2, #1
 80012fc:	2101      	movs	r1, #1
 80012fe:	4808      	ldr	r0, [pc, #32]	; (8001320 <ILI9341_WriteData+0x30>)
 8001300:	f003 fc8c 	bl	8004c1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8001304:	2200      	movs	r2, #0
 8001306:	2101      	movs	r1, #1
 8001308:	4806      	ldr	r0, [pc, #24]	; (8001324 <ILI9341_WriteData+0x34>)
 800130a:	f003 fc87 	bl	8004c1c <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(data);
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff ff9d 	bl	8001250 <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8001316:	bf00      	nop
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	40020000 	.word	0x40020000
 8001324:	40020800 	.word	0x40020800

08001328 <ILI9341_WriteBuffer>:

void ILI9341_WriteBuffer(uint8_t *buffer, uint16_t len)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	460b      	mov	r3, r1
 8001332:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 8001334:	2201      	movs	r2, #1
 8001336:	2101      	movs	r1, #1
 8001338:	4808      	ldr	r0, [pc, #32]	; (800135c <ILI9341_WriteBuffer+0x34>)
 800133a:	f003 fc6f 	bl	8004c1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 800133e:	2200      	movs	r2, #0
 8001340:	2101      	movs	r1, #1
 8001342:	4807      	ldr	r0, [pc, #28]	; (8001360 <ILI9341_WriteBuffer+0x38>)
 8001344:	f003 fc6a 	bl	8004c1c <HAL_GPIO_WritePin>
	ILI9341_SPI_TxBuffer(buffer, len);
 8001348:	887b      	ldrh	r3, [r7, #2]
 800134a:	4619      	mov	r1, r3
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f7ff ff99 	bl	8001284 <ILI9341_SPI_TxBuffer>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8001352:	bf00      	nop
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	40020000 	.word	0x40020000
 8001360:	40020800 	.word	0x40020800

08001364 <ILI9341_SetAddress>:

void ILI9341_SetAddress(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8001364:	b590      	push	{r4, r7, lr}
 8001366:	b085      	sub	sp, #20
 8001368:	af00      	add	r7, sp, #0
 800136a:	4604      	mov	r4, r0
 800136c:	4608      	mov	r0, r1
 800136e:	4611      	mov	r1, r2
 8001370:	461a      	mov	r2, r3
 8001372:	4623      	mov	r3, r4
 8001374:	80fb      	strh	r3, [r7, #6]
 8001376:	4603      	mov	r3, r0
 8001378:	80bb      	strh	r3, [r7, #4]
 800137a:	460b      	mov	r3, r1
 800137c:	807b      	strh	r3, [r7, #2]
 800137e:	4613      	mov	r3, r2
 8001380:	803b      	strh	r3, [r7, #0]
	uint8_t buffer[4];
	buffer[0] = x1 >> 8;
 8001382:	88fb      	ldrh	r3, [r7, #6]
 8001384:	0a1b      	lsrs	r3, r3, #8
 8001386:	b29b      	uxth	r3, r3
 8001388:	b2db      	uxtb	r3, r3
 800138a:	733b      	strb	r3, [r7, #12]
	buffer[1] = x1;
 800138c:	88fb      	ldrh	r3, [r7, #6]
 800138e:	b2db      	uxtb	r3, r3
 8001390:	737b      	strb	r3, [r7, #13]
	buffer[2] = x2 >> 8;
 8001392:	887b      	ldrh	r3, [r7, #2]
 8001394:	0a1b      	lsrs	r3, r3, #8
 8001396:	b29b      	uxth	r3, r3
 8001398:	b2db      	uxtb	r3, r3
 800139a:	73bb      	strb	r3, [r7, #14]
	buffer[3] = x2;
 800139c:	887b      	ldrh	r3, [r7, #2]
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2A);
 80013a2:	202a      	movs	r0, #42	; 0x2a
 80013a4:	f7ff ff88 	bl	80012b8 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 80013a8:	f107 030c 	add.w	r3, r7, #12
 80013ac:	2104      	movs	r1, #4
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff ffba 	bl	8001328 <ILI9341_WriteBuffer>

	buffer[0] = y1 >> 8;
 80013b4:	88bb      	ldrh	r3, [r7, #4]
 80013b6:	0a1b      	lsrs	r3, r3, #8
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	733b      	strb	r3, [r7, #12]
	buffer[1] = y1;
 80013be:	88bb      	ldrh	r3, [r7, #4]
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	737b      	strb	r3, [r7, #13]
	buffer[2] = y2 >> 8;
 80013c4:	883b      	ldrh	r3, [r7, #0]
 80013c6:	0a1b      	lsrs	r3, r3, #8
 80013c8:	b29b      	uxth	r3, r3
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	73bb      	strb	r3, [r7, #14]
	buffer[3] = y2;
 80013ce:	883b      	ldrh	r3, [r7, #0]
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2B);
 80013d4:	202b      	movs	r0, #43	; 0x2b
 80013d6:	f7ff ff6f 	bl	80012b8 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 80013da:	f107 030c 	add.w	r3, r7, #12
 80013de:	2104      	movs	r1, #4
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff ffa1 	bl	8001328 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);
 80013e6:	202c      	movs	r0, #44	; 0x2c
 80013e8:	f7ff ff66 	bl	80012b8 <ILI9341_WriteCommand>
}
 80013ec:	bf00      	nop
 80013ee:	3714      	adds	r7, #20
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd90      	pop	{r4, r7, pc}

080013f4 <ILI9341_Reset>:

void ILI9341_Reset(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);	//Disable
 80013f8:	2200      	movs	r2, #0
 80013fa:	2104      	movs	r1, #4
 80013fc:	480c      	ldr	r0, [pc, #48]	; (8001430 <ILI9341_Reset+0x3c>)
 80013fe:	f003 fc0d 	bl	8004c1c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001402:	200a      	movs	r0, #10
 8001404:	f002 fd1e 	bl	8003e44 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);		//Select
 8001408:	2200      	movs	r2, #0
 800140a:	2101      	movs	r1, #1
 800140c:	4808      	ldr	r0, [pc, #32]	; (8001430 <ILI9341_Reset+0x3c>)
 800140e:	f003 fc05 	bl	8004c1c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001412:	200a      	movs	r0, #10
 8001414:	f002 fd16 	bl	8003e44 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 8001418:	2201      	movs	r2, #1
 800141a:	2104      	movs	r1, #4
 800141c:	4804      	ldr	r0, [pc, #16]	; (8001430 <ILI9341_Reset+0x3c>)
 800141e:	f003 fbfd 	bl	8004c1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET); 		//Deselect
 8001422:	2201      	movs	r2, #1
 8001424:	2101      	movs	r1, #1
 8001426:	4802      	ldr	r0, [pc, #8]	; (8001430 <ILI9341_Reset+0x3c>)
 8001428:	f003 fbf8 	bl	8004c1c <HAL_GPIO_WritePin>
}
 800142c:	bf00      	nop
 800142e:	bd80      	pop	{r7, pc}
 8001430:	40020800 	.word	0x40020800

08001434 <ILI9341_Enable>:

void ILI9341_Enable(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 8001438:	2201      	movs	r2, #1
 800143a:	2104      	movs	r1, #4
 800143c:	4802      	ldr	r0, [pc, #8]	; (8001448 <ILI9341_Enable+0x14>)
 800143e:	f003 fbed 	bl	8004c1c <HAL_GPIO_WritePin>
}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40020800 	.word	0x40020800

0800144c <ILI9341_Init>:

void ILI9341_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
	ILI9341_Enable();
 8001450:	f7ff fff0 	bl	8001434 <ILI9341_Enable>
	ILI9341_Reset();
 8001454:	f7ff ffce 	bl	80013f4 <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_WriteCommand(0x01);
 8001458:	2001      	movs	r0, #1
 800145a:	f7ff ff2d 	bl	80012b8 <ILI9341_WriteCommand>
	HAL_Delay(10);
 800145e:	200a      	movs	r0, #10
 8001460:	f002 fcf0 	bl	8003e44 <HAL_Delay>

	//POWER CONTROL A
	ILI9341_WriteCommand(0xCB);
 8001464:	20cb      	movs	r0, #203	; 0xcb
 8001466:	f7ff ff27 	bl	80012b8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x39);
 800146a:	2039      	movs	r0, #57	; 0x39
 800146c:	f7ff ff40 	bl	80012f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x2C);
 8001470:	202c      	movs	r0, #44	; 0x2c
 8001472:	f7ff ff3d 	bl	80012f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8001476:	2000      	movs	r0, #0
 8001478:	f7ff ff3a 	bl	80012f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x34);
 800147c:	2034      	movs	r0, #52	; 0x34
 800147e:	f7ff ff37 	bl	80012f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x02);
 8001482:	2002      	movs	r0, #2
 8001484:	f7ff ff34 	bl	80012f0 <ILI9341_WriteData>

	//POWER CONTROL B
	ILI9341_WriteCommand(0xCF);
 8001488:	20cf      	movs	r0, #207	; 0xcf
 800148a:	f7ff ff15 	bl	80012b8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 800148e:	2000      	movs	r0, #0
 8001490:	f7ff ff2e 	bl	80012f0 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8001494:	20c1      	movs	r0, #193	; 0xc1
 8001496:	f7ff ff2b 	bl	80012f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x30);
 800149a:	2030      	movs	r0, #48	; 0x30
 800149c:	f7ff ff28 	bl	80012f0 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL A
	ILI9341_WriteCommand(0xE8);
 80014a0:	20e8      	movs	r0, #232	; 0xe8
 80014a2:	f7ff ff09 	bl	80012b8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x85);
 80014a6:	2085      	movs	r0, #133	; 0x85
 80014a8:	f7ff ff22 	bl	80012f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 80014ac:	2000      	movs	r0, #0
 80014ae:	f7ff ff1f 	bl	80012f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x78);
 80014b2:	2078      	movs	r0, #120	; 0x78
 80014b4:	f7ff ff1c 	bl	80012f0 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL B
	ILI9341_WriteCommand(0xEA);
 80014b8:	20ea      	movs	r0, #234	; 0xea
 80014ba:	f7ff fefd 	bl	80012b8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 80014be:	2000      	movs	r0, #0
 80014c0:	f7ff ff16 	bl	80012f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 80014c4:	2000      	movs	r0, #0
 80014c6:	f7ff ff13 	bl	80012f0 <ILI9341_WriteData>

	//POWER ON SEQUENCE CONTROL
	ILI9341_WriteCommand(0xED);
 80014ca:	20ed      	movs	r0, #237	; 0xed
 80014cc:	f7ff fef4 	bl	80012b8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x64);
 80014d0:	2064      	movs	r0, #100	; 0x64
 80014d2:	f7ff ff0d 	bl	80012f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 80014d6:	2003      	movs	r0, #3
 80014d8:	f7ff ff0a 	bl	80012f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x12);
 80014dc:	2012      	movs	r0, #18
 80014de:	f7ff ff07 	bl	80012f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x81);
 80014e2:	2081      	movs	r0, #129	; 0x81
 80014e4:	f7ff ff04 	bl	80012f0 <ILI9341_WriteData>

	//PUMP RATIO CONTROL
	ILI9341_WriteCommand(0xF7);
 80014e8:	20f7      	movs	r0, #247	; 0xf7
 80014ea:	f7ff fee5 	bl	80012b8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x20);
 80014ee:	2020      	movs	r0, #32
 80014f0:	f7ff fefe 	bl	80012f0 <ILI9341_WriteData>

	//POWER CONTROL,VRH[5:0]
	ILI9341_WriteCommand(0xC0);
 80014f4:	20c0      	movs	r0, #192	; 0xc0
 80014f6:	f7ff fedf 	bl	80012b8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x23);
 80014fa:	2023      	movs	r0, #35	; 0x23
 80014fc:	f7ff fef8 	bl	80012f0 <ILI9341_WriteData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_WriteCommand(0xC1);
 8001500:	20c1      	movs	r0, #193	; 0xc1
 8001502:	f7ff fed9 	bl	80012b8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x10);
 8001506:	2010      	movs	r0, #16
 8001508:	f7ff fef2 	bl	80012f0 <ILI9341_WriteData>

	//VCM CONTROL
	ILI9341_WriteCommand(0xC5);
 800150c:	20c5      	movs	r0, #197	; 0xc5
 800150e:	f7ff fed3 	bl	80012b8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x3E);
 8001512:	203e      	movs	r0, #62	; 0x3e
 8001514:	f7ff feec 	bl	80012f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x28);
 8001518:	2028      	movs	r0, #40	; 0x28
 800151a:	f7ff fee9 	bl	80012f0 <ILI9341_WriteData>

	//VCM CONTROL 2
	ILI9341_WriteCommand(0xC7);
 800151e:	20c7      	movs	r0, #199	; 0xc7
 8001520:	f7ff feca 	bl	80012b8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x86);
 8001524:	2086      	movs	r0, #134	; 0x86
 8001526:	f7ff fee3 	bl	80012f0 <ILI9341_WriteData>

	//MEMORY ACCESS CONTROL
	ILI9341_WriteCommand(0x36);
 800152a:	2036      	movs	r0, #54	; 0x36
 800152c:	f7ff fec4 	bl	80012b8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x48);
 8001530:	2048      	movs	r0, #72	; 0x48
 8001532:	f7ff fedd 	bl	80012f0 <ILI9341_WriteData>

	//PIXEL FORMAT
	ILI9341_WriteCommand(0x3A);
 8001536:	203a      	movs	r0, #58	; 0x3a
 8001538:	f7ff febe 	bl	80012b8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x55);
 800153c:	2055      	movs	r0, #85	; 0x55
 800153e:	f7ff fed7 	bl	80012f0 <ILI9341_WriteData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_WriteCommand(0xB1);
 8001542:	20b1      	movs	r0, #177	; 0xb1
 8001544:	f7ff feb8 	bl	80012b8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8001548:	2000      	movs	r0, #0
 800154a:	f7ff fed1 	bl	80012f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x18);
 800154e:	2018      	movs	r0, #24
 8001550:	f7ff fece 	bl	80012f0 <ILI9341_WriteData>

	//DISPLAY FUNCTION CONTROL
	ILI9341_WriteCommand(0xB6);
 8001554:	20b6      	movs	r0, #182	; 0xb6
 8001556:	f7ff feaf 	bl	80012b8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x08);
 800155a:	2008      	movs	r0, #8
 800155c:	f7ff fec8 	bl	80012f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x82);
 8001560:	2082      	movs	r0, #130	; 0x82
 8001562:	f7ff fec5 	bl	80012f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x27);
 8001566:	2027      	movs	r0, #39	; 0x27
 8001568:	f7ff fec2 	bl	80012f0 <ILI9341_WriteData>

	//3GAMMA FUNCTION DISABLE
	ILI9341_WriteCommand(0xF2);
 800156c:	20f2      	movs	r0, #242	; 0xf2
 800156e:	f7ff fea3 	bl	80012b8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8001572:	2000      	movs	r0, #0
 8001574:	f7ff febc 	bl	80012f0 <ILI9341_WriteData>

	//GAMMA CURVE SELECTED
	ILI9341_WriteCommand(0x26);
 8001578:	2026      	movs	r0, #38	; 0x26
 800157a:	f7ff fe9d 	bl	80012b8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x01);
 800157e:	2001      	movs	r0, #1
 8001580:	f7ff feb6 	bl	80012f0 <ILI9341_WriteData>

	//POSITIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE0);
 8001584:	20e0      	movs	r0, #224	; 0xe0
 8001586:	f7ff fe97 	bl	80012b8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x0F);
 800158a:	200f      	movs	r0, #15
 800158c:	f7ff feb0 	bl	80012f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8001590:	2031      	movs	r0, #49	; 0x31
 8001592:	f7ff fead 	bl	80012f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x2B);
 8001596:	202b      	movs	r0, #43	; 0x2b
 8001598:	f7ff feaa 	bl	80012f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 800159c:	200c      	movs	r0, #12
 800159e:	f7ff fea7 	bl	80012f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 80015a2:	200e      	movs	r0, #14
 80015a4:	f7ff fea4 	bl	80012f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 80015a8:	2008      	movs	r0, #8
 80015aa:	f7ff fea1 	bl	80012f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x4E);
 80015ae:	204e      	movs	r0, #78	; 0x4e
 80015b0:	f7ff fe9e 	bl	80012f0 <ILI9341_WriteData>
	ILI9341_WriteData(0xF1);
 80015b4:	20f1      	movs	r0, #241	; 0xf1
 80015b6:	f7ff fe9b 	bl	80012f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x37);
 80015ba:	2037      	movs	r0, #55	; 0x37
 80015bc:	f7ff fe98 	bl	80012f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 80015c0:	2007      	movs	r0, #7
 80015c2:	f7ff fe95 	bl	80012f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x10);
 80015c6:	2010      	movs	r0, #16
 80015c8:	f7ff fe92 	bl	80012f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 80015cc:	2003      	movs	r0, #3
 80015ce:	f7ff fe8f 	bl	80012f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 80015d2:	200e      	movs	r0, #14
 80015d4:	f7ff fe8c 	bl	80012f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x09);
 80015d8:	2009      	movs	r0, #9
 80015da:	f7ff fe89 	bl	80012f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 80015de:	2000      	movs	r0, #0
 80015e0:	f7ff fe86 	bl	80012f0 <ILI9341_WriteData>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE1);
 80015e4:	20e1      	movs	r0, #225	; 0xe1
 80015e6:	f7ff fe67 	bl	80012b8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 80015ea:	2000      	movs	r0, #0
 80015ec:	f7ff fe80 	bl	80012f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 80015f0:	200e      	movs	r0, #14
 80015f2:	f7ff fe7d 	bl	80012f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x14);
 80015f6:	2014      	movs	r0, #20
 80015f8:	f7ff fe7a 	bl	80012f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 80015fc:	2003      	movs	r0, #3
 80015fe:	f7ff fe77 	bl	80012f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x11);
 8001602:	2011      	movs	r0, #17
 8001604:	f7ff fe74 	bl	80012f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8001608:	2007      	movs	r0, #7
 800160a:	f7ff fe71 	bl	80012f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 800160e:	2031      	movs	r0, #49	; 0x31
 8001610:	f7ff fe6e 	bl	80012f0 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8001614:	20c1      	movs	r0, #193	; 0xc1
 8001616:	f7ff fe6b 	bl	80012f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x48);
 800161a:	2048      	movs	r0, #72	; 0x48
 800161c:	f7ff fe68 	bl	80012f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8001620:	2008      	movs	r0, #8
 8001622:	f7ff fe65 	bl	80012f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 8001626:	200f      	movs	r0, #15
 8001628:	f7ff fe62 	bl	80012f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 800162c:	200c      	movs	r0, #12
 800162e:	f7ff fe5f 	bl	80012f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8001632:	2031      	movs	r0, #49	; 0x31
 8001634:	f7ff fe5c 	bl	80012f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x36);
 8001638:	2036      	movs	r0, #54	; 0x36
 800163a:	f7ff fe59 	bl	80012f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 800163e:	200f      	movs	r0, #15
 8001640:	f7ff fe56 	bl	80012f0 <ILI9341_WriteData>

	//EXIT SLEEP
	ILI9341_WriteCommand(0x11);
 8001644:	2011      	movs	r0, #17
 8001646:	f7ff fe37 	bl	80012b8 <ILI9341_WriteCommand>
	HAL_Delay(100);
 800164a:	2064      	movs	r0, #100	; 0x64
 800164c:	f002 fbfa 	bl	8003e44 <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_WriteCommand(0x29);
 8001650:	2029      	movs	r0, #41	; 0x29
 8001652:	f7ff fe31 	bl	80012b8 <ILI9341_WriteCommand>

	//STARTING ROTATION
	ILI9341_SetRotation(SCREEN_VERTICAL_1);
 8001656:	2000      	movs	r0, #0
 8001658:	f000 f802 	bl	8001660 <ILI9341_SetRotation>
}
 800165c:	bf00      	nop
 800165e:	bd80      	pop	{r7, pc}

08001660 <ILI9341_SetRotation>:

void ILI9341_SetRotation(uint8_t rotation)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	4603      	mov	r3, r0
 8001668:	71fb      	strb	r3, [r7, #7]
	ILI9341_WriteCommand(0x36);
 800166a:	2036      	movs	r0, #54	; 0x36
 800166c:	f7ff fe24 	bl	80012b8 <ILI9341_WriteCommand>
	HAL_Delay(1);
 8001670:	2001      	movs	r0, #1
 8001672:	f002 fbe7 	bl	8003e44 <HAL_Delay>

	switch(rotation)
 8001676:	79fb      	ldrb	r3, [r7, #7]
 8001678:	2b03      	cmp	r3, #3
 800167a:	d837      	bhi.n	80016ec <ILI9341_SetRotation+0x8c>
 800167c:	a201      	add	r2, pc, #4	; (adr r2, 8001684 <ILI9341_SetRotation+0x24>)
 800167e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001682:	bf00      	nop
 8001684:	08001695 	.word	0x08001695
 8001688:	080016ab 	.word	0x080016ab
 800168c:	080016c1 	.word	0x080016c1
 8001690:	080016d7 	.word	0x080016d7
	{
	case SCREEN_VERTICAL_1:
		ILI9341_WriteData(0x40|0x08);
 8001694:	2048      	movs	r0, #72	; 0x48
 8001696:	f7ff fe2b 	bl	80012f0 <ILI9341_WriteData>
		LCD_WIDTH = 240;
 800169a:	4b17      	ldr	r3, [pc, #92]	; (80016f8 <ILI9341_SetRotation+0x98>)
 800169c:	22f0      	movs	r2, #240	; 0xf0
 800169e:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 80016a0:	4b16      	ldr	r3, [pc, #88]	; (80016fc <ILI9341_SetRotation+0x9c>)
 80016a2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80016a6:	801a      	strh	r2, [r3, #0]
		break;
 80016a8:	e021      	b.n	80016ee <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_1:
		ILI9341_WriteData(0x20|0x08);
 80016aa:	2028      	movs	r0, #40	; 0x28
 80016ac:	f7ff fe20 	bl	80012f0 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 80016b0:	4b11      	ldr	r3, [pc, #68]	; (80016f8 <ILI9341_SetRotation+0x98>)
 80016b2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80016b6:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 80016b8:	4b10      	ldr	r3, [pc, #64]	; (80016fc <ILI9341_SetRotation+0x9c>)
 80016ba:	22f0      	movs	r2, #240	; 0xf0
 80016bc:	801a      	strh	r2, [r3, #0]
		break;
 80016be:	e016      	b.n	80016ee <ILI9341_SetRotation+0x8e>
	case SCREEN_VERTICAL_2:
		ILI9341_WriteData(0x80|0x08);
 80016c0:	2088      	movs	r0, #136	; 0x88
 80016c2:	f7ff fe15 	bl	80012f0 <ILI9341_WriteData>
		LCD_WIDTH  = 240;
 80016c6:	4b0c      	ldr	r3, [pc, #48]	; (80016f8 <ILI9341_SetRotation+0x98>)
 80016c8:	22f0      	movs	r2, #240	; 0xf0
 80016ca:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 80016cc:	4b0b      	ldr	r3, [pc, #44]	; (80016fc <ILI9341_SetRotation+0x9c>)
 80016ce:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80016d2:	801a      	strh	r2, [r3, #0]
		break;
 80016d4:	e00b      	b.n	80016ee <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_2:
		ILI9341_WriteData(0x40|0x80|0x20|0x08);
 80016d6:	20e8      	movs	r0, #232	; 0xe8
 80016d8:	f7ff fe0a 	bl	80012f0 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 80016dc:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <ILI9341_SetRotation+0x98>)
 80016de:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80016e2:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 80016e4:	4b05      	ldr	r3, [pc, #20]	; (80016fc <ILI9341_SetRotation+0x9c>)
 80016e6:	22f0      	movs	r2, #240	; 0xf0
 80016e8:	801a      	strh	r2, [r3, #0]
		break;
 80016ea:	e000      	b.n	80016ee <ILI9341_SetRotation+0x8e>
	default:
		break;
 80016ec:	bf00      	nop
	}
}
 80016ee:	bf00      	nop
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	20000002 	.word	0x20000002
 80016fc:	20000000 	.word	0x20000000

08001700 <ILI9341_DrawColorBurst>:
	uint8_t buffer[2] = {color>>8, color};
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
}

void ILI9341_DrawColorBurst(uint16_t color, uint32_t size)
{
 8001700:	b5b0      	push	{r4, r5, r7, lr}
 8001702:	b08c      	sub	sp, #48	; 0x30
 8001704:	af00      	add	r7, sp, #0
 8001706:	4603      	mov	r3, r0
 8001708:	6039      	str	r1, [r7, #0]
 800170a:	80fb      	strh	r3, [r7, #6]
 800170c:	466b      	mov	r3, sp
 800170e:	461d      	mov	r5, r3
	uint32_t BufferSize = 0;
 8001710:	2300      	movs	r3, #0
 8001712:	627b      	str	r3, [r7, #36]	; 0x24

	if((size*2) < BURST_MAX_SIZE)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800171c:	d202      	bcs.n	8001724 <ILI9341_DrawColorBurst+0x24>
	{
		BufferSize = size;
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	627b      	str	r3, [r7, #36]	; 0x24
 8001722:	e002      	b.n	800172a <ILI9341_DrawColorBurst+0x2a>
	}
	else
	{
		BufferSize = BURST_MAX_SIZE;
 8001724:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001728:	627b      	str	r3, [r7, #36]	; 0x24
	}

	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 800172a:	2201      	movs	r2, #1
 800172c:	2101      	movs	r1, #1
 800172e:	483d      	ldr	r0, [pc, #244]	; (8001824 <ILI9341_DrawColorBurst+0x124>)
 8001730:	f003 fa74 	bl	8004c1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001734:	2200      	movs	r2, #0
 8001736:	2101      	movs	r1, #1
 8001738:	483b      	ldr	r0, [pc, #236]	; (8001828 <ILI9341_DrawColorBurst+0x128>)
 800173a:	f003 fa6f 	bl	8004c1c <HAL_GPIO_WritePin>

	uint8_t chifted = color>>8;
 800173e:	88fb      	ldrh	r3, [r7, #6]
 8001740:	0a1b      	lsrs	r3, r3, #8
 8001742:	b29b      	uxth	r3, r3
 8001744:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t BurstBuffer[BufferSize];
 8001748:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800174a:	4623      	mov	r3, r4
 800174c:	3b01      	subs	r3, #1
 800174e:	61fb      	str	r3, [r7, #28]
 8001750:	4620      	mov	r0, r4
 8001752:	f04f 0100 	mov.w	r1, #0
 8001756:	f04f 0200 	mov.w	r2, #0
 800175a:	f04f 0300 	mov.w	r3, #0
 800175e:	00cb      	lsls	r3, r1, #3
 8001760:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001764:	00c2      	lsls	r2, r0, #3
 8001766:	4620      	mov	r0, r4
 8001768:	f04f 0100 	mov.w	r1, #0
 800176c:	f04f 0200 	mov.w	r2, #0
 8001770:	f04f 0300 	mov.w	r3, #0
 8001774:	00cb      	lsls	r3, r1, #3
 8001776:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800177a:	00c2      	lsls	r2, r0, #3
 800177c:	1de3      	adds	r3, r4, #7
 800177e:	08db      	lsrs	r3, r3, #3
 8001780:	00db      	lsls	r3, r3, #3
 8001782:	ebad 0d03 	sub.w	sp, sp, r3
 8001786:	466b      	mov	r3, sp
 8001788:	3300      	adds	r3, #0
 800178a:	61bb      	str	r3, [r7, #24]

	for(uint32_t j = 0; j < BufferSize; j+=2)
 800178c:	2300      	movs	r3, #0
 800178e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001790:	e00e      	b.n	80017b0 <ILI9341_DrawColorBurst+0xb0>
	{
		BurstBuffer[j] = chifted;
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001796:	4413      	add	r3, r2
 8001798:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800179c:	701a      	strb	r2, [r3, #0]
		BurstBuffer[j+1] = color;
 800179e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017a0:	3301      	adds	r3, #1
 80017a2:	88fa      	ldrh	r2, [r7, #6]
 80017a4:	b2d1      	uxtb	r1, r2
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < BufferSize; j+=2)
 80017aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017ac:	3302      	adds	r3, #2
 80017ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80017b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80017b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d3ec      	bcc.n	8001792 <ILI9341_DrawColorBurst+0x92>
	}

	uint32_t SendingSize = size * 2;
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	617b      	str	r3, [r7, #20]
	uint32_t SendingInBlock = SendingSize / BufferSize;
 80017be:	697a      	ldr	r2, [r7, #20]
 80017c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017c6:	613b      	str	r3, [r7, #16]
	uint32_t RemainderFromBlock = SendingSize % BufferSize;
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017cc:	fbb3 f2f2 	udiv	r2, r3, r2
 80017d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017d2:	fb01 f202 	mul.w	r2, r1, r2
 80017d6:	1a9b      	subs	r3, r3, r2
 80017d8:	60fb      	str	r3, [r7, #12]

	if(SendingInBlock != 0)
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d010      	beq.n	8001802 <ILI9341_DrawColorBurst+0x102>
	{
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 80017e0:	2300      	movs	r3, #0
 80017e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017e4:	e009      	b.n	80017fa <ILI9341_DrawColorBurst+0xfa>
		{
			HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, BufferSize, 10);
 80017e6:	69b9      	ldr	r1, [r7, #24]
 80017e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ea:	b29a      	uxth	r2, r3
 80017ec:	230a      	movs	r3, #10
 80017ee:	480f      	ldr	r0, [pc, #60]	; (800182c <ILI9341_DrawColorBurst+0x12c>)
 80017f0:	f005 fb49 	bl	8006e86 <HAL_SPI_Transmit>
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 80017f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017f6:	3301      	adds	r3, #1
 80017f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	429a      	cmp	r2, r3
 8001800:	d3f1      	bcc.n	80017e6 <ILI9341_DrawColorBurst+0xe6>
		}
	}

	HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, RemainderFromBlock, 10);
 8001802:	69b9      	ldr	r1, [r7, #24]
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	b29a      	uxth	r2, r3
 8001808:	230a      	movs	r3, #10
 800180a:	4808      	ldr	r0, [pc, #32]	; (800182c <ILI9341_DrawColorBurst+0x12c>)
 800180c:	f005 fb3b 	bl	8006e86 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001810:	2201      	movs	r2, #1
 8001812:	2101      	movs	r1, #1
 8001814:	4804      	ldr	r0, [pc, #16]	; (8001828 <ILI9341_DrawColorBurst+0x128>)
 8001816:	f003 fa01 	bl	8004c1c <HAL_GPIO_WritePin>
 800181a:	46ad      	mov	sp, r5
}
 800181c:	bf00      	nop
 800181e:	3730      	adds	r7, #48	; 0x30
 8001820:	46bd      	mov	sp, r7
 8001822:	bdb0      	pop	{r4, r5, r7, pc}
 8001824:	40020000 	.word	0x40020000
 8001828:	40020800 	.word	0x40020800
 800182c:	200036f4 	.word	0x200036f4

08001830 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	80fb      	strh	r3, [r7, #6]
	ILI9341_SetAddress(0, 0, LCD_WIDTH, LCD_HEIGHT);
 800183a:	4b0e      	ldr	r3, [pc, #56]	; (8001874 <ILI9341_FillScreen+0x44>)
 800183c:	881b      	ldrh	r3, [r3, #0]
 800183e:	b29a      	uxth	r2, r3
 8001840:	4b0d      	ldr	r3, [pc, #52]	; (8001878 <ILI9341_FillScreen+0x48>)
 8001842:	881b      	ldrh	r3, [r3, #0]
 8001844:	b29b      	uxth	r3, r3
 8001846:	2100      	movs	r1, #0
 8001848:	2000      	movs	r0, #0
 800184a:	f7ff fd8b 	bl	8001364 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, LCD_WIDTH*LCD_HEIGHT);
 800184e:	4b09      	ldr	r3, [pc, #36]	; (8001874 <ILI9341_FillScreen+0x44>)
 8001850:	881b      	ldrh	r3, [r3, #0]
 8001852:	b29b      	uxth	r3, r3
 8001854:	461a      	mov	r2, r3
 8001856:	4b08      	ldr	r3, [pc, #32]	; (8001878 <ILI9341_FillScreen+0x48>)
 8001858:	881b      	ldrh	r3, [r3, #0]
 800185a:	b29b      	uxth	r3, r3
 800185c:	fb03 f302 	mul.w	r3, r3, r2
 8001860:	461a      	mov	r2, r3
 8001862:	88fb      	ldrh	r3, [r7, #6]
 8001864:	4611      	mov	r1, r2
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff ff4a 	bl	8001700 <ILI9341_DrawColorBurst>
}
 800186c:	bf00      	nop
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	20000002 	.word	0x20000002
 8001878:	20000000 	.word	0x20000000

0800187c <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x,uint16_t y,uint16_t color)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b086      	sub	sp, #24
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	80fb      	strh	r3, [r7, #6]
 8001886:	460b      	mov	r3, r1
 8001888:	80bb      	strh	r3, [r7, #4]
 800188a:	4613      	mov	r3, r2
 800188c:	807b      	strh	r3, [r7, #2]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 800188e:	4b2c      	ldr	r3, [pc, #176]	; (8001940 <ILI9341_DrawPixel+0xc4>)
 8001890:	881b      	ldrh	r3, [r3, #0]
 8001892:	b29b      	uxth	r3, r3
 8001894:	88fa      	ldrh	r2, [r7, #6]
 8001896:	429a      	cmp	r2, r3
 8001898:	d24d      	bcs.n	8001936 <ILI9341_DrawPixel+0xba>
 800189a:	4b2a      	ldr	r3, [pc, #168]	; (8001944 <ILI9341_DrawPixel+0xc8>)
 800189c:	881b      	ldrh	r3, [r3, #0]
 800189e:	b29b      	uxth	r3, r3
 80018a0:	88ba      	ldrh	r2, [r7, #4]
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d247      	bcs.n	8001936 <ILI9341_DrawPixel+0xba>

	uint8_t bufferX[4] = {x>>8, x, (x+1)>>8, (x+1)};
 80018a6:	88fb      	ldrh	r3, [r7, #6]
 80018a8:	0a1b      	lsrs	r3, r3, #8
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	753b      	strb	r3, [r7, #20]
 80018b0:	88fb      	ldrh	r3, [r7, #6]
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	757b      	strb	r3, [r7, #21]
 80018b6:	88fb      	ldrh	r3, [r7, #6]
 80018b8:	3301      	adds	r3, #1
 80018ba:	121b      	asrs	r3, r3, #8
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	75bb      	strb	r3, [r7, #22]
 80018c0:	88fb      	ldrh	r3, [r7, #6]
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	3301      	adds	r3, #1
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	75fb      	strb	r3, [r7, #23]
	uint8_t bufferY[4] = {y>>8, y, (y+1)>>8, (y+1)};
 80018ca:	88bb      	ldrh	r3, [r7, #4]
 80018cc:	0a1b      	lsrs	r3, r3, #8
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	743b      	strb	r3, [r7, #16]
 80018d4:	88bb      	ldrh	r3, [r7, #4]
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	747b      	strb	r3, [r7, #17]
 80018da:	88bb      	ldrh	r3, [r7, #4]
 80018dc:	3301      	adds	r3, #1
 80018de:	121b      	asrs	r3, r3, #8
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	74bb      	strb	r3, [r7, #18]
 80018e4:	88bb      	ldrh	r3, [r7, #4]
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	3301      	adds	r3, #1
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	74fb      	strb	r3, [r7, #19]
	uint8_t bufferC[2] = {color>>8, color};
 80018ee:	887b      	ldrh	r3, [r7, #2]
 80018f0:	0a1b      	lsrs	r3, r3, #8
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	733b      	strb	r3, [r7, #12]
 80018f8:	887b      	ldrh	r3, [r7, #2]
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	737b      	strb	r3, [r7, #13]

	ILI9341_WriteCommand(0x2A);						//ADDRESS
 80018fe:	202a      	movs	r0, #42	; 0x2a
 8001900:	f7ff fcda 	bl	80012b8 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferX, sizeof(bufferX));	//XDATA
 8001904:	f107 0314 	add.w	r3, r7, #20
 8001908:	2104      	movs	r1, #4
 800190a:	4618      	mov	r0, r3
 800190c:	f7ff fd0c 	bl	8001328 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2B);						//ADDRESS
 8001910:	202b      	movs	r0, #43	; 0x2b
 8001912:	f7ff fcd1 	bl	80012b8 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferY, sizeof(bufferY));	//YDATA
 8001916:	f107 0310 	add.w	r3, r7, #16
 800191a:	2104      	movs	r1, #4
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff fd03 	bl	8001328 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);						//ADDRESS
 8001922:	202c      	movs	r0, #44	; 0x2c
 8001924:	f7ff fcc8 	bl	80012b8 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferC, sizeof(bufferC));	//COLOR
 8001928:	f107 030c 	add.w	r3, r7, #12
 800192c:	2102      	movs	r1, #2
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff fcfa 	bl	8001328 <ILI9341_WriteBuffer>
 8001934:	e000      	b.n	8001938 <ILI9341_DrawPixel+0xbc>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001936:	bf00      	nop
}
 8001938:	3718      	adds	r7, #24
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	20000002 	.word	0x20000002
 8001944:	20000000 	.word	0x20000000

08001948 <ILI9341_DrawRectangle>:

void ILI9341_DrawRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 8001948:	b590      	push	{r4, r7, lr}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	4604      	mov	r4, r0
 8001950:	4608      	mov	r0, r1
 8001952:	4611      	mov	r1, r2
 8001954:	461a      	mov	r2, r3
 8001956:	4623      	mov	r3, r4
 8001958:	80fb      	strh	r3, [r7, #6]
 800195a:	4603      	mov	r3, r0
 800195c:	80bb      	strh	r3, [r7, #4]
 800195e:	460b      	mov	r3, r1
 8001960:	807b      	strh	r3, [r7, #2]
 8001962:	4613      	mov	r3, r2
 8001964:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001966:	4b24      	ldr	r3, [pc, #144]	; (80019f8 <ILI9341_DrawRectangle+0xb0>)
 8001968:	881b      	ldrh	r3, [r3, #0]
 800196a:	b29b      	uxth	r3, r3
 800196c:	88fa      	ldrh	r2, [r7, #6]
 800196e:	429a      	cmp	r2, r3
 8001970:	d23d      	bcs.n	80019ee <ILI9341_DrawRectangle+0xa6>
 8001972:	4b22      	ldr	r3, [pc, #136]	; (80019fc <ILI9341_DrawRectangle+0xb4>)
 8001974:	881b      	ldrh	r3, [r3, #0]
 8001976:	b29b      	uxth	r3, r3
 8001978:	88ba      	ldrh	r2, [r7, #4]
 800197a:	429a      	cmp	r2, r3
 800197c:	d237      	bcs.n	80019ee <ILI9341_DrawRectangle+0xa6>

	if((x+width-1)>=LCD_WIDTH)
 800197e:	88fa      	ldrh	r2, [r7, #6]
 8001980:	887b      	ldrh	r3, [r7, #2]
 8001982:	4413      	add	r3, r2
 8001984:	4a1c      	ldr	r2, [pc, #112]	; (80019f8 <ILI9341_DrawRectangle+0xb0>)
 8001986:	8812      	ldrh	r2, [r2, #0]
 8001988:	b292      	uxth	r2, r2
 800198a:	4293      	cmp	r3, r2
 800198c:	dd05      	ble.n	800199a <ILI9341_DrawRectangle+0x52>
	{
		width=LCD_WIDTH-x;
 800198e:	4b1a      	ldr	r3, [pc, #104]	; (80019f8 <ILI9341_DrawRectangle+0xb0>)
 8001990:	881b      	ldrh	r3, [r3, #0]
 8001992:	b29a      	uxth	r2, r3
 8001994:	88fb      	ldrh	r3, [r7, #6]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	807b      	strh	r3, [r7, #2]
	}

	if((y+height-1)>=LCD_HEIGHT)
 800199a:	88ba      	ldrh	r2, [r7, #4]
 800199c:	883b      	ldrh	r3, [r7, #0]
 800199e:	4413      	add	r3, r2
 80019a0:	4a16      	ldr	r2, [pc, #88]	; (80019fc <ILI9341_DrawRectangle+0xb4>)
 80019a2:	8812      	ldrh	r2, [r2, #0]
 80019a4:	b292      	uxth	r2, r2
 80019a6:	4293      	cmp	r3, r2
 80019a8:	dd05      	ble.n	80019b6 <ILI9341_DrawRectangle+0x6e>
	{
		height=LCD_HEIGHT-y;
 80019aa:	4b14      	ldr	r3, [pc, #80]	; (80019fc <ILI9341_DrawRectangle+0xb4>)
 80019ac:	881b      	ldrh	r3, [r3, #0]
 80019ae:	b29a      	uxth	r2, r3
 80019b0:	88bb      	ldrh	r3, [r7, #4]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	803b      	strh	r3, [r7, #0]
	}

	ILI9341_SetAddress(x, y, x+width-1, y+height-1);
 80019b6:	88fa      	ldrh	r2, [r7, #6]
 80019b8:	887b      	ldrh	r3, [r7, #2]
 80019ba:	4413      	add	r3, r2
 80019bc:	b29b      	uxth	r3, r3
 80019be:	3b01      	subs	r3, #1
 80019c0:	b29c      	uxth	r4, r3
 80019c2:	88ba      	ldrh	r2, [r7, #4]
 80019c4:	883b      	ldrh	r3, [r7, #0]
 80019c6:	4413      	add	r3, r2
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	3b01      	subs	r3, #1
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	88b9      	ldrh	r1, [r7, #4]
 80019d0:	88f8      	ldrh	r0, [r7, #6]
 80019d2:	4622      	mov	r2, r4
 80019d4:	f7ff fcc6 	bl	8001364 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, height*width);
 80019d8:	883b      	ldrh	r3, [r7, #0]
 80019da:	887a      	ldrh	r2, [r7, #2]
 80019dc:	fb02 f303 	mul.w	r3, r2, r3
 80019e0:	461a      	mov	r2, r3
 80019e2:	8b3b      	ldrh	r3, [r7, #24]
 80019e4:	4611      	mov	r1, r2
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff fe8a 	bl	8001700 <ILI9341_DrawColorBurst>
 80019ec:	e000      	b.n	80019f0 <ILI9341_DrawRectangle+0xa8>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 80019ee:	bf00      	nop
}
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd90      	pop	{r4, r7, pc}
 80019f6:	bf00      	nop
 80019f8:	20000002 	.word	0x20000002
 80019fc:	20000000 	.word	0x20000000

08001a00 <ILI9341_DrawHLine>:

void ILI9341_DrawHLine(uint16_t x, uint16_t y, uint16_t width, uint16_t color)
{
 8001a00:	b590      	push	{r4, r7, lr}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	4604      	mov	r4, r0
 8001a08:	4608      	mov	r0, r1
 8001a0a:	4611      	mov	r1, r2
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	4623      	mov	r3, r4
 8001a10:	80fb      	strh	r3, [r7, #6]
 8001a12:	4603      	mov	r3, r0
 8001a14:	80bb      	strh	r3, [r7, #4]
 8001a16:	460b      	mov	r3, r1
 8001a18:	807b      	strh	r3, [r7, #2]
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001a1e:	4b18      	ldr	r3, [pc, #96]	; (8001a80 <ILI9341_DrawHLine+0x80>)
 8001a20:	881b      	ldrh	r3, [r3, #0]
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	88fa      	ldrh	r2, [r7, #6]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d225      	bcs.n	8001a76 <ILI9341_DrawHLine+0x76>
 8001a2a:	4b16      	ldr	r3, [pc, #88]	; (8001a84 <ILI9341_DrawHLine+0x84>)
 8001a2c:	881b      	ldrh	r3, [r3, #0]
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	88ba      	ldrh	r2, [r7, #4]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d21f      	bcs.n	8001a76 <ILI9341_DrawHLine+0x76>

	if((x+width-1)>=LCD_WIDTH)
 8001a36:	88fa      	ldrh	r2, [r7, #6]
 8001a38:	887b      	ldrh	r3, [r7, #2]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	4a10      	ldr	r2, [pc, #64]	; (8001a80 <ILI9341_DrawHLine+0x80>)
 8001a3e:	8812      	ldrh	r2, [r2, #0]
 8001a40:	b292      	uxth	r2, r2
 8001a42:	4293      	cmp	r3, r2
 8001a44:	dd05      	ble.n	8001a52 <ILI9341_DrawHLine+0x52>
	{
		width=LCD_WIDTH-x;
 8001a46:	4b0e      	ldr	r3, [pc, #56]	; (8001a80 <ILI9341_DrawHLine+0x80>)
 8001a48:	881b      	ldrh	r3, [r3, #0]
 8001a4a:	b29a      	uxth	r2, r3
 8001a4c:	88fb      	ldrh	r3, [r7, #6]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	807b      	strh	r3, [r7, #2]
	}

	ILI9341_SetAddress(x, y, x+width-1, y);
 8001a52:	88fa      	ldrh	r2, [r7, #6]
 8001a54:	887b      	ldrh	r3, [r7, #2]
 8001a56:	4413      	add	r3, r2
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	b29a      	uxth	r2, r3
 8001a5e:	88bb      	ldrh	r3, [r7, #4]
 8001a60:	88b9      	ldrh	r1, [r7, #4]
 8001a62:	88f8      	ldrh	r0, [r7, #6]
 8001a64:	f7ff fc7e 	bl	8001364 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, width);
 8001a68:	887a      	ldrh	r2, [r7, #2]
 8001a6a:	883b      	ldrh	r3, [r7, #0]
 8001a6c:	4611      	mov	r1, r2
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7ff fe46 	bl	8001700 <ILI9341_DrawColorBurst>
 8001a74:	e000      	b.n	8001a78 <ILI9341_DrawHLine+0x78>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001a76:	bf00      	nop
}
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd90      	pop	{r4, r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	20000002 	.word	0x20000002
 8001a84:	20000000 	.word	0x20000000

08001a88 <ILI9341_DrawVLine>:

void ILI9341_DrawVLine(uint16_t x, uint16_t y, uint16_t height, uint16_t color)
{
 8001a88:	b590      	push	{r4, r7, lr}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	4604      	mov	r4, r0
 8001a90:	4608      	mov	r0, r1
 8001a92:	4611      	mov	r1, r2
 8001a94:	461a      	mov	r2, r3
 8001a96:	4623      	mov	r3, r4
 8001a98:	80fb      	strh	r3, [r7, #6]
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	80bb      	strh	r3, [r7, #4]
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	807b      	strh	r3, [r7, #2]
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001aa6:	4b18      	ldr	r3, [pc, #96]	; (8001b08 <ILI9341_DrawVLine+0x80>)
 8001aa8:	881b      	ldrh	r3, [r3, #0]
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	88fa      	ldrh	r2, [r7, #6]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d225      	bcs.n	8001afe <ILI9341_DrawVLine+0x76>
 8001ab2:	4b16      	ldr	r3, [pc, #88]	; (8001b0c <ILI9341_DrawVLine+0x84>)
 8001ab4:	881b      	ldrh	r3, [r3, #0]
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	88ba      	ldrh	r2, [r7, #4]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d21f      	bcs.n	8001afe <ILI9341_DrawVLine+0x76>

	if((y+height-1)>=LCD_HEIGHT)
 8001abe:	88ba      	ldrh	r2, [r7, #4]
 8001ac0:	887b      	ldrh	r3, [r7, #2]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	4a11      	ldr	r2, [pc, #68]	; (8001b0c <ILI9341_DrawVLine+0x84>)
 8001ac6:	8812      	ldrh	r2, [r2, #0]
 8001ac8:	b292      	uxth	r2, r2
 8001aca:	4293      	cmp	r3, r2
 8001acc:	dd05      	ble.n	8001ada <ILI9341_DrawVLine+0x52>
	{
		height=LCD_HEIGHT-y;
 8001ace:	4b0f      	ldr	r3, [pc, #60]	; (8001b0c <ILI9341_DrawVLine+0x84>)
 8001ad0:	881b      	ldrh	r3, [r3, #0]
 8001ad2:	b29a      	uxth	r2, r3
 8001ad4:	88bb      	ldrh	r3, [r7, #4]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	807b      	strh	r3, [r7, #2]
	}

	ILI9341_SetAddress(x, y, x, y+height-1);
 8001ada:	88ba      	ldrh	r2, [r7, #4]
 8001adc:	887b      	ldrh	r3, [r7, #2]
 8001ade:	4413      	add	r3, r2
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	88fa      	ldrh	r2, [r7, #6]
 8001ae8:	88b9      	ldrh	r1, [r7, #4]
 8001aea:	88f8      	ldrh	r0, [r7, #6]
 8001aec:	f7ff fc3a 	bl	8001364 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, height);
 8001af0:	887a      	ldrh	r2, [r7, #2]
 8001af2:	883b      	ldrh	r3, [r7, #0]
 8001af4:	4611      	mov	r1, r2
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff fe02 	bl	8001700 <ILI9341_DrawColorBurst>
 8001afc:	e000      	b.n	8001b00 <ILI9341_DrawVLine+0x78>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001afe:	bf00      	nop
}
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd90      	pop	{r4, r7, pc}
 8001b06:	bf00      	nop
 8001b08:	20000002 	.word	0x20000002
 8001b0c:	20000000 	.word	0x20000000

08001b10 <wireWriteRegister>:
/*!
    @brief  Sends a single command byte over I2C
*/
/**************************************************************************/
void wireWriteRegister (uint8_t reg, uint16_t value)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b088      	sub	sp, #32
 8001b14:	af04      	add	r7, sp, #16
 8001b16:	4603      	mov	r3, r0
 8001b18:	460a      	mov	r2, r1
 8001b1a:	71fb      	strb	r3, [r7, #7]
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	80bb      	strh	r3, [r7, #4]
	uint8_t i2c_temp[2];
	i2c_temp[0] = value>>8;
 8001b20:	88bb      	ldrh	r3, [r7, #4]
 8001b22:	0a1b      	lsrs	r3, r3, #8
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	733b      	strb	r3, [r7, #12]
	i2c_temp[1] = value;
 8001b2a:	88bb      	ldrh	r3, [r7, #4]
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(&hi2c1, INA219_ADDRESS<<1, (uint16_t)reg, 1, i2c_temp, 2, 0xffffffff);
 8001b30:	79fb      	ldrb	r3, [r7, #7]
 8001b32:	b29a      	uxth	r2, r3
 8001b34:	f04f 33ff 	mov.w	r3, #4294967295
 8001b38:	9302      	str	r3, [sp, #8]
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	9301      	str	r3, [sp, #4]
 8001b3e:	f107 030c 	add.w	r3, r7, #12
 8001b42:	9300      	str	r3, [sp, #0]
 8001b44:	2301      	movs	r3, #1
 8001b46:	2180      	movs	r1, #128	; 0x80
 8001b48:	4804      	ldr	r0, [pc, #16]	; (8001b5c <wireWriteRegister+0x4c>)
 8001b4a:	f003 f9dd 	bl	8004f08 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8001b4e:	2001      	movs	r0, #1
 8001b50:	f002 f978 	bl	8003e44 <HAL_Delay>
}
 8001b54:	bf00      	nop
 8001b56:	3710      	adds	r7, #16
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	20002d7c 	.word	0x20002d7c

08001b60 <wireReadRegister>:
/*!
    @brief  Reads a 16 bit values over I2C
*/
/**************************************************************************/
void wireReadRegister(uint8_t reg, uint16_t *value)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b088      	sub	sp, #32
 8001b64:	af04      	add	r7, sp, #16
 8001b66:	4603      	mov	r3, r0
 8001b68:	6039      	str	r1, [r7, #0]
 8001b6a:	71fb      	strb	r3, [r7, #7]
	uint8_t i2c_temp[2];
	HAL_I2C_Mem_Read(&hi2c1, INA219_ADDRESS<<1, (uint16_t)reg, 1,i2c_temp, 2, 0xffffffff);
 8001b6c:	79fb      	ldrb	r3, [r7, #7]
 8001b6e:	b29a      	uxth	r2, r3
 8001b70:	f04f 33ff 	mov.w	r3, #4294967295
 8001b74:	9302      	str	r3, [sp, #8]
 8001b76:	2302      	movs	r3, #2
 8001b78:	9301      	str	r3, [sp, #4]
 8001b7a:	f107 030c 	add.w	r3, r7, #12
 8001b7e:	9300      	str	r3, [sp, #0]
 8001b80:	2301      	movs	r3, #1
 8001b82:	2180      	movs	r1, #128	; 0x80
 8001b84:	4809      	ldr	r0, [pc, #36]	; (8001bac <wireReadRegister+0x4c>)
 8001b86:	f003 fab9 	bl	80050fc <HAL_I2C_Mem_Read>
	HAL_Delay(1);
 8001b8a:	2001      	movs	r0, #1
 8001b8c:	f002 f95a 	bl	8003e44 <HAL_Delay>
	*value = ((uint16_t)i2c_temp[0]<<8 )|(uint16_t)i2c_temp[1];
 8001b90:	7b3b      	ldrb	r3, [r7, #12]
 8001b92:	021b      	lsls	r3, r3, #8
 8001b94:	b21a      	sxth	r2, r3
 8001b96:	7b7b      	ldrb	r3, [r7, #13]
 8001b98:	b21b      	sxth	r3, r3
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	b21b      	sxth	r3, r3
 8001b9e:	b29a      	uxth	r2, r3
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	801a      	strh	r2, [r3, #0]
}
 8001ba4:	bf00      	nop
 8001ba6:	3710      	adds	r7, #16
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	20002d7c 	.word	0x20002d7c

08001bb0 <setCalibration_16V_400mA>:
    @brief set device to alibration which uses the highest precision for
      current measurement (0.1mA), at the expense of
      only supporting 16V at 400mA max.
*/
/**************************************************************************/
void setCalibration_16V_400mA(void) {
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0

  // 5. Compute the calibration register
  // Cal = trunc (0.04096 / (Current_LSB * RSHUNT))
  // Cal = 8192 (0x2000)

  ina219_calValue = 8192;
 8001bb6:	4b0e      	ldr	r3, [pc, #56]	; (8001bf0 <setCalibration_16V_400mA+0x40>)
 8001bb8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bbc:	601a      	str	r2, [r3, #0]
  // MaximumPower = Max_Current_Before_Overflow * VBUS_MAX
  // MaximumPower = 0.4 * 16V
  // MaximumPower = 6.4W

  // Set multipliers to convert raw current/power values
  ina219_currentDivider_mA = 20;  // Current LSB = 50uA per bit (1000/50 = 20)
 8001bbe:	4b0d      	ldr	r3, [pc, #52]	; (8001bf4 <setCalibration_16V_400mA+0x44>)
 8001bc0:	2214      	movs	r2, #20
 8001bc2:	601a      	str	r2, [r3, #0]
  ina219_powerMultiplier_mW = 1;     // Power LSB = 1mW per bit
 8001bc4:	4b0c      	ldr	r3, [pc, #48]	; (8001bf8 <setCalibration_16V_400mA+0x48>)
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	601a      	str	r2, [r3, #0]

  // Set Calibration register to 'Cal' calculated above
  wireWriteRegister(INA219_REG_CALIBRATION, ina219_calValue);
 8001bca:	4b09      	ldr	r3, [pc, #36]	; (8001bf0 <setCalibration_16V_400mA+0x40>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	2005      	movs	r0, #5
 8001bd4:	f7ff ff9c 	bl	8001b10 <wireWriteRegister>

  // Set Config register to take into account the settings above
  uint16_t config = INA219_CONFIG_BVOLTAGERANGE_16V |
 8001bd8:	f240 139f 	movw	r3, #415	; 0x19f
 8001bdc:	80fb      	strh	r3, [r7, #6]
                    INA219_CONFIG_GAIN_1_40MV |
                    INA219_CONFIG_BADCRES_12BIT |
                    INA219_CONFIG_SADCRES_12BIT_1S_532US |
                    INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS;
  wireWriteRegister(INA219_REG_CONFIG, config);
 8001bde:	88fb      	ldrh	r3, [r7, #6]
 8001be0:	4619      	mov	r1, r3
 8001be2:	2000      	movs	r0, #0
 8001be4:	f7ff ff94 	bl	8001b10 <wireWriteRegister>
}
 8001be8:	bf00      	nop
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	20002a7c 	.word	0x20002a7c
 8001bf4:	20000a70 	.word	0x20000a70
 8001bf8:	20000a74 	.word	0x20000a74

08001bfc <getBusVoltage_raw>:
/*!
    @brief  Gets the raw bus voltage (16-bit signed integer, so +-32767)
    @return the raw bus voltage reading
*/
/**************************************************************************/
int16_t getBusVoltage_raw() {
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
  uint16_t value;
  wireReadRegister(INA219_REG_BUSVOLTAGE, &value);
 8001c02:	1dbb      	adds	r3, r7, #6
 8001c04:	4619      	mov	r1, r3
 8001c06:	2002      	movs	r0, #2
 8001c08:	f7ff ffaa 	bl	8001b60 <wireReadRegister>

  // Shift to the right 3 to drop CNVR and OVF and multiply by LSB
  return (int16_t)((value >> 3) * 4);
 8001c0c:	88fb      	ldrh	r3, [r7, #6]
 8001c0e:	08db      	lsrs	r3, r3, #3
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	b21b      	sxth	r3, r3
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3708      	adds	r7, #8
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <getCurrent_raw>:
/*!
    @brief  Gets the raw current value (16-bit signed integer, so +-32767)
    @return the raw current reading
*/
/**************************************************************************/
int16_t getCurrent_raw() {
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0

  // Sometimes a sharp load will reset the INA219, which will
  // reset the cal register, meaning CURRENT and POWER will
  // not be available ... avoid this by always setting a cal
  // value even if it's an unfortunate extra step
  wireWriteRegister(INA219_REG_CALIBRATION, ina219_calValue);
 8001c26:	4b09      	ldr	r3, [pc, #36]	; (8001c4c <getCurrent_raw+0x2c>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	2005      	movs	r0, #5
 8001c30:	f7ff ff6e 	bl	8001b10 <wireWriteRegister>

  // Now we can safely read the CURRENT register!
  wireReadRegister(INA219_REG_CURRENT, &value);
 8001c34:	1dbb      	adds	r3, r7, #6
 8001c36:	4619      	mov	r1, r3
 8001c38:	2004      	movs	r0, #4
 8001c3a:	f7ff ff91 	bl	8001b60 <wireReadRegister>

  return (int16_t)value;
 8001c3e:	88fb      	ldrh	r3, [r7, #6]
 8001c40:	b21b      	sxth	r3, r3
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	20002a7c 	.word	0x20002a7c

08001c50 <getPower_raw>:
/*!
    @brief  Gets the raw power value (16-bit signed integer, so +-32767)
    @return raw power reading
*/
/**************************************************************************/
int16_t getPower_raw() {
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0

  // Sometimes a sharp load will reset the INA219, which will
  // reset the cal register, meaning CURRENT and POWER will
  // not be available ... avoid this by always setting a cal
  // value even if it's an unfortunate extra step
  wireWriteRegister(INA219_REG_CALIBRATION, ina219_calValue);
 8001c56:	4b09      	ldr	r3, [pc, #36]	; (8001c7c <getPower_raw+0x2c>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	2005      	movs	r0, #5
 8001c60:	f7ff ff56 	bl	8001b10 <wireWriteRegister>

  // Now we can safely read the POWER register!
  wireReadRegister(INA219_REG_POWER, &value);
 8001c64:	1dbb      	adds	r3, r7, #6
 8001c66:	4619      	mov	r1, r3
 8001c68:	2003      	movs	r0, #3
 8001c6a:	f7ff ff79 	bl	8001b60 <wireReadRegister>

  return (int16_t)value;
 8001c6e:	88fb      	ldrh	r3, [r7, #6]
 8001c70:	b21b      	sxth	r3, r3
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	20002a7c 	.word	0x20002a7c

08001c80 <getBusVoltage_V>:
/*!
    @brief  Gets the shunt voltage in volts
    @return the bus voltage converted to volts
*/
/**************************************************************************/
float getBusVoltage_V() {
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
  int16_t value = getBusVoltage_raw();
 8001c86:	f7ff ffb9 	bl	8001bfc <getBusVoltage_raw>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	80fb      	strh	r3, [r7, #6]
  return value * 0.001;
 8001c8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7fe fc46 	bl	8000524 <__aeabi_i2d>
 8001c98:	a309      	add	r3, pc, #36	; (adr r3, 8001cc0 <getBusVoltage_V+0x40>)
 8001c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c9e:	f7fe fcab 	bl	80005f8 <__aeabi_dmul>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	4610      	mov	r0, r2
 8001ca8:	4619      	mov	r1, r3
 8001caa:	f7fe ff9d 	bl	8000be8 <__aeabi_d2f>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	ee07 3a90 	vmov	s15, r3
}
 8001cb4:	eeb0 0a67 	vmov.f32	s0, s15
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	d2f1a9fc 	.word	0xd2f1a9fc
 8001cc4:	3f50624d 	.word	0x3f50624d

08001cc8 <getCurrent_mA>:
    @brief  Gets the current value in mA, taking into account the
            config settings and current LSB
    @return the current reading convereted to milliamps
*/
/**************************************************************************/
float getCurrent_mA() {
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
  float valueDec = getCurrent_raw();
 8001cce:	f7ff ffa7 	bl	8001c20 <getCurrent_raw>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	ee07 3a90 	vmov	s15, r3
 8001cd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cdc:	edc7 7a01 	vstr	s15, [r7, #4]
  valueDec /= ina219_currentDivider_mA;
 8001ce0:	4b09      	ldr	r3, [pc, #36]	; (8001d08 <getCurrent_mA+0x40>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	ee07 3a90 	vmov	s15, r3
 8001ce8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001cec:	edd7 6a01 	vldr	s13, [r7, #4]
 8001cf0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cf4:	edc7 7a01 	vstr	s15, [r7, #4]
  return valueDec;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	ee07 3a90 	vmov	s15, r3
}
 8001cfe:	eeb0 0a67 	vmov.f32	s0, s15
 8001d02:	3708      	adds	r7, #8
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	20000a70 	.word	0x20000a70

08001d0c <getPower_mW>:
    @brief  Gets the power value in mW, taking into account the
            config settings and current LSB
    @return power reading converted to milliwatts
*/
/**************************************************************************/
float getPower_mW() {
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
  float valueDec = getPower_raw();
 8001d12:	f7ff ff9d 	bl	8001c50 <getPower_raw>
 8001d16:	4603      	mov	r3, r0
 8001d18:	ee07 3a90 	vmov	s15, r3
 8001d1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d20:	edc7 7a01 	vstr	s15, [r7, #4]
  valueDec *= ina219_powerMultiplier_mW;
 8001d24:	4b09      	ldr	r3, [pc, #36]	; (8001d4c <getPower_mW+0x40>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	ee07 3a90 	vmov	s15, r3
 8001d2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d30:	ed97 7a01 	vldr	s14, [r7, #4]
 8001d34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d38:	edc7 7a01 	vstr	s15, [r7, #4]
  return valueDec;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	ee07 3a90 	vmov	s15, r3
}
 8001d42:	eeb0 0a67 	vmov.f32	s0, s15
 8001d46:	3708      	adds	r7, #8
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	20000a74 	.word	0x20000a74

08001d50 <set_time>:
long int tick = 29380;
char printbuffer[300];
bool printed;
/**Fungsi ini digunakan untuk set timer jika dibutuhkan untuk set rtc
  */
void set_time(void){
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b086      	sub	sp, #24
 8001d54:	af00      	add	r7, sp, #0
	  RTC_TimeTypeDef sTime = {0};
 8001d56:	1d3b      	adds	r3, r7, #4
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	605a      	str	r2, [r3, #4]
 8001d5e:	609a      	str	r2, [r3, #8]
 8001d60:	60da      	str	r2, [r3, #12]
 8001d62:	611a      	str	r2, [r3, #16]
	  RTC_DateTypeDef sDate = {0};
 8001d64:	2300      	movs	r3, #0
 8001d66:	603b      	str	r3, [r7, #0]
	  /** Initialize RTC and set the Time and Date
	  */
	  sTime.Hours = 0x10;
 8001d68:	2310      	movs	r3, #16
 8001d6a:	713b      	strb	r3, [r7, #4]
	  sTime.Minutes = 0x1;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	717b      	strb	r3, [r7, #5]
	  sTime.Seconds = 0x0;
 8001d70:	2300      	movs	r3, #0
 8001d72:	71bb      	strb	r3, [r7, #6]
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001d74:	2300      	movs	r3, #0
 8001d76:	613b      	str	r3, [r7, #16]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	617b      	str	r3, [r7, #20]
	  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001d7c:	1d3b      	adds	r3, r7, #4
 8001d7e:	2201      	movs	r2, #1
 8001d80:	4619      	mov	r1, r3
 8001d82:	4812      	ldr	r0, [pc, #72]	; (8001dcc <set_time+0x7c>)
 8001d84:	f004 fd23 	bl	80067ce <HAL_RTC_SetTime>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <set_time+0x42>
	  {
	    Error_Handler();
 8001d8e:	f001 fc03 	bl	8003598 <Error_Handler>
	  }
	  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001d92:	2301      	movs	r3, #1
 8001d94:	703b      	strb	r3, [r7, #0]
	  sDate.Month = RTC_MONTH_OCTOBER;
 8001d96:	2310      	movs	r3, #16
 8001d98:	707b      	strb	r3, [r7, #1]
	  sDate.Date = 0x18;
 8001d9a:	2318      	movs	r3, #24
 8001d9c:	70bb      	strb	r3, [r7, #2]
	  sDate.Year = 0x21;
 8001d9e:	2321      	movs	r3, #33	; 0x21
 8001da0:	70fb      	strb	r3, [r7, #3]

	  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001da2:	463b      	mov	r3, r7
 8001da4:	2201      	movs	r2, #1
 8001da6:	4619      	mov	r1, r3
 8001da8:	4808      	ldr	r0, [pc, #32]	; (8001dcc <set_time+0x7c>)
 8001daa:	f004 fe2b 	bl	8006a04 <HAL_RTC_SetDate>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <set_time+0x68>
	  {
	    Error_Handler();
 8001db4:	f001 fbf0 	bl	8003598 <Error_Handler>
	  }
	  /* USER CODE BEGIN RTC_Init 2 */
	  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);
 8001db8:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8001dbc:	2101      	movs	r1, #1
 8001dbe:	4803      	ldr	r0, [pc, #12]	; (8001dcc <set_time+0x7c>)
 8001dc0:	f004 ffa6 	bl	8006d10 <HAL_RTCEx_BKUPWrite>
	  /* USER CODE END RTC_Init 2 */

}
 8001dc4:	bf00      	nop
 8001dc6:	3718      	adds	r7, #24
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	20002eb8 	.word	0x20002eb8

08001dd0 <getLCD>:
/**Fungsi ini digunakan untuk LCD*/

void getLCD(char *data_lat,char *data_lng, char *volt, char *amper, char *persen, char *gabungtanggal)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af02      	add	r7, sp, #8
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	60b9      	str	r1, [r7, #8]
 8001dda:	607a      	str	r2, [r7, #4]
 8001ddc:	603b      	str	r3, [r7, #0]
	  ILI9341_DrawVLine(0, 0, 320, DARKGREEN);
 8001dde:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8001de2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001de6:	2100      	movs	r1, #0
 8001de8:	2000      	movs	r0, #0
 8001dea:	f7ff fe4d 	bl	8001a88 <ILI9341_DrawVLine>
	  ILI9341_DrawVLine(2, 0, 320, DARKGREEN);
 8001dee:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8001df2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001df6:	2100      	movs	r1, #0
 8001df8:	2002      	movs	r0, #2
 8001dfa:	f7ff fe45 	bl	8001a88 <ILI9341_DrawVLine>
	  ILI9341_DrawText(gabungtanggal, FONT3, 9, 8, WHITE, BLACK);
 8001dfe:	2300      	movs	r3, #0
 8001e00:	9301      	str	r3, [sp, #4]
 8001e02:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e06:	9300      	str	r3, [sp, #0]
 8001e08:	2308      	movs	r3, #8
 8001e0a:	2209      	movs	r2, #9
 8001e0c:	4960      	ldr	r1, [pc, #384]	; (8001f90 <getLCD+0x1c0>)
 8001e0e:	69f8      	ldr	r0, [r7, #28]
 8001e10:	f7ff f9bf 	bl	8001192 <ILI9341_DrawText>
	  ILI9341_DrawText(persen, FONT3, 155, 8, WHITE, BLACK);
 8001e14:	2300      	movs	r3, #0
 8001e16:	9301      	str	r3, [sp, #4]
 8001e18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e1c:	9300      	str	r3, [sp, #0]
 8001e1e:	2308      	movs	r3, #8
 8001e20:	229b      	movs	r2, #155	; 0x9b
 8001e22:	495b      	ldr	r1, [pc, #364]	; (8001f90 <getLCD+0x1c0>)
 8001e24:	69b8      	ldr	r0, [r7, #24]
 8001e26:	f7ff f9b4 	bl	8001192 <ILI9341_DrawText>
	  if(atoi(persen) <= 100 && atoi(persen) >= 80)
 8001e2a:	69b8      	ldr	r0, [r7, #24]
 8001e2c:	f006 fda4 	bl	8008978 <atoi>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b64      	cmp	r3, #100	; 0x64
 8001e34:	dc33      	bgt.n	8001e9e <getLCD+0xce>
 8001e36:	69b8      	ldr	r0, [r7, #24]
 8001e38:	f006 fd9e 	bl	8008978 <atoi>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b4f      	cmp	r3, #79	; 0x4f
 8001e40:	dd2d      	ble.n	8001e9e <getLCD+0xce>
	  {
		  ILI9341_DrawRectangle(190, 4, 8, 20, GREENYELLOW);
 8001e42:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8001e46:	9300      	str	r3, [sp, #0]
 8001e48:	2314      	movs	r3, #20
 8001e4a:	2208      	movs	r2, #8
 8001e4c:	2104      	movs	r1, #4
 8001e4e:	20be      	movs	r0, #190	; 0xbe
 8001e50:	f7ff fd7a 	bl	8001948 <ILI9341_DrawRectangle>
		  ILI9341_DrawRectangle(200, 4, 8, 20, GREENYELLOW);
 8001e54:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8001e58:	9300      	str	r3, [sp, #0]
 8001e5a:	2314      	movs	r3, #20
 8001e5c:	2208      	movs	r2, #8
 8001e5e:	2104      	movs	r1, #4
 8001e60:	20c8      	movs	r0, #200	; 0xc8
 8001e62:	f7ff fd71 	bl	8001948 <ILI9341_DrawRectangle>
		  ILI9341_DrawRectangle(210, 4, 8, 20, GREENYELLOW);
 8001e66:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8001e6a:	9300      	str	r3, [sp, #0]
 8001e6c:	2314      	movs	r3, #20
 8001e6e:	2208      	movs	r2, #8
 8001e70:	2104      	movs	r1, #4
 8001e72:	20d2      	movs	r0, #210	; 0xd2
 8001e74:	f7ff fd68 	bl	8001948 <ILI9341_DrawRectangle>
		  ILI9341_DrawRectangle(220, 4, 8, 20, GREENYELLOW);
 8001e78:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8001e7c:	9300      	str	r3, [sp, #0]
 8001e7e:	2314      	movs	r3, #20
 8001e80:	2208      	movs	r2, #8
 8001e82:	2104      	movs	r1, #4
 8001e84:	20dc      	movs	r0, #220	; 0xdc
 8001e86:	f7ff fd5f 	bl	8001948 <ILI9341_DrawRectangle>
		  ILI9341_DrawRectangle(230, 4, 8, 20, GREENYELLOW);
 8001e8a:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8001e8e:	9300      	str	r3, [sp, #0]
 8001e90:	2314      	movs	r3, #20
 8001e92:	2208      	movs	r2, #8
 8001e94:	2104      	movs	r1, #4
 8001e96:	20e6      	movs	r0, #230	; 0xe6
 8001e98:	f7ff fd56 	bl	8001948 <ILI9341_DrawRectangle>
 8001e9c:	e083      	b.n	8001fa6 <getLCD+0x1d6>
	  }
	  else if(atoi(persen) >= 60 && atoi(persen) <= 79)
 8001e9e:	69b8      	ldr	r0, [r7, #24]
 8001ea0:	f006 fd6a 	bl	8008978 <atoi>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b3b      	cmp	r3, #59	; 0x3b
 8001ea8:	dd2a      	ble.n	8001f00 <getLCD+0x130>
 8001eaa:	69b8      	ldr	r0, [r7, #24]
 8001eac:	f006 fd64 	bl	8008978 <atoi>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b4f      	cmp	r3, #79	; 0x4f
 8001eb4:	dc24      	bgt.n	8001f00 <getLCD+0x130>
	  {
		  ILI9341_DrawRectangle(200, 4, 8, 20, GREENYELLOW);
 8001eb6:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8001eba:	9300      	str	r3, [sp, #0]
 8001ebc:	2314      	movs	r3, #20
 8001ebe:	2208      	movs	r2, #8
 8001ec0:	2104      	movs	r1, #4
 8001ec2:	20c8      	movs	r0, #200	; 0xc8
 8001ec4:	f7ff fd40 	bl	8001948 <ILI9341_DrawRectangle>
		  ILI9341_DrawRectangle(210, 4, 8, 20, GREENYELLOW);
 8001ec8:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8001ecc:	9300      	str	r3, [sp, #0]
 8001ece:	2314      	movs	r3, #20
 8001ed0:	2208      	movs	r2, #8
 8001ed2:	2104      	movs	r1, #4
 8001ed4:	20d2      	movs	r0, #210	; 0xd2
 8001ed6:	f7ff fd37 	bl	8001948 <ILI9341_DrawRectangle>
		  ILI9341_DrawRectangle(220, 4, 8, 20, GREENYELLOW);
 8001eda:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8001ede:	9300      	str	r3, [sp, #0]
 8001ee0:	2314      	movs	r3, #20
 8001ee2:	2208      	movs	r2, #8
 8001ee4:	2104      	movs	r1, #4
 8001ee6:	20dc      	movs	r0, #220	; 0xdc
 8001ee8:	f7ff fd2e 	bl	8001948 <ILI9341_DrawRectangle>
		  ILI9341_DrawRectangle(230, 4, 8, 20, GREENYELLOW);
 8001eec:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8001ef0:	9300      	str	r3, [sp, #0]
 8001ef2:	2314      	movs	r3, #20
 8001ef4:	2208      	movs	r2, #8
 8001ef6:	2104      	movs	r1, #4
 8001ef8:	20e6      	movs	r0, #230	; 0xe6
 8001efa:	f7ff fd25 	bl	8001948 <ILI9341_DrawRectangle>
 8001efe:	e052      	b.n	8001fa6 <getLCD+0x1d6>
	  }
	  else if(atoi(persen) >= 40 && atoi(persen) <= 59)
 8001f00:	69b8      	ldr	r0, [r7, #24]
 8001f02:	f006 fd39 	bl	8008978 <atoi>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b27      	cmp	r3, #39	; 0x27
 8001f0a:	dd21      	ble.n	8001f50 <getLCD+0x180>
 8001f0c:	69b8      	ldr	r0, [r7, #24]
 8001f0e:	f006 fd33 	bl	8008978 <atoi>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b3b      	cmp	r3, #59	; 0x3b
 8001f16:	dc1b      	bgt.n	8001f50 <getLCD+0x180>
	  {
		  ILI9341_DrawRectangle(210, 4, 8, 20, GREENYELLOW);
 8001f18:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8001f1c:	9300      	str	r3, [sp, #0]
 8001f1e:	2314      	movs	r3, #20
 8001f20:	2208      	movs	r2, #8
 8001f22:	2104      	movs	r1, #4
 8001f24:	20d2      	movs	r0, #210	; 0xd2
 8001f26:	f7ff fd0f 	bl	8001948 <ILI9341_DrawRectangle>
		  ILI9341_DrawRectangle(220, 4, 8, 20, GREENYELLOW);
 8001f2a:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8001f2e:	9300      	str	r3, [sp, #0]
 8001f30:	2314      	movs	r3, #20
 8001f32:	2208      	movs	r2, #8
 8001f34:	2104      	movs	r1, #4
 8001f36:	20dc      	movs	r0, #220	; 0xdc
 8001f38:	f7ff fd06 	bl	8001948 <ILI9341_DrawRectangle>
		  ILI9341_DrawRectangle(230, 4, 8, 20, GREENYELLOW);
 8001f3c:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8001f40:	9300      	str	r3, [sp, #0]
 8001f42:	2314      	movs	r3, #20
 8001f44:	2208      	movs	r2, #8
 8001f46:	2104      	movs	r1, #4
 8001f48:	20e6      	movs	r0, #230	; 0xe6
 8001f4a:	f7ff fcfd 	bl	8001948 <ILI9341_DrawRectangle>
 8001f4e:	e02a      	b.n	8001fa6 <getLCD+0x1d6>
	  }
	  else if(atoi(persen) >= 20 && atoi(persen) <= 39)
 8001f50:	69b8      	ldr	r0, [r7, #24]
 8001f52:	f006 fd11 	bl	8008978 <atoi>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b13      	cmp	r3, #19
 8001f5a:	dd1b      	ble.n	8001f94 <getLCD+0x1c4>
 8001f5c:	69b8      	ldr	r0, [r7, #24]
 8001f5e:	f006 fd0b 	bl	8008978 <atoi>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b27      	cmp	r3, #39	; 0x27
 8001f66:	dc15      	bgt.n	8001f94 <getLCD+0x1c4>
	  {
		  ILI9341_DrawRectangle(220, 4, 8, 20, GREENYELLOW);
 8001f68:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8001f6c:	9300      	str	r3, [sp, #0]
 8001f6e:	2314      	movs	r3, #20
 8001f70:	2208      	movs	r2, #8
 8001f72:	2104      	movs	r1, #4
 8001f74:	20dc      	movs	r0, #220	; 0xdc
 8001f76:	f7ff fce7 	bl	8001948 <ILI9341_DrawRectangle>
		  ILI9341_DrawRectangle(230, 4, 8, 20, GREENYELLOW);
 8001f7a:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8001f7e:	9300      	str	r3, [sp, #0]
 8001f80:	2314      	movs	r3, #20
 8001f82:	2208      	movs	r2, #8
 8001f84:	2104      	movs	r1, #4
 8001f86:	20e6      	movs	r0, #230	; 0xe6
 8001f88:	f7ff fcde 	bl	8001948 <ILI9341_DrawRectangle>
 8001f8c:	e00b      	b.n	8001fa6 <getLCD+0x1d6>
 8001f8e:	bf00      	nop
 8001f90:	0800df7c 	.word	0x0800df7c
	  }
	  else
	  {
		  ILI9341_DrawRectangle(230, 4, 8, 20, RED);
 8001f94:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001f98:	9300      	str	r3, [sp, #0]
 8001f9a:	2314      	movs	r3, #20
 8001f9c:	2208      	movs	r2, #8
 8001f9e:	2104      	movs	r1, #4
 8001fa0:	20e6      	movs	r0, #230	; 0xe6
 8001fa2:	f7ff fcd1 	bl	8001948 <ILI9341_DrawRectangle>
	  }
	  ILI9341_DrawVLine(237, 0, 320, DARKGREEN);
 8001fa6:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8001faa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001fae:	2100      	movs	r1, #0
 8001fb0:	20ed      	movs	r0, #237	; 0xed
 8001fb2:	f7ff fd69 	bl	8001a88 <ILI9341_DrawVLine>
	  ILI9341_DrawVLine(239, 0, 320, DARKGREEN);
 8001fb6:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8001fba:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001fbe:	2100      	movs	r1, #0
 8001fc0:	20ef      	movs	r0, #239	; 0xef
 8001fc2:	f7ff fd61 	bl	8001a88 <ILI9341_DrawVLine>
	  ILI9341_DrawHLine(0, 30, 240, DARKGREEN);
 8001fc6:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8001fca:	22f0      	movs	r2, #240	; 0xf0
 8001fcc:	211e      	movs	r1, #30
 8001fce:	2000      	movs	r0, #0
 8001fd0:	f7ff fd16 	bl	8001a00 <ILI9341_DrawHLine>
	  ILI9341_DrawHLine(0, 32, 240, DARKGREEN);
 8001fd4:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8001fd8:	22f0      	movs	r2, #240	; 0xf0
 8001fda:	2120      	movs	r1, #32
 8001fdc:	2000      	movs	r0, #0
 8001fde:	f7ff fd0f 	bl	8001a00 <ILI9341_DrawHLine>
	  ILI9341_DrawText("ID NODE : D", FONT3, 9, 40, WHITE, BLACK);
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	9301      	str	r3, [sp, #4]
 8001fe6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fea:	9300      	str	r3, [sp, #0]
 8001fec:	2328      	movs	r3, #40	; 0x28
 8001fee:	2209      	movs	r2, #9
 8001ff0:	4961      	ldr	r1, [pc, #388]	; (8002178 <getLCD+0x3a8>)
 8001ff2:	4862      	ldr	r0, [pc, #392]	; (800217c <getLCD+0x3ac>)
 8001ff4:	f7ff f8cd 	bl	8001192 <ILI9341_DrawText>
	  ILI9341_DrawText(volt, FONT3, 120, 40, WHITE, BLACK);
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	9301      	str	r3, [sp, #4]
 8001ffc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002000:	9300      	str	r3, [sp, #0]
 8002002:	2328      	movs	r3, #40	; 0x28
 8002004:	2278      	movs	r2, #120	; 0x78
 8002006:	495c      	ldr	r1, [pc, #368]	; (8002178 <getLCD+0x3a8>)
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f7ff f8c2 	bl	8001192 <ILI9341_DrawText>
	  ILI9341_DrawText(amper, FONT3, 180, 40, WHITE, BLACK);
 800200e:	2300      	movs	r3, #0
 8002010:	9301      	str	r3, [sp, #4]
 8002012:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002016:	9300      	str	r3, [sp, #0]
 8002018:	2328      	movs	r3, #40	; 0x28
 800201a:	22b4      	movs	r2, #180	; 0xb4
 800201c:	4956      	ldr	r1, [pc, #344]	; (8002178 <getLCD+0x3a8>)
 800201e:	6838      	ldr	r0, [r7, #0]
 8002020:	f7ff f8b7 	bl	8001192 <ILI9341_DrawText>
	  ILI9341_DrawHLine(0, 60, 240, DARKGREEN);
 8002024:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8002028:	22f0      	movs	r2, #240	; 0xf0
 800202a:	213c      	movs	r1, #60	; 0x3c
 800202c:	2000      	movs	r0, #0
 800202e:	f7ff fce7 	bl	8001a00 <ILI9341_DrawHLine>
	  ILI9341_DrawHLine(0, 62, 240, DARKGREEN);
 8002032:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8002036:	22f0      	movs	r2, #240	; 0xf0
 8002038:	213e      	movs	r1, #62	; 0x3e
 800203a:	2000      	movs	r0, #0
 800203c:	f7ff fce0 	bl	8001a00 <ILI9341_DrawHLine>
	  ILI9341_DrawText("Masukkan Pesan yang anda kirim : ", FONT2, 9, 70, WHITE, BLACK);
 8002040:	2300      	movs	r3, #0
 8002042:	9301      	str	r3, [sp, #4]
 8002044:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002048:	9300      	str	r3, [sp, #0]
 800204a:	2346      	movs	r3, #70	; 0x46
 800204c:	2209      	movs	r2, #9
 800204e:	494c      	ldr	r1, [pc, #304]	; (8002180 <getLCD+0x3b0>)
 8002050:	484c      	ldr	r0, [pc, #304]	; (8002184 <getLCD+0x3b4>)
 8002052:	f7ff f89e 	bl	8001192 <ILI9341_DrawText>
	  ILI9341_DrawHLine(0, 85, 240, DARKGREEN);
 8002056:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 800205a:	22f0      	movs	r2, #240	; 0xf0
 800205c:	2155      	movs	r1, #85	; 0x55
 800205e:	2000      	movs	r0, #0
 8002060:	f7ff fcce 	bl	8001a00 <ILI9341_DrawHLine>
	  ILI9341_DrawHLine(0, 87, 240, DARKGREEN);
 8002064:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8002068:	22f0      	movs	r2, #240	; 0xf0
 800206a:	2157      	movs	r1, #87	; 0x57
 800206c:	2000      	movs	r0, #0
 800206e:	f7ff fcc7 	bl	8001a00 <ILI9341_DrawHLine>
//	  ILI9341_DrawText("Ini Pesan Anda", FONT2, 9, 95, WHITE, BLACK);
	  ILI9341_DrawHLine(0, 150, 240, DARKGREEN);
 8002072:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8002076:	22f0      	movs	r2, #240	; 0xf0
 8002078:	2196      	movs	r1, #150	; 0x96
 800207a:	2000      	movs	r0, #0
 800207c:	f7ff fcc0 	bl	8001a00 <ILI9341_DrawHLine>
	  ILI9341_DrawHLine(0, 152, 240, DARKGREEN);
 8002080:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8002084:	22f0      	movs	r2, #240	; 0xf0
 8002086:	2198      	movs	r1, #152	; 0x98
 8002088:	2000      	movs	r0, #0
 800208a:	f7ff fcb9 	bl	8001a00 <ILI9341_DrawHLine>
	  ILI9341_DrawText("Anda Menerima Pesan : ", FONT2, 9, 160, WHITE, BLACK);
 800208e:	2300      	movs	r3, #0
 8002090:	9301      	str	r3, [sp, #4]
 8002092:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002096:	9300      	str	r3, [sp, #0]
 8002098:	23a0      	movs	r3, #160	; 0xa0
 800209a:	2209      	movs	r2, #9
 800209c:	4938      	ldr	r1, [pc, #224]	; (8002180 <getLCD+0x3b0>)
 800209e:	483a      	ldr	r0, [pc, #232]	; (8002188 <getLCD+0x3b8>)
 80020a0:	f7ff f877 	bl	8001192 <ILI9341_DrawText>
//	  ILI9341_DrawText("Ini Pesan dia", FONT2, 9, 175, WHITE, BLACK);
	  ILI9341_DrawHLine(0, 245, 240, DARKGREEN);
 80020a4:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 80020a8:	22f0      	movs	r2, #240	; 0xf0
 80020aa:	21f5      	movs	r1, #245	; 0xf5
 80020ac:	2000      	movs	r0, #0
 80020ae:	f7ff fca7 	bl	8001a00 <ILI9341_DrawHLine>
	  ILI9341_DrawHLine(0, 247, 240, DARKGREEN);
 80020b2:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 80020b6:	22f0      	movs	r2, #240	; 0xf0
 80020b8:	21f7      	movs	r1, #247	; 0xf7
 80020ba:	2000      	movs	r0, #0
 80020bc:	f7ff fca0 	bl	8001a00 <ILI9341_DrawHLine>
	  ILI9341_DrawText("Lokasi   : ", FONT2, 9, 255, WHITE, BLACK);
 80020c0:	2300      	movs	r3, #0
 80020c2:	9301      	str	r3, [sp, #4]
 80020c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020c8:	9300      	str	r3, [sp, #0]
 80020ca:	23ff      	movs	r3, #255	; 0xff
 80020cc:	2209      	movs	r2, #9
 80020ce:	492c      	ldr	r1, [pc, #176]	; (8002180 <getLCD+0x3b0>)
 80020d0:	482e      	ldr	r0, [pc, #184]	; (800218c <getLCD+0x3bc>)
 80020d2:	f7ff f85e 	bl	8001192 <ILI9341_DrawText>
	  ILI9341_DrawText("Latitude : ", FONT2, 9, 270, WHITE, BLACK);
 80020d6:	2300      	movs	r3, #0
 80020d8:	9301      	str	r3, [sp, #4]
 80020da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020de:	9300      	str	r3, [sp, #0]
 80020e0:	f44f 7387 	mov.w	r3, #270	; 0x10e
 80020e4:	2209      	movs	r2, #9
 80020e6:	4926      	ldr	r1, [pc, #152]	; (8002180 <getLCD+0x3b0>)
 80020e8:	4829      	ldr	r0, [pc, #164]	; (8002190 <getLCD+0x3c0>)
 80020ea:	f7ff f852 	bl	8001192 <ILI9341_DrawText>
	  ILI9341_DrawText(data_lat, FONT2, 75, 270, WHITE, BLACK);
 80020ee:	2300      	movs	r3, #0
 80020f0:	9301      	str	r3, [sp, #4]
 80020f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020f6:	9300      	str	r3, [sp, #0]
 80020f8:	f44f 7387 	mov.w	r3, #270	; 0x10e
 80020fc:	224b      	movs	r2, #75	; 0x4b
 80020fe:	4920      	ldr	r1, [pc, #128]	; (8002180 <getLCD+0x3b0>)
 8002100:	68f8      	ldr	r0, [r7, #12]
 8002102:	f7ff f846 	bl	8001192 <ILI9341_DrawText>
	  ILI9341_DrawText("Longitude : ", FONT2, 9, 285, WHITE, BLACK);
 8002106:	2300      	movs	r3, #0
 8002108:	9301      	str	r3, [sp, #4]
 800210a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800210e:	9300      	str	r3, [sp, #0]
 8002110:	f240 131d 	movw	r3, #285	; 0x11d
 8002114:	2209      	movs	r2, #9
 8002116:	491a      	ldr	r1, [pc, #104]	; (8002180 <getLCD+0x3b0>)
 8002118:	481e      	ldr	r0, [pc, #120]	; (8002194 <getLCD+0x3c4>)
 800211a:	f7ff f83a 	bl	8001192 <ILI9341_DrawText>
	  ILI9341_DrawText(data_lng, FONT2, 75, 285, WHITE, BLACK);
 800211e:	2300      	movs	r3, #0
 8002120:	9301      	str	r3, [sp, #4]
 8002122:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002126:	9300      	str	r3, [sp, #0]
 8002128:	f240 131d 	movw	r3, #285	; 0x11d
 800212c:	224b      	movs	r2, #75	; 0x4b
 800212e:	4914      	ldr	r1, [pc, #80]	; (8002180 <getLCD+0x3b0>)
 8002130:	68b8      	ldr	r0, [r7, #8]
 8002132:	f7ff f82e 	bl	8001192 <ILI9341_DrawText>
	  ILI9341_DrawHLine(0, 300, 240, DARKGREEN);
 8002136:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 800213a:	22f0      	movs	r2, #240	; 0xf0
 800213c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002140:	2000      	movs	r0, #0
 8002142:	f7ff fc5d 	bl	8001a00 <ILI9341_DrawHLine>
	  ILI9341_DrawHLine(0, 300, 240, DARKGREEN);
 8002146:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 800214a:	22f0      	movs	r2, #240	; 0xf0
 800214c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002150:	2000      	movs	r0, #0
 8002152:	f7ff fc55 	bl	8001a00 <ILI9341_DrawHLine>
	  ILI9341_DrawText("Copyright : www.pens.ac.id", FONT2, 30, 305, WHITE, BLACK);
 8002156:	2300      	movs	r3, #0
 8002158:	9301      	str	r3, [sp, #4]
 800215a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800215e:	9300      	str	r3, [sp, #0]
 8002160:	f240 1331 	movw	r3, #305	; 0x131
 8002164:	221e      	movs	r2, #30
 8002166:	4906      	ldr	r1, [pc, #24]	; (8002180 <getLCD+0x3b0>)
 8002168:	480b      	ldr	r0, [pc, #44]	; (8002198 <getLCD+0x3c8>)
 800216a:	f7ff f812 	bl	8001192 <ILI9341_DrawText>
}
 800216e:	bf00      	nop
 8002170:	3710      	adds	r7, #16
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	0800df7c 	.word	0x0800df7c
 800217c:	0800d5c0 	.word	0x0800d5c0
 8002180:	0800d798 	.word	0x0800d798
 8002184:	0800d5cc 	.word	0x0800d5cc
 8002188:	0800d5f0 	.word	0x0800d5f0
 800218c:	0800d608 	.word	0x0800d608
 8002190:	0800d614 	.word	0x0800d614
 8002194:	0800d620 	.word	0x0800d620
 8002198:	0800d630 	.word	0x0800d630

0800219c <get_time>:

/**Fungsi ini digunakan untuk membaca interanal RTC
  */
void get_time(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b086      	sub	sp, #24
 80021a0:	af00      	add	r7, sp, #0
	if (HAL_GetTick() - rtc_millis >= 500){
 80021a2:	f001 fe43 	bl	8003e2c <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	4b16      	ldr	r3, [pc, #88]	; (8002204 <get_time+0x68>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80021b2:	d323      	bcc.n	80021fc <get_time+0x60>
		rtc_millis = HAL_GetTick();
 80021b4:	f001 fe3a 	bl	8003e2c <HAL_GetTick>
 80021b8:	4603      	mov	r3, r0
 80021ba:	4a12      	ldr	r2, [pc, #72]	; (8002204 <get_time+0x68>)
 80021bc:	6013      	str	r3, [r2, #0]
		 RTC_DateTypeDef gDate;
		 RTC_TimeTypeDef gTime;
		 HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 80021be:	463b      	mov	r3, r7
 80021c0:	2200      	movs	r2, #0
 80021c2:	4619      	mov	r1, r3
 80021c4:	4810      	ldr	r0, [pc, #64]	; (8002208 <get_time+0x6c>)
 80021c6:	f004 fbbf 	bl	8006948 <HAL_RTC_GetTime>
		 HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 80021ca:	f107 0314 	add.w	r3, r7, #20
 80021ce:	2200      	movs	r2, #0
 80021d0:	4619      	mov	r1, r3
 80021d2:	480d      	ldr	r0, [pc, #52]	; (8002208 <get_time+0x6c>)
 80021d4:	f004 fcbd 	bl	8006b52 <HAL_RTC_GetDate>
		 jam = gTime.Hours; menit = gTime.Minutes; detik = gTime.Seconds;
 80021d8:	783a      	ldrb	r2, [r7, #0]
 80021da:	4b0c      	ldr	r3, [pc, #48]	; (800220c <get_time+0x70>)
 80021dc:	701a      	strb	r2, [r3, #0]
 80021de:	787a      	ldrb	r2, [r7, #1]
 80021e0:	4b0b      	ldr	r3, [pc, #44]	; (8002210 <get_time+0x74>)
 80021e2:	701a      	strb	r2, [r3, #0]
 80021e4:	78ba      	ldrb	r2, [r7, #2]
 80021e6:	4b0b      	ldr	r3, [pc, #44]	; (8002214 <get_time+0x78>)
 80021e8:	701a      	strb	r2, [r3, #0]
		 tanggal = gDate.Date; bulan = gDate.Month; tahun = gDate.Year;
 80021ea:	7dba      	ldrb	r2, [r7, #22]
 80021ec:	4b0a      	ldr	r3, [pc, #40]	; (8002218 <get_time+0x7c>)
 80021ee:	701a      	strb	r2, [r3, #0]
 80021f0:	7d7a      	ldrb	r2, [r7, #21]
 80021f2:	4b0a      	ldr	r3, [pc, #40]	; (800221c <get_time+0x80>)
 80021f4:	701a      	strb	r2, [r3, #0]
 80021f6:	7dfa      	ldrb	r2, [r7, #23]
 80021f8:	4b09      	ldr	r3, [pc, #36]	; (8002220 <get_time+0x84>)
 80021fa:	701a      	strb	r2, [r3, #0]
//		 printf("%02d:%02d:%02d || %02d-%02d-%2d\r\n",jam, menit, detik,tanggal, bulan, 2000 + tahun);
	}
}
 80021fc:	bf00      	nop
 80021fe:	3718      	adds	r7, #24
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	20000a18 	.word	0x20000a18
 8002208:	20002eb8 	.word	0x20002eb8
 800220c:	20002e94 	.word	0x20002e94
 8002210:	20002dd1 	.word	0x20002dd1
 8002214:	20002ef2 	.word	0x20002ef2
 8002218:	20002dd2 	.word	0x20002dd2
 800221c:	200037cc 	.word	0x200037cc
 8002220:	200037c4 	.word	0x200037c4

08002224 <get_ampere_volt>:
/**Fungsi ini digunakan untuk membaca baterai
  */
void get_ampere_volt(void){
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
	setCalibration_16V_400mA();
 800222a:	f7ff fcc1 	bl	8001bb0 <setCalibration_16V_400mA>
	tegangan = getBusVoltage_V();
 800222e:	f7ff fd27 	bl	8001c80 <getBusVoltage_V>
 8002232:	eef0 7a40 	vmov.f32	s15, s0
 8002236:	4b3d      	ldr	r3, [pc, #244]	; (800232c <get_ampere_volt+0x108>)
 8002238:	edc3 7a00 	vstr	s15, [r3]
	Vshunt = getPower_mW();
 800223c:	f7ff fd66 	bl	8001d0c <getPower_mW>
 8002240:	eef0 7a40 	vmov.f32	s15, s0
 8002244:	4b3a      	ldr	r3, [pc, #232]	; (8002330 <get_ampere_volt+0x10c>)
 8002246:	edc3 7a00 	vstr	s15, [r3]
	arus = getCurrent_mA() * (-1);
 800224a:	f7ff fd3d 	bl	8001cc8 <getCurrent_mA>
 800224e:	eef0 7a40 	vmov.f32	s15, s0
 8002252:	eef1 7a67 	vneg.f32	s15, s15
 8002256:	4b37      	ldr	r3, [pc, #220]	; (8002334 <get_ampere_volt+0x110>)
 8002258:	edc3 7a00 	vstr	s15, [r3]
	float maxVoltage = 12.4;
 800225c:	4b36      	ldr	r3, [pc, #216]	; (8002338 <get_ampere_volt+0x114>)
 800225e:	607b      	str	r3, [r7, #4]
	float minVoltage = 11.2;
 8002260:	4b36      	ldr	r3, [pc, #216]	; (800233c <get_ampere_volt+0x118>)
 8002262:	603b      	str	r3, [r7, #0]
	batteryPercentage = (tegangan - minVoltage) / (maxVoltage - minVoltage) * 100;
 8002264:	4b31      	ldr	r3, [pc, #196]	; (800232c <get_ampere_volt+0x108>)
 8002266:	ed93 7a00 	vldr	s14, [r3]
 800226a:	edd7 7a00 	vldr	s15, [r7]
 800226e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002272:	ed97 7a01 	vldr	s14, [r7, #4]
 8002276:	edd7 7a00 	vldr	s15, [r7]
 800227a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800227e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002282:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002340 <get_ampere_volt+0x11c>
 8002286:	ee67 7a87 	vmul.f32	s15, s15, s14
 800228a:	4b2e      	ldr	r3, [pc, #184]	; (8002344 <get_ampere_volt+0x120>)
 800228c:	edc3 7a00 	vstr	s15, [r3]
	if (batteryPercentage > 100) batteryPercentage = 100;
 8002290:	4b2c      	ldr	r3, [pc, #176]	; (8002344 <get_ampere_volt+0x120>)
 8002292:	edd3 7a00 	vldr	s15, [r3]
 8002296:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002340 <get_ampere_volt+0x11c>
 800229a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800229e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022a2:	dd03      	ble.n	80022ac <get_ampere_volt+0x88>
 80022a4:	4b27      	ldr	r3, [pc, #156]	; (8002344 <get_ampere_volt+0x120>)
 80022a6:	4a28      	ldr	r2, [pc, #160]	; (8002348 <get_ampere_volt+0x124>)
 80022a8:	601a      	str	r2, [r3, #0]
 80022aa:	e00b      	b.n	80022c4 <get_ampere_volt+0xa0>
	else if (batteryPercentage < 0) batteryPercentage = 0;
 80022ac:	4b25      	ldr	r3, [pc, #148]	; (8002344 <get_ampere_volt+0x120>)
 80022ae:	edd3 7a00 	vldr	s15, [r3]
 80022b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80022b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022ba:	d503      	bpl.n	80022c4 <get_ampere_volt+0xa0>
 80022bc:	4b21      	ldr	r3, [pc, #132]	; (8002344 <get_ampere_volt+0x120>)
 80022be:	f04f 0200 	mov.w	r2, #0
 80022c2:	601a      	str	r2, [r3, #0]
	if (HAL_GetTick() - ina219_millis >= 500){
 80022c4:	f001 fdb2 	bl	8003e2c <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	4b20      	ldr	r3, [pc, #128]	; (800234c <get_ampere_volt+0x128>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80022d4:	d325      	bcc.n	8002322 <get_ampere_volt+0xfe>
		ina219_millis = HAL_GetTick();
 80022d6:	f001 fda9 	bl	8003e2c <HAL_GetTick>
 80022da:	4603      	mov	r3, r0
 80022dc:	4a1b      	ldr	r2, [pc, #108]	; (800234c <get_ampere_volt+0x128>)
 80022de:	6013      	str	r3, [r2, #0]
//		printf("Vbus: %.1f V| persen: %.1f percent | Ampere: %.1f mA\r\n",tegangan, batteryPercentage, arus);
		sprintf(volt, "%.4g", tegangan);
 80022e0:	4b12      	ldr	r3, [pc, #72]	; (800232c <get_ampere_volt+0x108>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7fe f92f 	bl	8000548 <__aeabi_f2d>
 80022ea:	4602      	mov	r2, r0
 80022ec:	460b      	mov	r3, r1
 80022ee:	4918      	ldr	r1, [pc, #96]	; (8002350 <get_ampere_volt+0x12c>)
 80022f0:	4818      	ldr	r0, [pc, #96]	; (8002354 <get_ampere_volt+0x130>)
 80022f2:	f007 fc4f 	bl	8009b94 <siprintf>
		sprintf(amper, "%.5g", arus);
 80022f6:	4b0f      	ldr	r3, [pc, #60]	; (8002334 <get_ampere_volt+0x110>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7fe f924 	bl	8000548 <__aeabi_f2d>
 8002300:	4602      	mov	r2, r0
 8002302:	460b      	mov	r3, r1
 8002304:	4914      	ldr	r1, [pc, #80]	; (8002358 <get_ampere_volt+0x134>)
 8002306:	4815      	ldr	r0, [pc, #84]	; (800235c <get_ampere_volt+0x138>)
 8002308:	f007 fc44 	bl	8009b94 <siprintf>
		sprintf(persen, "%.2g", batteryPercentage);
 800230c:	4b0d      	ldr	r3, [pc, #52]	; (8002344 <get_ampere_volt+0x120>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4618      	mov	r0, r3
 8002312:	f7fe f919 	bl	8000548 <__aeabi_f2d>
 8002316:	4602      	mov	r2, r0
 8002318:	460b      	mov	r3, r1
 800231a:	4911      	ldr	r1, [pc, #68]	; (8002360 <get_ampere_volt+0x13c>)
 800231c:	4811      	ldr	r0, [pc, #68]	; (8002364 <get_ampere_volt+0x140>)
 800231e:	f007 fc39 	bl	8009b94 <siprintf>
//
	}
}
 8002322:	bf00      	nop
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	20000a2c 	.word	0x20000a2c
 8002330:	20000a30 	.word	0x20000a30
 8002334:	20000a34 	.word	0x20000a34
 8002338:	41466666 	.word	0x41466666
 800233c:	41333333 	.word	0x41333333
 8002340:	42c80000 	.word	0x42c80000
 8002344:	20000a38 	.word	0x20000a38
 8002348:	42c80000 	.word	0x42c80000
 800234c:	20000a1c 	.word	0x20000a1c
 8002350:	0800d64c 	.word	0x0800d64c
 8002354:	2000374c 	.word	0x2000374c
 8002358:	0800d654 	.word	0x0800d654
 800235c:	20002de8 	.word	0x20002de8
 8002360:	0800d65c 	.word	0x0800d65c
 8002364:	20002e1c 	.word	0x20002e1c

08002368 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002368:	b5b0      	push	{r4, r5, r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800236e:	f001 fcf7 	bl	8003d60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002372:	f000 f8df 	bl	8002534 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002376:	f000 fadf 	bl	8002938 <MX_GPIO_Init>
  MX_DMA_Init();
 800237a:	f000 fa9f 	bl	80028bc <MX_DMA_Init>
  MX_USART1_UART_Init();
 800237e:	f000 fa1f 	bl	80027c0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002382:	f000 fa47 	bl	8002814 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8002386:	f000 f985 	bl	8002694 <MX_RTC_Init>
  MX_I2C1_Init();
 800238a:	f000 f955 	bl	8002638 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 800238e:	f000 fa6b 	bl	8002868 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8002392:	f000 f9df 	bl	8002754 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart1);
 8002396:	484d      	ldr	r0, [pc, #308]	; (80024cc <main+0x164>)
 8002398:	f001 f904 	bl	80035a4 <RetargetInit>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, RxBuf, RxBuf_SIZE);
 800239c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023a0:	494b      	ldr	r1, [pc, #300]	; (80024d0 <main+0x168>)
 80023a2:	484c      	ldr	r0, [pc, #304]	; (80024d4 <main+0x16c>)
 80023a4:	f005 fa43 	bl	800782e <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 80023a8:	4b4b      	ldr	r3, [pc, #300]	; (80024d8 <main+0x170>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	4b4a      	ldr	r3, [pc, #296]	; (80024d8 <main+0x170>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f022 0208 	bic.w	r2, r2, #8
 80023b6:	601a      	str	r2, [r3, #0]
  HAL_UARTEx_ReceiveToIdle_DMA(&huart3, RxBuf_3, RxBuf_SIZE);
 80023b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023bc:	4947      	ldr	r1, [pc, #284]	; (80024dc <main+0x174>)
 80023be:	4848      	ldr	r0, [pc, #288]	; (80024e0 <main+0x178>)
 80023c0:	f005 fa35 	bl	800782e <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 80023c4:	4b47      	ldr	r3, [pc, #284]	; (80024e4 <main+0x17c>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	4b46      	ldr	r3, [pc, #280]	; (80024e4 <main+0x17c>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f022 0208 	bic.w	r2, r2, #8
 80023d2:	601a      	str	r2, [r3, #0]
  //set m0 m1
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);
 80023d4:	2200      	movs	r2, #0
 80023d6:	2104      	movs	r1, #4
 80023d8:	4843      	ldr	r0, [pc, #268]	; (80024e8 <main+0x180>)
 80023da:	f002 fc1f 	bl	8004c1c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, 0);
 80023de:	2200      	movs	r2, #0
 80023e0:	2108      	movs	r1, #8
 80023e2:	4841      	ldr	r0, [pc, #260]	; (80024e8 <main+0x180>)
 80023e4:	f002 fc1a 	bl	8004c1c <HAL_GPIO_WritePin>
  if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0x32F2){
 80023e8:	2101      	movs	r1, #1
 80023ea:	4840      	ldr	r0, [pc, #256]	; (80024ec <main+0x184>)
 80023ec:	f004 fcaa 	bl	8006d44 <HAL_RTCEx_BKUPRead>
 80023f0:	4603      	mov	r3, r0
 80023f2:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d001      	beq.n	80023fe <main+0x96>
	  set_time();
 80023fa:	f7ff fca9 	bl	8001d50 <set_time>
  }
  //begin LCD
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, 1);
 80023fe:	2201      	movs	r2, #1
 8002400:	2110      	movs	r1, #16
 8002402:	483b      	ldr	r0, [pc, #236]	; (80024f0 <main+0x188>)
 8002404:	f002 fc0a 	bl	8004c1c <HAL_GPIO_WritePin>
  ILI9341_Init();
 8002408:	f7ff f820 	bl	800144c <ILI9341_Init>
  ILI9341_FillScreen(BLACK);
 800240c:	2000      	movs	r0, #0
 800240e:	f7ff fa0f 	bl	8001830 <ILI9341_FillScreen>
  ILI9341_SetRotation(SCREEN_VERTICAL_2);
 8002412:	2002      	movs	r0, #2
 8002414:	f7ff f924 	bl	8001660 <ILI9341_SetRotation>
  //begin keypad
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, 1);
 8002418:	2201      	movs	r2, #1
 800241a:	2110      	movs	r1, #16
 800241c:	4832      	ldr	r0, [pc, #200]	; (80024e8 <main+0x180>)
 800241e:	f002 fbfd 	bl	8004c1c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, 1);
 8002422:	2201      	movs	r2, #1
 8002424:	2120      	movs	r1, #32
 8002426:	4830      	ldr	r0, [pc, #192]	; (80024e8 <main+0x180>)
 8002428:	f002 fbf8 	bl	8004c1c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, 1);
 800242c:	2201      	movs	r2, #1
 800242e:	2140      	movs	r1, #64	; 0x40
 8002430:	482d      	ldr	r0, [pc, #180]	; (80024e8 <main+0x180>)
 8002432:	f002 fbf3 	bl	8004c1c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, 1);
 8002436:	2201      	movs	r2, #1
 8002438:	2180      	movs	r1, #128	; 0x80
 800243a:	482b      	ldr	r0, [pc, #172]	; (80024e8 <main+0x180>)
 800243c:	f002 fbee 	bl	8004c1c <HAL_GPIO_WritePin>
  //Millis second set
  rtc_millis = HAL_GetTick();
 8002440:	f001 fcf4 	bl	8003e2c <HAL_GetTick>
 8002444:	4603      	mov	r3, r0
 8002446:	4a2b      	ldr	r2, [pc, #172]	; (80024f4 <main+0x18c>)
 8002448:	6013      	str	r3, [r2, #0]
  ina219_millis = HAL_GetTick();
 800244a:	f001 fcef 	bl	8003e2c <HAL_GetTick>
 800244e:	4603      	mov	r3, r0
 8002450:	4a29      	ldr	r2, [pc, #164]	; (80024f8 <main+0x190>)
 8002452:	6013      	str	r3, [r2, #0]
  //kirim data dummy  *node,lat,long,data,jam, menit, detik, tegangan
//  ukuranstring = sprintf((char*)buff_s, "*A,latitude,longitude,data,jam,menit,detik,baterai\r\n");
//  HAL_UART_Transmit(&huart2, buff_s, ukuranstring, 100);
//  printf("Test");
  led_reaction(100, 600);
 8002454:	f44f 7116 	mov.w	r1, #600	; 0x258
 8002458:	2064      	movs	r0, #100	; 0x64
 800245a:	f000 fe6f 	bl	800313c <led_reaction>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  get_time();
 800245e:	f7ff fe9d 	bl	800219c <get_time>
	  get_keypad(keyPressed);
 8002462:	4b26      	ldr	r3, [pc, #152]	; (80024fc <main+0x194>)
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	4618      	mov	r0, r3
 8002468:	f000 fdba 	bl	8002fe0 <get_keypad>
	  get_ampere_volt();
 800246c:	f7ff feda 	bl	8002224 <get_ampere_volt>
	  terimadata();
 8002470:	f001 f846 	bl	8003500 <terimadata>
	  snprintf( gabungtanggal, 50, "%02d:%02d:%02d %02d-%02d-%2d",jam, menit, detik,tanggal, bulan, 2000 + tahun );
 8002474:	4b22      	ldr	r3, [pc, #136]	; (8002500 <main+0x198>)
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	461d      	mov	r5, r3
 800247a:	4b22      	ldr	r3, [pc, #136]	; (8002504 <main+0x19c>)
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	461a      	mov	r2, r3
 8002480:	4b21      	ldr	r3, [pc, #132]	; (8002508 <main+0x1a0>)
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	4619      	mov	r1, r3
 8002486:	4b21      	ldr	r3, [pc, #132]	; (800250c <main+0x1a4>)
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	4618      	mov	r0, r3
 800248c:	4b20      	ldr	r3, [pc, #128]	; (8002510 <main+0x1a8>)
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	461c      	mov	r4, r3
 8002492:	4b20      	ldr	r3, [pc, #128]	; (8002514 <main+0x1ac>)
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800249a:	9304      	str	r3, [sp, #16]
 800249c:	9403      	str	r4, [sp, #12]
 800249e:	9002      	str	r0, [sp, #8]
 80024a0:	9101      	str	r1, [sp, #4]
 80024a2:	9200      	str	r2, [sp, #0]
 80024a4:	462b      	mov	r3, r5
 80024a6:	4a1c      	ldr	r2, [pc, #112]	; (8002518 <main+0x1b0>)
 80024a8:	2132      	movs	r1, #50	; 0x32
 80024aa:	481c      	ldr	r0, [pc, #112]	; (800251c <main+0x1b4>)
 80024ac:	f007 fb3e 	bl	8009b2c <sniprintf>
//	  printf("%s\n", gabungtanggal);
	  getLCD(lat, lon, volt, amper, persen,gabungtanggal);
 80024b0:	4b1a      	ldr	r3, [pc, #104]	; (800251c <main+0x1b4>)
 80024b2:	9301      	str	r3, [sp, #4]
 80024b4:	4b1a      	ldr	r3, [pc, #104]	; (8002520 <main+0x1b8>)
 80024b6:	9300      	str	r3, [sp, #0]
 80024b8:	4b1a      	ldr	r3, [pc, #104]	; (8002524 <main+0x1bc>)
 80024ba:	4a1b      	ldr	r2, [pc, #108]	; (8002528 <main+0x1c0>)
 80024bc:	491b      	ldr	r1, [pc, #108]	; (800252c <main+0x1c4>)
 80024be:	481c      	ldr	r0, [pc, #112]	; (8002530 <main+0x1c8>)
 80024c0:	f7ff fc86 	bl	8001dd0 <getLCD>
//	  printf("%02d:%02d:%02d || %02d-%02d-%2d\r\n",jam, menit, detik,tanggal, bulan, 2000 + tahun);
	  get_gps();
 80024c4:	f000 fea4 	bl	8003210 <get_gps>
	  get_time();
 80024c8:	e7c9      	b.n	800245e <main+0xf6>
 80024ca:	bf00      	nop
 80024cc:	20002e50 	.word	0x20002e50
 80024d0:	20002ef4 	.word	0x20002ef4
 80024d4:	20003780 	.word	0x20003780
 80024d8:	20002bac 	.word	0x20002bac
 80024dc:	2000060c 	.word	0x2000060c
 80024e0:	20002d38 	.word	0x20002d38
 80024e4:	20002cd8 	.word	0x20002cd8
 80024e8:	40020c00 	.word	0x40020c00
 80024ec:	20002eb8 	.word	0x20002eb8
 80024f0:	40020800 	.word	0x40020800
 80024f4:	20000a18 	.word	0x20000a18
 80024f8:	20000a1c 	.word	0x20000a1c
 80024fc:	20000a58 	.word	0x20000a58
 8002500:	20002e94 	.word	0x20002e94
 8002504:	20002dd1 	.word	0x20002dd1
 8002508:	20002ef2 	.word	0x20002ef2
 800250c:	20002dd2 	.word	0x20002dd2
 8002510:	200037cc 	.word	0x200037cc
 8002514:	200037c4 	.word	0x200037c4
 8002518:	0800d664 	.word	0x0800d664
 800251c:	200038ac 	.word	0x200038ac
 8002520:	20002e1c 	.word	0x20002e1c
 8002524:	20002de8 	.word	0x20002de8
 8002528:	2000374c 	.word	0x2000374c
 800252c:	20002edc 	.word	0x20002edc
 8002530:	20003830 	.word	0x20003830

08002534 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b098      	sub	sp, #96	; 0x60
 8002538:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800253a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800253e:	2230      	movs	r2, #48	; 0x30
 8002540:	2100      	movs	r1, #0
 8002542:	4618      	mov	r0, r3
 8002544:	f006 fa5c 	bl	8008a00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002548:	f107 031c 	add.w	r3, r7, #28
 800254c:	2200      	movs	r2, #0
 800254e:	601a      	str	r2, [r3, #0]
 8002550:	605a      	str	r2, [r3, #4]
 8002552:	609a      	str	r2, [r3, #8]
 8002554:	60da      	str	r2, [r3, #12]
 8002556:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002558:	f107 030c 	add.w	r3, r7, #12
 800255c:	2200      	movs	r2, #0
 800255e:	601a      	str	r2, [r3, #0]
 8002560:	605a      	str	r2, [r3, #4]
 8002562:	609a      	str	r2, [r3, #8]
 8002564:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002566:	2300      	movs	r3, #0
 8002568:	60bb      	str	r3, [r7, #8]
 800256a:	4b31      	ldr	r3, [pc, #196]	; (8002630 <SystemClock_Config+0xfc>)
 800256c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256e:	4a30      	ldr	r2, [pc, #192]	; (8002630 <SystemClock_Config+0xfc>)
 8002570:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002574:	6413      	str	r3, [r2, #64]	; 0x40
 8002576:	4b2e      	ldr	r3, [pc, #184]	; (8002630 <SystemClock_Config+0xfc>)
 8002578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800257e:	60bb      	str	r3, [r7, #8]
 8002580:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002582:	2300      	movs	r3, #0
 8002584:	607b      	str	r3, [r7, #4]
 8002586:	4b2b      	ldr	r3, [pc, #172]	; (8002634 <SystemClock_Config+0x100>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a2a      	ldr	r2, [pc, #168]	; (8002634 <SystemClock_Config+0x100>)
 800258c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002590:	6013      	str	r3, [r2, #0]
 8002592:	4b28      	ldr	r3, [pc, #160]	; (8002634 <SystemClock_Config+0x100>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800259a:	607b      	str	r3, [r7, #4]
 800259c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800259e:	2309      	movs	r3, #9
 80025a0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80025a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025a6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80025a8:	2301      	movs	r3, #1
 80025aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025ac:	2302      	movs	r3, #2
 80025ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80025b0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80025b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80025b6:	2304      	movs	r3, #4
 80025b8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 80025ba:	23a8      	movs	r3, #168	; 0xa8
 80025bc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80025be:	2302      	movs	r3, #2
 80025c0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80025c2:	2304      	movs	r3, #4
 80025c4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80025ca:	4618      	mov	r0, r3
 80025cc:	f003 fb18 	bl	8005c00 <HAL_RCC_OscConfig>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80025d6:	f000 ffdf 	bl	8003598 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025da:	230f      	movs	r3, #15
 80025dc:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025de:	2302      	movs	r3, #2
 80025e0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025e2:	2300      	movs	r3, #0
 80025e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80025e6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80025ea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80025ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025f0:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80025f2:	f107 031c 	add.w	r3, r7, #28
 80025f6:	2105      	movs	r1, #5
 80025f8:	4618      	mov	r0, r3
 80025fa:	f003 fd79 	bl	80060f0 <HAL_RCC_ClockConfig>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002604:	f000 ffc8 	bl	8003598 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002608:	2302      	movs	r3, #2
 800260a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800260c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002610:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002612:	f107 030c 	add.w	r3, r7, #12
 8002616:	4618      	mov	r0, r3
 8002618:	f003 ff66 	bl	80064e8 <HAL_RCCEx_PeriphCLKConfig>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8002622:	f000 ffb9 	bl	8003598 <Error_Handler>
  }
}
 8002626:	bf00      	nop
 8002628:	3760      	adds	r7, #96	; 0x60
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	40023800 	.word	0x40023800
 8002634:	40007000 	.word	0x40007000

08002638 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800263c:	4b12      	ldr	r3, [pc, #72]	; (8002688 <MX_I2C1_Init+0x50>)
 800263e:	4a13      	ldr	r2, [pc, #76]	; (800268c <MX_I2C1_Init+0x54>)
 8002640:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002642:	4b11      	ldr	r3, [pc, #68]	; (8002688 <MX_I2C1_Init+0x50>)
 8002644:	4a12      	ldr	r2, [pc, #72]	; (8002690 <MX_I2C1_Init+0x58>)
 8002646:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002648:	4b0f      	ldr	r3, [pc, #60]	; (8002688 <MX_I2C1_Init+0x50>)
 800264a:	2200      	movs	r2, #0
 800264c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800264e:	4b0e      	ldr	r3, [pc, #56]	; (8002688 <MX_I2C1_Init+0x50>)
 8002650:	2200      	movs	r2, #0
 8002652:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002654:	4b0c      	ldr	r3, [pc, #48]	; (8002688 <MX_I2C1_Init+0x50>)
 8002656:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800265a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800265c:	4b0a      	ldr	r3, [pc, #40]	; (8002688 <MX_I2C1_Init+0x50>)
 800265e:	2200      	movs	r2, #0
 8002660:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002662:	4b09      	ldr	r3, [pc, #36]	; (8002688 <MX_I2C1_Init+0x50>)
 8002664:	2200      	movs	r2, #0
 8002666:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002668:	4b07      	ldr	r3, [pc, #28]	; (8002688 <MX_I2C1_Init+0x50>)
 800266a:	2200      	movs	r2, #0
 800266c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800266e:	4b06      	ldr	r3, [pc, #24]	; (8002688 <MX_I2C1_Init+0x50>)
 8002670:	2200      	movs	r2, #0
 8002672:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002674:	4804      	ldr	r0, [pc, #16]	; (8002688 <MX_I2C1_Init+0x50>)
 8002676:	f002 fb03 	bl	8004c80 <HAL_I2C_Init>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002680:	f000 ff8a 	bl	8003598 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002684:	bf00      	nop
 8002686:	bd80      	pop	{r7, pc}
 8002688:	20002d7c 	.word	0x20002d7c
 800268c:	40005400 	.word	0x40005400
 8002690:	000186a0 	.word	0x000186a0

08002694 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b086      	sub	sp, #24
 8002698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */
	//JANGAN LUPA DIKOMEN YA
  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800269a:	1d3b      	adds	r3, r7, #4
 800269c:	2200      	movs	r2, #0
 800269e:	601a      	str	r2, [r3, #0]
 80026a0:	605a      	str	r2, [r3, #4]
 80026a2:	609a      	str	r2, [r3, #8]
 80026a4:	60da      	str	r2, [r3, #12]
 80026a6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80026a8:	2300      	movs	r3, #0
 80026aa:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80026ac:	4b27      	ldr	r3, [pc, #156]	; (800274c <MX_RTC_Init+0xb8>)
 80026ae:	4a28      	ldr	r2, [pc, #160]	; (8002750 <MX_RTC_Init+0xbc>)
 80026b0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80026b2:	4b26      	ldr	r3, [pc, #152]	; (800274c <MX_RTC_Init+0xb8>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80026b8:	4b24      	ldr	r3, [pc, #144]	; (800274c <MX_RTC_Init+0xb8>)
 80026ba:	227f      	movs	r2, #127	; 0x7f
 80026bc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80026be:	4b23      	ldr	r3, [pc, #140]	; (800274c <MX_RTC_Init+0xb8>)
 80026c0:	22ff      	movs	r2, #255	; 0xff
 80026c2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80026c4:	4b21      	ldr	r3, [pc, #132]	; (800274c <MX_RTC_Init+0xb8>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80026ca:	4b20      	ldr	r3, [pc, #128]	; (800274c <MX_RTC_Init+0xb8>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80026d0:	4b1e      	ldr	r3, [pc, #120]	; (800274c <MX_RTC_Init+0xb8>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80026d6:	481d      	ldr	r0, [pc, #116]	; (800274c <MX_RTC_Init+0xb8>)
 80026d8:	f003 ffe8 	bl	80066ac <HAL_RTC_Init>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80026e2:	f000 ff59 	bl	8003598 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x11;
 80026e6:	2311      	movs	r3, #17
 80026e8:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x35;
 80026ea:	2335      	movs	r3, #53	; 0x35
 80026ec:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x5;
 80026ee:	2305      	movs	r3, #5
 80026f0:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80026f2:	2300      	movs	r3, #0
 80026f4:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80026f6:	2300      	movs	r3, #0
 80026f8:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80026fa:	1d3b      	adds	r3, r7, #4
 80026fc:	2201      	movs	r2, #1
 80026fe:	4619      	mov	r1, r3
 8002700:	4812      	ldr	r0, [pc, #72]	; (800274c <MX_RTC_Init+0xb8>)
 8002702:	f004 f864 	bl	80067ce <HAL_RTC_SetTime>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 800270c:	f000 ff44 	bl	8003598 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002710:	2301      	movs	r3, #1
 8002712:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_OCTOBER;
 8002714:	2310      	movs	r3, #16
 8002716:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x18;
 8002718:	2318      	movs	r3, #24
 800271a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x21;
 800271c:	2321      	movs	r3, #33	; 0x21
 800271e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002720:	463b      	mov	r3, r7
 8002722:	2201      	movs	r2, #1
 8002724:	4619      	mov	r1, r3
 8002726:	4809      	ldr	r0, [pc, #36]	; (800274c <MX_RTC_Init+0xb8>)
 8002728:	f004 f96c 	bl	8006a04 <HAL_RTC_SetDate>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8002732:	f000 ff31 	bl	8003598 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
	  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);
 8002736:	f243 22f2 	movw	r2, #13042	; 0x32f2
 800273a:	2101      	movs	r1, #1
 800273c:	4803      	ldr	r0, [pc, #12]	; (800274c <MX_RTC_Init+0xb8>)
 800273e:	f004 fae7 	bl	8006d10 <HAL_RTCEx_BKUPWrite>
  /* USER CODE END RTC_Init 2 */

}
 8002742:	bf00      	nop
 8002744:	3718      	adds	r7, #24
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	20002eb8 	.word	0x20002eb8
 8002750:	40002800 	.word	0x40002800

08002754 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002758:	4b17      	ldr	r3, [pc, #92]	; (80027b8 <MX_SPI1_Init+0x64>)
 800275a:	4a18      	ldr	r2, [pc, #96]	; (80027bc <MX_SPI1_Init+0x68>)
 800275c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800275e:	4b16      	ldr	r3, [pc, #88]	; (80027b8 <MX_SPI1_Init+0x64>)
 8002760:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002764:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002766:	4b14      	ldr	r3, [pc, #80]	; (80027b8 <MX_SPI1_Init+0x64>)
 8002768:	2200      	movs	r2, #0
 800276a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800276c:	4b12      	ldr	r3, [pc, #72]	; (80027b8 <MX_SPI1_Init+0x64>)
 800276e:	2200      	movs	r2, #0
 8002770:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002772:	4b11      	ldr	r3, [pc, #68]	; (80027b8 <MX_SPI1_Init+0x64>)
 8002774:	2200      	movs	r2, #0
 8002776:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002778:	4b0f      	ldr	r3, [pc, #60]	; (80027b8 <MX_SPI1_Init+0x64>)
 800277a:	2200      	movs	r2, #0
 800277c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800277e:	4b0e      	ldr	r3, [pc, #56]	; (80027b8 <MX_SPI1_Init+0x64>)
 8002780:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002784:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002786:	4b0c      	ldr	r3, [pc, #48]	; (80027b8 <MX_SPI1_Init+0x64>)
 8002788:	2208      	movs	r2, #8
 800278a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800278c:	4b0a      	ldr	r3, [pc, #40]	; (80027b8 <MX_SPI1_Init+0x64>)
 800278e:	2200      	movs	r2, #0
 8002790:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002792:	4b09      	ldr	r3, [pc, #36]	; (80027b8 <MX_SPI1_Init+0x64>)
 8002794:	2200      	movs	r2, #0
 8002796:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002798:	4b07      	ldr	r3, [pc, #28]	; (80027b8 <MX_SPI1_Init+0x64>)
 800279a:	2200      	movs	r2, #0
 800279c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800279e:	4b06      	ldr	r3, [pc, #24]	; (80027b8 <MX_SPI1_Init+0x64>)
 80027a0:	220a      	movs	r2, #10
 80027a2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80027a4:	4804      	ldr	r0, [pc, #16]	; (80027b8 <MX_SPI1_Init+0x64>)
 80027a6:	f004 fae5 	bl	8006d74 <HAL_SPI_Init>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d001      	beq.n	80027b4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80027b0:	f000 fef2 	bl	8003598 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80027b4:	bf00      	nop
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	200036f4 	.word	0x200036f4
 80027bc:	40013000 	.word	0x40013000

080027c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80027c4:	4b11      	ldr	r3, [pc, #68]	; (800280c <MX_USART1_UART_Init+0x4c>)
 80027c6:	4a12      	ldr	r2, [pc, #72]	; (8002810 <MX_USART1_UART_Init+0x50>)
 80027c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80027ca:	4b10      	ldr	r3, [pc, #64]	; (800280c <MX_USART1_UART_Init+0x4c>)
 80027cc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80027d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80027d2:	4b0e      	ldr	r3, [pc, #56]	; (800280c <MX_USART1_UART_Init+0x4c>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80027d8:	4b0c      	ldr	r3, [pc, #48]	; (800280c <MX_USART1_UART_Init+0x4c>)
 80027da:	2200      	movs	r2, #0
 80027dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80027de:	4b0b      	ldr	r3, [pc, #44]	; (800280c <MX_USART1_UART_Init+0x4c>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80027e4:	4b09      	ldr	r3, [pc, #36]	; (800280c <MX_USART1_UART_Init+0x4c>)
 80027e6:	220c      	movs	r2, #12
 80027e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027ea:	4b08      	ldr	r3, [pc, #32]	; (800280c <MX_USART1_UART_Init+0x4c>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80027f0:	4b06      	ldr	r3, [pc, #24]	; (800280c <MX_USART1_UART_Init+0x4c>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80027f6:	4805      	ldr	r0, [pc, #20]	; (800280c <MX_USART1_UART_Init+0x4c>)
 80027f8:	f004 fe98 	bl	800752c <HAL_UART_Init>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d001      	beq.n	8002806 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002802:	f000 fec9 	bl	8003598 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002806:	bf00      	nop
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	20002e50 	.word	0x20002e50
 8002810:	40011000 	.word	0x40011000

08002814 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002818:	4b11      	ldr	r3, [pc, #68]	; (8002860 <MX_USART2_UART_Init+0x4c>)
 800281a:	4a12      	ldr	r2, [pc, #72]	; (8002864 <MX_USART2_UART_Init+0x50>)
 800281c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800281e:	4b10      	ldr	r3, [pc, #64]	; (8002860 <MX_USART2_UART_Init+0x4c>)
 8002820:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002824:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002826:	4b0e      	ldr	r3, [pc, #56]	; (8002860 <MX_USART2_UART_Init+0x4c>)
 8002828:	2200      	movs	r2, #0
 800282a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800282c:	4b0c      	ldr	r3, [pc, #48]	; (8002860 <MX_USART2_UART_Init+0x4c>)
 800282e:	2200      	movs	r2, #0
 8002830:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002832:	4b0b      	ldr	r3, [pc, #44]	; (8002860 <MX_USART2_UART_Init+0x4c>)
 8002834:	2200      	movs	r2, #0
 8002836:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002838:	4b09      	ldr	r3, [pc, #36]	; (8002860 <MX_USART2_UART_Init+0x4c>)
 800283a:	220c      	movs	r2, #12
 800283c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800283e:	4b08      	ldr	r3, [pc, #32]	; (8002860 <MX_USART2_UART_Init+0x4c>)
 8002840:	2200      	movs	r2, #0
 8002842:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002844:	4b06      	ldr	r3, [pc, #24]	; (8002860 <MX_USART2_UART_Init+0x4c>)
 8002846:	2200      	movs	r2, #0
 8002848:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800284a:	4805      	ldr	r0, [pc, #20]	; (8002860 <MX_USART2_UART_Init+0x4c>)
 800284c:	f004 fe6e 	bl	800752c <HAL_UART_Init>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002856:	f000 fe9f 	bl	8003598 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800285a:	bf00      	nop
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	20003780 	.word	0x20003780
 8002864:	40004400 	.word	0x40004400

08002868 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800286c:	4b11      	ldr	r3, [pc, #68]	; (80028b4 <MX_USART3_UART_Init+0x4c>)
 800286e:	4a12      	ldr	r2, [pc, #72]	; (80028b8 <MX_USART3_UART_Init+0x50>)
 8002870:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002872:	4b10      	ldr	r3, [pc, #64]	; (80028b4 <MX_USART3_UART_Init+0x4c>)
 8002874:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002878:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800287a:	4b0e      	ldr	r3, [pc, #56]	; (80028b4 <MX_USART3_UART_Init+0x4c>)
 800287c:	2200      	movs	r2, #0
 800287e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002880:	4b0c      	ldr	r3, [pc, #48]	; (80028b4 <MX_USART3_UART_Init+0x4c>)
 8002882:	2200      	movs	r2, #0
 8002884:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002886:	4b0b      	ldr	r3, [pc, #44]	; (80028b4 <MX_USART3_UART_Init+0x4c>)
 8002888:	2200      	movs	r2, #0
 800288a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800288c:	4b09      	ldr	r3, [pc, #36]	; (80028b4 <MX_USART3_UART_Init+0x4c>)
 800288e:	220c      	movs	r2, #12
 8002890:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002892:	4b08      	ldr	r3, [pc, #32]	; (80028b4 <MX_USART3_UART_Init+0x4c>)
 8002894:	2200      	movs	r2, #0
 8002896:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002898:	4b06      	ldr	r3, [pc, #24]	; (80028b4 <MX_USART3_UART_Init+0x4c>)
 800289a:	2200      	movs	r2, #0
 800289c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800289e:	4805      	ldr	r0, [pc, #20]	; (80028b4 <MX_USART3_UART_Init+0x4c>)
 80028a0:	f004 fe44 	bl	800752c <HAL_UART_Init>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80028aa:	f000 fe75 	bl	8003598 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80028ae:	bf00      	nop
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	20002d38 	.word	0x20002d38
 80028b8:	40004800 	.word	0x40004800

080028bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80028c2:	2300      	movs	r3, #0
 80028c4:	607b      	str	r3, [r7, #4]
 80028c6:	4b1b      	ldr	r3, [pc, #108]	; (8002934 <MX_DMA_Init+0x78>)
 80028c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ca:	4a1a      	ldr	r2, [pc, #104]	; (8002934 <MX_DMA_Init+0x78>)
 80028cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80028d0:	6313      	str	r3, [r2, #48]	; 0x30
 80028d2:	4b18      	ldr	r3, [pc, #96]	; (8002934 <MX_DMA_Init+0x78>)
 80028d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028da:	607b      	str	r3, [r7, #4]
 80028dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80028de:	2300      	movs	r3, #0
 80028e0:	603b      	str	r3, [r7, #0]
 80028e2:	4b14      	ldr	r3, [pc, #80]	; (8002934 <MX_DMA_Init+0x78>)
 80028e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e6:	4a13      	ldr	r2, [pc, #76]	; (8002934 <MX_DMA_Init+0x78>)
 80028e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80028ec:	6313      	str	r3, [r2, #48]	; 0x30
 80028ee:	4b11      	ldr	r3, [pc, #68]	; (8002934 <MX_DMA_Init+0x78>)
 80028f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028f6:	603b      	str	r3, [r7, #0]
 80028f8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80028fa:	2200      	movs	r2, #0
 80028fc:	2100      	movs	r1, #0
 80028fe:	200c      	movs	r0, #12
 8002900:	f001 fb9f 	bl	8004042 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002904:	200c      	movs	r0, #12
 8002906:	f001 fbb8 	bl	800407a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800290a:	2200      	movs	r2, #0
 800290c:	2100      	movs	r1, #0
 800290e:	2010      	movs	r0, #16
 8002910:	f001 fb97 	bl	8004042 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002914:	2010      	movs	r0, #16
 8002916:	f001 fbb0 	bl	800407a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800291a:	2200      	movs	r2, #0
 800291c:	2100      	movs	r1, #0
 800291e:	203b      	movs	r0, #59	; 0x3b
 8002920:	f001 fb8f 	bl	8004042 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002924:	203b      	movs	r0, #59	; 0x3b
 8002926:	f001 fba8 	bl	800407a <HAL_NVIC_EnableIRQ>

}
 800292a:	bf00      	nop
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	40023800 	.word	0x40023800

08002938 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b08c      	sub	sp, #48	; 0x30
 800293c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800293e:	f107 031c 	add.w	r3, r7, #28
 8002942:	2200      	movs	r2, #0
 8002944:	601a      	str	r2, [r3, #0]
 8002946:	605a      	str	r2, [r3, #4]
 8002948:	609a      	str	r2, [r3, #8]
 800294a:	60da      	str	r2, [r3, #12]
 800294c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800294e:	2300      	movs	r3, #0
 8002950:	61bb      	str	r3, [r7, #24]
 8002952:	4b5d      	ldr	r3, [pc, #372]	; (8002ac8 <MX_GPIO_Init+0x190>)
 8002954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002956:	4a5c      	ldr	r2, [pc, #368]	; (8002ac8 <MX_GPIO_Init+0x190>)
 8002958:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800295c:	6313      	str	r3, [r2, #48]	; 0x30
 800295e:	4b5a      	ldr	r3, [pc, #360]	; (8002ac8 <MX_GPIO_Init+0x190>)
 8002960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002966:	61bb      	str	r3, [r7, #24]
 8002968:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800296a:	2300      	movs	r3, #0
 800296c:	617b      	str	r3, [r7, #20]
 800296e:	4b56      	ldr	r3, [pc, #344]	; (8002ac8 <MX_GPIO_Init+0x190>)
 8002970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002972:	4a55      	ldr	r2, [pc, #340]	; (8002ac8 <MX_GPIO_Init+0x190>)
 8002974:	f043 0304 	orr.w	r3, r3, #4
 8002978:	6313      	str	r3, [r2, #48]	; 0x30
 800297a:	4b53      	ldr	r3, [pc, #332]	; (8002ac8 <MX_GPIO_Init+0x190>)
 800297c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297e:	f003 0304 	and.w	r3, r3, #4
 8002982:	617b      	str	r3, [r7, #20]
 8002984:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002986:	2300      	movs	r3, #0
 8002988:	613b      	str	r3, [r7, #16]
 800298a:	4b4f      	ldr	r3, [pc, #316]	; (8002ac8 <MX_GPIO_Init+0x190>)
 800298c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298e:	4a4e      	ldr	r2, [pc, #312]	; (8002ac8 <MX_GPIO_Init+0x190>)
 8002990:	f043 0301 	orr.w	r3, r3, #1
 8002994:	6313      	str	r3, [r2, #48]	; 0x30
 8002996:	4b4c      	ldr	r3, [pc, #304]	; (8002ac8 <MX_GPIO_Init+0x190>)
 8002998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	613b      	str	r3, [r7, #16]
 80029a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80029a2:	2300      	movs	r3, #0
 80029a4:	60fb      	str	r3, [r7, #12]
 80029a6:	4b48      	ldr	r3, [pc, #288]	; (8002ac8 <MX_GPIO_Init+0x190>)
 80029a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029aa:	4a47      	ldr	r2, [pc, #284]	; (8002ac8 <MX_GPIO_Init+0x190>)
 80029ac:	f043 0310 	orr.w	r3, r3, #16
 80029b0:	6313      	str	r3, [r2, #48]	; 0x30
 80029b2:	4b45      	ldr	r3, [pc, #276]	; (8002ac8 <MX_GPIO_Init+0x190>)
 80029b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b6:	f003 0310 	and.w	r3, r3, #16
 80029ba:	60fb      	str	r3, [r7, #12]
 80029bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029be:	2300      	movs	r3, #0
 80029c0:	60bb      	str	r3, [r7, #8]
 80029c2:	4b41      	ldr	r3, [pc, #260]	; (8002ac8 <MX_GPIO_Init+0x190>)
 80029c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c6:	4a40      	ldr	r2, [pc, #256]	; (8002ac8 <MX_GPIO_Init+0x190>)
 80029c8:	f043 0302 	orr.w	r3, r3, #2
 80029cc:	6313      	str	r3, [r2, #48]	; 0x30
 80029ce:	4b3e      	ldr	r3, [pc, #248]	; (8002ac8 <MX_GPIO_Init+0x190>)
 80029d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	60bb      	str	r3, [r7, #8]
 80029d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80029da:	2300      	movs	r3, #0
 80029dc:	607b      	str	r3, [r7, #4]
 80029de:	4b3a      	ldr	r3, [pc, #232]	; (8002ac8 <MX_GPIO_Init+0x190>)
 80029e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e2:	4a39      	ldr	r2, [pc, #228]	; (8002ac8 <MX_GPIO_Init+0x190>)
 80029e4:	f043 0308 	orr.w	r3, r3, #8
 80029e8:	6313      	str	r3, [r2, #48]	; 0x30
 80029ea:	4b37      	ldr	r3, [pc, #220]	; (8002ac8 <MX_GPIO_Init+0x190>)
 80029ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ee:	f003 0308 	and.w	r3, r3, #8
 80029f2:	607b      	str	r3, [r7, #4]
 80029f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_4, GPIO_PIN_RESET);
 80029f6:	2200      	movs	r2, #0
 80029f8:	2115      	movs	r1, #21
 80029fa:	4834      	ldr	r0, [pc, #208]	; (8002acc <MX_GPIO_Init+0x194>)
 80029fc:	f002 f90e 	bl	8004c1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8002a00:	2200      	movs	r2, #0
 8002a02:	2103      	movs	r1, #3
 8002a04:	4832      	ldr	r0, [pc, #200]	; (8002ad0 <MX_GPIO_Init+0x198>)
 8002a06:	f002 f909 	bl	8004c1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f44f 4156 	mov.w	r1, #54784	; 0xd600
 8002a10:	4830      	ldr	r0, [pc, #192]	; (8002ad4 <MX_GPIO_Init+0x19c>)
 8002a12:	f002 f903 	bl	8004c1c <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8002a16:	2200      	movs	r2, #0
 8002a18:	21f0      	movs	r1, #240	; 0xf0
 8002a1a:	482f      	ldr	r0, [pc, #188]	; (8002ad8 <MX_GPIO_Init+0x1a0>)
 8002a1c:	f002 f8fe 	bl	8004c1c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC2 PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_4;
 8002a20:	2315      	movs	r3, #21
 8002a22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a24:	2301      	movs	r3, #1
 8002a26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a30:	f107 031c 	add.w	r3, r7, #28
 8002a34:	4619      	mov	r1, r3
 8002a36:	4825      	ldr	r0, [pc, #148]	; (8002acc <MX_GPIO_Init+0x194>)
 8002a38:	f001 ff3c 	bl	80048b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a40:	2301      	movs	r3, #1
 8002a42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a44:	2300      	movs	r3, #0
 8002a46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a4c:	f107 031c 	add.w	r3, r7, #28
 8002a50:	4619      	mov	r1, r3
 8002a52:	481f      	ldr	r0, [pc, #124]	; (8002ad0 <MX_GPIO_Init+0x198>)
 8002a54:	f001 ff2e 	bl	80048b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE9 PE10 PE12 PE14
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14
 8002a58:	f44f 4356 	mov.w	r3, #54784	; 0xd600
 8002a5c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a62:	2300      	movs	r3, #0
 8002a64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a66:	2300      	movs	r3, #0
 8002a68:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a6a:	f107 031c 	add.w	r3, r7, #28
 8002a6e:	4619      	mov	r1, r3
 8002a70:	4818      	ldr	r0, [pc, #96]	; (8002ad4 <MX_GPIO_Init+0x19c>)
 8002a72:	f001 ff1f 	bl	80048b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002a76:	23f0      	movs	r3, #240	; 0xf0
 8002a78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a82:	2300      	movs	r3, #0
 8002a84:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a86:	f107 031c 	add.w	r3, r7, #28
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	4812      	ldr	r0, [pc, #72]	; (8002ad8 <MX_GPIO_Init+0x1a0>)
 8002a8e:	f001 ff11 	bl	80048b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
 8002a92:	f44f 734a 	mov.w	r3, #808	; 0x328
 8002a96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a98:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002a9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aa2:	f107 031c 	add.w	r3, r7, #28
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	480c      	ldr	r0, [pc, #48]	; (8002adc <MX_GPIO_Init+0x1a4>)
 8002aaa:	f001 ff03 	bl	80048b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002aae:	2200      	movs	r2, #0
 8002ab0:	2100      	movs	r1, #0
 8002ab2:	2017      	movs	r0, #23
 8002ab4:	f001 fac5 	bl	8004042 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002ab8:	2017      	movs	r0, #23
 8002aba:	f001 fade 	bl	800407a <HAL_NVIC_EnableIRQ>

}
 8002abe:	bf00      	nop
 8002ac0:	3730      	adds	r7, #48	; 0x30
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	40023800 	.word	0x40023800
 8002acc:	40020800 	.word	0x40020800
 8002ad0:	40020000 	.word	0x40020000
 8002ad4:	40021000 	.word	0x40021000
 8002ad8:	40020c00 	.word	0x40020c00
 8002adc:	40020400 	.word	0x40020400

08002ae0 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
/**Fungsi ini digunakan untuk interrupt LoRa E32 jika ada data masuk
  */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	460b      	mov	r3, r1
 8002aea:	807b      	strh	r3, [r7, #2]
	//variable parse
	//uint8_t prev_Data;
	if (huart->Instance == USART2)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a58      	ldr	r2, [pc, #352]	; (8002c54 <HAL_UARTEx_RxEventCallback+0x174>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d154      	bne.n	8002ba0 <HAL_UARTEx_RxEventCallback+0xc0>
	{
		oldPos = newPos;  // Update the last position before copying new data
 8002af6:	4b58      	ldr	r3, [pc, #352]	; (8002c58 <HAL_UARTEx_RxEventCallback+0x178>)
 8002af8:	881a      	ldrh	r2, [r3, #0]
 8002afa:	4b58      	ldr	r3, [pc, #352]	; (8002c5c <HAL_UARTEx_RxEventCallback+0x17c>)
 8002afc:	801a      	strh	r2, [r3, #0]

		/* If the data in large and it is about to exceed the buffer size, we have to route it to the start of the buffer
		 * This is to maintain the circular buffer
		 * The old data in the main buffer will be overlapped
		 */
		if (oldPos+Size > MainBuf_SIZE)  // If the current position + new data size is greater than the main buffer
 8002afe:	4b57      	ldr	r3, [pc, #348]	; (8002c5c <HAL_UARTEx_RxEventCallback+0x17c>)
 8002b00:	881b      	ldrh	r3, [r3, #0]
 8002b02:	461a      	mov	r2, r3
 8002b04:	887b      	ldrh	r3, [r7, #2]
 8002b06:	4413      	add	r3, r2
 8002b08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b0c:	dd22      	ble.n	8002b54 <HAL_UARTEx_RxEventCallback+0x74>
		{
			uint16_t datatocopy = MainBuf_SIZE-oldPos;  // find out how much space is left in the main buffer
 8002b0e:	4b53      	ldr	r3, [pc, #332]	; (8002c5c <HAL_UARTEx_RxEventCallback+0x17c>)
 8002b10:	881b      	ldrh	r3, [r3, #0]
 8002b12:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8002b16:	81bb      	strh	r3, [r7, #12]
			memcpy ((uint8_t *)MainBuf+oldPos, RxBuf, datatocopy);  // copy data in that remaining space
 8002b18:	4b50      	ldr	r3, [pc, #320]	; (8002c5c <HAL_UARTEx_RxEventCallback+0x17c>)
 8002b1a:	881b      	ldrh	r3, [r3, #0]
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	4b50      	ldr	r3, [pc, #320]	; (8002c60 <HAL_UARTEx_RxEventCallback+0x180>)
 8002b20:	4413      	add	r3, r2
 8002b22:	89ba      	ldrh	r2, [r7, #12]
 8002b24:	494f      	ldr	r1, [pc, #316]	; (8002c64 <HAL_UARTEx_RxEventCallback+0x184>)
 8002b26:	4618      	mov	r0, r3
 8002b28:	f005 ff5c 	bl	80089e4 <memcpy>

			oldPos = 0;  // point to the start of the buffer
 8002b2c:	4b4b      	ldr	r3, [pc, #300]	; (8002c5c <HAL_UARTEx_RxEventCallback+0x17c>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)MainBuf, (uint8_t *)RxBuf+datatocopy, (Size-datatocopy));  // copy the remaining data
 8002b32:	89bb      	ldrh	r3, [r7, #12]
 8002b34:	4a4b      	ldr	r2, [pc, #300]	; (8002c64 <HAL_UARTEx_RxEventCallback+0x184>)
 8002b36:	1899      	adds	r1, r3, r2
 8002b38:	887a      	ldrh	r2, [r7, #2]
 8002b3a:	89bb      	ldrh	r3, [r7, #12]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	461a      	mov	r2, r3
 8002b40:	4847      	ldr	r0, [pc, #284]	; (8002c60 <HAL_UARTEx_RxEventCallback+0x180>)
 8002b42:	f005 ff4f 	bl	80089e4 <memcpy>
			newPos = (Size-datatocopy);  // update the position
 8002b46:	887a      	ldrh	r2, [r7, #2]
 8002b48:	89bb      	ldrh	r3, [r7, #12]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	b29a      	uxth	r2, r3
 8002b4e:	4b42      	ldr	r3, [pc, #264]	; (8002c58 <HAL_UARTEx_RxEventCallback+0x178>)
 8002b50:	801a      	strh	r2, [r3, #0]
 8002b52:	e010      	b.n	8002b76 <HAL_UARTEx_RxEventCallback+0x96>
		/* if the current position + new data size is less than the main buffer
		 * we will simply copy the data into the buffer and update the position
		 */
		else
		{
			memcpy ((uint8_t *)MainBuf+newPos, RxBuf, Size);
 8002b54:	4b40      	ldr	r3, [pc, #256]	; (8002c58 <HAL_UARTEx_RxEventCallback+0x178>)
 8002b56:	881b      	ldrh	r3, [r3, #0]
 8002b58:	461a      	mov	r2, r3
 8002b5a:	4b41      	ldr	r3, [pc, #260]	; (8002c60 <HAL_UARTEx_RxEventCallback+0x180>)
 8002b5c:	4413      	add	r3, r2
 8002b5e:	887a      	ldrh	r2, [r7, #2]
 8002b60:	4940      	ldr	r1, [pc, #256]	; (8002c64 <HAL_UARTEx_RxEventCallback+0x184>)
 8002b62:	4618      	mov	r0, r3
 8002b64:	f005 ff3e 	bl	80089e4 <memcpy>
			newPos = Size+oldPos;
 8002b68:	4b3c      	ldr	r3, [pc, #240]	; (8002c5c <HAL_UARTEx_RxEventCallback+0x17c>)
 8002b6a:	881a      	ldrh	r2, [r3, #0]
 8002b6c:	887b      	ldrh	r3, [r7, #2]
 8002b6e:	4413      	add	r3, r2
 8002b70:	b29a      	uxth	r2, r3
 8002b72:	4b39      	ldr	r3, [pc, #228]	; (8002c58 <HAL_UARTEx_RxEventCallback+0x178>)
 8002b74:	801a      	strh	r2, [r3, #0]
		}
		/* start the DMA again */
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *) RxBuf, RxBuf_SIZE);
 8002b76:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b7a:	493a      	ldr	r1, [pc, #232]	; (8002c64 <HAL_UARTEx_RxEventCallback+0x184>)
 8002b7c:	483a      	ldr	r0, [pc, #232]	; (8002c68 <HAL_UARTEx_RxEventCallback+0x188>)
 8002b7e:	f004 fe56 	bl	800782e <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8002b82:	4b3a      	ldr	r3, [pc, #232]	; (8002c6c <HAL_UARTEx_RxEventCallback+0x18c>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	4b38      	ldr	r3, [pc, #224]	; (8002c6c <HAL_UARTEx_RxEventCallback+0x18c>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f022 0208 	bic.w	r2, r2, #8
 8002b90:	601a      	str	r2, [r3, #0]
//		printf("%s", RxBuf);
//		HAL_UART_Transmit(&huart2, MainBuf, Size, 100);
		ukuran_data = Size;
 8002b92:	4a37      	ldr	r2, [pc, #220]	; (8002c70 <HAL_UARTEx_RxEventCallback+0x190>)
 8002b94:	887b      	ldrh	r3, [r7, #2]
 8002b96:	8013      	strh	r3, [r2, #0]
		usart_2_state = true;
 8002b98:	4b36      	ldr	r3, [pc, #216]	; (8002c74 <HAL_UARTEx_RxEventCallback+0x194>)
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	701a      	strb	r2, [r3, #0]
		HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t *) RxBuf_3, RxBuf_SIZE);
		__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
//		printf("%s", MainBuf_3); //gpsdata
		usart_3_state = true;
	}
}
 8002b9e:	e055      	b.n	8002c4c <HAL_UARTEx_RxEventCallback+0x16c>
	}else if(huart->Instance == USART3){
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a34      	ldr	r2, [pc, #208]	; (8002c78 <HAL_UARTEx_RxEventCallback+0x198>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d150      	bne.n	8002c4c <HAL_UARTEx_RxEventCallback+0x16c>
		oldPos_3 = newPos_3;
 8002baa:	4b34      	ldr	r3, [pc, #208]	; (8002c7c <HAL_UARTEx_RxEventCallback+0x19c>)
 8002bac:	881a      	ldrh	r2, [r3, #0]
 8002bae:	4b34      	ldr	r3, [pc, #208]	; (8002c80 <HAL_UARTEx_RxEventCallback+0x1a0>)
 8002bb0:	801a      	strh	r2, [r3, #0]
		if (oldPos_3+Size > MainBuf_SIZE)  // If the current position + new data size is greater than the main buffer
 8002bb2:	4b33      	ldr	r3, [pc, #204]	; (8002c80 <HAL_UARTEx_RxEventCallback+0x1a0>)
 8002bb4:	881b      	ldrh	r3, [r3, #0]
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	887b      	ldrh	r3, [r7, #2]
 8002bba:	4413      	add	r3, r2
 8002bbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bc0:	dd22      	ble.n	8002c08 <HAL_UARTEx_RxEventCallback+0x128>
			uint16_t datatocopy_3 = MainBuf_SIZE-oldPos_3;  // find out how much space is left in the main buffer
 8002bc2:	4b2f      	ldr	r3, [pc, #188]	; (8002c80 <HAL_UARTEx_RxEventCallback+0x1a0>)
 8002bc4:	881b      	ldrh	r3, [r3, #0]
 8002bc6:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8002bca:	81fb      	strh	r3, [r7, #14]
			memcpy ((uint8_t *)MainBuf_3+oldPos_3, RxBuf_3, datatocopy_3);  // copy data in that remaining space
 8002bcc:	4b2c      	ldr	r3, [pc, #176]	; (8002c80 <HAL_UARTEx_RxEventCallback+0x1a0>)
 8002bce:	881b      	ldrh	r3, [r3, #0]
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	4b2c      	ldr	r3, [pc, #176]	; (8002c84 <HAL_UARTEx_RxEventCallback+0x1a4>)
 8002bd4:	4413      	add	r3, r2
 8002bd6:	89fa      	ldrh	r2, [r7, #14]
 8002bd8:	492b      	ldr	r1, [pc, #172]	; (8002c88 <HAL_UARTEx_RxEventCallback+0x1a8>)
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f005 ff02 	bl	80089e4 <memcpy>
			oldPos_3 = 0;  // point to the start of the buffer
 8002be0:	4b27      	ldr	r3, [pc, #156]	; (8002c80 <HAL_UARTEx_RxEventCallback+0x1a0>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)MainBuf_3, (uint8_t *)RxBuf_3+datatocopy_3, (Size-datatocopy_3));  // copy the remaining data
 8002be6:	89fb      	ldrh	r3, [r7, #14]
 8002be8:	4a27      	ldr	r2, [pc, #156]	; (8002c88 <HAL_UARTEx_RxEventCallback+0x1a8>)
 8002bea:	1899      	adds	r1, r3, r2
 8002bec:	887a      	ldrh	r2, [r7, #2]
 8002bee:	89fb      	ldrh	r3, [r7, #14]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	4823      	ldr	r0, [pc, #140]	; (8002c84 <HAL_UARTEx_RxEventCallback+0x1a4>)
 8002bf6:	f005 fef5 	bl	80089e4 <memcpy>
			newPos_3 = (Size-datatocopy_3);
 8002bfa:	887a      	ldrh	r2, [r7, #2]
 8002bfc:	89fb      	ldrh	r3, [r7, #14]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	b29a      	uxth	r2, r3
 8002c02:	4b1e      	ldr	r3, [pc, #120]	; (8002c7c <HAL_UARTEx_RxEventCallback+0x19c>)
 8002c04:	801a      	strh	r2, [r3, #0]
 8002c06:	e010      	b.n	8002c2a <HAL_UARTEx_RxEventCallback+0x14a>
			memcpy ((uint8_t *)MainBuf+newPos_3, RxBuf_3, Size);
 8002c08:	4b1c      	ldr	r3, [pc, #112]	; (8002c7c <HAL_UARTEx_RxEventCallback+0x19c>)
 8002c0a:	881b      	ldrh	r3, [r3, #0]
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	4b14      	ldr	r3, [pc, #80]	; (8002c60 <HAL_UARTEx_RxEventCallback+0x180>)
 8002c10:	4413      	add	r3, r2
 8002c12:	887a      	ldrh	r2, [r7, #2]
 8002c14:	491c      	ldr	r1, [pc, #112]	; (8002c88 <HAL_UARTEx_RxEventCallback+0x1a8>)
 8002c16:	4618      	mov	r0, r3
 8002c18:	f005 fee4 	bl	80089e4 <memcpy>
			newPos_3 = Size+oldPos_3;
 8002c1c:	4b18      	ldr	r3, [pc, #96]	; (8002c80 <HAL_UARTEx_RxEventCallback+0x1a0>)
 8002c1e:	881a      	ldrh	r2, [r3, #0]
 8002c20:	887b      	ldrh	r3, [r7, #2]
 8002c22:	4413      	add	r3, r2
 8002c24:	b29a      	uxth	r2, r3
 8002c26:	4b15      	ldr	r3, [pc, #84]	; (8002c7c <HAL_UARTEx_RxEventCallback+0x19c>)
 8002c28:	801a      	strh	r2, [r3, #0]
		HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t *) RxBuf_3, RxBuf_SIZE);
 8002c2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c2e:	4916      	ldr	r1, [pc, #88]	; (8002c88 <HAL_UARTEx_RxEventCallback+0x1a8>)
 8002c30:	4816      	ldr	r0, [pc, #88]	; (8002c8c <HAL_UARTEx_RxEventCallback+0x1ac>)
 8002c32:	f004 fdfc 	bl	800782e <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8002c36:	4b16      	ldr	r3, [pc, #88]	; (8002c90 <HAL_UARTEx_RxEventCallback+0x1b0>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	4b14      	ldr	r3, [pc, #80]	; (8002c90 <HAL_UARTEx_RxEventCallback+0x1b0>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f022 0208 	bic.w	r2, r2, #8
 8002c44:	601a      	str	r2, [r3, #0]
		usart_3_state = true;
 8002c46:	4b13      	ldr	r3, [pc, #76]	; (8002c94 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8002c48:	2201      	movs	r2, #1
 8002c4a:	701a      	strb	r2, [r3, #0]
}
 8002c4c:	bf00      	nop
 8002c4e:	3710      	adds	r7, #16
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	40004400 	.word	0x40004400
 8002c58:	20000a10 	.word	0x20000a10
 8002c5c:	20000a0e 	.word	0x20000a0e
 8002c60:	200032f4 	.word	0x200032f4
 8002c64:	20002ef4 	.word	0x20002ef4
 8002c68:	20003780 	.word	0x20003780
 8002c6c:	20002bac 	.word	0x20002bac
 8002c70:	20002c0c 	.word	0x20002c0c
 8002c74:	20000208 	.word	0x20000208
 8002c78:	40004800 	.word	0x40004800
 8002c7c:	20000a14 	.word	0x20000a14
 8002c80:	20000a12 	.word	0x20000a12
 8002c84:	2000020c 	.word	0x2000020c
 8002c88:	2000060c 	.word	0x2000060c
 8002c8c:	20002d38 	.word	0x20002d38
 8002c90:	20002cd8 	.word	0x20002cd8
 8002c94:	20000a0c 	.word	0x20000a0c

08002c98 <HAL_GPIO_EXTI_Callback>:
/**Fungsi ini digunakan untuk keypad untuk mengirim pesan dan juga di intrupsi jika ada data masuk dari keypad
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	80fb      	strh	r3, [r7, #6]
  currentMillis = HAL_GetTick();
 8002ca2:	f001 f8c3 	bl	8003e2c <HAL_GetTick>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	4aa3      	ldr	r2, [pc, #652]	; (8002f38 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8002caa:	6013      	str	r3, [r2, #0]
  if (currentMillis - previousMillis > 10) {
 8002cac:	4ba2      	ldr	r3, [pc, #648]	; (8002f38 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	4ba2      	ldr	r3, [pc, #648]	; (8002f3c <HAL_GPIO_EXTI_Callback+0x2a4>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b0a      	cmp	r3, #10
 8002cb8:	f240 817f 	bls.w	8002fba <HAL_GPIO_EXTI_Callback+0x322>
    /*Configure GPIO pins : PB3 PB5 PB8 PB9 to GPIO_INPUT*/
    GPIO_InitStructPrivate.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
 8002cbc:	4ba0      	ldr	r3, [pc, #640]	; (8002f40 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8002cbe:	f44f 724a 	mov.w	r2, #808	; 0x328
 8002cc2:	601a      	str	r2, [r3, #0]
    GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 8002cc4:	4b9e      	ldr	r3, [pc, #632]	; (8002f40 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	605a      	str	r2, [r3, #4]
    GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8002cca:	4b9d      	ldr	r3, [pc, #628]	; (8002f40 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	609a      	str	r2, [r3, #8]
    GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8002cd0:	4b9b      	ldr	r3, [pc, #620]	; (8002f40 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructPrivate);
 8002cd6:	499a      	ldr	r1, [pc, #616]	; (8002f40 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8002cd8:	489a      	ldr	r0, [pc, #616]	; (8002f44 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8002cda:	f001 fdeb 	bl	80048b4 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, 1);
 8002cde:	2201      	movs	r2, #1
 8002ce0:	2110      	movs	r1, #16
 8002ce2:	4899      	ldr	r0, [pc, #612]	; (8002f48 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8002ce4:	f001 ff9a 	bl	8004c1c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, 0);
 8002ce8:	2200      	movs	r2, #0
 8002cea:	2120      	movs	r1, #32
 8002cec:	4896      	ldr	r0, [pc, #600]	; (8002f48 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8002cee:	f001 ff95 	bl	8004c1c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, 0);
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	2140      	movs	r1, #64	; 0x40
 8002cf6:	4894      	ldr	r0, [pc, #592]	; (8002f48 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8002cf8:	f001 ff90 	bl	8004c1c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, 0);
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	2180      	movs	r1, #128	; 0x80
 8002d00:	4891      	ldr	r0, [pc, #580]	; (8002f48 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8002d02:	f001 ff8b 	bl	8004c1c <HAL_GPIO_WritePin>
    if(GPIO_Pin == GPIO_PIN_3 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3))
 8002d06:	88fb      	ldrh	r3, [r7, #6]
 8002d08:	2b08      	cmp	r3, #8
 8002d0a:	d10a      	bne.n	8002d22 <HAL_GPIO_EXTI_Callback+0x8a>
 8002d0c:	2108      	movs	r1, #8
 8002d0e:	488d      	ldr	r0, [pc, #564]	; (8002f44 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8002d10:	f001 ff6c 	bl	8004bec <HAL_GPIO_ReadPin>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d003      	beq.n	8002d22 <HAL_GPIO_EXTI_Callback+0x8a>
    {
      keyPressed = 14; //ASCII value of D
 8002d1a:	4b8c      	ldr	r3, [pc, #560]	; (8002f4c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8002d1c:	220e      	movs	r2, #14
 8002d1e:	701a      	strb	r2, [r3, #0]
 8002d20:	e02c      	b.n	8002d7c <HAL_GPIO_EXTI_Callback+0xe4>
    }
    else if(GPIO_Pin == GPIO_PIN_5 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5))
 8002d22:	88fb      	ldrh	r3, [r7, #6]
 8002d24:	2b20      	cmp	r3, #32
 8002d26:	d10a      	bne.n	8002d3e <HAL_GPIO_EXTI_Callback+0xa6>
 8002d28:	2120      	movs	r1, #32
 8002d2a:	4886      	ldr	r0, [pc, #536]	; (8002f44 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8002d2c:	f001 ff5e 	bl	8004bec <HAL_GPIO_ReadPin>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d003      	beq.n	8002d3e <HAL_GPIO_EXTI_Callback+0xa6>
    {
      keyPressed = 13; //ASCII value of C
 8002d36:	4b85      	ldr	r3, [pc, #532]	; (8002f4c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8002d38:	220d      	movs	r2, #13
 8002d3a:	701a      	strb	r2, [r3, #0]
 8002d3c:	e01e      	b.n	8002d7c <HAL_GPIO_EXTI_Callback+0xe4>
    }
    else if(GPIO_Pin == GPIO_PIN_8 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))
 8002d3e:	88fb      	ldrh	r3, [r7, #6]
 8002d40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d44:	d10b      	bne.n	8002d5e <HAL_GPIO_EXTI_Callback+0xc6>
 8002d46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d4a:	487e      	ldr	r0, [pc, #504]	; (8002f44 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8002d4c:	f001 ff4e 	bl	8004bec <HAL_GPIO_ReadPin>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d003      	beq.n	8002d5e <HAL_GPIO_EXTI_Callback+0xc6>
    {
      keyPressed = 12; //ASCII value of B
 8002d56:	4b7d      	ldr	r3, [pc, #500]	; (8002f4c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8002d58:	220c      	movs	r2, #12
 8002d5a:	701a      	strb	r2, [r3, #0]
 8002d5c:	e00e      	b.n	8002d7c <HAL_GPIO_EXTI_Callback+0xe4>
    }
    else if(GPIO_Pin == GPIO_PIN_9 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9))
 8002d5e:	88fb      	ldrh	r3, [r7, #6]
 8002d60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d64:	d10a      	bne.n	8002d7c <HAL_GPIO_EXTI_Callback+0xe4>
 8002d66:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d6a:	4876      	ldr	r0, [pc, #472]	; (8002f44 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8002d6c:	f001 ff3e 	bl	8004bec <HAL_GPIO_ReadPin>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d002      	beq.n	8002d7c <HAL_GPIO_EXTI_Callback+0xe4>
    {
      keyPressed = 11; //ASCII value of A
 8002d76:	4b75      	ldr	r3, [pc, #468]	; (8002f4c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8002d78:	220b      	movs	r2, #11
 8002d7a:	701a      	strb	r2, [r3, #0]
    }

    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, 0);
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	2110      	movs	r1, #16
 8002d80:	4871      	ldr	r0, [pc, #452]	; (8002f48 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8002d82:	f001 ff4b 	bl	8004c1c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, 1);
 8002d86:	2201      	movs	r2, #1
 8002d88:	2120      	movs	r1, #32
 8002d8a:	486f      	ldr	r0, [pc, #444]	; (8002f48 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8002d8c:	f001 ff46 	bl	8004c1c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, 0);
 8002d90:	2200      	movs	r2, #0
 8002d92:	2140      	movs	r1, #64	; 0x40
 8002d94:	486c      	ldr	r0, [pc, #432]	; (8002f48 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8002d96:	f001 ff41 	bl	8004c1c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, 0);
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	2180      	movs	r1, #128	; 0x80
 8002d9e:	486a      	ldr	r0, [pc, #424]	; (8002f48 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8002da0:	f001 ff3c 	bl	8004c1c <HAL_GPIO_WritePin>

    if(GPIO_Pin == GPIO_PIN_3 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3))
 8002da4:	88fb      	ldrh	r3, [r7, #6]
 8002da6:	2b08      	cmp	r3, #8
 8002da8:	d10a      	bne.n	8002dc0 <HAL_GPIO_EXTI_Callback+0x128>
 8002daa:	2108      	movs	r1, #8
 8002dac:	4865      	ldr	r0, [pc, #404]	; (8002f44 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8002dae:	f001 ff1d 	bl	8004bec <HAL_GPIO_ReadPin>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d003      	beq.n	8002dc0 <HAL_GPIO_EXTI_Callback+0x128>
    {
      keyPressed = 15; //ASCII value of #
 8002db8:	4b64      	ldr	r3, [pc, #400]	; (8002f4c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8002dba:	220f      	movs	r2, #15
 8002dbc:	701a      	strb	r2, [r3, #0]
 8002dbe:	e02c      	b.n	8002e1a <HAL_GPIO_EXTI_Callback+0x182>
    }
    else if(GPIO_Pin == GPIO_PIN_5 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5))
 8002dc0:	88fb      	ldrh	r3, [r7, #6]
 8002dc2:	2b20      	cmp	r3, #32
 8002dc4:	d10a      	bne.n	8002ddc <HAL_GPIO_EXTI_Callback+0x144>
 8002dc6:	2120      	movs	r1, #32
 8002dc8:	485e      	ldr	r0, [pc, #376]	; (8002f44 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8002dca:	f001 ff0f 	bl	8004bec <HAL_GPIO_ReadPin>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d003      	beq.n	8002ddc <HAL_GPIO_EXTI_Callback+0x144>
    {
      keyPressed = 9; //ASCII value of 9
 8002dd4:	4b5d      	ldr	r3, [pc, #372]	; (8002f4c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8002dd6:	2209      	movs	r2, #9
 8002dd8:	701a      	strb	r2, [r3, #0]
 8002dda:	e01e      	b.n	8002e1a <HAL_GPIO_EXTI_Callback+0x182>
    }
    else if(GPIO_Pin == GPIO_PIN_8 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))
 8002ddc:	88fb      	ldrh	r3, [r7, #6]
 8002dde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002de2:	d10b      	bne.n	8002dfc <HAL_GPIO_EXTI_Callback+0x164>
 8002de4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002de8:	4856      	ldr	r0, [pc, #344]	; (8002f44 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8002dea:	f001 feff 	bl	8004bec <HAL_GPIO_ReadPin>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d003      	beq.n	8002dfc <HAL_GPIO_EXTI_Callback+0x164>
    {
      keyPressed = 6; //ASCII value of 6
 8002df4:	4b55      	ldr	r3, [pc, #340]	; (8002f4c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8002df6:	2206      	movs	r2, #6
 8002df8:	701a      	strb	r2, [r3, #0]
 8002dfa:	e00e      	b.n	8002e1a <HAL_GPIO_EXTI_Callback+0x182>
    }
    else if(GPIO_Pin == GPIO_PIN_9 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9))
 8002dfc:	88fb      	ldrh	r3, [r7, #6]
 8002dfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e02:	d10a      	bne.n	8002e1a <HAL_GPIO_EXTI_Callback+0x182>
 8002e04:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e08:	484e      	ldr	r0, [pc, #312]	; (8002f44 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8002e0a:	f001 feef 	bl	8004bec <HAL_GPIO_ReadPin>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d002      	beq.n	8002e1a <HAL_GPIO_EXTI_Callback+0x182>
    {
      keyPressed = 3; //ASCII value of 3
 8002e14:	4b4d      	ldr	r3, [pc, #308]	; (8002f4c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8002e16:	2203      	movs	r2, #3
 8002e18:	701a      	strb	r2, [r3, #0]
    }

    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, 0);
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	2110      	movs	r1, #16
 8002e1e:	484a      	ldr	r0, [pc, #296]	; (8002f48 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8002e20:	f001 fefc 	bl	8004c1c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, 0);
 8002e24:	2200      	movs	r2, #0
 8002e26:	2120      	movs	r1, #32
 8002e28:	4847      	ldr	r0, [pc, #284]	; (8002f48 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8002e2a:	f001 fef7 	bl	8004c1c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, 1);
 8002e2e:	2201      	movs	r2, #1
 8002e30:	2140      	movs	r1, #64	; 0x40
 8002e32:	4845      	ldr	r0, [pc, #276]	; (8002f48 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8002e34:	f001 fef2 	bl	8004c1c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, 0);
 8002e38:	2200      	movs	r2, #0
 8002e3a:	2180      	movs	r1, #128	; 0x80
 8002e3c:	4842      	ldr	r0, [pc, #264]	; (8002f48 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8002e3e:	f001 feed 	bl	8004c1c <HAL_GPIO_WritePin>
    if(GPIO_Pin == GPIO_PIN_3 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3))
 8002e42:	88fb      	ldrh	r3, [r7, #6]
 8002e44:	2b08      	cmp	r3, #8
 8002e46:	d10a      	bne.n	8002e5e <HAL_GPIO_EXTI_Callback+0x1c6>
 8002e48:	2108      	movs	r1, #8
 8002e4a:	483e      	ldr	r0, [pc, #248]	; (8002f44 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8002e4c:	f001 fece 	bl	8004bec <HAL_GPIO_ReadPin>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d003      	beq.n	8002e5e <HAL_GPIO_EXTI_Callback+0x1c6>
    {
      keyPressed = 16; //ASCII value of 0
 8002e56:	4b3d      	ldr	r3, [pc, #244]	; (8002f4c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8002e58:	2210      	movs	r2, #16
 8002e5a:	701a      	strb	r2, [r3, #0]
 8002e5c:	e02c      	b.n	8002eb8 <HAL_GPIO_EXTI_Callback+0x220>
    }
    else if(GPIO_Pin == GPIO_PIN_5 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5))
 8002e5e:	88fb      	ldrh	r3, [r7, #6]
 8002e60:	2b20      	cmp	r3, #32
 8002e62:	d10a      	bne.n	8002e7a <HAL_GPIO_EXTI_Callback+0x1e2>
 8002e64:	2120      	movs	r1, #32
 8002e66:	4837      	ldr	r0, [pc, #220]	; (8002f44 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8002e68:	f001 fec0 	bl	8004bec <HAL_GPIO_ReadPin>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d003      	beq.n	8002e7a <HAL_GPIO_EXTI_Callback+0x1e2>
    {
      keyPressed = 8; //ASCII value of 8
 8002e72:	4b36      	ldr	r3, [pc, #216]	; (8002f4c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8002e74:	2208      	movs	r2, #8
 8002e76:	701a      	strb	r2, [r3, #0]
 8002e78:	e01e      	b.n	8002eb8 <HAL_GPIO_EXTI_Callback+0x220>
    }
    else if(GPIO_Pin == GPIO_PIN_8 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))
 8002e7a:	88fb      	ldrh	r3, [r7, #6]
 8002e7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e80:	d10b      	bne.n	8002e9a <HAL_GPIO_EXTI_Callback+0x202>
 8002e82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e86:	482f      	ldr	r0, [pc, #188]	; (8002f44 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8002e88:	f001 feb0 	bl	8004bec <HAL_GPIO_ReadPin>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d003      	beq.n	8002e9a <HAL_GPIO_EXTI_Callback+0x202>
    {
      keyPressed = 5; //ASCII value of 5
 8002e92:	4b2e      	ldr	r3, [pc, #184]	; (8002f4c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8002e94:	2205      	movs	r2, #5
 8002e96:	701a      	strb	r2, [r3, #0]
 8002e98:	e00e      	b.n	8002eb8 <HAL_GPIO_EXTI_Callback+0x220>
    }
    else if(GPIO_Pin == GPIO_PIN_9 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9))
 8002e9a:	88fb      	ldrh	r3, [r7, #6]
 8002e9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ea0:	d10a      	bne.n	8002eb8 <HAL_GPIO_EXTI_Callback+0x220>
 8002ea2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ea6:	4827      	ldr	r0, [pc, #156]	; (8002f44 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8002ea8:	f001 fea0 	bl	8004bec <HAL_GPIO_ReadPin>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d002      	beq.n	8002eb8 <HAL_GPIO_EXTI_Callback+0x220>
    {
      keyPressed = 2; //ASCII value of 2
 8002eb2:	4b26      	ldr	r3, [pc, #152]	; (8002f4c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8002eb4:	2202      	movs	r2, #2
 8002eb6:	701a      	strb	r2, [r3, #0]
    }

    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, 0);
 8002eb8:	2200      	movs	r2, #0
 8002eba:	2110      	movs	r1, #16
 8002ebc:	4822      	ldr	r0, [pc, #136]	; (8002f48 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8002ebe:	f001 fead 	bl	8004c1c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, 0);
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	2120      	movs	r1, #32
 8002ec6:	4820      	ldr	r0, [pc, #128]	; (8002f48 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8002ec8:	f001 fea8 	bl	8004c1c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, 0);
 8002ecc:	2200      	movs	r2, #0
 8002ece:	2140      	movs	r1, #64	; 0x40
 8002ed0:	481d      	ldr	r0, [pc, #116]	; (8002f48 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8002ed2:	f001 fea3 	bl	8004c1c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, 1);
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	2180      	movs	r1, #128	; 0x80
 8002eda:	481b      	ldr	r0, [pc, #108]	; (8002f48 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8002edc:	f001 fe9e 	bl	8004c1c <HAL_GPIO_WritePin>
    if(GPIO_Pin == GPIO_PIN_3 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3))
 8002ee0:	88fb      	ldrh	r3, [r7, #6]
 8002ee2:	2b08      	cmp	r3, #8
 8002ee4:	d10a      	bne.n	8002efc <HAL_GPIO_EXTI_Callback+0x264>
 8002ee6:	2108      	movs	r1, #8
 8002ee8:	4816      	ldr	r0, [pc, #88]	; (8002f44 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8002eea:	f001 fe7f 	bl	8004bec <HAL_GPIO_ReadPin>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d003      	beq.n	8002efc <HAL_GPIO_EXTI_Callback+0x264>
    {
      keyPressed = 17; //ASCII value of *
 8002ef4:	4b15      	ldr	r3, [pc, #84]	; (8002f4c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8002ef6:	2211      	movs	r2, #17
 8002ef8:	701a      	strb	r2, [r3, #0]
 8002efa:	e038      	b.n	8002f6e <HAL_GPIO_EXTI_Callback+0x2d6>
    }
    else if(GPIO_Pin == GPIO_PIN_5 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5))
 8002efc:	88fb      	ldrh	r3, [r7, #6]
 8002efe:	2b20      	cmp	r3, #32
 8002f00:	d10a      	bne.n	8002f18 <HAL_GPIO_EXTI_Callback+0x280>
 8002f02:	2120      	movs	r1, #32
 8002f04:	480f      	ldr	r0, [pc, #60]	; (8002f44 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8002f06:	f001 fe71 	bl	8004bec <HAL_GPIO_ReadPin>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d003      	beq.n	8002f18 <HAL_GPIO_EXTI_Callback+0x280>
    {
      keyPressed = 7; //ASCII value of 7
 8002f10:	4b0e      	ldr	r3, [pc, #56]	; (8002f4c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8002f12:	2207      	movs	r2, #7
 8002f14:	701a      	strb	r2, [r3, #0]
 8002f16:	e02a      	b.n	8002f6e <HAL_GPIO_EXTI_Callback+0x2d6>
    }
    else if(GPIO_Pin == GPIO_PIN_8 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))
 8002f18:	88fb      	ldrh	r3, [r7, #6]
 8002f1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f1e:	d117      	bne.n	8002f50 <HAL_GPIO_EXTI_Callback+0x2b8>
 8002f20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f24:	4807      	ldr	r0, [pc, #28]	; (8002f44 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8002f26:	f001 fe61 	bl	8004bec <HAL_GPIO_ReadPin>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d00f      	beq.n	8002f50 <HAL_GPIO_EXTI_Callback+0x2b8>
    {
      keyPressed = 4; //ASCII value of 4
 8002f30:	4b06      	ldr	r3, [pc, #24]	; (8002f4c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8002f32:	2204      	movs	r2, #4
 8002f34:	701a      	strb	r2, [r3, #0]
 8002f36:	e01a      	b.n	8002f6e <HAL_GPIO_EXTI_Callback+0x2d6>
 8002f38:	20000a54 	.word	0x20000a54
 8002f3c:	20000a50 	.word	0x20000a50
 8002f40:	20000a3c 	.word	0x20000a3c
 8002f44:	40020400 	.word	0x40020400
 8002f48:	40020c00 	.word	0x40020c00
 8002f4c:	20000a58 	.word	0x20000a58
    }
    else if(GPIO_Pin == GPIO_PIN_9 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9))
 8002f50:	88fb      	ldrh	r3, [r7, #6]
 8002f52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f56:	d10a      	bne.n	8002f6e <HAL_GPIO_EXTI_Callback+0x2d6>
 8002f58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f5c:	4819      	ldr	r0, [pc, #100]	; (8002fc4 <HAL_GPIO_EXTI_Callback+0x32c>)
 8002f5e:	f001 fe45 	bl	8004bec <HAL_GPIO_ReadPin>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d002      	beq.n	8002f6e <HAL_GPIO_EXTI_Callback+0x2d6>
    {
      keyPressed = 1; //ASCII value of 1
 8002f68:	4b17      	ldr	r3, [pc, #92]	; (8002fc8 <HAL_GPIO_EXTI_Callback+0x330>)
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	701a      	strb	r2, [r3, #0]
    }
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, 1);
 8002f6e:	2201      	movs	r2, #1
 8002f70:	2110      	movs	r1, #16
 8002f72:	4816      	ldr	r0, [pc, #88]	; (8002fcc <HAL_GPIO_EXTI_Callback+0x334>)
 8002f74:	f001 fe52 	bl	8004c1c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, 1);
 8002f78:	2201      	movs	r2, #1
 8002f7a:	2120      	movs	r1, #32
 8002f7c:	4813      	ldr	r0, [pc, #76]	; (8002fcc <HAL_GPIO_EXTI_Callback+0x334>)
 8002f7e:	f001 fe4d 	bl	8004c1c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, 1);
 8002f82:	2201      	movs	r2, #1
 8002f84:	2140      	movs	r1, #64	; 0x40
 8002f86:	4811      	ldr	r0, [pc, #68]	; (8002fcc <HAL_GPIO_EXTI_Callback+0x334>)
 8002f88:	f001 fe48 	bl	8004c1c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, 1);
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	2180      	movs	r1, #128	; 0x80
 8002f90:	480e      	ldr	r0, [pc, #56]	; (8002fcc <HAL_GPIO_EXTI_Callback+0x334>)
 8002f92:	f001 fe43 	bl	8004c1c <HAL_GPIO_WritePin>
    /*Configure GPIO pins : PB6 PB7 PB8 PB9 back to EXTI*/
    GPIO_InitStructPrivate.Mode = GPIO_MODE_IT_RISING;
 8002f96:	4b0e      	ldr	r3, [pc, #56]	; (8002fd0 <HAL_GPIO_EXTI_Callback+0x338>)
 8002f98:	f44f 1288 	mov.w	r2, #1114112	; 0x110000
 8002f9c:	605a      	str	r2, [r3, #4]
    GPIO_InitStructPrivate.Pull = GPIO_PULLDOWN;
 8002f9e:	4b0c      	ldr	r3, [pc, #48]	; (8002fd0 <HAL_GPIO_EXTI_Callback+0x338>)
 8002fa0:	2202      	movs	r2, #2
 8002fa2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructPrivate);
 8002fa4:	490a      	ldr	r1, [pc, #40]	; (8002fd0 <HAL_GPIO_EXTI_Callback+0x338>)
 8002fa6:	4807      	ldr	r0, [pc, #28]	; (8002fc4 <HAL_GPIO_EXTI_Callback+0x32c>)
 8002fa8:	f001 fc84 	bl	80048b4 <HAL_GPIO_Init>
    //printf("nilai key pad %d\r\n", keyPressed);
    previousMillis = currentMillis;
 8002fac:	4b09      	ldr	r3, [pc, #36]	; (8002fd4 <HAL_GPIO_EXTI_Callback+0x33c>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a09      	ldr	r2, [pc, #36]	; (8002fd8 <HAL_GPIO_EXTI_Callback+0x340>)
 8002fb2:	6013      	str	r3, [r2, #0]
    key_kondisi = true;
 8002fb4:	4b09      	ldr	r3, [pc, #36]	; (8002fdc <HAL_GPIO_EXTI_Callback+0x344>)
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	701a      	strb	r2, [r3, #0]
  }
}
 8002fba:	bf00      	nop
 8002fbc:	3708      	adds	r7, #8
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	40020400 	.word	0x40020400
 8002fc8:	20000a58 	.word	0x20000a58
 8002fcc:	40020c00 	.word	0x40020c00
 8002fd0:	20000a3c 	.word	0x20000a3c
 8002fd4:	20000a54 	.word	0x20000a54
 8002fd8:	20000a50 	.word	0x20000a50
 8002fdc:	20000a5c 	.word	0x20000a5c

08002fe0 <get_keypad>:
/**Fungsi ini digunakan untuk mendapatkan karakter dari nilai keypad yangdigunakan
  */
void get_keypad(uint8_t keypadin){
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b086      	sub	sp, #24
 8002fe4:	af02      	add	r7, sp, #8
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	71fb      	strb	r3, [r7, #7]
	uint16_t pesan;
	pesan = "Test";
 8002fea:	4b43      	ldr	r3, [pc, #268]	; (80030f8 <get_keypad+0x118>)
 8002fec:	81fb      	strh	r3, [r7, #14]
	char sementara;
	int hitung;
	if(key_kondisi == true){
 8002fee:	4b43      	ldr	r3, [pc, #268]	; (80030fc <get_keypad+0x11c>)
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d07c      	beq.n	80030f0 <get_keypad+0x110>
		if(keypadin != keyPressed_prev)
 8002ff6:	4b42      	ldr	r3, [pc, #264]	; (8003100 <get_keypad+0x120>)
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	79fa      	ldrb	r2, [r7, #7]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d002      	beq.n	8003006 <get_keypad+0x26>
		{
			sementara = keypad;
 8003000:	4b40      	ldr	r3, [pc, #256]	; (8003104 <get_keypad+0x124>)
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	737b      	strb	r3, [r7, #13]
		}
		if(counter >= 5 ){
 8003006:	4b40      	ldr	r3, [pc, #256]	; (8003108 <get_keypad+0x128>)
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	2b04      	cmp	r3, #4
 800300c:	d902      	bls.n	8003014 <get_keypad+0x34>
	  	  counter = 0;
 800300e:	4b3e      	ldr	r3, [pc, #248]	; (8003108 <get_keypad+0x128>)
 8003010:	2200      	movs	r2, #0
 8003012:	701a      	strb	r2, [r3, #0]
	    }
		if(HAL_GetTick() - keypad_reset >= 500)
 8003014:	f000 ff0a 	bl	8003e2c <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	4b3c      	ldr	r3, [pc, #240]	; (800310c <get_keypad+0x12c>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003024:	d305      	bcc.n	8003032 <get_keypad+0x52>
		{
			counter = 0;
 8003026:	4b38      	ldr	r3, [pc, #224]	; (8003108 <get_keypad+0x128>)
 8003028:	2200      	movs	r2, #0
 800302a:	701a      	strb	r2, [r3, #0]
			sementara = keypad;
 800302c:	4b35      	ldr	r3, [pc, #212]	; (8003104 <get_keypad+0x124>)
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	737b      	strb	r3, [r7, #13]
		}
		//printf("%d", keypadin);
		if(keypadin == 1){
 8003032:	79fb      	ldrb	r3, [r7, #7]
 8003034:	2b01      	cmp	r3, #1
 8003036:	d113      	bne.n	8003060 <get_keypad+0x80>
//			counter ++;
//			strcpy((uint8_t*)key, " 1abc");
//		     keypad = key[counter];
//			ILI9341_FillScreen(BLACK);
			ukuranstring = sprintf((char*)buff_s, "Hasil Tangkapan Nelayan 1kg\r\n");
 8003038:	4935      	ldr	r1, [pc, #212]	; (8003110 <get_keypad+0x130>)
 800303a:	4836      	ldr	r0, [pc, #216]	; (8003114 <get_keypad+0x134>)
 800303c:	f006 fdaa 	bl	8009b94 <siprintf>
 8003040:	4603      	mov	r3, r0
 8003042:	b29a      	uxth	r2, r3
 8003044:	4b34      	ldr	r3, [pc, #208]	; (8003118 <get_keypad+0x138>)
 8003046:	801a      	strh	r2, [r3, #0]
			ILI9341_DrawText("Hasil Tangkapan Nelayan 1kg", FONT2, 9, 95, WHITE, BLACK);
 8003048:	2300      	movs	r3, #0
 800304a:	9301      	str	r3, [sp, #4]
 800304c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003050:	9300      	str	r3, [sp, #0]
 8003052:	235f      	movs	r3, #95	; 0x5f
 8003054:	2209      	movs	r2, #9
 8003056:	4931      	ldr	r1, [pc, #196]	; (800311c <get_keypad+0x13c>)
 8003058:	4831      	ldr	r0, [pc, #196]	; (8003120 <get_keypad+0x140>)
 800305a:	f7fe f89a 	bl	8001192 <ILI9341_DrawText>
		key_kondisi = false;
		led_reaction(100,100);
		keypad_reset = HAL_GetTick();
		keypad_millis = HAL_GetTick();*/
	  }
}
 800305e:	e047      	b.n	80030f0 <get_keypad+0x110>
		else if(keypadin == 2){
 8003060:	79fb      	ldrb	r3, [r7, #7]
 8003062:	2b02      	cmp	r3, #2
 8003064:	d113      	bne.n	800308e <get_keypad+0xae>
			ukuranstring = sprintf((char*)buff_s, "Hasil Tangkapan Nelayan 2kg\r\n");
 8003066:	492f      	ldr	r1, [pc, #188]	; (8003124 <get_keypad+0x144>)
 8003068:	482a      	ldr	r0, [pc, #168]	; (8003114 <get_keypad+0x134>)
 800306a:	f006 fd93 	bl	8009b94 <siprintf>
 800306e:	4603      	mov	r3, r0
 8003070:	b29a      	uxth	r2, r3
 8003072:	4b29      	ldr	r3, [pc, #164]	; (8003118 <get_keypad+0x138>)
 8003074:	801a      	strh	r2, [r3, #0]
			ILI9341_DrawText("Hasil Tangkapan Nelayan 2kg", FONT2, 9, 95, WHITE, BLACK);
 8003076:	2300      	movs	r3, #0
 8003078:	9301      	str	r3, [sp, #4]
 800307a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800307e:	9300      	str	r3, [sp, #0]
 8003080:	235f      	movs	r3, #95	; 0x5f
 8003082:	2209      	movs	r2, #9
 8003084:	4925      	ldr	r1, [pc, #148]	; (800311c <get_keypad+0x13c>)
 8003086:	4828      	ldr	r0, [pc, #160]	; (8003128 <get_keypad+0x148>)
 8003088:	f7fe f883 	bl	8001192 <ILI9341_DrawText>
}
 800308c:	e030      	b.n	80030f0 <get_keypad+0x110>
		else if(keypadin == 3){
 800308e:	79fb      	ldrb	r3, [r7, #7]
 8003090:	2b03      	cmp	r3, #3
 8003092:	d113      	bne.n	80030bc <get_keypad+0xdc>
			ukuranstring = sprintf((char*)buff_s, "Hasil Tangkapan Nelayan 3kg\r\n");
 8003094:	4925      	ldr	r1, [pc, #148]	; (800312c <get_keypad+0x14c>)
 8003096:	481f      	ldr	r0, [pc, #124]	; (8003114 <get_keypad+0x134>)
 8003098:	f006 fd7c 	bl	8009b94 <siprintf>
 800309c:	4603      	mov	r3, r0
 800309e:	b29a      	uxth	r2, r3
 80030a0:	4b1d      	ldr	r3, [pc, #116]	; (8003118 <get_keypad+0x138>)
 80030a2:	801a      	strh	r2, [r3, #0]
			ILI9341_DrawText("Hasil Tangkapan Nelayan 3kg", FONT2, 9, 95, WHITE, BLACK);
 80030a4:	2300      	movs	r3, #0
 80030a6:	9301      	str	r3, [sp, #4]
 80030a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030ac:	9300      	str	r3, [sp, #0]
 80030ae:	235f      	movs	r3, #95	; 0x5f
 80030b0:	2209      	movs	r2, #9
 80030b2:	491a      	ldr	r1, [pc, #104]	; (800311c <get_keypad+0x13c>)
 80030b4:	481e      	ldr	r0, [pc, #120]	; (8003130 <get_keypad+0x150>)
 80030b6:	f7fe f86c 	bl	8001192 <ILI9341_DrawText>
}
 80030ba:	e019      	b.n	80030f0 <get_keypad+0x110>
		else if(keypadin == 12){
 80030bc:	79fb      	ldrb	r3, [r7, #7]
 80030be:	2b0c      	cmp	r3, #12
 80030c0:	d116      	bne.n	80030f0 <get_keypad+0x110>
			ILI9341_DrawFilledRectangleCoord(9, 95, 240, 150, BLACK);
 80030c2:	2300      	movs	r3, #0
 80030c4:	9300      	str	r3, [sp, #0]
 80030c6:	2396      	movs	r3, #150	; 0x96
 80030c8:	22f0      	movs	r2, #240	; 0xf0
 80030ca:	215f      	movs	r1, #95	; 0x5f
 80030cc:	2009      	movs	r0, #9
 80030ce:	f7fd ff8d 	bl	8000fec <ILI9341_DrawFilledRectangleCoord>
			HAL_UART_Transmit(&huart2, buff_s, ukuranstring, 100);
 80030d2:	4b11      	ldr	r3, [pc, #68]	; (8003118 <get_keypad+0x138>)
 80030d4:	881a      	ldrh	r2, [r3, #0]
 80030d6:	2364      	movs	r3, #100	; 0x64
 80030d8:	490e      	ldr	r1, [pc, #56]	; (8003114 <get_keypad+0x134>)
 80030da:	4816      	ldr	r0, [pc, #88]	; (8003134 <get_keypad+0x154>)
 80030dc:	f004 fa73 	bl	80075c6 <HAL_UART_Transmit>
			ukuranstring = sprintf((char*)buff_s, "\r\n");
 80030e0:	4915      	ldr	r1, [pc, #84]	; (8003138 <get_keypad+0x158>)
 80030e2:	480c      	ldr	r0, [pc, #48]	; (8003114 <get_keypad+0x134>)
 80030e4:	f006 fd56 	bl	8009b94 <siprintf>
 80030e8:	4603      	mov	r3, r0
 80030ea:	b29a      	uxth	r2, r3
 80030ec:	4b0a      	ldr	r3, [pc, #40]	; (8003118 <get_keypad+0x138>)
 80030ee:	801a      	strh	r2, [r3, #0]
}
 80030f0:	bf00      	nop
 80030f2:	3710      	adds	r7, #16
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	0800d684 	.word	0x0800d684
 80030fc:	20000a5c 	.word	0x20000a5c
 8003100:	20000a59 	.word	0x20000a59
 8003104:	20000a5b 	.word	0x20000a5b
 8003108:	20000a5a 	.word	0x20000a5a
 800310c:	20000a28 	.word	0x20000a28
 8003110:	0800d68c 	.word	0x0800d68c
 8003114:	20002c10 	.word	0x20002c10
 8003118:	20002ef0 	.word	0x20002ef0
 800311c:	0800d798 	.word	0x0800d798
 8003120:	0800d6ac 	.word	0x0800d6ac
 8003124:	0800d6c8 	.word	0x0800d6c8
 8003128:	0800d6e8 	.word	0x0800d6e8
 800312c:	0800d704 	.word	0x0800d704
 8003130:	0800d724 	.word	0x0800d724
 8003134:	20003780 	.word	0x20003780
 8003138:	0800d740 	.word	0x0800d740

0800313c <led_reaction>:
    return dest;
}

/**Fungsi ini LED Blink untuk indikasi
  */
void led_reaction(uint16_t led_time, uint16_t time_loop){
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	4603      	mov	r3, r0
 8003144:	460a      	mov	r2, r1
 8003146:	80fb      	strh	r3, [r7, #6]
 8003148:	4613      	mov	r3, r2
 800314a:	80bb      	strh	r3, [r7, #4]
	led_loop_on = HAL_GetTick();
 800314c:	f000 fe6e 	bl	8003e2c <HAL_GetTick>
 8003150:	4603      	mov	r3, r0
 8003152:	4a29      	ldr	r2, [pc, #164]	; (80031f8 <led_reaction+0xbc>)
 8003154:	6013      	str	r3, [r2, #0]
	while ((unsigned long)HAL_GetTick() - led_loop_on <= time_loop){
 8003156:	e041      	b.n	80031dc <led_reaction+0xa0>
		if (HAL_GetTick() - led_prev_on >= led_time){
 8003158:	f000 fe68 	bl	8003e2c <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	4b27      	ldr	r3, [pc, #156]	; (80031fc <led_reaction+0xc0>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	1ad2      	subs	r2, r2, r3
 8003164:	88fb      	ldrh	r3, [r7, #6]
 8003166:	429a      	cmp	r2, r3
 8003168:	d338      	bcc.n	80031dc <led_reaction+0xa0>
			led_prev_on = HAL_GetTick();
 800316a:	f000 fe5f 	bl	8003e2c <HAL_GetTick>
 800316e:	4603      	mov	r3, r0
 8003170:	4a22      	ldr	r2, [pc, #136]	; (80031fc <led_reaction+0xc0>)
 8003172:	6013      	str	r3, [r2, #0]
			if (led_hijau_kuning == 0){
 8003174:	4b22      	ldr	r3, [pc, #136]	; (8003200 <led_reaction+0xc4>)
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	f083 0301 	eor.w	r3, r3, #1
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b00      	cmp	r3, #0
 8003180:	d003      	beq.n	800318a <led_reaction+0x4e>
				led_hijau_kuning = 1;
 8003182:	4b1f      	ldr	r3, [pc, #124]	; (8003200 <led_reaction+0xc4>)
 8003184:	2201      	movs	r2, #1
 8003186:	701a      	strb	r2, [r3, #0]
 8003188:	e002      	b.n	8003190 <led_reaction+0x54>
			} else {
				led_hijau_kuning = 0;
 800318a:	4b1d      	ldr	r3, [pc, #116]	; (8003200 <led_reaction+0xc4>)
 800318c:	2200      	movs	r2, #0
 800318e:	701a      	strb	r2, [r3, #0]
			}
			if (led_merah == 0){
 8003190:	4b1c      	ldr	r3, [pc, #112]	; (8003204 <led_reaction+0xc8>)
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	f083 0301 	eor.w	r3, r3, #1
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b00      	cmp	r3, #0
 800319c:	d003      	beq.n	80031a6 <led_reaction+0x6a>
				led_merah = 1;
 800319e:	4b19      	ldr	r3, [pc, #100]	; (8003204 <led_reaction+0xc8>)
 80031a0:	2201      	movs	r2, #1
 80031a2:	701a      	strb	r2, [r3, #0]
 80031a4:	e002      	b.n	80031ac <led_reaction+0x70>
			} else {
				led_merah = 0;
 80031a6:	4b17      	ldr	r3, [pc, #92]	; (8003204 <led_reaction+0xc8>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	701a      	strb	r2, [r3, #0]
			}
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, led_hijau_kuning);
 80031ac:	4b14      	ldr	r3, [pc, #80]	; (8003200 <led_reaction+0xc4>)
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	461a      	mov	r2, r3
 80031b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80031b6:	4814      	ldr	r0, [pc, #80]	; (8003208 <led_reaction+0xcc>)
 80031b8:	f001 fd30 	bl	8004c1c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, led_merah);
 80031bc:	4b11      	ldr	r3, [pc, #68]	; (8003204 <led_reaction+0xc8>)
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	461a      	mov	r2, r3
 80031c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80031c6:	4810      	ldr	r0, [pc, #64]	; (8003208 <led_reaction+0xcc>)
 80031c8:	f001 fd28 	bl	8004c1c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, led_hijau_kuning);
 80031cc:	4b0c      	ldr	r3, [pc, #48]	; (8003200 <led_reaction+0xc4>)
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	461a      	mov	r2, r3
 80031d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80031d6:	480c      	ldr	r0, [pc, #48]	; (8003208 <led_reaction+0xcc>)
 80031d8:	f001 fd20 	bl	8004c1c <HAL_GPIO_WritePin>
	while ((unsigned long)HAL_GetTick() - led_loop_on <= time_loop){
 80031dc:	f000 fe26 	bl	8003e2c <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	4b05      	ldr	r3, [pc, #20]	; (80031f8 <led_reaction+0xbc>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	1ad2      	subs	r2, r2, r3
 80031e8:	88bb      	ldrh	r3, [r7, #4]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d9b4      	bls.n	8003158 <led_reaction+0x1c>
		}
	}
}
 80031ee:	bf00      	nop
 80031f0:	bf00      	nop
 80031f2:	3708      	adds	r7, #8
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	20000a24 	.word	0x20000a24
 80031fc:	20000a20 	.word	0x20000a20
 8003200:	20000009 	.word	0x20000009
 8003204:	20000a5d 	.word	0x20000a5d
 8003208:	40021000 	.word	0x40021000
 800320c:	00000000 	.word	0x00000000

08003210 <get_gps>:
/**Fungsi ini untuk memparsing data GPS yaitu latitude longitude digunakan untuk melihat lokaasi alat
  */
void get_gps(){
 8003210:	b580      	push	{r7, lr}
 8003212:	b088      	sub	sp, #32
 8003214:	af00      	add	r7, sp, #0
	if (usart_3_state == true){
 8003216:	4bac      	ldr	r3, [pc, #688]	; (80034c8 <get_gps+0x2b8>)
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	2b00      	cmp	r3, #0
 800321c:	f000 8128 	beq.w	8003470 <get_gps+0x260>
//		printf("%s", MainBuf_3);
//		printf("7.12122");
//		printf("test");
	  char *pointer; char *conv;
		  int length = sizeof(MainBuf_3);
 8003220:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003224:	60bb      	str	r3, [r7, #8]

		  memset(lat, '\0', 20);
 8003226:	2214      	movs	r2, #20
 8003228:	2100      	movs	r1, #0
 800322a:	48a8      	ldr	r0, [pc, #672]	; (80034cc <get_gps+0x2bc>)
 800322c:	f005 fbe8 	bl	8008a00 <memset>
		  memset(lon, '\0', 20) ;
 8003230:	2214      	movs	r2, #20
 8003232:	2100      	movs	r1, #0
 8003234:	48a6      	ldr	r0, [pc, #664]	; (80034d0 <get_gps+0x2c0>)
 8003236:	f005 fbe3 	bl	8008a00 <memset>
		  pointer = strchr((char*)MainBuf_3, '$');
 800323a:	2124      	movs	r1, #36	; 0x24
 800323c:	48a5      	ldr	r0, [pc, #660]	; (80034d4 <get_gps+0x2c4>)
 800323e:	f006 fd0c 	bl	8009c5a <strchr>
 8003242:	61f8      	str	r0, [r7, #28]
		  do{
			  char *ptrstart;
			  char *ptrend;
			  if(strncmp(pointer, "$GNGGA" , 6) == 0){ //$GNGGA
 8003244:	2206      	movs	r2, #6
 8003246:	49a4      	ldr	r1, [pc, #656]	; (80034d8 <get_gps+0x2c8>)
 8003248:	69f8      	ldr	r0, [r7, #28]
 800324a:	f006 fd13 	bl	8009c74 <strncmp>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d118      	bne.n	8003286 <get_gps+0x76>
				  ptrstart = (char*)memchr(pointer + 1, ',', length);
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	3301      	adds	r3, #1
 8003258:	68ba      	ldr	r2, [r7, #8]
 800325a:	212c      	movs	r1, #44	; 0x2c
 800325c:	4618      	mov	r0, r3
 800325e:	f7fc ffb7 	bl	80001d0 <memchr>
 8003262:	61b8      	str	r0, [r7, #24]
				  ptrstart = (char*)memchr(ptrstart + 1, ',', length);
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	3301      	adds	r3, #1
 8003268:	68ba      	ldr	r2, [r7, #8]
 800326a:	212c      	movs	r1, #44	; 0x2c
 800326c:	4618      	mov	r0, r3
 800326e:	f7fc ffaf 	bl	80001d0 <memchr>
 8003272:	61b8      	str	r0, [r7, #24]
				  ptrend = (char*)memchr(ptrstart + 1, ',', length);
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	3301      	adds	r3, #1
 8003278:	68ba      	ldr	r2, [r7, #8]
 800327a:	212c      	movs	r1, #44	; 0x2c
 800327c:	4618      	mov	r0, r3
 800327e:	f7fc ffa7 	bl	80001d0 <memchr>
 8003282:	6178      	str	r0, [r7, #20]
 8003284:	e049      	b.n	800331a <get_gps+0x10a>

			  } else if(strncmp(pointer, "$GNGLL", 6) == 0){ //$GNGLL
 8003286:	2206      	movs	r2, #6
 8003288:	4994      	ldr	r1, [pc, #592]	; (80034dc <get_gps+0x2cc>)
 800328a:	69f8      	ldr	r0, [r7, #28]
 800328c:	f006 fcf2 	bl	8009c74 <strncmp>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d110      	bne.n	80032b8 <get_gps+0xa8>
				  ptrstart = (char*)memchr(pointer + 1, ',', length);
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	3301      	adds	r3, #1
 800329a:	68ba      	ldr	r2, [r7, #8]
 800329c:	212c      	movs	r1, #44	; 0x2c
 800329e:	4618      	mov	r0, r3
 80032a0:	f7fc ff96 	bl	80001d0 <memchr>
 80032a4:	61b8      	str	r0, [r7, #24]
				  ptrend = (char*)memchr(ptrstart + 1, ',', length);
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	3301      	adds	r3, #1
 80032aa:	68ba      	ldr	r2, [r7, #8]
 80032ac:	212c      	movs	r1, #44	; 0x2c
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7fc ff8e 	bl	80001d0 <memchr>
 80032b4:	6178      	str	r0, [r7, #20]
 80032b6:	e030      	b.n	800331a <get_gps+0x10a>

			  } else if(strncmp(pointer, "$GNRMC", 6) == 0){ //$GNRMC
 80032b8:	2206      	movs	r2, #6
 80032ba:	4989      	ldr	r1, [pc, #548]	; (80034e0 <get_gps+0x2d0>)
 80032bc:	69f8      	ldr	r0, [r7, #28]
 80032be:	f006 fcd9 	bl	8009c74 <strncmp>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d120      	bne.n	800330a <get_gps+0xfa>
				  ptrstart = (char*)memchr(pointer + 1, ',', length);
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	3301      	adds	r3, #1
 80032cc:	68ba      	ldr	r2, [r7, #8]
 80032ce:	212c      	movs	r1, #44	; 0x2c
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7fc ff7d 	bl	80001d0 <memchr>
 80032d6:	61b8      	str	r0, [r7, #24]
				  ptrstart = (char*)memchr(ptrstart + 1, ',', length);
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	3301      	adds	r3, #1
 80032dc:	68ba      	ldr	r2, [r7, #8]
 80032de:	212c      	movs	r1, #44	; 0x2c
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7fc ff75 	bl	80001d0 <memchr>
 80032e6:	61b8      	str	r0, [r7, #24]
				  ptrstart = (char*)memchr(ptrstart + 1, ',', length);
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	3301      	adds	r3, #1
 80032ec:	68ba      	ldr	r2, [r7, #8]
 80032ee:	212c      	movs	r1, #44	; 0x2c
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7fc ff6d 	bl	80001d0 <memchr>
 80032f6:	61b8      	str	r0, [r7, #24]
				  ptrend = (char*)memchr(ptrstart + 1, ',', length);
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	3301      	adds	r3, #1
 80032fc:	68ba      	ldr	r2, [r7, #8]
 80032fe:	212c      	movs	r1, #44	; 0x2c
 8003300:	4618      	mov	r0, r3
 8003302:	f7fc ff65 	bl	80001d0 <memchr>
 8003306:	6178      	str	r0, [r7, #20]
 8003308:	e007      	b.n	800331a <get_gps+0x10a>

			  } else {
				  pointer = strchr(pointer + 6, '$');
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	3306      	adds	r3, #6
 800330e:	2124      	movs	r1, #36	; 0x24
 8003310:	4618      	mov	r0, r3
 8003312:	f006 fca2 	bl	8009c5a <strchr>
 8003316:	61f8      	str	r0, [r7, #28]
				  continue;
 8003318:	e0a2      	b.n	8003460 <get_gps+0x250>
			  }

			  for(int i = 1; i < (ptrend - ptrstart); i++) lat[i - 1] = ptrstart[i];
 800331a:	2301      	movs	r3, #1
 800331c:	613b      	str	r3, [r7, #16]
 800331e:	e00a      	b.n	8003336 <get_gps+0x126>
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	69ba      	ldr	r2, [r7, #24]
 8003324:	441a      	add	r2, r3
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	3b01      	subs	r3, #1
 800332a:	7811      	ldrb	r1, [r2, #0]
 800332c:	4a67      	ldr	r2, [pc, #412]	; (80034cc <get_gps+0x2bc>)
 800332e:	54d1      	strb	r1, [r2, r3]
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	3301      	adds	r3, #1
 8003334:	613b      	str	r3, [r7, #16]
 8003336:	697a      	ldr	r2, [r7, #20]
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	693a      	ldr	r2, [r7, #16]
 800333e:	429a      	cmp	r2, r3
 8003340:	dbee      	blt.n	8003320 <get_gps+0x110>
			  lat_a = *(ptrend + 1);
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	785a      	ldrb	r2, [r3, #1]
 8003346:	4b67      	ldr	r3, [pc, #412]	; (80034e4 <get_gps+0x2d4>)
 8003348:	701a      	strb	r2, [r3, #0]

			  ptrstart = (char*)memchr(ptrend + 1, ',', length);
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	3301      	adds	r3, #1
 800334e:	68ba      	ldr	r2, [r7, #8]
 8003350:	212c      	movs	r1, #44	; 0x2c
 8003352:	4618      	mov	r0, r3
 8003354:	f7fc ff3c 	bl	80001d0 <memchr>
 8003358:	61b8      	str	r0, [r7, #24]
			  ptrend = (char*)memchr(ptrstart + 1, ',', length);
 800335a:	69bb      	ldr	r3, [r7, #24]
 800335c:	3301      	adds	r3, #1
 800335e:	68ba      	ldr	r2, [r7, #8]
 8003360:	212c      	movs	r1, #44	; 0x2c
 8003362:	4618      	mov	r0, r3
 8003364:	f7fc ff34 	bl	80001d0 <memchr>
 8003368:	6178      	str	r0, [r7, #20]

			  for(int i = 1; i < (ptrend - ptrstart); i++) lon[i - 1] = ptrstart[i];
 800336a:	2301      	movs	r3, #1
 800336c:	60fb      	str	r3, [r7, #12]
 800336e:	e00a      	b.n	8003386 <get_gps+0x176>
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	69ba      	ldr	r2, [r7, #24]
 8003374:	441a      	add	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	3b01      	subs	r3, #1
 800337a:	7811      	ldrb	r1, [r2, #0]
 800337c:	4a54      	ldr	r2, [pc, #336]	; (80034d0 <get_gps+0x2c0>)
 800337e:	54d1      	strb	r1, [r2, r3]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	3301      	adds	r3, #1
 8003384:	60fb      	str	r3, [r7, #12]
 8003386:	697a      	ldr	r2, [r7, #20]
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	68fa      	ldr	r2, [r7, #12]
 800338e:	429a      	cmp	r2, r3
 8003390:	dbee      	blt.n	8003370 <get_gps+0x160>
			  lon_a = *(ptrend + 1);
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	785a      	ldrb	r2, [r3, #1]
 8003396:	4b54      	ldr	r3, [pc, #336]	; (80034e8 <get_gps+0x2d8>)
 8003398:	701a      	strb	r2, [r3, #0]
			  if(lon[0] != '\0' && lat[0] != '\0'){
 800339a:	4b4d      	ldr	r3, [pc, #308]	; (80034d0 <get_gps+0x2c0>)
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d057      	beq.n	8003452 <get_gps+0x242>
 80033a2:	4b4a      	ldr	r3, [pc, #296]	; (80034cc <get_gps+0x2bc>)
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d053      	beq.n	8003452 <get_gps+0x242>
//				  printf("Lat: %s | %c\tLon: %s | %c\r\n", lat, lat_a, lon, lon_a);
				  lat_gps = strtod((char*)lat, &conv);
 80033aa:	1d3b      	adds	r3, r7, #4
 80033ac:	4619      	mov	r1, r3
 80033ae:	4847      	ldr	r0, [pc, #284]	; (80034cc <get_gps+0x2bc>)
 80033b0:	f007 fa9e 	bl	800a8f0 <strtod>
 80033b4:	ec53 2b10 	vmov	r2, r3, d0
 80033b8:	4610      	mov	r0, r2
 80033ba:	4619      	mov	r1, r3
 80033bc:	f7fd fc14 	bl	8000be8 <__aeabi_d2f>
 80033c0:	4603      	mov	r3, r0
 80033c2:	4a4a      	ldr	r2, [pc, #296]	; (80034ec <get_gps+0x2dc>)
 80033c4:	6013      	str	r3, [r2, #0]
//				  lat_gps = atof((char*)lat);
				  lon_gps = strtod((char*)lon, &conv);
 80033c6:	1d3b      	adds	r3, r7, #4
 80033c8:	4619      	mov	r1, r3
 80033ca:	4841      	ldr	r0, [pc, #260]	; (80034d0 <get_gps+0x2c0>)
 80033cc:	f007 fa90 	bl	800a8f0 <strtod>
 80033d0:	ec53 2b10 	vmov	r2, r3, d0
 80033d4:	4610      	mov	r0, r2
 80033d6:	4619      	mov	r1, r3
 80033d8:	f7fd fc06 	bl	8000be8 <__aeabi_d2f>
 80033dc:	4603      	mov	r3, r0
 80033de:	4a44      	ldr	r2, [pc, #272]	; (80034f0 <get_gps+0x2e0>)
 80033e0:	6013      	str	r3, [r2, #0]
//				  lon_gps = atof((char*)lon);
				  sprintf(lat, "%.7f", (lat_gps * -0.01) - 0.1167);
 80033e2:	4b42      	ldr	r3, [pc, #264]	; (80034ec <get_gps+0x2dc>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7fd f8ae 	bl	8000548 <__aeabi_f2d>
 80033ec:	a32a      	add	r3, pc, #168	; (adr r3, 8003498 <get_gps+0x288>)
 80033ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033f2:	f7fd f901 	bl	80005f8 <__aeabi_dmul>
 80033f6:	4602      	mov	r2, r0
 80033f8:	460b      	mov	r3, r1
 80033fa:	4610      	mov	r0, r2
 80033fc:	4619      	mov	r1, r3
 80033fe:	a328      	add	r3, pc, #160	; (adr r3, 80034a0 <get_gps+0x290>)
 8003400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003404:	f7fc ff40 	bl	8000288 <__aeabi_dsub>
 8003408:	4602      	mov	r2, r0
 800340a:	460b      	mov	r3, r1
 800340c:	4939      	ldr	r1, [pc, #228]	; (80034f4 <get_gps+0x2e4>)
 800340e:	482f      	ldr	r0, [pc, #188]	; (80034cc <get_gps+0x2bc>)
 8003410:	f006 fbc0 	bl	8009b94 <siprintf>
				  sprintf(lon, "%.7f", (lon_gps * 0.01) + 0.316);
 8003414:	4b36      	ldr	r3, [pc, #216]	; (80034f0 <get_gps+0x2e0>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4618      	mov	r0, r3
 800341a:	f7fd f895 	bl	8000548 <__aeabi_f2d>
 800341e:	a322      	add	r3, pc, #136	; (adr r3, 80034a8 <get_gps+0x298>)
 8003420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003424:	f7fd f8e8 	bl	80005f8 <__aeabi_dmul>
 8003428:	4602      	mov	r2, r0
 800342a:	460b      	mov	r3, r1
 800342c:	4610      	mov	r0, r2
 800342e:	4619      	mov	r1, r3
 8003430:	a31f      	add	r3, pc, #124	; (adr r3, 80034b0 <get_gps+0x2a0>)
 8003432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003436:	f7fc ff29 	bl	800028c <__adddf3>
 800343a:	4602      	mov	r2, r0
 800343c:	460b      	mov	r3, r1
 800343e:	492d      	ldr	r1, [pc, #180]	; (80034f4 <get_gps+0x2e4>)
 8003440:	4823      	ldr	r0, [pc, #140]	; (80034d0 <get_gps+0x2c0>)
 8003442:	f006 fba7 	bl	8009b94 <siprintf>

				  printf("%s %s\n\r",lat, lon);
 8003446:	4a22      	ldr	r2, [pc, #136]	; (80034d0 <get_gps+0x2c0>)
 8003448:	4920      	ldr	r1, [pc, #128]	; (80034cc <get_gps+0x2bc>)
 800344a:	482b      	ldr	r0, [pc, #172]	; (80034f8 <get_gps+0x2e8>)
 800344c:	f006 fa04 	bl	8009858 <iprintf>

				  break;
 8003450:	e00a      	b.n	8003468 <get_gps+0x258>
			  }

			  pointer = strchr(pointer + 4, '$');
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	3304      	adds	r3, #4
 8003456:	2124      	movs	r1, #36	; 0x24
 8003458:	4618      	mov	r0, r3
 800345a:	f006 fbfe 	bl	8009c5a <strchr>
 800345e:	61f8      	str	r0, [r7, #28]
		  }
		  while(pointer != NULL);
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	2b00      	cmp	r3, #0
 8003464:	f47f aeee 	bne.w	8003244 <get_gps+0x34>
		  usart_3_state = false;
 8003468:	4b17      	ldr	r3, [pc, #92]	; (80034c8 <get_gps+0x2b8>)
 800346a:	2200      	movs	r2, #0
 800346c:	701a      	strb	r2, [r3, #0]
			else
			  {
				  sprintf(lat, "%g", -7.122323);
				  sprintf(lon, "%g", 122.32312);
			  }
}
 800346e:	e00d      	b.n	800348c <get_gps+0x27c>
				  sprintf(lat, "%g", -7.122323);
 8003470:	a311      	add	r3, pc, #68	; (adr r3, 80034b8 <get_gps+0x2a8>)
 8003472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003476:	4921      	ldr	r1, [pc, #132]	; (80034fc <get_gps+0x2ec>)
 8003478:	4814      	ldr	r0, [pc, #80]	; (80034cc <get_gps+0x2bc>)
 800347a:	f006 fb8b 	bl	8009b94 <siprintf>
				  sprintf(lon, "%g", 122.32312);
 800347e:	a310      	add	r3, pc, #64	; (adr r3, 80034c0 <get_gps+0x2b0>)
 8003480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003484:	491d      	ldr	r1, [pc, #116]	; (80034fc <get_gps+0x2ec>)
 8003486:	4812      	ldr	r0, [pc, #72]	; (80034d0 <get_gps+0x2c0>)
 8003488:	f006 fb84 	bl	8009b94 <siprintf>
}
 800348c:	bf00      	nop
 800348e:	3720      	adds	r7, #32
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}
 8003494:	f3af 8000 	nop.w
 8003498:	47ae147b 	.word	0x47ae147b
 800349c:	bf847ae1 	.word	0xbf847ae1
 80034a0:	1b71758e 	.word	0x1b71758e
 80034a4:	3fbde00d 	.word	0x3fbde00d
 80034a8:	47ae147b 	.word	0x47ae147b
 80034ac:	3f847ae1 	.word	0x3f847ae1
 80034b0:	10624dd3 	.word	0x10624dd3
 80034b4:	3fd43958 	.word	0x3fd43958
 80034b8:	3d9231c6 	.word	0x3d9231c6
 80034bc:	c01c7d42 	.word	0xc01c7d42
 80034c0:	ff822bbf 	.word	0xff822bbf
 80034c4:	405e94ad 	.word	0x405e94ad
 80034c8:	20000a0c 	.word	0x20000a0c
 80034cc:	20003830 	.word	0x20003830
 80034d0:	20002edc 	.word	0x20002edc
 80034d4:	2000020c 	.word	0x2000020c
 80034d8:	0800d744 	.word	0x0800d744
 80034dc:	0800d74c 	.word	0x0800d74c
 80034e0:	0800d754 	.word	0x0800d754
 80034e4:	20002ed8 	.word	0x20002ed8
 80034e8:	20002dd0 	.word	0x20002dd0
 80034ec:	200037c8 	.word	0x200037c8
 80034f0:	200038a8 	.word	0x200038a8
 80034f4:	0800d75c 	.word	0x0800d75c
 80034f8:	0800d764 	.word	0x0800d764
 80034fc:	0800d76c 	.word	0x0800d76c

08003500 <terimadata>:
/**Fungsi ini untuk terima data dari LoRa Lainnya
  */
void terimadata(void){
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af02      	add	r7, sp, #8
	if(usart_2_state == true){
 8003506:	4b1b      	ldr	r3, [pc, #108]	; (8003574 <terimadata+0x74>)
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d02f      	beq.n	800356e <terimadata+0x6e>
		usart_2_state = false;
 800350e:	4b19      	ldr	r3, [pc, #100]	; (8003574 <terimadata+0x74>)
 8003510:	2200      	movs	r2, #0
 8003512:	701a      	strb	r2, [r3, #0]
		if(RxBuf[0] == '*'){ //*node,lat,long,data,jam, menit, detik, tegangan
 8003514:	4b18      	ldr	r3, [pc, #96]	; (8003578 <terimadata+0x78>)
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	2b2a      	cmp	r3, #42	; 0x2a
 800351a:	d111      	bne.n	8003540 <terimadata+0x40>
			if(RxBuf[1] != *node)
 800351c:	4b16      	ldr	r3, [pc, #88]	; (8003578 <terimadata+0x78>)
 800351e:	785a      	ldrb	r2, [r3, #1]
 8003520:	4b16      	ldr	r3, [pc, #88]	; (800357c <terimadata+0x7c>)
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	429a      	cmp	r2, r3
 8003526:	d007      	beq.n	8003538 <terimadata+0x38>
			{
				HAL_UART_Transmit(&huart2, RxBuf, ukuran_data, 100);
 8003528:	4b15      	ldr	r3, [pc, #84]	; (8003580 <terimadata+0x80>)
 800352a:	881a      	ldrh	r2, [r3, #0]
 800352c:	2364      	movs	r3, #100	; 0x64
 800352e:	4912      	ldr	r1, [pc, #72]	; (8003578 <terimadata+0x78>)
 8003530:	4814      	ldr	r0, [pc, #80]	; (8003584 <terimadata+0x84>)
 8003532:	f004 f848 	bl	80075c6 <HAL_UART_Transmit>
 8003536:	e006      	b.n	8003546 <terimadata+0x46>
//				printf("Terparsing");
			}
			else
			{
				printf("Tidak Mengirimkan");
 8003538:	4813      	ldr	r0, [pc, #76]	; (8003588 <terimadata+0x88>)
 800353a:	f006 f98d 	bl	8009858 <iprintf>
 800353e:	e002      	b.n	8003546 <terimadata+0x46>
			}

		}
		else
		{
			printf("Tidak\n");
 8003540:	4812      	ldr	r0, [pc, #72]	; (800358c <terimadata+0x8c>)
 8003542:	f006 fa0f 	bl	8009964 <puts>
		}
		ILI9341_DrawText(RxBuf, FONT2, 9, 175, WHITE, BLACK);
 8003546:	2300      	movs	r3, #0
 8003548:	9301      	str	r3, [sp, #4]
 800354a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800354e:	9300      	str	r3, [sp, #0]
 8003550:	23af      	movs	r3, #175	; 0xaf
 8003552:	2209      	movs	r2, #9
 8003554:	490e      	ldr	r1, [pc, #56]	; (8003590 <terimadata+0x90>)
 8003556:	4808      	ldr	r0, [pc, #32]	; (8003578 <terimadata+0x78>)
 8003558:	f7fd fe1b 	bl	8001192 <ILI9341_DrawText>
		printf("%s", RxBuf);
 800355c:	4906      	ldr	r1, [pc, #24]	; (8003578 <terimadata+0x78>)
 800355e:	480d      	ldr	r0, [pc, #52]	; (8003594 <terimadata+0x94>)
 8003560:	f006 f97a 	bl	8009858 <iprintf>
		led_reaction(100, 600);
 8003564:	f44f 7116 	mov.w	r1, #600	; 0x258
 8003568:	2064      	movs	r0, #100	; 0x64
 800356a:	f7ff fde7 	bl	800313c <led_reaction>
	}
}
 800356e:	bf00      	nop
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	20000208 	.word	0x20000208
 8003578:	20002ef4 	.word	0x20002ef4
 800357c:	20000004 	.word	0x20000004
 8003580:	20002c0c 	.word	0x20002c0c
 8003584:	20003780 	.word	0x20003780
 8003588:	0800d770 	.word	0x0800d770
 800358c:	0800d784 	.word	0x0800d784
 8003590:	0800d798 	.word	0x0800d798
 8003594:	0800d78c 	.word	0x0800d78c

08003598 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003598:	b480      	push	{r7}
 800359a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800359c:	b672      	cpsid	i
}
 800359e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80035a0:	e7fe      	b.n	80035a0 <Error_Handler+0x8>
	...

080035a4 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 80035ac:	4a07      	ldr	r2, [pc, #28]	; (80035cc <RetargetInit+0x28>)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 80035b2:	4b07      	ldr	r3, [pc, #28]	; (80035d0 <RetargetInit+0x2c>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	6898      	ldr	r0, [r3, #8]
 80035b8:	2300      	movs	r3, #0
 80035ba:	2202      	movs	r2, #2
 80035bc:	2100      	movs	r1, #0
 80035be:	f006 f9e9 	bl	8009994 <setvbuf>
}
 80035c2:	bf00      	nop
 80035c4:	3708      	adds	r7, #8
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	200038e0 	.word	0x200038e0
 80035d0:	20000018 	.word	0x20000018

080035d4 <_isatty>:

int _isatty(int fd) {
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	db04      	blt.n	80035ec <_isatty+0x18>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	dc01      	bgt.n	80035ec <_isatty+0x18>
    return 1;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e005      	b.n	80035f8 <_isatty+0x24>

  errno = EBADF;
 80035ec:	f005 f9c8 	bl	8008980 <__errno>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2209      	movs	r2, #9
 80035f4:	601a      	str	r2, [r3, #0]
  return 0;
 80035f6:	2300      	movs	r3, #0
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3708      	adds	r7, #8
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <_write>:

int _write(int fd, char* ptr, int len) {
 8003600:	b580      	push	{r7, lr}
 8003602:	b086      	sub	sp, #24
 8003604:	af00      	add	r7, sp, #0
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2b01      	cmp	r3, #1
 8003610:	d002      	beq.n	8003618 <_write+0x18>
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2b02      	cmp	r3, #2
 8003616:	d111      	bne.n	800363c <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8003618:	4b0e      	ldr	r3, [pc, #56]	; (8003654 <_write+0x54>)
 800361a:	6818      	ldr	r0, [r3, #0]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	b29a      	uxth	r2, r3
 8003620:	f04f 33ff 	mov.w	r3, #4294967295
 8003624:	68b9      	ldr	r1, [r7, #8]
 8003626:	f003 ffce 	bl	80075c6 <HAL_UART_Transmit>
 800362a:	4603      	mov	r3, r0
 800362c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800362e:	7dfb      	ldrb	r3, [r7, #23]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d101      	bne.n	8003638 <_write+0x38>
      return len;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	e008      	b.n	800364a <_write+0x4a>
    else
      return EIO;
 8003638:	2305      	movs	r3, #5
 800363a:	e006      	b.n	800364a <_write+0x4a>
  }
  errno = EBADF;
 800363c:	f005 f9a0 	bl	8008980 <__errno>
 8003640:	4603      	mov	r3, r0
 8003642:	2209      	movs	r2, #9
 8003644:	601a      	str	r2, [r3, #0]
  return -1;
 8003646:	f04f 33ff 	mov.w	r3, #4294967295
}
 800364a:	4618      	mov	r0, r3
 800364c:	3718      	adds	r7, #24
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	200038e0 	.word	0x200038e0

08003658 <_close>:

int _close(int fd) {
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2b00      	cmp	r3, #0
 8003664:	db04      	blt.n	8003670 <_close+0x18>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2b02      	cmp	r3, #2
 800366a:	dc01      	bgt.n	8003670 <_close+0x18>
    return 0;
 800366c:	2300      	movs	r3, #0
 800366e:	e006      	b.n	800367e <_close+0x26>

  errno = EBADF;
 8003670:	f005 f986 	bl	8008980 <__errno>
 8003674:	4603      	mov	r3, r0
 8003676:	2209      	movs	r2, #9
 8003678:	601a      	str	r2, [r3, #0]
  return -1;
 800367a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800367e:	4618      	mov	r0, r3
 8003680:	3708      	adds	r7, #8
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}

08003686 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8003686:	b580      	push	{r7, lr}
 8003688:	b084      	sub	sp, #16
 800368a:	af00      	add	r7, sp, #0
 800368c:	60f8      	str	r0, [r7, #12]
 800368e:	60b9      	str	r1, [r7, #8]
 8003690:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8003692:	f005 f975 	bl	8008980 <__errno>
 8003696:	4603      	mov	r3, r0
 8003698:	2209      	movs	r2, #9
 800369a:	601a      	str	r2, [r3, #0]
  return -1;
 800369c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3710      	adds	r7, #16
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <_read>:

int _read(int fd, char* ptr, int len) {
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b086      	sub	sp, #24
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d110      	bne.n	80036dc <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 80036ba:	4b0e      	ldr	r3, [pc, #56]	; (80036f4 <_read+0x4c>)
 80036bc:	6818      	ldr	r0, [r3, #0]
 80036be:	f04f 33ff 	mov.w	r3, #4294967295
 80036c2:	2201      	movs	r2, #1
 80036c4:	68b9      	ldr	r1, [r7, #8]
 80036c6:	f004 f810 	bl	80076ea <HAL_UART_Receive>
 80036ca:	4603      	mov	r3, r0
 80036cc:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80036ce:	7dfb      	ldrb	r3, [r7, #23]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d101      	bne.n	80036d8 <_read+0x30>
      return 1;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e008      	b.n	80036ea <_read+0x42>
    else
      return EIO;
 80036d8:	2305      	movs	r3, #5
 80036da:	e006      	b.n	80036ea <_read+0x42>
  }
  errno = EBADF;
 80036dc:	f005 f950 	bl	8008980 <__errno>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2209      	movs	r2, #9
 80036e4:	601a      	str	r2, [r3, #0]
  return -1;
 80036e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3718      	adds	r7, #24
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	200038e0 	.word	0x200038e0

080036f8 <_fstat>:

int _fstat(int fd, struct stat* st) {
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2b00      	cmp	r3, #0
 8003706:	db08      	blt.n	800371a <_fstat+0x22>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2b02      	cmp	r3, #2
 800370c:	dc05      	bgt.n	800371a <_fstat+0x22>
    st->st_mode = S_IFCHR;
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003714:	605a      	str	r2, [r3, #4]
    return 0;
 8003716:	2300      	movs	r3, #0
 8003718:	e005      	b.n	8003726 <_fstat+0x2e>
  }

  errno = EBADF;
 800371a:	f005 f931 	bl	8008980 <__errno>
 800371e:	4603      	mov	r3, r0
 8003720:	2209      	movs	r2, #9
 8003722:	601a      	str	r2, [r3, #0]
  return 0;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3708      	adds	r7, #8
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
	...

08003730 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003736:	2300      	movs	r3, #0
 8003738:	607b      	str	r3, [r7, #4]
 800373a:	4b10      	ldr	r3, [pc, #64]	; (800377c <HAL_MspInit+0x4c>)
 800373c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800373e:	4a0f      	ldr	r2, [pc, #60]	; (800377c <HAL_MspInit+0x4c>)
 8003740:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003744:	6453      	str	r3, [r2, #68]	; 0x44
 8003746:	4b0d      	ldr	r3, [pc, #52]	; (800377c <HAL_MspInit+0x4c>)
 8003748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800374a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800374e:	607b      	str	r3, [r7, #4]
 8003750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003752:	2300      	movs	r3, #0
 8003754:	603b      	str	r3, [r7, #0]
 8003756:	4b09      	ldr	r3, [pc, #36]	; (800377c <HAL_MspInit+0x4c>)
 8003758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375a:	4a08      	ldr	r2, [pc, #32]	; (800377c <HAL_MspInit+0x4c>)
 800375c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003760:	6413      	str	r3, [r2, #64]	; 0x40
 8003762:	4b06      	ldr	r3, [pc, #24]	; (800377c <HAL_MspInit+0x4c>)
 8003764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800376a:	603b      	str	r3, [r7, #0]
 800376c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800376e:	bf00      	nop
 8003770:	370c      	adds	r7, #12
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	40023800 	.word	0x40023800

08003780 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b08a      	sub	sp, #40	; 0x28
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003788:	f107 0314 	add.w	r3, r7, #20
 800378c:	2200      	movs	r2, #0
 800378e:	601a      	str	r2, [r3, #0]
 8003790:	605a      	str	r2, [r3, #4]
 8003792:	609a      	str	r2, [r3, #8]
 8003794:	60da      	str	r2, [r3, #12]
 8003796:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a19      	ldr	r2, [pc, #100]	; (8003804 <HAL_I2C_MspInit+0x84>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d12b      	bne.n	80037fa <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037a2:	2300      	movs	r3, #0
 80037a4:	613b      	str	r3, [r7, #16]
 80037a6:	4b18      	ldr	r3, [pc, #96]	; (8003808 <HAL_I2C_MspInit+0x88>)
 80037a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037aa:	4a17      	ldr	r2, [pc, #92]	; (8003808 <HAL_I2C_MspInit+0x88>)
 80037ac:	f043 0302 	orr.w	r3, r3, #2
 80037b0:	6313      	str	r3, [r2, #48]	; 0x30
 80037b2:	4b15      	ldr	r3, [pc, #84]	; (8003808 <HAL_I2C_MspInit+0x88>)
 80037b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	613b      	str	r3, [r7, #16]
 80037bc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80037be:	23c0      	movs	r3, #192	; 0xc0
 80037c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80037c2:	2312      	movs	r3, #18
 80037c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80037c6:	2301      	movs	r3, #1
 80037c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037ca:	2303      	movs	r3, #3
 80037cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80037ce:	2304      	movs	r3, #4
 80037d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037d2:	f107 0314 	add.w	r3, r7, #20
 80037d6:	4619      	mov	r1, r3
 80037d8:	480c      	ldr	r0, [pc, #48]	; (800380c <HAL_I2C_MspInit+0x8c>)
 80037da:	f001 f86b 	bl	80048b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80037de:	2300      	movs	r3, #0
 80037e0:	60fb      	str	r3, [r7, #12]
 80037e2:	4b09      	ldr	r3, [pc, #36]	; (8003808 <HAL_I2C_MspInit+0x88>)
 80037e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e6:	4a08      	ldr	r2, [pc, #32]	; (8003808 <HAL_I2C_MspInit+0x88>)
 80037e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80037ec:	6413      	str	r3, [r2, #64]	; 0x40
 80037ee:	4b06      	ldr	r3, [pc, #24]	; (8003808 <HAL_I2C_MspInit+0x88>)
 80037f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037f6:	60fb      	str	r3, [r7, #12]
 80037f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80037fa:	bf00      	nop
 80037fc:	3728      	adds	r7, #40	; 0x28
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	40005400 	.word	0x40005400
 8003808:	40023800 	.word	0x40023800
 800380c:	40020400 	.word	0x40020400

08003810 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a05      	ldr	r2, [pc, #20]	; (8003834 <HAL_RTC_MspInit+0x24>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d102      	bne.n	8003828 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003822:	4b05      	ldr	r3, [pc, #20]	; (8003838 <HAL_RTC_MspInit+0x28>)
 8003824:	2201      	movs	r2, #1
 8003826:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003828:	bf00      	nop
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr
 8003834:	40002800 	.word	0x40002800
 8003838:	42470e3c 	.word	0x42470e3c

0800383c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b08a      	sub	sp, #40	; 0x28
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003844:	f107 0314 	add.w	r3, r7, #20
 8003848:	2200      	movs	r2, #0
 800384a:	601a      	str	r2, [r3, #0]
 800384c:	605a      	str	r2, [r3, #4]
 800384e:	609a      	str	r2, [r3, #8]
 8003850:	60da      	str	r2, [r3, #12]
 8003852:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a30      	ldr	r2, [pc, #192]	; (800391c <HAL_SPI_MspInit+0xe0>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d159      	bne.n	8003912 <HAL_SPI_MspInit+0xd6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800385e:	2300      	movs	r3, #0
 8003860:	613b      	str	r3, [r7, #16]
 8003862:	4b2f      	ldr	r3, [pc, #188]	; (8003920 <HAL_SPI_MspInit+0xe4>)
 8003864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003866:	4a2e      	ldr	r2, [pc, #184]	; (8003920 <HAL_SPI_MspInit+0xe4>)
 8003868:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800386c:	6453      	str	r3, [r2, #68]	; 0x44
 800386e:	4b2c      	ldr	r3, [pc, #176]	; (8003920 <HAL_SPI_MspInit+0xe4>)
 8003870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003872:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003876:	613b      	str	r3, [r7, #16]
 8003878:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800387a:	2300      	movs	r3, #0
 800387c:	60fb      	str	r3, [r7, #12]
 800387e:	4b28      	ldr	r3, [pc, #160]	; (8003920 <HAL_SPI_MspInit+0xe4>)
 8003880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003882:	4a27      	ldr	r2, [pc, #156]	; (8003920 <HAL_SPI_MspInit+0xe4>)
 8003884:	f043 0301 	orr.w	r3, r3, #1
 8003888:	6313      	str	r3, [r2, #48]	; 0x30
 800388a:	4b25      	ldr	r3, [pc, #148]	; (8003920 <HAL_SPI_MspInit+0xe4>)
 800388c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388e:	f003 0301 	and.w	r3, r3, #1
 8003892:	60fb      	str	r3, [r7, #12]
 8003894:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003896:	23a0      	movs	r3, #160	; 0xa0
 8003898:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800389a:	2302      	movs	r3, #2
 800389c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800389e:	2300      	movs	r3, #0
 80038a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038a2:	2303      	movs	r3, #3
 80038a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80038a6:	2305      	movs	r3, #5
 80038a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038aa:	f107 0314 	add.w	r3, r7, #20
 80038ae:	4619      	mov	r1, r3
 80038b0:	481c      	ldr	r0, [pc, #112]	; (8003924 <HAL_SPI_MspInit+0xe8>)
 80038b2:	f000 ffff 	bl	80048b4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80038b6:	4b1c      	ldr	r3, [pc, #112]	; (8003928 <HAL_SPI_MspInit+0xec>)
 80038b8:	4a1c      	ldr	r2, [pc, #112]	; (800392c <HAL_SPI_MspInit+0xf0>)
 80038ba:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80038bc:	4b1a      	ldr	r3, [pc, #104]	; (8003928 <HAL_SPI_MspInit+0xec>)
 80038be:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80038c2:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80038c4:	4b18      	ldr	r3, [pc, #96]	; (8003928 <HAL_SPI_MspInit+0xec>)
 80038c6:	2240      	movs	r2, #64	; 0x40
 80038c8:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80038ca:	4b17      	ldr	r3, [pc, #92]	; (8003928 <HAL_SPI_MspInit+0xec>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80038d0:	4b15      	ldr	r3, [pc, #84]	; (8003928 <HAL_SPI_MspInit+0xec>)
 80038d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80038d6:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80038d8:	4b13      	ldr	r3, [pc, #76]	; (8003928 <HAL_SPI_MspInit+0xec>)
 80038da:	2200      	movs	r2, #0
 80038dc:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80038de:	4b12      	ldr	r3, [pc, #72]	; (8003928 <HAL_SPI_MspInit+0xec>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80038e4:	4b10      	ldr	r3, [pc, #64]	; (8003928 <HAL_SPI_MspInit+0xec>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80038ea:	4b0f      	ldr	r3, [pc, #60]	; (8003928 <HAL_SPI_MspInit+0xec>)
 80038ec:	2200      	movs	r2, #0
 80038ee:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80038f0:	4b0d      	ldr	r3, [pc, #52]	; (8003928 <HAL_SPI_MspInit+0xec>)
 80038f2:	2200      	movs	r2, #0
 80038f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80038f6:	480c      	ldr	r0, [pc, #48]	; (8003928 <HAL_SPI_MspInit+0xec>)
 80038f8:	f000 fbda 	bl	80040b0 <HAL_DMA_Init>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d001      	beq.n	8003906 <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 8003902:	f7ff fe49 	bl	8003598 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a07      	ldr	r2, [pc, #28]	; (8003928 <HAL_SPI_MspInit+0xec>)
 800390a:	649a      	str	r2, [r3, #72]	; 0x48
 800390c:	4a06      	ldr	r2, [pc, #24]	; (8003928 <HAL_SPI_MspInit+0xec>)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003912:	bf00      	nop
 8003914:	3728      	adds	r7, #40	; 0x28
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	40013000 	.word	0x40013000
 8003920:	40023800 	.word	0x40023800
 8003924:	40020000 	.word	0x40020000
 8003928:	200037d0 	.word	0x200037d0
 800392c:	40026458 	.word	0x40026458

08003930 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b08e      	sub	sp, #56	; 0x38
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003938:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800393c:	2200      	movs	r2, #0
 800393e:	601a      	str	r2, [r3, #0]
 8003940:	605a      	str	r2, [r3, #4]
 8003942:	609a      	str	r2, [r3, #8]
 8003944:	60da      	str	r2, [r3, #12]
 8003946:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a86      	ldr	r2, [pc, #536]	; (8003b68 <HAL_UART_MspInit+0x238>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d135      	bne.n	80039be <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003952:	2300      	movs	r3, #0
 8003954:	623b      	str	r3, [r7, #32]
 8003956:	4b85      	ldr	r3, [pc, #532]	; (8003b6c <HAL_UART_MspInit+0x23c>)
 8003958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800395a:	4a84      	ldr	r2, [pc, #528]	; (8003b6c <HAL_UART_MspInit+0x23c>)
 800395c:	f043 0310 	orr.w	r3, r3, #16
 8003960:	6453      	str	r3, [r2, #68]	; 0x44
 8003962:	4b82      	ldr	r3, [pc, #520]	; (8003b6c <HAL_UART_MspInit+0x23c>)
 8003964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003966:	f003 0310 	and.w	r3, r3, #16
 800396a:	623b      	str	r3, [r7, #32]
 800396c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800396e:	2300      	movs	r3, #0
 8003970:	61fb      	str	r3, [r7, #28]
 8003972:	4b7e      	ldr	r3, [pc, #504]	; (8003b6c <HAL_UART_MspInit+0x23c>)
 8003974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003976:	4a7d      	ldr	r2, [pc, #500]	; (8003b6c <HAL_UART_MspInit+0x23c>)
 8003978:	f043 0301 	orr.w	r3, r3, #1
 800397c:	6313      	str	r3, [r2, #48]	; 0x30
 800397e:	4b7b      	ldr	r3, [pc, #492]	; (8003b6c <HAL_UART_MspInit+0x23c>)
 8003980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	61fb      	str	r3, [r7, #28]
 8003988:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800398a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800398e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003990:	2302      	movs	r3, #2
 8003992:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003994:	2300      	movs	r3, #0
 8003996:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003998:	2303      	movs	r3, #3
 800399a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800399c:	2307      	movs	r3, #7
 800399e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039a4:	4619      	mov	r1, r3
 80039a6:	4872      	ldr	r0, [pc, #456]	; (8003b70 <HAL_UART_MspInit+0x240>)
 80039a8:	f000 ff84 	bl	80048b4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80039ac:	2200      	movs	r2, #0
 80039ae:	2100      	movs	r1, #0
 80039b0:	2025      	movs	r0, #37	; 0x25
 80039b2:	f000 fb46 	bl	8004042 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80039b6:	2025      	movs	r0, #37	; 0x25
 80039b8:	f000 fb5f 	bl	800407a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80039bc:	e0cf      	b.n	8003b5e <HAL_UART_MspInit+0x22e>
  else if(huart->Instance==USART2)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a6c      	ldr	r2, [pc, #432]	; (8003b74 <HAL_UART_MspInit+0x244>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d162      	bne.n	8003a8e <HAL_UART_MspInit+0x15e>
    __HAL_RCC_USART2_CLK_ENABLE();
 80039c8:	2300      	movs	r3, #0
 80039ca:	61bb      	str	r3, [r7, #24]
 80039cc:	4b67      	ldr	r3, [pc, #412]	; (8003b6c <HAL_UART_MspInit+0x23c>)
 80039ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d0:	4a66      	ldr	r2, [pc, #408]	; (8003b6c <HAL_UART_MspInit+0x23c>)
 80039d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039d6:	6413      	str	r3, [r2, #64]	; 0x40
 80039d8:	4b64      	ldr	r3, [pc, #400]	; (8003b6c <HAL_UART_MspInit+0x23c>)
 80039da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039e0:	61bb      	str	r3, [r7, #24]
 80039e2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039e4:	2300      	movs	r3, #0
 80039e6:	617b      	str	r3, [r7, #20]
 80039e8:	4b60      	ldr	r3, [pc, #384]	; (8003b6c <HAL_UART_MspInit+0x23c>)
 80039ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ec:	4a5f      	ldr	r2, [pc, #380]	; (8003b6c <HAL_UART_MspInit+0x23c>)
 80039ee:	f043 0301 	orr.w	r3, r3, #1
 80039f2:	6313      	str	r3, [r2, #48]	; 0x30
 80039f4:	4b5d      	ldr	r3, [pc, #372]	; (8003b6c <HAL_UART_MspInit+0x23c>)
 80039f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f8:	f003 0301 	and.w	r3, r3, #1
 80039fc:	617b      	str	r3, [r7, #20]
 80039fe:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003a00:	230c      	movs	r3, #12
 8003a02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a04:	2302      	movs	r3, #2
 8003a06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a0c:	2303      	movs	r3, #3
 8003a0e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003a10:	2307      	movs	r3, #7
 8003a12:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a18:	4619      	mov	r1, r3
 8003a1a:	4855      	ldr	r0, [pc, #340]	; (8003b70 <HAL_UART_MspInit+0x240>)
 8003a1c:	f000 ff4a 	bl	80048b4 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003a20:	4b55      	ldr	r3, [pc, #340]	; (8003b78 <HAL_UART_MspInit+0x248>)
 8003a22:	4a56      	ldr	r2, [pc, #344]	; (8003b7c <HAL_UART_MspInit+0x24c>)
 8003a24:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003a26:	4b54      	ldr	r3, [pc, #336]	; (8003b78 <HAL_UART_MspInit+0x248>)
 8003a28:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003a2c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003a2e:	4b52      	ldr	r3, [pc, #328]	; (8003b78 <HAL_UART_MspInit+0x248>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a34:	4b50      	ldr	r3, [pc, #320]	; (8003b78 <HAL_UART_MspInit+0x248>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003a3a:	4b4f      	ldr	r3, [pc, #316]	; (8003b78 <HAL_UART_MspInit+0x248>)
 8003a3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a40:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a42:	4b4d      	ldr	r3, [pc, #308]	; (8003b78 <HAL_UART_MspInit+0x248>)
 8003a44:	2200      	movs	r2, #0
 8003a46:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a48:	4b4b      	ldr	r3, [pc, #300]	; (8003b78 <HAL_UART_MspInit+0x248>)
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003a4e:	4b4a      	ldr	r3, [pc, #296]	; (8003b78 <HAL_UART_MspInit+0x248>)
 8003a50:	2200      	movs	r2, #0
 8003a52:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003a54:	4b48      	ldr	r3, [pc, #288]	; (8003b78 <HAL_UART_MspInit+0x248>)
 8003a56:	2200      	movs	r2, #0
 8003a58:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a5a:	4b47      	ldr	r3, [pc, #284]	; (8003b78 <HAL_UART_MspInit+0x248>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003a60:	4845      	ldr	r0, [pc, #276]	; (8003b78 <HAL_UART_MspInit+0x248>)
 8003a62:	f000 fb25 	bl	80040b0 <HAL_DMA_Init>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d001      	beq.n	8003a70 <HAL_UART_MspInit+0x140>
      Error_Handler();
 8003a6c:	f7ff fd94 	bl	8003598 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	4a41      	ldr	r2, [pc, #260]	; (8003b78 <HAL_UART_MspInit+0x248>)
 8003a74:	639a      	str	r2, [r3, #56]	; 0x38
 8003a76:	4a40      	ldr	r2, [pc, #256]	; (8003b78 <HAL_UART_MspInit+0x248>)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	2100      	movs	r1, #0
 8003a80:	2026      	movs	r0, #38	; 0x26
 8003a82:	f000 fade 	bl	8004042 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003a86:	2026      	movs	r0, #38	; 0x26
 8003a88:	f000 faf7 	bl	800407a <HAL_NVIC_EnableIRQ>
}
 8003a8c:	e067      	b.n	8003b5e <HAL_UART_MspInit+0x22e>
  else if(huart->Instance==USART3)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a3b      	ldr	r2, [pc, #236]	; (8003b80 <HAL_UART_MspInit+0x250>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d162      	bne.n	8003b5e <HAL_UART_MspInit+0x22e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003a98:	2300      	movs	r3, #0
 8003a9a:	613b      	str	r3, [r7, #16]
 8003a9c:	4b33      	ldr	r3, [pc, #204]	; (8003b6c <HAL_UART_MspInit+0x23c>)
 8003a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa0:	4a32      	ldr	r2, [pc, #200]	; (8003b6c <HAL_UART_MspInit+0x23c>)
 8003aa2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003aa6:	6413      	str	r3, [r2, #64]	; 0x40
 8003aa8:	4b30      	ldr	r3, [pc, #192]	; (8003b6c <HAL_UART_MspInit+0x23c>)
 8003aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ab0:	613b      	str	r3, [r7, #16]
 8003ab2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	60fb      	str	r3, [r7, #12]
 8003ab8:	4b2c      	ldr	r3, [pc, #176]	; (8003b6c <HAL_UART_MspInit+0x23c>)
 8003aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003abc:	4a2b      	ldr	r2, [pc, #172]	; (8003b6c <HAL_UART_MspInit+0x23c>)
 8003abe:	f043 0302 	orr.w	r3, r3, #2
 8003ac2:	6313      	str	r3, [r2, #48]	; 0x30
 8003ac4:	4b29      	ldr	r3, [pc, #164]	; (8003b6c <HAL_UART_MspInit+0x23c>)
 8003ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac8:	f003 0302 	and.w	r3, r3, #2
 8003acc:	60fb      	str	r3, [r7, #12]
 8003ace:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003ad0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003ad4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ad6:	2302      	movs	r3, #2
 8003ad8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ada:	2300      	movs	r3, #0
 8003adc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003ae2:	2307      	movs	r3, #7
 8003ae4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ae6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003aea:	4619      	mov	r1, r3
 8003aec:	4825      	ldr	r0, [pc, #148]	; (8003b84 <HAL_UART_MspInit+0x254>)
 8003aee:	f000 fee1 	bl	80048b4 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8003af2:	4b25      	ldr	r3, [pc, #148]	; (8003b88 <HAL_UART_MspInit+0x258>)
 8003af4:	4a25      	ldr	r2, [pc, #148]	; (8003b8c <HAL_UART_MspInit+0x25c>)
 8003af6:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8003af8:	4b23      	ldr	r3, [pc, #140]	; (8003b88 <HAL_UART_MspInit+0x258>)
 8003afa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003afe:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003b00:	4b21      	ldr	r3, [pc, #132]	; (8003b88 <HAL_UART_MspInit+0x258>)
 8003b02:	2200      	movs	r2, #0
 8003b04:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b06:	4b20      	ldr	r3, [pc, #128]	; (8003b88 <HAL_UART_MspInit+0x258>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003b0c:	4b1e      	ldr	r3, [pc, #120]	; (8003b88 <HAL_UART_MspInit+0x258>)
 8003b0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b12:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b14:	4b1c      	ldr	r3, [pc, #112]	; (8003b88 <HAL_UART_MspInit+0x258>)
 8003b16:	2200      	movs	r2, #0
 8003b18:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b1a:	4b1b      	ldr	r3, [pc, #108]	; (8003b88 <HAL_UART_MspInit+0x258>)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8003b20:	4b19      	ldr	r3, [pc, #100]	; (8003b88 <HAL_UART_MspInit+0x258>)
 8003b22:	2200      	movs	r2, #0
 8003b24:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003b26:	4b18      	ldr	r3, [pc, #96]	; (8003b88 <HAL_UART_MspInit+0x258>)
 8003b28:	2200      	movs	r2, #0
 8003b2a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003b2c:	4b16      	ldr	r3, [pc, #88]	; (8003b88 <HAL_UART_MspInit+0x258>)
 8003b2e:	2200      	movs	r2, #0
 8003b30:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003b32:	4815      	ldr	r0, [pc, #84]	; (8003b88 <HAL_UART_MspInit+0x258>)
 8003b34:	f000 fabc 	bl	80040b0 <HAL_DMA_Init>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d001      	beq.n	8003b42 <HAL_UART_MspInit+0x212>
      Error_Handler();
 8003b3e:	f7ff fd2b 	bl	8003598 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a10      	ldr	r2, [pc, #64]	; (8003b88 <HAL_UART_MspInit+0x258>)
 8003b46:	639a      	str	r2, [r3, #56]	; 0x38
 8003b48:	4a0f      	ldr	r2, [pc, #60]	; (8003b88 <HAL_UART_MspInit+0x258>)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003b4e:	2200      	movs	r2, #0
 8003b50:	2100      	movs	r1, #0
 8003b52:	2027      	movs	r0, #39	; 0x27
 8003b54:	f000 fa75 	bl	8004042 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003b58:	2027      	movs	r0, #39	; 0x27
 8003b5a:	f000 fa8e 	bl	800407a <HAL_NVIC_EnableIRQ>
}
 8003b5e:	bf00      	nop
 8003b60:	3738      	adds	r7, #56	; 0x38
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	40011000 	.word	0x40011000
 8003b6c:	40023800 	.word	0x40023800
 8003b70:	40020000 	.word	0x40020000
 8003b74:	40004400 	.word	0x40004400
 8003b78:	20002bac 	.word	0x20002bac
 8003b7c:	40026088 	.word	0x40026088
 8003b80:	40004800 	.word	0x40004800
 8003b84:	40020400 	.word	0x40020400
 8003b88:	20002cd8 	.word	0x20002cd8
 8003b8c:	40026028 	.word	0x40026028

08003b90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b90:	b480      	push	{r7}
 8003b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003b94:	e7fe      	b.n	8003b94 <NMI_Handler+0x4>

08003b96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b96:	b480      	push	{r7}
 8003b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b9a:	e7fe      	b.n	8003b9a <HardFault_Handler+0x4>

08003b9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ba0:	e7fe      	b.n	8003ba0 <MemManage_Handler+0x4>

08003ba2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ba2:	b480      	push	{r7}
 8003ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ba6:	e7fe      	b.n	8003ba6 <BusFault_Handler+0x4>

08003ba8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003bac:	e7fe      	b.n	8003bac <UsageFault_Handler+0x4>

08003bae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003bae:	b480      	push	{r7}
 8003bb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003bb2:	bf00      	nop
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr

08003bbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003bc0:	bf00      	nop
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr

08003bca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003bca:	b480      	push	{r7}
 8003bcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003bce:	bf00      	nop
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003bdc:	f000 f912 	bl	8003e04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003be0:	bf00      	nop
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003be8:	4802      	ldr	r0, [pc, #8]	; (8003bf4 <DMA1_Stream1_IRQHandler+0x10>)
 8003bea:	f000 fbf9 	bl	80043e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003bee:	bf00      	nop
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	20002cd8 	.word	0x20002cd8

08003bf8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003bfc:	4802      	ldr	r0, [pc, #8]	; (8003c08 <DMA1_Stream5_IRQHandler+0x10>)
 8003bfe:	f000 fbef 	bl	80043e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003c02:	bf00      	nop
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	20002bac 	.word	0x20002bac

08003c0c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8003c10:	2020      	movs	r0, #32
 8003c12:	f001 f81d 	bl	8004c50 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8003c16:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003c1a:	f001 f819 	bl	8004c50 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8003c1e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003c22:	f001 f815 	bl	8004c50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003c26:	bf00      	nop
 8003c28:	bd80      	pop	{r7, pc}
	...

08003c2c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003c30:	4802      	ldr	r0, [pc, #8]	; (8003c3c <USART1_IRQHandler+0x10>)
 8003c32:	f003 fe61 	bl	80078f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003c36:	bf00      	nop
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	20002e50 	.word	0x20002e50

08003c40 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003c44:	4802      	ldr	r0, [pc, #8]	; (8003c50 <USART2_IRQHandler+0x10>)
 8003c46:	f003 fe57 	bl	80078f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003c4a:	bf00      	nop
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	20003780 	.word	0x20003780

08003c54 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003c58:	4802      	ldr	r0, [pc, #8]	; (8003c64 <USART3_IRQHandler+0x10>)
 8003c5a:	f003 fe4d 	bl	80078f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003c5e:	bf00      	nop
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	20002d38 	.word	0x20002d38

08003c68 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003c6c:	4802      	ldr	r0, [pc, #8]	; (8003c78 <DMA2_Stream3_IRQHandler+0x10>)
 8003c6e:	f000 fbb7 	bl	80043e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8003c72:	bf00      	nop
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	200037d0 	.word	0x200037d0

08003c7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b086      	sub	sp, #24
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c84:	4a14      	ldr	r2, [pc, #80]	; (8003cd8 <_sbrk+0x5c>)
 8003c86:	4b15      	ldr	r3, [pc, #84]	; (8003cdc <_sbrk+0x60>)
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c90:	4b13      	ldr	r3, [pc, #76]	; (8003ce0 <_sbrk+0x64>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d102      	bne.n	8003c9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c98:	4b11      	ldr	r3, [pc, #68]	; (8003ce0 <_sbrk+0x64>)
 8003c9a:	4a12      	ldr	r2, [pc, #72]	; (8003ce4 <_sbrk+0x68>)
 8003c9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c9e:	4b10      	ldr	r3, [pc, #64]	; (8003ce0 <_sbrk+0x64>)
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	693a      	ldr	r2, [r7, #16]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d207      	bcs.n	8003cbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003cac:	f004 fe68 	bl	8008980 <__errno>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	220c      	movs	r2, #12
 8003cb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8003cba:	e009      	b.n	8003cd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003cbc:	4b08      	ldr	r3, [pc, #32]	; (8003ce0 <_sbrk+0x64>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003cc2:	4b07      	ldr	r3, [pc, #28]	; (8003ce0 <_sbrk+0x64>)
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4413      	add	r3, r2
 8003cca:	4a05      	ldr	r2, [pc, #20]	; (8003ce0 <_sbrk+0x64>)
 8003ccc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003cce:	68fb      	ldr	r3, [r7, #12]
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3718      	adds	r7, #24
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	20020000 	.word	0x20020000
 8003cdc:	00000400 	.word	0x00000400
 8003ce0:	20000a60 	.word	0x20000a60
 8003ce4:	200038f8 	.word	0x200038f8

08003ce8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003cec:	4b06      	ldr	r3, [pc, #24]	; (8003d08 <SystemInit+0x20>)
 8003cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cf2:	4a05      	ldr	r2, [pc, #20]	; (8003d08 <SystemInit+0x20>)
 8003cf4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003cf8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003cfc:	bf00      	nop
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
 8003d06:	bf00      	nop
 8003d08:	e000ed00 	.word	0xe000ed00

08003d0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003d0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d44 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003d10:	480d      	ldr	r0, [pc, #52]	; (8003d48 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003d12:	490e      	ldr	r1, [pc, #56]	; (8003d4c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003d14:	4a0e      	ldr	r2, [pc, #56]	; (8003d50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003d16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d18:	e002      	b.n	8003d20 <LoopCopyDataInit>

08003d1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d1e:	3304      	adds	r3, #4

08003d20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d24:	d3f9      	bcc.n	8003d1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d26:	4a0b      	ldr	r2, [pc, #44]	; (8003d54 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003d28:	4c0b      	ldr	r4, [pc, #44]	; (8003d58 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003d2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d2c:	e001      	b.n	8003d32 <LoopFillZerobss>

08003d2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d30:	3204      	adds	r2, #4

08003d32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d34:	d3fb      	bcc.n	8003d2e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003d36:	f7ff ffd7 	bl	8003ce8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003d3a:	f004 fe27 	bl	800898c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d3e:	f7fe fb13 	bl	8002368 <main>
  bx  lr    
 8003d42:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003d44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003d48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d4c:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8003d50:	0800edc4 	.word	0x0800edc4
  ldr r2, =_sbss
 8003d54:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8003d58:	200038f8 	.word	0x200038f8

08003d5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003d5c:	e7fe      	b.n	8003d5c <ADC_IRQHandler>
	...

08003d60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003d64:	4b0e      	ldr	r3, [pc, #56]	; (8003da0 <HAL_Init+0x40>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a0d      	ldr	r2, [pc, #52]	; (8003da0 <HAL_Init+0x40>)
 8003d6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003d70:	4b0b      	ldr	r3, [pc, #44]	; (8003da0 <HAL_Init+0x40>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a0a      	ldr	r2, [pc, #40]	; (8003da0 <HAL_Init+0x40>)
 8003d76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d7c:	4b08      	ldr	r3, [pc, #32]	; (8003da0 <HAL_Init+0x40>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a07      	ldr	r2, [pc, #28]	; (8003da0 <HAL_Init+0x40>)
 8003d82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d88:	2003      	movs	r0, #3
 8003d8a:	f000 f94f 	bl	800402c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003d8e:	2000      	movs	r0, #0
 8003d90:	f000 f808 	bl	8003da4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003d94:	f7ff fccc 	bl	8003730 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	40023c00 	.word	0x40023c00

08003da4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003dac:	4b12      	ldr	r3, [pc, #72]	; (8003df8 <HAL_InitTick+0x54>)
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	4b12      	ldr	r3, [pc, #72]	; (8003dfc <HAL_InitTick+0x58>)
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	4619      	mov	r1, r3
 8003db6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003dba:	fbb3 f3f1 	udiv	r3, r3, r1
 8003dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f000 f967 	bl	8004096 <HAL_SYSTICK_Config>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d001      	beq.n	8003dd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e00e      	b.n	8003df0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2b0f      	cmp	r3, #15
 8003dd6:	d80a      	bhi.n	8003dee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003dd8:	2200      	movs	r2, #0
 8003dda:	6879      	ldr	r1, [r7, #4]
 8003ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8003de0:	f000 f92f 	bl	8004042 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003de4:	4a06      	ldr	r2, [pc, #24]	; (8003e00 <HAL_InitTick+0x5c>)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003dea:	2300      	movs	r3, #0
 8003dec:	e000      	b.n	8003df0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3708      	adds	r7, #8
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	2000000c 	.word	0x2000000c
 8003dfc:	20000014 	.word	0x20000014
 8003e00:	20000010 	.word	0x20000010

08003e04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e04:	b480      	push	{r7}
 8003e06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003e08:	4b06      	ldr	r3, [pc, #24]	; (8003e24 <HAL_IncTick+0x20>)
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	4b06      	ldr	r3, [pc, #24]	; (8003e28 <HAL_IncTick+0x24>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4413      	add	r3, r2
 8003e14:	4a04      	ldr	r2, [pc, #16]	; (8003e28 <HAL_IncTick+0x24>)
 8003e16:	6013      	str	r3, [r2, #0]
}
 8003e18:	bf00      	nop
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop
 8003e24:	20000014 	.word	0x20000014
 8003e28:	200038e4 	.word	0x200038e4

08003e2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	af00      	add	r7, sp, #0
  return uwTick;
 8003e30:	4b03      	ldr	r3, [pc, #12]	; (8003e40 <HAL_GetTick+0x14>)
 8003e32:	681b      	ldr	r3, [r3, #0]
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	200038e4 	.word	0x200038e4

08003e44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e4c:	f7ff ffee 	bl	8003e2c <HAL_GetTick>
 8003e50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e5c:	d005      	beq.n	8003e6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e5e:	4b0a      	ldr	r3, [pc, #40]	; (8003e88 <HAL_Delay+0x44>)
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	461a      	mov	r2, r3
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	4413      	add	r3, r2
 8003e68:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003e6a:	bf00      	nop
 8003e6c:	f7ff ffde 	bl	8003e2c <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	68fa      	ldr	r2, [r7, #12]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d8f7      	bhi.n	8003e6c <HAL_Delay+0x28>
  {
  }
}
 8003e7c:	bf00      	nop
 8003e7e:	bf00      	nop
 8003e80:	3710      	adds	r7, #16
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	20000014 	.word	0x20000014

08003e8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b085      	sub	sp, #20
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f003 0307 	and.w	r3, r3, #7
 8003e9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e9c:	4b0c      	ldr	r3, [pc, #48]	; (8003ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ea2:	68ba      	ldr	r2, [r7, #8]
 8003ea4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003eb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003eb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ebc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ebe:	4a04      	ldr	r2, [pc, #16]	; (8003ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	60d3      	str	r3, [r2, #12]
}
 8003ec4:	bf00      	nop
 8003ec6:	3714      	adds	r7, #20
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr
 8003ed0:	e000ed00 	.word	0xe000ed00

08003ed4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ed8:	4b04      	ldr	r3, [pc, #16]	; (8003eec <__NVIC_GetPriorityGrouping+0x18>)
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	0a1b      	lsrs	r3, r3, #8
 8003ede:	f003 0307 	and.w	r3, r3, #7
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr
 8003eec:	e000ed00 	.word	0xe000ed00

08003ef0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	db0b      	blt.n	8003f1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f02:	79fb      	ldrb	r3, [r7, #7]
 8003f04:	f003 021f 	and.w	r2, r3, #31
 8003f08:	4907      	ldr	r1, [pc, #28]	; (8003f28 <__NVIC_EnableIRQ+0x38>)
 8003f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f0e:	095b      	lsrs	r3, r3, #5
 8003f10:	2001      	movs	r0, #1
 8003f12:	fa00 f202 	lsl.w	r2, r0, r2
 8003f16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003f1a:	bf00      	nop
 8003f1c:	370c      	adds	r7, #12
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	e000e100 	.word	0xe000e100

08003f2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	4603      	mov	r3, r0
 8003f34:	6039      	str	r1, [r7, #0]
 8003f36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	db0a      	blt.n	8003f56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	b2da      	uxtb	r2, r3
 8003f44:	490c      	ldr	r1, [pc, #48]	; (8003f78 <__NVIC_SetPriority+0x4c>)
 8003f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f4a:	0112      	lsls	r2, r2, #4
 8003f4c:	b2d2      	uxtb	r2, r2
 8003f4e:	440b      	add	r3, r1
 8003f50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f54:	e00a      	b.n	8003f6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	b2da      	uxtb	r2, r3
 8003f5a:	4908      	ldr	r1, [pc, #32]	; (8003f7c <__NVIC_SetPriority+0x50>)
 8003f5c:	79fb      	ldrb	r3, [r7, #7]
 8003f5e:	f003 030f 	and.w	r3, r3, #15
 8003f62:	3b04      	subs	r3, #4
 8003f64:	0112      	lsls	r2, r2, #4
 8003f66:	b2d2      	uxtb	r2, r2
 8003f68:	440b      	add	r3, r1
 8003f6a:	761a      	strb	r2, [r3, #24]
}
 8003f6c:	bf00      	nop
 8003f6e:	370c      	adds	r7, #12
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr
 8003f78:	e000e100 	.word	0xe000e100
 8003f7c:	e000ed00 	.word	0xe000ed00

08003f80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b089      	sub	sp, #36	; 0x24
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f003 0307 	and.w	r3, r3, #7
 8003f92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	f1c3 0307 	rsb	r3, r3, #7
 8003f9a:	2b04      	cmp	r3, #4
 8003f9c:	bf28      	it	cs
 8003f9e:	2304      	movcs	r3, #4
 8003fa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	3304      	adds	r3, #4
 8003fa6:	2b06      	cmp	r3, #6
 8003fa8:	d902      	bls.n	8003fb0 <NVIC_EncodePriority+0x30>
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	3b03      	subs	r3, #3
 8003fae:	e000      	b.n	8003fb2 <NVIC_EncodePriority+0x32>
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	fa02 f303 	lsl.w	r3, r2, r3
 8003fbe:	43da      	mvns	r2, r3
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	401a      	ands	r2, r3
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fc8:	f04f 31ff 	mov.w	r1, #4294967295
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	fa01 f303 	lsl.w	r3, r1, r3
 8003fd2:	43d9      	mvns	r1, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fd8:	4313      	orrs	r3, r2
         );
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3724      	adds	r7, #36	; 0x24
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr
	...

08003fe8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b082      	sub	sp, #8
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	3b01      	subs	r3, #1
 8003ff4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ff8:	d301      	bcc.n	8003ffe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e00f      	b.n	800401e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ffe:	4a0a      	ldr	r2, [pc, #40]	; (8004028 <SysTick_Config+0x40>)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	3b01      	subs	r3, #1
 8004004:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004006:	210f      	movs	r1, #15
 8004008:	f04f 30ff 	mov.w	r0, #4294967295
 800400c:	f7ff ff8e 	bl	8003f2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004010:	4b05      	ldr	r3, [pc, #20]	; (8004028 <SysTick_Config+0x40>)
 8004012:	2200      	movs	r2, #0
 8004014:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004016:	4b04      	ldr	r3, [pc, #16]	; (8004028 <SysTick_Config+0x40>)
 8004018:	2207      	movs	r2, #7
 800401a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	3708      	adds	r7, #8
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	e000e010 	.word	0xe000e010

0800402c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f7ff ff29 	bl	8003e8c <__NVIC_SetPriorityGrouping>
}
 800403a:	bf00      	nop
 800403c:	3708      	adds	r7, #8
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}

08004042 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004042:	b580      	push	{r7, lr}
 8004044:	b086      	sub	sp, #24
 8004046:	af00      	add	r7, sp, #0
 8004048:	4603      	mov	r3, r0
 800404a:	60b9      	str	r1, [r7, #8]
 800404c:	607a      	str	r2, [r7, #4]
 800404e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004050:	2300      	movs	r3, #0
 8004052:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004054:	f7ff ff3e 	bl	8003ed4 <__NVIC_GetPriorityGrouping>
 8004058:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	68b9      	ldr	r1, [r7, #8]
 800405e:	6978      	ldr	r0, [r7, #20]
 8004060:	f7ff ff8e 	bl	8003f80 <NVIC_EncodePriority>
 8004064:	4602      	mov	r2, r0
 8004066:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800406a:	4611      	mov	r1, r2
 800406c:	4618      	mov	r0, r3
 800406e:	f7ff ff5d 	bl	8003f2c <__NVIC_SetPriority>
}
 8004072:	bf00      	nop
 8004074:	3718      	adds	r7, #24
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}

0800407a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800407a:	b580      	push	{r7, lr}
 800407c:	b082      	sub	sp, #8
 800407e:	af00      	add	r7, sp, #0
 8004080:	4603      	mov	r3, r0
 8004082:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004088:	4618      	mov	r0, r3
 800408a:	f7ff ff31 	bl	8003ef0 <__NVIC_EnableIRQ>
}
 800408e:	bf00      	nop
 8004090:	3708      	adds	r7, #8
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}

08004096 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004096:	b580      	push	{r7, lr}
 8004098:	b082      	sub	sp, #8
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f7ff ffa2 	bl	8003fe8 <SysTick_Config>
 80040a4:	4603      	mov	r3, r0
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3708      	adds	r7, #8
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
	...

080040b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b086      	sub	sp, #24
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80040b8:	2300      	movs	r3, #0
 80040ba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80040bc:	f7ff feb6 	bl	8003e2c <HAL_GetTick>
 80040c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d101      	bne.n	80040cc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e099      	b.n	8004200 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2202      	movs	r2, #2
 80040d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f022 0201 	bic.w	r2, r2, #1
 80040ea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040ec:	e00f      	b.n	800410e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80040ee:	f7ff fe9d 	bl	8003e2c <HAL_GetTick>
 80040f2:	4602      	mov	r2, r0
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	1ad3      	subs	r3, r2, r3
 80040f8:	2b05      	cmp	r3, #5
 80040fa:	d908      	bls.n	800410e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2220      	movs	r2, #32
 8004100:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2203      	movs	r2, #3
 8004106:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e078      	b.n	8004200 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0301 	and.w	r3, r3, #1
 8004118:	2b00      	cmp	r3, #0
 800411a:	d1e8      	bne.n	80040ee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004124:	697a      	ldr	r2, [r7, #20]
 8004126:	4b38      	ldr	r3, [pc, #224]	; (8004208 <HAL_DMA_Init+0x158>)
 8004128:	4013      	ands	r3, r2
 800412a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685a      	ldr	r2, [r3, #4]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800413a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	691b      	ldr	r3, [r3, #16]
 8004140:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004146:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	699b      	ldr	r3, [r3, #24]
 800414c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004152:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a1b      	ldr	r3, [r3, #32]
 8004158:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800415a:	697a      	ldr	r2, [r7, #20]
 800415c:	4313      	orrs	r3, r2
 800415e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004164:	2b04      	cmp	r3, #4
 8004166:	d107      	bne.n	8004178 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004170:	4313      	orrs	r3, r2
 8004172:	697a      	ldr	r2, [r7, #20]
 8004174:	4313      	orrs	r3, r2
 8004176:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	697a      	ldr	r2, [r7, #20]
 800417e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	695b      	ldr	r3, [r3, #20]
 8004186:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	f023 0307 	bic.w	r3, r3, #7
 800418e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004194:	697a      	ldr	r2, [r7, #20]
 8004196:	4313      	orrs	r3, r2
 8004198:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419e:	2b04      	cmp	r3, #4
 80041a0:	d117      	bne.n	80041d2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a6:	697a      	ldr	r2, [r7, #20]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d00e      	beq.n	80041d2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f000 fb01 	bl	80047bc <DMA_CheckFifoParam>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d008      	beq.n	80041d2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2240      	movs	r2, #64	; 0x40
 80041c4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2201      	movs	r2, #1
 80041ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80041ce:	2301      	movs	r3, #1
 80041d0:	e016      	b.n	8004200 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	697a      	ldr	r2, [r7, #20]
 80041d8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f000 fab8 	bl	8004750 <DMA_CalcBaseAndBitshift>
 80041e0:	4603      	mov	r3, r0
 80041e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041e8:	223f      	movs	r2, #63	; 0x3f
 80041ea:	409a      	lsls	r2, r3
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2201      	movs	r2, #1
 80041fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80041fe:	2300      	movs	r3, #0
}
 8004200:	4618      	mov	r0, r3
 8004202:	3718      	adds	r7, #24
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}
 8004208:	f010803f 	.word	0xf010803f

0800420c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b086      	sub	sp, #24
 8004210:	af00      	add	r7, sp, #0
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	60b9      	str	r1, [r7, #8]
 8004216:	607a      	str	r2, [r7, #4]
 8004218:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800421a:	2300      	movs	r3, #0
 800421c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004222:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800422a:	2b01      	cmp	r3, #1
 800422c:	d101      	bne.n	8004232 <HAL_DMA_Start_IT+0x26>
 800422e:	2302      	movs	r3, #2
 8004230:	e040      	b.n	80042b4 <HAL_DMA_Start_IT+0xa8>
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2201      	movs	r2, #1
 8004236:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004240:	b2db      	uxtb	r3, r3
 8004242:	2b01      	cmp	r3, #1
 8004244:	d12f      	bne.n	80042a6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2202      	movs	r2, #2
 800424a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2200      	movs	r2, #0
 8004252:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	68b9      	ldr	r1, [r7, #8]
 800425a:	68f8      	ldr	r0, [r7, #12]
 800425c:	f000 fa4a 	bl	80046f4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004264:	223f      	movs	r2, #63	; 0x3f
 8004266:	409a      	lsls	r2, r3
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f042 0216 	orr.w	r2, r2, #22
 800427a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004280:	2b00      	cmp	r3, #0
 8004282:	d007      	beq.n	8004294 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f042 0208 	orr.w	r2, r2, #8
 8004292:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f042 0201 	orr.w	r2, r2, #1
 80042a2:	601a      	str	r2, [r3, #0]
 80042a4:	e005      	b.n	80042b2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80042ae:	2302      	movs	r3, #2
 80042b0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80042b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3718      	adds	r7, #24
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b084      	sub	sp, #16
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042c8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80042ca:	f7ff fdaf 	bl	8003e2c <HAL_GetTick>
 80042ce:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	2b02      	cmp	r3, #2
 80042da:	d008      	beq.n	80042ee <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2280      	movs	r2, #128	; 0x80
 80042e0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e052      	b.n	8004394 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f022 0216 	bic.w	r2, r2, #22
 80042fc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	695a      	ldr	r2, [r3, #20]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800430c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004312:	2b00      	cmp	r3, #0
 8004314:	d103      	bne.n	800431e <HAL_DMA_Abort+0x62>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800431a:	2b00      	cmp	r3, #0
 800431c:	d007      	beq.n	800432e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f022 0208 	bic.w	r2, r2, #8
 800432c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f022 0201 	bic.w	r2, r2, #1
 800433c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800433e:	e013      	b.n	8004368 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004340:	f7ff fd74 	bl	8003e2c <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	2b05      	cmp	r3, #5
 800434c:	d90c      	bls.n	8004368 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2220      	movs	r2, #32
 8004352:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2203      	movs	r2, #3
 8004358:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2200      	movs	r2, #0
 8004360:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004364:	2303      	movs	r3, #3
 8004366:	e015      	b.n	8004394 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0301 	and.w	r3, r3, #1
 8004372:	2b00      	cmp	r3, #0
 8004374:	d1e4      	bne.n	8004340 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800437a:	223f      	movs	r2, #63	; 0x3f
 800437c:	409a      	lsls	r2, r3
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2201      	movs	r2, #1
 8004386:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004392:	2300      	movs	r3, #0
}
 8004394:	4618      	mov	r0, r3
 8004396:	3710      	adds	r7, #16
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d004      	beq.n	80043ba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2280      	movs	r2, #128	; 0x80
 80043b4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e00c      	b.n	80043d4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2205      	movs	r2, #5
 80043be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f022 0201 	bic.w	r2, r2, #1
 80043d0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80043d2:	2300      	movs	r3, #0
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	370c      	adds	r7, #12
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr

080043e0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b086      	sub	sp, #24
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80043e8:	2300      	movs	r3, #0
 80043ea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80043ec:	4b92      	ldr	r3, [pc, #584]	; (8004638 <HAL_DMA_IRQHandler+0x258>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a92      	ldr	r2, [pc, #584]	; (800463c <HAL_DMA_IRQHandler+0x25c>)
 80043f2:	fba2 2303 	umull	r2, r3, r2, r3
 80043f6:	0a9b      	lsrs	r3, r3, #10
 80043f8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043fe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800440a:	2208      	movs	r2, #8
 800440c:	409a      	lsls	r2, r3
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	4013      	ands	r3, r2
 8004412:	2b00      	cmp	r3, #0
 8004414:	d01a      	beq.n	800444c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0304 	and.w	r3, r3, #4
 8004420:	2b00      	cmp	r3, #0
 8004422:	d013      	beq.n	800444c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f022 0204 	bic.w	r2, r2, #4
 8004432:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004438:	2208      	movs	r2, #8
 800443a:	409a      	lsls	r2, r3
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004444:	f043 0201 	orr.w	r2, r3, #1
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004450:	2201      	movs	r2, #1
 8004452:	409a      	lsls	r2, r3
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	4013      	ands	r3, r2
 8004458:	2b00      	cmp	r3, #0
 800445a:	d012      	beq.n	8004482 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	695b      	ldr	r3, [r3, #20]
 8004462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004466:	2b00      	cmp	r3, #0
 8004468:	d00b      	beq.n	8004482 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800446e:	2201      	movs	r2, #1
 8004470:	409a      	lsls	r2, r3
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800447a:	f043 0202 	orr.w	r2, r3, #2
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004486:	2204      	movs	r2, #4
 8004488:	409a      	lsls	r2, r3
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	4013      	ands	r3, r2
 800448e:	2b00      	cmp	r3, #0
 8004490:	d012      	beq.n	80044b8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0302 	and.w	r3, r3, #2
 800449c:	2b00      	cmp	r3, #0
 800449e:	d00b      	beq.n	80044b8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044a4:	2204      	movs	r2, #4
 80044a6:	409a      	lsls	r2, r3
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044b0:	f043 0204 	orr.w	r2, r3, #4
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044bc:	2210      	movs	r2, #16
 80044be:	409a      	lsls	r2, r3
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	4013      	ands	r3, r2
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d043      	beq.n	8004550 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 0308 	and.w	r3, r3, #8
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d03c      	beq.n	8004550 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044da:	2210      	movs	r2, #16
 80044dc:	409a      	lsls	r2, r3
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d018      	beq.n	8004522 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d108      	bne.n	8004510 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004502:	2b00      	cmp	r3, #0
 8004504:	d024      	beq.n	8004550 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	4798      	blx	r3
 800450e:	e01f      	b.n	8004550 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004514:	2b00      	cmp	r3, #0
 8004516:	d01b      	beq.n	8004550 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	4798      	blx	r3
 8004520:	e016      	b.n	8004550 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800452c:	2b00      	cmp	r3, #0
 800452e:	d107      	bne.n	8004540 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f022 0208 	bic.w	r2, r2, #8
 800453e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004544:	2b00      	cmp	r3, #0
 8004546:	d003      	beq.n	8004550 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004554:	2220      	movs	r2, #32
 8004556:	409a      	lsls	r2, r3
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	4013      	ands	r3, r2
 800455c:	2b00      	cmp	r3, #0
 800455e:	f000 808e 	beq.w	800467e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0310 	and.w	r3, r3, #16
 800456c:	2b00      	cmp	r3, #0
 800456e:	f000 8086 	beq.w	800467e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004576:	2220      	movs	r2, #32
 8004578:	409a      	lsls	r2, r3
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004584:	b2db      	uxtb	r3, r3
 8004586:	2b05      	cmp	r3, #5
 8004588:	d136      	bne.n	80045f8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f022 0216 	bic.w	r2, r2, #22
 8004598:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	695a      	ldr	r2, [r3, #20]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045a8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d103      	bne.n	80045ba <HAL_DMA_IRQHandler+0x1da>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d007      	beq.n	80045ca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f022 0208 	bic.w	r2, r2, #8
 80045c8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045ce:	223f      	movs	r2, #63	; 0x3f
 80045d0:	409a      	lsls	r2, r3
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2201      	movs	r2, #1
 80045da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d07d      	beq.n	80046ea <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	4798      	blx	r3
        }
        return;
 80045f6:	e078      	b.n	80046ea <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d01c      	beq.n	8004640 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d108      	bne.n	8004626 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004618:	2b00      	cmp	r3, #0
 800461a:	d030      	beq.n	800467e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	4798      	blx	r3
 8004624:	e02b      	b.n	800467e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800462a:	2b00      	cmp	r3, #0
 800462c:	d027      	beq.n	800467e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	4798      	blx	r3
 8004636:	e022      	b.n	800467e <HAL_DMA_IRQHandler+0x29e>
 8004638:	2000000c 	.word	0x2000000c
 800463c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800464a:	2b00      	cmp	r3, #0
 800464c:	d10f      	bne.n	800466e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f022 0210 	bic.w	r2, r2, #16
 800465c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2201      	movs	r2, #1
 8004662:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004672:	2b00      	cmp	r3, #0
 8004674:	d003      	beq.n	800467e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004682:	2b00      	cmp	r3, #0
 8004684:	d032      	beq.n	80046ec <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800468a:	f003 0301 	and.w	r3, r3, #1
 800468e:	2b00      	cmp	r3, #0
 8004690:	d022      	beq.n	80046d8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2205      	movs	r2, #5
 8004696:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f022 0201 	bic.w	r2, r2, #1
 80046a8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	3301      	adds	r3, #1
 80046ae:	60bb      	str	r3, [r7, #8]
 80046b0:	697a      	ldr	r2, [r7, #20]
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d307      	bcc.n	80046c6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0301 	and.w	r3, r3, #1
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d1f2      	bne.n	80046aa <HAL_DMA_IRQHandler+0x2ca>
 80046c4:	e000      	b.n	80046c8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80046c6:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d005      	beq.n	80046ec <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	4798      	blx	r3
 80046e8:	e000      	b.n	80046ec <HAL_DMA_IRQHandler+0x30c>
        return;
 80046ea:	bf00      	nop
    }
  }
}
 80046ec:	3718      	adds	r7, #24
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop

080046f4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b085      	sub	sp, #20
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	60b9      	str	r1, [r7, #8]
 80046fe:	607a      	str	r2, [r7, #4]
 8004700:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004710:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	683a      	ldr	r2, [r7, #0]
 8004718:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	2b40      	cmp	r3, #64	; 0x40
 8004720:	d108      	bne.n	8004734 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	68ba      	ldr	r2, [r7, #8]
 8004730:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004732:	e007      	b.n	8004744 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68ba      	ldr	r2, [r7, #8]
 800473a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	60da      	str	r2, [r3, #12]
}
 8004744:	bf00      	nop
 8004746:	3714      	adds	r7, #20
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004750:	b480      	push	{r7}
 8004752:	b085      	sub	sp, #20
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	b2db      	uxtb	r3, r3
 800475e:	3b10      	subs	r3, #16
 8004760:	4a14      	ldr	r2, [pc, #80]	; (80047b4 <DMA_CalcBaseAndBitshift+0x64>)
 8004762:	fba2 2303 	umull	r2, r3, r2, r3
 8004766:	091b      	lsrs	r3, r3, #4
 8004768:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800476a:	4a13      	ldr	r2, [pc, #76]	; (80047b8 <DMA_CalcBaseAndBitshift+0x68>)
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	4413      	add	r3, r2
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	461a      	mov	r2, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2b03      	cmp	r3, #3
 800477c:	d909      	bls.n	8004792 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004786:	f023 0303 	bic.w	r3, r3, #3
 800478a:	1d1a      	adds	r2, r3, #4
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	659a      	str	r2, [r3, #88]	; 0x58
 8004790:	e007      	b.n	80047a2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800479a:	f023 0303 	bic.w	r3, r3, #3
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3714      	adds	r7, #20
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr
 80047b2:	bf00      	nop
 80047b4:	aaaaaaab 	.word	0xaaaaaaab
 80047b8:	0800e8f8 	.word	0x0800e8f8

080047bc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80047bc:	b480      	push	{r7}
 80047be:	b085      	sub	sp, #20
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047c4:	2300      	movs	r3, #0
 80047c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047cc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	699b      	ldr	r3, [r3, #24]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d11f      	bne.n	8004816 <DMA_CheckFifoParam+0x5a>
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	2b03      	cmp	r3, #3
 80047da:	d856      	bhi.n	800488a <DMA_CheckFifoParam+0xce>
 80047dc:	a201      	add	r2, pc, #4	; (adr r2, 80047e4 <DMA_CheckFifoParam+0x28>)
 80047de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047e2:	bf00      	nop
 80047e4:	080047f5 	.word	0x080047f5
 80047e8:	08004807 	.word	0x08004807
 80047ec:	080047f5 	.word	0x080047f5
 80047f0:	0800488b 	.word	0x0800488b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d046      	beq.n	800488e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004804:	e043      	b.n	800488e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800480e:	d140      	bne.n	8004892 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004814:	e03d      	b.n	8004892 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	699b      	ldr	r3, [r3, #24]
 800481a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800481e:	d121      	bne.n	8004864 <DMA_CheckFifoParam+0xa8>
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	2b03      	cmp	r3, #3
 8004824:	d837      	bhi.n	8004896 <DMA_CheckFifoParam+0xda>
 8004826:	a201      	add	r2, pc, #4	; (adr r2, 800482c <DMA_CheckFifoParam+0x70>)
 8004828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800482c:	0800483d 	.word	0x0800483d
 8004830:	08004843 	.word	0x08004843
 8004834:	0800483d 	.word	0x0800483d
 8004838:	08004855 	.word	0x08004855
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	73fb      	strb	r3, [r7, #15]
      break;
 8004840:	e030      	b.n	80048a4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004846:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d025      	beq.n	800489a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004852:	e022      	b.n	800489a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004858:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800485c:	d11f      	bne.n	800489e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004862:	e01c      	b.n	800489e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	2b02      	cmp	r3, #2
 8004868:	d903      	bls.n	8004872 <DMA_CheckFifoParam+0xb6>
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	2b03      	cmp	r3, #3
 800486e:	d003      	beq.n	8004878 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004870:	e018      	b.n	80048a4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	73fb      	strb	r3, [r7, #15]
      break;
 8004876:	e015      	b.n	80048a4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800487c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004880:	2b00      	cmp	r3, #0
 8004882:	d00e      	beq.n	80048a2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	73fb      	strb	r3, [r7, #15]
      break;
 8004888:	e00b      	b.n	80048a2 <DMA_CheckFifoParam+0xe6>
      break;
 800488a:	bf00      	nop
 800488c:	e00a      	b.n	80048a4 <DMA_CheckFifoParam+0xe8>
      break;
 800488e:	bf00      	nop
 8004890:	e008      	b.n	80048a4 <DMA_CheckFifoParam+0xe8>
      break;
 8004892:	bf00      	nop
 8004894:	e006      	b.n	80048a4 <DMA_CheckFifoParam+0xe8>
      break;
 8004896:	bf00      	nop
 8004898:	e004      	b.n	80048a4 <DMA_CheckFifoParam+0xe8>
      break;
 800489a:	bf00      	nop
 800489c:	e002      	b.n	80048a4 <DMA_CheckFifoParam+0xe8>
      break;   
 800489e:	bf00      	nop
 80048a0:	e000      	b.n	80048a4 <DMA_CheckFifoParam+0xe8>
      break;
 80048a2:	bf00      	nop
    }
  } 
  
  return status; 
 80048a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3714      	adds	r7, #20
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop

080048b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b089      	sub	sp, #36	; 0x24
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80048be:	2300      	movs	r3, #0
 80048c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80048c2:	2300      	movs	r3, #0
 80048c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80048c6:	2300      	movs	r3, #0
 80048c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80048ca:	2300      	movs	r3, #0
 80048cc:	61fb      	str	r3, [r7, #28]
 80048ce:	e16b      	b.n	8004ba8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80048d0:	2201      	movs	r2, #1
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	fa02 f303 	lsl.w	r3, r2, r3
 80048d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	697a      	ldr	r2, [r7, #20]
 80048e0:	4013      	ands	r3, r2
 80048e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80048e4:	693a      	ldr	r2, [r7, #16]
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	429a      	cmp	r2, r3
 80048ea:	f040 815a 	bne.w	8004ba2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	f003 0303 	and.w	r3, r3, #3
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d005      	beq.n	8004906 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004902:	2b02      	cmp	r3, #2
 8004904:	d130      	bne.n	8004968 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	005b      	lsls	r3, r3, #1
 8004910:	2203      	movs	r2, #3
 8004912:	fa02 f303 	lsl.w	r3, r2, r3
 8004916:	43db      	mvns	r3, r3
 8004918:	69ba      	ldr	r2, [r7, #24]
 800491a:	4013      	ands	r3, r2
 800491c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	68da      	ldr	r2, [r3, #12]
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	005b      	lsls	r3, r3, #1
 8004926:	fa02 f303 	lsl.w	r3, r2, r3
 800492a:	69ba      	ldr	r2, [r7, #24]
 800492c:	4313      	orrs	r3, r2
 800492e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	69ba      	ldr	r2, [r7, #24]
 8004934:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800493c:	2201      	movs	r2, #1
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	fa02 f303 	lsl.w	r3, r2, r3
 8004944:	43db      	mvns	r3, r3
 8004946:	69ba      	ldr	r2, [r7, #24]
 8004948:	4013      	ands	r3, r2
 800494a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	091b      	lsrs	r3, r3, #4
 8004952:	f003 0201 	and.w	r2, r3, #1
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	fa02 f303 	lsl.w	r3, r2, r3
 800495c:	69ba      	ldr	r2, [r7, #24]
 800495e:	4313      	orrs	r3, r2
 8004960:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	69ba      	ldr	r2, [r7, #24]
 8004966:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	f003 0303 	and.w	r3, r3, #3
 8004970:	2b03      	cmp	r3, #3
 8004972:	d017      	beq.n	80049a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800497a:	69fb      	ldr	r3, [r7, #28]
 800497c:	005b      	lsls	r3, r3, #1
 800497e:	2203      	movs	r2, #3
 8004980:	fa02 f303 	lsl.w	r3, r2, r3
 8004984:	43db      	mvns	r3, r3
 8004986:	69ba      	ldr	r2, [r7, #24]
 8004988:	4013      	ands	r3, r2
 800498a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	689a      	ldr	r2, [r3, #8]
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	005b      	lsls	r3, r3, #1
 8004994:	fa02 f303 	lsl.w	r3, r2, r3
 8004998:	69ba      	ldr	r2, [r7, #24]
 800499a:	4313      	orrs	r3, r2
 800499c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	69ba      	ldr	r2, [r7, #24]
 80049a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	f003 0303 	and.w	r3, r3, #3
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	d123      	bne.n	80049f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	08da      	lsrs	r2, r3, #3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	3208      	adds	r2, #8
 80049b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	f003 0307 	and.w	r3, r3, #7
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	220f      	movs	r2, #15
 80049c8:	fa02 f303 	lsl.w	r3, r2, r3
 80049cc:	43db      	mvns	r3, r3
 80049ce:	69ba      	ldr	r2, [r7, #24]
 80049d0:	4013      	ands	r3, r2
 80049d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	691a      	ldr	r2, [r3, #16]
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	f003 0307 	and.w	r3, r3, #7
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	fa02 f303 	lsl.w	r3, r2, r3
 80049e4:	69ba      	ldr	r2, [r7, #24]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	08da      	lsrs	r2, r3, #3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	3208      	adds	r2, #8
 80049f2:	69b9      	ldr	r1, [r7, #24]
 80049f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	005b      	lsls	r3, r3, #1
 8004a02:	2203      	movs	r2, #3
 8004a04:	fa02 f303 	lsl.w	r3, r2, r3
 8004a08:	43db      	mvns	r3, r3
 8004a0a:	69ba      	ldr	r2, [r7, #24]
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	f003 0203 	and.w	r2, r3, #3
 8004a18:	69fb      	ldr	r3, [r7, #28]
 8004a1a:	005b      	lsls	r3, r3, #1
 8004a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a20:	69ba      	ldr	r2, [r7, #24]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	69ba      	ldr	r2, [r7, #24]
 8004a2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	f000 80b4 	beq.w	8004ba2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	60fb      	str	r3, [r7, #12]
 8004a3e:	4b60      	ldr	r3, [pc, #384]	; (8004bc0 <HAL_GPIO_Init+0x30c>)
 8004a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a42:	4a5f      	ldr	r2, [pc, #380]	; (8004bc0 <HAL_GPIO_Init+0x30c>)
 8004a44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a48:	6453      	str	r3, [r2, #68]	; 0x44
 8004a4a:	4b5d      	ldr	r3, [pc, #372]	; (8004bc0 <HAL_GPIO_Init+0x30c>)
 8004a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a52:	60fb      	str	r3, [r7, #12]
 8004a54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004a56:	4a5b      	ldr	r2, [pc, #364]	; (8004bc4 <HAL_GPIO_Init+0x310>)
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	089b      	lsrs	r3, r3, #2
 8004a5c:	3302      	adds	r3, #2
 8004a5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004a64:	69fb      	ldr	r3, [r7, #28]
 8004a66:	f003 0303 	and.w	r3, r3, #3
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	220f      	movs	r2, #15
 8004a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a72:	43db      	mvns	r3, r3
 8004a74:	69ba      	ldr	r2, [r7, #24]
 8004a76:	4013      	ands	r3, r2
 8004a78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a52      	ldr	r2, [pc, #328]	; (8004bc8 <HAL_GPIO_Init+0x314>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d02b      	beq.n	8004ada <HAL_GPIO_Init+0x226>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a51      	ldr	r2, [pc, #324]	; (8004bcc <HAL_GPIO_Init+0x318>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d025      	beq.n	8004ad6 <HAL_GPIO_Init+0x222>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a50      	ldr	r2, [pc, #320]	; (8004bd0 <HAL_GPIO_Init+0x31c>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d01f      	beq.n	8004ad2 <HAL_GPIO_Init+0x21e>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a4f      	ldr	r2, [pc, #316]	; (8004bd4 <HAL_GPIO_Init+0x320>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d019      	beq.n	8004ace <HAL_GPIO_Init+0x21a>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a4e      	ldr	r2, [pc, #312]	; (8004bd8 <HAL_GPIO_Init+0x324>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d013      	beq.n	8004aca <HAL_GPIO_Init+0x216>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a4d      	ldr	r2, [pc, #308]	; (8004bdc <HAL_GPIO_Init+0x328>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d00d      	beq.n	8004ac6 <HAL_GPIO_Init+0x212>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a4c      	ldr	r2, [pc, #304]	; (8004be0 <HAL_GPIO_Init+0x32c>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d007      	beq.n	8004ac2 <HAL_GPIO_Init+0x20e>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a4b      	ldr	r2, [pc, #300]	; (8004be4 <HAL_GPIO_Init+0x330>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d101      	bne.n	8004abe <HAL_GPIO_Init+0x20a>
 8004aba:	2307      	movs	r3, #7
 8004abc:	e00e      	b.n	8004adc <HAL_GPIO_Init+0x228>
 8004abe:	2308      	movs	r3, #8
 8004ac0:	e00c      	b.n	8004adc <HAL_GPIO_Init+0x228>
 8004ac2:	2306      	movs	r3, #6
 8004ac4:	e00a      	b.n	8004adc <HAL_GPIO_Init+0x228>
 8004ac6:	2305      	movs	r3, #5
 8004ac8:	e008      	b.n	8004adc <HAL_GPIO_Init+0x228>
 8004aca:	2304      	movs	r3, #4
 8004acc:	e006      	b.n	8004adc <HAL_GPIO_Init+0x228>
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e004      	b.n	8004adc <HAL_GPIO_Init+0x228>
 8004ad2:	2302      	movs	r3, #2
 8004ad4:	e002      	b.n	8004adc <HAL_GPIO_Init+0x228>
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e000      	b.n	8004adc <HAL_GPIO_Init+0x228>
 8004ada:	2300      	movs	r3, #0
 8004adc:	69fa      	ldr	r2, [r7, #28]
 8004ade:	f002 0203 	and.w	r2, r2, #3
 8004ae2:	0092      	lsls	r2, r2, #2
 8004ae4:	4093      	lsls	r3, r2
 8004ae6:	69ba      	ldr	r2, [r7, #24]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004aec:	4935      	ldr	r1, [pc, #212]	; (8004bc4 <HAL_GPIO_Init+0x310>)
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	089b      	lsrs	r3, r3, #2
 8004af2:	3302      	adds	r3, #2
 8004af4:	69ba      	ldr	r2, [r7, #24]
 8004af6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004afa:	4b3b      	ldr	r3, [pc, #236]	; (8004be8 <HAL_GPIO_Init+0x334>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	43db      	mvns	r3, r3
 8004b04:	69ba      	ldr	r2, [r7, #24]
 8004b06:	4013      	ands	r3, r2
 8004b08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d003      	beq.n	8004b1e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004b16:	69ba      	ldr	r2, [r7, #24]
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004b1e:	4a32      	ldr	r2, [pc, #200]	; (8004be8 <HAL_GPIO_Init+0x334>)
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004b24:	4b30      	ldr	r3, [pc, #192]	; (8004be8 <HAL_GPIO_Init+0x334>)
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	43db      	mvns	r3, r3
 8004b2e:	69ba      	ldr	r2, [r7, #24]
 8004b30:	4013      	ands	r3, r2
 8004b32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d003      	beq.n	8004b48 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004b40:	69ba      	ldr	r2, [r7, #24]
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004b48:	4a27      	ldr	r2, [pc, #156]	; (8004be8 <HAL_GPIO_Init+0x334>)
 8004b4a:	69bb      	ldr	r3, [r7, #24]
 8004b4c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004b4e:	4b26      	ldr	r3, [pc, #152]	; (8004be8 <HAL_GPIO_Init+0x334>)
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	43db      	mvns	r3, r3
 8004b58:	69ba      	ldr	r2, [r7, #24]
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d003      	beq.n	8004b72 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004b6a:	69ba      	ldr	r2, [r7, #24]
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004b72:	4a1d      	ldr	r2, [pc, #116]	; (8004be8 <HAL_GPIO_Init+0x334>)
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004b78:	4b1b      	ldr	r3, [pc, #108]	; (8004be8 <HAL_GPIO_Init+0x334>)
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	43db      	mvns	r3, r3
 8004b82:	69ba      	ldr	r2, [r7, #24]
 8004b84:	4013      	ands	r3, r2
 8004b86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d003      	beq.n	8004b9c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004b94:	69ba      	ldr	r2, [r7, #24]
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004b9c:	4a12      	ldr	r2, [pc, #72]	; (8004be8 <HAL_GPIO_Init+0x334>)
 8004b9e:	69bb      	ldr	r3, [r7, #24]
 8004ba0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	3301      	adds	r3, #1
 8004ba6:	61fb      	str	r3, [r7, #28]
 8004ba8:	69fb      	ldr	r3, [r7, #28]
 8004baa:	2b0f      	cmp	r3, #15
 8004bac:	f67f ae90 	bls.w	80048d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004bb0:	bf00      	nop
 8004bb2:	bf00      	nop
 8004bb4:	3724      	adds	r7, #36	; 0x24
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr
 8004bbe:	bf00      	nop
 8004bc0:	40023800 	.word	0x40023800
 8004bc4:	40013800 	.word	0x40013800
 8004bc8:	40020000 	.word	0x40020000
 8004bcc:	40020400 	.word	0x40020400
 8004bd0:	40020800 	.word	0x40020800
 8004bd4:	40020c00 	.word	0x40020c00
 8004bd8:	40021000 	.word	0x40021000
 8004bdc:	40021400 	.word	0x40021400
 8004be0:	40021800 	.word	0x40021800
 8004be4:	40021c00 	.word	0x40021c00
 8004be8:	40013c00 	.word	0x40013c00

08004bec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b085      	sub	sp, #20
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	460b      	mov	r3, r1
 8004bf6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	691a      	ldr	r2, [r3, #16]
 8004bfc:	887b      	ldrh	r3, [r7, #2]
 8004bfe:	4013      	ands	r3, r2
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d002      	beq.n	8004c0a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004c04:	2301      	movs	r3, #1
 8004c06:	73fb      	strb	r3, [r7, #15]
 8004c08:	e001      	b.n	8004c0e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3714      	adds	r7, #20
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr

08004c1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	460b      	mov	r3, r1
 8004c26:	807b      	strh	r3, [r7, #2]
 8004c28:	4613      	mov	r3, r2
 8004c2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004c2c:	787b      	ldrb	r3, [r7, #1]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d003      	beq.n	8004c3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c32:	887a      	ldrh	r2, [r7, #2]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004c38:	e003      	b.n	8004c42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004c3a:	887b      	ldrh	r3, [r7, #2]
 8004c3c:	041a      	lsls	r2, r3, #16
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	619a      	str	r2, [r3, #24]
}
 8004c42:	bf00      	nop
 8004c44:	370c      	adds	r7, #12
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr
	...

08004c50 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b082      	sub	sp, #8
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	4603      	mov	r3, r0
 8004c58:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004c5a:	4b08      	ldr	r3, [pc, #32]	; (8004c7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c5c:	695a      	ldr	r2, [r3, #20]
 8004c5e:	88fb      	ldrh	r3, [r7, #6]
 8004c60:	4013      	ands	r3, r2
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d006      	beq.n	8004c74 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004c66:	4a05      	ldr	r2, [pc, #20]	; (8004c7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c68:	88fb      	ldrh	r3, [r7, #6]
 8004c6a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004c6c:	88fb      	ldrh	r3, [r7, #6]
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f7fe f812 	bl	8002c98 <HAL_GPIO_EXTI_Callback>
  }
}
 8004c74:	bf00      	nop
 8004c76:	3708      	adds	r7, #8
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}
 8004c7c:	40013c00 	.word	0x40013c00

08004c80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d101      	bne.n	8004c92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e12b      	b.n	8004eea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d106      	bne.n	8004cac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f7fe fd6a 	bl	8003780 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2224      	movs	r2, #36	; 0x24
 8004cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f022 0201 	bic.w	r2, r2, #1
 8004cc2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004cd2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ce2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004ce4:	f001 fbd8 	bl	8006498 <HAL_RCC_GetPCLK1Freq>
 8004ce8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	4a81      	ldr	r2, [pc, #516]	; (8004ef4 <HAL_I2C_Init+0x274>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d807      	bhi.n	8004d04 <HAL_I2C_Init+0x84>
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	4a80      	ldr	r2, [pc, #512]	; (8004ef8 <HAL_I2C_Init+0x278>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	bf94      	ite	ls
 8004cfc:	2301      	movls	r3, #1
 8004cfe:	2300      	movhi	r3, #0
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	e006      	b.n	8004d12 <HAL_I2C_Init+0x92>
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	4a7d      	ldr	r2, [pc, #500]	; (8004efc <HAL_I2C_Init+0x27c>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	bf94      	ite	ls
 8004d0c:	2301      	movls	r3, #1
 8004d0e:	2300      	movhi	r3, #0
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d001      	beq.n	8004d1a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e0e7      	b.n	8004eea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	4a78      	ldr	r2, [pc, #480]	; (8004f00 <HAL_I2C_Init+0x280>)
 8004d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d22:	0c9b      	lsrs	r3, r3, #18
 8004d24:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	68ba      	ldr	r2, [r7, #8]
 8004d36:	430a      	orrs	r2, r1
 8004d38:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	6a1b      	ldr	r3, [r3, #32]
 8004d40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	4a6a      	ldr	r2, [pc, #424]	; (8004ef4 <HAL_I2C_Init+0x274>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d802      	bhi.n	8004d54 <HAL_I2C_Init+0xd4>
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	3301      	adds	r3, #1
 8004d52:	e009      	b.n	8004d68 <HAL_I2C_Init+0xe8>
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004d5a:	fb02 f303 	mul.w	r3, r2, r3
 8004d5e:	4a69      	ldr	r2, [pc, #420]	; (8004f04 <HAL_I2C_Init+0x284>)
 8004d60:	fba2 2303 	umull	r2, r3, r2, r3
 8004d64:	099b      	lsrs	r3, r3, #6
 8004d66:	3301      	adds	r3, #1
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	6812      	ldr	r2, [r2, #0]
 8004d6c:	430b      	orrs	r3, r1
 8004d6e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	69db      	ldr	r3, [r3, #28]
 8004d76:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004d7a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	495c      	ldr	r1, [pc, #368]	; (8004ef4 <HAL_I2C_Init+0x274>)
 8004d84:	428b      	cmp	r3, r1
 8004d86:	d819      	bhi.n	8004dbc <HAL_I2C_Init+0x13c>
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	1e59      	subs	r1, r3, #1
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	005b      	lsls	r3, r3, #1
 8004d92:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d96:	1c59      	adds	r1, r3, #1
 8004d98:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004d9c:	400b      	ands	r3, r1
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d00a      	beq.n	8004db8 <HAL_I2C_Init+0x138>
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	1e59      	subs	r1, r3, #1
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	005b      	lsls	r3, r3, #1
 8004dac:	fbb1 f3f3 	udiv	r3, r1, r3
 8004db0:	3301      	adds	r3, #1
 8004db2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004db6:	e051      	b.n	8004e5c <HAL_I2C_Init+0x1dc>
 8004db8:	2304      	movs	r3, #4
 8004dba:	e04f      	b.n	8004e5c <HAL_I2C_Init+0x1dc>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d111      	bne.n	8004de8 <HAL_I2C_Init+0x168>
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	1e58      	subs	r0, r3, #1
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6859      	ldr	r1, [r3, #4]
 8004dcc:	460b      	mov	r3, r1
 8004dce:	005b      	lsls	r3, r3, #1
 8004dd0:	440b      	add	r3, r1
 8004dd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004dd6:	3301      	adds	r3, #1
 8004dd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	bf0c      	ite	eq
 8004de0:	2301      	moveq	r3, #1
 8004de2:	2300      	movne	r3, #0
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	e012      	b.n	8004e0e <HAL_I2C_Init+0x18e>
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	1e58      	subs	r0, r3, #1
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6859      	ldr	r1, [r3, #4]
 8004df0:	460b      	mov	r3, r1
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	440b      	add	r3, r1
 8004df6:	0099      	lsls	r1, r3, #2
 8004df8:	440b      	add	r3, r1
 8004dfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8004dfe:	3301      	adds	r3, #1
 8004e00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	bf0c      	ite	eq
 8004e08:	2301      	moveq	r3, #1
 8004e0a:	2300      	movne	r3, #0
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d001      	beq.n	8004e16 <HAL_I2C_Init+0x196>
 8004e12:	2301      	movs	r3, #1
 8004e14:	e022      	b.n	8004e5c <HAL_I2C_Init+0x1dc>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d10e      	bne.n	8004e3c <HAL_I2C_Init+0x1bc>
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	1e58      	subs	r0, r3, #1
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6859      	ldr	r1, [r3, #4]
 8004e26:	460b      	mov	r3, r1
 8004e28:	005b      	lsls	r3, r3, #1
 8004e2a:	440b      	add	r3, r1
 8004e2c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e30:	3301      	adds	r3, #1
 8004e32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e3a:	e00f      	b.n	8004e5c <HAL_I2C_Init+0x1dc>
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	1e58      	subs	r0, r3, #1
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6859      	ldr	r1, [r3, #4]
 8004e44:	460b      	mov	r3, r1
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	440b      	add	r3, r1
 8004e4a:	0099      	lsls	r1, r3, #2
 8004e4c:	440b      	add	r3, r1
 8004e4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e52:	3301      	adds	r3, #1
 8004e54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e5c:	6879      	ldr	r1, [r7, #4]
 8004e5e:	6809      	ldr	r1, [r1, #0]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	69da      	ldr	r2, [r3, #28]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6a1b      	ldr	r3, [r3, #32]
 8004e76:	431a      	orrs	r2, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	430a      	orrs	r2, r1
 8004e7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004e8a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	6911      	ldr	r1, [r2, #16]
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	68d2      	ldr	r2, [r2, #12]
 8004e96:	4311      	orrs	r1, r2
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	6812      	ldr	r2, [r2, #0]
 8004e9c:	430b      	orrs	r3, r1
 8004e9e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	695a      	ldr	r2, [r3, #20]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	699b      	ldr	r3, [r3, #24]
 8004eb2:	431a      	orrs	r2, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	430a      	orrs	r2, r1
 8004eba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f042 0201 	orr.w	r2, r2, #1
 8004eca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2220      	movs	r2, #32
 8004ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004ee8:	2300      	movs	r3, #0
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3710      	adds	r7, #16
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	000186a0 	.word	0x000186a0
 8004ef8:	001e847f 	.word	0x001e847f
 8004efc:	003d08ff 	.word	0x003d08ff
 8004f00:	431bde83 	.word	0x431bde83
 8004f04:	10624dd3 	.word	0x10624dd3

08004f08 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b088      	sub	sp, #32
 8004f0c:	af02      	add	r7, sp, #8
 8004f0e:	60f8      	str	r0, [r7, #12]
 8004f10:	4608      	mov	r0, r1
 8004f12:	4611      	mov	r1, r2
 8004f14:	461a      	mov	r2, r3
 8004f16:	4603      	mov	r3, r0
 8004f18:	817b      	strh	r3, [r7, #10]
 8004f1a:	460b      	mov	r3, r1
 8004f1c:	813b      	strh	r3, [r7, #8]
 8004f1e:	4613      	mov	r3, r2
 8004f20:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004f22:	f7fe ff83 	bl	8003e2c <HAL_GetTick>
 8004f26:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	2b20      	cmp	r3, #32
 8004f32:	f040 80d9 	bne.w	80050e8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	9300      	str	r3, [sp, #0]
 8004f3a:	2319      	movs	r3, #25
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	496d      	ldr	r1, [pc, #436]	; (80050f4 <HAL_I2C_Mem_Write+0x1ec>)
 8004f40:	68f8      	ldr	r0, [r7, #12]
 8004f42:	f000 fc7f 	bl	8005844 <I2C_WaitOnFlagUntilTimeout>
 8004f46:	4603      	mov	r3, r0
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d001      	beq.n	8004f50 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004f4c:	2302      	movs	r3, #2
 8004f4e:	e0cc      	b.n	80050ea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d101      	bne.n	8004f5e <HAL_I2C_Mem_Write+0x56>
 8004f5a:	2302      	movs	r3, #2
 8004f5c:	e0c5      	b.n	80050ea <HAL_I2C_Mem_Write+0x1e2>
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2201      	movs	r2, #1
 8004f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 0301 	and.w	r3, r3, #1
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d007      	beq.n	8004f84 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f042 0201 	orr.w	r2, r2, #1
 8004f82:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f92:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2221      	movs	r2, #33	; 0x21
 8004f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2240      	movs	r2, #64	; 0x40
 8004fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	6a3a      	ldr	r2, [r7, #32]
 8004fae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004fb4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fba:	b29a      	uxth	r2, r3
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	4a4d      	ldr	r2, [pc, #308]	; (80050f8 <HAL_I2C_Mem_Write+0x1f0>)
 8004fc4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004fc6:	88f8      	ldrh	r0, [r7, #6]
 8004fc8:	893a      	ldrh	r2, [r7, #8]
 8004fca:	8979      	ldrh	r1, [r7, #10]
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	9301      	str	r3, [sp, #4]
 8004fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd2:	9300      	str	r3, [sp, #0]
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	68f8      	ldr	r0, [r7, #12]
 8004fd8:	f000 fab6 	bl	8005548 <I2C_RequestMemoryWrite>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d052      	beq.n	8005088 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e081      	b.n	80050ea <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fe6:	697a      	ldr	r2, [r7, #20]
 8004fe8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004fea:	68f8      	ldr	r0, [r7, #12]
 8004fec:	f000 fd00 	bl	80059f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00d      	beq.n	8005012 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffa:	2b04      	cmp	r3, #4
 8004ffc:	d107      	bne.n	800500e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800500c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e06b      	b.n	80050ea <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005016:	781a      	ldrb	r2, [r3, #0]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005022:	1c5a      	adds	r2, r3, #1
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800502c:	3b01      	subs	r3, #1
 800502e:	b29a      	uxth	r2, r3
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005038:	b29b      	uxth	r3, r3
 800503a:	3b01      	subs	r3, #1
 800503c:	b29a      	uxth	r2, r3
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	695b      	ldr	r3, [r3, #20]
 8005048:	f003 0304 	and.w	r3, r3, #4
 800504c:	2b04      	cmp	r3, #4
 800504e:	d11b      	bne.n	8005088 <HAL_I2C_Mem_Write+0x180>
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005054:	2b00      	cmp	r3, #0
 8005056:	d017      	beq.n	8005088 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505c:	781a      	ldrb	r2, [r3, #0]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005068:	1c5a      	adds	r2, r3, #1
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005072:	3b01      	subs	r3, #1
 8005074:	b29a      	uxth	r2, r3
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800507e:	b29b      	uxth	r3, r3
 8005080:	3b01      	subs	r3, #1
 8005082:	b29a      	uxth	r2, r3
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800508c:	2b00      	cmp	r3, #0
 800508e:	d1aa      	bne.n	8004fe6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005090:	697a      	ldr	r2, [r7, #20]
 8005092:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005094:	68f8      	ldr	r0, [r7, #12]
 8005096:	f000 fcec 	bl	8005a72 <I2C_WaitOnBTFFlagUntilTimeout>
 800509a:	4603      	mov	r3, r0
 800509c:	2b00      	cmp	r3, #0
 800509e:	d00d      	beq.n	80050bc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a4:	2b04      	cmp	r3, #4
 80050a6:	d107      	bne.n	80050b8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050b6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	e016      	b.n	80050ea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2220      	movs	r2, #32
 80050d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2200      	movs	r2, #0
 80050d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2200      	movs	r2, #0
 80050e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80050e4:	2300      	movs	r3, #0
 80050e6:	e000      	b.n	80050ea <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80050e8:	2302      	movs	r3, #2
  }
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3718      	adds	r7, #24
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop
 80050f4:	00100002 	.word	0x00100002
 80050f8:	ffff0000 	.word	0xffff0000

080050fc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b08c      	sub	sp, #48	; 0x30
 8005100:	af02      	add	r7, sp, #8
 8005102:	60f8      	str	r0, [r7, #12]
 8005104:	4608      	mov	r0, r1
 8005106:	4611      	mov	r1, r2
 8005108:	461a      	mov	r2, r3
 800510a:	4603      	mov	r3, r0
 800510c:	817b      	strh	r3, [r7, #10]
 800510e:	460b      	mov	r3, r1
 8005110:	813b      	strh	r3, [r7, #8]
 8005112:	4613      	mov	r3, r2
 8005114:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005116:	f7fe fe89 	bl	8003e2c <HAL_GetTick>
 800511a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005122:	b2db      	uxtb	r3, r3
 8005124:	2b20      	cmp	r3, #32
 8005126:	f040 8208 	bne.w	800553a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800512a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512c:	9300      	str	r3, [sp, #0]
 800512e:	2319      	movs	r3, #25
 8005130:	2201      	movs	r2, #1
 8005132:	497b      	ldr	r1, [pc, #492]	; (8005320 <HAL_I2C_Mem_Read+0x224>)
 8005134:	68f8      	ldr	r0, [r7, #12]
 8005136:	f000 fb85 	bl	8005844 <I2C_WaitOnFlagUntilTimeout>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d001      	beq.n	8005144 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005140:	2302      	movs	r3, #2
 8005142:	e1fb      	b.n	800553c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800514a:	2b01      	cmp	r3, #1
 800514c:	d101      	bne.n	8005152 <HAL_I2C_Mem_Read+0x56>
 800514e:	2302      	movs	r3, #2
 8005150:	e1f4      	b.n	800553c <HAL_I2C_Mem_Read+0x440>
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2201      	movs	r2, #1
 8005156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f003 0301 	and.w	r3, r3, #1
 8005164:	2b01      	cmp	r3, #1
 8005166:	d007      	beq.n	8005178 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f042 0201 	orr.w	r2, r2, #1
 8005176:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005186:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2222      	movs	r2, #34	; 0x22
 800518c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2240      	movs	r2, #64	; 0x40
 8005194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2200      	movs	r2, #0
 800519c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80051a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051ae:	b29a      	uxth	r2, r3
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	4a5b      	ldr	r2, [pc, #364]	; (8005324 <HAL_I2C_Mem_Read+0x228>)
 80051b8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80051ba:	88f8      	ldrh	r0, [r7, #6]
 80051bc:	893a      	ldrh	r2, [r7, #8]
 80051be:	8979      	ldrh	r1, [r7, #10]
 80051c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c2:	9301      	str	r3, [sp, #4]
 80051c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051c6:	9300      	str	r3, [sp, #0]
 80051c8:	4603      	mov	r3, r0
 80051ca:	68f8      	ldr	r0, [r7, #12]
 80051cc:	f000 fa52 	bl	8005674 <I2C_RequestMemoryRead>
 80051d0:	4603      	mov	r3, r0
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d001      	beq.n	80051da <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e1b0      	b.n	800553c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d113      	bne.n	800520a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051e2:	2300      	movs	r3, #0
 80051e4:	623b      	str	r3, [r7, #32]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	695b      	ldr	r3, [r3, #20]
 80051ec:	623b      	str	r3, [r7, #32]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	699b      	ldr	r3, [r3, #24]
 80051f4:	623b      	str	r3, [r7, #32]
 80051f6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005206:	601a      	str	r2, [r3, #0]
 8005208:	e184      	b.n	8005514 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800520e:	2b01      	cmp	r3, #1
 8005210:	d11b      	bne.n	800524a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005220:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005222:	2300      	movs	r3, #0
 8005224:	61fb      	str	r3, [r7, #28]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	695b      	ldr	r3, [r3, #20]
 800522c:	61fb      	str	r3, [r7, #28]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	699b      	ldr	r3, [r3, #24]
 8005234:	61fb      	str	r3, [r7, #28]
 8005236:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005246:	601a      	str	r2, [r3, #0]
 8005248:	e164      	b.n	8005514 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800524e:	2b02      	cmp	r3, #2
 8005250:	d11b      	bne.n	800528a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005260:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005270:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005272:	2300      	movs	r3, #0
 8005274:	61bb      	str	r3, [r7, #24]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	695b      	ldr	r3, [r3, #20]
 800527c:	61bb      	str	r3, [r7, #24]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	699b      	ldr	r3, [r3, #24]
 8005284:	61bb      	str	r3, [r7, #24]
 8005286:	69bb      	ldr	r3, [r7, #24]
 8005288:	e144      	b.n	8005514 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800528a:	2300      	movs	r3, #0
 800528c:	617b      	str	r3, [r7, #20]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	695b      	ldr	r3, [r3, #20]
 8005294:	617b      	str	r3, [r7, #20]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	699b      	ldr	r3, [r3, #24]
 800529c:	617b      	str	r3, [r7, #20]
 800529e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80052a0:	e138      	b.n	8005514 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052a6:	2b03      	cmp	r3, #3
 80052a8:	f200 80f1 	bhi.w	800548e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d123      	bne.n	80052fc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80052b8:	68f8      	ldr	r0, [r7, #12]
 80052ba:	f000 fc1b 	bl	8005af4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80052be:	4603      	mov	r3, r0
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d001      	beq.n	80052c8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	e139      	b.n	800553c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	691a      	ldr	r2, [r3, #16]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d2:	b2d2      	uxtb	r2, r2
 80052d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052da:	1c5a      	adds	r2, r3, #1
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052e4:	3b01      	subs	r3, #1
 80052e6:	b29a      	uxth	r2, r3
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	3b01      	subs	r3, #1
 80052f4:	b29a      	uxth	r2, r3
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80052fa:	e10b      	b.n	8005514 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005300:	2b02      	cmp	r3, #2
 8005302:	d14e      	bne.n	80053a2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005306:	9300      	str	r3, [sp, #0]
 8005308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800530a:	2200      	movs	r2, #0
 800530c:	4906      	ldr	r1, [pc, #24]	; (8005328 <HAL_I2C_Mem_Read+0x22c>)
 800530e:	68f8      	ldr	r0, [r7, #12]
 8005310:	f000 fa98 	bl	8005844 <I2C_WaitOnFlagUntilTimeout>
 8005314:	4603      	mov	r3, r0
 8005316:	2b00      	cmp	r3, #0
 8005318:	d008      	beq.n	800532c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	e10e      	b.n	800553c <HAL_I2C_Mem_Read+0x440>
 800531e:	bf00      	nop
 8005320:	00100002 	.word	0x00100002
 8005324:	ffff0000 	.word	0xffff0000
 8005328:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800533a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	691a      	ldr	r2, [r3, #16]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005346:	b2d2      	uxtb	r2, r2
 8005348:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534e:	1c5a      	adds	r2, r3, #1
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005358:	3b01      	subs	r3, #1
 800535a:	b29a      	uxth	r2, r3
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005364:	b29b      	uxth	r3, r3
 8005366:	3b01      	subs	r3, #1
 8005368:	b29a      	uxth	r2, r3
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	691a      	ldr	r2, [r3, #16]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005378:	b2d2      	uxtb	r2, r2
 800537a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005380:	1c5a      	adds	r2, r3, #1
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800538a:	3b01      	subs	r3, #1
 800538c:	b29a      	uxth	r2, r3
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005396:	b29b      	uxth	r3, r3
 8005398:	3b01      	subs	r3, #1
 800539a:	b29a      	uxth	r2, r3
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	855a      	strh	r2, [r3, #42]	; 0x2a
 80053a0:	e0b8      	b.n	8005514 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80053a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a4:	9300      	str	r3, [sp, #0]
 80053a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053a8:	2200      	movs	r2, #0
 80053aa:	4966      	ldr	r1, [pc, #408]	; (8005544 <HAL_I2C_Mem_Read+0x448>)
 80053ac:	68f8      	ldr	r0, [r7, #12]
 80053ae:	f000 fa49 	bl	8005844 <I2C_WaitOnFlagUntilTimeout>
 80053b2:	4603      	mov	r3, r0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d001      	beq.n	80053bc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	e0bf      	b.n	800553c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	691a      	ldr	r2, [r3, #16]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d6:	b2d2      	uxtb	r2, r2
 80053d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053de:	1c5a      	adds	r2, r3, #1
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053e8:	3b01      	subs	r3, #1
 80053ea:	b29a      	uxth	r2, r3
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	3b01      	subs	r3, #1
 80053f8:	b29a      	uxth	r2, r3
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80053fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005400:	9300      	str	r3, [sp, #0]
 8005402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005404:	2200      	movs	r2, #0
 8005406:	494f      	ldr	r1, [pc, #316]	; (8005544 <HAL_I2C_Mem_Read+0x448>)
 8005408:	68f8      	ldr	r0, [r7, #12]
 800540a:	f000 fa1b 	bl	8005844 <I2C_WaitOnFlagUntilTimeout>
 800540e:	4603      	mov	r3, r0
 8005410:	2b00      	cmp	r3, #0
 8005412:	d001      	beq.n	8005418 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	e091      	b.n	800553c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005426:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	691a      	ldr	r2, [r3, #16]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005432:	b2d2      	uxtb	r2, r2
 8005434:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543a:	1c5a      	adds	r2, r3, #1
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005444:	3b01      	subs	r3, #1
 8005446:	b29a      	uxth	r2, r3
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005450:	b29b      	uxth	r3, r3
 8005452:	3b01      	subs	r3, #1
 8005454:	b29a      	uxth	r2, r3
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	691a      	ldr	r2, [r3, #16]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005464:	b2d2      	uxtb	r2, r2
 8005466:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546c:	1c5a      	adds	r2, r3, #1
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005476:	3b01      	subs	r3, #1
 8005478:	b29a      	uxth	r2, r3
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005482:	b29b      	uxth	r3, r3
 8005484:	3b01      	subs	r3, #1
 8005486:	b29a      	uxth	r2, r3
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800548c:	e042      	b.n	8005514 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800548e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005490:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005492:	68f8      	ldr	r0, [r7, #12]
 8005494:	f000 fb2e 	bl	8005af4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005498:	4603      	mov	r3, r0
 800549a:	2b00      	cmp	r3, #0
 800549c:	d001      	beq.n	80054a2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e04c      	b.n	800553c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	691a      	ldr	r2, [r3, #16]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ac:	b2d2      	uxtb	r2, r2
 80054ae:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b4:	1c5a      	adds	r2, r3, #1
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054be:	3b01      	subs	r3, #1
 80054c0:	b29a      	uxth	r2, r3
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	3b01      	subs	r3, #1
 80054ce:	b29a      	uxth	r2, r3
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	695b      	ldr	r3, [r3, #20]
 80054da:	f003 0304 	and.w	r3, r3, #4
 80054de:	2b04      	cmp	r3, #4
 80054e0:	d118      	bne.n	8005514 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	691a      	ldr	r2, [r3, #16]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ec:	b2d2      	uxtb	r2, r2
 80054ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f4:	1c5a      	adds	r2, r3, #1
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054fe:	3b01      	subs	r3, #1
 8005500:	b29a      	uxth	r2, r3
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800550a:	b29b      	uxth	r3, r3
 800550c:	3b01      	subs	r3, #1
 800550e:	b29a      	uxth	r2, r3
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005518:	2b00      	cmp	r3, #0
 800551a:	f47f aec2 	bne.w	80052a2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2220      	movs	r2, #32
 8005522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2200      	movs	r2, #0
 800552a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2200      	movs	r2, #0
 8005532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005536:	2300      	movs	r3, #0
 8005538:	e000      	b.n	800553c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800553a:	2302      	movs	r3, #2
  }
}
 800553c:	4618      	mov	r0, r3
 800553e:	3728      	adds	r7, #40	; 0x28
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}
 8005544:	00010004 	.word	0x00010004

08005548 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b088      	sub	sp, #32
 800554c:	af02      	add	r7, sp, #8
 800554e:	60f8      	str	r0, [r7, #12]
 8005550:	4608      	mov	r0, r1
 8005552:	4611      	mov	r1, r2
 8005554:	461a      	mov	r2, r3
 8005556:	4603      	mov	r3, r0
 8005558:	817b      	strh	r3, [r7, #10]
 800555a:	460b      	mov	r3, r1
 800555c:	813b      	strh	r3, [r7, #8]
 800555e:	4613      	mov	r3, r2
 8005560:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005570:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005574:	9300      	str	r3, [sp, #0]
 8005576:	6a3b      	ldr	r3, [r7, #32]
 8005578:	2200      	movs	r2, #0
 800557a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800557e:	68f8      	ldr	r0, [r7, #12]
 8005580:	f000 f960 	bl	8005844 <I2C_WaitOnFlagUntilTimeout>
 8005584:	4603      	mov	r3, r0
 8005586:	2b00      	cmp	r3, #0
 8005588:	d00d      	beq.n	80055a6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005594:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005598:	d103      	bne.n	80055a2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055a0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80055a2:	2303      	movs	r3, #3
 80055a4:	e05f      	b.n	8005666 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80055a6:	897b      	ldrh	r3, [r7, #10]
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	461a      	mov	r2, r3
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80055b4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80055b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b8:	6a3a      	ldr	r2, [r7, #32]
 80055ba:	492d      	ldr	r1, [pc, #180]	; (8005670 <I2C_RequestMemoryWrite+0x128>)
 80055bc:	68f8      	ldr	r0, [r7, #12]
 80055be:	f000 f998 	bl	80058f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d001      	beq.n	80055cc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	e04c      	b.n	8005666 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055cc:	2300      	movs	r3, #0
 80055ce:	617b      	str	r3, [r7, #20]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	695b      	ldr	r3, [r3, #20]
 80055d6:	617b      	str	r3, [r7, #20]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	699b      	ldr	r3, [r3, #24]
 80055de:	617b      	str	r3, [r7, #20]
 80055e0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055e4:	6a39      	ldr	r1, [r7, #32]
 80055e6:	68f8      	ldr	r0, [r7, #12]
 80055e8:	f000 fa02 	bl	80059f0 <I2C_WaitOnTXEFlagUntilTimeout>
 80055ec:	4603      	mov	r3, r0
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d00d      	beq.n	800560e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f6:	2b04      	cmp	r3, #4
 80055f8:	d107      	bne.n	800560a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005608:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	e02b      	b.n	8005666 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800560e:	88fb      	ldrh	r3, [r7, #6]
 8005610:	2b01      	cmp	r3, #1
 8005612:	d105      	bne.n	8005620 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005614:	893b      	ldrh	r3, [r7, #8]
 8005616:	b2da      	uxtb	r2, r3
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	611a      	str	r2, [r3, #16]
 800561e:	e021      	b.n	8005664 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005620:	893b      	ldrh	r3, [r7, #8]
 8005622:	0a1b      	lsrs	r3, r3, #8
 8005624:	b29b      	uxth	r3, r3
 8005626:	b2da      	uxtb	r2, r3
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800562e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005630:	6a39      	ldr	r1, [r7, #32]
 8005632:	68f8      	ldr	r0, [r7, #12]
 8005634:	f000 f9dc 	bl	80059f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005638:	4603      	mov	r3, r0
 800563a:	2b00      	cmp	r3, #0
 800563c:	d00d      	beq.n	800565a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005642:	2b04      	cmp	r3, #4
 8005644:	d107      	bne.n	8005656 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005654:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e005      	b.n	8005666 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800565a:	893b      	ldrh	r3, [r7, #8]
 800565c:	b2da      	uxtb	r2, r3
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005664:	2300      	movs	r3, #0
}
 8005666:	4618      	mov	r0, r3
 8005668:	3718      	adds	r7, #24
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
 800566e:	bf00      	nop
 8005670:	00010002 	.word	0x00010002

08005674 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b088      	sub	sp, #32
 8005678:	af02      	add	r7, sp, #8
 800567a:	60f8      	str	r0, [r7, #12]
 800567c:	4608      	mov	r0, r1
 800567e:	4611      	mov	r1, r2
 8005680:	461a      	mov	r2, r3
 8005682:	4603      	mov	r3, r0
 8005684:	817b      	strh	r3, [r7, #10]
 8005686:	460b      	mov	r3, r1
 8005688:	813b      	strh	r3, [r7, #8]
 800568a:	4613      	mov	r3, r2
 800568c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800569c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80056ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b0:	9300      	str	r3, [sp, #0]
 80056b2:	6a3b      	ldr	r3, [r7, #32]
 80056b4:	2200      	movs	r2, #0
 80056b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80056ba:	68f8      	ldr	r0, [r7, #12]
 80056bc:	f000 f8c2 	bl	8005844 <I2C_WaitOnFlagUntilTimeout>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d00d      	beq.n	80056e2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056d4:	d103      	bne.n	80056de <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056dc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80056de:	2303      	movs	r3, #3
 80056e0:	e0aa      	b.n	8005838 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80056e2:	897b      	ldrh	r3, [r7, #10]
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	461a      	mov	r2, r3
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80056f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80056f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f4:	6a3a      	ldr	r2, [r7, #32]
 80056f6:	4952      	ldr	r1, [pc, #328]	; (8005840 <I2C_RequestMemoryRead+0x1cc>)
 80056f8:	68f8      	ldr	r0, [r7, #12]
 80056fa:	f000 f8fa 	bl	80058f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80056fe:	4603      	mov	r3, r0
 8005700:	2b00      	cmp	r3, #0
 8005702:	d001      	beq.n	8005708 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	e097      	b.n	8005838 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005708:	2300      	movs	r3, #0
 800570a:	617b      	str	r3, [r7, #20]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	695b      	ldr	r3, [r3, #20]
 8005712:	617b      	str	r3, [r7, #20]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	699b      	ldr	r3, [r3, #24]
 800571a:	617b      	str	r3, [r7, #20]
 800571c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800571e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005720:	6a39      	ldr	r1, [r7, #32]
 8005722:	68f8      	ldr	r0, [r7, #12]
 8005724:	f000 f964 	bl	80059f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005728:	4603      	mov	r3, r0
 800572a:	2b00      	cmp	r3, #0
 800572c:	d00d      	beq.n	800574a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005732:	2b04      	cmp	r3, #4
 8005734:	d107      	bne.n	8005746 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005744:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e076      	b.n	8005838 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800574a:	88fb      	ldrh	r3, [r7, #6]
 800574c:	2b01      	cmp	r3, #1
 800574e:	d105      	bne.n	800575c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005750:	893b      	ldrh	r3, [r7, #8]
 8005752:	b2da      	uxtb	r2, r3
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	611a      	str	r2, [r3, #16]
 800575a:	e021      	b.n	80057a0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800575c:	893b      	ldrh	r3, [r7, #8]
 800575e:	0a1b      	lsrs	r3, r3, #8
 8005760:	b29b      	uxth	r3, r3
 8005762:	b2da      	uxtb	r2, r3
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800576a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800576c:	6a39      	ldr	r1, [r7, #32]
 800576e:	68f8      	ldr	r0, [r7, #12]
 8005770:	f000 f93e 	bl	80059f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005774:	4603      	mov	r3, r0
 8005776:	2b00      	cmp	r3, #0
 8005778:	d00d      	beq.n	8005796 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577e:	2b04      	cmp	r3, #4
 8005780:	d107      	bne.n	8005792 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005790:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	e050      	b.n	8005838 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005796:	893b      	ldrh	r3, [r7, #8]
 8005798:	b2da      	uxtb	r2, r3
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057a2:	6a39      	ldr	r1, [r7, #32]
 80057a4:	68f8      	ldr	r0, [r7, #12]
 80057a6:	f000 f923 	bl	80059f0 <I2C_WaitOnTXEFlagUntilTimeout>
 80057aa:	4603      	mov	r3, r0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d00d      	beq.n	80057cc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b4:	2b04      	cmp	r3, #4
 80057b6:	d107      	bne.n	80057c8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057c6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	e035      	b.n	8005838 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057da:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80057dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057de:	9300      	str	r3, [sp, #0]
 80057e0:	6a3b      	ldr	r3, [r7, #32]
 80057e2:	2200      	movs	r2, #0
 80057e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80057e8:	68f8      	ldr	r0, [r7, #12]
 80057ea:	f000 f82b 	bl	8005844 <I2C_WaitOnFlagUntilTimeout>
 80057ee:	4603      	mov	r3, r0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d00d      	beq.n	8005810 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005802:	d103      	bne.n	800580c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f44f 7200 	mov.w	r2, #512	; 0x200
 800580a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800580c:	2303      	movs	r3, #3
 800580e:	e013      	b.n	8005838 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005810:	897b      	ldrh	r3, [r7, #10]
 8005812:	b2db      	uxtb	r3, r3
 8005814:	f043 0301 	orr.w	r3, r3, #1
 8005818:	b2da      	uxtb	r2, r3
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005822:	6a3a      	ldr	r2, [r7, #32]
 8005824:	4906      	ldr	r1, [pc, #24]	; (8005840 <I2C_RequestMemoryRead+0x1cc>)
 8005826:	68f8      	ldr	r0, [r7, #12]
 8005828:	f000 f863 	bl	80058f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800582c:	4603      	mov	r3, r0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d001      	beq.n	8005836 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e000      	b.n	8005838 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005836:	2300      	movs	r3, #0
}
 8005838:	4618      	mov	r0, r3
 800583a:	3718      	adds	r7, #24
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}
 8005840:	00010002 	.word	0x00010002

08005844 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
 800584a:	60f8      	str	r0, [r7, #12]
 800584c:	60b9      	str	r1, [r7, #8]
 800584e:	603b      	str	r3, [r7, #0]
 8005850:	4613      	mov	r3, r2
 8005852:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005854:	e025      	b.n	80058a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800585c:	d021      	beq.n	80058a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800585e:	f7fe fae5 	bl	8003e2c <HAL_GetTick>
 8005862:	4602      	mov	r2, r0
 8005864:	69bb      	ldr	r3, [r7, #24]
 8005866:	1ad3      	subs	r3, r2, r3
 8005868:	683a      	ldr	r2, [r7, #0]
 800586a:	429a      	cmp	r2, r3
 800586c:	d302      	bcc.n	8005874 <I2C_WaitOnFlagUntilTimeout+0x30>
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d116      	bne.n	80058a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2200      	movs	r2, #0
 8005878:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2220      	movs	r2, #32
 800587e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2200      	movs	r2, #0
 8005886:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800588e:	f043 0220 	orr.w	r2, r3, #32
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2200      	movs	r2, #0
 800589a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	e023      	b.n	80058ea <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	0c1b      	lsrs	r3, r3, #16
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d10d      	bne.n	80058c8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	695b      	ldr	r3, [r3, #20]
 80058b2:	43da      	mvns	r2, r3
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	4013      	ands	r3, r2
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	bf0c      	ite	eq
 80058be:	2301      	moveq	r3, #1
 80058c0:	2300      	movne	r3, #0
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	461a      	mov	r2, r3
 80058c6:	e00c      	b.n	80058e2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	699b      	ldr	r3, [r3, #24]
 80058ce:	43da      	mvns	r2, r3
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	4013      	ands	r3, r2
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	bf0c      	ite	eq
 80058da:	2301      	moveq	r3, #1
 80058dc:	2300      	movne	r3, #0
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	461a      	mov	r2, r3
 80058e2:	79fb      	ldrb	r3, [r7, #7]
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d0b6      	beq.n	8005856 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80058e8:	2300      	movs	r3, #0
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3710      	adds	r7, #16
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}

080058f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80058f2:	b580      	push	{r7, lr}
 80058f4:	b084      	sub	sp, #16
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	60f8      	str	r0, [r7, #12]
 80058fa:	60b9      	str	r1, [r7, #8]
 80058fc:	607a      	str	r2, [r7, #4]
 80058fe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005900:	e051      	b.n	80059a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	695b      	ldr	r3, [r3, #20]
 8005908:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800590c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005910:	d123      	bne.n	800595a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005920:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800592a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2200      	movs	r2, #0
 8005930:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2220      	movs	r2, #32
 8005936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2200      	movs	r2, #0
 800593e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005946:	f043 0204 	orr.w	r2, r3, #4
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2200      	movs	r2, #0
 8005952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	e046      	b.n	80059e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005960:	d021      	beq.n	80059a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005962:	f7fe fa63 	bl	8003e2c <HAL_GetTick>
 8005966:	4602      	mov	r2, r0
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	1ad3      	subs	r3, r2, r3
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	429a      	cmp	r2, r3
 8005970:	d302      	bcc.n	8005978 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d116      	bne.n	80059a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2200      	movs	r2, #0
 800597c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2220      	movs	r2, #32
 8005982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2200      	movs	r2, #0
 800598a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005992:	f043 0220 	orr.w	r2, r3, #32
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2200      	movs	r2, #0
 800599e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	e020      	b.n	80059e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	0c1b      	lsrs	r3, r3, #16
 80059aa:	b2db      	uxtb	r3, r3
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d10c      	bne.n	80059ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	695b      	ldr	r3, [r3, #20]
 80059b6:	43da      	mvns	r2, r3
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	4013      	ands	r3, r2
 80059bc:	b29b      	uxth	r3, r3
 80059be:	2b00      	cmp	r3, #0
 80059c0:	bf14      	ite	ne
 80059c2:	2301      	movne	r3, #1
 80059c4:	2300      	moveq	r3, #0
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	e00b      	b.n	80059e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	699b      	ldr	r3, [r3, #24]
 80059d0:	43da      	mvns	r2, r3
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	4013      	ands	r3, r2
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	2b00      	cmp	r3, #0
 80059da:	bf14      	ite	ne
 80059dc:	2301      	movne	r3, #1
 80059de:	2300      	moveq	r3, #0
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d18d      	bne.n	8005902 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80059e6:	2300      	movs	r3, #0
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3710      	adds	r7, #16
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}

080059f0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b084      	sub	sp, #16
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	60f8      	str	r0, [r7, #12]
 80059f8:	60b9      	str	r1, [r7, #8]
 80059fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80059fc:	e02d      	b.n	8005a5a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80059fe:	68f8      	ldr	r0, [r7, #12]
 8005a00:	f000 f8ce 	bl	8005ba0 <I2C_IsAcknowledgeFailed>
 8005a04:	4603      	mov	r3, r0
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d001      	beq.n	8005a0e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e02d      	b.n	8005a6a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a14:	d021      	beq.n	8005a5a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a16:	f7fe fa09 	bl	8003e2c <HAL_GetTick>
 8005a1a:	4602      	mov	r2, r0
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	1ad3      	subs	r3, r2, r3
 8005a20:	68ba      	ldr	r2, [r7, #8]
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d302      	bcc.n	8005a2c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d116      	bne.n	8005a5a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2220      	movs	r2, #32
 8005a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a46:	f043 0220 	orr.w	r2, r3, #32
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2200      	movs	r2, #0
 8005a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	e007      	b.n	8005a6a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	695b      	ldr	r3, [r3, #20]
 8005a60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a64:	2b80      	cmp	r3, #128	; 0x80
 8005a66:	d1ca      	bne.n	80059fe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005a68:	2300      	movs	r3, #0
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3710      	adds	r7, #16
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}

08005a72 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a72:	b580      	push	{r7, lr}
 8005a74:	b084      	sub	sp, #16
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	60f8      	str	r0, [r7, #12]
 8005a7a:	60b9      	str	r1, [r7, #8]
 8005a7c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005a7e:	e02d      	b.n	8005adc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005a80:	68f8      	ldr	r0, [r7, #12]
 8005a82:	f000 f88d 	bl	8005ba0 <I2C_IsAcknowledgeFailed>
 8005a86:	4603      	mov	r3, r0
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d001      	beq.n	8005a90 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e02d      	b.n	8005aec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a96:	d021      	beq.n	8005adc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a98:	f7fe f9c8 	bl	8003e2c <HAL_GetTick>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	1ad3      	subs	r3, r2, r3
 8005aa2:	68ba      	ldr	r2, [r7, #8]
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d302      	bcc.n	8005aae <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d116      	bne.n	8005adc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2220      	movs	r2, #32
 8005ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac8:	f043 0220 	orr.w	r2, r3, #32
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	e007      	b.n	8005aec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	695b      	ldr	r3, [r3, #20]
 8005ae2:	f003 0304 	and.w	r3, r3, #4
 8005ae6:	2b04      	cmp	r3, #4
 8005ae8:	d1ca      	bne.n	8005a80 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005aea:	2300      	movs	r3, #0
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3710      	adds	r7, #16
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b084      	sub	sp, #16
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	60f8      	str	r0, [r7, #12]
 8005afc:	60b9      	str	r1, [r7, #8]
 8005afe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005b00:	e042      	b.n	8005b88 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	695b      	ldr	r3, [r3, #20]
 8005b08:	f003 0310 	and.w	r3, r3, #16
 8005b0c:	2b10      	cmp	r3, #16
 8005b0e:	d119      	bne.n	8005b44 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f06f 0210 	mvn.w	r2, #16
 8005b18:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2220      	movs	r2, #32
 8005b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	e029      	b.n	8005b98 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b44:	f7fe f972 	bl	8003e2c <HAL_GetTick>
 8005b48:	4602      	mov	r2, r0
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	1ad3      	subs	r3, r2, r3
 8005b4e:	68ba      	ldr	r2, [r7, #8]
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d302      	bcc.n	8005b5a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d116      	bne.n	8005b88 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2220      	movs	r2, #32
 8005b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b74:	f043 0220 	orr.w	r2, r3, #32
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	e007      	b.n	8005b98 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	695b      	ldr	r3, [r3, #20]
 8005b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b92:	2b40      	cmp	r3, #64	; 0x40
 8005b94:	d1b5      	bne.n	8005b02 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005b96:	2300      	movs	r3, #0
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3710      	adds	r7, #16
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b083      	sub	sp, #12
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	695b      	ldr	r3, [r3, #20]
 8005bae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bb6:	d11b      	bne.n	8005bf0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005bc0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2220      	movs	r2, #32
 8005bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bdc:	f043 0204 	orr.w	r2, r3, #4
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2200      	movs	r2, #0
 8005be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	e000      	b.n	8005bf2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005bf0:	2300      	movs	r3, #0
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	370c      	adds	r7, #12
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr
	...

08005c00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b086      	sub	sp, #24
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d101      	bne.n	8005c12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e264      	b.n	80060dc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f003 0301 	and.w	r3, r3, #1
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d075      	beq.n	8005d0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005c1e:	4ba3      	ldr	r3, [pc, #652]	; (8005eac <HAL_RCC_OscConfig+0x2ac>)
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	f003 030c 	and.w	r3, r3, #12
 8005c26:	2b04      	cmp	r3, #4
 8005c28:	d00c      	beq.n	8005c44 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c2a:	4ba0      	ldr	r3, [pc, #640]	; (8005eac <HAL_RCC_OscConfig+0x2ac>)
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005c32:	2b08      	cmp	r3, #8
 8005c34:	d112      	bne.n	8005c5c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c36:	4b9d      	ldr	r3, [pc, #628]	; (8005eac <HAL_RCC_OscConfig+0x2ac>)
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c42:	d10b      	bne.n	8005c5c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c44:	4b99      	ldr	r3, [pc, #612]	; (8005eac <HAL_RCC_OscConfig+0x2ac>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d05b      	beq.n	8005d08 <HAL_RCC_OscConfig+0x108>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d157      	bne.n	8005d08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	e23f      	b.n	80060dc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c64:	d106      	bne.n	8005c74 <HAL_RCC_OscConfig+0x74>
 8005c66:	4b91      	ldr	r3, [pc, #580]	; (8005eac <HAL_RCC_OscConfig+0x2ac>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a90      	ldr	r2, [pc, #576]	; (8005eac <HAL_RCC_OscConfig+0x2ac>)
 8005c6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c70:	6013      	str	r3, [r2, #0]
 8005c72:	e01d      	b.n	8005cb0 <HAL_RCC_OscConfig+0xb0>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c7c:	d10c      	bne.n	8005c98 <HAL_RCC_OscConfig+0x98>
 8005c7e:	4b8b      	ldr	r3, [pc, #556]	; (8005eac <HAL_RCC_OscConfig+0x2ac>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a8a      	ldr	r2, [pc, #552]	; (8005eac <HAL_RCC_OscConfig+0x2ac>)
 8005c84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c88:	6013      	str	r3, [r2, #0]
 8005c8a:	4b88      	ldr	r3, [pc, #544]	; (8005eac <HAL_RCC_OscConfig+0x2ac>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a87      	ldr	r2, [pc, #540]	; (8005eac <HAL_RCC_OscConfig+0x2ac>)
 8005c90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c94:	6013      	str	r3, [r2, #0]
 8005c96:	e00b      	b.n	8005cb0 <HAL_RCC_OscConfig+0xb0>
 8005c98:	4b84      	ldr	r3, [pc, #528]	; (8005eac <HAL_RCC_OscConfig+0x2ac>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a83      	ldr	r2, [pc, #524]	; (8005eac <HAL_RCC_OscConfig+0x2ac>)
 8005c9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ca2:	6013      	str	r3, [r2, #0]
 8005ca4:	4b81      	ldr	r3, [pc, #516]	; (8005eac <HAL_RCC_OscConfig+0x2ac>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a80      	ldr	r2, [pc, #512]	; (8005eac <HAL_RCC_OscConfig+0x2ac>)
 8005caa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005cae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d013      	beq.n	8005ce0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cb8:	f7fe f8b8 	bl	8003e2c <HAL_GetTick>
 8005cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cbe:	e008      	b.n	8005cd2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005cc0:	f7fe f8b4 	bl	8003e2c <HAL_GetTick>
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	1ad3      	subs	r3, r2, r3
 8005cca:	2b64      	cmp	r3, #100	; 0x64
 8005ccc:	d901      	bls.n	8005cd2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005cce:	2303      	movs	r3, #3
 8005cd0:	e204      	b.n	80060dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cd2:	4b76      	ldr	r3, [pc, #472]	; (8005eac <HAL_RCC_OscConfig+0x2ac>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d0f0      	beq.n	8005cc0 <HAL_RCC_OscConfig+0xc0>
 8005cde:	e014      	b.n	8005d0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ce0:	f7fe f8a4 	bl	8003e2c <HAL_GetTick>
 8005ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ce6:	e008      	b.n	8005cfa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ce8:	f7fe f8a0 	bl	8003e2c <HAL_GetTick>
 8005cec:	4602      	mov	r2, r0
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	1ad3      	subs	r3, r2, r3
 8005cf2:	2b64      	cmp	r3, #100	; 0x64
 8005cf4:	d901      	bls.n	8005cfa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005cf6:	2303      	movs	r3, #3
 8005cf8:	e1f0      	b.n	80060dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005cfa:	4b6c      	ldr	r3, [pc, #432]	; (8005eac <HAL_RCC_OscConfig+0x2ac>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d1f0      	bne.n	8005ce8 <HAL_RCC_OscConfig+0xe8>
 8005d06:	e000      	b.n	8005d0a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f003 0302 	and.w	r3, r3, #2
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d063      	beq.n	8005dde <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005d16:	4b65      	ldr	r3, [pc, #404]	; (8005eac <HAL_RCC_OscConfig+0x2ac>)
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	f003 030c 	and.w	r3, r3, #12
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d00b      	beq.n	8005d3a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d22:	4b62      	ldr	r3, [pc, #392]	; (8005eac <HAL_RCC_OscConfig+0x2ac>)
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005d2a:	2b08      	cmp	r3, #8
 8005d2c:	d11c      	bne.n	8005d68 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d2e:	4b5f      	ldr	r3, [pc, #380]	; (8005eac <HAL_RCC_OscConfig+0x2ac>)
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d116      	bne.n	8005d68 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d3a:	4b5c      	ldr	r3, [pc, #368]	; (8005eac <HAL_RCC_OscConfig+0x2ac>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f003 0302 	and.w	r3, r3, #2
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d005      	beq.n	8005d52 <HAL_RCC_OscConfig+0x152>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	68db      	ldr	r3, [r3, #12]
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d001      	beq.n	8005d52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	e1c4      	b.n	80060dc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d52:	4b56      	ldr	r3, [pc, #344]	; (8005eac <HAL_RCC_OscConfig+0x2ac>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	691b      	ldr	r3, [r3, #16]
 8005d5e:	00db      	lsls	r3, r3, #3
 8005d60:	4952      	ldr	r1, [pc, #328]	; (8005eac <HAL_RCC_OscConfig+0x2ac>)
 8005d62:	4313      	orrs	r3, r2
 8005d64:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d66:	e03a      	b.n	8005dde <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	68db      	ldr	r3, [r3, #12]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d020      	beq.n	8005db2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d70:	4b4f      	ldr	r3, [pc, #316]	; (8005eb0 <HAL_RCC_OscConfig+0x2b0>)
 8005d72:	2201      	movs	r2, #1
 8005d74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d76:	f7fe f859 	bl	8003e2c <HAL_GetTick>
 8005d7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d7c:	e008      	b.n	8005d90 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d7e:	f7fe f855 	bl	8003e2c <HAL_GetTick>
 8005d82:	4602      	mov	r2, r0
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	1ad3      	subs	r3, r2, r3
 8005d88:	2b02      	cmp	r3, #2
 8005d8a:	d901      	bls.n	8005d90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005d8c:	2303      	movs	r3, #3
 8005d8e:	e1a5      	b.n	80060dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d90:	4b46      	ldr	r3, [pc, #280]	; (8005eac <HAL_RCC_OscConfig+0x2ac>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f003 0302 	and.w	r3, r3, #2
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d0f0      	beq.n	8005d7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d9c:	4b43      	ldr	r3, [pc, #268]	; (8005eac <HAL_RCC_OscConfig+0x2ac>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	691b      	ldr	r3, [r3, #16]
 8005da8:	00db      	lsls	r3, r3, #3
 8005daa:	4940      	ldr	r1, [pc, #256]	; (8005eac <HAL_RCC_OscConfig+0x2ac>)
 8005dac:	4313      	orrs	r3, r2
 8005dae:	600b      	str	r3, [r1, #0]
 8005db0:	e015      	b.n	8005dde <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005db2:	4b3f      	ldr	r3, [pc, #252]	; (8005eb0 <HAL_RCC_OscConfig+0x2b0>)
 8005db4:	2200      	movs	r2, #0
 8005db6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005db8:	f7fe f838 	bl	8003e2c <HAL_GetTick>
 8005dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005dbe:	e008      	b.n	8005dd2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005dc0:	f7fe f834 	bl	8003e2c <HAL_GetTick>
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	1ad3      	subs	r3, r2, r3
 8005dca:	2b02      	cmp	r3, #2
 8005dcc:	d901      	bls.n	8005dd2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005dce:	2303      	movs	r3, #3
 8005dd0:	e184      	b.n	80060dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005dd2:	4b36      	ldr	r3, [pc, #216]	; (8005eac <HAL_RCC_OscConfig+0x2ac>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f003 0302 	and.w	r3, r3, #2
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d1f0      	bne.n	8005dc0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f003 0308 	and.w	r3, r3, #8
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d030      	beq.n	8005e4c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	695b      	ldr	r3, [r3, #20]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d016      	beq.n	8005e20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005df2:	4b30      	ldr	r3, [pc, #192]	; (8005eb4 <HAL_RCC_OscConfig+0x2b4>)
 8005df4:	2201      	movs	r2, #1
 8005df6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005df8:	f7fe f818 	bl	8003e2c <HAL_GetTick>
 8005dfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005dfe:	e008      	b.n	8005e12 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e00:	f7fe f814 	bl	8003e2c <HAL_GetTick>
 8005e04:	4602      	mov	r2, r0
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	1ad3      	subs	r3, r2, r3
 8005e0a:	2b02      	cmp	r3, #2
 8005e0c:	d901      	bls.n	8005e12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005e0e:	2303      	movs	r3, #3
 8005e10:	e164      	b.n	80060dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e12:	4b26      	ldr	r3, [pc, #152]	; (8005eac <HAL_RCC_OscConfig+0x2ac>)
 8005e14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e16:	f003 0302 	and.w	r3, r3, #2
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d0f0      	beq.n	8005e00 <HAL_RCC_OscConfig+0x200>
 8005e1e:	e015      	b.n	8005e4c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e20:	4b24      	ldr	r3, [pc, #144]	; (8005eb4 <HAL_RCC_OscConfig+0x2b4>)
 8005e22:	2200      	movs	r2, #0
 8005e24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e26:	f7fe f801 	bl	8003e2c <HAL_GetTick>
 8005e2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e2c:	e008      	b.n	8005e40 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e2e:	f7fd fffd 	bl	8003e2c <HAL_GetTick>
 8005e32:	4602      	mov	r2, r0
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	1ad3      	subs	r3, r2, r3
 8005e38:	2b02      	cmp	r3, #2
 8005e3a:	d901      	bls.n	8005e40 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005e3c:	2303      	movs	r3, #3
 8005e3e:	e14d      	b.n	80060dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e40:	4b1a      	ldr	r3, [pc, #104]	; (8005eac <HAL_RCC_OscConfig+0x2ac>)
 8005e42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e44:	f003 0302 	and.w	r3, r3, #2
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d1f0      	bne.n	8005e2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f003 0304 	and.w	r3, r3, #4
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	f000 80a0 	beq.w	8005f9a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e5e:	4b13      	ldr	r3, [pc, #76]	; (8005eac <HAL_RCC_OscConfig+0x2ac>)
 8005e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d10f      	bne.n	8005e8a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	60bb      	str	r3, [r7, #8]
 8005e6e:	4b0f      	ldr	r3, [pc, #60]	; (8005eac <HAL_RCC_OscConfig+0x2ac>)
 8005e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e72:	4a0e      	ldr	r2, [pc, #56]	; (8005eac <HAL_RCC_OscConfig+0x2ac>)
 8005e74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e78:	6413      	str	r3, [r2, #64]	; 0x40
 8005e7a:	4b0c      	ldr	r3, [pc, #48]	; (8005eac <HAL_RCC_OscConfig+0x2ac>)
 8005e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e82:	60bb      	str	r3, [r7, #8]
 8005e84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e86:	2301      	movs	r3, #1
 8005e88:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e8a:	4b0b      	ldr	r3, [pc, #44]	; (8005eb8 <HAL_RCC_OscConfig+0x2b8>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d121      	bne.n	8005eda <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e96:	4b08      	ldr	r3, [pc, #32]	; (8005eb8 <HAL_RCC_OscConfig+0x2b8>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a07      	ldr	r2, [pc, #28]	; (8005eb8 <HAL_RCC_OscConfig+0x2b8>)
 8005e9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ea0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ea2:	f7fd ffc3 	bl	8003e2c <HAL_GetTick>
 8005ea6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ea8:	e011      	b.n	8005ece <HAL_RCC_OscConfig+0x2ce>
 8005eaa:	bf00      	nop
 8005eac:	40023800 	.word	0x40023800
 8005eb0:	42470000 	.word	0x42470000
 8005eb4:	42470e80 	.word	0x42470e80
 8005eb8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ebc:	f7fd ffb6 	bl	8003e2c <HAL_GetTick>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	1ad3      	subs	r3, r2, r3
 8005ec6:	2b02      	cmp	r3, #2
 8005ec8:	d901      	bls.n	8005ece <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005eca:	2303      	movs	r3, #3
 8005ecc:	e106      	b.n	80060dc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ece:	4b85      	ldr	r3, [pc, #532]	; (80060e4 <HAL_RCC_OscConfig+0x4e4>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d0f0      	beq.n	8005ebc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	d106      	bne.n	8005ef0 <HAL_RCC_OscConfig+0x2f0>
 8005ee2:	4b81      	ldr	r3, [pc, #516]	; (80060e8 <HAL_RCC_OscConfig+0x4e8>)
 8005ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ee6:	4a80      	ldr	r2, [pc, #512]	; (80060e8 <HAL_RCC_OscConfig+0x4e8>)
 8005ee8:	f043 0301 	orr.w	r3, r3, #1
 8005eec:	6713      	str	r3, [r2, #112]	; 0x70
 8005eee:	e01c      	b.n	8005f2a <HAL_RCC_OscConfig+0x32a>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	2b05      	cmp	r3, #5
 8005ef6:	d10c      	bne.n	8005f12 <HAL_RCC_OscConfig+0x312>
 8005ef8:	4b7b      	ldr	r3, [pc, #492]	; (80060e8 <HAL_RCC_OscConfig+0x4e8>)
 8005efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005efc:	4a7a      	ldr	r2, [pc, #488]	; (80060e8 <HAL_RCC_OscConfig+0x4e8>)
 8005efe:	f043 0304 	orr.w	r3, r3, #4
 8005f02:	6713      	str	r3, [r2, #112]	; 0x70
 8005f04:	4b78      	ldr	r3, [pc, #480]	; (80060e8 <HAL_RCC_OscConfig+0x4e8>)
 8005f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f08:	4a77      	ldr	r2, [pc, #476]	; (80060e8 <HAL_RCC_OscConfig+0x4e8>)
 8005f0a:	f043 0301 	orr.w	r3, r3, #1
 8005f0e:	6713      	str	r3, [r2, #112]	; 0x70
 8005f10:	e00b      	b.n	8005f2a <HAL_RCC_OscConfig+0x32a>
 8005f12:	4b75      	ldr	r3, [pc, #468]	; (80060e8 <HAL_RCC_OscConfig+0x4e8>)
 8005f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f16:	4a74      	ldr	r2, [pc, #464]	; (80060e8 <HAL_RCC_OscConfig+0x4e8>)
 8005f18:	f023 0301 	bic.w	r3, r3, #1
 8005f1c:	6713      	str	r3, [r2, #112]	; 0x70
 8005f1e:	4b72      	ldr	r3, [pc, #456]	; (80060e8 <HAL_RCC_OscConfig+0x4e8>)
 8005f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f22:	4a71      	ldr	r2, [pc, #452]	; (80060e8 <HAL_RCC_OscConfig+0x4e8>)
 8005f24:	f023 0304 	bic.w	r3, r3, #4
 8005f28:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d015      	beq.n	8005f5e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f32:	f7fd ff7b 	bl	8003e2c <HAL_GetTick>
 8005f36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f38:	e00a      	b.n	8005f50 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f3a:	f7fd ff77 	bl	8003e2c <HAL_GetTick>
 8005f3e:	4602      	mov	r2, r0
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	1ad3      	subs	r3, r2, r3
 8005f44:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d901      	bls.n	8005f50 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005f4c:	2303      	movs	r3, #3
 8005f4e:	e0c5      	b.n	80060dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f50:	4b65      	ldr	r3, [pc, #404]	; (80060e8 <HAL_RCC_OscConfig+0x4e8>)
 8005f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f54:	f003 0302 	and.w	r3, r3, #2
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d0ee      	beq.n	8005f3a <HAL_RCC_OscConfig+0x33a>
 8005f5c:	e014      	b.n	8005f88 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f5e:	f7fd ff65 	bl	8003e2c <HAL_GetTick>
 8005f62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f64:	e00a      	b.n	8005f7c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f66:	f7fd ff61 	bl	8003e2c <HAL_GetTick>
 8005f6a:	4602      	mov	r2, r0
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	1ad3      	subs	r3, r2, r3
 8005f70:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d901      	bls.n	8005f7c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005f78:	2303      	movs	r3, #3
 8005f7a:	e0af      	b.n	80060dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f7c:	4b5a      	ldr	r3, [pc, #360]	; (80060e8 <HAL_RCC_OscConfig+0x4e8>)
 8005f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f80:	f003 0302 	and.w	r3, r3, #2
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d1ee      	bne.n	8005f66 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005f88:	7dfb      	ldrb	r3, [r7, #23]
 8005f8a:	2b01      	cmp	r3, #1
 8005f8c:	d105      	bne.n	8005f9a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f8e:	4b56      	ldr	r3, [pc, #344]	; (80060e8 <HAL_RCC_OscConfig+0x4e8>)
 8005f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f92:	4a55      	ldr	r2, [pc, #340]	; (80060e8 <HAL_RCC_OscConfig+0x4e8>)
 8005f94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f98:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	699b      	ldr	r3, [r3, #24]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	f000 809b 	beq.w	80060da <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005fa4:	4b50      	ldr	r3, [pc, #320]	; (80060e8 <HAL_RCC_OscConfig+0x4e8>)
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	f003 030c 	and.w	r3, r3, #12
 8005fac:	2b08      	cmp	r3, #8
 8005fae:	d05c      	beq.n	800606a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	699b      	ldr	r3, [r3, #24]
 8005fb4:	2b02      	cmp	r3, #2
 8005fb6:	d141      	bne.n	800603c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fb8:	4b4c      	ldr	r3, [pc, #304]	; (80060ec <HAL_RCC_OscConfig+0x4ec>)
 8005fba:	2200      	movs	r2, #0
 8005fbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fbe:	f7fd ff35 	bl	8003e2c <HAL_GetTick>
 8005fc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fc4:	e008      	b.n	8005fd8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005fc6:	f7fd ff31 	bl	8003e2c <HAL_GetTick>
 8005fca:	4602      	mov	r2, r0
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	1ad3      	subs	r3, r2, r3
 8005fd0:	2b02      	cmp	r3, #2
 8005fd2:	d901      	bls.n	8005fd8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005fd4:	2303      	movs	r3, #3
 8005fd6:	e081      	b.n	80060dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fd8:	4b43      	ldr	r3, [pc, #268]	; (80060e8 <HAL_RCC_OscConfig+0x4e8>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d1f0      	bne.n	8005fc6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	69da      	ldr	r2, [r3, #28]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6a1b      	ldr	r3, [r3, #32]
 8005fec:	431a      	orrs	r2, r3
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff2:	019b      	lsls	r3, r3, #6
 8005ff4:	431a      	orrs	r2, r3
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ffa:	085b      	lsrs	r3, r3, #1
 8005ffc:	3b01      	subs	r3, #1
 8005ffe:	041b      	lsls	r3, r3, #16
 8006000:	431a      	orrs	r2, r3
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006006:	061b      	lsls	r3, r3, #24
 8006008:	4937      	ldr	r1, [pc, #220]	; (80060e8 <HAL_RCC_OscConfig+0x4e8>)
 800600a:	4313      	orrs	r3, r2
 800600c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800600e:	4b37      	ldr	r3, [pc, #220]	; (80060ec <HAL_RCC_OscConfig+0x4ec>)
 8006010:	2201      	movs	r2, #1
 8006012:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006014:	f7fd ff0a 	bl	8003e2c <HAL_GetTick>
 8006018:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800601a:	e008      	b.n	800602e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800601c:	f7fd ff06 	bl	8003e2c <HAL_GetTick>
 8006020:	4602      	mov	r2, r0
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	1ad3      	subs	r3, r2, r3
 8006026:	2b02      	cmp	r3, #2
 8006028:	d901      	bls.n	800602e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800602a:	2303      	movs	r3, #3
 800602c:	e056      	b.n	80060dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800602e:	4b2e      	ldr	r3, [pc, #184]	; (80060e8 <HAL_RCC_OscConfig+0x4e8>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006036:	2b00      	cmp	r3, #0
 8006038:	d0f0      	beq.n	800601c <HAL_RCC_OscConfig+0x41c>
 800603a:	e04e      	b.n	80060da <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800603c:	4b2b      	ldr	r3, [pc, #172]	; (80060ec <HAL_RCC_OscConfig+0x4ec>)
 800603e:	2200      	movs	r2, #0
 8006040:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006042:	f7fd fef3 	bl	8003e2c <HAL_GetTick>
 8006046:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006048:	e008      	b.n	800605c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800604a:	f7fd feef 	bl	8003e2c <HAL_GetTick>
 800604e:	4602      	mov	r2, r0
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	1ad3      	subs	r3, r2, r3
 8006054:	2b02      	cmp	r3, #2
 8006056:	d901      	bls.n	800605c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006058:	2303      	movs	r3, #3
 800605a:	e03f      	b.n	80060dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800605c:	4b22      	ldr	r3, [pc, #136]	; (80060e8 <HAL_RCC_OscConfig+0x4e8>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006064:	2b00      	cmp	r3, #0
 8006066:	d1f0      	bne.n	800604a <HAL_RCC_OscConfig+0x44a>
 8006068:	e037      	b.n	80060da <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	699b      	ldr	r3, [r3, #24]
 800606e:	2b01      	cmp	r3, #1
 8006070:	d101      	bne.n	8006076 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	e032      	b.n	80060dc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006076:	4b1c      	ldr	r3, [pc, #112]	; (80060e8 <HAL_RCC_OscConfig+0x4e8>)
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	699b      	ldr	r3, [r3, #24]
 8006080:	2b01      	cmp	r3, #1
 8006082:	d028      	beq.n	80060d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800608e:	429a      	cmp	r2, r3
 8006090:	d121      	bne.n	80060d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800609c:	429a      	cmp	r2, r3
 800609e:	d11a      	bne.n	80060d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80060a0:	68fa      	ldr	r2, [r7, #12]
 80060a2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80060a6:	4013      	ands	r3, r2
 80060a8:	687a      	ldr	r2, [r7, #4]
 80060aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80060ac:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d111      	bne.n	80060d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060bc:	085b      	lsrs	r3, r3, #1
 80060be:	3b01      	subs	r3, #1
 80060c0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80060c2:	429a      	cmp	r2, r3
 80060c4:	d107      	bne.n	80060d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80060d2:	429a      	cmp	r2, r3
 80060d4:	d001      	beq.n	80060da <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	e000      	b.n	80060dc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80060da:	2300      	movs	r3, #0
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3718      	adds	r7, #24
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}
 80060e4:	40007000 	.word	0x40007000
 80060e8:	40023800 	.word	0x40023800
 80060ec:	42470060 	.word	0x42470060

080060f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b084      	sub	sp, #16
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d101      	bne.n	8006104 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006100:	2301      	movs	r3, #1
 8006102:	e0cc      	b.n	800629e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006104:	4b68      	ldr	r3, [pc, #416]	; (80062a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f003 0307 	and.w	r3, r3, #7
 800610c:	683a      	ldr	r2, [r7, #0]
 800610e:	429a      	cmp	r2, r3
 8006110:	d90c      	bls.n	800612c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006112:	4b65      	ldr	r3, [pc, #404]	; (80062a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006114:	683a      	ldr	r2, [r7, #0]
 8006116:	b2d2      	uxtb	r2, r2
 8006118:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800611a:	4b63      	ldr	r3, [pc, #396]	; (80062a8 <HAL_RCC_ClockConfig+0x1b8>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f003 0307 	and.w	r3, r3, #7
 8006122:	683a      	ldr	r2, [r7, #0]
 8006124:	429a      	cmp	r2, r3
 8006126:	d001      	beq.n	800612c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006128:	2301      	movs	r3, #1
 800612a:	e0b8      	b.n	800629e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f003 0302 	and.w	r3, r3, #2
 8006134:	2b00      	cmp	r3, #0
 8006136:	d020      	beq.n	800617a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f003 0304 	and.w	r3, r3, #4
 8006140:	2b00      	cmp	r3, #0
 8006142:	d005      	beq.n	8006150 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006144:	4b59      	ldr	r3, [pc, #356]	; (80062ac <HAL_RCC_ClockConfig+0x1bc>)
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	4a58      	ldr	r2, [pc, #352]	; (80062ac <HAL_RCC_ClockConfig+0x1bc>)
 800614a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800614e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f003 0308 	and.w	r3, r3, #8
 8006158:	2b00      	cmp	r3, #0
 800615a:	d005      	beq.n	8006168 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800615c:	4b53      	ldr	r3, [pc, #332]	; (80062ac <HAL_RCC_ClockConfig+0x1bc>)
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	4a52      	ldr	r2, [pc, #328]	; (80062ac <HAL_RCC_ClockConfig+0x1bc>)
 8006162:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006166:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006168:	4b50      	ldr	r3, [pc, #320]	; (80062ac <HAL_RCC_ClockConfig+0x1bc>)
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	494d      	ldr	r1, [pc, #308]	; (80062ac <HAL_RCC_ClockConfig+0x1bc>)
 8006176:	4313      	orrs	r3, r2
 8006178:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f003 0301 	and.w	r3, r3, #1
 8006182:	2b00      	cmp	r3, #0
 8006184:	d044      	beq.n	8006210 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	2b01      	cmp	r3, #1
 800618c:	d107      	bne.n	800619e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800618e:	4b47      	ldr	r3, [pc, #284]	; (80062ac <HAL_RCC_ClockConfig+0x1bc>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006196:	2b00      	cmp	r3, #0
 8006198:	d119      	bne.n	80061ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	e07f      	b.n	800629e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	2b02      	cmp	r3, #2
 80061a4:	d003      	beq.n	80061ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80061aa:	2b03      	cmp	r3, #3
 80061ac:	d107      	bne.n	80061be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061ae:	4b3f      	ldr	r3, [pc, #252]	; (80062ac <HAL_RCC_ClockConfig+0x1bc>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d109      	bne.n	80061ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	e06f      	b.n	800629e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061be:	4b3b      	ldr	r3, [pc, #236]	; (80062ac <HAL_RCC_ClockConfig+0x1bc>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f003 0302 	and.w	r3, r3, #2
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d101      	bne.n	80061ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	e067      	b.n	800629e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80061ce:	4b37      	ldr	r3, [pc, #220]	; (80062ac <HAL_RCC_ClockConfig+0x1bc>)
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	f023 0203 	bic.w	r2, r3, #3
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	4934      	ldr	r1, [pc, #208]	; (80062ac <HAL_RCC_ClockConfig+0x1bc>)
 80061dc:	4313      	orrs	r3, r2
 80061de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80061e0:	f7fd fe24 	bl	8003e2c <HAL_GetTick>
 80061e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061e6:	e00a      	b.n	80061fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061e8:	f7fd fe20 	bl	8003e2c <HAL_GetTick>
 80061ec:	4602      	mov	r2, r0
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	1ad3      	subs	r3, r2, r3
 80061f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d901      	bls.n	80061fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80061fa:	2303      	movs	r3, #3
 80061fc:	e04f      	b.n	800629e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061fe:	4b2b      	ldr	r3, [pc, #172]	; (80062ac <HAL_RCC_ClockConfig+0x1bc>)
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	f003 020c 	and.w	r2, r3, #12
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	009b      	lsls	r3, r3, #2
 800620c:	429a      	cmp	r2, r3
 800620e:	d1eb      	bne.n	80061e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006210:	4b25      	ldr	r3, [pc, #148]	; (80062a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f003 0307 	and.w	r3, r3, #7
 8006218:	683a      	ldr	r2, [r7, #0]
 800621a:	429a      	cmp	r2, r3
 800621c:	d20c      	bcs.n	8006238 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800621e:	4b22      	ldr	r3, [pc, #136]	; (80062a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006220:	683a      	ldr	r2, [r7, #0]
 8006222:	b2d2      	uxtb	r2, r2
 8006224:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006226:	4b20      	ldr	r3, [pc, #128]	; (80062a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f003 0307 	and.w	r3, r3, #7
 800622e:	683a      	ldr	r2, [r7, #0]
 8006230:	429a      	cmp	r2, r3
 8006232:	d001      	beq.n	8006238 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006234:	2301      	movs	r3, #1
 8006236:	e032      	b.n	800629e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f003 0304 	and.w	r3, r3, #4
 8006240:	2b00      	cmp	r3, #0
 8006242:	d008      	beq.n	8006256 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006244:	4b19      	ldr	r3, [pc, #100]	; (80062ac <HAL_RCC_ClockConfig+0x1bc>)
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	68db      	ldr	r3, [r3, #12]
 8006250:	4916      	ldr	r1, [pc, #88]	; (80062ac <HAL_RCC_ClockConfig+0x1bc>)
 8006252:	4313      	orrs	r3, r2
 8006254:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f003 0308 	and.w	r3, r3, #8
 800625e:	2b00      	cmp	r3, #0
 8006260:	d009      	beq.n	8006276 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006262:	4b12      	ldr	r3, [pc, #72]	; (80062ac <HAL_RCC_ClockConfig+0x1bc>)
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	691b      	ldr	r3, [r3, #16]
 800626e:	00db      	lsls	r3, r3, #3
 8006270:	490e      	ldr	r1, [pc, #56]	; (80062ac <HAL_RCC_ClockConfig+0x1bc>)
 8006272:	4313      	orrs	r3, r2
 8006274:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006276:	f000 f821 	bl	80062bc <HAL_RCC_GetSysClockFreq>
 800627a:	4602      	mov	r2, r0
 800627c:	4b0b      	ldr	r3, [pc, #44]	; (80062ac <HAL_RCC_ClockConfig+0x1bc>)
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	091b      	lsrs	r3, r3, #4
 8006282:	f003 030f 	and.w	r3, r3, #15
 8006286:	490a      	ldr	r1, [pc, #40]	; (80062b0 <HAL_RCC_ClockConfig+0x1c0>)
 8006288:	5ccb      	ldrb	r3, [r1, r3]
 800628a:	fa22 f303 	lsr.w	r3, r2, r3
 800628e:	4a09      	ldr	r2, [pc, #36]	; (80062b4 <HAL_RCC_ClockConfig+0x1c4>)
 8006290:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006292:	4b09      	ldr	r3, [pc, #36]	; (80062b8 <HAL_RCC_ClockConfig+0x1c8>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4618      	mov	r0, r3
 8006298:	f7fd fd84 	bl	8003da4 <HAL_InitTick>

  return HAL_OK;
 800629c:	2300      	movs	r3, #0
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3710      	adds	r7, #16
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}
 80062a6:	bf00      	nop
 80062a8:	40023c00 	.word	0x40023c00
 80062ac:	40023800 	.word	0x40023800
 80062b0:	0800e8e0 	.word	0x0800e8e0
 80062b4:	2000000c 	.word	0x2000000c
 80062b8:	20000010 	.word	0x20000010

080062bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80062bc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80062c0:	b084      	sub	sp, #16
 80062c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80062c4:	2300      	movs	r3, #0
 80062c6:	607b      	str	r3, [r7, #4]
 80062c8:	2300      	movs	r3, #0
 80062ca:	60fb      	str	r3, [r7, #12]
 80062cc:	2300      	movs	r3, #0
 80062ce:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80062d0:	2300      	movs	r3, #0
 80062d2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80062d4:	4b67      	ldr	r3, [pc, #412]	; (8006474 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	f003 030c 	and.w	r3, r3, #12
 80062dc:	2b08      	cmp	r3, #8
 80062de:	d00d      	beq.n	80062fc <HAL_RCC_GetSysClockFreq+0x40>
 80062e0:	2b08      	cmp	r3, #8
 80062e2:	f200 80bd 	bhi.w	8006460 <HAL_RCC_GetSysClockFreq+0x1a4>
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d002      	beq.n	80062f0 <HAL_RCC_GetSysClockFreq+0x34>
 80062ea:	2b04      	cmp	r3, #4
 80062ec:	d003      	beq.n	80062f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80062ee:	e0b7      	b.n	8006460 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80062f0:	4b61      	ldr	r3, [pc, #388]	; (8006478 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80062f2:	60bb      	str	r3, [r7, #8]
       break;
 80062f4:	e0b7      	b.n	8006466 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80062f6:	4b61      	ldr	r3, [pc, #388]	; (800647c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80062f8:	60bb      	str	r3, [r7, #8]
      break;
 80062fa:	e0b4      	b.n	8006466 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80062fc:	4b5d      	ldr	r3, [pc, #372]	; (8006474 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006304:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006306:	4b5b      	ldr	r3, [pc, #364]	; (8006474 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800630e:	2b00      	cmp	r3, #0
 8006310:	d04d      	beq.n	80063ae <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006312:	4b58      	ldr	r3, [pc, #352]	; (8006474 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	099b      	lsrs	r3, r3, #6
 8006318:	461a      	mov	r2, r3
 800631a:	f04f 0300 	mov.w	r3, #0
 800631e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006322:	f04f 0100 	mov.w	r1, #0
 8006326:	ea02 0800 	and.w	r8, r2, r0
 800632a:	ea03 0901 	and.w	r9, r3, r1
 800632e:	4640      	mov	r0, r8
 8006330:	4649      	mov	r1, r9
 8006332:	f04f 0200 	mov.w	r2, #0
 8006336:	f04f 0300 	mov.w	r3, #0
 800633a:	014b      	lsls	r3, r1, #5
 800633c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006340:	0142      	lsls	r2, r0, #5
 8006342:	4610      	mov	r0, r2
 8006344:	4619      	mov	r1, r3
 8006346:	ebb0 0008 	subs.w	r0, r0, r8
 800634a:	eb61 0109 	sbc.w	r1, r1, r9
 800634e:	f04f 0200 	mov.w	r2, #0
 8006352:	f04f 0300 	mov.w	r3, #0
 8006356:	018b      	lsls	r3, r1, #6
 8006358:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800635c:	0182      	lsls	r2, r0, #6
 800635e:	1a12      	subs	r2, r2, r0
 8006360:	eb63 0301 	sbc.w	r3, r3, r1
 8006364:	f04f 0000 	mov.w	r0, #0
 8006368:	f04f 0100 	mov.w	r1, #0
 800636c:	00d9      	lsls	r1, r3, #3
 800636e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006372:	00d0      	lsls	r0, r2, #3
 8006374:	4602      	mov	r2, r0
 8006376:	460b      	mov	r3, r1
 8006378:	eb12 0208 	adds.w	r2, r2, r8
 800637c:	eb43 0309 	adc.w	r3, r3, r9
 8006380:	f04f 0000 	mov.w	r0, #0
 8006384:	f04f 0100 	mov.w	r1, #0
 8006388:	0259      	lsls	r1, r3, #9
 800638a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800638e:	0250      	lsls	r0, r2, #9
 8006390:	4602      	mov	r2, r0
 8006392:	460b      	mov	r3, r1
 8006394:	4610      	mov	r0, r2
 8006396:	4619      	mov	r1, r3
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	461a      	mov	r2, r3
 800639c:	f04f 0300 	mov.w	r3, #0
 80063a0:	f7fa fc72 	bl	8000c88 <__aeabi_uldivmod>
 80063a4:	4602      	mov	r2, r0
 80063a6:	460b      	mov	r3, r1
 80063a8:	4613      	mov	r3, r2
 80063aa:	60fb      	str	r3, [r7, #12]
 80063ac:	e04a      	b.n	8006444 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80063ae:	4b31      	ldr	r3, [pc, #196]	; (8006474 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	099b      	lsrs	r3, r3, #6
 80063b4:	461a      	mov	r2, r3
 80063b6:	f04f 0300 	mov.w	r3, #0
 80063ba:	f240 10ff 	movw	r0, #511	; 0x1ff
 80063be:	f04f 0100 	mov.w	r1, #0
 80063c2:	ea02 0400 	and.w	r4, r2, r0
 80063c6:	ea03 0501 	and.w	r5, r3, r1
 80063ca:	4620      	mov	r0, r4
 80063cc:	4629      	mov	r1, r5
 80063ce:	f04f 0200 	mov.w	r2, #0
 80063d2:	f04f 0300 	mov.w	r3, #0
 80063d6:	014b      	lsls	r3, r1, #5
 80063d8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80063dc:	0142      	lsls	r2, r0, #5
 80063de:	4610      	mov	r0, r2
 80063e0:	4619      	mov	r1, r3
 80063e2:	1b00      	subs	r0, r0, r4
 80063e4:	eb61 0105 	sbc.w	r1, r1, r5
 80063e8:	f04f 0200 	mov.w	r2, #0
 80063ec:	f04f 0300 	mov.w	r3, #0
 80063f0:	018b      	lsls	r3, r1, #6
 80063f2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80063f6:	0182      	lsls	r2, r0, #6
 80063f8:	1a12      	subs	r2, r2, r0
 80063fa:	eb63 0301 	sbc.w	r3, r3, r1
 80063fe:	f04f 0000 	mov.w	r0, #0
 8006402:	f04f 0100 	mov.w	r1, #0
 8006406:	00d9      	lsls	r1, r3, #3
 8006408:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800640c:	00d0      	lsls	r0, r2, #3
 800640e:	4602      	mov	r2, r0
 8006410:	460b      	mov	r3, r1
 8006412:	1912      	adds	r2, r2, r4
 8006414:	eb45 0303 	adc.w	r3, r5, r3
 8006418:	f04f 0000 	mov.w	r0, #0
 800641c:	f04f 0100 	mov.w	r1, #0
 8006420:	0299      	lsls	r1, r3, #10
 8006422:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006426:	0290      	lsls	r0, r2, #10
 8006428:	4602      	mov	r2, r0
 800642a:	460b      	mov	r3, r1
 800642c:	4610      	mov	r0, r2
 800642e:	4619      	mov	r1, r3
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	461a      	mov	r2, r3
 8006434:	f04f 0300 	mov.w	r3, #0
 8006438:	f7fa fc26 	bl	8000c88 <__aeabi_uldivmod>
 800643c:	4602      	mov	r2, r0
 800643e:	460b      	mov	r3, r1
 8006440:	4613      	mov	r3, r2
 8006442:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006444:	4b0b      	ldr	r3, [pc, #44]	; (8006474 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	0c1b      	lsrs	r3, r3, #16
 800644a:	f003 0303 	and.w	r3, r3, #3
 800644e:	3301      	adds	r3, #1
 8006450:	005b      	lsls	r3, r3, #1
 8006452:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006454:	68fa      	ldr	r2, [r7, #12]
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	fbb2 f3f3 	udiv	r3, r2, r3
 800645c:	60bb      	str	r3, [r7, #8]
      break;
 800645e:	e002      	b.n	8006466 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006460:	4b05      	ldr	r3, [pc, #20]	; (8006478 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006462:	60bb      	str	r3, [r7, #8]
      break;
 8006464:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006466:	68bb      	ldr	r3, [r7, #8]
}
 8006468:	4618      	mov	r0, r3
 800646a:	3710      	adds	r7, #16
 800646c:	46bd      	mov	sp, r7
 800646e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006472:	bf00      	nop
 8006474:	40023800 	.word	0x40023800
 8006478:	00f42400 	.word	0x00f42400
 800647c:	007a1200 	.word	0x007a1200

08006480 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006480:	b480      	push	{r7}
 8006482:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006484:	4b03      	ldr	r3, [pc, #12]	; (8006494 <HAL_RCC_GetHCLKFreq+0x14>)
 8006486:	681b      	ldr	r3, [r3, #0]
}
 8006488:	4618      	mov	r0, r3
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr
 8006492:	bf00      	nop
 8006494:	2000000c 	.word	0x2000000c

08006498 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800649c:	f7ff fff0 	bl	8006480 <HAL_RCC_GetHCLKFreq>
 80064a0:	4602      	mov	r2, r0
 80064a2:	4b05      	ldr	r3, [pc, #20]	; (80064b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	0a9b      	lsrs	r3, r3, #10
 80064a8:	f003 0307 	and.w	r3, r3, #7
 80064ac:	4903      	ldr	r1, [pc, #12]	; (80064bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80064ae:	5ccb      	ldrb	r3, [r1, r3]
 80064b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	bd80      	pop	{r7, pc}
 80064b8:	40023800 	.word	0x40023800
 80064bc:	0800e8f0 	.word	0x0800e8f0

080064c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80064c4:	f7ff ffdc 	bl	8006480 <HAL_RCC_GetHCLKFreq>
 80064c8:	4602      	mov	r2, r0
 80064ca:	4b05      	ldr	r3, [pc, #20]	; (80064e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	0b5b      	lsrs	r3, r3, #13
 80064d0:	f003 0307 	and.w	r3, r3, #7
 80064d4:	4903      	ldr	r1, [pc, #12]	; (80064e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80064d6:	5ccb      	ldrb	r3, [r1, r3]
 80064d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064dc:	4618      	mov	r0, r3
 80064de:	bd80      	pop	{r7, pc}
 80064e0:	40023800 	.word	0x40023800
 80064e4:	0800e8f0 	.word	0x0800e8f0

080064e8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b086      	sub	sp, #24
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80064f0:	2300      	movs	r3, #0
 80064f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80064f4:	2300      	movs	r3, #0
 80064f6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f003 0301 	and.w	r3, r3, #1
 8006500:	2b00      	cmp	r3, #0
 8006502:	d105      	bne.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800650c:	2b00      	cmp	r3, #0
 800650e:	d035      	beq.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006510:	4b62      	ldr	r3, [pc, #392]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006512:	2200      	movs	r2, #0
 8006514:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006516:	f7fd fc89 	bl	8003e2c <HAL_GetTick>
 800651a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800651c:	e008      	b.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800651e:	f7fd fc85 	bl	8003e2c <HAL_GetTick>
 8006522:	4602      	mov	r2, r0
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	1ad3      	subs	r3, r2, r3
 8006528:	2b02      	cmp	r3, #2
 800652a:	d901      	bls.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800652c:	2303      	movs	r3, #3
 800652e:	e0b0      	b.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006530:	4b5b      	ldr	r3, [pc, #364]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006538:	2b00      	cmp	r3, #0
 800653a:	d1f0      	bne.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	019a      	lsls	r2, r3, #6
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	071b      	lsls	r3, r3, #28
 8006548:	4955      	ldr	r1, [pc, #340]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800654a:	4313      	orrs	r3, r2
 800654c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006550:	4b52      	ldr	r3, [pc, #328]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006552:	2201      	movs	r2, #1
 8006554:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006556:	f7fd fc69 	bl	8003e2c <HAL_GetTick>
 800655a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800655c:	e008      	b.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800655e:	f7fd fc65 	bl	8003e2c <HAL_GetTick>
 8006562:	4602      	mov	r2, r0
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	1ad3      	subs	r3, r2, r3
 8006568:	2b02      	cmp	r3, #2
 800656a:	d901      	bls.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800656c:	2303      	movs	r3, #3
 800656e:	e090      	b.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006570:	4b4b      	ldr	r3, [pc, #300]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006578:	2b00      	cmp	r3, #0
 800657a:	d0f0      	beq.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f003 0302 	and.w	r3, r3, #2
 8006584:	2b00      	cmp	r3, #0
 8006586:	f000 8083 	beq.w	8006690 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800658a:	2300      	movs	r3, #0
 800658c:	60fb      	str	r3, [r7, #12]
 800658e:	4b44      	ldr	r3, [pc, #272]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006592:	4a43      	ldr	r2, [pc, #268]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006594:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006598:	6413      	str	r3, [r2, #64]	; 0x40
 800659a:	4b41      	ldr	r3, [pc, #260]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800659c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800659e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065a2:	60fb      	str	r3, [r7, #12]
 80065a4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80065a6:	4b3f      	ldr	r3, [pc, #252]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a3e      	ldr	r2, [pc, #248]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80065ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065b0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80065b2:	f7fd fc3b 	bl	8003e2c <HAL_GetTick>
 80065b6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80065b8:	e008      	b.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80065ba:	f7fd fc37 	bl	8003e2c <HAL_GetTick>
 80065be:	4602      	mov	r2, r0
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	1ad3      	subs	r3, r2, r3
 80065c4:	2b02      	cmp	r3, #2
 80065c6:	d901      	bls.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80065c8:	2303      	movs	r3, #3
 80065ca:	e062      	b.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80065cc:	4b35      	ldr	r3, [pc, #212]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d0f0      	beq.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80065d8:	4b31      	ldr	r3, [pc, #196]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80065da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065e0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d02f      	beq.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	68db      	ldr	r3, [r3, #12]
 80065ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065f0:	693a      	ldr	r2, [r7, #16]
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d028      	beq.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80065f6:	4b2a      	ldr	r3, [pc, #168]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80065f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065fe:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006600:	4b29      	ldr	r3, [pc, #164]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006602:	2201      	movs	r2, #1
 8006604:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006606:	4b28      	ldr	r3, [pc, #160]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006608:	2200      	movs	r2, #0
 800660a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800660c:	4a24      	ldr	r2, [pc, #144]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006612:	4b23      	ldr	r3, [pc, #140]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006616:	f003 0301 	and.w	r3, r3, #1
 800661a:	2b01      	cmp	r3, #1
 800661c:	d114      	bne.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800661e:	f7fd fc05 	bl	8003e2c <HAL_GetTick>
 8006622:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006624:	e00a      	b.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006626:	f7fd fc01 	bl	8003e2c <HAL_GetTick>
 800662a:	4602      	mov	r2, r0
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	1ad3      	subs	r3, r2, r3
 8006630:	f241 3288 	movw	r2, #5000	; 0x1388
 8006634:	4293      	cmp	r3, r2
 8006636:	d901      	bls.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006638:	2303      	movs	r3, #3
 800663a:	e02a      	b.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800663c:	4b18      	ldr	r3, [pc, #96]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800663e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006640:	f003 0302 	and.w	r3, r3, #2
 8006644:	2b00      	cmp	r3, #0
 8006646:	d0ee      	beq.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	68db      	ldr	r3, [r3, #12]
 800664c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006650:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006654:	d10d      	bne.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006656:	4b12      	ldr	r3, [pc, #72]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	68db      	ldr	r3, [r3, #12]
 8006662:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006666:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800666a:	490d      	ldr	r1, [pc, #52]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800666c:	4313      	orrs	r3, r2
 800666e:	608b      	str	r3, [r1, #8]
 8006670:	e005      	b.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006672:	4b0b      	ldr	r3, [pc, #44]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	4a0a      	ldr	r2, [pc, #40]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006678:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800667c:	6093      	str	r3, [r2, #8]
 800667e:	4b08      	ldr	r3, [pc, #32]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006680:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	68db      	ldr	r3, [r3, #12]
 8006686:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800668a:	4905      	ldr	r1, [pc, #20]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800668c:	4313      	orrs	r3, r2
 800668e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006690:	2300      	movs	r3, #0
}
 8006692:	4618      	mov	r0, r3
 8006694:	3718      	adds	r7, #24
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}
 800669a:	bf00      	nop
 800669c:	42470068 	.word	0x42470068
 80066a0:	40023800 	.word	0x40023800
 80066a4:	40007000 	.word	0x40007000
 80066a8:	42470e40 	.word	0x42470e40

080066ac <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b082      	sub	sp, #8
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d101      	bne.n	80066be <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	e083      	b.n	80067c6 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	7f5b      	ldrb	r3, [r3, #29]
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d105      	bne.n	80066d4 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f7fd f89e 	bl	8003810 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2202      	movs	r2, #2
 80066d8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	22ca      	movs	r2, #202	; 0xca
 80066e0:	625a      	str	r2, [r3, #36]	; 0x24
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	2253      	movs	r2, #83	; 0x53
 80066e8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 faa8 	bl	8006c40 <RTC_EnterInitMode>
 80066f0:	4603      	mov	r3, r0
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d008      	beq.n	8006708 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	22ff      	movs	r2, #255	; 0xff
 80066fc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2204      	movs	r2, #4
 8006702:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8006704:	2301      	movs	r3, #1
 8006706:	e05e      	b.n	80067c6 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	687a      	ldr	r2, [r7, #4]
 8006710:	6812      	ldr	r2, [r2, #0]
 8006712:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006716:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800671a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	6899      	ldr	r1, [r3, #8]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	685a      	ldr	r2, [r3, #4]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	691b      	ldr	r3, [r3, #16]
 800672a:	431a      	orrs	r2, r3
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	695b      	ldr	r3, [r3, #20]
 8006730:	431a      	orrs	r2, r3
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	430a      	orrs	r2, r1
 8006738:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	687a      	ldr	r2, [r7, #4]
 8006740:	68d2      	ldr	r2, [r2, #12]
 8006742:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	6919      	ldr	r1, [r3, #16]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	041a      	lsls	r2, r3, #16
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	430a      	orrs	r2, r1
 8006756:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	68da      	ldr	r2, [r3, #12]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006766:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	f003 0320 	and.w	r3, r3, #32
 8006772:	2b00      	cmp	r3, #0
 8006774:	d10e      	bne.n	8006794 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 fa3a 	bl	8006bf0 <HAL_RTC_WaitForSynchro>
 800677c:	4603      	mov	r3, r0
 800677e:	2b00      	cmp	r3, #0
 8006780:	d008      	beq.n	8006794 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	22ff      	movs	r2, #255	; 0xff
 8006788:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2204      	movs	r2, #4
 800678e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8006790:	2301      	movs	r3, #1
 8006792:	e018      	b.n	80067c6 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80067a2:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	699a      	ldr	r2, [r3, #24]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	430a      	orrs	r2, r1
 80067b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	22ff      	movs	r2, #255	; 0xff
 80067bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2201      	movs	r2, #1
 80067c2:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80067c4:	2300      	movs	r3, #0
  }
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3708      	adds	r7, #8
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}

080067ce <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80067ce:	b590      	push	{r4, r7, lr}
 80067d0:	b087      	sub	sp, #28
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	60f8      	str	r0, [r7, #12]
 80067d6:	60b9      	str	r1, [r7, #8]
 80067d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80067da:	2300      	movs	r3, #0
 80067dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	7f1b      	ldrb	r3, [r3, #28]
 80067e2:	2b01      	cmp	r3, #1
 80067e4:	d101      	bne.n	80067ea <HAL_RTC_SetTime+0x1c>
 80067e6:	2302      	movs	r3, #2
 80067e8:	e0aa      	b.n	8006940 <HAL_RTC_SetTime+0x172>
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2201      	movs	r2, #1
 80067ee:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2202      	movs	r2, #2
 80067f4:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d126      	bne.n	800684a <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006806:	2b00      	cmp	r3, #0
 8006808:	d102      	bne.n	8006810 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	2200      	movs	r2, #0
 800680e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	781b      	ldrb	r3, [r3, #0]
 8006814:	4618      	mov	r0, r3
 8006816:	f000 fa3f 	bl	8006c98 <RTC_ByteToBcd2>
 800681a:	4603      	mov	r3, r0
 800681c:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	785b      	ldrb	r3, [r3, #1]
 8006822:	4618      	mov	r0, r3
 8006824:	f000 fa38 	bl	8006c98 <RTC_ByteToBcd2>
 8006828:	4603      	mov	r3, r0
 800682a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800682c:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	789b      	ldrb	r3, [r3, #2]
 8006832:	4618      	mov	r0, r3
 8006834:	f000 fa30 	bl	8006c98 <RTC_ByteToBcd2>
 8006838:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800683a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	78db      	ldrb	r3, [r3, #3]
 8006842:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006844:	4313      	orrs	r3, r2
 8006846:	617b      	str	r3, [r7, #20]
 8006848:	e018      	b.n	800687c <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006854:	2b00      	cmp	r3, #0
 8006856:	d102      	bne.n	800685e <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	2200      	movs	r2, #0
 800685c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	781b      	ldrb	r3, [r3, #0]
 8006862:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	785b      	ldrb	r3, [r3, #1]
 8006868:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800686a:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800686c:	68ba      	ldr	r2, [r7, #8]
 800686e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8006870:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	78db      	ldrb	r3, [r3, #3]
 8006876:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006878:	4313      	orrs	r3, r2
 800687a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	22ca      	movs	r2, #202	; 0xca
 8006882:	625a      	str	r2, [r3, #36]	; 0x24
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	2253      	movs	r2, #83	; 0x53
 800688a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800688c:	68f8      	ldr	r0, [r7, #12]
 800688e:	f000 f9d7 	bl	8006c40 <RTC_EnterInitMode>
 8006892:	4603      	mov	r3, r0
 8006894:	2b00      	cmp	r3, #0
 8006896:	d00b      	beq.n	80068b0 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	22ff      	movs	r2, #255	; 0xff
 800689e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2204      	movs	r2, #4
 80068a4:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2200      	movs	r2, #0
 80068aa:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80068ac:	2301      	movs	r3, #1
 80068ae:	e047      	b.n	8006940 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681a      	ldr	r2, [r3, #0]
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80068ba:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80068be:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	689a      	ldr	r2, [r3, #8]
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80068ce:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	6899      	ldr	r1, [r3, #8]
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	68da      	ldr	r2, [r3, #12]
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	691b      	ldr	r3, [r3, #16]
 80068de:	431a      	orrs	r2, r3
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	430a      	orrs	r2, r1
 80068e6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	68da      	ldr	r2, [r3, #12]
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80068f6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	f003 0320 	and.w	r3, r3, #32
 8006902:	2b00      	cmp	r3, #0
 8006904:	d111      	bne.n	800692a <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006906:	68f8      	ldr	r0, [r7, #12]
 8006908:	f000 f972 	bl	8006bf0 <HAL_RTC_WaitForSynchro>
 800690c:	4603      	mov	r3, r0
 800690e:	2b00      	cmp	r3, #0
 8006910:	d00b      	beq.n	800692a <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	22ff      	movs	r2, #255	; 0xff
 8006918:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2204      	movs	r2, #4
 800691e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2200      	movs	r2, #0
 8006924:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	e00a      	b.n	8006940 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	22ff      	movs	r2, #255	; 0xff
 8006930:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2201      	movs	r2, #1
 8006936:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2200      	movs	r2, #0
 800693c:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800693e:	2300      	movs	r3, #0
  }
}
 8006940:	4618      	mov	r0, r3
 8006942:	371c      	adds	r7, #28
 8006944:	46bd      	mov	sp, r7
 8006946:	bd90      	pop	{r4, r7, pc}

08006948 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b086      	sub	sp, #24
 800694c:	af00      	add	r7, sp, #0
 800694e:	60f8      	str	r0, [r7, #12]
 8006950:	60b9      	str	r1, [r7, #8]
 8006952:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006954:	2300      	movs	r3, #0
 8006956:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	691b      	ldr	r3, [r3, #16]
 8006968:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800697a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800697e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	0c1b      	lsrs	r3, r3, #16
 8006984:	b2db      	uxtb	r3, r3
 8006986:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800698a:	b2da      	uxtb	r2, r3
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	0a1b      	lsrs	r3, r3, #8
 8006994:	b2db      	uxtb	r3, r3
 8006996:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800699a:	b2da      	uxtb	r2, r3
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069a8:	b2da      	uxtb	r2, r3
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	0c1b      	lsrs	r3, r3, #16
 80069b2:	b2db      	uxtb	r3, r3
 80069b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069b8:	b2da      	uxtb	r2, r3
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d11a      	bne.n	80069fa <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	781b      	ldrb	r3, [r3, #0]
 80069c8:	4618      	mov	r0, r3
 80069ca:	f000 f983 	bl	8006cd4 <RTC_Bcd2ToByte>
 80069ce:	4603      	mov	r3, r0
 80069d0:	461a      	mov	r2, r3
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	785b      	ldrb	r3, [r3, #1]
 80069da:	4618      	mov	r0, r3
 80069dc:	f000 f97a 	bl	8006cd4 <RTC_Bcd2ToByte>
 80069e0:	4603      	mov	r3, r0
 80069e2:	461a      	mov	r2, r3
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	789b      	ldrb	r3, [r3, #2]
 80069ec:	4618      	mov	r0, r3
 80069ee:	f000 f971 	bl	8006cd4 <RTC_Bcd2ToByte>
 80069f2:	4603      	mov	r3, r0
 80069f4:	461a      	mov	r2, r3
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80069fa:	2300      	movs	r3, #0
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	3718      	adds	r7, #24
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}

08006a04 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006a04:	b590      	push	{r4, r7, lr}
 8006a06:	b087      	sub	sp, #28
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	60f8      	str	r0, [r7, #12]
 8006a0c:	60b9      	str	r1, [r7, #8]
 8006a0e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006a10:	2300      	movs	r3, #0
 8006a12:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	7f1b      	ldrb	r3, [r3, #28]
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d101      	bne.n	8006a20 <HAL_RTC_SetDate+0x1c>
 8006a1c:	2302      	movs	r3, #2
 8006a1e:	e094      	b.n	8006b4a <HAL_RTC_SetDate+0x146>
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2201      	movs	r2, #1
 8006a24:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2202      	movs	r2, #2
 8006a2a:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d10e      	bne.n	8006a50 <HAL_RTC_SetDate+0x4c>
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	785b      	ldrb	r3, [r3, #1]
 8006a36:	f003 0310 	and.w	r3, r3, #16
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d008      	beq.n	8006a50 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	785b      	ldrb	r3, [r3, #1]
 8006a42:	f023 0310 	bic.w	r3, r3, #16
 8006a46:	b2db      	uxtb	r3, r3
 8006a48:	330a      	adds	r3, #10
 8006a4a:	b2da      	uxtb	r2, r3
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d11c      	bne.n	8006a90 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	78db      	ldrb	r3, [r3, #3]
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f000 f91c 	bl	8006c98 <RTC_ByteToBcd2>
 8006a60:	4603      	mov	r3, r0
 8006a62:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	785b      	ldrb	r3, [r3, #1]
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f000 f915 	bl	8006c98 <RTC_ByteToBcd2>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006a72:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	789b      	ldrb	r3, [r3, #2]
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f000 f90d 	bl	8006c98 <RTC_ByteToBcd2>
 8006a7e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006a80:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	781b      	ldrb	r3, [r3, #0]
 8006a88:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	617b      	str	r3, [r7, #20]
 8006a8e:	e00e      	b.n	8006aae <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	78db      	ldrb	r3, [r3, #3]
 8006a94:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	785b      	ldrb	r3, [r3, #1]
 8006a9a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006a9c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8006a9e:	68ba      	ldr	r2, [r7, #8]
 8006aa0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8006aa2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	781b      	ldrb	r3, [r3, #0]
 8006aa8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	22ca      	movs	r2, #202	; 0xca
 8006ab4:	625a      	str	r2, [r3, #36]	; 0x24
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	2253      	movs	r2, #83	; 0x53
 8006abc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006abe:	68f8      	ldr	r0, [r7, #12]
 8006ac0:	f000 f8be 	bl	8006c40 <RTC_EnterInitMode>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d00b      	beq.n	8006ae2 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	22ff      	movs	r2, #255	; 0xff
 8006ad0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2204      	movs	r2, #4
 8006ad6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2200      	movs	r2, #0
 8006adc:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	e033      	b.n	8006b4a <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681a      	ldr	r2, [r3, #0]
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006aec:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006af0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	68da      	ldr	r2, [r3, #12]
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b00:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	f003 0320 	and.w	r3, r3, #32
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d111      	bne.n	8006b34 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006b10:	68f8      	ldr	r0, [r7, #12]
 8006b12:	f000 f86d 	bl	8006bf0 <HAL_RTC_WaitForSynchro>
 8006b16:	4603      	mov	r3, r0
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d00b      	beq.n	8006b34 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	22ff      	movs	r2, #255	; 0xff
 8006b22:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2204      	movs	r2, #4
 8006b28:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8006b30:	2301      	movs	r3, #1
 8006b32:	e00a      	b.n	8006b4a <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	22ff      	movs	r2, #255	; 0xff
 8006b3a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2200      	movs	r2, #0
 8006b46:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8006b48:	2300      	movs	r3, #0
  }
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	371c      	adds	r7, #28
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd90      	pop	{r4, r7, pc}

08006b52 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006b52:	b580      	push	{r7, lr}
 8006b54:	b086      	sub	sp, #24
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	60f8      	str	r0, [r7, #12]
 8006b5a:	60b9      	str	r1, [r7, #8]
 8006b5c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006b6c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006b70:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	0c1b      	lsrs	r3, r3, #16
 8006b76:	b2da      	uxtb	r2, r3
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	0a1b      	lsrs	r3, r3, #8
 8006b80:	b2db      	uxtb	r3, r3
 8006b82:	f003 031f 	and.w	r3, r3, #31
 8006b86:	b2da      	uxtb	r2, r3
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	b2db      	uxtb	r3, r3
 8006b90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b94:	b2da      	uxtb	r2, r3
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	0b5b      	lsrs	r3, r3, #13
 8006b9e:	b2db      	uxtb	r3, r3
 8006ba0:	f003 0307 	and.w	r3, r3, #7
 8006ba4:	b2da      	uxtb	r2, r3
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d11a      	bne.n	8006be6 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	78db      	ldrb	r3, [r3, #3]
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f000 f88d 	bl	8006cd4 <RTC_Bcd2ToByte>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	461a      	mov	r2, r3
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	785b      	ldrb	r3, [r3, #1]
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f000 f884 	bl	8006cd4 <RTC_Bcd2ToByte>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	461a      	mov	r2, r3
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	789b      	ldrb	r3, [r3, #2]
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f000 f87b 	bl	8006cd4 <RTC_Bcd2ToByte>
 8006bde:	4603      	mov	r3, r0
 8006be0:	461a      	mov	r2, r3
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006be6:	2300      	movs	r3, #0
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3718      	adds	r7, #24
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}

08006bf0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b084      	sub	sp, #16
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	68da      	ldr	r2, [r3, #12]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006c0a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006c0c:	f7fd f90e 	bl	8003e2c <HAL_GetTick>
 8006c10:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006c12:	e009      	b.n	8006c28 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006c14:	f7fd f90a 	bl	8003e2c <HAL_GetTick>
 8006c18:	4602      	mov	r2, r0
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	1ad3      	subs	r3, r2, r3
 8006c1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006c22:	d901      	bls.n	8006c28 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006c24:	2303      	movs	r3, #3
 8006c26:	e007      	b.n	8006c38 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	68db      	ldr	r3, [r3, #12]
 8006c2e:	f003 0320 	and.w	r3, r3, #32
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d0ee      	beq.n	8006c14 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006c36:	2300      	movs	r3, #0
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3710      	adds	r7, #16
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}

08006c40 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b084      	sub	sp, #16
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	68db      	ldr	r3, [r3, #12]
 8006c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d119      	bne.n	8006c8e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f04f 32ff 	mov.w	r2, #4294967295
 8006c62:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006c64:	f7fd f8e2 	bl	8003e2c <HAL_GetTick>
 8006c68:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006c6a:	e009      	b.n	8006c80 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006c6c:	f7fd f8de 	bl	8003e2c <HAL_GetTick>
 8006c70:	4602      	mov	r2, r0
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	1ad3      	subs	r3, r2, r3
 8006c76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006c7a:	d901      	bls.n	8006c80 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8006c7c:	2303      	movs	r3, #3
 8006c7e:	e007      	b.n	8006c90 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	68db      	ldr	r3, [r3, #12]
 8006c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d0ee      	beq.n	8006c6c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8006c8e:	2300      	movs	r3, #0
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	3710      	adds	r7, #16
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}

08006c98 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b085      	sub	sp, #20
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8006ca6:	e005      	b.n	8006cb4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	3301      	adds	r3, #1
 8006cac:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8006cae:	79fb      	ldrb	r3, [r7, #7]
 8006cb0:	3b0a      	subs	r3, #10
 8006cb2:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8006cb4:	79fb      	ldrb	r3, [r7, #7]
 8006cb6:	2b09      	cmp	r3, #9
 8006cb8:	d8f6      	bhi.n	8006ca8 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	b2db      	uxtb	r3, r3
 8006cbe:	011b      	lsls	r3, r3, #4
 8006cc0:	b2da      	uxtb	r2, r3
 8006cc2:	79fb      	ldrb	r3, [r7, #7]
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	b2db      	uxtb	r3, r3
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3714      	adds	r7, #20
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr

08006cd4 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b085      	sub	sp, #20
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	4603      	mov	r3, r0
 8006cdc:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8006ce2:	79fb      	ldrb	r3, [r7, #7]
 8006ce4:	091b      	lsrs	r3, r3, #4
 8006ce6:	b2db      	uxtb	r3, r3
 8006ce8:	461a      	mov	r2, r3
 8006cea:	4613      	mov	r3, r2
 8006cec:	009b      	lsls	r3, r3, #2
 8006cee:	4413      	add	r3, r2
 8006cf0:	005b      	lsls	r3, r3, #1
 8006cf2:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8006cf4:	79fb      	ldrb	r3, [r7, #7]
 8006cf6:	f003 030f 	and.w	r3, r3, #15
 8006cfa:	b2da      	uxtb	r2, r3
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	b2db      	uxtb	r3, r3
 8006d00:	4413      	add	r3, r2
 8006d02:	b2db      	uxtb	r3, r3
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3714      	adds	r7, #20
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr

08006d10 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b087      	sub	sp, #28
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	60f8      	str	r0, [r7, #12]
 8006d18:	60b9      	str	r1, [r7, #8]
 8006d1a:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	3350      	adds	r3, #80	; 0x50
 8006d26:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	009b      	lsls	r3, r3, #2
 8006d2c:	697a      	ldr	r2, [r7, #20]
 8006d2e:	4413      	add	r3, r2
 8006d30:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	601a      	str	r2, [r3, #0]
}
 8006d38:	bf00      	nop
 8006d3a:	371c      	adds	r7, #28
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d42:	4770      	bx	lr

08006d44 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b085      	sub	sp, #20
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	3350      	adds	r3, #80	; 0x50
 8006d58:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	009b      	lsls	r3, r3, #2
 8006d5e:	68fa      	ldr	r2, [r7, #12]
 8006d60:	4413      	add	r3, r2
 8006d62:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3714      	adds	r7, #20
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr

08006d74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b082      	sub	sp, #8
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d101      	bne.n	8006d86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006d82:	2301      	movs	r3, #1
 8006d84:	e07b      	b.n	8006e7e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d108      	bne.n	8006da0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d96:	d009      	beq.n	8006dac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	61da      	str	r2, [r3, #28]
 8006d9e:	e005      	b.n	8006dac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2200      	movs	r2, #0
 8006da4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2200      	movs	r2, #0
 8006daa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2200      	movs	r2, #0
 8006db0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006db8:	b2db      	uxtb	r3, r3
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d106      	bne.n	8006dcc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f7fc fd38 	bl	800383c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2202      	movs	r2, #2
 8006dd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	681a      	ldr	r2, [r3, #0]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006de2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006df4:	431a      	orrs	r2, r3
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	68db      	ldr	r3, [r3, #12]
 8006dfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006dfe:	431a      	orrs	r2, r3
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	691b      	ldr	r3, [r3, #16]
 8006e04:	f003 0302 	and.w	r3, r3, #2
 8006e08:	431a      	orrs	r2, r3
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	695b      	ldr	r3, [r3, #20]
 8006e0e:	f003 0301 	and.w	r3, r3, #1
 8006e12:	431a      	orrs	r2, r3
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	699b      	ldr	r3, [r3, #24]
 8006e18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e1c:	431a      	orrs	r2, r3
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	69db      	ldr	r3, [r3, #28]
 8006e22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e26:	431a      	orrs	r2, r3
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6a1b      	ldr	r3, [r3, #32]
 8006e2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e30:	ea42 0103 	orr.w	r1, r2, r3
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e38:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	430a      	orrs	r2, r1
 8006e42:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	699b      	ldr	r3, [r3, #24]
 8006e48:	0c1b      	lsrs	r3, r3, #16
 8006e4a:	f003 0104 	and.w	r1, r3, #4
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e52:	f003 0210 	and.w	r2, r3, #16
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	430a      	orrs	r2, r1
 8006e5c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	69da      	ldr	r2, [r3, #28]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006e6c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2200      	movs	r2, #0
 8006e72:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2201      	movs	r2, #1
 8006e78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006e7c:	2300      	movs	r3, #0
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3708      	adds	r7, #8
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}

08006e86 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e86:	b580      	push	{r7, lr}
 8006e88:	b088      	sub	sp, #32
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	60f8      	str	r0, [r7, #12]
 8006e8e:	60b9      	str	r1, [r7, #8]
 8006e90:	603b      	str	r3, [r7, #0]
 8006e92:	4613      	mov	r3, r2
 8006e94:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006e96:	2300      	movs	r3, #0
 8006e98:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006ea0:	2b01      	cmp	r3, #1
 8006ea2:	d101      	bne.n	8006ea8 <HAL_SPI_Transmit+0x22>
 8006ea4:	2302      	movs	r3, #2
 8006ea6:	e126      	b.n	80070f6 <HAL_SPI_Transmit+0x270>
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2201      	movs	r2, #1
 8006eac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006eb0:	f7fc ffbc 	bl	8003e2c <HAL_GetTick>
 8006eb4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006eb6:	88fb      	ldrh	r3, [r7, #6]
 8006eb8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006ec0:	b2db      	uxtb	r3, r3
 8006ec2:	2b01      	cmp	r3, #1
 8006ec4:	d002      	beq.n	8006ecc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006ec6:	2302      	movs	r3, #2
 8006ec8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006eca:	e10b      	b.n	80070e4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d002      	beq.n	8006ed8 <HAL_SPI_Transmit+0x52>
 8006ed2:	88fb      	ldrh	r3, [r7, #6]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d102      	bne.n	8006ede <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006edc:	e102      	b.n	80070e4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2203      	movs	r2, #3
 8006ee2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	68ba      	ldr	r2, [r7, #8]
 8006ef0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	88fa      	ldrh	r2, [r7, #6]
 8006ef6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	88fa      	ldrh	r2, [r7, #6]
 8006efc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2200      	movs	r2, #0
 8006f02:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	2200      	movs	r2, #0
 8006f08:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2200      	movs	r2, #0
 8006f14:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	689b      	ldr	r3, [r3, #8]
 8006f20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f24:	d10f      	bne.n	8006f46 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	681a      	ldr	r2, [r3, #0]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f34:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f44:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f50:	2b40      	cmp	r3, #64	; 0x40
 8006f52:	d007      	beq.n	8006f64 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	681a      	ldr	r2, [r3, #0]
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f62:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	68db      	ldr	r3, [r3, #12]
 8006f68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f6c:	d14b      	bne.n	8007006 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d002      	beq.n	8006f7c <HAL_SPI_Transmit+0xf6>
 8006f76:	8afb      	ldrh	r3, [r7, #22]
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d13e      	bne.n	8006ffa <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f80:	881a      	ldrh	r2, [r3, #0]
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f8c:	1c9a      	adds	r2, r3, #2
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f96:	b29b      	uxth	r3, r3
 8006f98:	3b01      	subs	r3, #1
 8006f9a:	b29a      	uxth	r2, r3
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006fa0:	e02b      	b.n	8006ffa <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	f003 0302 	and.w	r3, r3, #2
 8006fac:	2b02      	cmp	r3, #2
 8006fae:	d112      	bne.n	8006fd6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fb4:	881a      	ldrh	r2, [r3, #0]
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fc0:	1c9a      	adds	r2, r3, #2
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fca:	b29b      	uxth	r3, r3
 8006fcc:	3b01      	subs	r3, #1
 8006fce:	b29a      	uxth	r2, r3
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	86da      	strh	r2, [r3, #54]	; 0x36
 8006fd4:	e011      	b.n	8006ffa <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006fd6:	f7fc ff29 	bl	8003e2c <HAL_GetTick>
 8006fda:	4602      	mov	r2, r0
 8006fdc:	69bb      	ldr	r3, [r7, #24]
 8006fde:	1ad3      	subs	r3, r2, r3
 8006fe0:	683a      	ldr	r2, [r7, #0]
 8006fe2:	429a      	cmp	r2, r3
 8006fe4:	d803      	bhi.n	8006fee <HAL_SPI_Transmit+0x168>
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fec:	d102      	bne.n	8006ff4 <HAL_SPI_Transmit+0x16e>
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d102      	bne.n	8006ffa <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006ff4:	2303      	movs	r3, #3
 8006ff6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006ff8:	e074      	b.n	80070e4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	2b00      	cmp	r3, #0
 8007002:	d1ce      	bne.n	8006fa2 <HAL_SPI_Transmit+0x11c>
 8007004:	e04c      	b.n	80070a0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d002      	beq.n	8007014 <HAL_SPI_Transmit+0x18e>
 800700e:	8afb      	ldrh	r3, [r7, #22]
 8007010:	2b01      	cmp	r3, #1
 8007012:	d140      	bne.n	8007096 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	330c      	adds	r3, #12
 800701e:	7812      	ldrb	r2, [r2, #0]
 8007020:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007026:	1c5a      	adds	r2, r3, #1
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007030:	b29b      	uxth	r3, r3
 8007032:	3b01      	subs	r3, #1
 8007034:	b29a      	uxth	r2, r3
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800703a:	e02c      	b.n	8007096 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	689b      	ldr	r3, [r3, #8]
 8007042:	f003 0302 	and.w	r3, r3, #2
 8007046:	2b02      	cmp	r3, #2
 8007048:	d113      	bne.n	8007072 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	330c      	adds	r3, #12
 8007054:	7812      	ldrb	r2, [r2, #0]
 8007056:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800705c:	1c5a      	adds	r2, r3, #1
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007066:	b29b      	uxth	r3, r3
 8007068:	3b01      	subs	r3, #1
 800706a:	b29a      	uxth	r2, r3
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	86da      	strh	r2, [r3, #54]	; 0x36
 8007070:	e011      	b.n	8007096 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007072:	f7fc fedb 	bl	8003e2c <HAL_GetTick>
 8007076:	4602      	mov	r2, r0
 8007078:	69bb      	ldr	r3, [r7, #24]
 800707a:	1ad3      	subs	r3, r2, r3
 800707c:	683a      	ldr	r2, [r7, #0]
 800707e:	429a      	cmp	r2, r3
 8007080:	d803      	bhi.n	800708a <HAL_SPI_Transmit+0x204>
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007088:	d102      	bne.n	8007090 <HAL_SPI_Transmit+0x20a>
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d102      	bne.n	8007096 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007090:	2303      	movs	r3, #3
 8007092:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007094:	e026      	b.n	80070e4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800709a:	b29b      	uxth	r3, r3
 800709c:	2b00      	cmp	r3, #0
 800709e:	d1cd      	bne.n	800703c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80070a0:	69ba      	ldr	r2, [r7, #24]
 80070a2:	6839      	ldr	r1, [r7, #0]
 80070a4:	68f8      	ldr	r0, [r7, #12]
 80070a6:	f000 f9ff 	bl	80074a8 <SPI_EndRxTxTransaction>
 80070aa:	4603      	mov	r3, r0
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d002      	beq.n	80070b6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	2220      	movs	r2, #32
 80070b4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	689b      	ldr	r3, [r3, #8]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d10a      	bne.n	80070d4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80070be:	2300      	movs	r3, #0
 80070c0:	613b      	str	r3, [r7, #16]
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	68db      	ldr	r3, [r3, #12]
 80070c8:	613b      	str	r3, [r7, #16]
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	689b      	ldr	r3, [r3, #8]
 80070d0:	613b      	str	r3, [r7, #16]
 80070d2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d002      	beq.n	80070e2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80070dc:	2301      	movs	r3, #1
 80070de:	77fb      	strb	r3, [r7, #31]
 80070e0:	e000      	b.n	80070e4 <HAL_SPI_Transmit+0x25e>
  }

error:
 80070e2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2201      	movs	r2, #1
 80070e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2200      	movs	r2, #0
 80070f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80070f4:	7ffb      	ldrb	r3, [r7, #31]
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3720      	adds	r7, #32
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}
	...

08007100 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b086      	sub	sp, #24
 8007104:	af00      	add	r7, sp, #0
 8007106:	60f8      	str	r0, [r7, #12]
 8007108:	60b9      	str	r1, [r7, #8]
 800710a:	4613      	mov	r3, r2
 800710c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800710e:	2300      	movs	r3, #0
 8007110:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007118:	2b01      	cmp	r3, #1
 800711a:	d101      	bne.n	8007120 <HAL_SPI_Transmit_DMA+0x20>
 800711c:	2302      	movs	r3, #2
 800711e:	e09b      	b.n	8007258 <HAL_SPI_Transmit_DMA+0x158>
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2201      	movs	r2, #1
 8007124:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800712e:	b2db      	uxtb	r3, r3
 8007130:	2b01      	cmp	r3, #1
 8007132:	d002      	beq.n	800713a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8007134:	2302      	movs	r3, #2
 8007136:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007138:	e089      	b.n	800724e <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d002      	beq.n	8007146 <HAL_SPI_Transmit_DMA+0x46>
 8007140:	88fb      	ldrh	r3, [r7, #6]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d102      	bne.n	800714c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8007146:	2301      	movs	r3, #1
 8007148:	75fb      	strb	r3, [r7, #23]
    goto error;
 800714a:	e080      	b.n	800724e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2203      	movs	r2, #3
 8007150:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2200      	movs	r2, #0
 8007158:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	68ba      	ldr	r2, [r7, #8]
 800715e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	88fa      	ldrh	r2, [r7, #6]
 8007164:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	88fa      	ldrh	r2, [r7, #6]
 800716a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	2200      	movs	r2, #0
 8007170:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2200      	movs	r2, #0
 8007176:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2200      	movs	r2, #0
 800717c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2200      	movs	r2, #0
 8007182:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2200      	movs	r2, #0
 8007188:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	689b      	ldr	r3, [r3, #8]
 800718e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007192:	d10f      	bne.n	80071b4 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071a2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80071b2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071b8:	4a29      	ldr	r2, [pc, #164]	; (8007260 <HAL_SPI_Transmit_DMA+0x160>)
 80071ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071c0:	4a28      	ldr	r2, [pc, #160]	; (8007264 <HAL_SPI_Transmit_DMA+0x164>)
 80071c2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071c8:	4a27      	ldr	r2, [pc, #156]	; (8007268 <HAL_SPI_Transmit_DMA+0x168>)
 80071ca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071d0:	2200      	movs	r2, #0
 80071d2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071dc:	4619      	mov	r1, r3
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	330c      	adds	r3, #12
 80071e4:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071ea:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80071ec:	f7fd f80e 	bl	800420c <HAL_DMA_Start_IT>
 80071f0:	4603      	mov	r3, r0
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d00c      	beq.n	8007210 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071fa:	f043 0210 	orr.w	r2, r3, #16
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8007202:	2301      	movs	r3, #1
 8007204:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2201      	movs	r2, #1
 800720a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800720e:	e01e      	b.n	800724e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800721a:	2b40      	cmp	r3, #64	; 0x40
 800721c:	d007      	beq.n	800722e <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	681a      	ldr	r2, [r3, #0]
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800722c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	685a      	ldr	r2, [r3, #4]
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f042 0220 	orr.w	r2, r2, #32
 800723c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	685a      	ldr	r2, [r3, #4]
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f042 0202 	orr.w	r2, r2, #2
 800724c:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2200      	movs	r2, #0
 8007252:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007256:	7dfb      	ldrb	r3, [r7, #23]
}
 8007258:	4618      	mov	r0, r3
 800725a:	3718      	adds	r7, #24
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}
 8007260:	0800733d 	.word	0x0800733d
 8007264:	08007295 	.word	0x08007295
 8007268:	08007359 	.word	0x08007359

0800726c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800726c:	b480      	push	{r7}
 800726e:	b083      	sub	sp, #12
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8007274:	bf00      	nop
 8007276:	370c      	adds	r7, #12
 8007278:	46bd      	mov	sp, r7
 800727a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727e:	4770      	bx	lr

08007280 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007280:	b480      	push	{r7}
 8007282:	b083      	sub	sp, #12
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007288:	bf00      	nop
 800728a:	370c      	adds	r7, #12
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr

08007294 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b086      	sub	sp, #24
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072a0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80072a2:	f7fc fdc3 	bl	8003e2c <HAL_GetTick>
 80072a6:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072b6:	d03b      	beq.n	8007330 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	685a      	ldr	r2, [r3, #4]
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f022 0220 	bic.w	r2, r2, #32
 80072c6:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	685a      	ldr	r2, [r3, #4]
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f022 0202 	bic.w	r2, r2, #2
 80072d6:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80072d8:	693a      	ldr	r2, [r7, #16]
 80072da:	2164      	movs	r1, #100	; 0x64
 80072dc:	6978      	ldr	r0, [r7, #20]
 80072de:	f000 f8e3 	bl	80074a8 <SPI_EndRxTxTransaction>
 80072e2:	4603      	mov	r3, r0
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d005      	beq.n	80072f4 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072ec:	f043 0220 	orr.w	r2, r3, #32
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	689b      	ldr	r3, [r3, #8]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d10a      	bne.n	8007312 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80072fc:	2300      	movs	r3, #0
 80072fe:	60fb      	str	r3, [r7, #12]
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	68db      	ldr	r3, [r3, #12]
 8007306:	60fb      	str	r3, [r7, #12]
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	689b      	ldr	r3, [r3, #8]
 800730e:	60fb      	str	r3, [r7, #12]
 8007310:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	2200      	movs	r2, #0
 8007316:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	2201      	movs	r2, #1
 800731c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007324:	2b00      	cmp	r3, #0
 8007326:	d003      	beq.n	8007330 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007328:	6978      	ldr	r0, [r7, #20]
 800732a:	f7ff ffa9 	bl	8007280 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800732e:	e002      	b.n	8007336 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8007330:	6978      	ldr	r0, [r7, #20]
 8007332:	f7f9 ff77 	bl	8001224 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007336:	3718      	adds	r7, #24
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}

0800733c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b084      	sub	sp, #16
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007348:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800734a:	68f8      	ldr	r0, [r7, #12]
 800734c:	f7ff ff8e 	bl	800726c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007350:	bf00      	nop
 8007352:	3710      	adds	r7, #16
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}

08007358 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b084      	sub	sp, #16
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007364:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	685a      	ldr	r2, [r3, #4]
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f022 0203 	bic.w	r2, r2, #3
 8007374:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800737a:	f043 0210 	orr.w	r2, r3, #16
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	2201      	movs	r2, #1
 8007386:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800738a:	68f8      	ldr	r0, [r7, #12]
 800738c:	f7ff ff78 	bl	8007280 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007390:	bf00      	nop
 8007392:	3710      	adds	r7, #16
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}

08007398 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b088      	sub	sp, #32
 800739c:	af00      	add	r7, sp, #0
 800739e:	60f8      	str	r0, [r7, #12]
 80073a0:	60b9      	str	r1, [r7, #8]
 80073a2:	603b      	str	r3, [r7, #0]
 80073a4:	4613      	mov	r3, r2
 80073a6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80073a8:	f7fc fd40 	bl	8003e2c <HAL_GetTick>
 80073ac:	4602      	mov	r2, r0
 80073ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b0:	1a9b      	subs	r3, r3, r2
 80073b2:	683a      	ldr	r2, [r7, #0]
 80073b4:	4413      	add	r3, r2
 80073b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80073b8:	f7fc fd38 	bl	8003e2c <HAL_GetTick>
 80073bc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80073be:	4b39      	ldr	r3, [pc, #228]	; (80074a4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	015b      	lsls	r3, r3, #5
 80073c4:	0d1b      	lsrs	r3, r3, #20
 80073c6:	69fa      	ldr	r2, [r7, #28]
 80073c8:	fb02 f303 	mul.w	r3, r2, r3
 80073cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80073ce:	e054      	b.n	800747a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073d6:	d050      	beq.n	800747a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80073d8:	f7fc fd28 	bl	8003e2c <HAL_GetTick>
 80073dc:	4602      	mov	r2, r0
 80073de:	69bb      	ldr	r3, [r7, #24]
 80073e0:	1ad3      	subs	r3, r2, r3
 80073e2:	69fa      	ldr	r2, [r7, #28]
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d902      	bls.n	80073ee <SPI_WaitFlagStateUntilTimeout+0x56>
 80073e8:	69fb      	ldr	r3, [r7, #28]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d13d      	bne.n	800746a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	685a      	ldr	r2, [r3, #4]
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80073fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007406:	d111      	bne.n	800742c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	689b      	ldr	r3, [r3, #8]
 800740c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007410:	d004      	beq.n	800741c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	689b      	ldr	r3, [r3, #8]
 8007416:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800741a:	d107      	bne.n	800742c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	681a      	ldr	r2, [r3, #0]
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800742a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007430:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007434:	d10f      	bne.n	8007456 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	681a      	ldr	r2, [r3, #0]
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007444:	601a      	str	r2, [r3, #0]
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	681a      	ldr	r2, [r3, #0]
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007454:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2201      	movs	r2, #1
 800745a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2200      	movs	r2, #0
 8007462:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007466:	2303      	movs	r3, #3
 8007468:	e017      	b.n	800749a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d101      	bne.n	8007474 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007470:	2300      	movs	r3, #0
 8007472:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	3b01      	subs	r3, #1
 8007478:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	689a      	ldr	r2, [r3, #8]
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	4013      	ands	r3, r2
 8007484:	68ba      	ldr	r2, [r7, #8]
 8007486:	429a      	cmp	r2, r3
 8007488:	bf0c      	ite	eq
 800748a:	2301      	moveq	r3, #1
 800748c:	2300      	movne	r3, #0
 800748e:	b2db      	uxtb	r3, r3
 8007490:	461a      	mov	r2, r3
 8007492:	79fb      	ldrb	r3, [r7, #7]
 8007494:	429a      	cmp	r2, r3
 8007496:	d19b      	bne.n	80073d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007498:	2300      	movs	r3, #0
}
 800749a:	4618      	mov	r0, r3
 800749c:	3720      	adds	r7, #32
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}
 80074a2:	bf00      	nop
 80074a4:	2000000c 	.word	0x2000000c

080074a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b088      	sub	sp, #32
 80074ac:	af02      	add	r7, sp, #8
 80074ae:	60f8      	str	r0, [r7, #12]
 80074b0:	60b9      	str	r1, [r7, #8]
 80074b2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80074b4:	4b1b      	ldr	r3, [pc, #108]	; (8007524 <SPI_EndRxTxTransaction+0x7c>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a1b      	ldr	r2, [pc, #108]	; (8007528 <SPI_EndRxTxTransaction+0x80>)
 80074ba:	fba2 2303 	umull	r2, r3, r2, r3
 80074be:	0d5b      	lsrs	r3, r3, #21
 80074c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80074c4:	fb02 f303 	mul.w	r3, r2, r3
 80074c8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80074d2:	d112      	bne.n	80074fa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	9300      	str	r3, [sp, #0]
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	2200      	movs	r2, #0
 80074dc:	2180      	movs	r1, #128	; 0x80
 80074de:	68f8      	ldr	r0, [r7, #12]
 80074e0:	f7ff ff5a 	bl	8007398 <SPI_WaitFlagStateUntilTimeout>
 80074e4:	4603      	mov	r3, r0
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d016      	beq.n	8007518 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074ee:	f043 0220 	orr.w	r2, r3, #32
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80074f6:	2303      	movs	r3, #3
 80074f8:	e00f      	b.n	800751a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d00a      	beq.n	8007516 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	3b01      	subs	r3, #1
 8007504:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	689b      	ldr	r3, [r3, #8]
 800750c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007510:	2b80      	cmp	r3, #128	; 0x80
 8007512:	d0f2      	beq.n	80074fa <SPI_EndRxTxTransaction+0x52>
 8007514:	e000      	b.n	8007518 <SPI_EndRxTxTransaction+0x70>
        break;
 8007516:	bf00      	nop
  }

  return HAL_OK;
 8007518:	2300      	movs	r3, #0
}
 800751a:	4618      	mov	r0, r3
 800751c:	3718      	adds	r7, #24
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}
 8007522:	bf00      	nop
 8007524:	2000000c 	.word	0x2000000c
 8007528:	165e9f81 	.word	0x165e9f81

0800752c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b082      	sub	sp, #8
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d101      	bne.n	800753e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800753a:	2301      	movs	r3, #1
 800753c:	e03f      	b.n	80075be <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007544:	b2db      	uxtb	r3, r3
 8007546:	2b00      	cmp	r3, #0
 8007548:	d106      	bne.n	8007558 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2200      	movs	r2, #0
 800754e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f7fc f9ec 	bl	8003930 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2224      	movs	r2, #36	; 0x24
 800755c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	68da      	ldr	r2, [r3, #12]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800756e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f001 f839 	bl	80085e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	691a      	ldr	r2, [r3, #16]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007584:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	695a      	ldr	r2, [r3, #20]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007594:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	68da      	ldr	r2, [r3, #12]
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80075a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2200      	movs	r2, #0
 80075aa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2220      	movs	r2, #32
 80075b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2220      	movs	r2, #32
 80075b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80075bc:	2300      	movs	r3, #0
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3708      	adds	r7, #8
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}

080075c6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075c6:	b580      	push	{r7, lr}
 80075c8:	b08a      	sub	sp, #40	; 0x28
 80075ca:	af02      	add	r7, sp, #8
 80075cc:	60f8      	str	r0, [r7, #12]
 80075ce:	60b9      	str	r1, [r7, #8]
 80075d0:	603b      	str	r3, [r7, #0]
 80075d2:	4613      	mov	r3, r2
 80075d4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80075d6:	2300      	movs	r3, #0
 80075d8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075e0:	b2db      	uxtb	r3, r3
 80075e2:	2b20      	cmp	r3, #32
 80075e4:	d17c      	bne.n	80076e0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d002      	beq.n	80075f2 <HAL_UART_Transmit+0x2c>
 80075ec:	88fb      	ldrh	r3, [r7, #6]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d101      	bne.n	80075f6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80075f2:	2301      	movs	r3, #1
 80075f4:	e075      	b.n	80076e2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	d101      	bne.n	8007604 <HAL_UART_Transmit+0x3e>
 8007600:	2302      	movs	r3, #2
 8007602:	e06e      	b.n	80076e2 <HAL_UART_Transmit+0x11c>
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2201      	movs	r2, #1
 8007608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2200      	movs	r2, #0
 8007610:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2221      	movs	r2, #33	; 0x21
 8007616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800761a:	f7fc fc07 	bl	8003e2c <HAL_GetTick>
 800761e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	88fa      	ldrh	r2, [r7, #6]
 8007624:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	88fa      	ldrh	r2, [r7, #6]
 800762a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	689b      	ldr	r3, [r3, #8]
 8007630:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007634:	d108      	bne.n	8007648 <HAL_UART_Transmit+0x82>
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	691b      	ldr	r3, [r3, #16]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d104      	bne.n	8007648 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800763e:	2300      	movs	r3, #0
 8007640:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	61bb      	str	r3, [r7, #24]
 8007646:	e003      	b.n	8007650 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800764c:	2300      	movs	r3, #0
 800764e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2200      	movs	r2, #0
 8007654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007658:	e02a      	b.n	80076b0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	9300      	str	r3, [sp, #0]
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	2200      	movs	r2, #0
 8007662:	2180      	movs	r1, #128	; 0x80
 8007664:	68f8      	ldr	r0, [r7, #12]
 8007666:	f000 fcf5 	bl	8008054 <UART_WaitOnFlagUntilTimeout>
 800766a:	4603      	mov	r3, r0
 800766c:	2b00      	cmp	r3, #0
 800766e:	d001      	beq.n	8007674 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007670:	2303      	movs	r3, #3
 8007672:	e036      	b.n	80076e2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007674:	69fb      	ldr	r3, [r7, #28]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d10b      	bne.n	8007692 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800767a:	69bb      	ldr	r3, [r7, #24]
 800767c:	881b      	ldrh	r3, [r3, #0]
 800767e:	461a      	mov	r2, r3
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007688:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800768a:	69bb      	ldr	r3, [r7, #24]
 800768c:	3302      	adds	r3, #2
 800768e:	61bb      	str	r3, [r7, #24]
 8007690:	e007      	b.n	80076a2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007692:	69fb      	ldr	r3, [r7, #28]
 8007694:	781a      	ldrb	r2, [r3, #0]
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800769c:	69fb      	ldr	r3, [r7, #28]
 800769e:	3301      	adds	r3, #1
 80076a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	3b01      	subs	r3, #1
 80076aa:	b29a      	uxth	r2, r3
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80076b4:	b29b      	uxth	r3, r3
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d1cf      	bne.n	800765a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	9300      	str	r3, [sp, #0]
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	2200      	movs	r2, #0
 80076c2:	2140      	movs	r1, #64	; 0x40
 80076c4:	68f8      	ldr	r0, [r7, #12]
 80076c6:	f000 fcc5 	bl	8008054 <UART_WaitOnFlagUntilTimeout>
 80076ca:	4603      	mov	r3, r0
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d001      	beq.n	80076d4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80076d0:	2303      	movs	r3, #3
 80076d2:	e006      	b.n	80076e2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2220      	movs	r2, #32
 80076d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80076dc:	2300      	movs	r3, #0
 80076de:	e000      	b.n	80076e2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80076e0:	2302      	movs	r3, #2
  }
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3720      	adds	r7, #32
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}

080076ea <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076ea:	b580      	push	{r7, lr}
 80076ec:	b08a      	sub	sp, #40	; 0x28
 80076ee:	af02      	add	r7, sp, #8
 80076f0:	60f8      	str	r0, [r7, #12]
 80076f2:	60b9      	str	r1, [r7, #8]
 80076f4:	603b      	str	r3, [r7, #0]
 80076f6:	4613      	mov	r3, r2
 80076f8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80076fa:	2300      	movs	r3, #0
 80076fc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007704:	b2db      	uxtb	r3, r3
 8007706:	2b20      	cmp	r3, #32
 8007708:	f040 808c 	bne.w	8007824 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d002      	beq.n	8007718 <HAL_UART_Receive+0x2e>
 8007712:	88fb      	ldrh	r3, [r7, #6]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d101      	bne.n	800771c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8007718:	2301      	movs	r3, #1
 800771a:	e084      	b.n	8007826 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007722:	2b01      	cmp	r3, #1
 8007724:	d101      	bne.n	800772a <HAL_UART_Receive+0x40>
 8007726:	2302      	movs	r3, #2
 8007728:	e07d      	b.n	8007826 <HAL_UART_Receive+0x13c>
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2201      	movs	r2, #1
 800772e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	2200      	movs	r2, #0
 8007736:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2222      	movs	r2, #34	; 0x22
 800773c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2200      	movs	r2, #0
 8007744:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007746:	f7fc fb71 	bl	8003e2c <HAL_GetTick>
 800774a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	88fa      	ldrh	r2, [r7, #6]
 8007750:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	88fa      	ldrh	r2, [r7, #6]
 8007756:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	689b      	ldr	r3, [r3, #8]
 800775c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007760:	d108      	bne.n	8007774 <HAL_UART_Receive+0x8a>
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	691b      	ldr	r3, [r3, #16]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d104      	bne.n	8007774 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800776a:	2300      	movs	r3, #0
 800776c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	61bb      	str	r3, [r7, #24]
 8007772:	e003      	b.n	800777c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007778:	2300      	movs	r3, #0
 800777a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	2200      	movs	r2, #0
 8007780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8007784:	e043      	b.n	800780e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	9300      	str	r3, [sp, #0]
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	2200      	movs	r2, #0
 800778e:	2120      	movs	r1, #32
 8007790:	68f8      	ldr	r0, [r7, #12]
 8007792:	f000 fc5f 	bl	8008054 <UART_WaitOnFlagUntilTimeout>
 8007796:	4603      	mov	r3, r0
 8007798:	2b00      	cmp	r3, #0
 800779a:	d001      	beq.n	80077a0 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800779c:	2303      	movs	r3, #3
 800779e:	e042      	b.n	8007826 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80077a0:	69fb      	ldr	r3, [r7, #28]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d10c      	bne.n	80077c0 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	b29b      	uxth	r3, r3
 80077ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077b2:	b29a      	uxth	r2, r3
 80077b4:	69bb      	ldr	r3, [r7, #24]
 80077b6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80077b8:	69bb      	ldr	r3, [r7, #24]
 80077ba:	3302      	adds	r3, #2
 80077bc:	61bb      	str	r3, [r7, #24]
 80077be:	e01f      	b.n	8007800 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	689b      	ldr	r3, [r3, #8]
 80077c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077c8:	d007      	beq.n	80077da <HAL_UART_Receive+0xf0>
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	689b      	ldr	r3, [r3, #8]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d10a      	bne.n	80077e8 <HAL_UART_Receive+0xfe>
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	691b      	ldr	r3, [r3, #16]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d106      	bne.n	80077e8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	b2da      	uxtb	r2, r3
 80077e2:	69fb      	ldr	r3, [r7, #28]
 80077e4:	701a      	strb	r2, [r3, #0]
 80077e6:	e008      	b.n	80077fa <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	b2db      	uxtb	r3, r3
 80077f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077f4:	b2da      	uxtb	r2, r3
 80077f6:	69fb      	ldr	r3, [r7, #28]
 80077f8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80077fa:	69fb      	ldr	r3, [r7, #28]
 80077fc:	3301      	adds	r3, #1
 80077fe:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007804:	b29b      	uxth	r3, r3
 8007806:	3b01      	subs	r3, #1
 8007808:	b29a      	uxth	r2, r3
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007812:	b29b      	uxth	r3, r3
 8007814:	2b00      	cmp	r3, #0
 8007816:	d1b6      	bne.n	8007786 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2220      	movs	r2, #32
 800781c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8007820:	2300      	movs	r3, #0
 8007822:	e000      	b.n	8007826 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8007824:	2302      	movs	r3, #2
  }
}
 8007826:	4618      	mov	r0, r3
 8007828:	3720      	adds	r7, #32
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}

0800782e <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800782e:	b580      	push	{r7, lr}
 8007830:	b08c      	sub	sp, #48	; 0x30
 8007832:	af00      	add	r7, sp, #0
 8007834:	60f8      	str	r0, [r7, #12]
 8007836:	60b9      	str	r1, [r7, #8]
 8007838:	4613      	mov	r3, r2
 800783a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007842:	b2db      	uxtb	r3, r3
 8007844:	2b20      	cmp	r3, #32
 8007846:	d152      	bne.n	80078ee <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d002      	beq.n	8007854 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800784e:	88fb      	ldrh	r3, [r7, #6]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d101      	bne.n	8007858 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8007854:	2301      	movs	r3, #1
 8007856:	e04b      	b.n	80078f0 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800785e:	2b01      	cmp	r3, #1
 8007860:	d101      	bne.n	8007866 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8007862:	2302      	movs	r3, #2
 8007864:	e044      	b.n	80078f0 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2201      	movs	r2, #1
 800786a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2201      	movs	r2, #1
 8007872:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8007874:	88fb      	ldrh	r3, [r7, #6]
 8007876:	461a      	mov	r2, r3
 8007878:	68b9      	ldr	r1, [r7, #8]
 800787a:	68f8      	ldr	r0, [r7, #12]
 800787c:	f000 fc58 	bl	8008130 <UART_Start_Receive_DMA>
 8007880:	4603      	mov	r3, r0
 8007882:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8007886:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800788a:	2b00      	cmp	r3, #0
 800788c:	d12c      	bne.n	80078e8 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007892:	2b01      	cmp	r3, #1
 8007894:	d125      	bne.n	80078e2 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007896:	2300      	movs	r3, #0
 8007898:	613b      	str	r3, [r7, #16]
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	613b      	str	r3, [r7, #16]
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	613b      	str	r3, [r7, #16]
 80078aa:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	330c      	adds	r3, #12
 80078b2:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b4:	69bb      	ldr	r3, [r7, #24]
 80078b6:	e853 3f00 	ldrex	r3, [r3]
 80078ba:	617b      	str	r3, [r7, #20]
   return(result);
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	f043 0310 	orr.w	r3, r3, #16
 80078c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	330c      	adds	r3, #12
 80078ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078cc:	627a      	str	r2, [r7, #36]	; 0x24
 80078ce:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078d0:	6a39      	ldr	r1, [r7, #32]
 80078d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078d4:	e841 2300 	strex	r3, r2, [r1]
 80078d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80078da:	69fb      	ldr	r3, [r7, #28]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d1e5      	bne.n	80078ac <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 80078e0:	e002      	b.n	80078e8 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80078e2:	2301      	movs	r3, #1
 80078e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80078e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80078ec:	e000      	b.n	80078f0 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 80078ee:	2302      	movs	r3, #2
  }
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3730      	adds	r7, #48	; 0x30
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}

080078f8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b0ba      	sub	sp, #232	; 0xe8
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	68db      	ldr	r3, [r3, #12]
 8007910:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	695b      	ldr	r3, [r3, #20]
 800791a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800791e:	2300      	movs	r3, #0
 8007920:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007924:	2300      	movs	r3, #0
 8007926:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800792a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800792e:	f003 030f 	and.w	r3, r3, #15
 8007932:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007936:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800793a:	2b00      	cmp	r3, #0
 800793c:	d10f      	bne.n	800795e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800793e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007942:	f003 0320 	and.w	r3, r3, #32
 8007946:	2b00      	cmp	r3, #0
 8007948:	d009      	beq.n	800795e <HAL_UART_IRQHandler+0x66>
 800794a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800794e:	f003 0320 	and.w	r3, r3, #32
 8007952:	2b00      	cmp	r3, #0
 8007954:	d003      	beq.n	800795e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f000 fd8b 	bl	8008472 <UART_Receive_IT>
      return;
 800795c:	e256      	b.n	8007e0c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800795e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007962:	2b00      	cmp	r3, #0
 8007964:	f000 80de 	beq.w	8007b24 <HAL_UART_IRQHandler+0x22c>
 8007968:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800796c:	f003 0301 	and.w	r3, r3, #1
 8007970:	2b00      	cmp	r3, #0
 8007972:	d106      	bne.n	8007982 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007974:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007978:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800797c:	2b00      	cmp	r3, #0
 800797e:	f000 80d1 	beq.w	8007b24 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007982:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007986:	f003 0301 	and.w	r3, r3, #1
 800798a:	2b00      	cmp	r3, #0
 800798c:	d00b      	beq.n	80079a6 <HAL_UART_IRQHandler+0xae>
 800798e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007996:	2b00      	cmp	r3, #0
 8007998:	d005      	beq.n	80079a6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800799e:	f043 0201 	orr.w	r2, r3, #1
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80079a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079aa:	f003 0304 	and.w	r3, r3, #4
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d00b      	beq.n	80079ca <HAL_UART_IRQHandler+0xd2>
 80079b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079b6:	f003 0301 	and.w	r3, r3, #1
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d005      	beq.n	80079ca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079c2:	f043 0202 	orr.w	r2, r3, #2
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80079ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079ce:	f003 0302 	and.w	r3, r3, #2
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d00b      	beq.n	80079ee <HAL_UART_IRQHandler+0xf6>
 80079d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079da:	f003 0301 	and.w	r3, r3, #1
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d005      	beq.n	80079ee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079e6:	f043 0204 	orr.w	r2, r3, #4
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80079ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079f2:	f003 0308 	and.w	r3, r3, #8
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d011      	beq.n	8007a1e <HAL_UART_IRQHandler+0x126>
 80079fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079fe:	f003 0320 	and.w	r3, r3, #32
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d105      	bne.n	8007a12 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007a06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a0a:	f003 0301 	and.w	r3, r3, #1
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d005      	beq.n	8007a1e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a16:	f043 0208 	orr.w	r2, r3, #8
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	f000 81ed 	beq.w	8007e02 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007a28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a2c:	f003 0320 	and.w	r3, r3, #32
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d008      	beq.n	8007a46 <HAL_UART_IRQHandler+0x14e>
 8007a34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a38:	f003 0320 	and.w	r3, r3, #32
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d002      	beq.n	8007a46 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f000 fd16 	bl	8008472 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	695b      	ldr	r3, [r3, #20]
 8007a4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a50:	2b40      	cmp	r3, #64	; 0x40
 8007a52:	bf0c      	ite	eq
 8007a54:	2301      	moveq	r3, #1
 8007a56:	2300      	movne	r3, #0
 8007a58:	b2db      	uxtb	r3, r3
 8007a5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a62:	f003 0308 	and.w	r3, r3, #8
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d103      	bne.n	8007a72 <HAL_UART_IRQHandler+0x17a>
 8007a6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d04f      	beq.n	8007b12 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f000 fc1e 	bl	80082b4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	695b      	ldr	r3, [r3, #20]
 8007a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a82:	2b40      	cmp	r3, #64	; 0x40
 8007a84:	d141      	bne.n	8007b0a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	3314      	adds	r3, #20
 8007a8c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a90:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007a94:	e853 3f00 	ldrex	r3, [r3]
 8007a98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007a9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007aa0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007aa4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	3314      	adds	r3, #20
 8007aae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007ab2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007ab6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007abe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007ac2:	e841 2300 	strex	r3, r2, [r1]
 8007ac6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007aca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d1d9      	bne.n	8007a86 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d013      	beq.n	8007b02 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ade:	4a7d      	ldr	r2, [pc, #500]	; (8007cd4 <HAL_UART_IRQHandler+0x3dc>)
 8007ae0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f7fc fc58 	bl	800439c <HAL_DMA_Abort_IT>
 8007aec:	4603      	mov	r3, r0
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d016      	beq.n	8007b20 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007af6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007af8:	687a      	ldr	r2, [r7, #4]
 8007afa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007afc:	4610      	mov	r0, r2
 8007afe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b00:	e00e      	b.n	8007b20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f000 f9a4 	bl	8007e50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b08:	e00a      	b.n	8007b20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f000 f9a0 	bl	8007e50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b10:	e006      	b.n	8007b20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f000 f99c 	bl	8007e50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007b1e:	e170      	b.n	8007e02 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b20:	bf00      	nop
    return;
 8007b22:	e16e      	b.n	8007e02 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b28:	2b01      	cmp	r3, #1
 8007b2a:	f040 814a 	bne.w	8007dc2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007b2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b32:	f003 0310 	and.w	r3, r3, #16
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	f000 8143 	beq.w	8007dc2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007b3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b40:	f003 0310 	and.w	r3, r3, #16
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	f000 813c 	beq.w	8007dc2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	60bb      	str	r3, [r7, #8]
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	60bb      	str	r3, [r7, #8]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	60bb      	str	r3, [r7, #8]
 8007b5e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	695b      	ldr	r3, [r3, #20]
 8007b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b6a:	2b40      	cmp	r3, #64	; 0x40
 8007b6c:	f040 80b4 	bne.w	8007cd8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	685b      	ldr	r3, [r3, #4]
 8007b78:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007b7c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	f000 8140 	beq.w	8007e06 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007b8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007b8e:	429a      	cmp	r2, r3
 8007b90:	f080 8139 	bcs.w	8007e06 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007b9a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ba0:	69db      	ldr	r3, [r3, #28]
 8007ba2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ba6:	f000 8088 	beq.w	8007cba <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	330c      	adds	r3, #12
 8007bb0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bb4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007bb8:	e853 3f00 	ldrex	r3, [r3]
 8007bbc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007bc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007bc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007bc8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	330c      	adds	r3, #12
 8007bd2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007bd6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007bda:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bde:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007be2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007be6:	e841 2300 	strex	r3, r2, [r1]
 8007bea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007bee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d1d9      	bne.n	8007baa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	3314      	adds	r3, #20
 8007bfc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c00:	e853 3f00 	ldrex	r3, [r3]
 8007c04:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007c06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c08:	f023 0301 	bic.w	r3, r3, #1
 8007c0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	3314      	adds	r3, #20
 8007c16:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007c1a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007c1e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c20:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007c22:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007c26:	e841 2300 	strex	r3, r2, [r1]
 8007c2a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007c2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d1e1      	bne.n	8007bf6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	3314      	adds	r3, #20
 8007c38:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c3c:	e853 3f00 	ldrex	r3, [r3]
 8007c40:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007c42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	3314      	adds	r3, #20
 8007c52:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007c56:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007c58:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c5a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007c5c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007c5e:	e841 2300 	strex	r3, r2, [r1]
 8007c62:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007c64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d1e3      	bne.n	8007c32 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2220      	movs	r2, #32
 8007c6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2200      	movs	r2, #0
 8007c76:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	330c      	adds	r3, #12
 8007c7e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c82:	e853 3f00 	ldrex	r3, [r3]
 8007c86:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007c88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c8a:	f023 0310 	bic.w	r3, r3, #16
 8007c8e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	330c      	adds	r3, #12
 8007c98:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007c9c:	65ba      	str	r2, [r7, #88]	; 0x58
 8007c9e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ca0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007ca2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007ca4:	e841 2300 	strex	r3, r2, [r1]
 8007ca8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007caa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d1e3      	bne.n	8007c78 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f7fc fb01 	bl	80042bc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007cc2:	b29b      	uxth	r3, r3
 8007cc4:	1ad3      	subs	r3, r2, r3
 8007cc6:	b29b      	uxth	r3, r3
 8007cc8:	4619      	mov	r1, r3
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f7fa ff08 	bl	8002ae0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007cd0:	e099      	b.n	8007e06 <HAL_UART_IRQHandler+0x50e>
 8007cd2:	bf00      	nop
 8007cd4:	0800837b 	.word	0x0800837b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ce0:	b29b      	uxth	r3, r3
 8007ce2:	1ad3      	subs	r3, r2, r3
 8007ce4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007cec:	b29b      	uxth	r3, r3
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	f000 808b 	beq.w	8007e0a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007cf4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	f000 8086 	beq.w	8007e0a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	330c      	adds	r3, #12
 8007d04:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d08:	e853 3f00 	ldrex	r3, [r3]
 8007d0c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007d0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d10:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007d14:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	330c      	adds	r3, #12
 8007d1e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007d22:	647a      	str	r2, [r7, #68]	; 0x44
 8007d24:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d26:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007d28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d2a:	e841 2300 	strex	r3, r2, [r1]
 8007d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007d30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d1e3      	bne.n	8007cfe <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	3314      	adds	r3, #20
 8007d3c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d40:	e853 3f00 	ldrex	r3, [r3]
 8007d44:	623b      	str	r3, [r7, #32]
   return(result);
 8007d46:	6a3b      	ldr	r3, [r7, #32]
 8007d48:	f023 0301 	bic.w	r3, r3, #1
 8007d4c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	3314      	adds	r3, #20
 8007d56:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007d5a:	633a      	str	r2, [r7, #48]	; 0x30
 8007d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d62:	e841 2300 	strex	r3, r2, [r1]
 8007d66:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d1e3      	bne.n	8007d36 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2220      	movs	r2, #32
 8007d72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	330c      	adds	r3, #12
 8007d82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	e853 3f00 	ldrex	r3, [r3]
 8007d8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	f023 0310 	bic.w	r3, r3, #16
 8007d92:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	330c      	adds	r3, #12
 8007d9c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007da0:	61fa      	str	r2, [r7, #28]
 8007da2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007da4:	69b9      	ldr	r1, [r7, #24]
 8007da6:	69fa      	ldr	r2, [r7, #28]
 8007da8:	e841 2300 	strex	r3, r2, [r1]
 8007dac:	617b      	str	r3, [r7, #20]
   return(result);
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d1e3      	bne.n	8007d7c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007db4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007db8:	4619      	mov	r1, r3
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f7fa fe90 	bl	8002ae0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007dc0:	e023      	b.n	8007e0a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007dc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d009      	beq.n	8007de2 <HAL_UART_IRQHandler+0x4ea>
 8007dce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d003      	beq.n	8007de2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f000 fae1 	bl	80083a2 <UART_Transmit_IT>
    return;
 8007de0:	e014      	b.n	8007e0c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d00e      	beq.n	8007e0c <HAL_UART_IRQHandler+0x514>
 8007dee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d008      	beq.n	8007e0c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f000 fb21 	bl	8008442 <UART_EndTransmit_IT>
    return;
 8007e00:	e004      	b.n	8007e0c <HAL_UART_IRQHandler+0x514>
    return;
 8007e02:	bf00      	nop
 8007e04:	e002      	b.n	8007e0c <HAL_UART_IRQHandler+0x514>
      return;
 8007e06:	bf00      	nop
 8007e08:	e000      	b.n	8007e0c <HAL_UART_IRQHandler+0x514>
      return;
 8007e0a:	bf00      	nop
  }
}
 8007e0c:	37e8      	adds	r7, #232	; 0xe8
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}
 8007e12:	bf00      	nop

08007e14 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b083      	sub	sp, #12
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007e1c:	bf00      	nop
 8007e1e:	370c      	adds	r7, #12
 8007e20:	46bd      	mov	sp, r7
 8007e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e26:	4770      	bx	lr

08007e28 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b083      	sub	sp, #12
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007e30:	bf00      	nop
 8007e32:	370c      	adds	r7, #12
 8007e34:	46bd      	mov	sp, r7
 8007e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3a:	4770      	bx	lr

08007e3c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b083      	sub	sp, #12
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007e44:	bf00      	nop
 8007e46:	370c      	adds	r7, #12
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4e:	4770      	bx	lr

08007e50 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b083      	sub	sp, #12
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007e58:	bf00      	nop
 8007e5a:	370c      	adds	r7, #12
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e62:	4770      	bx	lr

08007e64 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b09c      	sub	sp, #112	; 0x70
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e70:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d172      	bne.n	8007f66 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007e80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e82:	2200      	movs	r2, #0
 8007e84:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	330c      	adds	r3, #12
 8007e8c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e90:	e853 3f00 	ldrex	r3, [r3]
 8007e94:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007e96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e9c:	66bb      	str	r3, [r7, #104]	; 0x68
 8007e9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	330c      	adds	r3, #12
 8007ea4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007ea6:	65ba      	str	r2, [r7, #88]	; 0x58
 8007ea8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eaa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007eac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007eae:	e841 2300 	strex	r3, r2, [r1]
 8007eb2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007eb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d1e5      	bne.n	8007e86 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007eba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	3314      	adds	r3, #20
 8007ec0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ec4:	e853 3f00 	ldrex	r3, [r3]
 8007ec8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ecc:	f023 0301 	bic.w	r3, r3, #1
 8007ed0:	667b      	str	r3, [r7, #100]	; 0x64
 8007ed2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	3314      	adds	r3, #20
 8007ed8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007eda:	647a      	str	r2, [r7, #68]	; 0x44
 8007edc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ede:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007ee0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007ee2:	e841 2300 	strex	r3, r2, [r1]
 8007ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007ee8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d1e5      	bne.n	8007eba <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007eee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	3314      	adds	r3, #20
 8007ef4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef8:	e853 3f00 	ldrex	r3, [r3]
 8007efc:	623b      	str	r3, [r7, #32]
   return(result);
 8007efe:	6a3b      	ldr	r3, [r7, #32]
 8007f00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f04:	663b      	str	r3, [r7, #96]	; 0x60
 8007f06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	3314      	adds	r3, #20
 8007f0c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007f0e:	633a      	str	r2, [r7, #48]	; 0x30
 8007f10:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007f14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f16:	e841 2300 	strex	r3, r2, [r1]
 8007f1a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d1e5      	bne.n	8007eee <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007f22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f24:	2220      	movs	r2, #32
 8007f26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f2e:	2b01      	cmp	r3, #1
 8007f30:	d119      	bne.n	8007f66 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	330c      	adds	r3, #12
 8007f38:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f3a:	693b      	ldr	r3, [r7, #16]
 8007f3c:	e853 3f00 	ldrex	r3, [r3]
 8007f40:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	f023 0310 	bic.w	r3, r3, #16
 8007f48:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	330c      	adds	r3, #12
 8007f50:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007f52:	61fa      	str	r2, [r7, #28]
 8007f54:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f56:	69b9      	ldr	r1, [r7, #24]
 8007f58:	69fa      	ldr	r2, [r7, #28]
 8007f5a:	e841 2300 	strex	r3, r2, [r1]
 8007f5e:	617b      	str	r3, [r7, #20]
   return(result);
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d1e5      	bne.n	8007f32 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f6a:	2b01      	cmp	r3, #1
 8007f6c:	d106      	bne.n	8007f7c <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007f6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f70:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007f72:	4619      	mov	r1, r3
 8007f74:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007f76:	f7fa fdb3 	bl	8002ae0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007f7a:	e002      	b.n	8007f82 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8007f7c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007f7e:	f7ff ff53 	bl	8007e28 <HAL_UART_RxCpltCallback>
}
 8007f82:	bf00      	nop
 8007f84:	3770      	adds	r7, #112	; 0x70
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}

08007f8a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007f8a:	b580      	push	{r7, lr}
 8007f8c:	b084      	sub	sp, #16
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f96:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f9c:	2b01      	cmp	r3, #1
 8007f9e:	d108      	bne.n	8007fb2 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007fa4:	085b      	lsrs	r3, r3, #1
 8007fa6:	b29b      	uxth	r3, r3
 8007fa8:	4619      	mov	r1, r3
 8007faa:	68f8      	ldr	r0, [r7, #12]
 8007fac:	f7fa fd98 	bl	8002ae0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007fb0:	e002      	b.n	8007fb8 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8007fb2:	68f8      	ldr	r0, [r7, #12]
 8007fb4:	f7ff ff42 	bl	8007e3c <HAL_UART_RxHalfCpltCallback>
}
 8007fb8:	bf00      	nop
 8007fba:	3710      	adds	r7, #16
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}

08007fc0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b084      	sub	sp, #16
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fd0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	695b      	ldr	r3, [r3, #20]
 8007fd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fdc:	2b80      	cmp	r3, #128	; 0x80
 8007fde:	bf0c      	ite	eq
 8007fe0:	2301      	moveq	r3, #1
 8007fe2:	2300      	movne	r3, #0
 8007fe4:	b2db      	uxtb	r3, r3
 8007fe6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fee:	b2db      	uxtb	r3, r3
 8007ff0:	2b21      	cmp	r3, #33	; 0x21
 8007ff2:	d108      	bne.n	8008006 <UART_DMAError+0x46>
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d005      	beq.n	8008006 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008000:	68b8      	ldr	r0, [r7, #8]
 8008002:	f000 f92f 	bl	8008264 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	695b      	ldr	r3, [r3, #20]
 800800c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008010:	2b40      	cmp	r3, #64	; 0x40
 8008012:	bf0c      	ite	eq
 8008014:	2301      	moveq	r3, #1
 8008016:	2300      	movne	r3, #0
 8008018:	b2db      	uxtb	r3, r3
 800801a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008022:	b2db      	uxtb	r3, r3
 8008024:	2b22      	cmp	r3, #34	; 0x22
 8008026:	d108      	bne.n	800803a <UART_DMAError+0x7a>
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d005      	beq.n	800803a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	2200      	movs	r2, #0
 8008032:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008034:	68b8      	ldr	r0, [r7, #8]
 8008036:	f000 f93d 	bl	80082b4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800803e:	f043 0210 	orr.w	r2, r3, #16
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008046:	68b8      	ldr	r0, [r7, #8]
 8008048:	f7ff ff02 	bl	8007e50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800804c:	bf00      	nop
 800804e:	3710      	adds	r7, #16
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}

08008054 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b090      	sub	sp, #64	; 0x40
 8008058:	af00      	add	r7, sp, #0
 800805a:	60f8      	str	r0, [r7, #12]
 800805c:	60b9      	str	r1, [r7, #8]
 800805e:	603b      	str	r3, [r7, #0]
 8008060:	4613      	mov	r3, r2
 8008062:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008064:	e050      	b.n	8008108 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008066:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800806c:	d04c      	beq.n	8008108 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800806e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008070:	2b00      	cmp	r3, #0
 8008072:	d007      	beq.n	8008084 <UART_WaitOnFlagUntilTimeout+0x30>
 8008074:	f7fb feda 	bl	8003e2c <HAL_GetTick>
 8008078:	4602      	mov	r2, r0
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	1ad3      	subs	r3, r2, r3
 800807e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008080:	429a      	cmp	r2, r3
 8008082:	d241      	bcs.n	8008108 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	330c      	adds	r3, #12
 800808a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800808c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800808e:	e853 3f00 	ldrex	r3, [r3]
 8008092:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008096:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800809a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	330c      	adds	r3, #12
 80080a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80080a4:	637a      	str	r2, [r7, #52]	; 0x34
 80080a6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80080aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80080ac:	e841 2300 	strex	r3, r2, [r1]
 80080b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80080b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d1e5      	bne.n	8008084 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	3314      	adds	r3, #20
 80080be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	e853 3f00 	ldrex	r3, [r3]
 80080c6:	613b      	str	r3, [r7, #16]
   return(result);
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	f023 0301 	bic.w	r3, r3, #1
 80080ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	3314      	adds	r3, #20
 80080d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80080d8:	623a      	str	r2, [r7, #32]
 80080da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080dc:	69f9      	ldr	r1, [r7, #28]
 80080de:	6a3a      	ldr	r2, [r7, #32]
 80080e0:	e841 2300 	strex	r3, r2, [r1]
 80080e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80080e6:	69bb      	ldr	r3, [r7, #24]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d1e5      	bne.n	80080b8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	2220      	movs	r2, #32
 80080f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	2220      	movs	r2, #32
 80080f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	2200      	movs	r2, #0
 8008100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008104:	2303      	movs	r3, #3
 8008106:	e00f      	b.n	8008128 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	681a      	ldr	r2, [r3, #0]
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	4013      	ands	r3, r2
 8008112:	68ba      	ldr	r2, [r7, #8]
 8008114:	429a      	cmp	r2, r3
 8008116:	bf0c      	ite	eq
 8008118:	2301      	moveq	r3, #1
 800811a:	2300      	movne	r3, #0
 800811c:	b2db      	uxtb	r3, r3
 800811e:	461a      	mov	r2, r3
 8008120:	79fb      	ldrb	r3, [r7, #7]
 8008122:	429a      	cmp	r2, r3
 8008124:	d09f      	beq.n	8008066 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008126:	2300      	movs	r3, #0
}
 8008128:	4618      	mov	r0, r3
 800812a:	3740      	adds	r7, #64	; 0x40
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}

08008130 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b098      	sub	sp, #96	; 0x60
 8008134:	af00      	add	r7, sp, #0
 8008136:	60f8      	str	r0, [r7, #12]
 8008138:	60b9      	str	r1, [r7, #8]
 800813a:	4613      	mov	r3, r2
 800813c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800813e:	68ba      	ldr	r2, [r7, #8]
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	88fa      	ldrh	r2, [r7, #6]
 8008148:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	2200      	movs	r2, #0
 800814e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	2222      	movs	r2, #34	; 0x22
 8008154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800815c:	4a3e      	ldr	r2, [pc, #248]	; (8008258 <UART_Start_Receive_DMA+0x128>)
 800815e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008164:	4a3d      	ldr	r2, [pc, #244]	; (800825c <UART_Start_Receive_DMA+0x12c>)
 8008166:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800816c:	4a3c      	ldr	r2, [pc, #240]	; (8008260 <UART_Start_Receive_DMA+0x130>)
 800816e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008174:	2200      	movs	r2, #0
 8008176:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008178:	f107 0308 	add.w	r3, r7, #8
 800817c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	3304      	adds	r3, #4
 8008188:	4619      	mov	r1, r3
 800818a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800818c:	681a      	ldr	r2, [r3, #0]
 800818e:	88fb      	ldrh	r3, [r7, #6]
 8008190:	f7fc f83c 	bl	800420c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008194:	2300      	movs	r3, #0
 8008196:	613b      	str	r3, [r7, #16]
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	613b      	str	r3, [r7, #16]
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	685b      	ldr	r3, [r3, #4]
 80081a6:	613b      	str	r3, [r7, #16]
 80081a8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	2200      	movs	r2, #0
 80081ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	330c      	adds	r3, #12
 80081b8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081bc:	e853 3f00 	ldrex	r3, [r3]
 80081c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80081c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80081c8:	65bb      	str	r3, [r7, #88]	; 0x58
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	330c      	adds	r3, #12
 80081d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80081d2:	64fa      	str	r2, [r7, #76]	; 0x4c
 80081d4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081d6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80081d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80081da:	e841 2300 	strex	r3, r2, [r1]
 80081de:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80081e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d1e5      	bne.n	80081b2 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	3314      	adds	r3, #20
 80081ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081f0:	e853 3f00 	ldrex	r3, [r3]
 80081f4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80081f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081f8:	f043 0301 	orr.w	r3, r3, #1
 80081fc:	657b      	str	r3, [r7, #84]	; 0x54
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	3314      	adds	r3, #20
 8008204:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008206:	63ba      	str	r2, [r7, #56]	; 0x38
 8008208:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800820a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800820c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800820e:	e841 2300 	strex	r3, r2, [r1]
 8008212:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008216:	2b00      	cmp	r3, #0
 8008218:	d1e5      	bne.n	80081e6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	3314      	adds	r3, #20
 8008220:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008222:	69bb      	ldr	r3, [r7, #24]
 8008224:	e853 3f00 	ldrex	r3, [r3]
 8008228:	617b      	str	r3, [r7, #20]
   return(result);
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008230:	653b      	str	r3, [r7, #80]	; 0x50
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	3314      	adds	r3, #20
 8008238:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800823a:	627a      	str	r2, [r7, #36]	; 0x24
 800823c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800823e:	6a39      	ldr	r1, [r7, #32]
 8008240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008242:	e841 2300 	strex	r3, r2, [r1]
 8008246:	61fb      	str	r3, [r7, #28]
   return(result);
 8008248:	69fb      	ldr	r3, [r7, #28]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d1e5      	bne.n	800821a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800824e:	2300      	movs	r3, #0
}
 8008250:	4618      	mov	r0, r3
 8008252:	3760      	adds	r7, #96	; 0x60
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}
 8008258:	08007e65 	.word	0x08007e65
 800825c:	08007f8b 	.word	0x08007f8b
 8008260:	08007fc1 	.word	0x08007fc1

08008264 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008264:	b480      	push	{r7}
 8008266:	b089      	sub	sp, #36	; 0x24
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	330c      	adds	r3, #12
 8008272:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	e853 3f00 	ldrex	r3, [r3]
 800827a:	60bb      	str	r3, [r7, #8]
   return(result);
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008282:	61fb      	str	r3, [r7, #28]
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	330c      	adds	r3, #12
 800828a:	69fa      	ldr	r2, [r7, #28]
 800828c:	61ba      	str	r2, [r7, #24]
 800828e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008290:	6979      	ldr	r1, [r7, #20]
 8008292:	69ba      	ldr	r2, [r7, #24]
 8008294:	e841 2300 	strex	r3, r2, [r1]
 8008298:	613b      	str	r3, [r7, #16]
   return(result);
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d1e5      	bne.n	800826c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2220      	movs	r2, #32
 80082a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80082a8:	bf00      	nop
 80082aa:	3724      	adds	r7, #36	; 0x24
 80082ac:	46bd      	mov	sp, r7
 80082ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b2:	4770      	bx	lr

080082b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80082b4:	b480      	push	{r7}
 80082b6:	b095      	sub	sp, #84	; 0x54
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	330c      	adds	r3, #12
 80082c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082c6:	e853 3f00 	ldrex	r3, [r3]
 80082ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80082cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80082d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	330c      	adds	r3, #12
 80082da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80082dc:	643a      	str	r2, [r7, #64]	; 0x40
 80082de:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80082e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80082e4:	e841 2300 	strex	r3, r2, [r1]
 80082e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80082ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d1e5      	bne.n	80082bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	3314      	adds	r3, #20
 80082f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082f8:	6a3b      	ldr	r3, [r7, #32]
 80082fa:	e853 3f00 	ldrex	r3, [r3]
 80082fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8008300:	69fb      	ldr	r3, [r7, #28]
 8008302:	f023 0301 	bic.w	r3, r3, #1
 8008306:	64bb      	str	r3, [r7, #72]	; 0x48
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	3314      	adds	r3, #20
 800830e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008310:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008312:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008314:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008316:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008318:	e841 2300 	strex	r3, r2, [r1]
 800831c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800831e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008320:	2b00      	cmp	r3, #0
 8008322:	d1e5      	bne.n	80082f0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008328:	2b01      	cmp	r3, #1
 800832a:	d119      	bne.n	8008360 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	330c      	adds	r3, #12
 8008332:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	e853 3f00 	ldrex	r3, [r3]
 800833a:	60bb      	str	r3, [r7, #8]
   return(result);
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	f023 0310 	bic.w	r3, r3, #16
 8008342:	647b      	str	r3, [r7, #68]	; 0x44
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	330c      	adds	r3, #12
 800834a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800834c:	61ba      	str	r2, [r7, #24]
 800834e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008350:	6979      	ldr	r1, [r7, #20]
 8008352:	69ba      	ldr	r2, [r7, #24]
 8008354:	e841 2300 	strex	r3, r2, [r1]
 8008358:	613b      	str	r3, [r7, #16]
   return(result);
 800835a:	693b      	ldr	r3, [r7, #16]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d1e5      	bne.n	800832c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2220      	movs	r2, #32
 8008364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2200      	movs	r2, #0
 800836c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800836e:	bf00      	nop
 8008370:	3754      	adds	r7, #84	; 0x54
 8008372:	46bd      	mov	sp, r7
 8008374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008378:	4770      	bx	lr

0800837a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800837a:	b580      	push	{r7, lr}
 800837c:	b084      	sub	sp, #16
 800837e:	af00      	add	r7, sp, #0
 8008380:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008386:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	2200      	movs	r2, #0
 800838c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	2200      	movs	r2, #0
 8008392:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008394:	68f8      	ldr	r0, [r7, #12]
 8008396:	f7ff fd5b 	bl	8007e50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800839a:	bf00      	nop
 800839c:	3710      	adds	r7, #16
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}

080083a2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80083a2:	b480      	push	{r7}
 80083a4:	b085      	sub	sp, #20
 80083a6:	af00      	add	r7, sp, #0
 80083a8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083b0:	b2db      	uxtb	r3, r3
 80083b2:	2b21      	cmp	r3, #33	; 0x21
 80083b4:	d13e      	bne.n	8008434 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	689b      	ldr	r3, [r3, #8]
 80083ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083be:	d114      	bne.n	80083ea <UART_Transmit_IT+0x48>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	691b      	ldr	r3, [r3, #16]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d110      	bne.n	80083ea <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6a1b      	ldr	r3, [r3, #32]
 80083cc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	881b      	ldrh	r3, [r3, #0]
 80083d2:	461a      	mov	r2, r3
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80083dc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6a1b      	ldr	r3, [r3, #32]
 80083e2:	1c9a      	adds	r2, r3, #2
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	621a      	str	r2, [r3, #32]
 80083e8:	e008      	b.n	80083fc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6a1b      	ldr	r3, [r3, #32]
 80083ee:	1c59      	adds	r1, r3, #1
 80083f0:	687a      	ldr	r2, [r7, #4]
 80083f2:	6211      	str	r1, [r2, #32]
 80083f4:	781a      	ldrb	r2, [r3, #0]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008400:	b29b      	uxth	r3, r3
 8008402:	3b01      	subs	r3, #1
 8008404:	b29b      	uxth	r3, r3
 8008406:	687a      	ldr	r2, [r7, #4]
 8008408:	4619      	mov	r1, r3
 800840a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800840c:	2b00      	cmp	r3, #0
 800840e:	d10f      	bne.n	8008430 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	68da      	ldr	r2, [r3, #12]
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800841e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	68da      	ldr	r2, [r3, #12]
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800842e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008430:	2300      	movs	r3, #0
 8008432:	e000      	b.n	8008436 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008434:	2302      	movs	r3, #2
  }
}
 8008436:	4618      	mov	r0, r3
 8008438:	3714      	adds	r7, #20
 800843a:	46bd      	mov	sp, r7
 800843c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008440:	4770      	bx	lr

08008442 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008442:	b580      	push	{r7, lr}
 8008444:	b082      	sub	sp, #8
 8008446:	af00      	add	r7, sp, #0
 8008448:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	68da      	ldr	r2, [r3, #12]
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008458:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2220      	movs	r2, #32
 800845e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f7ff fcd6 	bl	8007e14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008468:	2300      	movs	r3, #0
}
 800846a:	4618      	mov	r0, r3
 800846c:	3708      	adds	r7, #8
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}

08008472 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008472:	b580      	push	{r7, lr}
 8008474:	b08c      	sub	sp, #48	; 0x30
 8008476:	af00      	add	r7, sp, #0
 8008478:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008480:	b2db      	uxtb	r3, r3
 8008482:	2b22      	cmp	r3, #34	; 0x22
 8008484:	f040 80ab 	bne.w	80085de <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	689b      	ldr	r3, [r3, #8]
 800848c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008490:	d117      	bne.n	80084c2 <UART_Receive_IT+0x50>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	691b      	ldr	r3, [r3, #16]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d113      	bne.n	80084c2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800849a:	2300      	movs	r3, #0
 800849c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084a2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	685b      	ldr	r3, [r3, #4]
 80084aa:	b29b      	uxth	r3, r3
 80084ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084b0:	b29a      	uxth	r2, r3
 80084b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084b4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084ba:	1c9a      	adds	r2, r3, #2
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	629a      	str	r2, [r3, #40]	; 0x28
 80084c0:	e026      	b.n	8008510 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80084c8:	2300      	movs	r3, #0
 80084ca:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	689b      	ldr	r3, [r3, #8]
 80084d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084d4:	d007      	beq.n	80084e6 <UART_Receive_IT+0x74>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	689b      	ldr	r3, [r3, #8]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d10a      	bne.n	80084f4 <UART_Receive_IT+0x82>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	691b      	ldr	r3, [r3, #16]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d106      	bne.n	80084f4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	685b      	ldr	r3, [r3, #4]
 80084ec:	b2da      	uxtb	r2, r3
 80084ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084f0:	701a      	strb	r2, [r3, #0]
 80084f2:	e008      	b.n	8008506 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	685b      	ldr	r3, [r3, #4]
 80084fa:	b2db      	uxtb	r3, r3
 80084fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008500:	b2da      	uxtb	r2, r3
 8008502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008504:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800850a:	1c5a      	adds	r2, r3, #1
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008514:	b29b      	uxth	r3, r3
 8008516:	3b01      	subs	r3, #1
 8008518:	b29b      	uxth	r3, r3
 800851a:	687a      	ldr	r2, [r7, #4]
 800851c:	4619      	mov	r1, r3
 800851e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008520:	2b00      	cmp	r3, #0
 8008522:	d15a      	bne.n	80085da <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	68da      	ldr	r2, [r3, #12]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f022 0220 	bic.w	r2, r2, #32
 8008532:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	68da      	ldr	r2, [r3, #12]
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008542:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	695a      	ldr	r2, [r3, #20]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f022 0201 	bic.w	r2, r2, #1
 8008552:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2220      	movs	r2, #32
 8008558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008560:	2b01      	cmp	r3, #1
 8008562:	d135      	bne.n	80085d0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2200      	movs	r2, #0
 8008568:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	330c      	adds	r3, #12
 8008570:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	e853 3f00 	ldrex	r3, [r3]
 8008578:	613b      	str	r3, [r7, #16]
   return(result);
 800857a:	693b      	ldr	r3, [r7, #16]
 800857c:	f023 0310 	bic.w	r3, r3, #16
 8008580:	627b      	str	r3, [r7, #36]	; 0x24
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	330c      	adds	r3, #12
 8008588:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800858a:	623a      	str	r2, [r7, #32]
 800858c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800858e:	69f9      	ldr	r1, [r7, #28]
 8008590:	6a3a      	ldr	r2, [r7, #32]
 8008592:	e841 2300 	strex	r3, r2, [r1]
 8008596:	61bb      	str	r3, [r7, #24]
   return(result);
 8008598:	69bb      	ldr	r3, [r7, #24]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d1e5      	bne.n	800856a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f003 0310 	and.w	r3, r3, #16
 80085a8:	2b10      	cmp	r3, #16
 80085aa:	d10a      	bne.n	80085c2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80085ac:	2300      	movs	r3, #0
 80085ae:	60fb      	str	r3, [r7, #12]
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	60fb      	str	r3, [r7, #12]
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	60fb      	str	r3, [r7, #12]
 80085c0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80085c6:	4619      	mov	r1, r3
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f7fa fa89 	bl	8002ae0 <HAL_UARTEx_RxEventCallback>
 80085ce:	e002      	b.n	80085d6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f7ff fc29 	bl	8007e28 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80085d6:	2300      	movs	r3, #0
 80085d8:	e002      	b.n	80085e0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80085da:	2300      	movs	r3, #0
 80085dc:	e000      	b.n	80085e0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80085de:	2302      	movs	r3, #2
  }
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	3730      	adds	r7, #48	; 0x30
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}

080085e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80085e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085ec:	b09f      	sub	sp, #124	; 0x7c
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80085f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	691b      	ldr	r3, [r3, #16]
 80085f8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80085fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085fe:	68d9      	ldr	r1, [r3, #12]
 8008600:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008602:	681a      	ldr	r2, [r3, #0]
 8008604:	ea40 0301 	orr.w	r3, r0, r1
 8008608:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800860a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800860c:	689a      	ldr	r2, [r3, #8]
 800860e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008610:	691b      	ldr	r3, [r3, #16]
 8008612:	431a      	orrs	r2, r3
 8008614:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008616:	695b      	ldr	r3, [r3, #20]
 8008618:	431a      	orrs	r2, r3
 800861a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800861c:	69db      	ldr	r3, [r3, #28]
 800861e:	4313      	orrs	r3, r2
 8008620:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8008622:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	68db      	ldr	r3, [r3, #12]
 8008628:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800862c:	f021 010c 	bic.w	r1, r1, #12
 8008630:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008632:	681a      	ldr	r2, [r3, #0]
 8008634:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008636:	430b      	orrs	r3, r1
 8008638:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800863a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	695b      	ldr	r3, [r3, #20]
 8008640:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008644:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008646:	6999      	ldr	r1, [r3, #24]
 8008648:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800864a:	681a      	ldr	r2, [r3, #0]
 800864c:	ea40 0301 	orr.w	r3, r0, r1
 8008650:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008652:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008654:	681a      	ldr	r2, [r3, #0]
 8008656:	4bc5      	ldr	r3, [pc, #788]	; (800896c <UART_SetConfig+0x384>)
 8008658:	429a      	cmp	r2, r3
 800865a:	d004      	beq.n	8008666 <UART_SetConfig+0x7e>
 800865c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800865e:	681a      	ldr	r2, [r3, #0]
 8008660:	4bc3      	ldr	r3, [pc, #780]	; (8008970 <UART_SetConfig+0x388>)
 8008662:	429a      	cmp	r2, r3
 8008664:	d103      	bne.n	800866e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008666:	f7fd ff2b 	bl	80064c0 <HAL_RCC_GetPCLK2Freq>
 800866a:	6778      	str	r0, [r7, #116]	; 0x74
 800866c:	e002      	b.n	8008674 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800866e:	f7fd ff13 	bl	8006498 <HAL_RCC_GetPCLK1Freq>
 8008672:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008674:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008676:	69db      	ldr	r3, [r3, #28]
 8008678:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800867c:	f040 80b6 	bne.w	80087ec <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008680:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008682:	461c      	mov	r4, r3
 8008684:	f04f 0500 	mov.w	r5, #0
 8008688:	4622      	mov	r2, r4
 800868a:	462b      	mov	r3, r5
 800868c:	1891      	adds	r1, r2, r2
 800868e:	6439      	str	r1, [r7, #64]	; 0x40
 8008690:	415b      	adcs	r3, r3
 8008692:	647b      	str	r3, [r7, #68]	; 0x44
 8008694:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008698:	1912      	adds	r2, r2, r4
 800869a:	eb45 0303 	adc.w	r3, r5, r3
 800869e:	f04f 0000 	mov.w	r0, #0
 80086a2:	f04f 0100 	mov.w	r1, #0
 80086a6:	00d9      	lsls	r1, r3, #3
 80086a8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80086ac:	00d0      	lsls	r0, r2, #3
 80086ae:	4602      	mov	r2, r0
 80086b0:	460b      	mov	r3, r1
 80086b2:	1911      	adds	r1, r2, r4
 80086b4:	6639      	str	r1, [r7, #96]	; 0x60
 80086b6:	416b      	adcs	r3, r5
 80086b8:	667b      	str	r3, [r7, #100]	; 0x64
 80086ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086bc:	685b      	ldr	r3, [r3, #4]
 80086be:	461a      	mov	r2, r3
 80086c0:	f04f 0300 	mov.w	r3, #0
 80086c4:	1891      	adds	r1, r2, r2
 80086c6:	63b9      	str	r1, [r7, #56]	; 0x38
 80086c8:	415b      	adcs	r3, r3
 80086ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80086d0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80086d4:	f7f8 fad8 	bl	8000c88 <__aeabi_uldivmod>
 80086d8:	4602      	mov	r2, r0
 80086da:	460b      	mov	r3, r1
 80086dc:	4ba5      	ldr	r3, [pc, #660]	; (8008974 <UART_SetConfig+0x38c>)
 80086de:	fba3 2302 	umull	r2, r3, r3, r2
 80086e2:	095b      	lsrs	r3, r3, #5
 80086e4:	011e      	lsls	r6, r3, #4
 80086e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80086e8:	461c      	mov	r4, r3
 80086ea:	f04f 0500 	mov.w	r5, #0
 80086ee:	4622      	mov	r2, r4
 80086f0:	462b      	mov	r3, r5
 80086f2:	1891      	adds	r1, r2, r2
 80086f4:	6339      	str	r1, [r7, #48]	; 0x30
 80086f6:	415b      	adcs	r3, r3
 80086f8:	637b      	str	r3, [r7, #52]	; 0x34
 80086fa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80086fe:	1912      	adds	r2, r2, r4
 8008700:	eb45 0303 	adc.w	r3, r5, r3
 8008704:	f04f 0000 	mov.w	r0, #0
 8008708:	f04f 0100 	mov.w	r1, #0
 800870c:	00d9      	lsls	r1, r3, #3
 800870e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008712:	00d0      	lsls	r0, r2, #3
 8008714:	4602      	mov	r2, r0
 8008716:	460b      	mov	r3, r1
 8008718:	1911      	adds	r1, r2, r4
 800871a:	65b9      	str	r1, [r7, #88]	; 0x58
 800871c:	416b      	adcs	r3, r5
 800871e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008720:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	461a      	mov	r2, r3
 8008726:	f04f 0300 	mov.w	r3, #0
 800872a:	1891      	adds	r1, r2, r2
 800872c:	62b9      	str	r1, [r7, #40]	; 0x28
 800872e:	415b      	adcs	r3, r3
 8008730:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008732:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008736:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800873a:	f7f8 faa5 	bl	8000c88 <__aeabi_uldivmod>
 800873e:	4602      	mov	r2, r0
 8008740:	460b      	mov	r3, r1
 8008742:	4b8c      	ldr	r3, [pc, #560]	; (8008974 <UART_SetConfig+0x38c>)
 8008744:	fba3 1302 	umull	r1, r3, r3, r2
 8008748:	095b      	lsrs	r3, r3, #5
 800874a:	2164      	movs	r1, #100	; 0x64
 800874c:	fb01 f303 	mul.w	r3, r1, r3
 8008750:	1ad3      	subs	r3, r2, r3
 8008752:	00db      	lsls	r3, r3, #3
 8008754:	3332      	adds	r3, #50	; 0x32
 8008756:	4a87      	ldr	r2, [pc, #540]	; (8008974 <UART_SetConfig+0x38c>)
 8008758:	fba2 2303 	umull	r2, r3, r2, r3
 800875c:	095b      	lsrs	r3, r3, #5
 800875e:	005b      	lsls	r3, r3, #1
 8008760:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008764:	441e      	add	r6, r3
 8008766:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008768:	4618      	mov	r0, r3
 800876a:	f04f 0100 	mov.w	r1, #0
 800876e:	4602      	mov	r2, r0
 8008770:	460b      	mov	r3, r1
 8008772:	1894      	adds	r4, r2, r2
 8008774:	623c      	str	r4, [r7, #32]
 8008776:	415b      	adcs	r3, r3
 8008778:	627b      	str	r3, [r7, #36]	; 0x24
 800877a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800877e:	1812      	adds	r2, r2, r0
 8008780:	eb41 0303 	adc.w	r3, r1, r3
 8008784:	f04f 0400 	mov.w	r4, #0
 8008788:	f04f 0500 	mov.w	r5, #0
 800878c:	00dd      	lsls	r5, r3, #3
 800878e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008792:	00d4      	lsls	r4, r2, #3
 8008794:	4622      	mov	r2, r4
 8008796:	462b      	mov	r3, r5
 8008798:	1814      	adds	r4, r2, r0
 800879a:	653c      	str	r4, [r7, #80]	; 0x50
 800879c:	414b      	adcs	r3, r1
 800879e:	657b      	str	r3, [r7, #84]	; 0x54
 80087a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087a2:	685b      	ldr	r3, [r3, #4]
 80087a4:	461a      	mov	r2, r3
 80087a6:	f04f 0300 	mov.w	r3, #0
 80087aa:	1891      	adds	r1, r2, r2
 80087ac:	61b9      	str	r1, [r7, #24]
 80087ae:	415b      	adcs	r3, r3
 80087b0:	61fb      	str	r3, [r7, #28]
 80087b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80087b6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80087ba:	f7f8 fa65 	bl	8000c88 <__aeabi_uldivmod>
 80087be:	4602      	mov	r2, r0
 80087c0:	460b      	mov	r3, r1
 80087c2:	4b6c      	ldr	r3, [pc, #432]	; (8008974 <UART_SetConfig+0x38c>)
 80087c4:	fba3 1302 	umull	r1, r3, r3, r2
 80087c8:	095b      	lsrs	r3, r3, #5
 80087ca:	2164      	movs	r1, #100	; 0x64
 80087cc:	fb01 f303 	mul.w	r3, r1, r3
 80087d0:	1ad3      	subs	r3, r2, r3
 80087d2:	00db      	lsls	r3, r3, #3
 80087d4:	3332      	adds	r3, #50	; 0x32
 80087d6:	4a67      	ldr	r2, [pc, #412]	; (8008974 <UART_SetConfig+0x38c>)
 80087d8:	fba2 2303 	umull	r2, r3, r2, r3
 80087dc:	095b      	lsrs	r3, r3, #5
 80087de:	f003 0207 	and.w	r2, r3, #7
 80087e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	4432      	add	r2, r6
 80087e8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80087ea:	e0b9      	b.n	8008960 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80087ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80087ee:	461c      	mov	r4, r3
 80087f0:	f04f 0500 	mov.w	r5, #0
 80087f4:	4622      	mov	r2, r4
 80087f6:	462b      	mov	r3, r5
 80087f8:	1891      	adds	r1, r2, r2
 80087fa:	6139      	str	r1, [r7, #16]
 80087fc:	415b      	adcs	r3, r3
 80087fe:	617b      	str	r3, [r7, #20]
 8008800:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008804:	1912      	adds	r2, r2, r4
 8008806:	eb45 0303 	adc.w	r3, r5, r3
 800880a:	f04f 0000 	mov.w	r0, #0
 800880e:	f04f 0100 	mov.w	r1, #0
 8008812:	00d9      	lsls	r1, r3, #3
 8008814:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008818:	00d0      	lsls	r0, r2, #3
 800881a:	4602      	mov	r2, r0
 800881c:	460b      	mov	r3, r1
 800881e:	eb12 0804 	adds.w	r8, r2, r4
 8008822:	eb43 0905 	adc.w	r9, r3, r5
 8008826:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008828:	685b      	ldr	r3, [r3, #4]
 800882a:	4618      	mov	r0, r3
 800882c:	f04f 0100 	mov.w	r1, #0
 8008830:	f04f 0200 	mov.w	r2, #0
 8008834:	f04f 0300 	mov.w	r3, #0
 8008838:	008b      	lsls	r3, r1, #2
 800883a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800883e:	0082      	lsls	r2, r0, #2
 8008840:	4640      	mov	r0, r8
 8008842:	4649      	mov	r1, r9
 8008844:	f7f8 fa20 	bl	8000c88 <__aeabi_uldivmod>
 8008848:	4602      	mov	r2, r0
 800884a:	460b      	mov	r3, r1
 800884c:	4b49      	ldr	r3, [pc, #292]	; (8008974 <UART_SetConfig+0x38c>)
 800884e:	fba3 2302 	umull	r2, r3, r3, r2
 8008852:	095b      	lsrs	r3, r3, #5
 8008854:	011e      	lsls	r6, r3, #4
 8008856:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008858:	4618      	mov	r0, r3
 800885a:	f04f 0100 	mov.w	r1, #0
 800885e:	4602      	mov	r2, r0
 8008860:	460b      	mov	r3, r1
 8008862:	1894      	adds	r4, r2, r2
 8008864:	60bc      	str	r4, [r7, #8]
 8008866:	415b      	adcs	r3, r3
 8008868:	60fb      	str	r3, [r7, #12]
 800886a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800886e:	1812      	adds	r2, r2, r0
 8008870:	eb41 0303 	adc.w	r3, r1, r3
 8008874:	f04f 0400 	mov.w	r4, #0
 8008878:	f04f 0500 	mov.w	r5, #0
 800887c:	00dd      	lsls	r5, r3, #3
 800887e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008882:	00d4      	lsls	r4, r2, #3
 8008884:	4622      	mov	r2, r4
 8008886:	462b      	mov	r3, r5
 8008888:	1814      	adds	r4, r2, r0
 800888a:	64bc      	str	r4, [r7, #72]	; 0x48
 800888c:	414b      	adcs	r3, r1
 800888e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008890:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008892:	685b      	ldr	r3, [r3, #4]
 8008894:	4618      	mov	r0, r3
 8008896:	f04f 0100 	mov.w	r1, #0
 800889a:	f04f 0200 	mov.w	r2, #0
 800889e:	f04f 0300 	mov.w	r3, #0
 80088a2:	008b      	lsls	r3, r1, #2
 80088a4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80088a8:	0082      	lsls	r2, r0, #2
 80088aa:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80088ae:	f7f8 f9eb 	bl	8000c88 <__aeabi_uldivmod>
 80088b2:	4602      	mov	r2, r0
 80088b4:	460b      	mov	r3, r1
 80088b6:	4b2f      	ldr	r3, [pc, #188]	; (8008974 <UART_SetConfig+0x38c>)
 80088b8:	fba3 1302 	umull	r1, r3, r3, r2
 80088bc:	095b      	lsrs	r3, r3, #5
 80088be:	2164      	movs	r1, #100	; 0x64
 80088c0:	fb01 f303 	mul.w	r3, r1, r3
 80088c4:	1ad3      	subs	r3, r2, r3
 80088c6:	011b      	lsls	r3, r3, #4
 80088c8:	3332      	adds	r3, #50	; 0x32
 80088ca:	4a2a      	ldr	r2, [pc, #168]	; (8008974 <UART_SetConfig+0x38c>)
 80088cc:	fba2 2303 	umull	r2, r3, r2, r3
 80088d0:	095b      	lsrs	r3, r3, #5
 80088d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80088d6:	441e      	add	r6, r3
 80088d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80088da:	4618      	mov	r0, r3
 80088dc:	f04f 0100 	mov.w	r1, #0
 80088e0:	4602      	mov	r2, r0
 80088e2:	460b      	mov	r3, r1
 80088e4:	1894      	adds	r4, r2, r2
 80088e6:	603c      	str	r4, [r7, #0]
 80088e8:	415b      	adcs	r3, r3
 80088ea:	607b      	str	r3, [r7, #4]
 80088ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088f0:	1812      	adds	r2, r2, r0
 80088f2:	eb41 0303 	adc.w	r3, r1, r3
 80088f6:	f04f 0400 	mov.w	r4, #0
 80088fa:	f04f 0500 	mov.w	r5, #0
 80088fe:	00dd      	lsls	r5, r3, #3
 8008900:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008904:	00d4      	lsls	r4, r2, #3
 8008906:	4622      	mov	r2, r4
 8008908:	462b      	mov	r3, r5
 800890a:	eb12 0a00 	adds.w	sl, r2, r0
 800890e:	eb43 0b01 	adc.w	fp, r3, r1
 8008912:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008914:	685b      	ldr	r3, [r3, #4]
 8008916:	4618      	mov	r0, r3
 8008918:	f04f 0100 	mov.w	r1, #0
 800891c:	f04f 0200 	mov.w	r2, #0
 8008920:	f04f 0300 	mov.w	r3, #0
 8008924:	008b      	lsls	r3, r1, #2
 8008926:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800892a:	0082      	lsls	r2, r0, #2
 800892c:	4650      	mov	r0, sl
 800892e:	4659      	mov	r1, fp
 8008930:	f7f8 f9aa 	bl	8000c88 <__aeabi_uldivmod>
 8008934:	4602      	mov	r2, r0
 8008936:	460b      	mov	r3, r1
 8008938:	4b0e      	ldr	r3, [pc, #56]	; (8008974 <UART_SetConfig+0x38c>)
 800893a:	fba3 1302 	umull	r1, r3, r3, r2
 800893e:	095b      	lsrs	r3, r3, #5
 8008940:	2164      	movs	r1, #100	; 0x64
 8008942:	fb01 f303 	mul.w	r3, r1, r3
 8008946:	1ad3      	subs	r3, r2, r3
 8008948:	011b      	lsls	r3, r3, #4
 800894a:	3332      	adds	r3, #50	; 0x32
 800894c:	4a09      	ldr	r2, [pc, #36]	; (8008974 <UART_SetConfig+0x38c>)
 800894e:	fba2 2303 	umull	r2, r3, r2, r3
 8008952:	095b      	lsrs	r3, r3, #5
 8008954:	f003 020f 	and.w	r2, r3, #15
 8008958:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	4432      	add	r2, r6
 800895e:	609a      	str	r2, [r3, #8]
}
 8008960:	bf00      	nop
 8008962:	377c      	adds	r7, #124	; 0x7c
 8008964:	46bd      	mov	sp, r7
 8008966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800896a:	bf00      	nop
 800896c:	40011000 	.word	0x40011000
 8008970:	40011400 	.word	0x40011400
 8008974:	51eb851f 	.word	0x51eb851f

08008978 <atoi>:
 8008978:	220a      	movs	r2, #10
 800897a:	2100      	movs	r1, #0
 800897c:	f002 b84a 	b.w	800aa14 <strtol>

08008980 <__errno>:
 8008980:	4b01      	ldr	r3, [pc, #4]	; (8008988 <__errno+0x8>)
 8008982:	6818      	ldr	r0, [r3, #0]
 8008984:	4770      	bx	lr
 8008986:	bf00      	nop
 8008988:	20000018 	.word	0x20000018

0800898c <__libc_init_array>:
 800898c:	b570      	push	{r4, r5, r6, lr}
 800898e:	4d0d      	ldr	r5, [pc, #52]	; (80089c4 <__libc_init_array+0x38>)
 8008990:	4c0d      	ldr	r4, [pc, #52]	; (80089c8 <__libc_init_array+0x3c>)
 8008992:	1b64      	subs	r4, r4, r5
 8008994:	10a4      	asrs	r4, r4, #2
 8008996:	2600      	movs	r6, #0
 8008998:	42a6      	cmp	r6, r4
 800899a:	d109      	bne.n	80089b0 <__libc_init_array+0x24>
 800899c:	4d0b      	ldr	r5, [pc, #44]	; (80089cc <__libc_init_array+0x40>)
 800899e:	4c0c      	ldr	r4, [pc, #48]	; (80089d0 <__libc_init_array+0x44>)
 80089a0:	f004 fe00 	bl	800d5a4 <_init>
 80089a4:	1b64      	subs	r4, r4, r5
 80089a6:	10a4      	asrs	r4, r4, #2
 80089a8:	2600      	movs	r6, #0
 80089aa:	42a6      	cmp	r6, r4
 80089ac:	d105      	bne.n	80089ba <__libc_init_array+0x2e>
 80089ae:	bd70      	pop	{r4, r5, r6, pc}
 80089b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80089b4:	4798      	blx	r3
 80089b6:	3601      	adds	r6, #1
 80089b8:	e7ee      	b.n	8008998 <__libc_init_array+0xc>
 80089ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80089be:	4798      	blx	r3
 80089c0:	3601      	adds	r6, #1
 80089c2:	e7f2      	b.n	80089aa <__libc_init_array+0x1e>
 80089c4:	0800edbc 	.word	0x0800edbc
 80089c8:	0800edbc 	.word	0x0800edbc
 80089cc:	0800edbc 	.word	0x0800edbc
 80089d0:	0800edc0 	.word	0x0800edc0

080089d4 <malloc>:
 80089d4:	4b02      	ldr	r3, [pc, #8]	; (80089e0 <malloc+0xc>)
 80089d6:	4601      	mov	r1, r0
 80089d8:	6818      	ldr	r0, [r3, #0]
 80089da:	f000 b869 	b.w	8008ab0 <_malloc_r>
 80089de:	bf00      	nop
 80089e0:	20000018 	.word	0x20000018

080089e4 <memcpy>:
 80089e4:	440a      	add	r2, r1
 80089e6:	4291      	cmp	r1, r2
 80089e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80089ec:	d100      	bne.n	80089f0 <memcpy+0xc>
 80089ee:	4770      	bx	lr
 80089f0:	b510      	push	{r4, lr}
 80089f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80089fa:	4291      	cmp	r1, r2
 80089fc:	d1f9      	bne.n	80089f2 <memcpy+0xe>
 80089fe:	bd10      	pop	{r4, pc}

08008a00 <memset>:
 8008a00:	4402      	add	r2, r0
 8008a02:	4603      	mov	r3, r0
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d100      	bne.n	8008a0a <memset+0xa>
 8008a08:	4770      	bx	lr
 8008a0a:	f803 1b01 	strb.w	r1, [r3], #1
 8008a0e:	e7f9      	b.n	8008a04 <memset+0x4>

08008a10 <_free_r>:
 8008a10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a12:	2900      	cmp	r1, #0
 8008a14:	d048      	beq.n	8008aa8 <_free_r+0x98>
 8008a16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a1a:	9001      	str	r0, [sp, #4]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	f1a1 0404 	sub.w	r4, r1, #4
 8008a22:	bfb8      	it	lt
 8008a24:	18e4      	addlt	r4, r4, r3
 8008a26:	f003 fd11 	bl	800c44c <__malloc_lock>
 8008a2a:	4a20      	ldr	r2, [pc, #128]	; (8008aac <_free_r+0x9c>)
 8008a2c:	9801      	ldr	r0, [sp, #4]
 8008a2e:	6813      	ldr	r3, [r2, #0]
 8008a30:	4615      	mov	r5, r2
 8008a32:	b933      	cbnz	r3, 8008a42 <_free_r+0x32>
 8008a34:	6063      	str	r3, [r4, #4]
 8008a36:	6014      	str	r4, [r2, #0]
 8008a38:	b003      	add	sp, #12
 8008a3a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a3e:	f003 bd0b 	b.w	800c458 <__malloc_unlock>
 8008a42:	42a3      	cmp	r3, r4
 8008a44:	d90b      	bls.n	8008a5e <_free_r+0x4e>
 8008a46:	6821      	ldr	r1, [r4, #0]
 8008a48:	1862      	adds	r2, r4, r1
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	bf04      	itt	eq
 8008a4e:	681a      	ldreq	r2, [r3, #0]
 8008a50:	685b      	ldreq	r3, [r3, #4]
 8008a52:	6063      	str	r3, [r4, #4]
 8008a54:	bf04      	itt	eq
 8008a56:	1852      	addeq	r2, r2, r1
 8008a58:	6022      	streq	r2, [r4, #0]
 8008a5a:	602c      	str	r4, [r5, #0]
 8008a5c:	e7ec      	b.n	8008a38 <_free_r+0x28>
 8008a5e:	461a      	mov	r2, r3
 8008a60:	685b      	ldr	r3, [r3, #4]
 8008a62:	b10b      	cbz	r3, 8008a68 <_free_r+0x58>
 8008a64:	42a3      	cmp	r3, r4
 8008a66:	d9fa      	bls.n	8008a5e <_free_r+0x4e>
 8008a68:	6811      	ldr	r1, [r2, #0]
 8008a6a:	1855      	adds	r5, r2, r1
 8008a6c:	42a5      	cmp	r5, r4
 8008a6e:	d10b      	bne.n	8008a88 <_free_r+0x78>
 8008a70:	6824      	ldr	r4, [r4, #0]
 8008a72:	4421      	add	r1, r4
 8008a74:	1854      	adds	r4, r2, r1
 8008a76:	42a3      	cmp	r3, r4
 8008a78:	6011      	str	r1, [r2, #0]
 8008a7a:	d1dd      	bne.n	8008a38 <_free_r+0x28>
 8008a7c:	681c      	ldr	r4, [r3, #0]
 8008a7e:	685b      	ldr	r3, [r3, #4]
 8008a80:	6053      	str	r3, [r2, #4]
 8008a82:	4421      	add	r1, r4
 8008a84:	6011      	str	r1, [r2, #0]
 8008a86:	e7d7      	b.n	8008a38 <_free_r+0x28>
 8008a88:	d902      	bls.n	8008a90 <_free_r+0x80>
 8008a8a:	230c      	movs	r3, #12
 8008a8c:	6003      	str	r3, [r0, #0]
 8008a8e:	e7d3      	b.n	8008a38 <_free_r+0x28>
 8008a90:	6825      	ldr	r5, [r4, #0]
 8008a92:	1961      	adds	r1, r4, r5
 8008a94:	428b      	cmp	r3, r1
 8008a96:	bf04      	itt	eq
 8008a98:	6819      	ldreq	r1, [r3, #0]
 8008a9a:	685b      	ldreq	r3, [r3, #4]
 8008a9c:	6063      	str	r3, [r4, #4]
 8008a9e:	bf04      	itt	eq
 8008aa0:	1949      	addeq	r1, r1, r5
 8008aa2:	6021      	streq	r1, [r4, #0]
 8008aa4:	6054      	str	r4, [r2, #4]
 8008aa6:	e7c7      	b.n	8008a38 <_free_r+0x28>
 8008aa8:	b003      	add	sp, #12
 8008aaa:	bd30      	pop	{r4, r5, pc}
 8008aac:	20000a64 	.word	0x20000a64

08008ab0 <_malloc_r>:
 8008ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ab2:	1ccd      	adds	r5, r1, #3
 8008ab4:	f025 0503 	bic.w	r5, r5, #3
 8008ab8:	3508      	adds	r5, #8
 8008aba:	2d0c      	cmp	r5, #12
 8008abc:	bf38      	it	cc
 8008abe:	250c      	movcc	r5, #12
 8008ac0:	2d00      	cmp	r5, #0
 8008ac2:	4606      	mov	r6, r0
 8008ac4:	db01      	blt.n	8008aca <_malloc_r+0x1a>
 8008ac6:	42a9      	cmp	r1, r5
 8008ac8:	d903      	bls.n	8008ad2 <_malloc_r+0x22>
 8008aca:	230c      	movs	r3, #12
 8008acc:	6033      	str	r3, [r6, #0]
 8008ace:	2000      	movs	r0, #0
 8008ad0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ad2:	f003 fcbb 	bl	800c44c <__malloc_lock>
 8008ad6:	4921      	ldr	r1, [pc, #132]	; (8008b5c <_malloc_r+0xac>)
 8008ad8:	680a      	ldr	r2, [r1, #0]
 8008ada:	4614      	mov	r4, r2
 8008adc:	b99c      	cbnz	r4, 8008b06 <_malloc_r+0x56>
 8008ade:	4f20      	ldr	r7, [pc, #128]	; (8008b60 <_malloc_r+0xb0>)
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	b923      	cbnz	r3, 8008aee <_malloc_r+0x3e>
 8008ae4:	4621      	mov	r1, r4
 8008ae6:	4630      	mov	r0, r6
 8008ae8:	f000 ff44 	bl	8009974 <_sbrk_r>
 8008aec:	6038      	str	r0, [r7, #0]
 8008aee:	4629      	mov	r1, r5
 8008af0:	4630      	mov	r0, r6
 8008af2:	f000 ff3f 	bl	8009974 <_sbrk_r>
 8008af6:	1c43      	adds	r3, r0, #1
 8008af8:	d123      	bne.n	8008b42 <_malloc_r+0x92>
 8008afa:	230c      	movs	r3, #12
 8008afc:	6033      	str	r3, [r6, #0]
 8008afe:	4630      	mov	r0, r6
 8008b00:	f003 fcaa 	bl	800c458 <__malloc_unlock>
 8008b04:	e7e3      	b.n	8008ace <_malloc_r+0x1e>
 8008b06:	6823      	ldr	r3, [r4, #0]
 8008b08:	1b5b      	subs	r3, r3, r5
 8008b0a:	d417      	bmi.n	8008b3c <_malloc_r+0x8c>
 8008b0c:	2b0b      	cmp	r3, #11
 8008b0e:	d903      	bls.n	8008b18 <_malloc_r+0x68>
 8008b10:	6023      	str	r3, [r4, #0]
 8008b12:	441c      	add	r4, r3
 8008b14:	6025      	str	r5, [r4, #0]
 8008b16:	e004      	b.n	8008b22 <_malloc_r+0x72>
 8008b18:	6863      	ldr	r3, [r4, #4]
 8008b1a:	42a2      	cmp	r2, r4
 8008b1c:	bf0c      	ite	eq
 8008b1e:	600b      	streq	r3, [r1, #0]
 8008b20:	6053      	strne	r3, [r2, #4]
 8008b22:	4630      	mov	r0, r6
 8008b24:	f003 fc98 	bl	800c458 <__malloc_unlock>
 8008b28:	f104 000b 	add.w	r0, r4, #11
 8008b2c:	1d23      	adds	r3, r4, #4
 8008b2e:	f020 0007 	bic.w	r0, r0, #7
 8008b32:	1ac2      	subs	r2, r0, r3
 8008b34:	d0cc      	beq.n	8008ad0 <_malloc_r+0x20>
 8008b36:	1a1b      	subs	r3, r3, r0
 8008b38:	50a3      	str	r3, [r4, r2]
 8008b3a:	e7c9      	b.n	8008ad0 <_malloc_r+0x20>
 8008b3c:	4622      	mov	r2, r4
 8008b3e:	6864      	ldr	r4, [r4, #4]
 8008b40:	e7cc      	b.n	8008adc <_malloc_r+0x2c>
 8008b42:	1cc4      	adds	r4, r0, #3
 8008b44:	f024 0403 	bic.w	r4, r4, #3
 8008b48:	42a0      	cmp	r0, r4
 8008b4a:	d0e3      	beq.n	8008b14 <_malloc_r+0x64>
 8008b4c:	1a21      	subs	r1, r4, r0
 8008b4e:	4630      	mov	r0, r6
 8008b50:	f000 ff10 	bl	8009974 <_sbrk_r>
 8008b54:	3001      	adds	r0, #1
 8008b56:	d1dd      	bne.n	8008b14 <_malloc_r+0x64>
 8008b58:	e7cf      	b.n	8008afa <_malloc_r+0x4a>
 8008b5a:	bf00      	nop
 8008b5c:	20000a64 	.word	0x20000a64
 8008b60:	20000a68 	.word	0x20000a68

08008b64 <__cvt>:
 8008b64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b68:	ec55 4b10 	vmov	r4, r5, d0
 8008b6c:	2d00      	cmp	r5, #0
 8008b6e:	460e      	mov	r6, r1
 8008b70:	4619      	mov	r1, r3
 8008b72:	462b      	mov	r3, r5
 8008b74:	bfbb      	ittet	lt
 8008b76:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008b7a:	461d      	movlt	r5, r3
 8008b7c:	2300      	movge	r3, #0
 8008b7e:	232d      	movlt	r3, #45	; 0x2d
 8008b80:	700b      	strb	r3, [r1, #0]
 8008b82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b84:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008b88:	4691      	mov	r9, r2
 8008b8a:	f023 0820 	bic.w	r8, r3, #32
 8008b8e:	bfbc      	itt	lt
 8008b90:	4622      	movlt	r2, r4
 8008b92:	4614      	movlt	r4, r2
 8008b94:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008b98:	d005      	beq.n	8008ba6 <__cvt+0x42>
 8008b9a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008b9e:	d100      	bne.n	8008ba2 <__cvt+0x3e>
 8008ba0:	3601      	adds	r6, #1
 8008ba2:	2102      	movs	r1, #2
 8008ba4:	e000      	b.n	8008ba8 <__cvt+0x44>
 8008ba6:	2103      	movs	r1, #3
 8008ba8:	ab03      	add	r3, sp, #12
 8008baa:	9301      	str	r3, [sp, #4]
 8008bac:	ab02      	add	r3, sp, #8
 8008bae:	9300      	str	r3, [sp, #0]
 8008bb0:	ec45 4b10 	vmov	d0, r4, r5
 8008bb4:	4653      	mov	r3, sl
 8008bb6:	4632      	mov	r2, r6
 8008bb8:	f002 f8a6 	bl	800ad08 <_dtoa_r>
 8008bbc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008bc0:	4607      	mov	r7, r0
 8008bc2:	d102      	bne.n	8008bca <__cvt+0x66>
 8008bc4:	f019 0f01 	tst.w	r9, #1
 8008bc8:	d022      	beq.n	8008c10 <__cvt+0xac>
 8008bca:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008bce:	eb07 0906 	add.w	r9, r7, r6
 8008bd2:	d110      	bne.n	8008bf6 <__cvt+0x92>
 8008bd4:	783b      	ldrb	r3, [r7, #0]
 8008bd6:	2b30      	cmp	r3, #48	; 0x30
 8008bd8:	d10a      	bne.n	8008bf0 <__cvt+0x8c>
 8008bda:	2200      	movs	r2, #0
 8008bdc:	2300      	movs	r3, #0
 8008bde:	4620      	mov	r0, r4
 8008be0:	4629      	mov	r1, r5
 8008be2:	f7f7 ff71 	bl	8000ac8 <__aeabi_dcmpeq>
 8008be6:	b918      	cbnz	r0, 8008bf0 <__cvt+0x8c>
 8008be8:	f1c6 0601 	rsb	r6, r6, #1
 8008bec:	f8ca 6000 	str.w	r6, [sl]
 8008bf0:	f8da 3000 	ldr.w	r3, [sl]
 8008bf4:	4499      	add	r9, r3
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	4620      	mov	r0, r4
 8008bfc:	4629      	mov	r1, r5
 8008bfe:	f7f7 ff63 	bl	8000ac8 <__aeabi_dcmpeq>
 8008c02:	b108      	cbz	r0, 8008c08 <__cvt+0xa4>
 8008c04:	f8cd 900c 	str.w	r9, [sp, #12]
 8008c08:	2230      	movs	r2, #48	; 0x30
 8008c0a:	9b03      	ldr	r3, [sp, #12]
 8008c0c:	454b      	cmp	r3, r9
 8008c0e:	d307      	bcc.n	8008c20 <__cvt+0xbc>
 8008c10:	9b03      	ldr	r3, [sp, #12]
 8008c12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008c14:	1bdb      	subs	r3, r3, r7
 8008c16:	4638      	mov	r0, r7
 8008c18:	6013      	str	r3, [r2, #0]
 8008c1a:	b004      	add	sp, #16
 8008c1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c20:	1c59      	adds	r1, r3, #1
 8008c22:	9103      	str	r1, [sp, #12]
 8008c24:	701a      	strb	r2, [r3, #0]
 8008c26:	e7f0      	b.n	8008c0a <__cvt+0xa6>

08008c28 <__exponent>:
 8008c28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	2900      	cmp	r1, #0
 8008c2e:	bfb8      	it	lt
 8008c30:	4249      	neglt	r1, r1
 8008c32:	f803 2b02 	strb.w	r2, [r3], #2
 8008c36:	bfb4      	ite	lt
 8008c38:	222d      	movlt	r2, #45	; 0x2d
 8008c3a:	222b      	movge	r2, #43	; 0x2b
 8008c3c:	2909      	cmp	r1, #9
 8008c3e:	7042      	strb	r2, [r0, #1]
 8008c40:	dd2a      	ble.n	8008c98 <__exponent+0x70>
 8008c42:	f10d 0407 	add.w	r4, sp, #7
 8008c46:	46a4      	mov	ip, r4
 8008c48:	270a      	movs	r7, #10
 8008c4a:	46a6      	mov	lr, r4
 8008c4c:	460a      	mov	r2, r1
 8008c4e:	fb91 f6f7 	sdiv	r6, r1, r7
 8008c52:	fb07 1516 	mls	r5, r7, r6, r1
 8008c56:	3530      	adds	r5, #48	; 0x30
 8008c58:	2a63      	cmp	r2, #99	; 0x63
 8008c5a:	f104 34ff 	add.w	r4, r4, #4294967295
 8008c5e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008c62:	4631      	mov	r1, r6
 8008c64:	dcf1      	bgt.n	8008c4a <__exponent+0x22>
 8008c66:	3130      	adds	r1, #48	; 0x30
 8008c68:	f1ae 0502 	sub.w	r5, lr, #2
 8008c6c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008c70:	1c44      	adds	r4, r0, #1
 8008c72:	4629      	mov	r1, r5
 8008c74:	4561      	cmp	r1, ip
 8008c76:	d30a      	bcc.n	8008c8e <__exponent+0x66>
 8008c78:	f10d 0209 	add.w	r2, sp, #9
 8008c7c:	eba2 020e 	sub.w	r2, r2, lr
 8008c80:	4565      	cmp	r5, ip
 8008c82:	bf88      	it	hi
 8008c84:	2200      	movhi	r2, #0
 8008c86:	4413      	add	r3, r2
 8008c88:	1a18      	subs	r0, r3, r0
 8008c8a:	b003      	add	sp, #12
 8008c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008c92:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008c96:	e7ed      	b.n	8008c74 <__exponent+0x4c>
 8008c98:	2330      	movs	r3, #48	; 0x30
 8008c9a:	3130      	adds	r1, #48	; 0x30
 8008c9c:	7083      	strb	r3, [r0, #2]
 8008c9e:	70c1      	strb	r1, [r0, #3]
 8008ca0:	1d03      	adds	r3, r0, #4
 8008ca2:	e7f1      	b.n	8008c88 <__exponent+0x60>

08008ca4 <_printf_float>:
 8008ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ca8:	ed2d 8b02 	vpush	{d8}
 8008cac:	b08d      	sub	sp, #52	; 0x34
 8008cae:	460c      	mov	r4, r1
 8008cb0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008cb4:	4616      	mov	r6, r2
 8008cb6:	461f      	mov	r7, r3
 8008cb8:	4605      	mov	r5, r0
 8008cba:	f003 fb37 	bl	800c32c <_localeconv_r>
 8008cbe:	f8d0 a000 	ldr.w	sl, [r0]
 8008cc2:	4650      	mov	r0, sl
 8008cc4:	f7f7 fad4 	bl	8000270 <strlen>
 8008cc8:	2300      	movs	r3, #0
 8008cca:	930a      	str	r3, [sp, #40]	; 0x28
 8008ccc:	6823      	ldr	r3, [r4, #0]
 8008cce:	9305      	str	r3, [sp, #20]
 8008cd0:	f8d8 3000 	ldr.w	r3, [r8]
 8008cd4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008cd8:	3307      	adds	r3, #7
 8008cda:	f023 0307 	bic.w	r3, r3, #7
 8008cde:	f103 0208 	add.w	r2, r3, #8
 8008ce2:	f8c8 2000 	str.w	r2, [r8]
 8008ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cea:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008cee:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008cf2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008cf6:	9307      	str	r3, [sp, #28]
 8008cf8:	f8cd 8018 	str.w	r8, [sp, #24]
 8008cfc:	ee08 0a10 	vmov	s16, r0
 8008d00:	4b9f      	ldr	r3, [pc, #636]	; (8008f80 <_printf_float+0x2dc>)
 8008d02:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008d06:	f04f 32ff 	mov.w	r2, #4294967295
 8008d0a:	f7f7 ff0f 	bl	8000b2c <__aeabi_dcmpun>
 8008d0e:	bb88      	cbnz	r0, 8008d74 <_printf_float+0xd0>
 8008d10:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008d14:	4b9a      	ldr	r3, [pc, #616]	; (8008f80 <_printf_float+0x2dc>)
 8008d16:	f04f 32ff 	mov.w	r2, #4294967295
 8008d1a:	f7f7 fee9 	bl	8000af0 <__aeabi_dcmple>
 8008d1e:	bb48      	cbnz	r0, 8008d74 <_printf_float+0xd0>
 8008d20:	2200      	movs	r2, #0
 8008d22:	2300      	movs	r3, #0
 8008d24:	4640      	mov	r0, r8
 8008d26:	4649      	mov	r1, r9
 8008d28:	f7f7 fed8 	bl	8000adc <__aeabi_dcmplt>
 8008d2c:	b110      	cbz	r0, 8008d34 <_printf_float+0x90>
 8008d2e:	232d      	movs	r3, #45	; 0x2d
 8008d30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d34:	4b93      	ldr	r3, [pc, #588]	; (8008f84 <_printf_float+0x2e0>)
 8008d36:	4894      	ldr	r0, [pc, #592]	; (8008f88 <_printf_float+0x2e4>)
 8008d38:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008d3c:	bf94      	ite	ls
 8008d3e:	4698      	movls	r8, r3
 8008d40:	4680      	movhi	r8, r0
 8008d42:	2303      	movs	r3, #3
 8008d44:	6123      	str	r3, [r4, #16]
 8008d46:	9b05      	ldr	r3, [sp, #20]
 8008d48:	f023 0204 	bic.w	r2, r3, #4
 8008d4c:	6022      	str	r2, [r4, #0]
 8008d4e:	f04f 0900 	mov.w	r9, #0
 8008d52:	9700      	str	r7, [sp, #0]
 8008d54:	4633      	mov	r3, r6
 8008d56:	aa0b      	add	r2, sp, #44	; 0x2c
 8008d58:	4621      	mov	r1, r4
 8008d5a:	4628      	mov	r0, r5
 8008d5c:	f000 f9d8 	bl	8009110 <_printf_common>
 8008d60:	3001      	adds	r0, #1
 8008d62:	f040 8090 	bne.w	8008e86 <_printf_float+0x1e2>
 8008d66:	f04f 30ff 	mov.w	r0, #4294967295
 8008d6a:	b00d      	add	sp, #52	; 0x34
 8008d6c:	ecbd 8b02 	vpop	{d8}
 8008d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d74:	4642      	mov	r2, r8
 8008d76:	464b      	mov	r3, r9
 8008d78:	4640      	mov	r0, r8
 8008d7a:	4649      	mov	r1, r9
 8008d7c:	f7f7 fed6 	bl	8000b2c <__aeabi_dcmpun>
 8008d80:	b140      	cbz	r0, 8008d94 <_printf_float+0xf0>
 8008d82:	464b      	mov	r3, r9
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	bfbc      	itt	lt
 8008d88:	232d      	movlt	r3, #45	; 0x2d
 8008d8a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008d8e:	487f      	ldr	r0, [pc, #508]	; (8008f8c <_printf_float+0x2e8>)
 8008d90:	4b7f      	ldr	r3, [pc, #508]	; (8008f90 <_printf_float+0x2ec>)
 8008d92:	e7d1      	b.n	8008d38 <_printf_float+0x94>
 8008d94:	6863      	ldr	r3, [r4, #4]
 8008d96:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008d9a:	9206      	str	r2, [sp, #24]
 8008d9c:	1c5a      	adds	r2, r3, #1
 8008d9e:	d13f      	bne.n	8008e20 <_printf_float+0x17c>
 8008da0:	2306      	movs	r3, #6
 8008da2:	6063      	str	r3, [r4, #4]
 8008da4:	9b05      	ldr	r3, [sp, #20]
 8008da6:	6861      	ldr	r1, [r4, #4]
 8008da8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008dac:	2300      	movs	r3, #0
 8008dae:	9303      	str	r3, [sp, #12]
 8008db0:	ab0a      	add	r3, sp, #40	; 0x28
 8008db2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008db6:	ab09      	add	r3, sp, #36	; 0x24
 8008db8:	ec49 8b10 	vmov	d0, r8, r9
 8008dbc:	9300      	str	r3, [sp, #0]
 8008dbe:	6022      	str	r2, [r4, #0]
 8008dc0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008dc4:	4628      	mov	r0, r5
 8008dc6:	f7ff fecd 	bl	8008b64 <__cvt>
 8008dca:	9b06      	ldr	r3, [sp, #24]
 8008dcc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008dce:	2b47      	cmp	r3, #71	; 0x47
 8008dd0:	4680      	mov	r8, r0
 8008dd2:	d108      	bne.n	8008de6 <_printf_float+0x142>
 8008dd4:	1cc8      	adds	r0, r1, #3
 8008dd6:	db02      	blt.n	8008dde <_printf_float+0x13a>
 8008dd8:	6863      	ldr	r3, [r4, #4]
 8008dda:	4299      	cmp	r1, r3
 8008ddc:	dd41      	ble.n	8008e62 <_printf_float+0x1be>
 8008dde:	f1ab 0b02 	sub.w	fp, fp, #2
 8008de2:	fa5f fb8b 	uxtb.w	fp, fp
 8008de6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008dea:	d820      	bhi.n	8008e2e <_printf_float+0x18a>
 8008dec:	3901      	subs	r1, #1
 8008dee:	465a      	mov	r2, fp
 8008df0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008df4:	9109      	str	r1, [sp, #36]	; 0x24
 8008df6:	f7ff ff17 	bl	8008c28 <__exponent>
 8008dfa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008dfc:	1813      	adds	r3, r2, r0
 8008dfe:	2a01      	cmp	r2, #1
 8008e00:	4681      	mov	r9, r0
 8008e02:	6123      	str	r3, [r4, #16]
 8008e04:	dc02      	bgt.n	8008e0c <_printf_float+0x168>
 8008e06:	6822      	ldr	r2, [r4, #0]
 8008e08:	07d2      	lsls	r2, r2, #31
 8008e0a:	d501      	bpl.n	8008e10 <_printf_float+0x16c>
 8008e0c:	3301      	adds	r3, #1
 8008e0e:	6123      	str	r3, [r4, #16]
 8008e10:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d09c      	beq.n	8008d52 <_printf_float+0xae>
 8008e18:	232d      	movs	r3, #45	; 0x2d
 8008e1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e1e:	e798      	b.n	8008d52 <_printf_float+0xae>
 8008e20:	9a06      	ldr	r2, [sp, #24]
 8008e22:	2a47      	cmp	r2, #71	; 0x47
 8008e24:	d1be      	bne.n	8008da4 <_printf_float+0x100>
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d1bc      	bne.n	8008da4 <_printf_float+0x100>
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	e7b9      	b.n	8008da2 <_printf_float+0xfe>
 8008e2e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008e32:	d118      	bne.n	8008e66 <_printf_float+0x1c2>
 8008e34:	2900      	cmp	r1, #0
 8008e36:	6863      	ldr	r3, [r4, #4]
 8008e38:	dd0b      	ble.n	8008e52 <_printf_float+0x1ae>
 8008e3a:	6121      	str	r1, [r4, #16]
 8008e3c:	b913      	cbnz	r3, 8008e44 <_printf_float+0x1a0>
 8008e3e:	6822      	ldr	r2, [r4, #0]
 8008e40:	07d0      	lsls	r0, r2, #31
 8008e42:	d502      	bpl.n	8008e4a <_printf_float+0x1a6>
 8008e44:	3301      	adds	r3, #1
 8008e46:	440b      	add	r3, r1
 8008e48:	6123      	str	r3, [r4, #16]
 8008e4a:	65a1      	str	r1, [r4, #88]	; 0x58
 8008e4c:	f04f 0900 	mov.w	r9, #0
 8008e50:	e7de      	b.n	8008e10 <_printf_float+0x16c>
 8008e52:	b913      	cbnz	r3, 8008e5a <_printf_float+0x1b6>
 8008e54:	6822      	ldr	r2, [r4, #0]
 8008e56:	07d2      	lsls	r2, r2, #31
 8008e58:	d501      	bpl.n	8008e5e <_printf_float+0x1ba>
 8008e5a:	3302      	adds	r3, #2
 8008e5c:	e7f4      	b.n	8008e48 <_printf_float+0x1a4>
 8008e5e:	2301      	movs	r3, #1
 8008e60:	e7f2      	b.n	8008e48 <_printf_float+0x1a4>
 8008e62:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008e66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e68:	4299      	cmp	r1, r3
 8008e6a:	db05      	blt.n	8008e78 <_printf_float+0x1d4>
 8008e6c:	6823      	ldr	r3, [r4, #0]
 8008e6e:	6121      	str	r1, [r4, #16]
 8008e70:	07d8      	lsls	r0, r3, #31
 8008e72:	d5ea      	bpl.n	8008e4a <_printf_float+0x1a6>
 8008e74:	1c4b      	adds	r3, r1, #1
 8008e76:	e7e7      	b.n	8008e48 <_printf_float+0x1a4>
 8008e78:	2900      	cmp	r1, #0
 8008e7a:	bfd4      	ite	le
 8008e7c:	f1c1 0202 	rsble	r2, r1, #2
 8008e80:	2201      	movgt	r2, #1
 8008e82:	4413      	add	r3, r2
 8008e84:	e7e0      	b.n	8008e48 <_printf_float+0x1a4>
 8008e86:	6823      	ldr	r3, [r4, #0]
 8008e88:	055a      	lsls	r2, r3, #21
 8008e8a:	d407      	bmi.n	8008e9c <_printf_float+0x1f8>
 8008e8c:	6923      	ldr	r3, [r4, #16]
 8008e8e:	4642      	mov	r2, r8
 8008e90:	4631      	mov	r1, r6
 8008e92:	4628      	mov	r0, r5
 8008e94:	47b8      	blx	r7
 8008e96:	3001      	adds	r0, #1
 8008e98:	d12c      	bne.n	8008ef4 <_printf_float+0x250>
 8008e9a:	e764      	b.n	8008d66 <_printf_float+0xc2>
 8008e9c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008ea0:	f240 80e0 	bls.w	8009064 <_printf_float+0x3c0>
 8008ea4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	2300      	movs	r3, #0
 8008eac:	f7f7 fe0c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008eb0:	2800      	cmp	r0, #0
 8008eb2:	d034      	beq.n	8008f1e <_printf_float+0x27a>
 8008eb4:	4a37      	ldr	r2, [pc, #220]	; (8008f94 <_printf_float+0x2f0>)
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	4631      	mov	r1, r6
 8008eba:	4628      	mov	r0, r5
 8008ebc:	47b8      	blx	r7
 8008ebe:	3001      	adds	r0, #1
 8008ec0:	f43f af51 	beq.w	8008d66 <_printf_float+0xc2>
 8008ec4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008ec8:	429a      	cmp	r2, r3
 8008eca:	db02      	blt.n	8008ed2 <_printf_float+0x22e>
 8008ecc:	6823      	ldr	r3, [r4, #0]
 8008ece:	07d8      	lsls	r0, r3, #31
 8008ed0:	d510      	bpl.n	8008ef4 <_printf_float+0x250>
 8008ed2:	ee18 3a10 	vmov	r3, s16
 8008ed6:	4652      	mov	r2, sl
 8008ed8:	4631      	mov	r1, r6
 8008eda:	4628      	mov	r0, r5
 8008edc:	47b8      	blx	r7
 8008ede:	3001      	adds	r0, #1
 8008ee0:	f43f af41 	beq.w	8008d66 <_printf_float+0xc2>
 8008ee4:	f04f 0800 	mov.w	r8, #0
 8008ee8:	f104 091a 	add.w	r9, r4, #26
 8008eec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008eee:	3b01      	subs	r3, #1
 8008ef0:	4543      	cmp	r3, r8
 8008ef2:	dc09      	bgt.n	8008f08 <_printf_float+0x264>
 8008ef4:	6823      	ldr	r3, [r4, #0]
 8008ef6:	079b      	lsls	r3, r3, #30
 8008ef8:	f100 8105 	bmi.w	8009106 <_printf_float+0x462>
 8008efc:	68e0      	ldr	r0, [r4, #12]
 8008efe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f00:	4298      	cmp	r0, r3
 8008f02:	bfb8      	it	lt
 8008f04:	4618      	movlt	r0, r3
 8008f06:	e730      	b.n	8008d6a <_printf_float+0xc6>
 8008f08:	2301      	movs	r3, #1
 8008f0a:	464a      	mov	r2, r9
 8008f0c:	4631      	mov	r1, r6
 8008f0e:	4628      	mov	r0, r5
 8008f10:	47b8      	blx	r7
 8008f12:	3001      	adds	r0, #1
 8008f14:	f43f af27 	beq.w	8008d66 <_printf_float+0xc2>
 8008f18:	f108 0801 	add.w	r8, r8, #1
 8008f1c:	e7e6      	b.n	8008eec <_printf_float+0x248>
 8008f1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	dc39      	bgt.n	8008f98 <_printf_float+0x2f4>
 8008f24:	4a1b      	ldr	r2, [pc, #108]	; (8008f94 <_printf_float+0x2f0>)
 8008f26:	2301      	movs	r3, #1
 8008f28:	4631      	mov	r1, r6
 8008f2a:	4628      	mov	r0, r5
 8008f2c:	47b8      	blx	r7
 8008f2e:	3001      	adds	r0, #1
 8008f30:	f43f af19 	beq.w	8008d66 <_printf_float+0xc2>
 8008f34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008f38:	4313      	orrs	r3, r2
 8008f3a:	d102      	bne.n	8008f42 <_printf_float+0x29e>
 8008f3c:	6823      	ldr	r3, [r4, #0]
 8008f3e:	07d9      	lsls	r1, r3, #31
 8008f40:	d5d8      	bpl.n	8008ef4 <_printf_float+0x250>
 8008f42:	ee18 3a10 	vmov	r3, s16
 8008f46:	4652      	mov	r2, sl
 8008f48:	4631      	mov	r1, r6
 8008f4a:	4628      	mov	r0, r5
 8008f4c:	47b8      	blx	r7
 8008f4e:	3001      	adds	r0, #1
 8008f50:	f43f af09 	beq.w	8008d66 <_printf_float+0xc2>
 8008f54:	f04f 0900 	mov.w	r9, #0
 8008f58:	f104 0a1a 	add.w	sl, r4, #26
 8008f5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f5e:	425b      	negs	r3, r3
 8008f60:	454b      	cmp	r3, r9
 8008f62:	dc01      	bgt.n	8008f68 <_printf_float+0x2c4>
 8008f64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f66:	e792      	b.n	8008e8e <_printf_float+0x1ea>
 8008f68:	2301      	movs	r3, #1
 8008f6a:	4652      	mov	r2, sl
 8008f6c:	4631      	mov	r1, r6
 8008f6e:	4628      	mov	r0, r5
 8008f70:	47b8      	blx	r7
 8008f72:	3001      	adds	r0, #1
 8008f74:	f43f aef7 	beq.w	8008d66 <_printf_float+0xc2>
 8008f78:	f109 0901 	add.w	r9, r9, #1
 8008f7c:	e7ee      	b.n	8008f5c <_printf_float+0x2b8>
 8008f7e:	bf00      	nop
 8008f80:	7fefffff 	.word	0x7fefffff
 8008f84:	0800e904 	.word	0x0800e904
 8008f88:	0800e908 	.word	0x0800e908
 8008f8c:	0800e910 	.word	0x0800e910
 8008f90:	0800e90c 	.word	0x0800e90c
 8008f94:	0800e914 	.word	0x0800e914
 8008f98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f9a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008f9c:	429a      	cmp	r2, r3
 8008f9e:	bfa8      	it	ge
 8008fa0:	461a      	movge	r2, r3
 8008fa2:	2a00      	cmp	r2, #0
 8008fa4:	4691      	mov	r9, r2
 8008fa6:	dc37      	bgt.n	8009018 <_printf_float+0x374>
 8008fa8:	f04f 0b00 	mov.w	fp, #0
 8008fac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008fb0:	f104 021a 	add.w	r2, r4, #26
 8008fb4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008fb6:	9305      	str	r3, [sp, #20]
 8008fb8:	eba3 0309 	sub.w	r3, r3, r9
 8008fbc:	455b      	cmp	r3, fp
 8008fbe:	dc33      	bgt.n	8009028 <_printf_float+0x384>
 8008fc0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008fc4:	429a      	cmp	r2, r3
 8008fc6:	db3b      	blt.n	8009040 <_printf_float+0x39c>
 8008fc8:	6823      	ldr	r3, [r4, #0]
 8008fca:	07da      	lsls	r2, r3, #31
 8008fcc:	d438      	bmi.n	8009040 <_printf_float+0x39c>
 8008fce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008fd0:	9b05      	ldr	r3, [sp, #20]
 8008fd2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008fd4:	1ad3      	subs	r3, r2, r3
 8008fd6:	eba2 0901 	sub.w	r9, r2, r1
 8008fda:	4599      	cmp	r9, r3
 8008fdc:	bfa8      	it	ge
 8008fde:	4699      	movge	r9, r3
 8008fe0:	f1b9 0f00 	cmp.w	r9, #0
 8008fe4:	dc35      	bgt.n	8009052 <_printf_float+0x3ae>
 8008fe6:	f04f 0800 	mov.w	r8, #0
 8008fea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008fee:	f104 0a1a 	add.w	sl, r4, #26
 8008ff2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008ff6:	1a9b      	subs	r3, r3, r2
 8008ff8:	eba3 0309 	sub.w	r3, r3, r9
 8008ffc:	4543      	cmp	r3, r8
 8008ffe:	f77f af79 	ble.w	8008ef4 <_printf_float+0x250>
 8009002:	2301      	movs	r3, #1
 8009004:	4652      	mov	r2, sl
 8009006:	4631      	mov	r1, r6
 8009008:	4628      	mov	r0, r5
 800900a:	47b8      	blx	r7
 800900c:	3001      	adds	r0, #1
 800900e:	f43f aeaa 	beq.w	8008d66 <_printf_float+0xc2>
 8009012:	f108 0801 	add.w	r8, r8, #1
 8009016:	e7ec      	b.n	8008ff2 <_printf_float+0x34e>
 8009018:	4613      	mov	r3, r2
 800901a:	4631      	mov	r1, r6
 800901c:	4642      	mov	r2, r8
 800901e:	4628      	mov	r0, r5
 8009020:	47b8      	blx	r7
 8009022:	3001      	adds	r0, #1
 8009024:	d1c0      	bne.n	8008fa8 <_printf_float+0x304>
 8009026:	e69e      	b.n	8008d66 <_printf_float+0xc2>
 8009028:	2301      	movs	r3, #1
 800902a:	4631      	mov	r1, r6
 800902c:	4628      	mov	r0, r5
 800902e:	9205      	str	r2, [sp, #20]
 8009030:	47b8      	blx	r7
 8009032:	3001      	adds	r0, #1
 8009034:	f43f ae97 	beq.w	8008d66 <_printf_float+0xc2>
 8009038:	9a05      	ldr	r2, [sp, #20]
 800903a:	f10b 0b01 	add.w	fp, fp, #1
 800903e:	e7b9      	b.n	8008fb4 <_printf_float+0x310>
 8009040:	ee18 3a10 	vmov	r3, s16
 8009044:	4652      	mov	r2, sl
 8009046:	4631      	mov	r1, r6
 8009048:	4628      	mov	r0, r5
 800904a:	47b8      	blx	r7
 800904c:	3001      	adds	r0, #1
 800904e:	d1be      	bne.n	8008fce <_printf_float+0x32a>
 8009050:	e689      	b.n	8008d66 <_printf_float+0xc2>
 8009052:	9a05      	ldr	r2, [sp, #20]
 8009054:	464b      	mov	r3, r9
 8009056:	4442      	add	r2, r8
 8009058:	4631      	mov	r1, r6
 800905a:	4628      	mov	r0, r5
 800905c:	47b8      	blx	r7
 800905e:	3001      	adds	r0, #1
 8009060:	d1c1      	bne.n	8008fe6 <_printf_float+0x342>
 8009062:	e680      	b.n	8008d66 <_printf_float+0xc2>
 8009064:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009066:	2a01      	cmp	r2, #1
 8009068:	dc01      	bgt.n	800906e <_printf_float+0x3ca>
 800906a:	07db      	lsls	r3, r3, #31
 800906c:	d538      	bpl.n	80090e0 <_printf_float+0x43c>
 800906e:	2301      	movs	r3, #1
 8009070:	4642      	mov	r2, r8
 8009072:	4631      	mov	r1, r6
 8009074:	4628      	mov	r0, r5
 8009076:	47b8      	blx	r7
 8009078:	3001      	adds	r0, #1
 800907a:	f43f ae74 	beq.w	8008d66 <_printf_float+0xc2>
 800907e:	ee18 3a10 	vmov	r3, s16
 8009082:	4652      	mov	r2, sl
 8009084:	4631      	mov	r1, r6
 8009086:	4628      	mov	r0, r5
 8009088:	47b8      	blx	r7
 800908a:	3001      	adds	r0, #1
 800908c:	f43f ae6b 	beq.w	8008d66 <_printf_float+0xc2>
 8009090:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009094:	2200      	movs	r2, #0
 8009096:	2300      	movs	r3, #0
 8009098:	f7f7 fd16 	bl	8000ac8 <__aeabi_dcmpeq>
 800909c:	b9d8      	cbnz	r0, 80090d6 <_printf_float+0x432>
 800909e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090a0:	f108 0201 	add.w	r2, r8, #1
 80090a4:	3b01      	subs	r3, #1
 80090a6:	4631      	mov	r1, r6
 80090a8:	4628      	mov	r0, r5
 80090aa:	47b8      	blx	r7
 80090ac:	3001      	adds	r0, #1
 80090ae:	d10e      	bne.n	80090ce <_printf_float+0x42a>
 80090b0:	e659      	b.n	8008d66 <_printf_float+0xc2>
 80090b2:	2301      	movs	r3, #1
 80090b4:	4652      	mov	r2, sl
 80090b6:	4631      	mov	r1, r6
 80090b8:	4628      	mov	r0, r5
 80090ba:	47b8      	blx	r7
 80090bc:	3001      	adds	r0, #1
 80090be:	f43f ae52 	beq.w	8008d66 <_printf_float+0xc2>
 80090c2:	f108 0801 	add.w	r8, r8, #1
 80090c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090c8:	3b01      	subs	r3, #1
 80090ca:	4543      	cmp	r3, r8
 80090cc:	dcf1      	bgt.n	80090b2 <_printf_float+0x40e>
 80090ce:	464b      	mov	r3, r9
 80090d0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80090d4:	e6dc      	b.n	8008e90 <_printf_float+0x1ec>
 80090d6:	f04f 0800 	mov.w	r8, #0
 80090da:	f104 0a1a 	add.w	sl, r4, #26
 80090de:	e7f2      	b.n	80090c6 <_printf_float+0x422>
 80090e0:	2301      	movs	r3, #1
 80090e2:	4642      	mov	r2, r8
 80090e4:	e7df      	b.n	80090a6 <_printf_float+0x402>
 80090e6:	2301      	movs	r3, #1
 80090e8:	464a      	mov	r2, r9
 80090ea:	4631      	mov	r1, r6
 80090ec:	4628      	mov	r0, r5
 80090ee:	47b8      	blx	r7
 80090f0:	3001      	adds	r0, #1
 80090f2:	f43f ae38 	beq.w	8008d66 <_printf_float+0xc2>
 80090f6:	f108 0801 	add.w	r8, r8, #1
 80090fa:	68e3      	ldr	r3, [r4, #12]
 80090fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80090fe:	1a5b      	subs	r3, r3, r1
 8009100:	4543      	cmp	r3, r8
 8009102:	dcf0      	bgt.n	80090e6 <_printf_float+0x442>
 8009104:	e6fa      	b.n	8008efc <_printf_float+0x258>
 8009106:	f04f 0800 	mov.w	r8, #0
 800910a:	f104 0919 	add.w	r9, r4, #25
 800910e:	e7f4      	b.n	80090fa <_printf_float+0x456>

08009110 <_printf_common>:
 8009110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009114:	4616      	mov	r6, r2
 8009116:	4699      	mov	r9, r3
 8009118:	688a      	ldr	r2, [r1, #8]
 800911a:	690b      	ldr	r3, [r1, #16]
 800911c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009120:	4293      	cmp	r3, r2
 8009122:	bfb8      	it	lt
 8009124:	4613      	movlt	r3, r2
 8009126:	6033      	str	r3, [r6, #0]
 8009128:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800912c:	4607      	mov	r7, r0
 800912e:	460c      	mov	r4, r1
 8009130:	b10a      	cbz	r2, 8009136 <_printf_common+0x26>
 8009132:	3301      	adds	r3, #1
 8009134:	6033      	str	r3, [r6, #0]
 8009136:	6823      	ldr	r3, [r4, #0]
 8009138:	0699      	lsls	r1, r3, #26
 800913a:	bf42      	ittt	mi
 800913c:	6833      	ldrmi	r3, [r6, #0]
 800913e:	3302      	addmi	r3, #2
 8009140:	6033      	strmi	r3, [r6, #0]
 8009142:	6825      	ldr	r5, [r4, #0]
 8009144:	f015 0506 	ands.w	r5, r5, #6
 8009148:	d106      	bne.n	8009158 <_printf_common+0x48>
 800914a:	f104 0a19 	add.w	sl, r4, #25
 800914e:	68e3      	ldr	r3, [r4, #12]
 8009150:	6832      	ldr	r2, [r6, #0]
 8009152:	1a9b      	subs	r3, r3, r2
 8009154:	42ab      	cmp	r3, r5
 8009156:	dc26      	bgt.n	80091a6 <_printf_common+0x96>
 8009158:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800915c:	1e13      	subs	r3, r2, #0
 800915e:	6822      	ldr	r2, [r4, #0]
 8009160:	bf18      	it	ne
 8009162:	2301      	movne	r3, #1
 8009164:	0692      	lsls	r2, r2, #26
 8009166:	d42b      	bmi.n	80091c0 <_printf_common+0xb0>
 8009168:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800916c:	4649      	mov	r1, r9
 800916e:	4638      	mov	r0, r7
 8009170:	47c0      	blx	r8
 8009172:	3001      	adds	r0, #1
 8009174:	d01e      	beq.n	80091b4 <_printf_common+0xa4>
 8009176:	6823      	ldr	r3, [r4, #0]
 8009178:	68e5      	ldr	r5, [r4, #12]
 800917a:	6832      	ldr	r2, [r6, #0]
 800917c:	f003 0306 	and.w	r3, r3, #6
 8009180:	2b04      	cmp	r3, #4
 8009182:	bf08      	it	eq
 8009184:	1aad      	subeq	r5, r5, r2
 8009186:	68a3      	ldr	r3, [r4, #8]
 8009188:	6922      	ldr	r2, [r4, #16]
 800918a:	bf0c      	ite	eq
 800918c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009190:	2500      	movne	r5, #0
 8009192:	4293      	cmp	r3, r2
 8009194:	bfc4      	itt	gt
 8009196:	1a9b      	subgt	r3, r3, r2
 8009198:	18ed      	addgt	r5, r5, r3
 800919a:	2600      	movs	r6, #0
 800919c:	341a      	adds	r4, #26
 800919e:	42b5      	cmp	r5, r6
 80091a0:	d11a      	bne.n	80091d8 <_printf_common+0xc8>
 80091a2:	2000      	movs	r0, #0
 80091a4:	e008      	b.n	80091b8 <_printf_common+0xa8>
 80091a6:	2301      	movs	r3, #1
 80091a8:	4652      	mov	r2, sl
 80091aa:	4649      	mov	r1, r9
 80091ac:	4638      	mov	r0, r7
 80091ae:	47c0      	blx	r8
 80091b0:	3001      	adds	r0, #1
 80091b2:	d103      	bne.n	80091bc <_printf_common+0xac>
 80091b4:	f04f 30ff 	mov.w	r0, #4294967295
 80091b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091bc:	3501      	adds	r5, #1
 80091be:	e7c6      	b.n	800914e <_printf_common+0x3e>
 80091c0:	18e1      	adds	r1, r4, r3
 80091c2:	1c5a      	adds	r2, r3, #1
 80091c4:	2030      	movs	r0, #48	; 0x30
 80091c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80091ca:	4422      	add	r2, r4
 80091cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80091d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80091d4:	3302      	adds	r3, #2
 80091d6:	e7c7      	b.n	8009168 <_printf_common+0x58>
 80091d8:	2301      	movs	r3, #1
 80091da:	4622      	mov	r2, r4
 80091dc:	4649      	mov	r1, r9
 80091de:	4638      	mov	r0, r7
 80091e0:	47c0      	blx	r8
 80091e2:	3001      	adds	r0, #1
 80091e4:	d0e6      	beq.n	80091b4 <_printf_common+0xa4>
 80091e6:	3601      	adds	r6, #1
 80091e8:	e7d9      	b.n	800919e <_printf_common+0x8e>
	...

080091ec <_printf_i>:
 80091ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80091f0:	460c      	mov	r4, r1
 80091f2:	4691      	mov	r9, r2
 80091f4:	7e27      	ldrb	r7, [r4, #24]
 80091f6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80091f8:	2f78      	cmp	r7, #120	; 0x78
 80091fa:	4680      	mov	r8, r0
 80091fc:	469a      	mov	sl, r3
 80091fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009202:	d807      	bhi.n	8009214 <_printf_i+0x28>
 8009204:	2f62      	cmp	r7, #98	; 0x62
 8009206:	d80a      	bhi.n	800921e <_printf_i+0x32>
 8009208:	2f00      	cmp	r7, #0
 800920a:	f000 80d8 	beq.w	80093be <_printf_i+0x1d2>
 800920e:	2f58      	cmp	r7, #88	; 0x58
 8009210:	f000 80a3 	beq.w	800935a <_printf_i+0x16e>
 8009214:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009218:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800921c:	e03a      	b.n	8009294 <_printf_i+0xa8>
 800921e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009222:	2b15      	cmp	r3, #21
 8009224:	d8f6      	bhi.n	8009214 <_printf_i+0x28>
 8009226:	a001      	add	r0, pc, #4	; (adr r0, 800922c <_printf_i+0x40>)
 8009228:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800922c:	08009285 	.word	0x08009285
 8009230:	08009299 	.word	0x08009299
 8009234:	08009215 	.word	0x08009215
 8009238:	08009215 	.word	0x08009215
 800923c:	08009215 	.word	0x08009215
 8009240:	08009215 	.word	0x08009215
 8009244:	08009299 	.word	0x08009299
 8009248:	08009215 	.word	0x08009215
 800924c:	08009215 	.word	0x08009215
 8009250:	08009215 	.word	0x08009215
 8009254:	08009215 	.word	0x08009215
 8009258:	080093a5 	.word	0x080093a5
 800925c:	080092c9 	.word	0x080092c9
 8009260:	08009387 	.word	0x08009387
 8009264:	08009215 	.word	0x08009215
 8009268:	08009215 	.word	0x08009215
 800926c:	080093c7 	.word	0x080093c7
 8009270:	08009215 	.word	0x08009215
 8009274:	080092c9 	.word	0x080092c9
 8009278:	08009215 	.word	0x08009215
 800927c:	08009215 	.word	0x08009215
 8009280:	0800938f 	.word	0x0800938f
 8009284:	680b      	ldr	r3, [r1, #0]
 8009286:	1d1a      	adds	r2, r3, #4
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	600a      	str	r2, [r1, #0]
 800928c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009290:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009294:	2301      	movs	r3, #1
 8009296:	e0a3      	b.n	80093e0 <_printf_i+0x1f4>
 8009298:	6825      	ldr	r5, [r4, #0]
 800929a:	6808      	ldr	r0, [r1, #0]
 800929c:	062e      	lsls	r6, r5, #24
 800929e:	f100 0304 	add.w	r3, r0, #4
 80092a2:	d50a      	bpl.n	80092ba <_printf_i+0xce>
 80092a4:	6805      	ldr	r5, [r0, #0]
 80092a6:	600b      	str	r3, [r1, #0]
 80092a8:	2d00      	cmp	r5, #0
 80092aa:	da03      	bge.n	80092b4 <_printf_i+0xc8>
 80092ac:	232d      	movs	r3, #45	; 0x2d
 80092ae:	426d      	negs	r5, r5
 80092b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092b4:	485e      	ldr	r0, [pc, #376]	; (8009430 <_printf_i+0x244>)
 80092b6:	230a      	movs	r3, #10
 80092b8:	e019      	b.n	80092ee <_printf_i+0x102>
 80092ba:	f015 0f40 	tst.w	r5, #64	; 0x40
 80092be:	6805      	ldr	r5, [r0, #0]
 80092c0:	600b      	str	r3, [r1, #0]
 80092c2:	bf18      	it	ne
 80092c4:	b22d      	sxthne	r5, r5
 80092c6:	e7ef      	b.n	80092a8 <_printf_i+0xbc>
 80092c8:	680b      	ldr	r3, [r1, #0]
 80092ca:	6825      	ldr	r5, [r4, #0]
 80092cc:	1d18      	adds	r0, r3, #4
 80092ce:	6008      	str	r0, [r1, #0]
 80092d0:	0628      	lsls	r0, r5, #24
 80092d2:	d501      	bpl.n	80092d8 <_printf_i+0xec>
 80092d4:	681d      	ldr	r5, [r3, #0]
 80092d6:	e002      	b.n	80092de <_printf_i+0xf2>
 80092d8:	0669      	lsls	r1, r5, #25
 80092da:	d5fb      	bpl.n	80092d4 <_printf_i+0xe8>
 80092dc:	881d      	ldrh	r5, [r3, #0]
 80092de:	4854      	ldr	r0, [pc, #336]	; (8009430 <_printf_i+0x244>)
 80092e0:	2f6f      	cmp	r7, #111	; 0x6f
 80092e2:	bf0c      	ite	eq
 80092e4:	2308      	moveq	r3, #8
 80092e6:	230a      	movne	r3, #10
 80092e8:	2100      	movs	r1, #0
 80092ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80092ee:	6866      	ldr	r6, [r4, #4]
 80092f0:	60a6      	str	r6, [r4, #8]
 80092f2:	2e00      	cmp	r6, #0
 80092f4:	bfa2      	ittt	ge
 80092f6:	6821      	ldrge	r1, [r4, #0]
 80092f8:	f021 0104 	bicge.w	r1, r1, #4
 80092fc:	6021      	strge	r1, [r4, #0]
 80092fe:	b90d      	cbnz	r5, 8009304 <_printf_i+0x118>
 8009300:	2e00      	cmp	r6, #0
 8009302:	d04d      	beq.n	80093a0 <_printf_i+0x1b4>
 8009304:	4616      	mov	r6, r2
 8009306:	fbb5 f1f3 	udiv	r1, r5, r3
 800930a:	fb03 5711 	mls	r7, r3, r1, r5
 800930e:	5dc7      	ldrb	r7, [r0, r7]
 8009310:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009314:	462f      	mov	r7, r5
 8009316:	42bb      	cmp	r3, r7
 8009318:	460d      	mov	r5, r1
 800931a:	d9f4      	bls.n	8009306 <_printf_i+0x11a>
 800931c:	2b08      	cmp	r3, #8
 800931e:	d10b      	bne.n	8009338 <_printf_i+0x14c>
 8009320:	6823      	ldr	r3, [r4, #0]
 8009322:	07df      	lsls	r7, r3, #31
 8009324:	d508      	bpl.n	8009338 <_printf_i+0x14c>
 8009326:	6923      	ldr	r3, [r4, #16]
 8009328:	6861      	ldr	r1, [r4, #4]
 800932a:	4299      	cmp	r1, r3
 800932c:	bfde      	ittt	le
 800932e:	2330      	movle	r3, #48	; 0x30
 8009330:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009334:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009338:	1b92      	subs	r2, r2, r6
 800933a:	6122      	str	r2, [r4, #16]
 800933c:	f8cd a000 	str.w	sl, [sp]
 8009340:	464b      	mov	r3, r9
 8009342:	aa03      	add	r2, sp, #12
 8009344:	4621      	mov	r1, r4
 8009346:	4640      	mov	r0, r8
 8009348:	f7ff fee2 	bl	8009110 <_printf_common>
 800934c:	3001      	adds	r0, #1
 800934e:	d14c      	bne.n	80093ea <_printf_i+0x1fe>
 8009350:	f04f 30ff 	mov.w	r0, #4294967295
 8009354:	b004      	add	sp, #16
 8009356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800935a:	4835      	ldr	r0, [pc, #212]	; (8009430 <_printf_i+0x244>)
 800935c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009360:	6823      	ldr	r3, [r4, #0]
 8009362:	680e      	ldr	r6, [r1, #0]
 8009364:	061f      	lsls	r7, r3, #24
 8009366:	f856 5b04 	ldr.w	r5, [r6], #4
 800936a:	600e      	str	r6, [r1, #0]
 800936c:	d514      	bpl.n	8009398 <_printf_i+0x1ac>
 800936e:	07d9      	lsls	r1, r3, #31
 8009370:	bf44      	itt	mi
 8009372:	f043 0320 	orrmi.w	r3, r3, #32
 8009376:	6023      	strmi	r3, [r4, #0]
 8009378:	b91d      	cbnz	r5, 8009382 <_printf_i+0x196>
 800937a:	6823      	ldr	r3, [r4, #0]
 800937c:	f023 0320 	bic.w	r3, r3, #32
 8009380:	6023      	str	r3, [r4, #0]
 8009382:	2310      	movs	r3, #16
 8009384:	e7b0      	b.n	80092e8 <_printf_i+0xfc>
 8009386:	6823      	ldr	r3, [r4, #0]
 8009388:	f043 0320 	orr.w	r3, r3, #32
 800938c:	6023      	str	r3, [r4, #0]
 800938e:	2378      	movs	r3, #120	; 0x78
 8009390:	4828      	ldr	r0, [pc, #160]	; (8009434 <_printf_i+0x248>)
 8009392:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009396:	e7e3      	b.n	8009360 <_printf_i+0x174>
 8009398:	065e      	lsls	r6, r3, #25
 800939a:	bf48      	it	mi
 800939c:	b2ad      	uxthmi	r5, r5
 800939e:	e7e6      	b.n	800936e <_printf_i+0x182>
 80093a0:	4616      	mov	r6, r2
 80093a2:	e7bb      	b.n	800931c <_printf_i+0x130>
 80093a4:	680b      	ldr	r3, [r1, #0]
 80093a6:	6826      	ldr	r6, [r4, #0]
 80093a8:	6960      	ldr	r0, [r4, #20]
 80093aa:	1d1d      	adds	r5, r3, #4
 80093ac:	600d      	str	r5, [r1, #0]
 80093ae:	0635      	lsls	r5, r6, #24
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	d501      	bpl.n	80093b8 <_printf_i+0x1cc>
 80093b4:	6018      	str	r0, [r3, #0]
 80093b6:	e002      	b.n	80093be <_printf_i+0x1d2>
 80093b8:	0671      	lsls	r1, r6, #25
 80093ba:	d5fb      	bpl.n	80093b4 <_printf_i+0x1c8>
 80093bc:	8018      	strh	r0, [r3, #0]
 80093be:	2300      	movs	r3, #0
 80093c0:	6123      	str	r3, [r4, #16]
 80093c2:	4616      	mov	r6, r2
 80093c4:	e7ba      	b.n	800933c <_printf_i+0x150>
 80093c6:	680b      	ldr	r3, [r1, #0]
 80093c8:	1d1a      	adds	r2, r3, #4
 80093ca:	600a      	str	r2, [r1, #0]
 80093cc:	681e      	ldr	r6, [r3, #0]
 80093ce:	6862      	ldr	r2, [r4, #4]
 80093d0:	2100      	movs	r1, #0
 80093d2:	4630      	mov	r0, r6
 80093d4:	f7f6 fefc 	bl	80001d0 <memchr>
 80093d8:	b108      	cbz	r0, 80093de <_printf_i+0x1f2>
 80093da:	1b80      	subs	r0, r0, r6
 80093dc:	6060      	str	r0, [r4, #4]
 80093de:	6863      	ldr	r3, [r4, #4]
 80093e0:	6123      	str	r3, [r4, #16]
 80093e2:	2300      	movs	r3, #0
 80093e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093e8:	e7a8      	b.n	800933c <_printf_i+0x150>
 80093ea:	6923      	ldr	r3, [r4, #16]
 80093ec:	4632      	mov	r2, r6
 80093ee:	4649      	mov	r1, r9
 80093f0:	4640      	mov	r0, r8
 80093f2:	47d0      	blx	sl
 80093f4:	3001      	adds	r0, #1
 80093f6:	d0ab      	beq.n	8009350 <_printf_i+0x164>
 80093f8:	6823      	ldr	r3, [r4, #0]
 80093fa:	079b      	lsls	r3, r3, #30
 80093fc:	d413      	bmi.n	8009426 <_printf_i+0x23a>
 80093fe:	68e0      	ldr	r0, [r4, #12]
 8009400:	9b03      	ldr	r3, [sp, #12]
 8009402:	4298      	cmp	r0, r3
 8009404:	bfb8      	it	lt
 8009406:	4618      	movlt	r0, r3
 8009408:	e7a4      	b.n	8009354 <_printf_i+0x168>
 800940a:	2301      	movs	r3, #1
 800940c:	4632      	mov	r2, r6
 800940e:	4649      	mov	r1, r9
 8009410:	4640      	mov	r0, r8
 8009412:	47d0      	blx	sl
 8009414:	3001      	adds	r0, #1
 8009416:	d09b      	beq.n	8009350 <_printf_i+0x164>
 8009418:	3501      	adds	r5, #1
 800941a:	68e3      	ldr	r3, [r4, #12]
 800941c:	9903      	ldr	r1, [sp, #12]
 800941e:	1a5b      	subs	r3, r3, r1
 8009420:	42ab      	cmp	r3, r5
 8009422:	dcf2      	bgt.n	800940a <_printf_i+0x21e>
 8009424:	e7eb      	b.n	80093fe <_printf_i+0x212>
 8009426:	2500      	movs	r5, #0
 8009428:	f104 0619 	add.w	r6, r4, #25
 800942c:	e7f5      	b.n	800941a <_printf_i+0x22e>
 800942e:	bf00      	nop
 8009430:	0800e916 	.word	0x0800e916
 8009434:	0800e927 	.word	0x0800e927

08009438 <_scanf_float>:
 8009438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800943c:	b087      	sub	sp, #28
 800943e:	4617      	mov	r7, r2
 8009440:	9303      	str	r3, [sp, #12]
 8009442:	688b      	ldr	r3, [r1, #8]
 8009444:	1e5a      	subs	r2, r3, #1
 8009446:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800944a:	bf83      	ittte	hi
 800944c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009450:	195b      	addhi	r3, r3, r5
 8009452:	9302      	strhi	r3, [sp, #8]
 8009454:	2300      	movls	r3, #0
 8009456:	bf86      	itte	hi
 8009458:	f240 135d 	movwhi	r3, #349	; 0x15d
 800945c:	608b      	strhi	r3, [r1, #8]
 800945e:	9302      	strls	r3, [sp, #8]
 8009460:	680b      	ldr	r3, [r1, #0]
 8009462:	468b      	mov	fp, r1
 8009464:	2500      	movs	r5, #0
 8009466:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800946a:	f84b 3b1c 	str.w	r3, [fp], #28
 800946e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009472:	4680      	mov	r8, r0
 8009474:	460c      	mov	r4, r1
 8009476:	465e      	mov	r6, fp
 8009478:	46aa      	mov	sl, r5
 800947a:	46a9      	mov	r9, r5
 800947c:	9501      	str	r5, [sp, #4]
 800947e:	68a2      	ldr	r2, [r4, #8]
 8009480:	b152      	cbz	r2, 8009498 <_scanf_float+0x60>
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	781b      	ldrb	r3, [r3, #0]
 8009486:	2b4e      	cmp	r3, #78	; 0x4e
 8009488:	d864      	bhi.n	8009554 <_scanf_float+0x11c>
 800948a:	2b40      	cmp	r3, #64	; 0x40
 800948c:	d83c      	bhi.n	8009508 <_scanf_float+0xd0>
 800948e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8009492:	b2c8      	uxtb	r0, r1
 8009494:	280e      	cmp	r0, #14
 8009496:	d93a      	bls.n	800950e <_scanf_float+0xd6>
 8009498:	f1b9 0f00 	cmp.w	r9, #0
 800949c:	d003      	beq.n	80094a6 <_scanf_float+0x6e>
 800949e:	6823      	ldr	r3, [r4, #0]
 80094a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80094a4:	6023      	str	r3, [r4, #0]
 80094a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80094aa:	f1ba 0f01 	cmp.w	sl, #1
 80094ae:	f200 8113 	bhi.w	80096d8 <_scanf_float+0x2a0>
 80094b2:	455e      	cmp	r6, fp
 80094b4:	f200 8105 	bhi.w	80096c2 <_scanf_float+0x28a>
 80094b8:	2501      	movs	r5, #1
 80094ba:	4628      	mov	r0, r5
 80094bc:	b007      	add	sp, #28
 80094be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094c2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80094c6:	2a0d      	cmp	r2, #13
 80094c8:	d8e6      	bhi.n	8009498 <_scanf_float+0x60>
 80094ca:	a101      	add	r1, pc, #4	; (adr r1, 80094d0 <_scanf_float+0x98>)
 80094cc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80094d0:	0800960f 	.word	0x0800960f
 80094d4:	08009499 	.word	0x08009499
 80094d8:	08009499 	.word	0x08009499
 80094dc:	08009499 	.word	0x08009499
 80094e0:	0800966f 	.word	0x0800966f
 80094e4:	08009647 	.word	0x08009647
 80094e8:	08009499 	.word	0x08009499
 80094ec:	08009499 	.word	0x08009499
 80094f0:	0800961d 	.word	0x0800961d
 80094f4:	08009499 	.word	0x08009499
 80094f8:	08009499 	.word	0x08009499
 80094fc:	08009499 	.word	0x08009499
 8009500:	08009499 	.word	0x08009499
 8009504:	080095d5 	.word	0x080095d5
 8009508:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800950c:	e7db      	b.n	80094c6 <_scanf_float+0x8e>
 800950e:	290e      	cmp	r1, #14
 8009510:	d8c2      	bhi.n	8009498 <_scanf_float+0x60>
 8009512:	a001      	add	r0, pc, #4	; (adr r0, 8009518 <_scanf_float+0xe0>)
 8009514:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009518:	080095c7 	.word	0x080095c7
 800951c:	08009499 	.word	0x08009499
 8009520:	080095c7 	.word	0x080095c7
 8009524:	0800965b 	.word	0x0800965b
 8009528:	08009499 	.word	0x08009499
 800952c:	08009575 	.word	0x08009575
 8009530:	080095b1 	.word	0x080095b1
 8009534:	080095b1 	.word	0x080095b1
 8009538:	080095b1 	.word	0x080095b1
 800953c:	080095b1 	.word	0x080095b1
 8009540:	080095b1 	.word	0x080095b1
 8009544:	080095b1 	.word	0x080095b1
 8009548:	080095b1 	.word	0x080095b1
 800954c:	080095b1 	.word	0x080095b1
 8009550:	080095b1 	.word	0x080095b1
 8009554:	2b6e      	cmp	r3, #110	; 0x6e
 8009556:	d809      	bhi.n	800956c <_scanf_float+0x134>
 8009558:	2b60      	cmp	r3, #96	; 0x60
 800955a:	d8b2      	bhi.n	80094c2 <_scanf_float+0x8a>
 800955c:	2b54      	cmp	r3, #84	; 0x54
 800955e:	d077      	beq.n	8009650 <_scanf_float+0x218>
 8009560:	2b59      	cmp	r3, #89	; 0x59
 8009562:	d199      	bne.n	8009498 <_scanf_float+0x60>
 8009564:	2d07      	cmp	r5, #7
 8009566:	d197      	bne.n	8009498 <_scanf_float+0x60>
 8009568:	2508      	movs	r5, #8
 800956a:	e029      	b.n	80095c0 <_scanf_float+0x188>
 800956c:	2b74      	cmp	r3, #116	; 0x74
 800956e:	d06f      	beq.n	8009650 <_scanf_float+0x218>
 8009570:	2b79      	cmp	r3, #121	; 0x79
 8009572:	e7f6      	b.n	8009562 <_scanf_float+0x12a>
 8009574:	6821      	ldr	r1, [r4, #0]
 8009576:	05c8      	lsls	r0, r1, #23
 8009578:	d51a      	bpl.n	80095b0 <_scanf_float+0x178>
 800957a:	9b02      	ldr	r3, [sp, #8]
 800957c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009580:	6021      	str	r1, [r4, #0]
 8009582:	f109 0901 	add.w	r9, r9, #1
 8009586:	b11b      	cbz	r3, 8009590 <_scanf_float+0x158>
 8009588:	3b01      	subs	r3, #1
 800958a:	3201      	adds	r2, #1
 800958c:	9302      	str	r3, [sp, #8]
 800958e:	60a2      	str	r2, [r4, #8]
 8009590:	68a3      	ldr	r3, [r4, #8]
 8009592:	3b01      	subs	r3, #1
 8009594:	60a3      	str	r3, [r4, #8]
 8009596:	6923      	ldr	r3, [r4, #16]
 8009598:	3301      	adds	r3, #1
 800959a:	6123      	str	r3, [r4, #16]
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	3b01      	subs	r3, #1
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	607b      	str	r3, [r7, #4]
 80095a4:	f340 8084 	ble.w	80096b0 <_scanf_float+0x278>
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	3301      	adds	r3, #1
 80095ac:	603b      	str	r3, [r7, #0]
 80095ae:	e766      	b.n	800947e <_scanf_float+0x46>
 80095b0:	eb1a 0f05 	cmn.w	sl, r5
 80095b4:	f47f af70 	bne.w	8009498 <_scanf_float+0x60>
 80095b8:	6822      	ldr	r2, [r4, #0]
 80095ba:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80095be:	6022      	str	r2, [r4, #0]
 80095c0:	f806 3b01 	strb.w	r3, [r6], #1
 80095c4:	e7e4      	b.n	8009590 <_scanf_float+0x158>
 80095c6:	6822      	ldr	r2, [r4, #0]
 80095c8:	0610      	lsls	r0, r2, #24
 80095ca:	f57f af65 	bpl.w	8009498 <_scanf_float+0x60>
 80095ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80095d2:	e7f4      	b.n	80095be <_scanf_float+0x186>
 80095d4:	f1ba 0f00 	cmp.w	sl, #0
 80095d8:	d10e      	bne.n	80095f8 <_scanf_float+0x1c0>
 80095da:	f1b9 0f00 	cmp.w	r9, #0
 80095de:	d10e      	bne.n	80095fe <_scanf_float+0x1c6>
 80095e0:	6822      	ldr	r2, [r4, #0]
 80095e2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80095e6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80095ea:	d108      	bne.n	80095fe <_scanf_float+0x1c6>
 80095ec:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80095f0:	6022      	str	r2, [r4, #0]
 80095f2:	f04f 0a01 	mov.w	sl, #1
 80095f6:	e7e3      	b.n	80095c0 <_scanf_float+0x188>
 80095f8:	f1ba 0f02 	cmp.w	sl, #2
 80095fc:	d055      	beq.n	80096aa <_scanf_float+0x272>
 80095fe:	2d01      	cmp	r5, #1
 8009600:	d002      	beq.n	8009608 <_scanf_float+0x1d0>
 8009602:	2d04      	cmp	r5, #4
 8009604:	f47f af48 	bne.w	8009498 <_scanf_float+0x60>
 8009608:	3501      	adds	r5, #1
 800960a:	b2ed      	uxtb	r5, r5
 800960c:	e7d8      	b.n	80095c0 <_scanf_float+0x188>
 800960e:	f1ba 0f01 	cmp.w	sl, #1
 8009612:	f47f af41 	bne.w	8009498 <_scanf_float+0x60>
 8009616:	f04f 0a02 	mov.w	sl, #2
 800961a:	e7d1      	b.n	80095c0 <_scanf_float+0x188>
 800961c:	b97d      	cbnz	r5, 800963e <_scanf_float+0x206>
 800961e:	f1b9 0f00 	cmp.w	r9, #0
 8009622:	f47f af3c 	bne.w	800949e <_scanf_float+0x66>
 8009626:	6822      	ldr	r2, [r4, #0]
 8009628:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800962c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009630:	f47f af39 	bne.w	80094a6 <_scanf_float+0x6e>
 8009634:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009638:	6022      	str	r2, [r4, #0]
 800963a:	2501      	movs	r5, #1
 800963c:	e7c0      	b.n	80095c0 <_scanf_float+0x188>
 800963e:	2d03      	cmp	r5, #3
 8009640:	d0e2      	beq.n	8009608 <_scanf_float+0x1d0>
 8009642:	2d05      	cmp	r5, #5
 8009644:	e7de      	b.n	8009604 <_scanf_float+0x1cc>
 8009646:	2d02      	cmp	r5, #2
 8009648:	f47f af26 	bne.w	8009498 <_scanf_float+0x60>
 800964c:	2503      	movs	r5, #3
 800964e:	e7b7      	b.n	80095c0 <_scanf_float+0x188>
 8009650:	2d06      	cmp	r5, #6
 8009652:	f47f af21 	bne.w	8009498 <_scanf_float+0x60>
 8009656:	2507      	movs	r5, #7
 8009658:	e7b2      	b.n	80095c0 <_scanf_float+0x188>
 800965a:	6822      	ldr	r2, [r4, #0]
 800965c:	0591      	lsls	r1, r2, #22
 800965e:	f57f af1b 	bpl.w	8009498 <_scanf_float+0x60>
 8009662:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009666:	6022      	str	r2, [r4, #0]
 8009668:	f8cd 9004 	str.w	r9, [sp, #4]
 800966c:	e7a8      	b.n	80095c0 <_scanf_float+0x188>
 800966e:	6822      	ldr	r2, [r4, #0]
 8009670:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009674:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009678:	d006      	beq.n	8009688 <_scanf_float+0x250>
 800967a:	0550      	lsls	r0, r2, #21
 800967c:	f57f af0c 	bpl.w	8009498 <_scanf_float+0x60>
 8009680:	f1b9 0f00 	cmp.w	r9, #0
 8009684:	f43f af0f 	beq.w	80094a6 <_scanf_float+0x6e>
 8009688:	0591      	lsls	r1, r2, #22
 800968a:	bf58      	it	pl
 800968c:	9901      	ldrpl	r1, [sp, #4]
 800968e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009692:	bf58      	it	pl
 8009694:	eba9 0101 	subpl.w	r1, r9, r1
 8009698:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800969c:	bf58      	it	pl
 800969e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80096a2:	6022      	str	r2, [r4, #0]
 80096a4:	f04f 0900 	mov.w	r9, #0
 80096a8:	e78a      	b.n	80095c0 <_scanf_float+0x188>
 80096aa:	f04f 0a03 	mov.w	sl, #3
 80096ae:	e787      	b.n	80095c0 <_scanf_float+0x188>
 80096b0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80096b4:	4639      	mov	r1, r7
 80096b6:	4640      	mov	r0, r8
 80096b8:	4798      	blx	r3
 80096ba:	2800      	cmp	r0, #0
 80096bc:	f43f aedf 	beq.w	800947e <_scanf_float+0x46>
 80096c0:	e6ea      	b.n	8009498 <_scanf_float+0x60>
 80096c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80096c6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80096ca:	463a      	mov	r2, r7
 80096cc:	4640      	mov	r0, r8
 80096ce:	4798      	blx	r3
 80096d0:	6923      	ldr	r3, [r4, #16]
 80096d2:	3b01      	subs	r3, #1
 80096d4:	6123      	str	r3, [r4, #16]
 80096d6:	e6ec      	b.n	80094b2 <_scanf_float+0x7a>
 80096d8:	1e6b      	subs	r3, r5, #1
 80096da:	2b06      	cmp	r3, #6
 80096dc:	d825      	bhi.n	800972a <_scanf_float+0x2f2>
 80096de:	2d02      	cmp	r5, #2
 80096e0:	d836      	bhi.n	8009750 <_scanf_float+0x318>
 80096e2:	455e      	cmp	r6, fp
 80096e4:	f67f aee8 	bls.w	80094b8 <_scanf_float+0x80>
 80096e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80096ec:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80096f0:	463a      	mov	r2, r7
 80096f2:	4640      	mov	r0, r8
 80096f4:	4798      	blx	r3
 80096f6:	6923      	ldr	r3, [r4, #16]
 80096f8:	3b01      	subs	r3, #1
 80096fa:	6123      	str	r3, [r4, #16]
 80096fc:	e7f1      	b.n	80096e2 <_scanf_float+0x2aa>
 80096fe:	9802      	ldr	r0, [sp, #8]
 8009700:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009704:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009708:	9002      	str	r0, [sp, #8]
 800970a:	463a      	mov	r2, r7
 800970c:	4640      	mov	r0, r8
 800970e:	4798      	blx	r3
 8009710:	6923      	ldr	r3, [r4, #16]
 8009712:	3b01      	subs	r3, #1
 8009714:	6123      	str	r3, [r4, #16]
 8009716:	f10a 3aff 	add.w	sl, sl, #4294967295
 800971a:	fa5f fa8a 	uxtb.w	sl, sl
 800971e:	f1ba 0f02 	cmp.w	sl, #2
 8009722:	d1ec      	bne.n	80096fe <_scanf_float+0x2c6>
 8009724:	3d03      	subs	r5, #3
 8009726:	b2ed      	uxtb	r5, r5
 8009728:	1b76      	subs	r6, r6, r5
 800972a:	6823      	ldr	r3, [r4, #0]
 800972c:	05da      	lsls	r2, r3, #23
 800972e:	d52f      	bpl.n	8009790 <_scanf_float+0x358>
 8009730:	055b      	lsls	r3, r3, #21
 8009732:	d510      	bpl.n	8009756 <_scanf_float+0x31e>
 8009734:	455e      	cmp	r6, fp
 8009736:	f67f aebf 	bls.w	80094b8 <_scanf_float+0x80>
 800973a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800973e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009742:	463a      	mov	r2, r7
 8009744:	4640      	mov	r0, r8
 8009746:	4798      	blx	r3
 8009748:	6923      	ldr	r3, [r4, #16]
 800974a:	3b01      	subs	r3, #1
 800974c:	6123      	str	r3, [r4, #16]
 800974e:	e7f1      	b.n	8009734 <_scanf_float+0x2fc>
 8009750:	46aa      	mov	sl, r5
 8009752:	9602      	str	r6, [sp, #8]
 8009754:	e7df      	b.n	8009716 <_scanf_float+0x2de>
 8009756:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800975a:	6923      	ldr	r3, [r4, #16]
 800975c:	2965      	cmp	r1, #101	; 0x65
 800975e:	f103 33ff 	add.w	r3, r3, #4294967295
 8009762:	f106 35ff 	add.w	r5, r6, #4294967295
 8009766:	6123      	str	r3, [r4, #16]
 8009768:	d00c      	beq.n	8009784 <_scanf_float+0x34c>
 800976a:	2945      	cmp	r1, #69	; 0x45
 800976c:	d00a      	beq.n	8009784 <_scanf_float+0x34c>
 800976e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009772:	463a      	mov	r2, r7
 8009774:	4640      	mov	r0, r8
 8009776:	4798      	blx	r3
 8009778:	6923      	ldr	r3, [r4, #16]
 800977a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800977e:	3b01      	subs	r3, #1
 8009780:	1eb5      	subs	r5, r6, #2
 8009782:	6123      	str	r3, [r4, #16]
 8009784:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009788:	463a      	mov	r2, r7
 800978a:	4640      	mov	r0, r8
 800978c:	4798      	blx	r3
 800978e:	462e      	mov	r6, r5
 8009790:	6825      	ldr	r5, [r4, #0]
 8009792:	f015 0510 	ands.w	r5, r5, #16
 8009796:	d158      	bne.n	800984a <_scanf_float+0x412>
 8009798:	7035      	strb	r5, [r6, #0]
 800979a:	6823      	ldr	r3, [r4, #0]
 800979c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80097a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097a4:	d11c      	bne.n	80097e0 <_scanf_float+0x3a8>
 80097a6:	9b01      	ldr	r3, [sp, #4]
 80097a8:	454b      	cmp	r3, r9
 80097aa:	eba3 0209 	sub.w	r2, r3, r9
 80097ae:	d124      	bne.n	80097fa <_scanf_float+0x3c2>
 80097b0:	2200      	movs	r2, #0
 80097b2:	4659      	mov	r1, fp
 80097b4:	4640      	mov	r0, r8
 80097b6:	f001 f895 	bl	800a8e4 <_strtod_r>
 80097ba:	9b03      	ldr	r3, [sp, #12]
 80097bc:	6821      	ldr	r1, [r4, #0]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	f011 0f02 	tst.w	r1, #2
 80097c4:	ec57 6b10 	vmov	r6, r7, d0
 80097c8:	f103 0204 	add.w	r2, r3, #4
 80097cc:	d020      	beq.n	8009810 <_scanf_float+0x3d8>
 80097ce:	9903      	ldr	r1, [sp, #12]
 80097d0:	600a      	str	r2, [r1, #0]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	e9c3 6700 	strd	r6, r7, [r3]
 80097d8:	68e3      	ldr	r3, [r4, #12]
 80097da:	3301      	adds	r3, #1
 80097dc:	60e3      	str	r3, [r4, #12]
 80097de:	e66c      	b.n	80094ba <_scanf_float+0x82>
 80097e0:	9b04      	ldr	r3, [sp, #16]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d0e4      	beq.n	80097b0 <_scanf_float+0x378>
 80097e6:	9905      	ldr	r1, [sp, #20]
 80097e8:	230a      	movs	r3, #10
 80097ea:	462a      	mov	r2, r5
 80097ec:	3101      	adds	r1, #1
 80097ee:	4640      	mov	r0, r8
 80097f0:	f001 f90e 	bl	800aa10 <_strtol_r>
 80097f4:	9b04      	ldr	r3, [sp, #16]
 80097f6:	9e05      	ldr	r6, [sp, #20]
 80097f8:	1ac2      	subs	r2, r0, r3
 80097fa:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80097fe:	429e      	cmp	r6, r3
 8009800:	bf28      	it	cs
 8009802:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009806:	4912      	ldr	r1, [pc, #72]	; (8009850 <_scanf_float+0x418>)
 8009808:	4630      	mov	r0, r6
 800980a:	f000 f9c3 	bl	8009b94 <siprintf>
 800980e:	e7cf      	b.n	80097b0 <_scanf_float+0x378>
 8009810:	f011 0f04 	tst.w	r1, #4
 8009814:	9903      	ldr	r1, [sp, #12]
 8009816:	600a      	str	r2, [r1, #0]
 8009818:	d1db      	bne.n	80097d2 <_scanf_float+0x39a>
 800981a:	f8d3 8000 	ldr.w	r8, [r3]
 800981e:	ee10 2a10 	vmov	r2, s0
 8009822:	ee10 0a10 	vmov	r0, s0
 8009826:	463b      	mov	r3, r7
 8009828:	4639      	mov	r1, r7
 800982a:	f7f7 f97f 	bl	8000b2c <__aeabi_dcmpun>
 800982e:	b128      	cbz	r0, 800983c <_scanf_float+0x404>
 8009830:	4808      	ldr	r0, [pc, #32]	; (8009854 <_scanf_float+0x41c>)
 8009832:	f000 f975 	bl	8009b20 <nanf>
 8009836:	ed88 0a00 	vstr	s0, [r8]
 800983a:	e7cd      	b.n	80097d8 <_scanf_float+0x3a0>
 800983c:	4630      	mov	r0, r6
 800983e:	4639      	mov	r1, r7
 8009840:	f7f7 f9d2 	bl	8000be8 <__aeabi_d2f>
 8009844:	f8c8 0000 	str.w	r0, [r8]
 8009848:	e7c6      	b.n	80097d8 <_scanf_float+0x3a0>
 800984a:	2500      	movs	r5, #0
 800984c:	e635      	b.n	80094ba <_scanf_float+0x82>
 800984e:	bf00      	nop
 8009850:	0800e938 	.word	0x0800e938
 8009854:	0800edb0 	.word	0x0800edb0

08009858 <iprintf>:
 8009858:	b40f      	push	{r0, r1, r2, r3}
 800985a:	4b0a      	ldr	r3, [pc, #40]	; (8009884 <iprintf+0x2c>)
 800985c:	b513      	push	{r0, r1, r4, lr}
 800985e:	681c      	ldr	r4, [r3, #0]
 8009860:	b124      	cbz	r4, 800986c <iprintf+0x14>
 8009862:	69a3      	ldr	r3, [r4, #24]
 8009864:	b913      	cbnz	r3, 800986c <iprintf+0x14>
 8009866:	4620      	mov	r0, r4
 8009868:	f002 f954 	bl	800bb14 <__sinit>
 800986c:	ab05      	add	r3, sp, #20
 800986e:	9a04      	ldr	r2, [sp, #16]
 8009870:	68a1      	ldr	r1, [r4, #8]
 8009872:	9301      	str	r3, [sp, #4]
 8009874:	4620      	mov	r0, r4
 8009876:	f003 fc45 	bl	800d104 <_vfiprintf_r>
 800987a:	b002      	add	sp, #8
 800987c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009880:	b004      	add	sp, #16
 8009882:	4770      	bx	lr
 8009884:	20000018 	.word	0x20000018

08009888 <_puts_r>:
 8009888:	b570      	push	{r4, r5, r6, lr}
 800988a:	460e      	mov	r6, r1
 800988c:	4605      	mov	r5, r0
 800988e:	b118      	cbz	r0, 8009898 <_puts_r+0x10>
 8009890:	6983      	ldr	r3, [r0, #24]
 8009892:	b90b      	cbnz	r3, 8009898 <_puts_r+0x10>
 8009894:	f002 f93e 	bl	800bb14 <__sinit>
 8009898:	69ab      	ldr	r3, [r5, #24]
 800989a:	68ac      	ldr	r4, [r5, #8]
 800989c:	b913      	cbnz	r3, 80098a4 <_puts_r+0x1c>
 800989e:	4628      	mov	r0, r5
 80098a0:	f002 f938 	bl	800bb14 <__sinit>
 80098a4:	4b2c      	ldr	r3, [pc, #176]	; (8009958 <_puts_r+0xd0>)
 80098a6:	429c      	cmp	r4, r3
 80098a8:	d120      	bne.n	80098ec <_puts_r+0x64>
 80098aa:	686c      	ldr	r4, [r5, #4]
 80098ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80098ae:	07db      	lsls	r3, r3, #31
 80098b0:	d405      	bmi.n	80098be <_puts_r+0x36>
 80098b2:	89a3      	ldrh	r3, [r4, #12]
 80098b4:	0598      	lsls	r0, r3, #22
 80098b6:	d402      	bmi.n	80098be <_puts_r+0x36>
 80098b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80098ba:	f002 fd3c 	bl	800c336 <__retarget_lock_acquire_recursive>
 80098be:	89a3      	ldrh	r3, [r4, #12]
 80098c0:	0719      	lsls	r1, r3, #28
 80098c2:	d51d      	bpl.n	8009900 <_puts_r+0x78>
 80098c4:	6923      	ldr	r3, [r4, #16]
 80098c6:	b1db      	cbz	r3, 8009900 <_puts_r+0x78>
 80098c8:	3e01      	subs	r6, #1
 80098ca:	68a3      	ldr	r3, [r4, #8]
 80098cc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80098d0:	3b01      	subs	r3, #1
 80098d2:	60a3      	str	r3, [r4, #8]
 80098d4:	bb39      	cbnz	r1, 8009926 <_puts_r+0x9e>
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	da38      	bge.n	800994c <_puts_r+0xc4>
 80098da:	4622      	mov	r2, r4
 80098dc:	210a      	movs	r1, #10
 80098de:	4628      	mov	r0, r5
 80098e0:	f001 f8a2 	bl	800aa28 <__swbuf_r>
 80098e4:	3001      	adds	r0, #1
 80098e6:	d011      	beq.n	800990c <_puts_r+0x84>
 80098e8:	250a      	movs	r5, #10
 80098ea:	e011      	b.n	8009910 <_puts_r+0x88>
 80098ec:	4b1b      	ldr	r3, [pc, #108]	; (800995c <_puts_r+0xd4>)
 80098ee:	429c      	cmp	r4, r3
 80098f0:	d101      	bne.n	80098f6 <_puts_r+0x6e>
 80098f2:	68ac      	ldr	r4, [r5, #8]
 80098f4:	e7da      	b.n	80098ac <_puts_r+0x24>
 80098f6:	4b1a      	ldr	r3, [pc, #104]	; (8009960 <_puts_r+0xd8>)
 80098f8:	429c      	cmp	r4, r3
 80098fa:	bf08      	it	eq
 80098fc:	68ec      	ldreq	r4, [r5, #12]
 80098fe:	e7d5      	b.n	80098ac <_puts_r+0x24>
 8009900:	4621      	mov	r1, r4
 8009902:	4628      	mov	r0, r5
 8009904:	f001 f8f4 	bl	800aaf0 <__swsetup_r>
 8009908:	2800      	cmp	r0, #0
 800990a:	d0dd      	beq.n	80098c8 <_puts_r+0x40>
 800990c:	f04f 35ff 	mov.w	r5, #4294967295
 8009910:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009912:	07da      	lsls	r2, r3, #31
 8009914:	d405      	bmi.n	8009922 <_puts_r+0x9a>
 8009916:	89a3      	ldrh	r3, [r4, #12]
 8009918:	059b      	lsls	r3, r3, #22
 800991a:	d402      	bmi.n	8009922 <_puts_r+0x9a>
 800991c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800991e:	f002 fd0b 	bl	800c338 <__retarget_lock_release_recursive>
 8009922:	4628      	mov	r0, r5
 8009924:	bd70      	pop	{r4, r5, r6, pc}
 8009926:	2b00      	cmp	r3, #0
 8009928:	da04      	bge.n	8009934 <_puts_r+0xac>
 800992a:	69a2      	ldr	r2, [r4, #24]
 800992c:	429a      	cmp	r2, r3
 800992e:	dc06      	bgt.n	800993e <_puts_r+0xb6>
 8009930:	290a      	cmp	r1, #10
 8009932:	d004      	beq.n	800993e <_puts_r+0xb6>
 8009934:	6823      	ldr	r3, [r4, #0]
 8009936:	1c5a      	adds	r2, r3, #1
 8009938:	6022      	str	r2, [r4, #0]
 800993a:	7019      	strb	r1, [r3, #0]
 800993c:	e7c5      	b.n	80098ca <_puts_r+0x42>
 800993e:	4622      	mov	r2, r4
 8009940:	4628      	mov	r0, r5
 8009942:	f001 f871 	bl	800aa28 <__swbuf_r>
 8009946:	3001      	adds	r0, #1
 8009948:	d1bf      	bne.n	80098ca <_puts_r+0x42>
 800994a:	e7df      	b.n	800990c <_puts_r+0x84>
 800994c:	6823      	ldr	r3, [r4, #0]
 800994e:	250a      	movs	r5, #10
 8009950:	1c5a      	adds	r2, r3, #1
 8009952:	6022      	str	r2, [r4, #0]
 8009954:	701d      	strb	r5, [r3, #0]
 8009956:	e7db      	b.n	8009910 <_puts_r+0x88>
 8009958:	0800eb48 	.word	0x0800eb48
 800995c:	0800eb68 	.word	0x0800eb68
 8009960:	0800eb28 	.word	0x0800eb28

08009964 <puts>:
 8009964:	4b02      	ldr	r3, [pc, #8]	; (8009970 <puts+0xc>)
 8009966:	4601      	mov	r1, r0
 8009968:	6818      	ldr	r0, [r3, #0]
 800996a:	f7ff bf8d 	b.w	8009888 <_puts_r>
 800996e:	bf00      	nop
 8009970:	20000018 	.word	0x20000018

08009974 <_sbrk_r>:
 8009974:	b538      	push	{r3, r4, r5, lr}
 8009976:	4d06      	ldr	r5, [pc, #24]	; (8009990 <_sbrk_r+0x1c>)
 8009978:	2300      	movs	r3, #0
 800997a:	4604      	mov	r4, r0
 800997c:	4608      	mov	r0, r1
 800997e:	602b      	str	r3, [r5, #0]
 8009980:	f7fa f97c 	bl	8003c7c <_sbrk>
 8009984:	1c43      	adds	r3, r0, #1
 8009986:	d102      	bne.n	800998e <_sbrk_r+0x1a>
 8009988:	682b      	ldr	r3, [r5, #0]
 800998a:	b103      	cbz	r3, 800998e <_sbrk_r+0x1a>
 800998c:	6023      	str	r3, [r4, #0]
 800998e:	bd38      	pop	{r3, r4, r5, pc}
 8009990:	200038f4 	.word	0x200038f4

08009994 <setvbuf>:
 8009994:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009998:	461d      	mov	r5, r3
 800999a:	4b5d      	ldr	r3, [pc, #372]	; (8009b10 <setvbuf+0x17c>)
 800999c:	681f      	ldr	r7, [r3, #0]
 800999e:	4604      	mov	r4, r0
 80099a0:	460e      	mov	r6, r1
 80099a2:	4690      	mov	r8, r2
 80099a4:	b127      	cbz	r7, 80099b0 <setvbuf+0x1c>
 80099a6:	69bb      	ldr	r3, [r7, #24]
 80099a8:	b913      	cbnz	r3, 80099b0 <setvbuf+0x1c>
 80099aa:	4638      	mov	r0, r7
 80099ac:	f002 f8b2 	bl	800bb14 <__sinit>
 80099b0:	4b58      	ldr	r3, [pc, #352]	; (8009b14 <setvbuf+0x180>)
 80099b2:	429c      	cmp	r4, r3
 80099b4:	d167      	bne.n	8009a86 <setvbuf+0xf2>
 80099b6:	687c      	ldr	r4, [r7, #4]
 80099b8:	f1b8 0f02 	cmp.w	r8, #2
 80099bc:	d006      	beq.n	80099cc <setvbuf+0x38>
 80099be:	f1b8 0f01 	cmp.w	r8, #1
 80099c2:	f200 809f 	bhi.w	8009b04 <setvbuf+0x170>
 80099c6:	2d00      	cmp	r5, #0
 80099c8:	f2c0 809c 	blt.w	8009b04 <setvbuf+0x170>
 80099cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80099ce:	07db      	lsls	r3, r3, #31
 80099d0:	d405      	bmi.n	80099de <setvbuf+0x4a>
 80099d2:	89a3      	ldrh	r3, [r4, #12]
 80099d4:	0598      	lsls	r0, r3, #22
 80099d6:	d402      	bmi.n	80099de <setvbuf+0x4a>
 80099d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099da:	f002 fcac 	bl	800c336 <__retarget_lock_acquire_recursive>
 80099de:	4621      	mov	r1, r4
 80099e0:	4638      	mov	r0, r7
 80099e2:	f002 f803 	bl	800b9ec <_fflush_r>
 80099e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80099e8:	b141      	cbz	r1, 80099fc <setvbuf+0x68>
 80099ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80099ee:	4299      	cmp	r1, r3
 80099f0:	d002      	beq.n	80099f8 <setvbuf+0x64>
 80099f2:	4638      	mov	r0, r7
 80099f4:	f7ff f80c 	bl	8008a10 <_free_r>
 80099f8:	2300      	movs	r3, #0
 80099fa:	6363      	str	r3, [r4, #52]	; 0x34
 80099fc:	2300      	movs	r3, #0
 80099fe:	61a3      	str	r3, [r4, #24]
 8009a00:	6063      	str	r3, [r4, #4]
 8009a02:	89a3      	ldrh	r3, [r4, #12]
 8009a04:	0619      	lsls	r1, r3, #24
 8009a06:	d503      	bpl.n	8009a10 <setvbuf+0x7c>
 8009a08:	6921      	ldr	r1, [r4, #16]
 8009a0a:	4638      	mov	r0, r7
 8009a0c:	f7ff f800 	bl	8008a10 <_free_r>
 8009a10:	89a3      	ldrh	r3, [r4, #12]
 8009a12:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8009a16:	f023 0303 	bic.w	r3, r3, #3
 8009a1a:	f1b8 0f02 	cmp.w	r8, #2
 8009a1e:	81a3      	strh	r3, [r4, #12]
 8009a20:	d06c      	beq.n	8009afc <setvbuf+0x168>
 8009a22:	ab01      	add	r3, sp, #4
 8009a24:	466a      	mov	r2, sp
 8009a26:	4621      	mov	r1, r4
 8009a28:	4638      	mov	r0, r7
 8009a2a:	f002 fc99 	bl	800c360 <__swhatbuf_r>
 8009a2e:	89a3      	ldrh	r3, [r4, #12]
 8009a30:	4318      	orrs	r0, r3
 8009a32:	81a0      	strh	r0, [r4, #12]
 8009a34:	2d00      	cmp	r5, #0
 8009a36:	d130      	bne.n	8009a9a <setvbuf+0x106>
 8009a38:	9d00      	ldr	r5, [sp, #0]
 8009a3a:	4628      	mov	r0, r5
 8009a3c:	f7fe ffca 	bl	80089d4 <malloc>
 8009a40:	4606      	mov	r6, r0
 8009a42:	2800      	cmp	r0, #0
 8009a44:	d155      	bne.n	8009af2 <setvbuf+0x15e>
 8009a46:	f8dd 9000 	ldr.w	r9, [sp]
 8009a4a:	45a9      	cmp	r9, r5
 8009a4c:	d14a      	bne.n	8009ae4 <setvbuf+0x150>
 8009a4e:	f04f 35ff 	mov.w	r5, #4294967295
 8009a52:	2200      	movs	r2, #0
 8009a54:	60a2      	str	r2, [r4, #8]
 8009a56:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8009a5a:	6022      	str	r2, [r4, #0]
 8009a5c:	6122      	str	r2, [r4, #16]
 8009a5e:	2201      	movs	r2, #1
 8009a60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a64:	6162      	str	r2, [r4, #20]
 8009a66:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009a68:	f043 0302 	orr.w	r3, r3, #2
 8009a6c:	07d2      	lsls	r2, r2, #31
 8009a6e:	81a3      	strh	r3, [r4, #12]
 8009a70:	d405      	bmi.n	8009a7e <setvbuf+0xea>
 8009a72:	f413 7f00 	tst.w	r3, #512	; 0x200
 8009a76:	d102      	bne.n	8009a7e <setvbuf+0xea>
 8009a78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a7a:	f002 fc5d 	bl	800c338 <__retarget_lock_release_recursive>
 8009a7e:	4628      	mov	r0, r5
 8009a80:	b003      	add	sp, #12
 8009a82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a86:	4b24      	ldr	r3, [pc, #144]	; (8009b18 <setvbuf+0x184>)
 8009a88:	429c      	cmp	r4, r3
 8009a8a:	d101      	bne.n	8009a90 <setvbuf+0xfc>
 8009a8c:	68bc      	ldr	r4, [r7, #8]
 8009a8e:	e793      	b.n	80099b8 <setvbuf+0x24>
 8009a90:	4b22      	ldr	r3, [pc, #136]	; (8009b1c <setvbuf+0x188>)
 8009a92:	429c      	cmp	r4, r3
 8009a94:	bf08      	it	eq
 8009a96:	68fc      	ldreq	r4, [r7, #12]
 8009a98:	e78e      	b.n	80099b8 <setvbuf+0x24>
 8009a9a:	2e00      	cmp	r6, #0
 8009a9c:	d0cd      	beq.n	8009a3a <setvbuf+0xa6>
 8009a9e:	69bb      	ldr	r3, [r7, #24]
 8009aa0:	b913      	cbnz	r3, 8009aa8 <setvbuf+0x114>
 8009aa2:	4638      	mov	r0, r7
 8009aa4:	f002 f836 	bl	800bb14 <__sinit>
 8009aa8:	f1b8 0f01 	cmp.w	r8, #1
 8009aac:	bf08      	it	eq
 8009aae:	89a3      	ldrheq	r3, [r4, #12]
 8009ab0:	6026      	str	r6, [r4, #0]
 8009ab2:	bf04      	itt	eq
 8009ab4:	f043 0301 	orreq.w	r3, r3, #1
 8009ab8:	81a3      	strheq	r3, [r4, #12]
 8009aba:	89a2      	ldrh	r2, [r4, #12]
 8009abc:	f012 0308 	ands.w	r3, r2, #8
 8009ac0:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8009ac4:	d01c      	beq.n	8009b00 <setvbuf+0x16c>
 8009ac6:	07d3      	lsls	r3, r2, #31
 8009ac8:	bf41      	itttt	mi
 8009aca:	2300      	movmi	r3, #0
 8009acc:	426d      	negmi	r5, r5
 8009ace:	60a3      	strmi	r3, [r4, #8]
 8009ad0:	61a5      	strmi	r5, [r4, #24]
 8009ad2:	bf58      	it	pl
 8009ad4:	60a5      	strpl	r5, [r4, #8]
 8009ad6:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8009ad8:	f015 0501 	ands.w	r5, r5, #1
 8009adc:	d115      	bne.n	8009b0a <setvbuf+0x176>
 8009ade:	f412 7f00 	tst.w	r2, #512	; 0x200
 8009ae2:	e7c8      	b.n	8009a76 <setvbuf+0xe2>
 8009ae4:	4648      	mov	r0, r9
 8009ae6:	f7fe ff75 	bl	80089d4 <malloc>
 8009aea:	4606      	mov	r6, r0
 8009aec:	2800      	cmp	r0, #0
 8009aee:	d0ae      	beq.n	8009a4e <setvbuf+0xba>
 8009af0:	464d      	mov	r5, r9
 8009af2:	89a3      	ldrh	r3, [r4, #12]
 8009af4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009af8:	81a3      	strh	r3, [r4, #12]
 8009afa:	e7d0      	b.n	8009a9e <setvbuf+0x10a>
 8009afc:	2500      	movs	r5, #0
 8009afe:	e7a8      	b.n	8009a52 <setvbuf+0xbe>
 8009b00:	60a3      	str	r3, [r4, #8]
 8009b02:	e7e8      	b.n	8009ad6 <setvbuf+0x142>
 8009b04:	f04f 35ff 	mov.w	r5, #4294967295
 8009b08:	e7b9      	b.n	8009a7e <setvbuf+0xea>
 8009b0a:	2500      	movs	r5, #0
 8009b0c:	e7b7      	b.n	8009a7e <setvbuf+0xea>
 8009b0e:	bf00      	nop
 8009b10:	20000018 	.word	0x20000018
 8009b14:	0800eb48 	.word	0x0800eb48
 8009b18:	0800eb68 	.word	0x0800eb68
 8009b1c:	0800eb28 	.word	0x0800eb28

08009b20 <nanf>:
 8009b20:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009b28 <nanf+0x8>
 8009b24:	4770      	bx	lr
 8009b26:	bf00      	nop
 8009b28:	7fc00000 	.word	0x7fc00000

08009b2c <sniprintf>:
 8009b2c:	b40c      	push	{r2, r3}
 8009b2e:	b530      	push	{r4, r5, lr}
 8009b30:	4b17      	ldr	r3, [pc, #92]	; (8009b90 <sniprintf+0x64>)
 8009b32:	1e0c      	subs	r4, r1, #0
 8009b34:	681d      	ldr	r5, [r3, #0]
 8009b36:	b09d      	sub	sp, #116	; 0x74
 8009b38:	da08      	bge.n	8009b4c <sniprintf+0x20>
 8009b3a:	238b      	movs	r3, #139	; 0x8b
 8009b3c:	602b      	str	r3, [r5, #0]
 8009b3e:	f04f 30ff 	mov.w	r0, #4294967295
 8009b42:	b01d      	add	sp, #116	; 0x74
 8009b44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009b48:	b002      	add	sp, #8
 8009b4a:	4770      	bx	lr
 8009b4c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009b50:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009b54:	bf14      	ite	ne
 8009b56:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009b5a:	4623      	moveq	r3, r4
 8009b5c:	9304      	str	r3, [sp, #16]
 8009b5e:	9307      	str	r3, [sp, #28]
 8009b60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009b64:	9002      	str	r0, [sp, #8]
 8009b66:	9006      	str	r0, [sp, #24]
 8009b68:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009b6c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009b6e:	ab21      	add	r3, sp, #132	; 0x84
 8009b70:	a902      	add	r1, sp, #8
 8009b72:	4628      	mov	r0, r5
 8009b74:	9301      	str	r3, [sp, #4]
 8009b76:	f003 f99b 	bl	800ceb0 <_svfiprintf_r>
 8009b7a:	1c43      	adds	r3, r0, #1
 8009b7c:	bfbc      	itt	lt
 8009b7e:	238b      	movlt	r3, #139	; 0x8b
 8009b80:	602b      	strlt	r3, [r5, #0]
 8009b82:	2c00      	cmp	r4, #0
 8009b84:	d0dd      	beq.n	8009b42 <sniprintf+0x16>
 8009b86:	9b02      	ldr	r3, [sp, #8]
 8009b88:	2200      	movs	r2, #0
 8009b8a:	701a      	strb	r2, [r3, #0]
 8009b8c:	e7d9      	b.n	8009b42 <sniprintf+0x16>
 8009b8e:	bf00      	nop
 8009b90:	20000018 	.word	0x20000018

08009b94 <siprintf>:
 8009b94:	b40e      	push	{r1, r2, r3}
 8009b96:	b500      	push	{lr}
 8009b98:	b09c      	sub	sp, #112	; 0x70
 8009b9a:	ab1d      	add	r3, sp, #116	; 0x74
 8009b9c:	9002      	str	r0, [sp, #8]
 8009b9e:	9006      	str	r0, [sp, #24]
 8009ba0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009ba4:	4809      	ldr	r0, [pc, #36]	; (8009bcc <siprintf+0x38>)
 8009ba6:	9107      	str	r1, [sp, #28]
 8009ba8:	9104      	str	r1, [sp, #16]
 8009baa:	4909      	ldr	r1, [pc, #36]	; (8009bd0 <siprintf+0x3c>)
 8009bac:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bb0:	9105      	str	r1, [sp, #20]
 8009bb2:	6800      	ldr	r0, [r0, #0]
 8009bb4:	9301      	str	r3, [sp, #4]
 8009bb6:	a902      	add	r1, sp, #8
 8009bb8:	f003 f97a 	bl	800ceb0 <_svfiprintf_r>
 8009bbc:	9b02      	ldr	r3, [sp, #8]
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	701a      	strb	r2, [r3, #0]
 8009bc2:	b01c      	add	sp, #112	; 0x70
 8009bc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009bc8:	b003      	add	sp, #12
 8009bca:	4770      	bx	lr
 8009bcc:	20000018 	.word	0x20000018
 8009bd0:	ffff0208 	.word	0xffff0208

08009bd4 <__sread>:
 8009bd4:	b510      	push	{r4, lr}
 8009bd6:	460c      	mov	r4, r1
 8009bd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bdc:	f003 fbc2 	bl	800d364 <_read_r>
 8009be0:	2800      	cmp	r0, #0
 8009be2:	bfab      	itete	ge
 8009be4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009be6:	89a3      	ldrhlt	r3, [r4, #12]
 8009be8:	181b      	addge	r3, r3, r0
 8009bea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009bee:	bfac      	ite	ge
 8009bf0:	6563      	strge	r3, [r4, #84]	; 0x54
 8009bf2:	81a3      	strhlt	r3, [r4, #12]
 8009bf4:	bd10      	pop	{r4, pc}

08009bf6 <__swrite>:
 8009bf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bfa:	461f      	mov	r7, r3
 8009bfc:	898b      	ldrh	r3, [r1, #12]
 8009bfe:	05db      	lsls	r3, r3, #23
 8009c00:	4605      	mov	r5, r0
 8009c02:	460c      	mov	r4, r1
 8009c04:	4616      	mov	r6, r2
 8009c06:	d505      	bpl.n	8009c14 <__swrite+0x1e>
 8009c08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c0c:	2302      	movs	r3, #2
 8009c0e:	2200      	movs	r2, #0
 8009c10:	f002 fb94 	bl	800c33c <_lseek_r>
 8009c14:	89a3      	ldrh	r3, [r4, #12]
 8009c16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009c1e:	81a3      	strh	r3, [r4, #12]
 8009c20:	4632      	mov	r2, r6
 8009c22:	463b      	mov	r3, r7
 8009c24:	4628      	mov	r0, r5
 8009c26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c2a:	f000 bf4f 	b.w	800aacc <_write_r>

08009c2e <__sseek>:
 8009c2e:	b510      	push	{r4, lr}
 8009c30:	460c      	mov	r4, r1
 8009c32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c36:	f002 fb81 	bl	800c33c <_lseek_r>
 8009c3a:	1c43      	adds	r3, r0, #1
 8009c3c:	89a3      	ldrh	r3, [r4, #12]
 8009c3e:	bf15      	itete	ne
 8009c40:	6560      	strne	r0, [r4, #84]	; 0x54
 8009c42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009c46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009c4a:	81a3      	strheq	r3, [r4, #12]
 8009c4c:	bf18      	it	ne
 8009c4e:	81a3      	strhne	r3, [r4, #12]
 8009c50:	bd10      	pop	{r4, pc}

08009c52 <__sclose>:
 8009c52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c56:	f000 bfb9 	b.w	800abcc <_close_r>

08009c5a <strchr>:
 8009c5a:	b2c9      	uxtb	r1, r1
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c62:	b11a      	cbz	r2, 8009c6c <strchr+0x12>
 8009c64:	428a      	cmp	r2, r1
 8009c66:	d1f9      	bne.n	8009c5c <strchr+0x2>
 8009c68:	4618      	mov	r0, r3
 8009c6a:	4770      	bx	lr
 8009c6c:	2900      	cmp	r1, #0
 8009c6e:	bf18      	it	ne
 8009c70:	2300      	movne	r3, #0
 8009c72:	e7f9      	b.n	8009c68 <strchr+0xe>

08009c74 <strncmp>:
 8009c74:	b510      	push	{r4, lr}
 8009c76:	b16a      	cbz	r2, 8009c94 <strncmp+0x20>
 8009c78:	3901      	subs	r1, #1
 8009c7a:	1884      	adds	r4, r0, r2
 8009c7c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009c80:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009c84:	4293      	cmp	r3, r2
 8009c86:	d103      	bne.n	8009c90 <strncmp+0x1c>
 8009c88:	42a0      	cmp	r0, r4
 8009c8a:	d001      	beq.n	8009c90 <strncmp+0x1c>
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d1f5      	bne.n	8009c7c <strncmp+0x8>
 8009c90:	1a98      	subs	r0, r3, r2
 8009c92:	bd10      	pop	{r4, pc}
 8009c94:	4610      	mov	r0, r2
 8009c96:	e7fc      	b.n	8009c92 <strncmp+0x1e>

08009c98 <sulp>:
 8009c98:	b570      	push	{r4, r5, r6, lr}
 8009c9a:	4604      	mov	r4, r0
 8009c9c:	460d      	mov	r5, r1
 8009c9e:	ec45 4b10 	vmov	d0, r4, r5
 8009ca2:	4616      	mov	r6, r2
 8009ca4:	f002 ff4a 	bl	800cb3c <__ulp>
 8009ca8:	ec51 0b10 	vmov	r0, r1, d0
 8009cac:	b17e      	cbz	r6, 8009cce <sulp+0x36>
 8009cae:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009cb2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	dd09      	ble.n	8009cce <sulp+0x36>
 8009cba:	051b      	lsls	r3, r3, #20
 8009cbc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009cc0:	2400      	movs	r4, #0
 8009cc2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009cc6:	4622      	mov	r2, r4
 8009cc8:	462b      	mov	r3, r5
 8009cca:	f7f6 fc95 	bl	80005f8 <__aeabi_dmul>
 8009cce:	bd70      	pop	{r4, r5, r6, pc}

08009cd0 <_strtod_l>:
 8009cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cd4:	b0a3      	sub	sp, #140	; 0x8c
 8009cd6:	461f      	mov	r7, r3
 8009cd8:	2300      	movs	r3, #0
 8009cda:	931e      	str	r3, [sp, #120]	; 0x78
 8009cdc:	4ba4      	ldr	r3, [pc, #656]	; (8009f70 <_strtod_l+0x2a0>)
 8009cde:	9219      	str	r2, [sp, #100]	; 0x64
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	9307      	str	r3, [sp, #28]
 8009ce4:	4604      	mov	r4, r0
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	4688      	mov	r8, r1
 8009cea:	f7f6 fac1 	bl	8000270 <strlen>
 8009cee:	f04f 0a00 	mov.w	sl, #0
 8009cf2:	4605      	mov	r5, r0
 8009cf4:	f04f 0b00 	mov.w	fp, #0
 8009cf8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8009cfc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009cfe:	781a      	ldrb	r2, [r3, #0]
 8009d00:	2a2b      	cmp	r2, #43	; 0x2b
 8009d02:	d04c      	beq.n	8009d9e <_strtod_l+0xce>
 8009d04:	d839      	bhi.n	8009d7a <_strtod_l+0xaa>
 8009d06:	2a0d      	cmp	r2, #13
 8009d08:	d832      	bhi.n	8009d70 <_strtod_l+0xa0>
 8009d0a:	2a08      	cmp	r2, #8
 8009d0c:	d832      	bhi.n	8009d74 <_strtod_l+0xa4>
 8009d0e:	2a00      	cmp	r2, #0
 8009d10:	d03c      	beq.n	8009d8c <_strtod_l+0xbc>
 8009d12:	2300      	movs	r3, #0
 8009d14:	930e      	str	r3, [sp, #56]	; 0x38
 8009d16:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8009d18:	7833      	ldrb	r3, [r6, #0]
 8009d1a:	2b30      	cmp	r3, #48	; 0x30
 8009d1c:	f040 80b4 	bne.w	8009e88 <_strtod_l+0x1b8>
 8009d20:	7873      	ldrb	r3, [r6, #1]
 8009d22:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009d26:	2b58      	cmp	r3, #88	; 0x58
 8009d28:	d16c      	bne.n	8009e04 <_strtod_l+0x134>
 8009d2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d2c:	9301      	str	r3, [sp, #4]
 8009d2e:	ab1e      	add	r3, sp, #120	; 0x78
 8009d30:	9702      	str	r7, [sp, #8]
 8009d32:	9300      	str	r3, [sp, #0]
 8009d34:	4a8f      	ldr	r2, [pc, #572]	; (8009f74 <_strtod_l+0x2a4>)
 8009d36:	ab1f      	add	r3, sp, #124	; 0x7c
 8009d38:	a91d      	add	r1, sp, #116	; 0x74
 8009d3a:	4620      	mov	r0, r4
 8009d3c:	f001 ffee 	bl	800bd1c <__gethex>
 8009d40:	f010 0707 	ands.w	r7, r0, #7
 8009d44:	4605      	mov	r5, r0
 8009d46:	d005      	beq.n	8009d54 <_strtod_l+0x84>
 8009d48:	2f06      	cmp	r7, #6
 8009d4a:	d12a      	bne.n	8009da2 <_strtod_l+0xd2>
 8009d4c:	3601      	adds	r6, #1
 8009d4e:	2300      	movs	r3, #0
 8009d50:	961d      	str	r6, [sp, #116]	; 0x74
 8009d52:	930e      	str	r3, [sp, #56]	; 0x38
 8009d54:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	f040 8596 	bne.w	800a888 <_strtod_l+0xbb8>
 8009d5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d5e:	b1db      	cbz	r3, 8009d98 <_strtod_l+0xc8>
 8009d60:	4652      	mov	r2, sl
 8009d62:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009d66:	ec43 2b10 	vmov	d0, r2, r3
 8009d6a:	b023      	add	sp, #140	; 0x8c
 8009d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d70:	2a20      	cmp	r2, #32
 8009d72:	d1ce      	bne.n	8009d12 <_strtod_l+0x42>
 8009d74:	3301      	adds	r3, #1
 8009d76:	931d      	str	r3, [sp, #116]	; 0x74
 8009d78:	e7c0      	b.n	8009cfc <_strtod_l+0x2c>
 8009d7a:	2a2d      	cmp	r2, #45	; 0x2d
 8009d7c:	d1c9      	bne.n	8009d12 <_strtod_l+0x42>
 8009d7e:	2201      	movs	r2, #1
 8009d80:	920e      	str	r2, [sp, #56]	; 0x38
 8009d82:	1c5a      	adds	r2, r3, #1
 8009d84:	921d      	str	r2, [sp, #116]	; 0x74
 8009d86:	785b      	ldrb	r3, [r3, #1]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d1c4      	bne.n	8009d16 <_strtod_l+0x46>
 8009d8c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009d8e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	f040 8576 	bne.w	800a884 <_strtod_l+0xbb4>
 8009d98:	4652      	mov	r2, sl
 8009d9a:	465b      	mov	r3, fp
 8009d9c:	e7e3      	b.n	8009d66 <_strtod_l+0x96>
 8009d9e:	2200      	movs	r2, #0
 8009da0:	e7ee      	b.n	8009d80 <_strtod_l+0xb0>
 8009da2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009da4:	b13a      	cbz	r2, 8009db6 <_strtod_l+0xe6>
 8009da6:	2135      	movs	r1, #53	; 0x35
 8009da8:	a820      	add	r0, sp, #128	; 0x80
 8009daa:	f002 ffd2 	bl	800cd52 <__copybits>
 8009dae:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009db0:	4620      	mov	r0, r4
 8009db2:	f002 fb97 	bl	800c4e4 <_Bfree>
 8009db6:	3f01      	subs	r7, #1
 8009db8:	2f05      	cmp	r7, #5
 8009dba:	d807      	bhi.n	8009dcc <_strtod_l+0xfc>
 8009dbc:	e8df f007 	tbb	[pc, r7]
 8009dc0:	1d180b0e 	.word	0x1d180b0e
 8009dc4:	030e      	.short	0x030e
 8009dc6:	f04f 0b00 	mov.w	fp, #0
 8009dca:	46da      	mov	sl, fp
 8009dcc:	0728      	lsls	r0, r5, #28
 8009dce:	d5c1      	bpl.n	8009d54 <_strtod_l+0x84>
 8009dd0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8009dd4:	e7be      	b.n	8009d54 <_strtod_l+0x84>
 8009dd6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8009dda:	e7f7      	b.n	8009dcc <_strtod_l+0xfc>
 8009ddc:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8009de0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8009de2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009de6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009dea:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009dee:	e7ed      	b.n	8009dcc <_strtod_l+0xfc>
 8009df0:	f8df b184 	ldr.w	fp, [pc, #388]	; 8009f78 <_strtod_l+0x2a8>
 8009df4:	f04f 0a00 	mov.w	sl, #0
 8009df8:	e7e8      	b.n	8009dcc <_strtod_l+0xfc>
 8009dfa:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8009dfe:	f04f 3aff 	mov.w	sl, #4294967295
 8009e02:	e7e3      	b.n	8009dcc <_strtod_l+0xfc>
 8009e04:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009e06:	1c5a      	adds	r2, r3, #1
 8009e08:	921d      	str	r2, [sp, #116]	; 0x74
 8009e0a:	785b      	ldrb	r3, [r3, #1]
 8009e0c:	2b30      	cmp	r3, #48	; 0x30
 8009e0e:	d0f9      	beq.n	8009e04 <_strtod_l+0x134>
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d09f      	beq.n	8009d54 <_strtod_l+0x84>
 8009e14:	2301      	movs	r3, #1
 8009e16:	f04f 0900 	mov.w	r9, #0
 8009e1a:	9304      	str	r3, [sp, #16]
 8009e1c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009e1e:	930a      	str	r3, [sp, #40]	; 0x28
 8009e20:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009e24:	464f      	mov	r7, r9
 8009e26:	220a      	movs	r2, #10
 8009e28:	981d      	ldr	r0, [sp, #116]	; 0x74
 8009e2a:	7806      	ldrb	r6, [r0, #0]
 8009e2c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009e30:	b2d9      	uxtb	r1, r3
 8009e32:	2909      	cmp	r1, #9
 8009e34:	d92a      	bls.n	8009e8c <_strtod_l+0x1bc>
 8009e36:	9907      	ldr	r1, [sp, #28]
 8009e38:	462a      	mov	r2, r5
 8009e3a:	f7ff ff1b 	bl	8009c74 <strncmp>
 8009e3e:	b398      	cbz	r0, 8009ea8 <_strtod_l+0x1d8>
 8009e40:	2000      	movs	r0, #0
 8009e42:	4633      	mov	r3, r6
 8009e44:	463d      	mov	r5, r7
 8009e46:	9007      	str	r0, [sp, #28]
 8009e48:	4602      	mov	r2, r0
 8009e4a:	2b65      	cmp	r3, #101	; 0x65
 8009e4c:	d001      	beq.n	8009e52 <_strtod_l+0x182>
 8009e4e:	2b45      	cmp	r3, #69	; 0x45
 8009e50:	d118      	bne.n	8009e84 <_strtod_l+0x1b4>
 8009e52:	b91d      	cbnz	r5, 8009e5c <_strtod_l+0x18c>
 8009e54:	9b04      	ldr	r3, [sp, #16]
 8009e56:	4303      	orrs	r3, r0
 8009e58:	d098      	beq.n	8009d8c <_strtod_l+0xbc>
 8009e5a:	2500      	movs	r5, #0
 8009e5c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8009e60:	f108 0301 	add.w	r3, r8, #1
 8009e64:	931d      	str	r3, [sp, #116]	; 0x74
 8009e66:	f898 3001 	ldrb.w	r3, [r8, #1]
 8009e6a:	2b2b      	cmp	r3, #43	; 0x2b
 8009e6c:	d075      	beq.n	8009f5a <_strtod_l+0x28a>
 8009e6e:	2b2d      	cmp	r3, #45	; 0x2d
 8009e70:	d07b      	beq.n	8009f6a <_strtod_l+0x29a>
 8009e72:	f04f 0c00 	mov.w	ip, #0
 8009e76:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8009e7a:	2909      	cmp	r1, #9
 8009e7c:	f240 8082 	bls.w	8009f84 <_strtod_l+0x2b4>
 8009e80:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8009e84:	2600      	movs	r6, #0
 8009e86:	e09d      	b.n	8009fc4 <_strtod_l+0x2f4>
 8009e88:	2300      	movs	r3, #0
 8009e8a:	e7c4      	b.n	8009e16 <_strtod_l+0x146>
 8009e8c:	2f08      	cmp	r7, #8
 8009e8e:	bfd8      	it	le
 8009e90:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8009e92:	f100 0001 	add.w	r0, r0, #1
 8009e96:	bfda      	itte	le
 8009e98:	fb02 3301 	mlale	r3, r2, r1, r3
 8009e9c:	9309      	strle	r3, [sp, #36]	; 0x24
 8009e9e:	fb02 3909 	mlagt	r9, r2, r9, r3
 8009ea2:	3701      	adds	r7, #1
 8009ea4:	901d      	str	r0, [sp, #116]	; 0x74
 8009ea6:	e7bf      	b.n	8009e28 <_strtod_l+0x158>
 8009ea8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009eaa:	195a      	adds	r2, r3, r5
 8009eac:	921d      	str	r2, [sp, #116]	; 0x74
 8009eae:	5d5b      	ldrb	r3, [r3, r5]
 8009eb0:	2f00      	cmp	r7, #0
 8009eb2:	d037      	beq.n	8009f24 <_strtod_l+0x254>
 8009eb4:	9007      	str	r0, [sp, #28]
 8009eb6:	463d      	mov	r5, r7
 8009eb8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8009ebc:	2a09      	cmp	r2, #9
 8009ebe:	d912      	bls.n	8009ee6 <_strtod_l+0x216>
 8009ec0:	2201      	movs	r2, #1
 8009ec2:	e7c2      	b.n	8009e4a <_strtod_l+0x17a>
 8009ec4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009ec6:	1c5a      	adds	r2, r3, #1
 8009ec8:	921d      	str	r2, [sp, #116]	; 0x74
 8009eca:	785b      	ldrb	r3, [r3, #1]
 8009ecc:	3001      	adds	r0, #1
 8009ece:	2b30      	cmp	r3, #48	; 0x30
 8009ed0:	d0f8      	beq.n	8009ec4 <_strtod_l+0x1f4>
 8009ed2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8009ed6:	2a08      	cmp	r2, #8
 8009ed8:	f200 84db 	bhi.w	800a892 <_strtod_l+0xbc2>
 8009edc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009ede:	9007      	str	r0, [sp, #28]
 8009ee0:	2000      	movs	r0, #0
 8009ee2:	920a      	str	r2, [sp, #40]	; 0x28
 8009ee4:	4605      	mov	r5, r0
 8009ee6:	3b30      	subs	r3, #48	; 0x30
 8009ee8:	f100 0201 	add.w	r2, r0, #1
 8009eec:	d014      	beq.n	8009f18 <_strtod_l+0x248>
 8009eee:	9907      	ldr	r1, [sp, #28]
 8009ef0:	4411      	add	r1, r2
 8009ef2:	9107      	str	r1, [sp, #28]
 8009ef4:	462a      	mov	r2, r5
 8009ef6:	eb00 0e05 	add.w	lr, r0, r5
 8009efa:	210a      	movs	r1, #10
 8009efc:	4572      	cmp	r2, lr
 8009efe:	d113      	bne.n	8009f28 <_strtod_l+0x258>
 8009f00:	182a      	adds	r2, r5, r0
 8009f02:	2a08      	cmp	r2, #8
 8009f04:	f105 0501 	add.w	r5, r5, #1
 8009f08:	4405      	add	r5, r0
 8009f0a:	dc1c      	bgt.n	8009f46 <_strtod_l+0x276>
 8009f0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009f0e:	220a      	movs	r2, #10
 8009f10:	fb02 3301 	mla	r3, r2, r1, r3
 8009f14:	9309      	str	r3, [sp, #36]	; 0x24
 8009f16:	2200      	movs	r2, #0
 8009f18:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009f1a:	1c59      	adds	r1, r3, #1
 8009f1c:	911d      	str	r1, [sp, #116]	; 0x74
 8009f1e:	785b      	ldrb	r3, [r3, #1]
 8009f20:	4610      	mov	r0, r2
 8009f22:	e7c9      	b.n	8009eb8 <_strtod_l+0x1e8>
 8009f24:	4638      	mov	r0, r7
 8009f26:	e7d2      	b.n	8009ece <_strtod_l+0x1fe>
 8009f28:	2a08      	cmp	r2, #8
 8009f2a:	dc04      	bgt.n	8009f36 <_strtod_l+0x266>
 8009f2c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009f2e:	434e      	muls	r6, r1
 8009f30:	9609      	str	r6, [sp, #36]	; 0x24
 8009f32:	3201      	adds	r2, #1
 8009f34:	e7e2      	b.n	8009efc <_strtod_l+0x22c>
 8009f36:	f102 0c01 	add.w	ip, r2, #1
 8009f3a:	f1bc 0f10 	cmp.w	ip, #16
 8009f3e:	bfd8      	it	le
 8009f40:	fb01 f909 	mulle.w	r9, r1, r9
 8009f44:	e7f5      	b.n	8009f32 <_strtod_l+0x262>
 8009f46:	2d10      	cmp	r5, #16
 8009f48:	bfdc      	itt	le
 8009f4a:	220a      	movle	r2, #10
 8009f4c:	fb02 3909 	mlale	r9, r2, r9, r3
 8009f50:	e7e1      	b.n	8009f16 <_strtod_l+0x246>
 8009f52:	2300      	movs	r3, #0
 8009f54:	9307      	str	r3, [sp, #28]
 8009f56:	2201      	movs	r2, #1
 8009f58:	e77c      	b.n	8009e54 <_strtod_l+0x184>
 8009f5a:	f04f 0c00 	mov.w	ip, #0
 8009f5e:	f108 0302 	add.w	r3, r8, #2
 8009f62:	931d      	str	r3, [sp, #116]	; 0x74
 8009f64:	f898 3002 	ldrb.w	r3, [r8, #2]
 8009f68:	e785      	b.n	8009e76 <_strtod_l+0x1a6>
 8009f6a:	f04f 0c01 	mov.w	ip, #1
 8009f6e:	e7f6      	b.n	8009f5e <_strtod_l+0x28e>
 8009f70:	0800ebf4 	.word	0x0800ebf4
 8009f74:	0800e940 	.word	0x0800e940
 8009f78:	7ff00000 	.word	0x7ff00000
 8009f7c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009f7e:	1c59      	adds	r1, r3, #1
 8009f80:	911d      	str	r1, [sp, #116]	; 0x74
 8009f82:	785b      	ldrb	r3, [r3, #1]
 8009f84:	2b30      	cmp	r3, #48	; 0x30
 8009f86:	d0f9      	beq.n	8009f7c <_strtod_l+0x2ac>
 8009f88:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8009f8c:	2908      	cmp	r1, #8
 8009f8e:	f63f af79 	bhi.w	8009e84 <_strtod_l+0x1b4>
 8009f92:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8009f96:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009f98:	9308      	str	r3, [sp, #32]
 8009f9a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009f9c:	1c59      	adds	r1, r3, #1
 8009f9e:	911d      	str	r1, [sp, #116]	; 0x74
 8009fa0:	785b      	ldrb	r3, [r3, #1]
 8009fa2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8009fa6:	2e09      	cmp	r6, #9
 8009fa8:	d937      	bls.n	800a01a <_strtod_l+0x34a>
 8009faa:	9e08      	ldr	r6, [sp, #32]
 8009fac:	1b89      	subs	r1, r1, r6
 8009fae:	2908      	cmp	r1, #8
 8009fb0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009fb4:	dc02      	bgt.n	8009fbc <_strtod_l+0x2ec>
 8009fb6:	4576      	cmp	r6, lr
 8009fb8:	bfa8      	it	ge
 8009fba:	4676      	movge	r6, lr
 8009fbc:	f1bc 0f00 	cmp.w	ip, #0
 8009fc0:	d000      	beq.n	8009fc4 <_strtod_l+0x2f4>
 8009fc2:	4276      	negs	r6, r6
 8009fc4:	2d00      	cmp	r5, #0
 8009fc6:	d14f      	bne.n	800a068 <_strtod_l+0x398>
 8009fc8:	9904      	ldr	r1, [sp, #16]
 8009fca:	4301      	orrs	r1, r0
 8009fcc:	f47f aec2 	bne.w	8009d54 <_strtod_l+0x84>
 8009fd0:	2a00      	cmp	r2, #0
 8009fd2:	f47f aedb 	bne.w	8009d8c <_strtod_l+0xbc>
 8009fd6:	2b69      	cmp	r3, #105	; 0x69
 8009fd8:	d027      	beq.n	800a02a <_strtod_l+0x35a>
 8009fda:	dc24      	bgt.n	800a026 <_strtod_l+0x356>
 8009fdc:	2b49      	cmp	r3, #73	; 0x49
 8009fde:	d024      	beq.n	800a02a <_strtod_l+0x35a>
 8009fe0:	2b4e      	cmp	r3, #78	; 0x4e
 8009fe2:	f47f aed3 	bne.w	8009d8c <_strtod_l+0xbc>
 8009fe6:	499e      	ldr	r1, [pc, #632]	; (800a260 <_strtod_l+0x590>)
 8009fe8:	a81d      	add	r0, sp, #116	; 0x74
 8009fea:	f002 f8ef 	bl	800c1cc <__match>
 8009fee:	2800      	cmp	r0, #0
 8009ff0:	f43f aecc 	beq.w	8009d8c <_strtod_l+0xbc>
 8009ff4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009ff6:	781b      	ldrb	r3, [r3, #0]
 8009ff8:	2b28      	cmp	r3, #40	; 0x28
 8009ffa:	d12d      	bne.n	800a058 <_strtod_l+0x388>
 8009ffc:	4999      	ldr	r1, [pc, #612]	; (800a264 <_strtod_l+0x594>)
 8009ffe:	aa20      	add	r2, sp, #128	; 0x80
 800a000:	a81d      	add	r0, sp, #116	; 0x74
 800a002:	f002 f8f7 	bl	800c1f4 <__hexnan>
 800a006:	2805      	cmp	r0, #5
 800a008:	d126      	bne.n	800a058 <_strtod_l+0x388>
 800a00a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a00c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800a010:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800a014:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800a018:	e69c      	b.n	8009d54 <_strtod_l+0x84>
 800a01a:	210a      	movs	r1, #10
 800a01c:	fb01 3e0e 	mla	lr, r1, lr, r3
 800a020:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800a024:	e7b9      	b.n	8009f9a <_strtod_l+0x2ca>
 800a026:	2b6e      	cmp	r3, #110	; 0x6e
 800a028:	e7db      	b.n	8009fe2 <_strtod_l+0x312>
 800a02a:	498f      	ldr	r1, [pc, #572]	; (800a268 <_strtod_l+0x598>)
 800a02c:	a81d      	add	r0, sp, #116	; 0x74
 800a02e:	f002 f8cd 	bl	800c1cc <__match>
 800a032:	2800      	cmp	r0, #0
 800a034:	f43f aeaa 	beq.w	8009d8c <_strtod_l+0xbc>
 800a038:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a03a:	498c      	ldr	r1, [pc, #560]	; (800a26c <_strtod_l+0x59c>)
 800a03c:	3b01      	subs	r3, #1
 800a03e:	a81d      	add	r0, sp, #116	; 0x74
 800a040:	931d      	str	r3, [sp, #116]	; 0x74
 800a042:	f002 f8c3 	bl	800c1cc <__match>
 800a046:	b910      	cbnz	r0, 800a04e <_strtod_l+0x37e>
 800a048:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a04a:	3301      	adds	r3, #1
 800a04c:	931d      	str	r3, [sp, #116]	; 0x74
 800a04e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800a27c <_strtod_l+0x5ac>
 800a052:	f04f 0a00 	mov.w	sl, #0
 800a056:	e67d      	b.n	8009d54 <_strtod_l+0x84>
 800a058:	4885      	ldr	r0, [pc, #532]	; (800a270 <_strtod_l+0x5a0>)
 800a05a:	f003 f995 	bl	800d388 <nan>
 800a05e:	ed8d 0b04 	vstr	d0, [sp, #16]
 800a062:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800a066:	e675      	b.n	8009d54 <_strtod_l+0x84>
 800a068:	9b07      	ldr	r3, [sp, #28]
 800a06a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a06c:	1af3      	subs	r3, r6, r3
 800a06e:	2f00      	cmp	r7, #0
 800a070:	bf08      	it	eq
 800a072:	462f      	moveq	r7, r5
 800a074:	2d10      	cmp	r5, #16
 800a076:	9308      	str	r3, [sp, #32]
 800a078:	46a8      	mov	r8, r5
 800a07a:	bfa8      	it	ge
 800a07c:	f04f 0810 	movge.w	r8, #16
 800a080:	f7f6 fa40 	bl	8000504 <__aeabi_ui2d>
 800a084:	2d09      	cmp	r5, #9
 800a086:	4682      	mov	sl, r0
 800a088:	468b      	mov	fp, r1
 800a08a:	dd13      	ble.n	800a0b4 <_strtod_l+0x3e4>
 800a08c:	4b79      	ldr	r3, [pc, #484]	; (800a274 <_strtod_l+0x5a4>)
 800a08e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a092:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a096:	f7f6 faaf 	bl	80005f8 <__aeabi_dmul>
 800a09a:	4682      	mov	sl, r0
 800a09c:	4648      	mov	r0, r9
 800a09e:	468b      	mov	fp, r1
 800a0a0:	f7f6 fa30 	bl	8000504 <__aeabi_ui2d>
 800a0a4:	4602      	mov	r2, r0
 800a0a6:	460b      	mov	r3, r1
 800a0a8:	4650      	mov	r0, sl
 800a0aa:	4659      	mov	r1, fp
 800a0ac:	f7f6 f8ee 	bl	800028c <__adddf3>
 800a0b0:	4682      	mov	sl, r0
 800a0b2:	468b      	mov	fp, r1
 800a0b4:	2d0f      	cmp	r5, #15
 800a0b6:	dc38      	bgt.n	800a12a <_strtod_l+0x45a>
 800a0b8:	9b08      	ldr	r3, [sp, #32]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	f43f ae4a 	beq.w	8009d54 <_strtod_l+0x84>
 800a0c0:	dd24      	ble.n	800a10c <_strtod_l+0x43c>
 800a0c2:	2b16      	cmp	r3, #22
 800a0c4:	dc0b      	bgt.n	800a0de <_strtod_l+0x40e>
 800a0c6:	4d6b      	ldr	r5, [pc, #428]	; (800a274 <_strtod_l+0x5a4>)
 800a0c8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800a0cc:	e9d5 0100 	ldrd	r0, r1, [r5]
 800a0d0:	4652      	mov	r2, sl
 800a0d2:	465b      	mov	r3, fp
 800a0d4:	f7f6 fa90 	bl	80005f8 <__aeabi_dmul>
 800a0d8:	4682      	mov	sl, r0
 800a0da:	468b      	mov	fp, r1
 800a0dc:	e63a      	b.n	8009d54 <_strtod_l+0x84>
 800a0de:	9a08      	ldr	r2, [sp, #32]
 800a0e0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800a0e4:	4293      	cmp	r3, r2
 800a0e6:	db20      	blt.n	800a12a <_strtod_l+0x45a>
 800a0e8:	4c62      	ldr	r4, [pc, #392]	; (800a274 <_strtod_l+0x5a4>)
 800a0ea:	f1c5 050f 	rsb	r5, r5, #15
 800a0ee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a0f2:	4652      	mov	r2, sl
 800a0f4:	465b      	mov	r3, fp
 800a0f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a0fa:	f7f6 fa7d 	bl	80005f8 <__aeabi_dmul>
 800a0fe:	9b08      	ldr	r3, [sp, #32]
 800a100:	1b5d      	subs	r5, r3, r5
 800a102:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a106:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a10a:	e7e3      	b.n	800a0d4 <_strtod_l+0x404>
 800a10c:	9b08      	ldr	r3, [sp, #32]
 800a10e:	3316      	adds	r3, #22
 800a110:	db0b      	blt.n	800a12a <_strtod_l+0x45a>
 800a112:	9b07      	ldr	r3, [sp, #28]
 800a114:	4a57      	ldr	r2, [pc, #348]	; (800a274 <_strtod_l+0x5a4>)
 800a116:	1b9e      	subs	r6, r3, r6
 800a118:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800a11c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a120:	4650      	mov	r0, sl
 800a122:	4659      	mov	r1, fp
 800a124:	f7f6 fb92 	bl	800084c <__aeabi_ddiv>
 800a128:	e7d6      	b.n	800a0d8 <_strtod_l+0x408>
 800a12a:	9b08      	ldr	r3, [sp, #32]
 800a12c:	eba5 0808 	sub.w	r8, r5, r8
 800a130:	4498      	add	r8, r3
 800a132:	f1b8 0f00 	cmp.w	r8, #0
 800a136:	dd71      	ble.n	800a21c <_strtod_l+0x54c>
 800a138:	f018 030f 	ands.w	r3, r8, #15
 800a13c:	d00a      	beq.n	800a154 <_strtod_l+0x484>
 800a13e:	494d      	ldr	r1, [pc, #308]	; (800a274 <_strtod_l+0x5a4>)
 800a140:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a144:	4652      	mov	r2, sl
 800a146:	465b      	mov	r3, fp
 800a148:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a14c:	f7f6 fa54 	bl	80005f8 <__aeabi_dmul>
 800a150:	4682      	mov	sl, r0
 800a152:	468b      	mov	fp, r1
 800a154:	f038 080f 	bics.w	r8, r8, #15
 800a158:	d04d      	beq.n	800a1f6 <_strtod_l+0x526>
 800a15a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800a15e:	dd22      	ble.n	800a1a6 <_strtod_l+0x4d6>
 800a160:	2500      	movs	r5, #0
 800a162:	462e      	mov	r6, r5
 800a164:	9509      	str	r5, [sp, #36]	; 0x24
 800a166:	9507      	str	r5, [sp, #28]
 800a168:	2322      	movs	r3, #34	; 0x22
 800a16a:	f8df b110 	ldr.w	fp, [pc, #272]	; 800a27c <_strtod_l+0x5ac>
 800a16e:	6023      	str	r3, [r4, #0]
 800a170:	f04f 0a00 	mov.w	sl, #0
 800a174:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a176:	2b00      	cmp	r3, #0
 800a178:	f43f adec 	beq.w	8009d54 <_strtod_l+0x84>
 800a17c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a17e:	4620      	mov	r0, r4
 800a180:	f002 f9b0 	bl	800c4e4 <_Bfree>
 800a184:	9907      	ldr	r1, [sp, #28]
 800a186:	4620      	mov	r0, r4
 800a188:	f002 f9ac 	bl	800c4e4 <_Bfree>
 800a18c:	4631      	mov	r1, r6
 800a18e:	4620      	mov	r0, r4
 800a190:	f002 f9a8 	bl	800c4e4 <_Bfree>
 800a194:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a196:	4620      	mov	r0, r4
 800a198:	f002 f9a4 	bl	800c4e4 <_Bfree>
 800a19c:	4629      	mov	r1, r5
 800a19e:	4620      	mov	r0, r4
 800a1a0:	f002 f9a0 	bl	800c4e4 <_Bfree>
 800a1a4:	e5d6      	b.n	8009d54 <_strtod_l+0x84>
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	ea4f 1828 	mov.w	r8, r8, asr #4
 800a1ac:	4650      	mov	r0, sl
 800a1ae:	4659      	mov	r1, fp
 800a1b0:	4699      	mov	r9, r3
 800a1b2:	f1b8 0f01 	cmp.w	r8, #1
 800a1b6:	dc21      	bgt.n	800a1fc <_strtod_l+0x52c>
 800a1b8:	b10b      	cbz	r3, 800a1be <_strtod_l+0x4ee>
 800a1ba:	4682      	mov	sl, r0
 800a1bc:	468b      	mov	fp, r1
 800a1be:	4b2e      	ldr	r3, [pc, #184]	; (800a278 <_strtod_l+0x5a8>)
 800a1c0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800a1c4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800a1c8:	4652      	mov	r2, sl
 800a1ca:	465b      	mov	r3, fp
 800a1cc:	e9d9 0100 	ldrd	r0, r1, [r9]
 800a1d0:	f7f6 fa12 	bl	80005f8 <__aeabi_dmul>
 800a1d4:	4b29      	ldr	r3, [pc, #164]	; (800a27c <_strtod_l+0x5ac>)
 800a1d6:	460a      	mov	r2, r1
 800a1d8:	400b      	ands	r3, r1
 800a1da:	4929      	ldr	r1, [pc, #164]	; (800a280 <_strtod_l+0x5b0>)
 800a1dc:	428b      	cmp	r3, r1
 800a1de:	4682      	mov	sl, r0
 800a1e0:	d8be      	bhi.n	800a160 <_strtod_l+0x490>
 800a1e2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a1e6:	428b      	cmp	r3, r1
 800a1e8:	bf86      	itte	hi
 800a1ea:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800a284 <_strtod_l+0x5b4>
 800a1ee:	f04f 3aff 	movhi.w	sl, #4294967295
 800a1f2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	9304      	str	r3, [sp, #16]
 800a1fa:	e081      	b.n	800a300 <_strtod_l+0x630>
 800a1fc:	f018 0f01 	tst.w	r8, #1
 800a200:	d007      	beq.n	800a212 <_strtod_l+0x542>
 800a202:	4b1d      	ldr	r3, [pc, #116]	; (800a278 <_strtod_l+0x5a8>)
 800a204:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800a208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a20c:	f7f6 f9f4 	bl	80005f8 <__aeabi_dmul>
 800a210:	2301      	movs	r3, #1
 800a212:	f109 0901 	add.w	r9, r9, #1
 800a216:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a21a:	e7ca      	b.n	800a1b2 <_strtod_l+0x4e2>
 800a21c:	d0eb      	beq.n	800a1f6 <_strtod_l+0x526>
 800a21e:	f1c8 0800 	rsb	r8, r8, #0
 800a222:	f018 020f 	ands.w	r2, r8, #15
 800a226:	d00a      	beq.n	800a23e <_strtod_l+0x56e>
 800a228:	4b12      	ldr	r3, [pc, #72]	; (800a274 <_strtod_l+0x5a4>)
 800a22a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a22e:	4650      	mov	r0, sl
 800a230:	4659      	mov	r1, fp
 800a232:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a236:	f7f6 fb09 	bl	800084c <__aeabi_ddiv>
 800a23a:	4682      	mov	sl, r0
 800a23c:	468b      	mov	fp, r1
 800a23e:	ea5f 1828 	movs.w	r8, r8, asr #4
 800a242:	d0d8      	beq.n	800a1f6 <_strtod_l+0x526>
 800a244:	f1b8 0f1f 	cmp.w	r8, #31
 800a248:	dd1e      	ble.n	800a288 <_strtod_l+0x5b8>
 800a24a:	2500      	movs	r5, #0
 800a24c:	462e      	mov	r6, r5
 800a24e:	9509      	str	r5, [sp, #36]	; 0x24
 800a250:	9507      	str	r5, [sp, #28]
 800a252:	2322      	movs	r3, #34	; 0x22
 800a254:	f04f 0a00 	mov.w	sl, #0
 800a258:	f04f 0b00 	mov.w	fp, #0
 800a25c:	6023      	str	r3, [r4, #0]
 800a25e:	e789      	b.n	800a174 <_strtod_l+0x4a4>
 800a260:	0800e911 	.word	0x0800e911
 800a264:	0800e954 	.word	0x0800e954
 800a268:	0800e909 	.word	0x0800e909
 800a26c:	0800ea94 	.word	0x0800ea94
 800a270:	0800edb0 	.word	0x0800edb0
 800a274:	0800ec90 	.word	0x0800ec90
 800a278:	0800ec68 	.word	0x0800ec68
 800a27c:	7ff00000 	.word	0x7ff00000
 800a280:	7ca00000 	.word	0x7ca00000
 800a284:	7fefffff 	.word	0x7fefffff
 800a288:	f018 0310 	ands.w	r3, r8, #16
 800a28c:	bf18      	it	ne
 800a28e:	236a      	movne	r3, #106	; 0x6a
 800a290:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800a648 <_strtod_l+0x978>
 800a294:	9304      	str	r3, [sp, #16]
 800a296:	4650      	mov	r0, sl
 800a298:	4659      	mov	r1, fp
 800a29a:	2300      	movs	r3, #0
 800a29c:	f018 0f01 	tst.w	r8, #1
 800a2a0:	d004      	beq.n	800a2ac <_strtod_l+0x5dc>
 800a2a2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a2a6:	f7f6 f9a7 	bl	80005f8 <__aeabi_dmul>
 800a2aa:	2301      	movs	r3, #1
 800a2ac:	ea5f 0868 	movs.w	r8, r8, asr #1
 800a2b0:	f109 0908 	add.w	r9, r9, #8
 800a2b4:	d1f2      	bne.n	800a29c <_strtod_l+0x5cc>
 800a2b6:	b10b      	cbz	r3, 800a2bc <_strtod_l+0x5ec>
 800a2b8:	4682      	mov	sl, r0
 800a2ba:	468b      	mov	fp, r1
 800a2bc:	9b04      	ldr	r3, [sp, #16]
 800a2be:	b1bb      	cbz	r3, 800a2f0 <_strtod_l+0x620>
 800a2c0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800a2c4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	4659      	mov	r1, fp
 800a2cc:	dd10      	ble.n	800a2f0 <_strtod_l+0x620>
 800a2ce:	2b1f      	cmp	r3, #31
 800a2d0:	f340 8128 	ble.w	800a524 <_strtod_l+0x854>
 800a2d4:	2b34      	cmp	r3, #52	; 0x34
 800a2d6:	bfde      	ittt	le
 800a2d8:	3b20      	suble	r3, #32
 800a2da:	f04f 32ff 	movle.w	r2, #4294967295
 800a2de:	fa02 f303 	lslle.w	r3, r2, r3
 800a2e2:	f04f 0a00 	mov.w	sl, #0
 800a2e6:	bfcc      	ite	gt
 800a2e8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800a2ec:	ea03 0b01 	andle.w	fp, r3, r1
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	4650      	mov	r0, sl
 800a2f6:	4659      	mov	r1, fp
 800a2f8:	f7f6 fbe6 	bl	8000ac8 <__aeabi_dcmpeq>
 800a2fc:	2800      	cmp	r0, #0
 800a2fe:	d1a4      	bne.n	800a24a <_strtod_l+0x57a>
 800a300:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a302:	9300      	str	r3, [sp, #0]
 800a304:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a306:	462b      	mov	r3, r5
 800a308:	463a      	mov	r2, r7
 800a30a:	4620      	mov	r0, r4
 800a30c:	f002 f956 	bl	800c5bc <__s2b>
 800a310:	9009      	str	r0, [sp, #36]	; 0x24
 800a312:	2800      	cmp	r0, #0
 800a314:	f43f af24 	beq.w	800a160 <_strtod_l+0x490>
 800a318:	9b07      	ldr	r3, [sp, #28]
 800a31a:	1b9e      	subs	r6, r3, r6
 800a31c:	9b08      	ldr	r3, [sp, #32]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	bfb4      	ite	lt
 800a322:	4633      	movlt	r3, r6
 800a324:	2300      	movge	r3, #0
 800a326:	9310      	str	r3, [sp, #64]	; 0x40
 800a328:	9b08      	ldr	r3, [sp, #32]
 800a32a:	2500      	movs	r5, #0
 800a32c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a330:	9318      	str	r3, [sp, #96]	; 0x60
 800a332:	462e      	mov	r6, r5
 800a334:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a336:	4620      	mov	r0, r4
 800a338:	6859      	ldr	r1, [r3, #4]
 800a33a:	f002 f893 	bl	800c464 <_Balloc>
 800a33e:	9007      	str	r0, [sp, #28]
 800a340:	2800      	cmp	r0, #0
 800a342:	f43f af11 	beq.w	800a168 <_strtod_l+0x498>
 800a346:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a348:	691a      	ldr	r2, [r3, #16]
 800a34a:	3202      	adds	r2, #2
 800a34c:	f103 010c 	add.w	r1, r3, #12
 800a350:	0092      	lsls	r2, r2, #2
 800a352:	300c      	adds	r0, #12
 800a354:	f7fe fb46 	bl	80089e4 <memcpy>
 800a358:	ec4b ab10 	vmov	d0, sl, fp
 800a35c:	aa20      	add	r2, sp, #128	; 0x80
 800a35e:	a91f      	add	r1, sp, #124	; 0x7c
 800a360:	4620      	mov	r0, r4
 800a362:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800a366:	f002 fc65 	bl	800cc34 <__d2b>
 800a36a:	901e      	str	r0, [sp, #120]	; 0x78
 800a36c:	2800      	cmp	r0, #0
 800a36e:	f43f aefb 	beq.w	800a168 <_strtod_l+0x498>
 800a372:	2101      	movs	r1, #1
 800a374:	4620      	mov	r0, r4
 800a376:	f002 f9bb 	bl	800c6f0 <__i2b>
 800a37a:	4606      	mov	r6, r0
 800a37c:	2800      	cmp	r0, #0
 800a37e:	f43f aef3 	beq.w	800a168 <_strtod_l+0x498>
 800a382:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a384:	9904      	ldr	r1, [sp, #16]
 800a386:	2b00      	cmp	r3, #0
 800a388:	bfab      	itete	ge
 800a38a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800a38c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800a38e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800a390:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800a394:	bfac      	ite	ge
 800a396:	eb03 0902 	addge.w	r9, r3, r2
 800a39a:	1ad7      	sublt	r7, r2, r3
 800a39c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a39e:	eba3 0801 	sub.w	r8, r3, r1
 800a3a2:	4490      	add	r8, r2
 800a3a4:	4ba3      	ldr	r3, [pc, #652]	; (800a634 <_strtod_l+0x964>)
 800a3a6:	f108 38ff 	add.w	r8, r8, #4294967295
 800a3aa:	4598      	cmp	r8, r3
 800a3ac:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a3b0:	f280 80cc 	bge.w	800a54c <_strtod_l+0x87c>
 800a3b4:	eba3 0308 	sub.w	r3, r3, r8
 800a3b8:	2b1f      	cmp	r3, #31
 800a3ba:	eba2 0203 	sub.w	r2, r2, r3
 800a3be:	f04f 0101 	mov.w	r1, #1
 800a3c2:	f300 80b6 	bgt.w	800a532 <_strtod_l+0x862>
 800a3c6:	fa01 f303 	lsl.w	r3, r1, r3
 800a3ca:	9311      	str	r3, [sp, #68]	; 0x44
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	930c      	str	r3, [sp, #48]	; 0x30
 800a3d0:	eb09 0802 	add.w	r8, r9, r2
 800a3d4:	9b04      	ldr	r3, [sp, #16]
 800a3d6:	45c1      	cmp	r9, r8
 800a3d8:	4417      	add	r7, r2
 800a3da:	441f      	add	r7, r3
 800a3dc:	464b      	mov	r3, r9
 800a3de:	bfa8      	it	ge
 800a3e0:	4643      	movge	r3, r8
 800a3e2:	42bb      	cmp	r3, r7
 800a3e4:	bfa8      	it	ge
 800a3e6:	463b      	movge	r3, r7
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	bfc2      	ittt	gt
 800a3ec:	eba8 0803 	subgt.w	r8, r8, r3
 800a3f0:	1aff      	subgt	r7, r7, r3
 800a3f2:	eba9 0903 	subgt.w	r9, r9, r3
 800a3f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	dd17      	ble.n	800a42c <_strtod_l+0x75c>
 800a3fc:	4631      	mov	r1, r6
 800a3fe:	461a      	mov	r2, r3
 800a400:	4620      	mov	r0, r4
 800a402:	f002 fa31 	bl	800c868 <__pow5mult>
 800a406:	4606      	mov	r6, r0
 800a408:	2800      	cmp	r0, #0
 800a40a:	f43f aead 	beq.w	800a168 <_strtod_l+0x498>
 800a40e:	4601      	mov	r1, r0
 800a410:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a412:	4620      	mov	r0, r4
 800a414:	f002 f982 	bl	800c71c <__multiply>
 800a418:	900f      	str	r0, [sp, #60]	; 0x3c
 800a41a:	2800      	cmp	r0, #0
 800a41c:	f43f aea4 	beq.w	800a168 <_strtod_l+0x498>
 800a420:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a422:	4620      	mov	r0, r4
 800a424:	f002 f85e 	bl	800c4e4 <_Bfree>
 800a428:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a42a:	931e      	str	r3, [sp, #120]	; 0x78
 800a42c:	f1b8 0f00 	cmp.w	r8, #0
 800a430:	f300 8091 	bgt.w	800a556 <_strtod_l+0x886>
 800a434:	9b08      	ldr	r3, [sp, #32]
 800a436:	2b00      	cmp	r3, #0
 800a438:	dd08      	ble.n	800a44c <_strtod_l+0x77c>
 800a43a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a43c:	9907      	ldr	r1, [sp, #28]
 800a43e:	4620      	mov	r0, r4
 800a440:	f002 fa12 	bl	800c868 <__pow5mult>
 800a444:	9007      	str	r0, [sp, #28]
 800a446:	2800      	cmp	r0, #0
 800a448:	f43f ae8e 	beq.w	800a168 <_strtod_l+0x498>
 800a44c:	2f00      	cmp	r7, #0
 800a44e:	dd08      	ble.n	800a462 <_strtod_l+0x792>
 800a450:	9907      	ldr	r1, [sp, #28]
 800a452:	463a      	mov	r2, r7
 800a454:	4620      	mov	r0, r4
 800a456:	f002 fa61 	bl	800c91c <__lshift>
 800a45a:	9007      	str	r0, [sp, #28]
 800a45c:	2800      	cmp	r0, #0
 800a45e:	f43f ae83 	beq.w	800a168 <_strtod_l+0x498>
 800a462:	f1b9 0f00 	cmp.w	r9, #0
 800a466:	dd08      	ble.n	800a47a <_strtod_l+0x7aa>
 800a468:	4631      	mov	r1, r6
 800a46a:	464a      	mov	r2, r9
 800a46c:	4620      	mov	r0, r4
 800a46e:	f002 fa55 	bl	800c91c <__lshift>
 800a472:	4606      	mov	r6, r0
 800a474:	2800      	cmp	r0, #0
 800a476:	f43f ae77 	beq.w	800a168 <_strtod_l+0x498>
 800a47a:	9a07      	ldr	r2, [sp, #28]
 800a47c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a47e:	4620      	mov	r0, r4
 800a480:	f002 fad4 	bl	800ca2c <__mdiff>
 800a484:	4605      	mov	r5, r0
 800a486:	2800      	cmp	r0, #0
 800a488:	f43f ae6e 	beq.w	800a168 <_strtod_l+0x498>
 800a48c:	68c3      	ldr	r3, [r0, #12]
 800a48e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a490:	2300      	movs	r3, #0
 800a492:	60c3      	str	r3, [r0, #12]
 800a494:	4631      	mov	r1, r6
 800a496:	f002 faad 	bl	800c9f4 <__mcmp>
 800a49a:	2800      	cmp	r0, #0
 800a49c:	da65      	bge.n	800a56a <_strtod_l+0x89a>
 800a49e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a4a0:	ea53 030a 	orrs.w	r3, r3, sl
 800a4a4:	f040 8087 	bne.w	800a5b6 <_strtod_l+0x8e6>
 800a4a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	f040 8082 	bne.w	800a5b6 <_strtod_l+0x8e6>
 800a4b2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a4b6:	0d1b      	lsrs	r3, r3, #20
 800a4b8:	051b      	lsls	r3, r3, #20
 800a4ba:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a4be:	d97a      	bls.n	800a5b6 <_strtod_l+0x8e6>
 800a4c0:	696b      	ldr	r3, [r5, #20]
 800a4c2:	b913      	cbnz	r3, 800a4ca <_strtod_l+0x7fa>
 800a4c4:	692b      	ldr	r3, [r5, #16]
 800a4c6:	2b01      	cmp	r3, #1
 800a4c8:	dd75      	ble.n	800a5b6 <_strtod_l+0x8e6>
 800a4ca:	4629      	mov	r1, r5
 800a4cc:	2201      	movs	r2, #1
 800a4ce:	4620      	mov	r0, r4
 800a4d0:	f002 fa24 	bl	800c91c <__lshift>
 800a4d4:	4631      	mov	r1, r6
 800a4d6:	4605      	mov	r5, r0
 800a4d8:	f002 fa8c 	bl	800c9f4 <__mcmp>
 800a4dc:	2800      	cmp	r0, #0
 800a4de:	dd6a      	ble.n	800a5b6 <_strtod_l+0x8e6>
 800a4e0:	9904      	ldr	r1, [sp, #16]
 800a4e2:	4a55      	ldr	r2, [pc, #340]	; (800a638 <_strtod_l+0x968>)
 800a4e4:	465b      	mov	r3, fp
 800a4e6:	2900      	cmp	r1, #0
 800a4e8:	f000 8085 	beq.w	800a5f6 <_strtod_l+0x926>
 800a4ec:	ea02 010b 	and.w	r1, r2, fp
 800a4f0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a4f4:	dc7f      	bgt.n	800a5f6 <_strtod_l+0x926>
 800a4f6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a4fa:	f77f aeaa 	ble.w	800a252 <_strtod_l+0x582>
 800a4fe:	4a4f      	ldr	r2, [pc, #316]	; (800a63c <_strtod_l+0x96c>)
 800a500:	2300      	movs	r3, #0
 800a502:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800a506:	4650      	mov	r0, sl
 800a508:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800a50c:	4659      	mov	r1, fp
 800a50e:	f7f6 f873 	bl	80005f8 <__aeabi_dmul>
 800a512:	460b      	mov	r3, r1
 800a514:	4303      	orrs	r3, r0
 800a516:	bf08      	it	eq
 800a518:	2322      	moveq	r3, #34	; 0x22
 800a51a:	4682      	mov	sl, r0
 800a51c:	468b      	mov	fp, r1
 800a51e:	bf08      	it	eq
 800a520:	6023      	streq	r3, [r4, #0]
 800a522:	e62b      	b.n	800a17c <_strtod_l+0x4ac>
 800a524:	f04f 32ff 	mov.w	r2, #4294967295
 800a528:	fa02 f303 	lsl.w	r3, r2, r3
 800a52c:	ea03 0a0a 	and.w	sl, r3, sl
 800a530:	e6de      	b.n	800a2f0 <_strtod_l+0x620>
 800a532:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800a536:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800a53a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800a53e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800a542:	fa01 f308 	lsl.w	r3, r1, r8
 800a546:	930c      	str	r3, [sp, #48]	; 0x30
 800a548:	9111      	str	r1, [sp, #68]	; 0x44
 800a54a:	e741      	b.n	800a3d0 <_strtod_l+0x700>
 800a54c:	2300      	movs	r3, #0
 800a54e:	930c      	str	r3, [sp, #48]	; 0x30
 800a550:	2301      	movs	r3, #1
 800a552:	9311      	str	r3, [sp, #68]	; 0x44
 800a554:	e73c      	b.n	800a3d0 <_strtod_l+0x700>
 800a556:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a558:	4642      	mov	r2, r8
 800a55a:	4620      	mov	r0, r4
 800a55c:	f002 f9de 	bl	800c91c <__lshift>
 800a560:	901e      	str	r0, [sp, #120]	; 0x78
 800a562:	2800      	cmp	r0, #0
 800a564:	f47f af66 	bne.w	800a434 <_strtod_l+0x764>
 800a568:	e5fe      	b.n	800a168 <_strtod_l+0x498>
 800a56a:	465f      	mov	r7, fp
 800a56c:	d16e      	bne.n	800a64c <_strtod_l+0x97c>
 800a56e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a570:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a574:	b342      	cbz	r2, 800a5c8 <_strtod_l+0x8f8>
 800a576:	4a32      	ldr	r2, [pc, #200]	; (800a640 <_strtod_l+0x970>)
 800a578:	4293      	cmp	r3, r2
 800a57a:	d128      	bne.n	800a5ce <_strtod_l+0x8fe>
 800a57c:	9b04      	ldr	r3, [sp, #16]
 800a57e:	4650      	mov	r0, sl
 800a580:	b1eb      	cbz	r3, 800a5be <_strtod_l+0x8ee>
 800a582:	4a2d      	ldr	r2, [pc, #180]	; (800a638 <_strtod_l+0x968>)
 800a584:	403a      	ands	r2, r7
 800a586:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800a58a:	f04f 31ff 	mov.w	r1, #4294967295
 800a58e:	d819      	bhi.n	800a5c4 <_strtod_l+0x8f4>
 800a590:	0d12      	lsrs	r2, r2, #20
 800a592:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a596:	fa01 f303 	lsl.w	r3, r1, r3
 800a59a:	4298      	cmp	r0, r3
 800a59c:	d117      	bne.n	800a5ce <_strtod_l+0x8fe>
 800a59e:	4b29      	ldr	r3, [pc, #164]	; (800a644 <_strtod_l+0x974>)
 800a5a0:	429f      	cmp	r7, r3
 800a5a2:	d102      	bne.n	800a5aa <_strtod_l+0x8da>
 800a5a4:	3001      	adds	r0, #1
 800a5a6:	f43f addf 	beq.w	800a168 <_strtod_l+0x498>
 800a5aa:	4b23      	ldr	r3, [pc, #140]	; (800a638 <_strtod_l+0x968>)
 800a5ac:	403b      	ands	r3, r7
 800a5ae:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800a5b2:	f04f 0a00 	mov.w	sl, #0
 800a5b6:	9b04      	ldr	r3, [sp, #16]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d1a0      	bne.n	800a4fe <_strtod_l+0x82e>
 800a5bc:	e5de      	b.n	800a17c <_strtod_l+0x4ac>
 800a5be:	f04f 33ff 	mov.w	r3, #4294967295
 800a5c2:	e7ea      	b.n	800a59a <_strtod_l+0x8ca>
 800a5c4:	460b      	mov	r3, r1
 800a5c6:	e7e8      	b.n	800a59a <_strtod_l+0x8ca>
 800a5c8:	ea53 030a 	orrs.w	r3, r3, sl
 800a5cc:	d088      	beq.n	800a4e0 <_strtod_l+0x810>
 800a5ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a5d0:	b1db      	cbz	r3, 800a60a <_strtod_l+0x93a>
 800a5d2:	423b      	tst	r3, r7
 800a5d4:	d0ef      	beq.n	800a5b6 <_strtod_l+0x8e6>
 800a5d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a5d8:	9a04      	ldr	r2, [sp, #16]
 800a5da:	4650      	mov	r0, sl
 800a5dc:	4659      	mov	r1, fp
 800a5de:	b1c3      	cbz	r3, 800a612 <_strtod_l+0x942>
 800a5e0:	f7ff fb5a 	bl	8009c98 <sulp>
 800a5e4:	4602      	mov	r2, r0
 800a5e6:	460b      	mov	r3, r1
 800a5e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a5ec:	f7f5 fe4e 	bl	800028c <__adddf3>
 800a5f0:	4682      	mov	sl, r0
 800a5f2:	468b      	mov	fp, r1
 800a5f4:	e7df      	b.n	800a5b6 <_strtod_l+0x8e6>
 800a5f6:	4013      	ands	r3, r2
 800a5f8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a5fc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a600:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a604:	f04f 3aff 	mov.w	sl, #4294967295
 800a608:	e7d5      	b.n	800a5b6 <_strtod_l+0x8e6>
 800a60a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a60c:	ea13 0f0a 	tst.w	r3, sl
 800a610:	e7e0      	b.n	800a5d4 <_strtod_l+0x904>
 800a612:	f7ff fb41 	bl	8009c98 <sulp>
 800a616:	4602      	mov	r2, r0
 800a618:	460b      	mov	r3, r1
 800a61a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a61e:	f7f5 fe33 	bl	8000288 <__aeabi_dsub>
 800a622:	2200      	movs	r2, #0
 800a624:	2300      	movs	r3, #0
 800a626:	4682      	mov	sl, r0
 800a628:	468b      	mov	fp, r1
 800a62a:	f7f6 fa4d 	bl	8000ac8 <__aeabi_dcmpeq>
 800a62e:	2800      	cmp	r0, #0
 800a630:	d0c1      	beq.n	800a5b6 <_strtod_l+0x8e6>
 800a632:	e60e      	b.n	800a252 <_strtod_l+0x582>
 800a634:	fffffc02 	.word	0xfffffc02
 800a638:	7ff00000 	.word	0x7ff00000
 800a63c:	39500000 	.word	0x39500000
 800a640:	000fffff 	.word	0x000fffff
 800a644:	7fefffff 	.word	0x7fefffff
 800a648:	0800e968 	.word	0x0800e968
 800a64c:	4631      	mov	r1, r6
 800a64e:	4628      	mov	r0, r5
 800a650:	f002 fb4c 	bl	800ccec <__ratio>
 800a654:	ec59 8b10 	vmov	r8, r9, d0
 800a658:	ee10 0a10 	vmov	r0, s0
 800a65c:	2200      	movs	r2, #0
 800a65e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a662:	4649      	mov	r1, r9
 800a664:	f7f6 fa44 	bl	8000af0 <__aeabi_dcmple>
 800a668:	2800      	cmp	r0, #0
 800a66a:	d07c      	beq.n	800a766 <_strtod_l+0xa96>
 800a66c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d04c      	beq.n	800a70c <_strtod_l+0xa3c>
 800a672:	4b95      	ldr	r3, [pc, #596]	; (800a8c8 <_strtod_l+0xbf8>)
 800a674:	2200      	movs	r2, #0
 800a676:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800a67a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800a8c8 <_strtod_l+0xbf8>
 800a67e:	f04f 0800 	mov.w	r8, #0
 800a682:	4b92      	ldr	r3, [pc, #584]	; (800a8cc <_strtod_l+0xbfc>)
 800a684:	403b      	ands	r3, r7
 800a686:	9311      	str	r3, [sp, #68]	; 0x44
 800a688:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a68a:	4b91      	ldr	r3, [pc, #580]	; (800a8d0 <_strtod_l+0xc00>)
 800a68c:	429a      	cmp	r2, r3
 800a68e:	f040 80b2 	bne.w	800a7f6 <_strtod_l+0xb26>
 800a692:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a696:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a69a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800a69e:	ec4b ab10 	vmov	d0, sl, fp
 800a6a2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800a6a6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a6aa:	f002 fa47 	bl	800cb3c <__ulp>
 800a6ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a6b2:	ec53 2b10 	vmov	r2, r3, d0
 800a6b6:	f7f5 ff9f 	bl	80005f8 <__aeabi_dmul>
 800a6ba:	4652      	mov	r2, sl
 800a6bc:	465b      	mov	r3, fp
 800a6be:	f7f5 fde5 	bl	800028c <__adddf3>
 800a6c2:	460b      	mov	r3, r1
 800a6c4:	4981      	ldr	r1, [pc, #516]	; (800a8cc <_strtod_l+0xbfc>)
 800a6c6:	4a83      	ldr	r2, [pc, #524]	; (800a8d4 <_strtod_l+0xc04>)
 800a6c8:	4019      	ands	r1, r3
 800a6ca:	4291      	cmp	r1, r2
 800a6cc:	4682      	mov	sl, r0
 800a6ce:	d95e      	bls.n	800a78e <_strtod_l+0xabe>
 800a6d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a6d2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a6d6:	4293      	cmp	r3, r2
 800a6d8:	d103      	bne.n	800a6e2 <_strtod_l+0xa12>
 800a6da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6dc:	3301      	adds	r3, #1
 800a6de:	f43f ad43 	beq.w	800a168 <_strtod_l+0x498>
 800a6e2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800a8e0 <_strtod_l+0xc10>
 800a6e6:	f04f 3aff 	mov.w	sl, #4294967295
 800a6ea:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a6ec:	4620      	mov	r0, r4
 800a6ee:	f001 fef9 	bl	800c4e4 <_Bfree>
 800a6f2:	9907      	ldr	r1, [sp, #28]
 800a6f4:	4620      	mov	r0, r4
 800a6f6:	f001 fef5 	bl	800c4e4 <_Bfree>
 800a6fa:	4631      	mov	r1, r6
 800a6fc:	4620      	mov	r0, r4
 800a6fe:	f001 fef1 	bl	800c4e4 <_Bfree>
 800a702:	4629      	mov	r1, r5
 800a704:	4620      	mov	r0, r4
 800a706:	f001 feed 	bl	800c4e4 <_Bfree>
 800a70a:	e613      	b.n	800a334 <_strtod_l+0x664>
 800a70c:	f1ba 0f00 	cmp.w	sl, #0
 800a710:	d11b      	bne.n	800a74a <_strtod_l+0xa7a>
 800a712:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a716:	b9f3      	cbnz	r3, 800a756 <_strtod_l+0xa86>
 800a718:	4b6b      	ldr	r3, [pc, #428]	; (800a8c8 <_strtod_l+0xbf8>)
 800a71a:	2200      	movs	r2, #0
 800a71c:	4640      	mov	r0, r8
 800a71e:	4649      	mov	r1, r9
 800a720:	f7f6 f9dc 	bl	8000adc <__aeabi_dcmplt>
 800a724:	b9d0      	cbnz	r0, 800a75c <_strtod_l+0xa8c>
 800a726:	4640      	mov	r0, r8
 800a728:	4649      	mov	r1, r9
 800a72a:	4b6b      	ldr	r3, [pc, #428]	; (800a8d8 <_strtod_l+0xc08>)
 800a72c:	2200      	movs	r2, #0
 800a72e:	f7f5 ff63 	bl	80005f8 <__aeabi_dmul>
 800a732:	4680      	mov	r8, r0
 800a734:	4689      	mov	r9, r1
 800a736:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a73a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800a73e:	931b      	str	r3, [sp, #108]	; 0x6c
 800a740:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800a744:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800a748:	e79b      	b.n	800a682 <_strtod_l+0x9b2>
 800a74a:	f1ba 0f01 	cmp.w	sl, #1
 800a74e:	d102      	bne.n	800a756 <_strtod_l+0xa86>
 800a750:	2f00      	cmp	r7, #0
 800a752:	f43f ad7e 	beq.w	800a252 <_strtod_l+0x582>
 800a756:	4b61      	ldr	r3, [pc, #388]	; (800a8dc <_strtod_l+0xc0c>)
 800a758:	2200      	movs	r2, #0
 800a75a:	e78c      	b.n	800a676 <_strtod_l+0x9a6>
 800a75c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800a8d8 <_strtod_l+0xc08>
 800a760:	f04f 0800 	mov.w	r8, #0
 800a764:	e7e7      	b.n	800a736 <_strtod_l+0xa66>
 800a766:	4b5c      	ldr	r3, [pc, #368]	; (800a8d8 <_strtod_l+0xc08>)
 800a768:	4640      	mov	r0, r8
 800a76a:	4649      	mov	r1, r9
 800a76c:	2200      	movs	r2, #0
 800a76e:	f7f5 ff43 	bl	80005f8 <__aeabi_dmul>
 800a772:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a774:	4680      	mov	r8, r0
 800a776:	4689      	mov	r9, r1
 800a778:	b933      	cbnz	r3, 800a788 <_strtod_l+0xab8>
 800a77a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a77e:	9012      	str	r0, [sp, #72]	; 0x48
 800a780:	9313      	str	r3, [sp, #76]	; 0x4c
 800a782:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800a786:	e7dd      	b.n	800a744 <_strtod_l+0xa74>
 800a788:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800a78c:	e7f9      	b.n	800a782 <_strtod_l+0xab2>
 800a78e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800a792:	9b04      	ldr	r3, [sp, #16]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d1a8      	bne.n	800a6ea <_strtod_l+0xa1a>
 800a798:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a79c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a79e:	0d1b      	lsrs	r3, r3, #20
 800a7a0:	051b      	lsls	r3, r3, #20
 800a7a2:	429a      	cmp	r2, r3
 800a7a4:	d1a1      	bne.n	800a6ea <_strtod_l+0xa1a>
 800a7a6:	4640      	mov	r0, r8
 800a7a8:	4649      	mov	r1, r9
 800a7aa:	f7f6 fa85 	bl	8000cb8 <__aeabi_d2lz>
 800a7ae:	f7f5 fef5 	bl	800059c <__aeabi_l2d>
 800a7b2:	4602      	mov	r2, r0
 800a7b4:	460b      	mov	r3, r1
 800a7b6:	4640      	mov	r0, r8
 800a7b8:	4649      	mov	r1, r9
 800a7ba:	f7f5 fd65 	bl	8000288 <__aeabi_dsub>
 800a7be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a7c0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a7c4:	ea43 030a 	orr.w	r3, r3, sl
 800a7c8:	4313      	orrs	r3, r2
 800a7ca:	4680      	mov	r8, r0
 800a7cc:	4689      	mov	r9, r1
 800a7ce:	d053      	beq.n	800a878 <_strtod_l+0xba8>
 800a7d0:	a335      	add	r3, pc, #212	; (adr r3, 800a8a8 <_strtod_l+0xbd8>)
 800a7d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7d6:	f7f6 f981 	bl	8000adc <__aeabi_dcmplt>
 800a7da:	2800      	cmp	r0, #0
 800a7dc:	f47f acce 	bne.w	800a17c <_strtod_l+0x4ac>
 800a7e0:	a333      	add	r3, pc, #204	; (adr r3, 800a8b0 <_strtod_l+0xbe0>)
 800a7e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7e6:	4640      	mov	r0, r8
 800a7e8:	4649      	mov	r1, r9
 800a7ea:	f7f6 f995 	bl	8000b18 <__aeabi_dcmpgt>
 800a7ee:	2800      	cmp	r0, #0
 800a7f0:	f43f af7b 	beq.w	800a6ea <_strtod_l+0xa1a>
 800a7f4:	e4c2      	b.n	800a17c <_strtod_l+0x4ac>
 800a7f6:	9b04      	ldr	r3, [sp, #16]
 800a7f8:	b333      	cbz	r3, 800a848 <_strtod_l+0xb78>
 800a7fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a7fc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a800:	d822      	bhi.n	800a848 <_strtod_l+0xb78>
 800a802:	a32d      	add	r3, pc, #180	; (adr r3, 800a8b8 <_strtod_l+0xbe8>)
 800a804:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a808:	4640      	mov	r0, r8
 800a80a:	4649      	mov	r1, r9
 800a80c:	f7f6 f970 	bl	8000af0 <__aeabi_dcmple>
 800a810:	b1a0      	cbz	r0, 800a83c <_strtod_l+0xb6c>
 800a812:	4649      	mov	r1, r9
 800a814:	4640      	mov	r0, r8
 800a816:	f7f6 f9c7 	bl	8000ba8 <__aeabi_d2uiz>
 800a81a:	2801      	cmp	r0, #1
 800a81c:	bf38      	it	cc
 800a81e:	2001      	movcc	r0, #1
 800a820:	f7f5 fe70 	bl	8000504 <__aeabi_ui2d>
 800a824:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a826:	4680      	mov	r8, r0
 800a828:	4689      	mov	r9, r1
 800a82a:	bb13      	cbnz	r3, 800a872 <_strtod_l+0xba2>
 800a82c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a830:	9014      	str	r0, [sp, #80]	; 0x50
 800a832:	9315      	str	r3, [sp, #84]	; 0x54
 800a834:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a838:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800a83c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a83e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a840:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a844:	1a9b      	subs	r3, r3, r2
 800a846:	930d      	str	r3, [sp, #52]	; 0x34
 800a848:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a84c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a850:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a854:	f002 f972 	bl	800cb3c <__ulp>
 800a858:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a85c:	ec53 2b10 	vmov	r2, r3, d0
 800a860:	f7f5 feca 	bl	80005f8 <__aeabi_dmul>
 800a864:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a868:	f7f5 fd10 	bl	800028c <__adddf3>
 800a86c:	4682      	mov	sl, r0
 800a86e:	468b      	mov	fp, r1
 800a870:	e78f      	b.n	800a792 <_strtod_l+0xac2>
 800a872:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800a876:	e7dd      	b.n	800a834 <_strtod_l+0xb64>
 800a878:	a311      	add	r3, pc, #68	; (adr r3, 800a8c0 <_strtod_l+0xbf0>)
 800a87a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a87e:	f7f6 f92d 	bl	8000adc <__aeabi_dcmplt>
 800a882:	e7b4      	b.n	800a7ee <_strtod_l+0xb1e>
 800a884:	2300      	movs	r3, #0
 800a886:	930e      	str	r3, [sp, #56]	; 0x38
 800a888:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a88a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a88c:	6013      	str	r3, [r2, #0]
 800a88e:	f7ff ba65 	b.w	8009d5c <_strtod_l+0x8c>
 800a892:	2b65      	cmp	r3, #101	; 0x65
 800a894:	f43f ab5d 	beq.w	8009f52 <_strtod_l+0x282>
 800a898:	2b45      	cmp	r3, #69	; 0x45
 800a89a:	f43f ab5a 	beq.w	8009f52 <_strtod_l+0x282>
 800a89e:	2201      	movs	r2, #1
 800a8a0:	f7ff bb92 	b.w	8009fc8 <_strtod_l+0x2f8>
 800a8a4:	f3af 8000 	nop.w
 800a8a8:	94a03595 	.word	0x94a03595
 800a8ac:	3fdfffff 	.word	0x3fdfffff
 800a8b0:	35afe535 	.word	0x35afe535
 800a8b4:	3fe00000 	.word	0x3fe00000
 800a8b8:	ffc00000 	.word	0xffc00000
 800a8bc:	41dfffff 	.word	0x41dfffff
 800a8c0:	94a03595 	.word	0x94a03595
 800a8c4:	3fcfffff 	.word	0x3fcfffff
 800a8c8:	3ff00000 	.word	0x3ff00000
 800a8cc:	7ff00000 	.word	0x7ff00000
 800a8d0:	7fe00000 	.word	0x7fe00000
 800a8d4:	7c9fffff 	.word	0x7c9fffff
 800a8d8:	3fe00000 	.word	0x3fe00000
 800a8dc:	bff00000 	.word	0xbff00000
 800a8e0:	7fefffff 	.word	0x7fefffff

0800a8e4 <_strtod_r>:
 800a8e4:	4b01      	ldr	r3, [pc, #4]	; (800a8ec <_strtod_r+0x8>)
 800a8e6:	f7ff b9f3 	b.w	8009cd0 <_strtod_l>
 800a8ea:	bf00      	nop
 800a8ec:	20000080 	.word	0x20000080

0800a8f0 <strtod>:
 800a8f0:	460a      	mov	r2, r1
 800a8f2:	4601      	mov	r1, r0
 800a8f4:	4802      	ldr	r0, [pc, #8]	; (800a900 <strtod+0x10>)
 800a8f6:	4b03      	ldr	r3, [pc, #12]	; (800a904 <strtod+0x14>)
 800a8f8:	6800      	ldr	r0, [r0, #0]
 800a8fa:	f7ff b9e9 	b.w	8009cd0 <_strtod_l>
 800a8fe:	bf00      	nop
 800a900:	20000018 	.word	0x20000018
 800a904:	20000080 	.word	0x20000080

0800a908 <_strtol_l.isra.0>:
 800a908:	2b01      	cmp	r3, #1
 800a90a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a90e:	d001      	beq.n	800a914 <_strtol_l.isra.0+0xc>
 800a910:	2b24      	cmp	r3, #36	; 0x24
 800a912:	d906      	bls.n	800a922 <_strtol_l.isra.0+0x1a>
 800a914:	f7fe f834 	bl	8008980 <__errno>
 800a918:	2316      	movs	r3, #22
 800a91a:	6003      	str	r3, [r0, #0]
 800a91c:	2000      	movs	r0, #0
 800a91e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a922:	4f3a      	ldr	r7, [pc, #232]	; (800aa0c <_strtol_l.isra.0+0x104>)
 800a924:	468e      	mov	lr, r1
 800a926:	4676      	mov	r6, lr
 800a928:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800a92c:	5de5      	ldrb	r5, [r4, r7]
 800a92e:	f015 0508 	ands.w	r5, r5, #8
 800a932:	d1f8      	bne.n	800a926 <_strtol_l.isra.0+0x1e>
 800a934:	2c2d      	cmp	r4, #45	; 0x2d
 800a936:	d134      	bne.n	800a9a2 <_strtol_l.isra.0+0x9a>
 800a938:	f89e 4000 	ldrb.w	r4, [lr]
 800a93c:	f04f 0801 	mov.w	r8, #1
 800a940:	f106 0e02 	add.w	lr, r6, #2
 800a944:	2b00      	cmp	r3, #0
 800a946:	d05c      	beq.n	800aa02 <_strtol_l.isra.0+0xfa>
 800a948:	2b10      	cmp	r3, #16
 800a94a:	d10c      	bne.n	800a966 <_strtol_l.isra.0+0x5e>
 800a94c:	2c30      	cmp	r4, #48	; 0x30
 800a94e:	d10a      	bne.n	800a966 <_strtol_l.isra.0+0x5e>
 800a950:	f89e 4000 	ldrb.w	r4, [lr]
 800a954:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a958:	2c58      	cmp	r4, #88	; 0x58
 800a95a:	d14d      	bne.n	800a9f8 <_strtol_l.isra.0+0xf0>
 800a95c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800a960:	2310      	movs	r3, #16
 800a962:	f10e 0e02 	add.w	lr, lr, #2
 800a966:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800a96a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a96e:	2600      	movs	r6, #0
 800a970:	fbbc f9f3 	udiv	r9, ip, r3
 800a974:	4635      	mov	r5, r6
 800a976:	fb03 ca19 	mls	sl, r3, r9, ip
 800a97a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800a97e:	2f09      	cmp	r7, #9
 800a980:	d818      	bhi.n	800a9b4 <_strtol_l.isra.0+0xac>
 800a982:	463c      	mov	r4, r7
 800a984:	42a3      	cmp	r3, r4
 800a986:	dd24      	ble.n	800a9d2 <_strtol_l.isra.0+0xca>
 800a988:	2e00      	cmp	r6, #0
 800a98a:	db1f      	blt.n	800a9cc <_strtol_l.isra.0+0xc4>
 800a98c:	45a9      	cmp	r9, r5
 800a98e:	d31d      	bcc.n	800a9cc <_strtol_l.isra.0+0xc4>
 800a990:	d101      	bne.n	800a996 <_strtol_l.isra.0+0x8e>
 800a992:	45a2      	cmp	sl, r4
 800a994:	db1a      	blt.n	800a9cc <_strtol_l.isra.0+0xc4>
 800a996:	fb05 4503 	mla	r5, r5, r3, r4
 800a99a:	2601      	movs	r6, #1
 800a99c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800a9a0:	e7eb      	b.n	800a97a <_strtol_l.isra.0+0x72>
 800a9a2:	2c2b      	cmp	r4, #43	; 0x2b
 800a9a4:	bf08      	it	eq
 800a9a6:	f89e 4000 	ldrbeq.w	r4, [lr]
 800a9aa:	46a8      	mov	r8, r5
 800a9ac:	bf08      	it	eq
 800a9ae:	f106 0e02 	addeq.w	lr, r6, #2
 800a9b2:	e7c7      	b.n	800a944 <_strtol_l.isra.0+0x3c>
 800a9b4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800a9b8:	2f19      	cmp	r7, #25
 800a9ba:	d801      	bhi.n	800a9c0 <_strtol_l.isra.0+0xb8>
 800a9bc:	3c37      	subs	r4, #55	; 0x37
 800a9be:	e7e1      	b.n	800a984 <_strtol_l.isra.0+0x7c>
 800a9c0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800a9c4:	2f19      	cmp	r7, #25
 800a9c6:	d804      	bhi.n	800a9d2 <_strtol_l.isra.0+0xca>
 800a9c8:	3c57      	subs	r4, #87	; 0x57
 800a9ca:	e7db      	b.n	800a984 <_strtol_l.isra.0+0x7c>
 800a9cc:	f04f 36ff 	mov.w	r6, #4294967295
 800a9d0:	e7e4      	b.n	800a99c <_strtol_l.isra.0+0x94>
 800a9d2:	2e00      	cmp	r6, #0
 800a9d4:	da05      	bge.n	800a9e2 <_strtol_l.isra.0+0xda>
 800a9d6:	2322      	movs	r3, #34	; 0x22
 800a9d8:	6003      	str	r3, [r0, #0]
 800a9da:	4665      	mov	r5, ip
 800a9dc:	b942      	cbnz	r2, 800a9f0 <_strtol_l.isra.0+0xe8>
 800a9de:	4628      	mov	r0, r5
 800a9e0:	e79d      	b.n	800a91e <_strtol_l.isra.0+0x16>
 800a9e2:	f1b8 0f00 	cmp.w	r8, #0
 800a9e6:	d000      	beq.n	800a9ea <_strtol_l.isra.0+0xe2>
 800a9e8:	426d      	negs	r5, r5
 800a9ea:	2a00      	cmp	r2, #0
 800a9ec:	d0f7      	beq.n	800a9de <_strtol_l.isra.0+0xd6>
 800a9ee:	b10e      	cbz	r6, 800a9f4 <_strtol_l.isra.0+0xec>
 800a9f0:	f10e 31ff 	add.w	r1, lr, #4294967295
 800a9f4:	6011      	str	r1, [r2, #0]
 800a9f6:	e7f2      	b.n	800a9de <_strtol_l.isra.0+0xd6>
 800a9f8:	2430      	movs	r4, #48	; 0x30
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d1b3      	bne.n	800a966 <_strtol_l.isra.0+0x5e>
 800a9fe:	2308      	movs	r3, #8
 800aa00:	e7b1      	b.n	800a966 <_strtol_l.isra.0+0x5e>
 800aa02:	2c30      	cmp	r4, #48	; 0x30
 800aa04:	d0a4      	beq.n	800a950 <_strtol_l.isra.0+0x48>
 800aa06:	230a      	movs	r3, #10
 800aa08:	e7ad      	b.n	800a966 <_strtol_l.isra.0+0x5e>
 800aa0a:	bf00      	nop
 800aa0c:	0800e991 	.word	0x0800e991

0800aa10 <_strtol_r>:
 800aa10:	f7ff bf7a 	b.w	800a908 <_strtol_l.isra.0>

0800aa14 <strtol>:
 800aa14:	4613      	mov	r3, r2
 800aa16:	460a      	mov	r2, r1
 800aa18:	4601      	mov	r1, r0
 800aa1a:	4802      	ldr	r0, [pc, #8]	; (800aa24 <strtol+0x10>)
 800aa1c:	6800      	ldr	r0, [r0, #0]
 800aa1e:	f7ff bf73 	b.w	800a908 <_strtol_l.isra.0>
 800aa22:	bf00      	nop
 800aa24:	20000018 	.word	0x20000018

0800aa28 <__swbuf_r>:
 800aa28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa2a:	460e      	mov	r6, r1
 800aa2c:	4614      	mov	r4, r2
 800aa2e:	4605      	mov	r5, r0
 800aa30:	b118      	cbz	r0, 800aa3a <__swbuf_r+0x12>
 800aa32:	6983      	ldr	r3, [r0, #24]
 800aa34:	b90b      	cbnz	r3, 800aa3a <__swbuf_r+0x12>
 800aa36:	f001 f86d 	bl	800bb14 <__sinit>
 800aa3a:	4b21      	ldr	r3, [pc, #132]	; (800aac0 <__swbuf_r+0x98>)
 800aa3c:	429c      	cmp	r4, r3
 800aa3e:	d12b      	bne.n	800aa98 <__swbuf_r+0x70>
 800aa40:	686c      	ldr	r4, [r5, #4]
 800aa42:	69a3      	ldr	r3, [r4, #24]
 800aa44:	60a3      	str	r3, [r4, #8]
 800aa46:	89a3      	ldrh	r3, [r4, #12]
 800aa48:	071a      	lsls	r2, r3, #28
 800aa4a:	d52f      	bpl.n	800aaac <__swbuf_r+0x84>
 800aa4c:	6923      	ldr	r3, [r4, #16]
 800aa4e:	b36b      	cbz	r3, 800aaac <__swbuf_r+0x84>
 800aa50:	6923      	ldr	r3, [r4, #16]
 800aa52:	6820      	ldr	r0, [r4, #0]
 800aa54:	1ac0      	subs	r0, r0, r3
 800aa56:	6963      	ldr	r3, [r4, #20]
 800aa58:	b2f6      	uxtb	r6, r6
 800aa5a:	4283      	cmp	r3, r0
 800aa5c:	4637      	mov	r7, r6
 800aa5e:	dc04      	bgt.n	800aa6a <__swbuf_r+0x42>
 800aa60:	4621      	mov	r1, r4
 800aa62:	4628      	mov	r0, r5
 800aa64:	f000 ffc2 	bl	800b9ec <_fflush_r>
 800aa68:	bb30      	cbnz	r0, 800aab8 <__swbuf_r+0x90>
 800aa6a:	68a3      	ldr	r3, [r4, #8]
 800aa6c:	3b01      	subs	r3, #1
 800aa6e:	60a3      	str	r3, [r4, #8]
 800aa70:	6823      	ldr	r3, [r4, #0]
 800aa72:	1c5a      	adds	r2, r3, #1
 800aa74:	6022      	str	r2, [r4, #0]
 800aa76:	701e      	strb	r6, [r3, #0]
 800aa78:	6963      	ldr	r3, [r4, #20]
 800aa7a:	3001      	adds	r0, #1
 800aa7c:	4283      	cmp	r3, r0
 800aa7e:	d004      	beq.n	800aa8a <__swbuf_r+0x62>
 800aa80:	89a3      	ldrh	r3, [r4, #12]
 800aa82:	07db      	lsls	r3, r3, #31
 800aa84:	d506      	bpl.n	800aa94 <__swbuf_r+0x6c>
 800aa86:	2e0a      	cmp	r6, #10
 800aa88:	d104      	bne.n	800aa94 <__swbuf_r+0x6c>
 800aa8a:	4621      	mov	r1, r4
 800aa8c:	4628      	mov	r0, r5
 800aa8e:	f000 ffad 	bl	800b9ec <_fflush_r>
 800aa92:	b988      	cbnz	r0, 800aab8 <__swbuf_r+0x90>
 800aa94:	4638      	mov	r0, r7
 800aa96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa98:	4b0a      	ldr	r3, [pc, #40]	; (800aac4 <__swbuf_r+0x9c>)
 800aa9a:	429c      	cmp	r4, r3
 800aa9c:	d101      	bne.n	800aaa2 <__swbuf_r+0x7a>
 800aa9e:	68ac      	ldr	r4, [r5, #8]
 800aaa0:	e7cf      	b.n	800aa42 <__swbuf_r+0x1a>
 800aaa2:	4b09      	ldr	r3, [pc, #36]	; (800aac8 <__swbuf_r+0xa0>)
 800aaa4:	429c      	cmp	r4, r3
 800aaa6:	bf08      	it	eq
 800aaa8:	68ec      	ldreq	r4, [r5, #12]
 800aaaa:	e7ca      	b.n	800aa42 <__swbuf_r+0x1a>
 800aaac:	4621      	mov	r1, r4
 800aaae:	4628      	mov	r0, r5
 800aab0:	f000 f81e 	bl	800aaf0 <__swsetup_r>
 800aab4:	2800      	cmp	r0, #0
 800aab6:	d0cb      	beq.n	800aa50 <__swbuf_r+0x28>
 800aab8:	f04f 37ff 	mov.w	r7, #4294967295
 800aabc:	e7ea      	b.n	800aa94 <__swbuf_r+0x6c>
 800aabe:	bf00      	nop
 800aac0:	0800eb48 	.word	0x0800eb48
 800aac4:	0800eb68 	.word	0x0800eb68
 800aac8:	0800eb28 	.word	0x0800eb28

0800aacc <_write_r>:
 800aacc:	b538      	push	{r3, r4, r5, lr}
 800aace:	4d07      	ldr	r5, [pc, #28]	; (800aaec <_write_r+0x20>)
 800aad0:	4604      	mov	r4, r0
 800aad2:	4608      	mov	r0, r1
 800aad4:	4611      	mov	r1, r2
 800aad6:	2200      	movs	r2, #0
 800aad8:	602a      	str	r2, [r5, #0]
 800aada:	461a      	mov	r2, r3
 800aadc:	f7f8 fd90 	bl	8003600 <_write>
 800aae0:	1c43      	adds	r3, r0, #1
 800aae2:	d102      	bne.n	800aaea <_write_r+0x1e>
 800aae4:	682b      	ldr	r3, [r5, #0]
 800aae6:	b103      	cbz	r3, 800aaea <_write_r+0x1e>
 800aae8:	6023      	str	r3, [r4, #0]
 800aaea:	bd38      	pop	{r3, r4, r5, pc}
 800aaec:	200038f4 	.word	0x200038f4

0800aaf0 <__swsetup_r>:
 800aaf0:	4b32      	ldr	r3, [pc, #200]	; (800abbc <__swsetup_r+0xcc>)
 800aaf2:	b570      	push	{r4, r5, r6, lr}
 800aaf4:	681d      	ldr	r5, [r3, #0]
 800aaf6:	4606      	mov	r6, r0
 800aaf8:	460c      	mov	r4, r1
 800aafa:	b125      	cbz	r5, 800ab06 <__swsetup_r+0x16>
 800aafc:	69ab      	ldr	r3, [r5, #24]
 800aafe:	b913      	cbnz	r3, 800ab06 <__swsetup_r+0x16>
 800ab00:	4628      	mov	r0, r5
 800ab02:	f001 f807 	bl	800bb14 <__sinit>
 800ab06:	4b2e      	ldr	r3, [pc, #184]	; (800abc0 <__swsetup_r+0xd0>)
 800ab08:	429c      	cmp	r4, r3
 800ab0a:	d10f      	bne.n	800ab2c <__swsetup_r+0x3c>
 800ab0c:	686c      	ldr	r4, [r5, #4]
 800ab0e:	89a3      	ldrh	r3, [r4, #12]
 800ab10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ab14:	0719      	lsls	r1, r3, #28
 800ab16:	d42c      	bmi.n	800ab72 <__swsetup_r+0x82>
 800ab18:	06dd      	lsls	r5, r3, #27
 800ab1a:	d411      	bmi.n	800ab40 <__swsetup_r+0x50>
 800ab1c:	2309      	movs	r3, #9
 800ab1e:	6033      	str	r3, [r6, #0]
 800ab20:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ab24:	81a3      	strh	r3, [r4, #12]
 800ab26:	f04f 30ff 	mov.w	r0, #4294967295
 800ab2a:	e03e      	b.n	800abaa <__swsetup_r+0xba>
 800ab2c:	4b25      	ldr	r3, [pc, #148]	; (800abc4 <__swsetup_r+0xd4>)
 800ab2e:	429c      	cmp	r4, r3
 800ab30:	d101      	bne.n	800ab36 <__swsetup_r+0x46>
 800ab32:	68ac      	ldr	r4, [r5, #8]
 800ab34:	e7eb      	b.n	800ab0e <__swsetup_r+0x1e>
 800ab36:	4b24      	ldr	r3, [pc, #144]	; (800abc8 <__swsetup_r+0xd8>)
 800ab38:	429c      	cmp	r4, r3
 800ab3a:	bf08      	it	eq
 800ab3c:	68ec      	ldreq	r4, [r5, #12]
 800ab3e:	e7e6      	b.n	800ab0e <__swsetup_r+0x1e>
 800ab40:	0758      	lsls	r0, r3, #29
 800ab42:	d512      	bpl.n	800ab6a <__swsetup_r+0x7a>
 800ab44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ab46:	b141      	cbz	r1, 800ab5a <__swsetup_r+0x6a>
 800ab48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ab4c:	4299      	cmp	r1, r3
 800ab4e:	d002      	beq.n	800ab56 <__swsetup_r+0x66>
 800ab50:	4630      	mov	r0, r6
 800ab52:	f7fd ff5d 	bl	8008a10 <_free_r>
 800ab56:	2300      	movs	r3, #0
 800ab58:	6363      	str	r3, [r4, #52]	; 0x34
 800ab5a:	89a3      	ldrh	r3, [r4, #12]
 800ab5c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ab60:	81a3      	strh	r3, [r4, #12]
 800ab62:	2300      	movs	r3, #0
 800ab64:	6063      	str	r3, [r4, #4]
 800ab66:	6923      	ldr	r3, [r4, #16]
 800ab68:	6023      	str	r3, [r4, #0]
 800ab6a:	89a3      	ldrh	r3, [r4, #12]
 800ab6c:	f043 0308 	orr.w	r3, r3, #8
 800ab70:	81a3      	strh	r3, [r4, #12]
 800ab72:	6923      	ldr	r3, [r4, #16]
 800ab74:	b94b      	cbnz	r3, 800ab8a <__swsetup_r+0x9a>
 800ab76:	89a3      	ldrh	r3, [r4, #12]
 800ab78:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ab7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab80:	d003      	beq.n	800ab8a <__swsetup_r+0x9a>
 800ab82:	4621      	mov	r1, r4
 800ab84:	4630      	mov	r0, r6
 800ab86:	f001 fc0f 	bl	800c3a8 <__smakebuf_r>
 800ab8a:	89a0      	ldrh	r0, [r4, #12]
 800ab8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ab90:	f010 0301 	ands.w	r3, r0, #1
 800ab94:	d00a      	beq.n	800abac <__swsetup_r+0xbc>
 800ab96:	2300      	movs	r3, #0
 800ab98:	60a3      	str	r3, [r4, #8]
 800ab9a:	6963      	ldr	r3, [r4, #20]
 800ab9c:	425b      	negs	r3, r3
 800ab9e:	61a3      	str	r3, [r4, #24]
 800aba0:	6923      	ldr	r3, [r4, #16]
 800aba2:	b943      	cbnz	r3, 800abb6 <__swsetup_r+0xc6>
 800aba4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800aba8:	d1ba      	bne.n	800ab20 <__swsetup_r+0x30>
 800abaa:	bd70      	pop	{r4, r5, r6, pc}
 800abac:	0781      	lsls	r1, r0, #30
 800abae:	bf58      	it	pl
 800abb0:	6963      	ldrpl	r3, [r4, #20]
 800abb2:	60a3      	str	r3, [r4, #8]
 800abb4:	e7f4      	b.n	800aba0 <__swsetup_r+0xb0>
 800abb6:	2000      	movs	r0, #0
 800abb8:	e7f7      	b.n	800abaa <__swsetup_r+0xba>
 800abba:	bf00      	nop
 800abbc:	20000018 	.word	0x20000018
 800abc0:	0800eb48 	.word	0x0800eb48
 800abc4:	0800eb68 	.word	0x0800eb68
 800abc8:	0800eb28 	.word	0x0800eb28

0800abcc <_close_r>:
 800abcc:	b538      	push	{r3, r4, r5, lr}
 800abce:	4d06      	ldr	r5, [pc, #24]	; (800abe8 <_close_r+0x1c>)
 800abd0:	2300      	movs	r3, #0
 800abd2:	4604      	mov	r4, r0
 800abd4:	4608      	mov	r0, r1
 800abd6:	602b      	str	r3, [r5, #0]
 800abd8:	f7f8 fd3e 	bl	8003658 <_close>
 800abdc:	1c43      	adds	r3, r0, #1
 800abde:	d102      	bne.n	800abe6 <_close_r+0x1a>
 800abe0:	682b      	ldr	r3, [r5, #0]
 800abe2:	b103      	cbz	r3, 800abe6 <_close_r+0x1a>
 800abe4:	6023      	str	r3, [r4, #0]
 800abe6:	bd38      	pop	{r3, r4, r5, pc}
 800abe8:	200038f4 	.word	0x200038f4

0800abec <quorem>:
 800abec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abf0:	6903      	ldr	r3, [r0, #16]
 800abf2:	690c      	ldr	r4, [r1, #16]
 800abf4:	42a3      	cmp	r3, r4
 800abf6:	4607      	mov	r7, r0
 800abf8:	f2c0 8081 	blt.w	800acfe <quorem+0x112>
 800abfc:	3c01      	subs	r4, #1
 800abfe:	f101 0814 	add.w	r8, r1, #20
 800ac02:	f100 0514 	add.w	r5, r0, #20
 800ac06:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ac0a:	9301      	str	r3, [sp, #4]
 800ac0c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ac10:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ac14:	3301      	adds	r3, #1
 800ac16:	429a      	cmp	r2, r3
 800ac18:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ac1c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ac20:	fbb2 f6f3 	udiv	r6, r2, r3
 800ac24:	d331      	bcc.n	800ac8a <quorem+0x9e>
 800ac26:	f04f 0e00 	mov.w	lr, #0
 800ac2a:	4640      	mov	r0, r8
 800ac2c:	46ac      	mov	ip, r5
 800ac2e:	46f2      	mov	sl, lr
 800ac30:	f850 2b04 	ldr.w	r2, [r0], #4
 800ac34:	b293      	uxth	r3, r2
 800ac36:	fb06 e303 	mla	r3, r6, r3, lr
 800ac3a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ac3e:	b29b      	uxth	r3, r3
 800ac40:	ebaa 0303 	sub.w	r3, sl, r3
 800ac44:	0c12      	lsrs	r2, r2, #16
 800ac46:	f8dc a000 	ldr.w	sl, [ip]
 800ac4a:	fb06 e202 	mla	r2, r6, r2, lr
 800ac4e:	fa13 f38a 	uxtah	r3, r3, sl
 800ac52:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ac56:	fa1f fa82 	uxth.w	sl, r2
 800ac5a:	f8dc 2000 	ldr.w	r2, [ip]
 800ac5e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800ac62:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ac66:	b29b      	uxth	r3, r3
 800ac68:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ac6c:	4581      	cmp	r9, r0
 800ac6e:	f84c 3b04 	str.w	r3, [ip], #4
 800ac72:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ac76:	d2db      	bcs.n	800ac30 <quorem+0x44>
 800ac78:	f855 300b 	ldr.w	r3, [r5, fp]
 800ac7c:	b92b      	cbnz	r3, 800ac8a <quorem+0x9e>
 800ac7e:	9b01      	ldr	r3, [sp, #4]
 800ac80:	3b04      	subs	r3, #4
 800ac82:	429d      	cmp	r5, r3
 800ac84:	461a      	mov	r2, r3
 800ac86:	d32e      	bcc.n	800ace6 <quorem+0xfa>
 800ac88:	613c      	str	r4, [r7, #16]
 800ac8a:	4638      	mov	r0, r7
 800ac8c:	f001 feb2 	bl	800c9f4 <__mcmp>
 800ac90:	2800      	cmp	r0, #0
 800ac92:	db24      	blt.n	800acde <quorem+0xf2>
 800ac94:	3601      	adds	r6, #1
 800ac96:	4628      	mov	r0, r5
 800ac98:	f04f 0c00 	mov.w	ip, #0
 800ac9c:	f858 2b04 	ldr.w	r2, [r8], #4
 800aca0:	f8d0 e000 	ldr.w	lr, [r0]
 800aca4:	b293      	uxth	r3, r2
 800aca6:	ebac 0303 	sub.w	r3, ip, r3
 800acaa:	0c12      	lsrs	r2, r2, #16
 800acac:	fa13 f38e 	uxtah	r3, r3, lr
 800acb0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800acb4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800acb8:	b29b      	uxth	r3, r3
 800acba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800acbe:	45c1      	cmp	r9, r8
 800acc0:	f840 3b04 	str.w	r3, [r0], #4
 800acc4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800acc8:	d2e8      	bcs.n	800ac9c <quorem+0xb0>
 800acca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800acce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800acd2:	b922      	cbnz	r2, 800acde <quorem+0xf2>
 800acd4:	3b04      	subs	r3, #4
 800acd6:	429d      	cmp	r5, r3
 800acd8:	461a      	mov	r2, r3
 800acda:	d30a      	bcc.n	800acf2 <quorem+0x106>
 800acdc:	613c      	str	r4, [r7, #16]
 800acde:	4630      	mov	r0, r6
 800ace0:	b003      	add	sp, #12
 800ace2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ace6:	6812      	ldr	r2, [r2, #0]
 800ace8:	3b04      	subs	r3, #4
 800acea:	2a00      	cmp	r2, #0
 800acec:	d1cc      	bne.n	800ac88 <quorem+0x9c>
 800acee:	3c01      	subs	r4, #1
 800acf0:	e7c7      	b.n	800ac82 <quorem+0x96>
 800acf2:	6812      	ldr	r2, [r2, #0]
 800acf4:	3b04      	subs	r3, #4
 800acf6:	2a00      	cmp	r2, #0
 800acf8:	d1f0      	bne.n	800acdc <quorem+0xf0>
 800acfa:	3c01      	subs	r4, #1
 800acfc:	e7eb      	b.n	800acd6 <quorem+0xea>
 800acfe:	2000      	movs	r0, #0
 800ad00:	e7ee      	b.n	800ace0 <quorem+0xf4>
 800ad02:	0000      	movs	r0, r0
 800ad04:	0000      	movs	r0, r0
	...

0800ad08 <_dtoa_r>:
 800ad08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad0c:	ed2d 8b02 	vpush	{d8}
 800ad10:	ec57 6b10 	vmov	r6, r7, d0
 800ad14:	b095      	sub	sp, #84	; 0x54
 800ad16:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ad18:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ad1c:	9105      	str	r1, [sp, #20]
 800ad1e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800ad22:	4604      	mov	r4, r0
 800ad24:	9209      	str	r2, [sp, #36]	; 0x24
 800ad26:	930f      	str	r3, [sp, #60]	; 0x3c
 800ad28:	b975      	cbnz	r5, 800ad48 <_dtoa_r+0x40>
 800ad2a:	2010      	movs	r0, #16
 800ad2c:	f7fd fe52 	bl	80089d4 <malloc>
 800ad30:	4602      	mov	r2, r0
 800ad32:	6260      	str	r0, [r4, #36]	; 0x24
 800ad34:	b920      	cbnz	r0, 800ad40 <_dtoa_r+0x38>
 800ad36:	4bb2      	ldr	r3, [pc, #712]	; (800b000 <_dtoa_r+0x2f8>)
 800ad38:	21ea      	movs	r1, #234	; 0xea
 800ad3a:	48b2      	ldr	r0, [pc, #712]	; (800b004 <_dtoa_r+0x2fc>)
 800ad3c:	f002 fb3a 	bl	800d3b4 <__assert_func>
 800ad40:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ad44:	6005      	str	r5, [r0, #0]
 800ad46:	60c5      	str	r5, [r0, #12]
 800ad48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ad4a:	6819      	ldr	r1, [r3, #0]
 800ad4c:	b151      	cbz	r1, 800ad64 <_dtoa_r+0x5c>
 800ad4e:	685a      	ldr	r2, [r3, #4]
 800ad50:	604a      	str	r2, [r1, #4]
 800ad52:	2301      	movs	r3, #1
 800ad54:	4093      	lsls	r3, r2
 800ad56:	608b      	str	r3, [r1, #8]
 800ad58:	4620      	mov	r0, r4
 800ad5a:	f001 fbc3 	bl	800c4e4 <_Bfree>
 800ad5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ad60:	2200      	movs	r2, #0
 800ad62:	601a      	str	r2, [r3, #0]
 800ad64:	1e3b      	subs	r3, r7, #0
 800ad66:	bfb9      	ittee	lt
 800ad68:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ad6c:	9303      	strlt	r3, [sp, #12]
 800ad6e:	2300      	movge	r3, #0
 800ad70:	f8c8 3000 	strge.w	r3, [r8]
 800ad74:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800ad78:	4ba3      	ldr	r3, [pc, #652]	; (800b008 <_dtoa_r+0x300>)
 800ad7a:	bfbc      	itt	lt
 800ad7c:	2201      	movlt	r2, #1
 800ad7e:	f8c8 2000 	strlt.w	r2, [r8]
 800ad82:	ea33 0309 	bics.w	r3, r3, r9
 800ad86:	d11b      	bne.n	800adc0 <_dtoa_r+0xb8>
 800ad88:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ad8a:	f242 730f 	movw	r3, #9999	; 0x270f
 800ad8e:	6013      	str	r3, [r2, #0]
 800ad90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ad94:	4333      	orrs	r3, r6
 800ad96:	f000 857a 	beq.w	800b88e <_dtoa_r+0xb86>
 800ad9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ad9c:	b963      	cbnz	r3, 800adb8 <_dtoa_r+0xb0>
 800ad9e:	4b9b      	ldr	r3, [pc, #620]	; (800b00c <_dtoa_r+0x304>)
 800ada0:	e024      	b.n	800adec <_dtoa_r+0xe4>
 800ada2:	4b9b      	ldr	r3, [pc, #620]	; (800b010 <_dtoa_r+0x308>)
 800ada4:	9300      	str	r3, [sp, #0]
 800ada6:	3308      	adds	r3, #8
 800ada8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800adaa:	6013      	str	r3, [r2, #0]
 800adac:	9800      	ldr	r0, [sp, #0]
 800adae:	b015      	add	sp, #84	; 0x54
 800adb0:	ecbd 8b02 	vpop	{d8}
 800adb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adb8:	4b94      	ldr	r3, [pc, #592]	; (800b00c <_dtoa_r+0x304>)
 800adba:	9300      	str	r3, [sp, #0]
 800adbc:	3303      	adds	r3, #3
 800adbe:	e7f3      	b.n	800ada8 <_dtoa_r+0xa0>
 800adc0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800adc4:	2200      	movs	r2, #0
 800adc6:	ec51 0b17 	vmov	r0, r1, d7
 800adca:	2300      	movs	r3, #0
 800adcc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800add0:	f7f5 fe7a 	bl	8000ac8 <__aeabi_dcmpeq>
 800add4:	4680      	mov	r8, r0
 800add6:	b158      	cbz	r0, 800adf0 <_dtoa_r+0xe8>
 800add8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800adda:	2301      	movs	r3, #1
 800addc:	6013      	str	r3, [r2, #0]
 800adde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	f000 8551 	beq.w	800b888 <_dtoa_r+0xb80>
 800ade6:	488b      	ldr	r0, [pc, #556]	; (800b014 <_dtoa_r+0x30c>)
 800ade8:	6018      	str	r0, [r3, #0]
 800adea:	1e43      	subs	r3, r0, #1
 800adec:	9300      	str	r3, [sp, #0]
 800adee:	e7dd      	b.n	800adac <_dtoa_r+0xa4>
 800adf0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800adf4:	aa12      	add	r2, sp, #72	; 0x48
 800adf6:	a913      	add	r1, sp, #76	; 0x4c
 800adf8:	4620      	mov	r0, r4
 800adfa:	f001 ff1b 	bl	800cc34 <__d2b>
 800adfe:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ae02:	4683      	mov	fp, r0
 800ae04:	2d00      	cmp	r5, #0
 800ae06:	d07c      	beq.n	800af02 <_dtoa_r+0x1fa>
 800ae08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae0a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800ae0e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ae12:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800ae16:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ae1a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ae1e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ae22:	4b7d      	ldr	r3, [pc, #500]	; (800b018 <_dtoa_r+0x310>)
 800ae24:	2200      	movs	r2, #0
 800ae26:	4630      	mov	r0, r6
 800ae28:	4639      	mov	r1, r7
 800ae2a:	f7f5 fa2d 	bl	8000288 <__aeabi_dsub>
 800ae2e:	a36e      	add	r3, pc, #440	; (adr r3, 800afe8 <_dtoa_r+0x2e0>)
 800ae30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae34:	f7f5 fbe0 	bl	80005f8 <__aeabi_dmul>
 800ae38:	a36d      	add	r3, pc, #436	; (adr r3, 800aff0 <_dtoa_r+0x2e8>)
 800ae3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae3e:	f7f5 fa25 	bl	800028c <__adddf3>
 800ae42:	4606      	mov	r6, r0
 800ae44:	4628      	mov	r0, r5
 800ae46:	460f      	mov	r7, r1
 800ae48:	f7f5 fb6c 	bl	8000524 <__aeabi_i2d>
 800ae4c:	a36a      	add	r3, pc, #424	; (adr r3, 800aff8 <_dtoa_r+0x2f0>)
 800ae4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae52:	f7f5 fbd1 	bl	80005f8 <__aeabi_dmul>
 800ae56:	4602      	mov	r2, r0
 800ae58:	460b      	mov	r3, r1
 800ae5a:	4630      	mov	r0, r6
 800ae5c:	4639      	mov	r1, r7
 800ae5e:	f7f5 fa15 	bl	800028c <__adddf3>
 800ae62:	4606      	mov	r6, r0
 800ae64:	460f      	mov	r7, r1
 800ae66:	f7f5 fe77 	bl	8000b58 <__aeabi_d2iz>
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	4682      	mov	sl, r0
 800ae6e:	2300      	movs	r3, #0
 800ae70:	4630      	mov	r0, r6
 800ae72:	4639      	mov	r1, r7
 800ae74:	f7f5 fe32 	bl	8000adc <__aeabi_dcmplt>
 800ae78:	b148      	cbz	r0, 800ae8e <_dtoa_r+0x186>
 800ae7a:	4650      	mov	r0, sl
 800ae7c:	f7f5 fb52 	bl	8000524 <__aeabi_i2d>
 800ae80:	4632      	mov	r2, r6
 800ae82:	463b      	mov	r3, r7
 800ae84:	f7f5 fe20 	bl	8000ac8 <__aeabi_dcmpeq>
 800ae88:	b908      	cbnz	r0, 800ae8e <_dtoa_r+0x186>
 800ae8a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ae8e:	f1ba 0f16 	cmp.w	sl, #22
 800ae92:	d854      	bhi.n	800af3e <_dtoa_r+0x236>
 800ae94:	4b61      	ldr	r3, [pc, #388]	; (800b01c <_dtoa_r+0x314>)
 800ae96:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ae9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae9e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800aea2:	f7f5 fe1b 	bl	8000adc <__aeabi_dcmplt>
 800aea6:	2800      	cmp	r0, #0
 800aea8:	d04b      	beq.n	800af42 <_dtoa_r+0x23a>
 800aeaa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aeae:	2300      	movs	r3, #0
 800aeb0:	930e      	str	r3, [sp, #56]	; 0x38
 800aeb2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800aeb4:	1b5d      	subs	r5, r3, r5
 800aeb6:	1e6b      	subs	r3, r5, #1
 800aeb8:	9304      	str	r3, [sp, #16]
 800aeba:	bf43      	ittte	mi
 800aebc:	2300      	movmi	r3, #0
 800aebe:	f1c5 0801 	rsbmi	r8, r5, #1
 800aec2:	9304      	strmi	r3, [sp, #16]
 800aec4:	f04f 0800 	movpl.w	r8, #0
 800aec8:	f1ba 0f00 	cmp.w	sl, #0
 800aecc:	db3b      	blt.n	800af46 <_dtoa_r+0x23e>
 800aece:	9b04      	ldr	r3, [sp, #16]
 800aed0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800aed4:	4453      	add	r3, sl
 800aed6:	9304      	str	r3, [sp, #16]
 800aed8:	2300      	movs	r3, #0
 800aeda:	9306      	str	r3, [sp, #24]
 800aedc:	9b05      	ldr	r3, [sp, #20]
 800aede:	2b09      	cmp	r3, #9
 800aee0:	d869      	bhi.n	800afb6 <_dtoa_r+0x2ae>
 800aee2:	2b05      	cmp	r3, #5
 800aee4:	bfc4      	itt	gt
 800aee6:	3b04      	subgt	r3, #4
 800aee8:	9305      	strgt	r3, [sp, #20]
 800aeea:	9b05      	ldr	r3, [sp, #20]
 800aeec:	f1a3 0302 	sub.w	r3, r3, #2
 800aef0:	bfcc      	ite	gt
 800aef2:	2500      	movgt	r5, #0
 800aef4:	2501      	movle	r5, #1
 800aef6:	2b03      	cmp	r3, #3
 800aef8:	d869      	bhi.n	800afce <_dtoa_r+0x2c6>
 800aefa:	e8df f003 	tbb	[pc, r3]
 800aefe:	4e2c      	.short	0x4e2c
 800af00:	5a4c      	.short	0x5a4c
 800af02:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800af06:	441d      	add	r5, r3
 800af08:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800af0c:	2b20      	cmp	r3, #32
 800af0e:	bfc1      	itttt	gt
 800af10:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800af14:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800af18:	fa09 f303 	lslgt.w	r3, r9, r3
 800af1c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800af20:	bfda      	itte	le
 800af22:	f1c3 0320 	rsble	r3, r3, #32
 800af26:	fa06 f003 	lslle.w	r0, r6, r3
 800af2a:	4318      	orrgt	r0, r3
 800af2c:	f7f5 faea 	bl	8000504 <__aeabi_ui2d>
 800af30:	2301      	movs	r3, #1
 800af32:	4606      	mov	r6, r0
 800af34:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800af38:	3d01      	subs	r5, #1
 800af3a:	9310      	str	r3, [sp, #64]	; 0x40
 800af3c:	e771      	b.n	800ae22 <_dtoa_r+0x11a>
 800af3e:	2301      	movs	r3, #1
 800af40:	e7b6      	b.n	800aeb0 <_dtoa_r+0x1a8>
 800af42:	900e      	str	r0, [sp, #56]	; 0x38
 800af44:	e7b5      	b.n	800aeb2 <_dtoa_r+0x1aa>
 800af46:	f1ca 0300 	rsb	r3, sl, #0
 800af4a:	9306      	str	r3, [sp, #24]
 800af4c:	2300      	movs	r3, #0
 800af4e:	eba8 080a 	sub.w	r8, r8, sl
 800af52:	930d      	str	r3, [sp, #52]	; 0x34
 800af54:	e7c2      	b.n	800aedc <_dtoa_r+0x1d4>
 800af56:	2300      	movs	r3, #0
 800af58:	9308      	str	r3, [sp, #32]
 800af5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	dc39      	bgt.n	800afd4 <_dtoa_r+0x2cc>
 800af60:	f04f 0901 	mov.w	r9, #1
 800af64:	f8cd 9004 	str.w	r9, [sp, #4]
 800af68:	464b      	mov	r3, r9
 800af6a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800af6e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800af70:	2200      	movs	r2, #0
 800af72:	6042      	str	r2, [r0, #4]
 800af74:	2204      	movs	r2, #4
 800af76:	f102 0614 	add.w	r6, r2, #20
 800af7a:	429e      	cmp	r6, r3
 800af7c:	6841      	ldr	r1, [r0, #4]
 800af7e:	d92f      	bls.n	800afe0 <_dtoa_r+0x2d8>
 800af80:	4620      	mov	r0, r4
 800af82:	f001 fa6f 	bl	800c464 <_Balloc>
 800af86:	9000      	str	r0, [sp, #0]
 800af88:	2800      	cmp	r0, #0
 800af8a:	d14b      	bne.n	800b024 <_dtoa_r+0x31c>
 800af8c:	4b24      	ldr	r3, [pc, #144]	; (800b020 <_dtoa_r+0x318>)
 800af8e:	4602      	mov	r2, r0
 800af90:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800af94:	e6d1      	b.n	800ad3a <_dtoa_r+0x32>
 800af96:	2301      	movs	r3, #1
 800af98:	e7de      	b.n	800af58 <_dtoa_r+0x250>
 800af9a:	2300      	movs	r3, #0
 800af9c:	9308      	str	r3, [sp, #32]
 800af9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afa0:	eb0a 0903 	add.w	r9, sl, r3
 800afa4:	f109 0301 	add.w	r3, r9, #1
 800afa8:	2b01      	cmp	r3, #1
 800afaa:	9301      	str	r3, [sp, #4]
 800afac:	bfb8      	it	lt
 800afae:	2301      	movlt	r3, #1
 800afb0:	e7dd      	b.n	800af6e <_dtoa_r+0x266>
 800afb2:	2301      	movs	r3, #1
 800afb4:	e7f2      	b.n	800af9c <_dtoa_r+0x294>
 800afb6:	2501      	movs	r5, #1
 800afb8:	2300      	movs	r3, #0
 800afba:	9305      	str	r3, [sp, #20]
 800afbc:	9508      	str	r5, [sp, #32]
 800afbe:	f04f 39ff 	mov.w	r9, #4294967295
 800afc2:	2200      	movs	r2, #0
 800afc4:	f8cd 9004 	str.w	r9, [sp, #4]
 800afc8:	2312      	movs	r3, #18
 800afca:	9209      	str	r2, [sp, #36]	; 0x24
 800afcc:	e7cf      	b.n	800af6e <_dtoa_r+0x266>
 800afce:	2301      	movs	r3, #1
 800afd0:	9308      	str	r3, [sp, #32]
 800afd2:	e7f4      	b.n	800afbe <_dtoa_r+0x2b6>
 800afd4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800afd8:	f8cd 9004 	str.w	r9, [sp, #4]
 800afdc:	464b      	mov	r3, r9
 800afde:	e7c6      	b.n	800af6e <_dtoa_r+0x266>
 800afe0:	3101      	adds	r1, #1
 800afe2:	6041      	str	r1, [r0, #4]
 800afe4:	0052      	lsls	r2, r2, #1
 800afe6:	e7c6      	b.n	800af76 <_dtoa_r+0x26e>
 800afe8:	636f4361 	.word	0x636f4361
 800afec:	3fd287a7 	.word	0x3fd287a7
 800aff0:	8b60c8b3 	.word	0x8b60c8b3
 800aff4:	3fc68a28 	.word	0x3fc68a28
 800aff8:	509f79fb 	.word	0x509f79fb
 800affc:	3fd34413 	.word	0x3fd34413
 800b000:	0800ea9e 	.word	0x0800ea9e
 800b004:	0800eab5 	.word	0x0800eab5
 800b008:	7ff00000 	.word	0x7ff00000
 800b00c:	0800ea9a 	.word	0x0800ea9a
 800b010:	0800ea91 	.word	0x0800ea91
 800b014:	0800e915 	.word	0x0800e915
 800b018:	3ff80000 	.word	0x3ff80000
 800b01c:	0800ec90 	.word	0x0800ec90
 800b020:	0800eb14 	.word	0x0800eb14
 800b024:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b026:	9a00      	ldr	r2, [sp, #0]
 800b028:	601a      	str	r2, [r3, #0]
 800b02a:	9b01      	ldr	r3, [sp, #4]
 800b02c:	2b0e      	cmp	r3, #14
 800b02e:	f200 80ad 	bhi.w	800b18c <_dtoa_r+0x484>
 800b032:	2d00      	cmp	r5, #0
 800b034:	f000 80aa 	beq.w	800b18c <_dtoa_r+0x484>
 800b038:	f1ba 0f00 	cmp.w	sl, #0
 800b03c:	dd36      	ble.n	800b0ac <_dtoa_r+0x3a4>
 800b03e:	4ac3      	ldr	r2, [pc, #780]	; (800b34c <_dtoa_r+0x644>)
 800b040:	f00a 030f 	and.w	r3, sl, #15
 800b044:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b048:	ed93 7b00 	vldr	d7, [r3]
 800b04c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800b050:	ea4f 172a 	mov.w	r7, sl, asr #4
 800b054:	eeb0 8a47 	vmov.f32	s16, s14
 800b058:	eef0 8a67 	vmov.f32	s17, s15
 800b05c:	d016      	beq.n	800b08c <_dtoa_r+0x384>
 800b05e:	4bbc      	ldr	r3, [pc, #752]	; (800b350 <_dtoa_r+0x648>)
 800b060:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b064:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b068:	f7f5 fbf0 	bl	800084c <__aeabi_ddiv>
 800b06c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b070:	f007 070f 	and.w	r7, r7, #15
 800b074:	2503      	movs	r5, #3
 800b076:	4eb6      	ldr	r6, [pc, #728]	; (800b350 <_dtoa_r+0x648>)
 800b078:	b957      	cbnz	r7, 800b090 <_dtoa_r+0x388>
 800b07a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b07e:	ec53 2b18 	vmov	r2, r3, d8
 800b082:	f7f5 fbe3 	bl	800084c <__aeabi_ddiv>
 800b086:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b08a:	e029      	b.n	800b0e0 <_dtoa_r+0x3d8>
 800b08c:	2502      	movs	r5, #2
 800b08e:	e7f2      	b.n	800b076 <_dtoa_r+0x36e>
 800b090:	07f9      	lsls	r1, r7, #31
 800b092:	d508      	bpl.n	800b0a6 <_dtoa_r+0x39e>
 800b094:	ec51 0b18 	vmov	r0, r1, d8
 800b098:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b09c:	f7f5 faac 	bl	80005f8 <__aeabi_dmul>
 800b0a0:	ec41 0b18 	vmov	d8, r0, r1
 800b0a4:	3501      	adds	r5, #1
 800b0a6:	107f      	asrs	r7, r7, #1
 800b0a8:	3608      	adds	r6, #8
 800b0aa:	e7e5      	b.n	800b078 <_dtoa_r+0x370>
 800b0ac:	f000 80a6 	beq.w	800b1fc <_dtoa_r+0x4f4>
 800b0b0:	f1ca 0600 	rsb	r6, sl, #0
 800b0b4:	4ba5      	ldr	r3, [pc, #660]	; (800b34c <_dtoa_r+0x644>)
 800b0b6:	4fa6      	ldr	r7, [pc, #664]	; (800b350 <_dtoa_r+0x648>)
 800b0b8:	f006 020f 	and.w	r2, r6, #15
 800b0bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b0c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0c4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b0c8:	f7f5 fa96 	bl	80005f8 <__aeabi_dmul>
 800b0cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b0d0:	1136      	asrs	r6, r6, #4
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	2502      	movs	r5, #2
 800b0d6:	2e00      	cmp	r6, #0
 800b0d8:	f040 8085 	bne.w	800b1e6 <_dtoa_r+0x4de>
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d1d2      	bne.n	800b086 <_dtoa_r+0x37e>
 800b0e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	f000 808c 	beq.w	800b200 <_dtoa_r+0x4f8>
 800b0e8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b0ec:	4b99      	ldr	r3, [pc, #612]	; (800b354 <_dtoa_r+0x64c>)
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	4630      	mov	r0, r6
 800b0f2:	4639      	mov	r1, r7
 800b0f4:	f7f5 fcf2 	bl	8000adc <__aeabi_dcmplt>
 800b0f8:	2800      	cmp	r0, #0
 800b0fa:	f000 8081 	beq.w	800b200 <_dtoa_r+0x4f8>
 800b0fe:	9b01      	ldr	r3, [sp, #4]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d07d      	beq.n	800b200 <_dtoa_r+0x4f8>
 800b104:	f1b9 0f00 	cmp.w	r9, #0
 800b108:	dd3c      	ble.n	800b184 <_dtoa_r+0x47c>
 800b10a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b10e:	9307      	str	r3, [sp, #28]
 800b110:	2200      	movs	r2, #0
 800b112:	4b91      	ldr	r3, [pc, #580]	; (800b358 <_dtoa_r+0x650>)
 800b114:	4630      	mov	r0, r6
 800b116:	4639      	mov	r1, r7
 800b118:	f7f5 fa6e 	bl	80005f8 <__aeabi_dmul>
 800b11c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b120:	3501      	adds	r5, #1
 800b122:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800b126:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b12a:	4628      	mov	r0, r5
 800b12c:	f7f5 f9fa 	bl	8000524 <__aeabi_i2d>
 800b130:	4632      	mov	r2, r6
 800b132:	463b      	mov	r3, r7
 800b134:	f7f5 fa60 	bl	80005f8 <__aeabi_dmul>
 800b138:	4b88      	ldr	r3, [pc, #544]	; (800b35c <_dtoa_r+0x654>)
 800b13a:	2200      	movs	r2, #0
 800b13c:	f7f5 f8a6 	bl	800028c <__adddf3>
 800b140:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b144:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b148:	9303      	str	r3, [sp, #12]
 800b14a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d15c      	bne.n	800b20a <_dtoa_r+0x502>
 800b150:	4b83      	ldr	r3, [pc, #524]	; (800b360 <_dtoa_r+0x658>)
 800b152:	2200      	movs	r2, #0
 800b154:	4630      	mov	r0, r6
 800b156:	4639      	mov	r1, r7
 800b158:	f7f5 f896 	bl	8000288 <__aeabi_dsub>
 800b15c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b160:	4606      	mov	r6, r0
 800b162:	460f      	mov	r7, r1
 800b164:	f7f5 fcd8 	bl	8000b18 <__aeabi_dcmpgt>
 800b168:	2800      	cmp	r0, #0
 800b16a:	f040 8296 	bne.w	800b69a <_dtoa_r+0x992>
 800b16e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b172:	4630      	mov	r0, r6
 800b174:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b178:	4639      	mov	r1, r7
 800b17a:	f7f5 fcaf 	bl	8000adc <__aeabi_dcmplt>
 800b17e:	2800      	cmp	r0, #0
 800b180:	f040 8288 	bne.w	800b694 <_dtoa_r+0x98c>
 800b184:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b188:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b18c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b18e:	2b00      	cmp	r3, #0
 800b190:	f2c0 8158 	blt.w	800b444 <_dtoa_r+0x73c>
 800b194:	f1ba 0f0e 	cmp.w	sl, #14
 800b198:	f300 8154 	bgt.w	800b444 <_dtoa_r+0x73c>
 800b19c:	4b6b      	ldr	r3, [pc, #428]	; (800b34c <_dtoa_r+0x644>)
 800b19e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b1a2:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b1a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	f280 80e3 	bge.w	800b374 <_dtoa_r+0x66c>
 800b1ae:	9b01      	ldr	r3, [sp, #4]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	f300 80df 	bgt.w	800b374 <_dtoa_r+0x66c>
 800b1b6:	f040 826d 	bne.w	800b694 <_dtoa_r+0x98c>
 800b1ba:	4b69      	ldr	r3, [pc, #420]	; (800b360 <_dtoa_r+0x658>)
 800b1bc:	2200      	movs	r2, #0
 800b1be:	4640      	mov	r0, r8
 800b1c0:	4649      	mov	r1, r9
 800b1c2:	f7f5 fa19 	bl	80005f8 <__aeabi_dmul>
 800b1c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b1ca:	f7f5 fc9b 	bl	8000b04 <__aeabi_dcmpge>
 800b1ce:	9e01      	ldr	r6, [sp, #4]
 800b1d0:	4637      	mov	r7, r6
 800b1d2:	2800      	cmp	r0, #0
 800b1d4:	f040 8243 	bne.w	800b65e <_dtoa_r+0x956>
 800b1d8:	9d00      	ldr	r5, [sp, #0]
 800b1da:	2331      	movs	r3, #49	; 0x31
 800b1dc:	f805 3b01 	strb.w	r3, [r5], #1
 800b1e0:	f10a 0a01 	add.w	sl, sl, #1
 800b1e4:	e23f      	b.n	800b666 <_dtoa_r+0x95e>
 800b1e6:	07f2      	lsls	r2, r6, #31
 800b1e8:	d505      	bpl.n	800b1f6 <_dtoa_r+0x4ee>
 800b1ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b1ee:	f7f5 fa03 	bl	80005f8 <__aeabi_dmul>
 800b1f2:	3501      	adds	r5, #1
 800b1f4:	2301      	movs	r3, #1
 800b1f6:	1076      	asrs	r6, r6, #1
 800b1f8:	3708      	adds	r7, #8
 800b1fa:	e76c      	b.n	800b0d6 <_dtoa_r+0x3ce>
 800b1fc:	2502      	movs	r5, #2
 800b1fe:	e76f      	b.n	800b0e0 <_dtoa_r+0x3d8>
 800b200:	9b01      	ldr	r3, [sp, #4]
 800b202:	f8cd a01c 	str.w	sl, [sp, #28]
 800b206:	930c      	str	r3, [sp, #48]	; 0x30
 800b208:	e78d      	b.n	800b126 <_dtoa_r+0x41e>
 800b20a:	9900      	ldr	r1, [sp, #0]
 800b20c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b20e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b210:	4b4e      	ldr	r3, [pc, #312]	; (800b34c <_dtoa_r+0x644>)
 800b212:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b216:	4401      	add	r1, r0
 800b218:	9102      	str	r1, [sp, #8]
 800b21a:	9908      	ldr	r1, [sp, #32]
 800b21c:	eeb0 8a47 	vmov.f32	s16, s14
 800b220:	eef0 8a67 	vmov.f32	s17, s15
 800b224:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b228:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b22c:	2900      	cmp	r1, #0
 800b22e:	d045      	beq.n	800b2bc <_dtoa_r+0x5b4>
 800b230:	494c      	ldr	r1, [pc, #304]	; (800b364 <_dtoa_r+0x65c>)
 800b232:	2000      	movs	r0, #0
 800b234:	f7f5 fb0a 	bl	800084c <__aeabi_ddiv>
 800b238:	ec53 2b18 	vmov	r2, r3, d8
 800b23c:	f7f5 f824 	bl	8000288 <__aeabi_dsub>
 800b240:	9d00      	ldr	r5, [sp, #0]
 800b242:	ec41 0b18 	vmov	d8, r0, r1
 800b246:	4639      	mov	r1, r7
 800b248:	4630      	mov	r0, r6
 800b24a:	f7f5 fc85 	bl	8000b58 <__aeabi_d2iz>
 800b24e:	900c      	str	r0, [sp, #48]	; 0x30
 800b250:	f7f5 f968 	bl	8000524 <__aeabi_i2d>
 800b254:	4602      	mov	r2, r0
 800b256:	460b      	mov	r3, r1
 800b258:	4630      	mov	r0, r6
 800b25a:	4639      	mov	r1, r7
 800b25c:	f7f5 f814 	bl	8000288 <__aeabi_dsub>
 800b260:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b262:	3330      	adds	r3, #48	; 0x30
 800b264:	f805 3b01 	strb.w	r3, [r5], #1
 800b268:	ec53 2b18 	vmov	r2, r3, d8
 800b26c:	4606      	mov	r6, r0
 800b26e:	460f      	mov	r7, r1
 800b270:	f7f5 fc34 	bl	8000adc <__aeabi_dcmplt>
 800b274:	2800      	cmp	r0, #0
 800b276:	d165      	bne.n	800b344 <_dtoa_r+0x63c>
 800b278:	4632      	mov	r2, r6
 800b27a:	463b      	mov	r3, r7
 800b27c:	4935      	ldr	r1, [pc, #212]	; (800b354 <_dtoa_r+0x64c>)
 800b27e:	2000      	movs	r0, #0
 800b280:	f7f5 f802 	bl	8000288 <__aeabi_dsub>
 800b284:	ec53 2b18 	vmov	r2, r3, d8
 800b288:	f7f5 fc28 	bl	8000adc <__aeabi_dcmplt>
 800b28c:	2800      	cmp	r0, #0
 800b28e:	f040 80b9 	bne.w	800b404 <_dtoa_r+0x6fc>
 800b292:	9b02      	ldr	r3, [sp, #8]
 800b294:	429d      	cmp	r5, r3
 800b296:	f43f af75 	beq.w	800b184 <_dtoa_r+0x47c>
 800b29a:	4b2f      	ldr	r3, [pc, #188]	; (800b358 <_dtoa_r+0x650>)
 800b29c:	ec51 0b18 	vmov	r0, r1, d8
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	f7f5 f9a9 	bl	80005f8 <__aeabi_dmul>
 800b2a6:	4b2c      	ldr	r3, [pc, #176]	; (800b358 <_dtoa_r+0x650>)
 800b2a8:	ec41 0b18 	vmov	d8, r0, r1
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	4630      	mov	r0, r6
 800b2b0:	4639      	mov	r1, r7
 800b2b2:	f7f5 f9a1 	bl	80005f8 <__aeabi_dmul>
 800b2b6:	4606      	mov	r6, r0
 800b2b8:	460f      	mov	r7, r1
 800b2ba:	e7c4      	b.n	800b246 <_dtoa_r+0x53e>
 800b2bc:	ec51 0b17 	vmov	r0, r1, d7
 800b2c0:	f7f5 f99a 	bl	80005f8 <__aeabi_dmul>
 800b2c4:	9b02      	ldr	r3, [sp, #8]
 800b2c6:	9d00      	ldr	r5, [sp, #0]
 800b2c8:	930c      	str	r3, [sp, #48]	; 0x30
 800b2ca:	ec41 0b18 	vmov	d8, r0, r1
 800b2ce:	4639      	mov	r1, r7
 800b2d0:	4630      	mov	r0, r6
 800b2d2:	f7f5 fc41 	bl	8000b58 <__aeabi_d2iz>
 800b2d6:	9011      	str	r0, [sp, #68]	; 0x44
 800b2d8:	f7f5 f924 	bl	8000524 <__aeabi_i2d>
 800b2dc:	4602      	mov	r2, r0
 800b2de:	460b      	mov	r3, r1
 800b2e0:	4630      	mov	r0, r6
 800b2e2:	4639      	mov	r1, r7
 800b2e4:	f7f4 ffd0 	bl	8000288 <__aeabi_dsub>
 800b2e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b2ea:	3330      	adds	r3, #48	; 0x30
 800b2ec:	f805 3b01 	strb.w	r3, [r5], #1
 800b2f0:	9b02      	ldr	r3, [sp, #8]
 800b2f2:	429d      	cmp	r5, r3
 800b2f4:	4606      	mov	r6, r0
 800b2f6:	460f      	mov	r7, r1
 800b2f8:	f04f 0200 	mov.w	r2, #0
 800b2fc:	d134      	bne.n	800b368 <_dtoa_r+0x660>
 800b2fe:	4b19      	ldr	r3, [pc, #100]	; (800b364 <_dtoa_r+0x65c>)
 800b300:	ec51 0b18 	vmov	r0, r1, d8
 800b304:	f7f4 ffc2 	bl	800028c <__adddf3>
 800b308:	4602      	mov	r2, r0
 800b30a:	460b      	mov	r3, r1
 800b30c:	4630      	mov	r0, r6
 800b30e:	4639      	mov	r1, r7
 800b310:	f7f5 fc02 	bl	8000b18 <__aeabi_dcmpgt>
 800b314:	2800      	cmp	r0, #0
 800b316:	d175      	bne.n	800b404 <_dtoa_r+0x6fc>
 800b318:	ec53 2b18 	vmov	r2, r3, d8
 800b31c:	4911      	ldr	r1, [pc, #68]	; (800b364 <_dtoa_r+0x65c>)
 800b31e:	2000      	movs	r0, #0
 800b320:	f7f4 ffb2 	bl	8000288 <__aeabi_dsub>
 800b324:	4602      	mov	r2, r0
 800b326:	460b      	mov	r3, r1
 800b328:	4630      	mov	r0, r6
 800b32a:	4639      	mov	r1, r7
 800b32c:	f7f5 fbd6 	bl	8000adc <__aeabi_dcmplt>
 800b330:	2800      	cmp	r0, #0
 800b332:	f43f af27 	beq.w	800b184 <_dtoa_r+0x47c>
 800b336:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b338:	1e6b      	subs	r3, r5, #1
 800b33a:	930c      	str	r3, [sp, #48]	; 0x30
 800b33c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b340:	2b30      	cmp	r3, #48	; 0x30
 800b342:	d0f8      	beq.n	800b336 <_dtoa_r+0x62e>
 800b344:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800b348:	e04a      	b.n	800b3e0 <_dtoa_r+0x6d8>
 800b34a:	bf00      	nop
 800b34c:	0800ec90 	.word	0x0800ec90
 800b350:	0800ec68 	.word	0x0800ec68
 800b354:	3ff00000 	.word	0x3ff00000
 800b358:	40240000 	.word	0x40240000
 800b35c:	401c0000 	.word	0x401c0000
 800b360:	40140000 	.word	0x40140000
 800b364:	3fe00000 	.word	0x3fe00000
 800b368:	4baf      	ldr	r3, [pc, #700]	; (800b628 <_dtoa_r+0x920>)
 800b36a:	f7f5 f945 	bl	80005f8 <__aeabi_dmul>
 800b36e:	4606      	mov	r6, r0
 800b370:	460f      	mov	r7, r1
 800b372:	e7ac      	b.n	800b2ce <_dtoa_r+0x5c6>
 800b374:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b378:	9d00      	ldr	r5, [sp, #0]
 800b37a:	4642      	mov	r2, r8
 800b37c:	464b      	mov	r3, r9
 800b37e:	4630      	mov	r0, r6
 800b380:	4639      	mov	r1, r7
 800b382:	f7f5 fa63 	bl	800084c <__aeabi_ddiv>
 800b386:	f7f5 fbe7 	bl	8000b58 <__aeabi_d2iz>
 800b38a:	9002      	str	r0, [sp, #8]
 800b38c:	f7f5 f8ca 	bl	8000524 <__aeabi_i2d>
 800b390:	4642      	mov	r2, r8
 800b392:	464b      	mov	r3, r9
 800b394:	f7f5 f930 	bl	80005f8 <__aeabi_dmul>
 800b398:	4602      	mov	r2, r0
 800b39a:	460b      	mov	r3, r1
 800b39c:	4630      	mov	r0, r6
 800b39e:	4639      	mov	r1, r7
 800b3a0:	f7f4 ff72 	bl	8000288 <__aeabi_dsub>
 800b3a4:	9e02      	ldr	r6, [sp, #8]
 800b3a6:	9f01      	ldr	r7, [sp, #4]
 800b3a8:	3630      	adds	r6, #48	; 0x30
 800b3aa:	f805 6b01 	strb.w	r6, [r5], #1
 800b3ae:	9e00      	ldr	r6, [sp, #0]
 800b3b0:	1bae      	subs	r6, r5, r6
 800b3b2:	42b7      	cmp	r7, r6
 800b3b4:	4602      	mov	r2, r0
 800b3b6:	460b      	mov	r3, r1
 800b3b8:	d137      	bne.n	800b42a <_dtoa_r+0x722>
 800b3ba:	f7f4 ff67 	bl	800028c <__adddf3>
 800b3be:	4642      	mov	r2, r8
 800b3c0:	464b      	mov	r3, r9
 800b3c2:	4606      	mov	r6, r0
 800b3c4:	460f      	mov	r7, r1
 800b3c6:	f7f5 fba7 	bl	8000b18 <__aeabi_dcmpgt>
 800b3ca:	b9c8      	cbnz	r0, 800b400 <_dtoa_r+0x6f8>
 800b3cc:	4642      	mov	r2, r8
 800b3ce:	464b      	mov	r3, r9
 800b3d0:	4630      	mov	r0, r6
 800b3d2:	4639      	mov	r1, r7
 800b3d4:	f7f5 fb78 	bl	8000ac8 <__aeabi_dcmpeq>
 800b3d8:	b110      	cbz	r0, 800b3e0 <_dtoa_r+0x6d8>
 800b3da:	9b02      	ldr	r3, [sp, #8]
 800b3dc:	07d9      	lsls	r1, r3, #31
 800b3de:	d40f      	bmi.n	800b400 <_dtoa_r+0x6f8>
 800b3e0:	4620      	mov	r0, r4
 800b3e2:	4659      	mov	r1, fp
 800b3e4:	f001 f87e 	bl	800c4e4 <_Bfree>
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	702b      	strb	r3, [r5, #0]
 800b3ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b3ee:	f10a 0001 	add.w	r0, sl, #1
 800b3f2:	6018      	str	r0, [r3, #0]
 800b3f4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	f43f acd8 	beq.w	800adac <_dtoa_r+0xa4>
 800b3fc:	601d      	str	r5, [r3, #0]
 800b3fe:	e4d5      	b.n	800adac <_dtoa_r+0xa4>
 800b400:	f8cd a01c 	str.w	sl, [sp, #28]
 800b404:	462b      	mov	r3, r5
 800b406:	461d      	mov	r5, r3
 800b408:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b40c:	2a39      	cmp	r2, #57	; 0x39
 800b40e:	d108      	bne.n	800b422 <_dtoa_r+0x71a>
 800b410:	9a00      	ldr	r2, [sp, #0]
 800b412:	429a      	cmp	r2, r3
 800b414:	d1f7      	bne.n	800b406 <_dtoa_r+0x6fe>
 800b416:	9a07      	ldr	r2, [sp, #28]
 800b418:	9900      	ldr	r1, [sp, #0]
 800b41a:	3201      	adds	r2, #1
 800b41c:	9207      	str	r2, [sp, #28]
 800b41e:	2230      	movs	r2, #48	; 0x30
 800b420:	700a      	strb	r2, [r1, #0]
 800b422:	781a      	ldrb	r2, [r3, #0]
 800b424:	3201      	adds	r2, #1
 800b426:	701a      	strb	r2, [r3, #0]
 800b428:	e78c      	b.n	800b344 <_dtoa_r+0x63c>
 800b42a:	4b7f      	ldr	r3, [pc, #508]	; (800b628 <_dtoa_r+0x920>)
 800b42c:	2200      	movs	r2, #0
 800b42e:	f7f5 f8e3 	bl	80005f8 <__aeabi_dmul>
 800b432:	2200      	movs	r2, #0
 800b434:	2300      	movs	r3, #0
 800b436:	4606      	mov	r6, r0
 800b438:	460f      	mov	r7, r1
 800b43a:	f7f5 fb45 	bl	8000ac8 <__aeabi_dcmpeq>
 800b43e:	2800      	cmp	r0, #0
 800b440:	d09b      	beq.n	800b37a <_dtoa_r+0x672>
 800b442:	e7cd      	b.n	800b3e0 <_dtoa_r+0x6d8>
 800b444:	9a08      	ldr	r2, [sp, #32]
 800b446:	2a00      	cmp	r2, #0
 800b448:	f000 80c4 	beq.w	800b5d4 <_dtoa_r+0x8cc>
 800b44c:	9a05      	ldr	r2, [sp, #20]
 800b44e:	2a01      	cmp	r2, #1
 800b450:	f300 80a8 	bgt.w	800b5a4 <_dtoa_r+0x89c>
 800b454:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b456:	2a00      	cmp	r2, #0
 800b458:	f000 80a0 	beq.w	800b59c <_dtoa_r+0x894>
 800b45c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b460:	9e06      	ldr	r6, [sp, #24]
 800b462:	4645      	mov	r5, r8
 800b464:	9a04      	ldr	r2, [sp, #16]
 800b466:	2101      	movs	r1, #1
 800b468:	441a      	add	r2, r3
 800b46a:	4620      	mov	r0, r4
 800b46c:	4498      	add	r8, r3
 800b46e:	9204      	str	r2, [sp, #16]
 800b470:	f001 f93e 	bl	800c6f0 <__i2b>
 800b474:	4607      	mov	r7, r0
 800b476:	2d00      	cmp	r5, #0
 800b478:	dd0b      	ble.n	800b492 <_dtoa_r+0x78a>
 800b47a:	9b04      	ldr	r3, [sp, #16]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	dd08      	ble.n	800b492 <_dtoa_r+0x78a>
 800b480:	42ab      	cmp	r3, r5
 800b482:	9a04      	ldr	r2, [sp, #16]
 800b484:	bfa8      	it	ge
 800b486:	462b      	movge	r3, r5
 800b488:	eba8 0803 	sub.w	r8, r8, r3
 800b48c:	1aed      	subs	r5, r5, r3
 800b48e:	1ad3      	subs	r3, r2, r3
 800b490:	9304      	str	r3, [sp, #16]
 800b492:	9b06      	ldr	r3, [sp, #24]
 800b494:	b1fb      	cbz	r3, 800b4d6 <_dtoa_r+0x7ce>
 800b496:	9b08      	ldr	r3, [sp, #32]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	f000 809f 	beq.w	800b5dc <_dtoa_r+0x8d4>
 800b49e:	2e00      	cmp	r6, #0
 800b4a0:	dd11      	ble.n	800b4c6 <_dtoa_r+0x7be>
 800b4a2:	4639      	mov	r1, r7
 800b4a4:	4632      	mov	r2, r6
 800b4a6:	4620      	mov	r0, r4
 800b4a8:	f001 f9de 	bl	800c868 <__pow5mult>
 800b4ac:	465a      	mov	r2, fp
 800b4ae:	4601      	mov	r1, r0
 800b4b0:	4607      	mov	r7, r0
 800b4b2:	4620      	mov	r0, r4
 800b4b4:	f001 f932 	bl	800c71c <__multiply>
 800b4b8:	4659      	mov	r1, fp
 800b4ba:	9007      	str	r0, [sp, #28]
 800b4bc:	4620      	mov	r0, r4
 800b4be:	f001 f811 	bl	800c4e4 <_Bfree>
 800b4c2:	9b07      	ldr	r3, [sp, #28]
 800b4c4:	469b      	mov	fp, r3
 800b4c6:	9b06      	ldr	r3, [sp, #24]
 800b4c8:	1b9a      	subs	r2, r3, r6
 800b4ca:	d004      	beq.n	800b4d6 <_dtoa_r+0x7ce>
 800b4cc:	4659      	mov	r1, fp
 800b4ce:	4620      	mov	r0, r4
 800b4d0:	f001 f9ca 	bl	800c868 <__pow5mult>
 800b4d4:	4683      	mov	fp, r0
 800b4d6:	2101      	movs	r1, #1
 800b4d8:	4620      	mov	r0, r4
 800b4da:	f001 f909 	bl	800c6f0 <__i2b>
 800b4de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	4606      	mov	r6, r0
 800b4e4:	dd7c      	ble.n	800b5e0 <_dtoa_r+0x8d8>
 800b4e6:	461a      	mov	r2, r3
 800b4e8:	4601      	mov	r1, r0
 800b4ea:	4620      	mov	r0, r4
 800b4ec:	f001 f9bc 	bl	800c868 <__pow5mult>
 800b4f0:	9b05      	ldr	r3, [sp, #20]
 800b4f2:	2b01      	cmp	r3, #1
 800b4f4:	4606      	mov	r6, r0
 800b4f6:	dd76      	ble.n	800b5e6 <_dtoa_r+0x8de>
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	9306      	str	r3, [sp, #24]
 800b4fc:	6933      	ldr	r3, [r6, #16]
 800b4fe:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b502:	6918      	ldr	r0, [r3, #16]
 800b504:	f001 f8a4 	bl	800c650 <__hi0bits>
 800b508:	f1c0 0020 	rsb	r0, r0, #32
 800b50c:	9b04      	ldr	r3, [sp, #16]
 800b50e:	4418      	add	r0, r3
 800b510:	f010 001f 	ands.w	r0, r0, #31
 800b514:	f000 8086 	beq.w	800b624 <_dtoa_r+0x91c>
 800b518:	f1c0 0320 	rsb	r3, r0, #32
 800b51c:	2b04      	cmp	r3, #4
 800b51e:	dd7f      	ble.n	800b620 <_dtoa_r+0x918>
 800b520:	f1c0 001c 	rsb	r0, r0, #28
 800b524:	9b04      	ldr	r3, [sp, #16]
 800b526:	4403      	add	r3, r0
 800b528:	4480      	add	r8, r0
 800b52a:	4405      	add	r5, r0
 800b52c:	9304      	str	r3, [sp, #16]
 800b52e:	f1b8 0f00 	cmp.w	r8, #0
 800b532:	dd05      	ble.n	800b540 <_dtoa_r+0x838>
 800b534:	4659      	mov	r1, fp
 800b536:	4642      	mov	r2, r8
 800b538:	4620      	mov	r0, r4
 800b53a:	f001 f9ef 	bl	800c91c <__lshift>
 800b53e:	4683      	mov	fp, r0
 800b540:	9b04      	ldr	r3, [sp, #16]
 800b542:	2b00      	cmp	r3, #0
 800b544:	dd05      	ble.n	800b552 <_dtoa_r+0x84a>
 800b546:	4631      	mov	r1, r6
 800b548:	461a      	mov	r2, r3
 800b54a:	4620      	mov	r0, r4
 800b54c:	f001 f9e6 	bl	800c91c <__lshift>
 800b550:	4606      	mov	r6, r0
 800b552:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b554:	2b00      	cmp	r3, #0
 800b556:	d069      	beq.n	800b62c <_dtoa_r+0x924>
 800b558:	4631      	mov	r1, r6
 800b55a:	4658      	mov	r0, fp
 800b55c:	f001 fa4a 	bl	800c9f4 <__mcmp>
 800b560:	2800      	cmp	r0, #0
 800b562:	da63      	bge.n	800b62c <_dtoa_r+0x924>
 800b564:	2300      	movs	r3, #0
 800b566:	4659      	mov	r1, fp
 800b568:	220a      	movs	r2, #10
 800b56a:	4620      	mov	r0, r4
 800b56c:	f000 ffdc 	bl	800c528 <__multadd>
 800b570:	9b08      	ldr	r3, [sp, #32]
 800b572:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b576:	4683      	mov	fp, r0
 800b578:	2b00      	cmp	r3, #0
 800b57a:	f000 818f 	beq.w	800b89c <_dtoa_r+0xb94>
 800b57e:	4639      	mov	r1, r7
 800b580:	2300      	movs	r3, #0
 800b582:	220a      	movs	r2, #10
 800b584:	4620      	mov	r0, r4
 800b586:	f000 ffcf 	bl	800c528 <__multadd>
 800b58a:	f1b9 0f00 	cmp.w	r9, #0
 800b58e:	4607      	mov	r7, r0
 800b590:	f300 808e 	bgt.w	800b6b0 <_dtoa_r+0x9a8>
 800b594:	9b05      	ldr	r3, [sp, #20]
 800b596:	2b02      	cmp	r3, #2
 800b598:	dc50      	bgt.n	800b63c <_dtoa_r+0x934>
 800b59a:	e089      	b.n	800b6b0 <_dtoa_r+0x9a8>
 800b59c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b59e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b5a2:	e75d      	b.n	800b460 <_dtoa_r+0x758>
 800b5a4:	9b01      	ldr	r3, [sp, #4]
 800b5a6:	1e5e      	subs	r6, r3, #1
 800b5a8:	9b06      	ldr	r3, [sp, #24]
 800b5aa:	42b3      	cmp	r3, r6
 800b5ac:	bfbf      	itttt	lt
 800b5ae:	9b06      	ldrlt	r3, [sp, #24]
 800b5b0:	9606      	strlt	r6, [sp, #24]
 800b5b2:	1af2      	sublt	r2, r6, r3
 800b5b4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800b5b6:	bfb6      	itet	lt
 800b5b8:	189b      	addlt	r3, r3, r2
 800b5ba:	1b9e      	subge	r6, r3, r6
 800b5bc:	930d      	strlt	r3, [sp, #52]	; 0x34
 800b5be:	9b01      	ldr	r3, [sp, #4]
 800b5c0:	bfb8      	it	lt
 800b5c2:	2600      	movlt	r6, #0
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	bfb5      	itete	lt
 800b5c8:	eba8 0503 	sublt.w	r5, r8, r3
 800b5cc:	9b01      	ldrge	r3, [sp, #4]
 800b5ce:	2300      	movlt	r3, #0
 800b5d0:	4645      	movge	r5, r8
 800b5d2:	e747      	b.n	800b464 <_dtoa_r+0x75c>
 800b5d4:	9e06      	ldr	r6, [sp, #24]
 800b5d6:	9f08      	ldr	r7, [sp, #32]
 800b5d8:	4645      	mov	r5, r8
 800b5da:	e74c      	b.n	800b476 <_dtoa_r+0x76e>
 800b5dc:	9a06      	ldr	r2, [sp, #24]
 800b5de:	e775      	b.n	800b4cc <_dtoa_r+0x7c4>
 800b5e0:	9b05      	ldr	r3, [sp, #20]
 800b5e2:	2b01      	cmp	r3, #1
 800b5e4:	dc18      	bgt.n	800b618 <_dtoa_r+0x910>
 800b5e6:	9b02      	ldr	r3, [sp, #8]
 800b5e8:	b9b3      	cbnz	r3, 800b618 <_dtoa_r+0x910>
 800b5ea:	9b03      	ldr	r3, [sp, #12]
 800b5ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b5f0:	b9a3      	cbnz	r3, 800b61c <_dtoa_r+0x914>
 800b5f2:	9b03      	ldr	r3, [sp, #12]
 800b5f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b5f8:	0d1b      	lsrs	r3, r3, #20
 800b5fa:	051b      	lsls	r3, r3, #20
 800b5fc:	b12b      	cbz	r3, 800b60a <_dtoa_r+0x902>
 800b5fe:	9b04      	ldr	r3, [sp, #16]
 800b600:	3301      	adds	r3, #1
 800b602:	9304      	str	r3, [sp, #16]
 800b604:	f108 0801 	add.w	r8, r8, #1
 800b608:	2301      	movs	r3, #1
 800b60a:	9306      	str	r3, [sp, #24]
 800b60c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b60e:	2b00      	cmp	r3, #0
 800b610:	f47f af74 	bne.w	800b4fc <_dtoa_r+0x7f4>
 800b614:	2001      	movs	r0, #1
 800b616:	e779      	b.n	800b50c <_dtoa_r+0x804>
 800b618:	2300      	movs	r3, #0
 800b61a:	e7f6      	b.n	800b60a <_dtoa_r+0x902>
 800b61c:	9b02      	ldr	r3, [sp, #8]
 800b61e:	e7f4      	b.n	800b60a <_dtoa_r+0x902>
 800b620:	d085      	beq.n	800b52e <_dtoa_r+0x826>
 800b622:	4618      	mov	r0, r3
 800b624:	301c      	adds	r0, #28
 800b626:	e77d      	b.n	800b524 <_dtoa_r+0x81c>
 800b628:	40240000 	.word	0x40240000
 800b62c:	9b01      	ldr	r3, [sp, #4]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	dc38      	bgt.n	800b6a4 <_dtoa_r+0x99c>
 800b632:	9b05      	ldr	r3, [sp, #20]
 800b634:	2b02      	cmp	r3, #2
 800b636:	dd35      	ble.n	800b6a4 <_dtoa_r+0x99c>
 800b638:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b63c:	f1b9 0f00 	cmp.w	r9, #0
 800b640:	d10d      	bne.n	800b65e <_dtoa_r+0x956>
 800b642:	4631      	mov	r1, r6
 800b644:	464b      	mov	r3, r9
 800b646:	2205      	movs	r2, #5
 800b648:	4620      	mov	r0, r4
 800b64a:	f000 ff6d 	bl	800c528 <__multadd>
 800b64e:	4601      	mov	r1, r0
 800b650:	4606      	mov	r6, r0
 800b652:	4658      	mov	r0, fp
 800b654:	f001 f9ce 	bl	800c9f4 <__mcmp>
 800b658:	2800      	cmp	r0, #0
 800b65a:	f73f adbd 	bgt.w	800b1d8 <_dtoa_r+0x4d0>
 800b65e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b660:	9d00      	ldr	r5, [sp, #0]
 800b662:	ea6f 0a03 	mvn.w	sl, r3
 800b666:	f04f 0800 	mov.w	r8, #0
 800b66a:	4631      	mov	r1, r6
 800b66c:	4620      	mov	r0, r4
 800b66e:	f000 ff39 	bl	800c4e4 <_Bfree>
 800b672:	2f00      	cmp	r7, #0
 800b674:	f43f aeb4 	beq.w	800b3e0 <_dtoa_r+0x6d8>
 800b678:	f1b8 0f00 	cmp.w	r8, #0
 800b67c:	d005      	beq.n	800b68a <_dtoa_r+0x982>
 800b67e:	45b8      	cmp	r8, r7
 800b680:	d003      	beq.n	800b68a <_dtoa_r+0x982>
 800b682:	4641      	mov	r1, r8
 800b684:	4620      	mov	r0, r4
 800b686:	f000 ff2d 	bl	800c4e4 <_Bfree>
 800b68a:	4639      	mov	r1, r7
 800b68c:	4620      	mov	r0, r4
 800b68e:	f000 ff29 	bl	800c4e4 <_Bfree>
 800b692:	e6a5      	b.n	800b3e0 <_dtoa_r+0x6d8>
 800b694:	2600      	movs	r6, #0
 800b696:	4637      	mov	r7, r6
 800b698:	e7e1      	b.n	800b65e <_dtoa_r+0x956>
 800b69a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b69c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800b6a0:	4637      	mov	r7, r6
 800b6a2:	e599      	b.n	800b1d8 <_dtoa_r+0x4d0>
 800b6a4:	9b08      	ldr	r3, [sp, #32]
 800b6a6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	f000 80fd 	beq.w	800b8aa <_dtoa_r+0xba2>
 800b6b0:	2d00      	cmp	r5, #0
 800b6b2:	dd05      	ble.n	800b6c0 <_dtoa_r+0x9b8>
 800b6b4:	4639      	mov	r1, r7
 800b6b6:	462a      	mov	r2, r5
 800b6b8:	4620      	mov	r0, r4
 800b6ba:	f001 f92f 	bl	800c91c <__lshift>
 800b6be:	4607      	mov	r7, r0
 800b6c0:	9b06      	ldr	r3, [sp, #24]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d05c      	beq.n	800b780 <_dtoa_r+0xa78>
 800b6c6:	6879      	ldr	r1, [r7, #4]
 800b6c8:	4620      	mov	r0, r4
 800b6ca:	f000 fecb 	bl	800c464 <_Balloc>
 800b6ce:	4605      	mov	r5, r0
 800b6d0:	b928      	cbnz	r0, 800b6de <_dtoa_r+0x9d6>
 800b6d2:	4b80      	ldr	r3, [pc, #512]	; (800b8d4 <_dtoa_r+0xbcc>)
 800b6d4:	4602      	mov	r2, r0
 800b6d6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b6da:	f7ff bb2e 	b.w	800ad3a <_dtoa_r+0x32>
 800b6de:	693a      	ldr	r2, [r7, #16]
 800b6e0:	3202      	adds	r2, #2
 800b6e2:	0092      	lsls	r2, r2, #2
 800b6e4:	f107 010c 	add.w	r1, r7, #12
 800b6e8:	300c      	adds	r0, #12
 800b6ea:	f7fd f97b 	bl	80089e4 <memcpy>
 800b6ee:	2201      	movs	r2, #1
 800b6f0:	4629      	mov	r1, r5
 800b6f2:	4620      	mov	r0, r4
 800b6f4:	f001 f912 	bl	800c91c <__lshift>
 800b6f8:	9b00      	ldr	r3, [sp, #0]
 800b6fa:	3301      	adds	r3, #1
 800b6fc:	9301      	str	r3, [sp, #4]
 800b6fe:	9b00      	ldr	r3, [sp, #0]
 800b700:	444b      	add	r3, r9
 800b702:	9307      	str	r3, [sp, #28]
 800b704:	9b02      	ldr	r3, [sp, #8]
 800b706:	f003 0301 	and.w	r3, r3, #1
 800b70a:	46b8      	mov	r8, r7
 800b70c:	9306      	str	r3, [sp, #24]
 800b70e:	4607      	mov	r7, r0
 800b710:	9b01      	ldr	r3, [sp, #4]
 800b712:	4631      	mov	r1, r6
 800b714:	3b01      	subs	r3, #1
 800b716:	4658      	mov	r0, fp
 800b718:	9302      	str	r3, [sp, #8]
 800b71a:	f7ff fa67 	bl	800abec <quorem>
 800b71e:	4603      	mov	r3, r0
 800b720:	3330      	adds	r3, #48	; 0x30
 800b722:	9004      	str	r0, [sp, #16]
 800b724:	4641      	mov	r1, r8
 800b726:	4658      	mov	r0, fp
 800b728:	9308      	str	r3, [sp, #32]
 800b72a:	f001 f963 	bl	800c9f4 <__mcmp>
 800b72e:	463a      	mov	r2, r7
 800b730:	4681      	mov	r9, r0
 800b732:	4631      	mov	r1, r6
 800b734:	4620      	mov	r0, r4
 800b736:	f001 f979 	bl	800ca2c <__mdiff>
 800b73a:	68c2      	ldr	r2, [r0, #12]
 800b73c:	9b08      	ldr	r3, [sp, #32]
 800b73e:	4605      	mov	r5, r0
 800b740:	bb02      	cbnz	r2, 800b784 <_dtoa_r+0xa7c>
 800b742:	4601      	mov	r1, r0
 800b744:	4658      	mov	r0, fp
 800b746:	f001 f955 	bl	800c9f4 <__mcmp>
 800b74a:	9b08      	ldr	r3, [sp, #32]
 800b74c:	4602      	mov	r2, r0
 800b74e:	4629      	mov	r1, r5
 800b750:	4620      	mov	r0, r4
 800b752:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800b756:	f000 fec5 	bl	800c4e4 <_Bfree>
 800b75a:	9b05      	ldr	r3, [sp, #20]
 800b75c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b75e:	9d01      	ldr	r5, [sp, #4]
 800b760:	ea43 0102 	orr.w	r1, r3, r2
 800b764:	9b06      	ldr	r3, [sp, #24]
 800b766:	430b      	orrs	r3, r1
 800b768:	9b08      	ldr	r3, [sp, #32]
 800b76a:	d10d      	bne.n	800b788 <_dtoa_r+0xa80>
 800b76c:	2b39      	cmp	r3, #57	; 0x39
 800b76e:	d029      	beq.n	800b7c4 <_dtoa_r+0xabc>
 800b770:	f1b9 0f00 	cmp.w	r9, #0
 800b774:	dd01      	ble.n	800b77a <_dtoa_r+0xa72>
 800b776:	9b04      	ldr	r3, [sp, #16]
 800b778:	3331      	adds	r3, #49	; 0x31
 800b77a:	9a02      	ldr	r2, [sp, #8]
 800b77c:	7013      	strb	r3, [r2, #0]
 800b77e:	e774      	b.n	800b66a <_dtoa_r+0x962>
 800b780:	4638      	mov	r0, r7
 800b782:	e7b9      	b.n	800b6f8 <_dtoa_r+0x9f0>
 800b784:	2201      	movs	r2, #1
 800b786:	e7e2      	b.n	800b74e <_dtoa_r+0xa46>
 800b788:	f1b9 0f00 	cmp.w	r9, #0
 800b78c:	db06      	blt.n	800b79c <_dtoa_r+0xa94>
 800b78e:	9905      	ldr	r1, [sp, #20]
 800b790:	ea41 0909 	orr.w	r9, r1, r9
 800b794:	9906      	ldr	r1, [sp, #24]
 800b796:	ea59 0101 	orrs.w	r1, r9, r1
 800b79a:	d120      	bne.n	800b7de <_dtoa_r+0xad6>
 800b79c:	2a00      	cmp	r2, #0
 800b79e:	ddec      	ble.n	800b77a <_dtoa_r+0xa72>
 800b7a0:	4659      	mov	r1, fp
 800b7a2:	2201      	movs	r2, #1
 800b7a4:	4620      	mov	r0, r4
 800b7a6:	9301      	str	r3, [sp, #4]
 800b7a8:	f001 f8b8 	bl	800c91c <__lshift>
 800b7ac:	4631      	mov	r1, r6
 800b7ae:	4683      	mov	fp, r0
 800b7b0:	f001 f920 	bl	800c9f4 <__mcmp>
 800b7b4:	2800      	cmp	r0, #0
 800b7b6:	9b01      	ldr	r3, [sp, #4]
 800b7b8:	dc02      	bgt.n	800b7c0 <_dtoa_r+0xab8>
 800b7ba:	d1de      	bne.n	800b77a <_dtoa_r+0xa72>
 800b7bc:	07da      	lsls	r2, r3, #31
 800b7be:	d5dc      	bpl.n	800b77a <_dtoa_r+0xa72>
 800b7c0:	2b39      	cmp	r3, #57	; 0x39
 800b7c2:	d1d8      	bne.n	800b776 <_dtoa_r+0xa6e>
 800b7c4:	9a02      	ldr	r2, [sp, #8]
 800b7c6:	2339      	movs	r3, #57	; 0x39
 800b7c8:	7013      	strb	r3, [r2, #0]
 800b7ca:	462b      	mov	r3, r5
 800b7cc:	461d      	mov	r5, r3
 800b7ce:	3b01      	subs	r3, #1
 800b7d0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b7d4:	2a39      	cmp	r2, #57	; 0x39
 800b7d6:	d050      	beq.n	800b87a <_dtoa_r+0xb72>
 800b7d8:	3201      	adds	r2, #1
 800b7da:	701a      	strb	r2, [r3, #0]
 800b7dc:	e745      	b.n	800b66a <_dtoa_r+0x962>
 800b7de:	2a00      	cmp	r2, #0
 800b7e0:	dd03      	ble.n	800b7ea <_dtoa_r+0xae2>
 800b7e2:	2b39      	cmp	r3, #57	; 0x39
 800b7e4:	d0ee      	beq.n	800b7c4 <_dtoa_r+0xabc>
 800b7e6:	3301      	adds	r3, #1
 800b7e8:	e7c7      	b.n	800b77a <_dtoa_r+0xa72>
 800b7ea:	9a01      	ldr	r2, [sp, #4]
 800b7ec:	9907      	ldr	r1, [sp, #28]
 800b7ee:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b7f2:	428a      	cmp	r2, r1
 800b7f4:	d02a      	beq.n	800b84c <_dtoa_r+0xb44>
 800b7f6:	4659      	mov	r1, fp
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	220a      	movs	r2, #10
 800b7fc:	4620      	mov	r0, r4
 800b7fe:	f000 fe93 	bl	800c528 <__multadd>
 800b802:	45b8      	cmp	r8, r7
 800b804:	4683      	mov	fp, r0
 800b806:	f04f 0300 	mov.w	r3, #0
 800b80a:	f04f 020a 	mov.w	r2, #10
 800b80e:	4641      	mov	r1, r8
 800b810:	4620      	mov	r0, r4
 800b812:	d107      	bne.n	800b824 <_dtoa_r+0xb1c>
 800b814:	f000 fe88 	bl	800c528 <__multadd>
 800b818:	4680      	mov	r8, r0
 800b81a:	4607      	mov	r7, r0
 800b81c:	9b01      	ldr	r3, [sp, #4]
 800b81e:	3301      	adds	r3, #1
 800b820:	9301      	str	r3, [sp, #4]
 800b822:	e775      	b.n	800b710 <_dtoa_r+0xa08>
 800b824:	f000 fe80 	bl	800c528 <__multadd>
 800b828:	4639      	mov	r1, r7
 800b82a:	4680      	mov	r8, r0
 800b82c:	2300      	movs	r3, #0
 800b82e:	220a      	movs	r2, #10
 800b830:	4620      	mov	r0, r4
 800b832:	f000 fe79 	bl	800c528 <__multadd>
 800b836:	4607      	mov	r7, r0
 800b838:	e7f0      	b.n	800b81c <_dtoa_r+0xb14>
 800b83a:	f1b9 0f00 	cmp.w	r9, #0
 800b83e:	9a00      	ldr	r2, [sp, #0]
 800b840:	bfcc      	ite	gt
 800b842:	464d      	movgt	r5, r9
 800b844:	2501      	movle	r5, #1
 800b846:	4415      	add	r5, r2
 800b848:	f04f 0800 	mov.w	r8, #0
 800b84c:	4659      	mov	r1, fp
 800b84e:	2201      	movs	r2, #1
 800b850:	4620      	mov	r0, r4
 800b852:	9301      	str	r3, [sp, #4]
 800b854:	f001 f862 	bl	800c91c <__lshift>
 800b858:	4631      	mov	r1, r6
 800b85a:	4683      	mov	fp, r0
 800b85c:	f001 f8ca 	bl	800c9f4 <__mcmp>
 800b860:	2800      	cmp	r0, #0
 800b862:	dcb2      	bgt.n	800b7ca <_dtoa_r+0xac2>
 800b864:	d102      	bne.n	800b86c <_dtoa_r+0xb64>
 800b866:	9b01      	ldr	r3, [sp, #4]
 800b868:	07db      	lsls	r3, r3, #31
 800b86a:	d4ae      	bmi.n	800b7ca <_dtoa_r+0xac2>
 800b86c:	462b      	mov	r3, r5
 800b86e:	461d      	mov	r5, r3
 800b870:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b874:	2a30      	cmp	r2, #48	; 0x30
 800b876:	d0fa      	beq.n	800b86e <_dtoa_r+0xb66>
 800b878:	e6f7      	b.n	800b66a <_dtoa_r+0x962>
 800b87a:	9a00      	ldr	r2, [sp, #0]
 800b87c:	429a      	cmp	r2, r3
 800b87e:	d1a5      	bne.n	800b7cc <_dtoa_r+0xac4>
 800b880:	f10a 0a01 	add.w	sl, sl, #1
 800b884:	2331      	movs	r3, #49	; 0x31
 800b886:	e779      	b.n	800b77c <_dtoa_r+0xa74>
 800b888:	4b13      	ldr	r3, [pc, #76]	; (800b8d8 <_dtoa_r+0xbd0>)
 800b88a:	f7ff baaf 	b.w	800adec <_dtoa_r+0xe4>
 800b88e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b890:	2b00      	cmp	r3, #0
 800b892:	f47f aa86 	bne.w	800ada2 <_dtoa_r+0x9a>
 800b896:	4b11      	ldr	r3, [pc, #68]	; (800b8dc <_dtoa_r+0xbd4>)
 800b898:	f7ff baa8 	b.w	800adec <_dtoa_r+0xe4>
 800b89c:	f1b9 0f00 	cmp.w	r9, #0
 800b8a0:	dc03      	bgt.n	800b8aa <_dtoa_r+0xba2>
 800b8a2:	9b05      	ldr	r3, [sp, #20]
 800b8a4:	2b02      	cmp	r3, #2
 800b8a6:	f73f aec9 	bgt.w	800b63c <_dtoa_r+0x934>
 800b8aa:	9d00      	ldr	r5, [sp, #0]
 800b8ac:	4631      	mov	r1, r6
 800b8ae:	4658      	mov	r0, fp
 800b8b0:	f7ff f99c 	bl	800abec <quorem>
 800b8b4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b8b8:	f805 3b01 	strb.w	r3, [r5], #1
 800b8bc:	9a00      	ldr	r2, [sp, #0]
 800b8be:	1aaa      	subs	r2, r5, r2
 800b8c0:	4591      	cmp	r9, r2
 800b8c2:	ddba      	ble.n	800b83a <_dtoa_r+0xb32>
 800b8c4:	4659      	mov	r1, fp
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	220a      	movs	r2, #10
 800b8ca:	4620      	mov	r0, r4
 800b8cc:	f000 fe2c 	bl	800c528 <__multadd>
 800b8d0:	4683      	mov	fp, r0
 800b8d2:	e7eb      	b.n	800b8ac <_dtoa_r+0xba4>
 800b8d4:	0800eb14 	.word	0x0800eb14
 800b8d8:	0800e914 	.word	0x0800e914
 800b8dc:	0800ea91 	.word	0x0800ea91

0800b8e0 <__sflush_r>:
 800b8e0:	898a      	ldrh	r2, [r1, #12]
 800b8e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8e6:	4605      	mov	r5, r0
 800b8e8:	0710      	lsls	r0, r2, #28
 800b8ea:	460c      	mov	r4, r1
 800b8ec:	d458      	bmi.n	800b9a0 <__sflush_r+0xc0>
 800b8ee:	684b      	ldr	r3, [r1, #4]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	dc05      	bgt.n	800b900 <__sflush_r+0x20>
 800b8f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	dc02      	bgt.n	800b900 <__sflush_r+0x20>
 800b8fa:	2000      	movs	r0, #0
 800b8fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b900:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b902:	2e00      	cmp	r6, #0
 800b904:	d0f9      	beq.n	800b8fa <__sflush_r+0x1a>
 800b906:	2300      	movs	r3, #0
 800b908:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b90c:	682f      	ldr	r7, [r5, #0]
 800b90e:	602b      	str	r3, [r5, #0]
 800b910:	d032      	beq.n	800b978 <__sflush_r+0x98>
 800b912:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b914:	89a3      	ldrh	r3, [r4, #12]
 800b916:	075a      	lsls	r2, r3, #29
 800b918:	d505      	bpl.n	800b926 <__sflush_r+0x46>
 800b91a:	6863      	ldr	r3, [r4, #4]
 800b91c:	1ac0      	subs	r0, r0, r3
 800b91e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b920:	b10b      	cbz	r3, 800b926 <__sflush_r+0x46>
 800b922:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b924:	1ac0      	subs	r0, r0, r3
 800b926:	2300      	movs	r3, #0
 800b928:	4602      	mov	r2, r0
 800b92a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b92c:	6a21      	ldr	r1, [r4, #32]
 800b92e:	4628      	mov	r0, r5
 800b930:	47b0      	blx	r6
 800b932:	1c43      	adds	r3, r0, #1
 800b934:	89a3      	ldrh	r3, [r4, #12]
 800b936:	d106      	bne.n	800b946 <__sflush_r+0x66>
 800b938:	6829      	ldr	r1, [r5, #0]
 800b93a:	291d      	cmp	r1, #29
 800b93c:	d82c      	bhi.n	800b998 <__sflush_r+0xb8>
 800b93e:	4a2a      	ldr	r2, [pc, #168]	; (800b9e8 <__sflush_r+0x108>)
 800b940:	40ca      	lsrs	r2, r1
 800b942:	07d6      	lsls	r6, r2, #31
 800b944:	d528      	bpl.n	800b998 <__sflush_r+0xb8>
 800b946:	2200      	movs	r2, #0
 800b948:	6062      	str	r2, [r4, #4]
 800b94a:	04d9      	lsls	r1, r3, #19
 800b94c:	6922      	ldr	r2, [r4, #16]
 800b94e:	6022      	str	r2, [r4, #0]
 800b950:	d504      	bpl.n	800b95c <__sflush_r+0x7c>
 800b952:	1c42      	adds	r2, r0, #1
 800b954:	d101      	bne.n	800b95a <__sflush_r+0x7a>
 800b956:	682b      	ldr	r3, [r5, #0]
 800b958:	b903      	cbnz	r3, 800b95c <__sflush_r+0x7c>
 800b95a:	6560      	str	r0, [r4, #84]	; 0x54
 800b95c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b95e:	602f      	str	r7, [r5, #0]
 800b960:	2900      	cmp	r1, #0
 800b962:	d0ca      	beq.n	800b8fa <__sflush_r+0x1a>
 800b964:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b968:	4299      	cmp	r1, r3
 800b96a:	d002      	beq.n	800b972 <__sflush_r+0x92>
 800b96c:	4628      	mov	r0, r5
 800b96e:	f7fd f84f 	bl	8008a10 <_free_r>
 800b972:	2000      	movs	r0, #0
 800b974:	6360      	str	r0, [r4, #52]	; 0x34
 800b976:	e7c1      	b.n	800b8fc <__sflush_r+0x1c>
 800b978:	6a21      	ldr	r1, [r4, #32]
 800b97a:	2301      	movs	r3, #1
 800b97c:	4628      	mov	r0, r5
 800b97e:	47b0      	blx	r6
 800b980:	1c41      	adds	r1, r0, #1
 800b982:	d1c7      	bne.n	800b914 <__sflush_r+0x34>
 800b984:	682b      	ldr	r3, [r5, #0]
 800b986:	2b00      	cmp	r3, #0
 800b988:	d0c4      	beq.n	800b914 <__sflush_r+0x34>
 800b98a:	2b1d      	cmp	r3, #29
 800b98c:	d001      	beq.n	800b992 <__sflush_r+0xb2>
 800b98e:	2b16      	cmp	r3, #22
 800b990:	d101      	bne.n	800b996 <__sflush_r+0xb6>
 800b992:	602f      	str	r7, [r5, #0]
 800b994:	e7b1      	b.n	800b8fa <__sflush_r+0x1a>
 800b996:	89a3      	ldrh	r3, [r4, #12]
 800b998:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b99c:	81a3      	strh	r3, [r4, #12]
 800b99e:	e7ad      	b.n	800b8fc <__sflush_r+0x1c>
 800b9a0:	690f      	ldr	r7, [r1, #16]
 800b9a2:	2f00      	cmp	r7, #0
 800b9a4:	d0a9      	beq.n	800b8fa <__sflush_r+0x1a>
 800b9a6:	0793      	lsls	r3, r2, #30
 800b9a8:	680e      	ldr	r6, [r1, #0]
 800b9aa:	bf08      	it	eq
 800b9ac:	694b      	ldreq	r3, [r1, #20]
 800b9ae:	600f      	str	r7, [r1, #0]
 800b9b0:	bf18      	it	ne
 800b9b2:	2300      	movne	r3, #0
 800b9b4:	eba6 0807 	sub.w	r8, r6, r7
 800b9b8:	608b      	str	r3, [r1, #8]
 800b9ba:	f1b8 0f00 	cmp.w	r8, #0
 800b9be:	dd9c      	ble.n	800b8fa <__sflush_r+0x1a>
 800b9c0:	6a21      	ldr	r1, [r4, #32]
 800b9c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b9c4:	4643      	mov	r3, r8
 800b9c6:	463a      	mov	r2, r7
 800b9c8:	4628      	mov	r0, r5
 800b9ca:	47b0      	blx	r6
 800b9cc:	2800      	cmp	r0, #0
 800b9ce:	dc06      	bgt.n	800b9de <__sflush_r+0xfe>
 800b9d0:	89a3      	ldrh	r3, [r4, #12]
 800b9d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9d6:	81a3      	strh	r3, [r4, #12]
 800b9d8:	f04f 30ff 	mov.w	r0, #4294967295
 800b9dc:	e78e      	b.n	800b8fc <__sflush_r+0x1c>
 800b9de:	4407      	add	r7, r0
 800b9e0:	eba8 0800 	sub.w	r8, r8, r0
 800b9e4:	e7e9      	b.n	800b9ba <__sflush_r+0xda>
 800b9e6:	bf00      	nop
 800b9e8:	20400001 	.word	0x20400001

0800b9ec <_fflush_r>:
 800b9ec:	b538      	push	{r3, r4, r5, lr}
 800b9ee:	690b      	ldr	r3, [r1, #16]
 800b9f0:	4605      	mov	r5, r0
 800b9f2:	460c      	mov	r4, r1
 800b9f4:	b913      	cbnz	r3, 800b9fc <_fflush_r+0x10>
 800b9f6:	2500      	movs	r5, #0
 800b9f8:	4628      	mov	r0, r5
 800b9fa:	bd38      	pop	{r3, r4, r5, pc}
 800b9fc:	b118      	cbz	r0, 800ba06 <_fflush_r+0x1a>
 800b9fe:	6983      	ldr	r3, [r0, #24]
 800ba00:	b90b      	cbnz	r3, 800ba06 <_fflush_r+0x1a>
 800ba02:	f000 f887 	bl	800bb14 <__sinit>
 800ba06:	4b14      	ldr	r3, [pc, #80]	; (800ba58 <_fflush_r+0x6c>)
 800ba08:	429c      	cmp	r4, r3
 800ba0a:	d11b      	bne.n	800ba44 <_fflush_r+0x58>
 800ba0c:	686c      	ldr	r4, [r5, #4]
 800ba0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d0ef      	beq.n	800b9f6 <_fflush_r+0xa>
 800ba16:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ba18:	07d0      	lsls	r0, r2, #31
 800ba1a:	d404      	bmi.n	800ba26 <_fflush_r+0x3a>
 800ba1c:	0599      	lsls	r1, r3, #22
 800ba1e:	d402      	bmi.n	800ba26 <_fflush_r+0x3a>
 800ba20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ba22:	f000 fc88 	bl	800c336 <__retarget_lock_acquire_recursive>
 800ba26:	4628      	mov	r0, r5
 800ba28:	4621      	mov	r1, r4
 800ba2a:	f7ff ff59 	bl	800b8e0 <__sflush_r>
 800ba2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ba30:	07da      	lsls	r2, r3, #31
 800ba32:	4605      	mov	r5, r0
 800ba34:	d4e0      	bmi.n	800b9f8 <_fflush_r+0xc>
 800ba36:	89a3      	ldrh	r3, [r4, #12]
 800ba38:	059b      	lsls	r3, r3, #22
 800ba3a:	d4dd      	bmi.n	800b9f8 <_fflush_r+0xc>
 800ba3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ba3e:	f000 fc7b 	bl	800c338 <__retarget_lock_release_recursive>
 800ba42:	e7d9      	b.n	800b9f8 <_fflush_r+0xc>
 800ba44:	4b05      	ldr	r3, [pc, #20]	; (800ba5c <_fflush_r+0x70>)
 800ba46:	429c      	cmp	r4, r3
 800ba48:	d101      	bne.n	800ba4e <_fflush_r+0x62>
 800ba4a:	68ac      	ldr	r4, [r5, #8]
 800ba4c:	e7df      	b.n	800ba0e <_fflush_r+0x22>
 800ba4e:	4b04      	ldr	r3, [pc, #16]	; (800ba60 <_fflush_r+0x74>)
 800ba50:	429c      	cmp	r4, r3
 800ba52:	bf08      	it	eq
 800ba54:	68ec      	ldreq	r4, [r5, #12]
 800ba56:	e7da      	b.n	800ba0e <_fflush_r+0x22>
 800ba58:	0800eb48 	.word	0x0800eb48
 800ba5c:	0800eb68 	.word	0x0800eb68
 800ba60:	0800eb28 	.word	0x0800eb28

0800ba64 <std>:
 800ba64:	2300      	movs	r3, #0
 800ba66:	b510      	push	{r4, lr}
 800ba68:	4604      	mov	r4, r0
 800ba6a:	e9c0 3300 	strd	r3, r3, [r0]
 800ba6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ba72:	6083      	str	r3, [r0, #8]
 800ba74:	8181      	strh	r1, [r0, #12]
 800ba76:	6643      	str	r3, [r0, #100]	; 0x64
 800ba78:	81c2      	strh	r2, [r0, #14]
 800ba7a:	6183      	str	r3, [r0, #24]
 800ba7c:	4619      	mov	r1, r3
 800ba7e:	2208      	movs	r2, #8
 800ba80:	305c      	adds	r0, #92	; 0x5c
 800ba82:	f7fc ffbd 	bl	8008a00 <memset>
 800ba86:	4b05      	ldr	r3, [pc, #20]	; (800ba9c <std+0x38>)
 800ba88:	6263      	str	r3, [r4, #36]	; 0x24
 800ba8a:	4b05      	ldr	r3, [pc, #20]	; (800baa0 <std+0x3c>)
 800ba8c:	62a3      	str	r3, [r4, #40]	; 0x28
 800ba8e:	4b05      	ldr	r3, [pc, #20]	; (800baa4 <std+0x40>)
 800ba90:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ba92:	4b05      	ldr	r3, [pc, #20]	; (800baa8 <std+0x44>)
 800ba94:	6224      	str	r4, [r4, #32]
 800ba96:	6323      	str	r3, [r4, #48]	; 0x30
 800ba98:	bd10      	pop	{r4, pc}
 800ba9a:	bf00      	nop
 800ba9c:	08009bd5 	.word	0x08009bd5
 800baa0:	08009bf7 	.word	0x08009bf7
 800baa4:	08009c2f 	.word	0x08009c2f
 800baa8:	08009c53 	.word	0x08009c53

0800baac <_cleanup_r>:
 800baac:	4901      	ldr	r1, [pc, #4]	; (800bab4 <_cleanup_r+0x8>)
 800baae:	f000 b8af 	b.w	800bc10 <_fwalk_reent>
 800bab2:	bf00      	nop
 800bab4:	0800b9ed 	.word	0x0800b9ed

0800bab8 <__sfmoreglue>:
 800bab8:	b570      	push	{r4, r5, r6, lr}
 800baba:	1e4a      	subs	r2, r1, #1
 800babc:	2568      	movs	r5, #104	; 0x68
 800babe:	4355      	muls	r5, r2
 800bac0:	460e      	mov	r6, r1
 800bac2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bac6:	f7fc fff3 	bl	8008ab0 <_malloc_r>
 800baca:	4604      	mov	r4, r0
 800bacc:	b140      	cbz	r0, 800bae0 <__sfmoreglue+0x28>
 800bace:	2100      	movs	r1, #0
 800bad0:	e9c0 1600 	strd	r1, r6, [r0]
 800bad4:	300c      	adds	r0, #12
 800bad6:	60a0      	str	r0, [r4, #8]
 800bad8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800badc:	f7fc ff90 	bl	8008a00 <memset>
 800bae0:	4620      	mov	r0, r4
 800bae2:	bd70      	pop	{r4, r5, r6, pc}

0800bae4 <__sfp_lock_acquire>:
 800bae4:	4801      	ldr	r0, [pc, #4]	; (800baec <__sfp_lock_acquire+0x8>)
 800bae6:	f000 bc26 	b.w	800c336 <__retarget_lock_acquire_recursive>
 800baea:	bf00      	nop
 800baec:	200038f0 	.word	0x200038f0

0800baf0 <__sfp_lock_release>:
 800baf0:	4801      	ldr	r0, [pc, #4]	; (800baf8 <__sfp_lock_release+0x8>)
 800baf2:	f000 bc21 	b.w	800c338 <__retarget_lock_release_recursive>
 800baf6:	bf00      	nop
 800baf8:	200038f0 	.word	0x200038f0

0800bafc <__sinit_lock_acquire>:
 800bafc:	4801      	ldr	r0, [pc, #4]	; (800bb04 <__sinit_lock_acquire+0x8>)
 800bafe:	f000 bc1a 	b.w	800c336 <__retarget_lock_acquire_recursive>
 800bb02:	bf00      	nop
 800bb04:	200038eb 	.word	0x200038eb

0800bb08 <__sinit_lock_release>:
 800bb08:	4801      	ldr	r0, [pc, #4]	; (800bb10 <__sinit_lock_release+0x8>)
 800bb0a:	f000 bc15 	b.w	800c338 <__retarget_lock_release_recursive>
 800bb0e:	bf00      	nop
 800bb10:	200038eb 	.word	0x200038eb

0800bb14 <__sinit>:
 800bb14:	b510      	push	{r4, lr}
 800bb16:	4604      	mov	r4, r0
 800bb18:	f7ff fff0 	bl	800bafc <__sinit_lock_acquire>
 800bb1c:	69a3      	ldr	r3, [r4, #24]
 800bb1e:	b11b      	cbz	r3, 800bb28 <__sinit+0x14>
 800bb20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb24:	f7ff bff0 	b.w	800bb08 <__sinit_lock_release>
 800bb28:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bb2c:	6523      	str	r3, [r4, #80]	; 0x50
 800bb2e:	4b13      	ldr	r3, [pc, #76]	; (800bb7c <__sinit+0x68>)
 800bb30:	4a13      	ldr	r2, [pc, #76]	; (800bb80 <__sinit+0x6c>)
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	62a2      	str	r2, [r4, #40]	; 0x28
 800bb36:	42a3      	cmp	r3, r4
 800bb38:	bf04      	itt	eq
 800bb3a:	2301      	moveq	r3, #1
 800bb3c:	61a3      	streq	r3, [r4, #24]
 800bb3e:	4620      	mov	r0, r4
 800bb40:	f000 f820 	bl	800bb84 <__sfp>
 800bb44:	6060      	str	r0, [r4, #4]
 800bb46:	4620      	mov	r0, r4
 800bb48:	f000 f81c 	bl	800bb84 <__sfp>
 800bb4c:	60a0      	str	r0, [r4, #8]
 800bb4e:	4620      	mov	r0, r4
 800bb50:	f000 f818 	bl	800bb84 <__sfp>
 800bb54:	2200      	movs	r2, #0
 800bb56:	60e0      	str	r0, [r4, #12]
 800bb58:	2104      	movs	r1, #4
 800bb5a:	6860      	ldr	r0, [r4, #4]
 800bb5c:	f7ff ff82 	bl	800ba64 <std>
 800bb60:	68a0      	ldr	r0, [r4, #8]
 800bb62:	2201      	movs	r2, #1
 800bb64:	2109      	movs	r1, #9
 800bb66:	f7ff ff7d 	bl	800ba64 <std>
 800bb6a:	68e0      	ldr	r0, [r4, #12]
 800bb6c:	2202      	movs	r2, #2
 800bb6e:	2112      	movs	r1, #18
 800bb70:	f7ff ff78 	bl	800ba64 <std>
 800bb74:	2301      	movs	r3, #1
 800bb76:	61a3      	str	r3, [r4, #24]
 800bb78:	e7d2      	b.n	800bb20 <__sinit+0xc>
 800bb7a:	bf00      	nop
 800bb7c:	0800e900 	.word	0x0800e900
 800bb80:	0800baad 	.word	0x0800baad

0800bb84 <__sfp>:
 800bb84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb86:	4607      	mov	r7, r0
 800bb88:	f7ff ffac 	bl	800bae4 <__sfp_lock_acquire>
 800bb8c:	4b1e      	ldr	r3, [pc, #120]	; (800bc08 <__sfp+0x84>)
 800bb8e:	681e      	ldr	r6, [r3, #0]
 800bb90:	69b3      	ldr	r3, [r6, #24]
 800bb92:	b913      	cbnz	r3, 800bb9a <__sfp+0x16>
 800bb94:	4630      	mov	r0, r6
 800bb96:	f7ff ffbd 	bl	800bb14 <__sinit>
 800bb9a:	3648      	adds	r6, #72	; 0x48
 800bb9c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bba0:	3b01      	subs	r3, #1
 800bba2:	d503      	bpl.n	800bbac <__sfp+0x28>
 800bba4:	6833      	ldr	r3, [r6, #0]
 800bba6:	b30b      	cbz	r3, 800bbec <__sfp+0x68>
 800bba8:	6836      	ldr	r6, [r6, #0]
 800bbaa:	e7f7      	b.n	800bb9c <__sfp+0x18>
 800bbac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bbb0:	b9d5      	cbnz	r5, 800bbe8 <__sfp+0x64>
 800bbb2:	4b16      	ldr	r3, [pc, #88]	; (800bc0c <__sfp+0x88>)
 800bbb4:	60e3      	str	r3, [r4, #12]
 800bbb6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bbba:	6665      	str	r5, [r4, #100]	; 0x64
 800bbbc:	f000 fbba 	bl	800c334 <__retarget_lock_init_recursive>
 800bbc0:	f7ff ff96 	bl	800baf0 <__sfp_lock_release>
 800bbc4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bbc8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bbcc:	6025      	str	r5, [r4, #0]
 800bbce:	61a5      	str	r5, [r4, #24]
 800bbd0:	2208      	movs	r2, #8
 800bbd2:	4629      	mov	r1, r5
 800bbd4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bbd8:	f7fc ff12 	bl	8008a00 <memset>
 800bbdc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bbe0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bbe4:	4620      	mov	r0, r4
 800bbe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bbe8:	3468      	adds	r4, #104	; 0x68
 800bbea:	e7d9      	b.n	800bba0 <__sfp+0x1c>
 800bbec:	2104      	movs	r1, #4
 800bbee:	4638      	mov	r0, r7
 800bbf0:	f7ff ff62 	bl	800bab8 <__sfmoreglue>
 800bbf4:	4604      	mov	r4, r0
 800bbf6:	6030      	str	r0, [r6, #0]
 800bbf8:	2800      	cmp	r0, #0
 800bbfa:	d1d5      	bne.n	800bba8 <__sfp+0x24>
 800bbfc:	f7ff ff78 	bl	800baf0 <__sfp_lock_release>
 800bc00:	230c      	movs	r3, #12
 800bc02:	603b      	str	r3, [r7, #0]
 800bc04:	e7ee      	b.n	800bbe4 <__sfp+0x60>
 800bc06:	bf00      	nop
 800bc08:	0800e900 	.word	0x0800e900
 800bc0c:	ffff0001 	.word	0xffff0001

0800bc10 <_fwalk_reent>:
 800bc10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc14:	4606      	mov	r6, r0
 800bc16:	4688      	mov	r8, r1
 800bc18:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bc1c:	2700      	movs	r7, #0
 800bc1e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bc22:	f1b9 0901 	subs.w	r9, r9, #1
 800bc26:	d505      	bpl.n	800bc34 <_fwalk_reent+0x24>
 800bc28:	6824      	ldr	r4, [r4, #0]
 800bc2a:	2c00      	cmp	r4, #0
 800bc2c:	d1f7      	bne.n	800bc1e <_fwalk_reent+0xe>
 800bc2e:	4638      	mov	r0, r7
 800bc30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc34:	89ab      	ldrh	r3, [r5, #12]
 800bc36:	2b01      	cmp	r3, #1
 800bc38:	d907      	bls.n	800bc4a <_fwalk_reent+0x3a>
 800bc3a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bc3e:	3301      	adds	r3, #1
 800bc40:	d003      	beq.n	800bc4a <_fwalk_reent+0x3a>
 800bc42:	4629      	mov	r1, r5
 800bc44:	4630      	mov	r0, r6
 800bc46:	47c0      	blx	r8
 800bc48:	4307      	orrs	r7, r0
 800bc4a:	3568      	adds	r5, #104	; 0x68
 800bc4c:	e7e9      	b.n	800bc22 <_fwalk_reent+0x12>

0800bc4e <rshift>:
 800bc4e:	6903      	ldr	r3, [r0, #16]
 800bc50:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800bc54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bc58:	ea4f 1261 	mov.w	r2, r1, asr #5
 800bc5c:	f100 0414 	add.w	r4, r0, #20
 800bc60:	dd45      	ble.n	800bcee <rshift+0xa0>
 800bc62:	f011 011f 	ands.w	r1, r1, #31
 800bc66:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800bc6a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bc6e:	d10c      	bne.n	800bc8a <rshift+0x3c>
 800bc70:	f100 0710 	add.w	r7, r0, #16
 800bc74:	4629      	mov	r1, r5
 800bc76:	42b1      	cmp	r1, r6
 800bc78:	d334      	bcc.n	800bce4 <rshift+0x96>
 800bc7a:	1a9b      	subs	r3, r3, r2
 800bc7c:	009b      	lsls	r3, r3, #2
 800bc7e:	1eea      	subs	r2, r5, #3
 800bc80:	4296      	cmp	r6, r2
 800bc82:	bf38      	it	cc
 800bc84:	2300      	movcc	r3, #0
 800bc86:	4423      	add	r3, r4
 800bc88:	e015      	b.n	800bcb6 <rshift+0x68>
 800bc8a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bc8e:	f1c1 0820 	rsb	r8, r1, #32
 800bc92:	40cf      	lsrs	r7, r1
 800bc94:	f105 0e04 	add.w	lr, r5, #4
 800bc98:	46a1      	mov	r9, r4
 800bc9a:	4576      	cmp	r6, lr
 800bc9c:	46f4      	mov	ip, lr
 800bc9e:	d815      	bhi.n	800bccc <rshift+0x7e>
 800bca0:	1a9b      	subs	r3, r3, r2
 800bca2:	009a      	lsls	r2, r3, #2
 800bca4:	3a04      	subs	r2, #4
 800bca6:	3501      	adds	r5, #1
 800bca8:	42ae      	cmp	r6, r5
 800bcaa:	bf38      	it	cc
 800bcac:	2200      	movcc	r2, #0
 800bcae:	18a3      	adds	r3, r4, r2
 800bcb0:	50a7      	str	r7, [r4, r2]
 800bcb2:	b107      	cbz	r7, 800bcb6 <rshift+0x68>
 800bcb4:	3304      	adds	r3, #4
 800bcb6:	1b1a      	subs	r2, r3, r4
 800bcb8:	42a3      	cmp	r3, r4
 800bcba:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bcbe:	bf08      	it	eq
 800bcc0:	2300      	moveq	r3, #0
 800bcc2:	6102      	str	r2, [r0, #16]
 800bcc4:	bf08      	it	eq
 800bcc6:	6143      	streq	r3, [r0, #20]
 800bcc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bccc:	f8dc c000 	ldr.w	ip, [ip]
 800bcd0:	fa0c fc08 	lsl.w	ip, ip, r8
 800bcd4:	ea4c 0707 	orr.w	r7, ip, r7
 800bcd8:	f849 7b04 	str.w	r7, [r9], #4
 800bcdc:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bce0:	40cf      	lsrs	r7, r1
 800bce2:	e7da      	b.n	800bc9a <rshift+0x4c>
 800bce4:	f851 cb04 	ldr.w	ip, [r1], #4
 800bce8:	f847 cf04 	str.w	ip, [r7, #4]!
 800bcec:	e7c3      	b.n	800bc76 <rshift+0x28>
 800bcee:	4623      	mov	r3, r4
 800bcf0:	e7e1      	b.n	800bcb6 <rshift+0x68>

0800bcf2 <__hexdig_fun>:
 800bcf2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800bcf6:	2b09      	cmp	r3, #9
 800bcf8:	d802      	bhi.n	800bd00 <__hexdig_fun+0xe>
 800bcfa:	3820      	subs	r0, #32
 800bcfc:	b2c0      	uxtb	r0, r0
 800bcfe:	4770      	bx	lr
 800bd00:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800bd04:	2b05      	cmp	r3, #5
 800bd06:	d801      	bhi.n	800bd0c <__hexdig_fun+0x1a>
 800bd08:	3847      	subs	r0, #71	; 0x47
 800bd0a:	e7f7      	b.n	800bcfc <__hexdig_fun+0xa>
 800bd0c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800bd10:	2b05      	cmp	r3, #5
 800bd12:	d801      	bhi.n	800bd18 <__hexdig_fun+0x26>
 800bd14:	3827      	subs	r0, #39	; 0x27
 800bd16:	e7f1      	b.n	800bcfc <__hexdig_fun+0xa>
 800bd18:	2000      	movs	r0, #0
 800bd1a:	4770      	bx	lr

0800bd1c <__gethex>:
 800bd1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd20:	ed2d 8b02 	vpush	{d8}
 800bd24:	b089      	sub	sp, #36	; 0x24
 800bd26:	ee08 0a10 	vmov	s16, r0
 800bd2a:	9304      	str	r3, [sp, #16]
 800bd2c:	4bbc      	ldr	r3, [pc, #752]	; (800c020 <__gethex+0x304>)
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	9301      	str	r3, [sp, #4]
 800bd32:	4618      	mov	r0, r3
 800bd34:	468b      	mov	fp, r1
 800bd36:	4690      	mov	r8, r2
 800bd38:	f7f4 fa9a 	bl	8000270 <strlen>
 800bd3c:	9b01      	ldr	r3, [sp, #4]
 800bd3e:	f8db 2000 	ldr.w	r2, [fp]
 800bd42:	4403      	add	r3, r0
 800bd44:	4682      	mov	sl, r0
 800bd46:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800bd4a:	9305      	str	r3, [sp, #20]
 800bd4c:	1c93      	adds	r3, r2, #2
 800bd4e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800bd52:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800bd56:	32fe      	adds	r2, #254	; 0xfe
 800bd58:	18d1      	adds	r1, r2, r3
 800bd5a:	461f      	mov	r7, r3
 800bd5c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800bd60:	9100      	str	r1, [sp, #0]
 800bd62:	2830      	cmp	r0, #48	; 0x30
 800bd64:	d0f8      	beq.n	800bd58 <__gethex+0x3c>
 800bd66:	f7ff ffc4 	bl	800bcf2 <__hexdig_fun>
 800bd6a:	4604      	mov	r4, r0
 800bd6c:	2800      	cmp	r0, #0
 800bd6e:	d13a      	bne.n	800bde6 <__gethex+0xca>
 800bd70:	9901      	ldr	r1, [sp, #4]
 800bd72:	4652      	mov	r2, sl
 800bd74:	4638      	mov	r0, r7
 800bd76:	f7fd ff7d 	bl	8009c74 <strncmp>
 800bd7a:	4605      	mov	r5, r0
 800bd7c:	2800      	cmp	r0, #0
 800bd7e:	d168      	bne.n	800be52 <__gethex+0x136>
 800bd80:	f817 000a 	ldrb.w	r0, [r7, sl]
 800bd84:	eb07 060a 	add.w	r6, r7, sl
 800bd88:	f7ff ffb3 	bl	800bcf2 <__hexdig_fun>
 800bd8c:	2800      	cmp	r0, #0
 800bd8e:	d062      	beq.n	800be56 <__gethex+0x13a>
 800bd90:	4633      	mov	r3, r6
 800bd92:	7818      	ldrb	r0, [r3, #0]
 800bd94:	2830      	cmp	r0, #48	; 0x30
 800bd96:	461f      	mov	r7, r3
 800bd98:	f103 0301 	add.w	r3, r3, #1
 800bd9c:	d0f9      	beq.n	800bd92 <__gethex+0x76>
 800bd9e:	f7ff ffa8 	bl	800bcf2 <__hexdig_fun>
 800bda2:	2301      	movs	r3, #1
 800bda4:	fab0 f480 	clz	r4, r0
 800bda8:	0964      	lsrs	r4, r4, #5
 800bdaa:	4635      	mov	r5, r6
 800bdac:	9300      	str	r3, [sp, #0]
 800bdae:	463a      	mov	r2, r7
 800bdb0:	4616      	mov	r6, r2
 800bdb2:	3201      	adds	r2, #1
 800bdb4:	7830      	ldrb	r0, [r6, #0]
 800bdb6:	f7ff ff9c 	bl	800bcf2 <__hexdig_fun>
 800bdba:	2800      	cmp	r0, #0
 800bdbc:	d1f8      	bne.n	800bdb0 <__gethex+0x94>
 800bdbe:	9901      	ldr	r1, [sp, #4]
 800bdc0:	4652      	mov	r2, sl
 800bdc2:	4630      	mov	r0, r6
 800bdc4:	f7fd ff56 	bl	8009c74 <strncmp>
 800bdc8:	b980      	cbnz	r0, 800bdec <__gethex+0xd0>
 800bdca:	b94d      	cbnz	r5, 800bde0 <__gethex+0xc4>
 800bdcc:	eb06 050a 	add.w	r5, r6, sl
 800bdd0:	462a      	mov	r2, r5
 800bdd2:	4616      	mov	r6, r2
 800bdd4:	3201      	adds	r2, #1
 800bdd6:	7830      	ldrb	r0, [r6, #0]
 800bdd8:	f7ff ff8b 	bl	800bcf2 <__hexdig_fun>
 800bddc:	2800      	cmp	r0, #0
 800bdde:	d1f8      	bne.n	800bdd2 <__gethex+0xb6>
 800bde0:	1bad      	subs	r5, r5, r6
 800bde2:	00ad      	lsls	r5, r5, #2
 800bde4:	e004      	b.n	800bdf0 <__gethex+0xd4>
 800bde6:	2400      	movs	r4, #0
 800bde8:	4625      	mov	r5, r4
 800bdea:	e7e0      	b.n	800bdae <__gethex+0x92>
 800bdec:	2d00      	cmp	r5, #0
 800bdee:	d1f7      	bne.n	800bde0 <__gethex+0xc4>
 800bdf0:	7833      	ldrb	r3, [r6, #0]
 800bdf2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bdf6:	2b50      	cmp	r3, #80	; 0x50
 800bdf8:	d13b      	bne.n	800be72 <__gethex+0x156>
 800bdfa:	7873      	ldrb	r3, [r6, #1]
 800bdfc:	2b2b      	cmp	r3, #43	; 0x2b
 800bdfe:	d02c      	beq.n	800be5a <__gethex+0x13e>
 800be00:	2b2d      	cmp	r3, #45	; 0x2d
 800be02:	d02e      	beq.n	800be62 <__gethex+0x146>
 800be04:	1c71      	adds	r1, r6, #1
 800be06:	f04f 0900 	mov.w	r9, #0
 800be0a:	7808      	ldrb	r0, [r1, #0]
 800be0c:	f7ff ff71 	bl	800bcf2 <__hexdig_fun>
 800be10:	1e43      	subs	r3, r0, #1
 800be12:	b2db      	uxtb	r3, r3
 800be14:	2b18      	cmp	r3, #24
 800be16:	d82c      	bhi.n	800be72 <__gethex+0x156>
 800be18:	f1a0 0210 	sub.w	r2, r0, #16
 800be1c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800be20:	f7ff ff67 	bl	800bcf2 <__hexdig_fun>
 800be24:	1e43      	subs	r3, r0, #1
 800be26:	b2db      	uxtb	r3, r3
 800be28:	2b18      	cmp	r3, #24
 800be2a:	d91d      	bls.n	800be68 <__gethex+0x14c>
 800be2c:	f1b9 0f00 	cmp.w	r9, #0
 800be30:	d000      	beq.n	800be34 <__gethex+0x118>
 800be32:	4252      	negs	r2, r2
 800be34:	4415      	add	r5, r2
 800be36:	f8cb 1000 	str.w	r1, [fp]
 800be3a:	b1e4      	cbz	r4, 800be76 <__gethex+0x15a>
 800be3c:	9b00      	ldr	r3, [sp, #0]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	bf14      	ite	ne
 800be42:	2700      	movne	r7, #0
 800be44:	2706      	moveq	r7, #6
 800be46:	4638      	mov	r0, r7
 800be48:	b009      	add	sp, #36	; 0x24
 800be4a:	ecbd 8b02 	vpop	{d8}
 800be4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be52:	463e      	mov	r6, r7
 800be54:	4625      	mov	r5, r4
 800be56:	2401      	movs	r4, #1
 800be58:	e7ca      	b.n	800bdf0 <__gethex+0xd4>
 800be5a:	f04f 0900 	mov.w	r9, #0
 800be5e:	1cb1      	adds	r1, r6, #2
 800be60:	e7d3      	b.n	800be0a <__gethex+0xee>
 800be62:	f04f 0901 	mov.w	r9, #1
 800be66:	e7fa      	b.n	800be5e <__gethex+0x142>
 800be68:	230a      	movs	r3, #10
 800be6a:	fb03 0202 	mla	r2, r3, r2, r0
 800be6e:	3a10      	subs	r2, #16
 800be70:	e7d4      	b.n	800be1c <__gethex+0x100>
 800be72:	4631      	mov	r1, r6
 800be74:	e7df      	b.n	800be36 <__gethex+0x11a>
 800be76:	1bf3      	subs	r3, r6, r7
 800be78:	3b01      	subs	r3, #1
 800be7a:	4621      	mov	r1, r4
 800be7c:	2b07      	cmp	r3, #7
 800be7e:	dc0b      	bgt.n	800be98 <__gethex+0x17c>
 800be80:	ee18 0a10 	vmov	r0, s16
 800be84:	f000 faee 	bl	800c464 <_Balloc>
 800be88:	4604      	mov	r4, r0
 800be8a:	b940      	cbnz	r0, 800be9e <__gethex+0x182>
 800be8c:	4b65      	ldr	r3, [pc, #404]	; (800c024 <__gethex+0x308>)
 800be8e:	4602      	mov	r2, r0
 800be90:	21de      	movs	r1, #222	; 0xde
 800be92:	4865      	ldr	r0, [pc, #404]	; (800c028 <__gethex+0x30c>)
 800be94:	f001 fa8e 	bl	800d3b4 <__assert_func>
 800be98:	3101      	adds	r1, #1
 800be9a:	105b      	asrs	r3, r3, #1
 800be9c:	e7ee      	b.n	800be7c <__gethex+0x160>
 800be9e:	f100 0914 	add.w	r9, r0, #20
 800bea2:	f04f 0b00 	mov.w	fp, #0
 800bea6:	f1ca 0301 	rsb	r3, sl, #1
 800beaa:	f8cd 9008 	str.w	r9, [sp, #8]
 800beae:	f8cd b000 	str.w	fp, [sp]
 800beb2:	9306      	str	r3, [sp, #24]
 800beb4:	42b7      	cmp	r7, r6
 800beb6:	d340      	bcc.n	800bf3a <__gethex+0x21e>
 800beb8:	9802      	ldr	r0, [sp, #8]
 800beba:	9b00      	ldr	r3, [sp, #0]
 800bebc:	f840 3b04 	str.w	r3, [r0], #4
 800bec0:	eba0 0009 	sub.w	r0, r0, r9
 800bec4:	1080      	asrs	r0, r0, #2
 800bec6:	0146      	lsls	r6, r0, #5
 800bec8:	6120      	str	r0, [r4, #16]
 800beca:	4618      	mov	r0, r3
 800becc:	f000 fbc0 	bl	800c650 <__hi0bits>
 800bed0:	1a30      	subs	r0, r6, r0
 800bed2:	f8d8 6000 	ldr.w	r6, [r8]
 800bed6:	42b0      	cmp	r0, r6
 800bed8:	dd63      	ble.n	800bfa2 <__gethex+0x286>
 800beda:	1b87      	subs	r7, r0, r6
 800bedc:	4639      	mov	r1, r7
 800bede:	4620      	mov	r0, r4
 800bee0:	f000 ff5a 	bl	800cd98 <__any_on>
 800bee4:	4682      	mov	sl, r0
 800bee6:	b1a8      	cbz	r0, 800bf14 <__gethex+0x1f8>
 800bee8:	1e7b      	subs	r3, r7, #1
 800beea:	1159      	asrs	r1, r3, #5
 800beec:	f003 021f 	and.w	r2, r3, #31
 800bef0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800bef4:	f04f 0a01 	mov.w	sl, #1
 800bef8:	fa0a f202 	lsl.w	r2, sl, r2
 800befc:	420a      	tst	r2, r1
 800befe:	d009      	beq.n	800bf14 <__gethex+0x1f8>
 800bf00:	4553      	cmp	r3, sl
 800bf02:	dd05      	ble.n	800bf10 <__gethex+0x1f4>
 800bf04:	1eb9      	subs	r1, r7, #2
 800bf06:	4620      	mov	r0, r4
 800bf08:	f000 ff46 	bl	800cd98 <__any_on>
 800bf0c:	2800      	cmp	r0, #0
 800bf0e:	d145      	bne.n	800bf9c <__gethex+0x280>
 800bf10:	f04f 0a02 	mov.w	sl, #2
 800bf14:	4639      	mov	r1, r7
 800bf16:	4620      	mov	r0, r4
 800bf18:	f7ff fe99 	bl	800bc4e <rshift>
 800bf1c:	443d      	add	r5, r7
 800bf1e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bf22:	42ab      	cmp	r3, r5
 800bf24:	da4c      	bge.n	800bfc0 <__gethex+0x2a4>
 800bf26:	ee18 0a10 	vmov	r0, s16
 800bf2a:	4621      	mov	r1, r4
 800bf2c:	f000 fada 	bl	800c4e4 <_Bfree>
 800bf30:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bf32:	2300      	movs	r3, #0
 800bf34:	6013      	str	r3, [r2, #0]
 800bf36:	27a3      	movs	r7, #163	; 0xa3
 800bf38:	e785      	b.n	800be46 <__gethex+0x12a>
 800bf3a:	1e73      	subs	r3, r6, #1
 800bf3c:	9a05      	ldr	r2, [sp, #20]
 800bf3e:	9303      	str	r3, [sp, #12]
 800bf40:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bf44:	4293      	cmp	r3, r2
 800bf46:	d019      	beq.n	800bf7c <__gethex+0x260>
 800bf48:	f1bb 0f20 	cmp.w	fp, #32
 800bf4c:	d107      	bne.n	800bf5e <__gethex+0x242>
 800bf4e:	9b02      	ldr	r3, [sp, #8]
 800bf50:	9a00      	ldr	r2, [sp, #0]
 800bf52:	f843 2b04 	str.w	r2, [r3], #4
 800bf56:	9302      	str	r3, [sp, #8]
 800bf58:	2300      	movs	r3, #0
 800bf5a:	9300      	str	r3, [sp, #0]
 800bf5c:	469b      	mov	fp, r3
 800bf5e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800bf62:	f7ff fec6 	bl	800bcf2 <__hexdig_fun>
 800bf66:	9b00      	ldr	r3, [sp, #0]
 800bf68:	f000 000f 	and.w	r0, r0, #15
 800bf6c:	fa00 f00b 	lsl.w	r0, r0, fp
 800bf70:	4303      	orrs	r3, r0
 800bf72:	9300      	str	r3, [sp, #0]
 800bf74:	f10b 0b04 	add.w	fp, fp, #4
 800bf78:	9b03      	ldr	r3, [sp, #12]
 800bf7a:	e00d      	b.n	800bf98 <__gethex+0x27c>
 800bf7c:	9b03      	ldr	r3, [sp, #12]
 800bf7e:	9a06      	ldr	r2, [sp, #24]
 800bf80:	4413      	add	r3, r2
 800bf82:	42bb      	cmp	r3, r7
 800bf84:	d3e0      	bcc.n	800bf48 <__gethex+0x22c>
 800bf86:	4618      	mov	r0, r3
 800bf88:	9901      	ldr	r1, [sp, #4]
 800bf8a:	9307      	str	r3, [sp, #28]
 800bf8c:	4652      	mov	r2, sl
 800bf8e:	f7fd fe71 	bl	8009c74 <strncmp>
 800bf92:	9b07      	ldr	r3, [sp, #28]
 800bf94:	2800      	cmp	r0, #0
 800bf96:	d1d7      	bne.n	800bf48 <__gethex+0x22c>
 800bf98:	461e      	mov	r6, r3
 800bf9a:	e78b      	b.n	800beb4 <__gethex+0x198>
 800bf9c:	f04f 0a03 	mov.w	sl, #3
 800bfa0:	e7b8      	b.n	800bf14 <__gethex+0x1f8>
 800bfa2:	da0a      	bge.n	800bfba <__gethex+0x29e>
 800bfa4:	1a37      	subs	r7, r6, r0
 800bfa6:	4621      	mov	r1, r4
 800bfa8:	ee18 0a10 	vmov	r0, s16
 800bfac:	463a      	mov	r2, r7
 800bfae:	f000 fcb5 	bl	800c91c <__lshift>
 800bfb2:	1bed      	subs	r5, r5, r7
 800bfb4:	4604      	mov	r4, r0
 800bfb6:	f100 0914 	add.w	r9, r0, #20
 800bfba:	f04f 0a00 	mov.w	sl, #0
 800bfbe:	e7ae      	b.n	800bf1e <__gethex+0x202>
 800bfc0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800bfc4:	42a8      	cmp	r0, r5
 800bfc6:	dd72      	ble.n	800c0ae <__gethex+0x392>
 800bfc8:	1b45      	subs	r5, r0, r5
 800bfca:	42ae      	cmp	r6, r5
 800bfcc:	dc36      	bgt.n	800c03c <__gethex+0x320>
 800bfce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bfd2:	2b02      	cmp	r3, #2
 800bfd4:	d02a      	beq.n	800c02c <__gethex+0x310>
 800bfd6:	2b03      	cmp	r3, #3
 800bfd8:	d02c      	beq.n	800c034 <__gethex+0x318>
 800bfda:	2b01      	cmp	r3, #1
 800bfdc:	d115      	bne.n	800c00a <__gethex+0x2ee>
 800bfde:	42ae      	cmp	r6, r5
 800bfe0:	d113      	bne.n	800c00a <__gethex+0x2ee>
 800bfe2:	2e01      	cmp	r6, #1
 800bfe4:	d10b      	bne.n	800bffe <__gethex+0x2e2>
 800bfe6:	9a04      	ldr	r2, [sp, #16]
 800bfe8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bfec:	6013      	str	r3, [r2, #0]
 800bfee:	2301      	movs	r3, #1
 800bff0:	6123      	str	r3, [r4, #16]
 800bff2:	f8c9 3000 	str.w	r3, [r9]
 800bff6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bff8:	2762      	movs	r7, #98	; 0x62
 800bffa:	601c      	str	r4, [r3, #0]
 800bffc:	e723      	b.n	800be46 <__gethex+0x12a>
 800bffe:	1e71      	subs	r1, r6, #1
 800c000:	4620      	mov	r0, r4
 800c002:	f000 fec9 	bl	800cd98 <__any_on>
 800c006:	2800      	cmp	r0, #0
 800c008:	d1ed      	bne.n	800bfe6 <__gethex+0x2ca>
 800c00a:	ee18 0a10 	vmov	r0, s16
 800c00e:	4621      	mov	r1, r4
 800c010:	f000 fa68 	bl	800c4e4 <_Bfree>
 800c014:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c016:	2300      	movs	r3, #0
 800c018:	6013      	str	r3, [r2, #0]
 800c01a:	2750      	movs	r7, #80	; 0x50
 800c01c:	e713      	b.n	800be46 <__gethex+0x12a>
 800c01e:	bf00      	nop
 800c020:	0800ebf4 	.word	0x0800ebf4
 800c024:	0800eb14 	.word	0x0800eb14
 800c028:	0800eb88 	.word	0x0800eb88
 800c02c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d1eb      	bne.n	800c00a <__gethex+0x2ee>
 800c032:	e7d8      	b.n	800bfe6 <__gethex+0x2ca>
 800c034:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c036:	2b00      	cmp	r3, #0
 800c038:	d1d5      	bne.n	800bfe6 <__gethex+0x2ca>
 800c03a:	e7e6      	b.n	800c00a <__gethex+0x2ee>
 800c03c:	1e6f      	subs	r7, r5, #1
 800c03e:	f1ba 0f00 	cmp.w	sl, #0
 800c042:	d131      	bne.n	800c0a8 <__gethex+0x38c>
 800c044:	b127      	cbz	r7, 800c050 <__gethex+0x334>
 800c046:	4639      	mov	r1, r7
 800c048:	4620      	mov	r0, r4
 800c04a:	f000 fea5 	bl	800cd98 <__any_on>
 800c04e:	4682      	mov	sl, r0
 800c050:	117b      	asrs	r3, r7, #5
 800c052:	2101      	movs	r1, #1
 800c054:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c058:	f007 071f 	and.w	r7, r7, #31
 800c05c:	fa01 f707 	lsl.w	r7, r1, r7
 800c060:	421f      	tst	r7, r3
 800c062:	4629      	mov	r1, r5
 800c064:	4620      	mov	r0, r4
 800c066:	bf18      	it	ne
 800c068:	f04a 0a02 	orrne.w	sl, sl, #2
 800c06c:	1b76      	subs	r6, r6, r5
 800c06e:	f7ff fdee 	bl	800bc4e <rshift>
 800c072:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c076:	2702      	movs	r7, #2
 800c078:	f1ba 0f00 	cmp.w	sl, #0
 800c07c:	d048      	beq.n	800c110 <__gethex+0x3f4>
 800c07e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c082:	2b02      	cmp	r3, #2
 800c084:	d015      	beq.n	800c0b2 <__gethex+0x396>
 800c086:	2b03      	cmp	r3, #3
 800c088:	d017      	beq.n	800c0ba <__gethex+0x39e>
 800c08a:	2b01      	cmp	r3, #1
 800c08c:	d109      	bne.n	800c0a2 <__gethex+0x386>
 800c08e:	f01a 0f02 	tst.w	sl, #2
 800c092:	d006      	beq.n	800c0a2 <__gethex+0x386>
 800c094:	f8d9 0000 	ldr.w	r0, [r9]
 800c098:	ea4a 0a00 	orr.w	sl, sl, r0
 800c09c:	f01a 0f01 	tst.w	sl, #1
 800c0a0:	d10e      	bne.n	800c0c0 <__gethex+0x3a4>
 800c0a2:	f047 0710 	orr.w	r7, r7, #16
 800c0a6:	e033      	b.n	800c110 <__gethex+0x3f4>
 800c0a8:	f04f 0a01 	mov.w	sl, #1
 800c0ac:	e7d0      	b.n	800c050 <__gethex+0x334>
 800c0ae:	2701      	movs	r7, #1
 800c0b0:	e7e2      	b.n	800c078 <__gethex+0x35c>
 800c0b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c0b4:	f1c3 0301 	rsb	r3, r3, #1
 800c0b8:	9315      	str	r3, [sp, #84]	; 0x54
 800c0ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d0f0      	beq.n	800c0a2 <__gethex+0x386>
 800c0c0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c0c4:	f104 0314 	add.w	r3, r4, #20
 800c0c8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c0cc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c0d0:	f04f 0c00 	mov.w	ip, #0
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0da:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c0de:	d01c      	beq.n	800c11a <__gethex+0x3fe>
 800c0e0:	3201      	adds	r2, #1
 800c0e2:	6002      	str	r2, [r0, #0]
 800c0e4:	2f02      	cmp	r7, #2
 800c0e6:	f104 0314 	add.w	r3, r4, #20
 800c0ea:	d13f      	bne.n	800c16c <__gethex+0x450>
 800c0ec:	f8d8 2000 	ldr.w	r2, [r8]
 800c0f0:	3a01      	subs	r2, #1
 800c0f2:	42b2      	cmp	r2, r6
 800c0f4:	d10a      	bne.n	800c10c <__gethex+0x3f0>
 800c0f6:	1171      	asrs	r1, r6, #5
 800c0f8:	2201      	movs	r2, #1
 800c0fa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c0fe:	f006 061f 	and.w	r6, r6, #31
 800c102:	fa02 f606 	lsl.w	r6, r2, r6
 800c106:	421e      	tst	r6, r3
 800c108:	bf18      	it	ne
 800c10a:	4617      	movne	r7, r2
 800c10c:	f047 0720 	orr.w	r7, r7, #32
 800c110:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c112:	601c      	str	r4, [r3, #0]
 800c114:	9b04      	ldr	r3, [sp, #16]
 800c116:	601d      	str	r5, [r3, #0]
 800c118:	e695      	b.n	800be46 <__gethex+0x12a>
 800c11a:	4299      	cmp	r1, r3
 800c11c:	f843 cc04 	str.w	ip, [r3, #-4]
 800c120:	d8d8      	bhi.n	800c0d4 <__gethex+0x3b8>
 800c122:	68a3      	ldr	r3, [r4, #8]
 800c124:	459b      	cmp	fp, r3
 800c126:	db19      	blt.n	800c15c <__gethex+0x440>
 800c128:	6861      	ldr	r1, [r4, #4]
 800c12a:	ee18 0a10 	vmov	r0, s16
 800c12e:	3101      	adds	r1, #1
 800c130:	f000 f998 	bl	800c464 <_Balloc>
 800c134:	4681      	mov	r9, r0
 800c136:	b918      	cbnz	r0, 800c140 <__gethex+0x424>
 800c138:	4b1a      	ldr	r3, [pc, #104]	; (800c1a4 <__gethex+0x488>)
 800c13a:	4602      	mov	r2, r0
 800c13c:	2184      	movs	r1, #132	; 0x84
 800c13e:	e6a8      	b.n	800be92 <__gethex+0x176>
 800c140:	6922      	ldr	r2, [r4, #16]
 800c142:	3202      	adds	r2, #2
 800c144:	f104 010c 	add.w	r1, r4, #12
 800c148:	0092      	lsls	r2, r2, #2
 800c14a:	300c      	adds	r0, #12
 800c14c:	f7fc fc4a 	bl	80089e4 <memcpy>
 800c150:	4621      	mov	r1, r4
 800c152:	ee18 0a10 	vmov	r0, s16
 800c156:	f000 f9c5 	bl	800c4e4 <_Bfree>
 800c15a:	464c      	mov	r4, r9
 800c15c:	6923      	ldr	r3, [r4, #16]
 800c15e:	1c5a      	adds	r2, r3, #1
 800c160:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c164:	6122      	str	r2, [r4, #16]
 800c166:	2201      	movs	r2, #1
 800c168:	615a      	str	r2, [r3, #20]
 800c16a:	e7bb      	b.n	800c0e4 <__gethex+0x3c8>
 800c16c:	6922      	ldr	r2, [r4, #16]
 800c16e:	455a      	cmp	r2, fp
 800c170:	dd0b      	ble.n	800c18a <__gethex+0x46e>
 800c172:	2101      	movs	r1, #1
 800c174:	4620      	mov	r0, r4
 800c176:	f7ff fd6a 	bl	800bc4e <rshift>
 800c17a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c17e:	3501      	adds	r5, #1
 800c180:	42ab      	cmp	r3, r5
 800c182:	f6ff aed0 	blt.w	800bf26 <__gethex+0x20a>
 800c186:	2701      	movs	r7, #1
 800c188:	e7c0      	b.n	800c10c <__gethex+0x3f0>
 800c18a:	f016 061f 	ands.w	r6, r6, #31
 800c18e:	d0fa      	beq.n	800c186 <__gethex+0x46a>
 800c190:	449a      	add	sl, r3
 800c192:	f1c6 0620 	rsb	r6, r6, #32
 800c196:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800c19a:	f000 fa59 	bl	800c650 <__hi0bits>
 800c19e:	42b0      	cmp	r0, r6
 800c1a0:	dbe7      	blt.n	800c172 <__gethex+0x456>
 800c1a2:	e7f0      	b.n	800c186 <__gethex+0x46a>
 800c1a4:	0800eb14 	.word	0x0800eb14

0800c1a8 <L_shift>:
 800c1a8:	f1c2 0208 	rsb	r2, r2, #8
 800c1ac:	0092      	lsls	r2, r2, #2
 800c1ae:	b570      	push	{r4, r5, r6, lr}
 800c1b0:	f1c2 0620 	rsb	r6, r2, #32
 800c1b4:	6843      	ldr	r3, [r0, #4]
 800c1b6:	6804      	ldr	r4, [r0, #0]
 800c1b8:	fa03 f506 	lsl.w	r5, r3, r6
 800c1bc:	432c      	orrs	r4, r5
 800c1be:	40d3      	lsrs	r3, r2
 800c1c0:	6004      	str	r4, [r0, #0]
 800c1c2:	f840 3f04 	str.w	r3, [r0, #4]!
 800c1c6:	4288      	cmp	r0, r1
 800c1c8:	d3f4      	bcc.n	800c1b4 <L_shift+0xc>
 800c1ca:	bd70      	pop	{r4, r5, r6, pc}

0800c1cc <__match>:
 800c1cc:	b530      	push	{r4, r5, lr}
 800c1ce:	6803      	ldr	r3, [r0, #0]
 800c1d0:	3301      	adds	r3, #1
 800c1d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c1d6:	b914      	cbnz	r4, 800c1de <__match+0x12>
 800c1d8:	6003      	str	r3, [r0, #0]
 800c1da:	2001      	movs	r0, #1
 800c1dc:	bd30      	pop	{r4, r5, pc}
 800c1de:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c1e2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c1e6:	2d19      	cmp	r5, #25
 800c1e8:	bf98      	it	ls
 800c1ea:	3220      	addls	r2, #32
 800c1ec:	42a2      	cmp	r2, r4
 800c1ee:	d0f0      	beq.n	800c1d2 <__match+0x6>
 800c1f0:	2000      	movs	r0, #0
 800c1f2:	e7f3      	b.n	800c1dc <__match+0x10>

0800c1f4 <__hexnan>:
 800c1f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1f8:	680b      	ldr	r3, [r1, #0]
 800c1fa:	6801      	ldr	r1, [r0, #0]
 800c1fc:	115e      	asrs	r6, r3, #5
 800c1fe:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c202:	f013 031f 	ands.w	r3, r3, #31
 800c206:	b087      	sub	sp, #28
 800c208:	bf18      	it	ne
 800c20a:	3604      	addne	r6, #4
 800c20c:	2500      	movs	r5, #0
 800c20e:	1f37      	subs	r7, r6, #4
 800c210:	4682      	mov	sl, r0
 800c212:	4690      	mov	r8, r2
 800c214:	9301      	str	r3, [sp, #4]
 800c216:	f846 5c04 	str.w	r5, [r6, #-4]
 800c21a:	46b9      	mov	r9, r7
 800c21c:	463c      	mov	r4, r7
 800c21e:	9502      	str	r5, [sp, #8]
 800c220:	46ab      	mov	fp, r5
 800c222:	784a      	ldrb	r2, [r1, #1]
 800c224:	1c4b      	adds	r3, r1, #1
 800c226:	9303      	str	r3, [sp, #12]
 800c228:	b342      	cbz	r2, 800c27c <__hexnan+0x88>
 800c22a:	4610      	mov	r0, r2
 800c22c:	9105      	str	r1, [sp, #20]
 800c22e:	9204      	str	r2, [sp, #16]
 800c230:	f7ff fd5f 	bl	800bcf2 <__hexdig_fun>
 800c234:	2800      	cmp	r0, #0
 800c236:	d14f      	bne.n	800c2d8 <__hexnan+0xe4>
 800c238:	9a04      	ldr	r2, [sp, #16]
 800c23a:	9905      	ldr	r1, [sp, #20]
 800c23c:	2a20      	cmp	r2, #32
 800c23e:	d818      	bhi.n	800c272 <__hexnan+0x7e>
 800c240:	9b02      	ldr	r3, [sp, #8]
 800c242:	459b      	cmp	fp, r3
 800c244:	dd13      	ble.n	800c26e <__hexnan+0x7a>
 800c246:	454c      	cmp	r4, r9
 800c248:	d206      	bcs.n	800c258 <__hexnan+0x64>
 800c24a:	2d07      	cmp	r5, #7
 800c24c:	dc04      	bgt.n	800c258 <__hexnan+0x64>
 800c24e:	462a      	mov	r2, r5
 800c250:	4649      	mov	r1, r9
 800c252:	4620      	mov	r0, r4
 800c254:	f7ff ffa8 	bl	800c1a8 <L_shift>
 800c258:	4544      	cmp	r4, r8
 800c25a:	d950      	bls.n	800c2fe <__hexnan+0x10a>
 800c25c:	2300      	movs	r3, #0
 800c25e:	f1a4 0904 	sub.w	r9, r4, #4
 800c262:	f844 3c04 	str.w	r3, [r4, #-4]
 800c266:	f8cd b008 	str.w	fp, [sp, #8]
 800c26a:	464c      	mov	r4, r9
 800c26c:	461d      	mov	r5, r3
 800c26e:	9903      	ldr	r1, [sp, #12]
 800c270:	e7d7      	b.n	800c222 <__hexnan+0x2e>
 800c272:	2a29      	cmp	r2, #41	; 0x29
 800c274:	d156      	bne.n	800c324 <__hexnan+0x130>
 800c276:	3102      	adds	r1, #2
 800c278:	f8ca 1000 	str.w	r1, [sl]
 800c27c:	f1bb 0f00 	cmp.w	fp, #0
 800c280:	d050      	beq.n	800c324 <__hexnan+0x130>
 800c282:	454c      	cmp	r4, r9
 800c284:	d206      	bcs.n	800c294 <__hexnan+0xa0>
 800c286:	2d07      	cmp	r5, #7
 800c288:	dc04      	bgt.n	800c294 <__hexnan+0xa0>
 800c28a:	462a      	mov	r2, r5
 800c28c:	4649      	mov	r1, r9
 800c28e:	4620      	mov	r0, r4
 800c290:	f7ff ff8a 	bl	800c1a8 <L_shift>
 800c294:	4544      	cmp	r4, r8
 800c296:	d934      	bls.n	800c302 <__hexnan+0x10e>
 800c298:	f1a8 0204 	sub.w	r2, r8, #4
 800c29c:	4623      	mov	r3, r4
 800c29e:	f853 1b04 	ldr.w	r1, [r3], #4
 800c2a2:	f842 1f04 	str.w	r1, [r2, #4]!
 800c2a6:	429f      	cmp	r7, r3
 800c2a8:	d2f9      	bcs.n	800c29e <__hexnan+0xaa>
 800c2aa:	1b3b      	subs	r3, r7, r4
 800c2ac:	f023 0303 	bic.w	r3, r3, #3
 800c2b0:	3304      	adds	r3, #4
 800c2b2:	3401      	adds	r4, #1
 800c2b4:	3e03      	subs	r6, #3
 800c2b6:	42b4      	cmp	r4, r6
 800c2b8:	bf88      	it	hi
 800c2ba:	2304      	movhi	r3, #4
 800c2bc:	4443      	add	r3, r8
 800c2be:	2200      	movs	r2, #0
 800c2c0:	f843 2b04 	str.w	r2, [r3], #4
 800c2c4:	429f      	cmp	r7, r3
 800c2c6:	d2fb      	bcs.n	800c2c0 <__hexnan+0xcc>
 800c2c8:	683b      	ldr	r3, [r7, #0]
 800c2ca:	b91b      	cbnz	r3, 800c2d4 <__hexnan+0xe0>
 800c2cc:	4547      	cmp	r7, r8
 800c2ce:	d127      	bne.n	800c320 <__hexnan+0x12c>
 800c2d0:	2301      	movs	r3, #1
 800c2d2:	603b      	str	r3, [r7, #0]
 800c2d4:	2005      	movs	r0, #5
 800c2d6:	e026      	b.n	800c326 <__hexnan+0x132>
 800c2d8:	3501      	adds	r5, #1
 800c2da:	2d08      	cmp	r5, #8
 800c2dc:	f10b 0b01 	add.w	fp, fp, #1
 800c2e0:	dd06      	ble.n	800c2f0 <__hexnan+0xfc>
 800c2e2:	4544      	cmp	r4, r8
 800c2e4:	d9c3      	bls.n	800c26e <__hexnan+0x7a>
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	f844 3c04 	str.w	r3, [r4, #-4]
 800c2ec:	2501      	movs	r5, #1
 800c2ee:	3c04      	subs	r4, #4
 800c2f0:	6822      	ldr	r2, [r4, #0]
 800c2f2:	f000 000f 	and.w	r0, r0, #15
 800c2f6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800c2fa:	6022      	str	r2, [r4, #0]
 800c2fc:	e7b7      	b.n	800c26e <__hexnan+0x7a>
 800c2fe:	2508      	movs	r5, #8
 800c300:	e7b5      	b.n	800c26e <__hexnan+0x7a>
 800c302:	9b01      	ldr	r3, [sp, #4]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d0df      	beq.n	800c2c8 <__hexnan+0xd4>
 800c308:	f04f 32ff 	mov.w	r2, #4294967295
 800c30c:	f1c3 0320 	rsb	r3, r3, #32
 800c310:	fa22 f303 	lsr.w	r3, r2, r3
 800c314:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c318:	401a      	ands	r2, r3
 800c31a:	f846 2c04 	str.w	r2, [r6, #-4]
 800c31e:	e7d3      	b.n	800c2c8 <__hexnan+0xd4>
 800c320:	3f04      	subs	r7, #4
 800c322:	e7d1      	b.n	800c2c8 <__hexnan+0xd4>
 800c324:	2004      	movs	r0, #4
 800c326:	b007      	add	sp, #28
 800c328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c32c <_localeconv_r>:
 800c32c:	4800      	ldr	r0, [pc, #0]	; (800c330 <_localeconv_r+0x4>)
 800c32e:	4770      	bx	lr
 800c330:	20000170 	.word	0x20000170

0800c334 <__retarget_lock_init_recursive>:
 800c334:	4770      	bx	lr

0800c336 <__retarget_lock_acquire_recursive>:
 800c336:	4770      	bx	lr

0800c338 <__retarget_lock_release_recursive>:
 800c338:	4770      	bx	lr
	...

0800c33c <_lseek_r>:
 800c33c:	b538      	push	{r3, r4, r5, lr}
 800c33e:	4d07      	ldr	r5, [pc, #28]	; (800c35c <_lseek_r+0x20>)
 800c340:	4604      	mov	r4, r0
 800c342:	4608      	mov	r0, r1
 800c344:	4611      	mov	r1, r2
 800c346:	2200      	movs	r2, #0
 800c348:	602a      	str	r2, [r5, #0]
 800c34a:	461a      	mov	r2, r3
 800c34c:	f7f7 f99b 	bl	8003686 <_lseek>
 800c350:	1c43      	adds	r3, r0, #1
 800c352:	d102      	bne.n	800c35a <_lseek_r+0x1e>
 800c354:	682b      	ldr	r3, [r5, #0]
 800c356:	b103      	cbz	r3, 800c35a <_lseek_r+0x1e>
 800c358:	6023      	str	r3, [r4, #0]
 800c35a:	bd38      	pop	{r3, r4, r5, pc}
 800c35c:	200038f4 	.word	0x200038f4

0800c360 <__swhatbuf_r>:
 800c360:	b570      	push	{r4, r5, r6, lr}
 800c362:	460e      	mov	r6, r1
 800c364:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c368:	2900      	cmp	r1, #0
 800c36a:	b096      	sub	sp, #88	; 0x58
 800c36c:	4614      	mov	r4, r2
 800c36e:	461d      	mov	r5, r3
 800c370:	da07      	bge.n	800c382 <__swhatbuf_r+0x22>
 800c372:	2300      	movs	r3, #0
 800c374:	602b      	str	r3, [r5, #0]
 800c376:	89b3      	ldrh	r3, [r6, #12]
 800c378:	061a      	lsls	r2, r3, #24
 800c37a:	d410      	bmi.n	800c39e <__swhatbuf_r+0x3e>
 800c37c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c380:	e00e      	b.n	800c3a0 <__swhatbuf_r+0x40>
 800c382:	466a      	mov	r2, sp
 800c384:	f001 f846 	bl	800d414 <_fstat_r>
 800c388:	2800      	cmp	r0, #0
 800c38a:	dbf2      	blt.n	800c372 <__swhatbuf_r+0x12>
 800c38c:	9a01      	ldr	r2, [sp, #4]
 800c38e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c392:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c396:	425a      	negs	r2, r3
 800c398:	415a      	adcs	r2, r3
 800c39a:	602a      	str	r2, [r5, #0]
 800c39c:	e7ee      	b.n	800c37c <__swhatbuf_r+0x1c>
 800c39e:	2340      	movs	r3, #64	; 0x40
 800c3a0:	2000      	movs	r0, #0
 800c3a2:	6023      	str	r3, [r4, #0]
 800c3a4:	b016      	add	sp, #88	; 0x58
 800c3a6:	bd70      	pop	{r4, r5, r6, pc}

0800c3a8 <__smakebuf_r>:
 800c3a8:	898b      	ldrh	r3, [r1, #12]
 800c3aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c3ac:	079d      	lsls	r5, r3, #30
 800c3ae:	4606      	mov	r6, r0
 800c3b0:	460c      	mov	r4, r1
 800c3b2:	d507      	bpl.n	800c3c4 <__smakebuf_r+0x1c>
 800c3b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c3b8:	6023      	str	r3, [r4, #0]
 800c3ba:	6123      	str	r3, [r4, #16]
 800c3bc:	2301      	movs	r3, #1
 800c3be:	6163      	str	r3, [r4, #20]
 800c3c0:	b002      	add	sp, #8
 800c3c2:	bd70      	pop	{r4, r5, r6, pc}
 800c3c4:	ab01      	add	r3, sp, #4
 800c3c6:	466a      	mov	r2, sp
 800c3c8:	f7ff ffca 	bl	800c360 <__swhatbuf_r>
 800c3cc:	9900      	ldr	r1, [sp, #0]
 800c3ce:	4605      	mov	r5, r0
 800c3d0:	4630      	mov	r0, r6
 800c3d2:	f7fc fb6d 	bl	8008ab0 <_malloc_r>
 800c3d6:	b948      	cbnz	r0, 800c3ec <__smakebuf_r+0x44>
 800c3d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3dc:	059a      	lsls	r2, r3, #22
 800c3de:	d4ef      	bmi.n	800c3c0 <__smakebuf_r+0x18>
 800c3e0:	f023 0303 	bic.w	r3, r3, #3
 800c3e4:	f043 0302 	orr.w	r3, r3, #2
 800c3e8:	81a3      	strh	r3, [r4, #12]
 800c3ea:	e7e3      	b.n	800c3b4 <__smakebuf_r+0xc>
 800c3ec:	4b0d      	ldr	r3, [pc, #52]	; (800c424 <__smakebuf_r+0x7c>)
 800c3ee:	62b3      	str	r3, [r6, #40]	; 0x28
 800c3f0:	89a3      	ldrh	r3, [r4, #12]
 800c3f2:	6020      	str	r0, [r4, #0]
 800c3f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c3f8:	81a3      	strh	r3, [r4, #12]
 800c3fa:	9b00      	ldr	r3, [sp, #0]
 800c3fc:	6163      	str	r3, [r4, #20]
 800c3fe:	9b01      	ldr	r3, [sp, #4]
 800c400:	6120      	str	r0, [r4, #16]
 800c402:	b15b      	cbz	r3, 800c41c <__smakebuf_r+0x74>
 800c404:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c408:	4630      	mov	r0, r6
 800c40a:	f001 f815 	bl	800d438 <_isatty_r>
 800c40e:	b128      	cbz	r0, 800c41c <__smakebuf_r+0x74>
 800c410:	89a3      	ldrh	r3, [r4, #12]
 800c412:	f023 0303 	bic.w	r3, r3, #3
 800c416:	f043 0301 	orr.w	r3, r3, #1
 800c41a:	81a3      	strh	r3, [r4, #12]
 800c41c:	89a0      	ldrh	r0, [r4, #12]
 800c41e:	4305      	orrs	r5, r0
 800c420:	81a5      	strh	r5, [r4, #12]
 800c422:	e7cd      	b.n	800c3c0 <__smakebuf_r+0x18>
 800c424:	0800baad 	.word	0x0800baad

0800c428 <__ascii_mbtowc>:
 800c428:	b082      	sub	sp, #8
 800c42a:	b901      	cbnz	r1, 800c42e <__ascii_mbtowc+0x6>
 800c42c:	a901      	add	r1, sp, #4
 800c42e:	b142      	cbz	r2, 800c442 <__ascii_mbtowc+0x1a>
 800c430:	b14b      	cbz	r3, 800c446 <__ascii_mbtowc+0x1e>
 800c432:	7813      	ldrb	r3, [r2, #0]
 800c434:	600b      	str	r3, [r1, #0]
 800c436:	7812      	ldrb	r2, [r2, #0]
 800c438:	1e10      	subs	r0, r2, #0
 800c43a:	bf18      	it	ne
 800c43c:	2001      	movne	r0, #1
 800c43e:	b002      	add	sp, #8
 800c440:	4770      	bx	lr
 800c442:	4610      	mov	r0, r2
 800c444:	e7fb      	b.n	800c43e <__ascii_mbtowc+0x16>
 800c446:	f06f 0001 	mvn.w	r0, #1
 800c44a:	e7f8      	b.n	800c43e <__ascii_mbtowc+0x16>

0800c44c <__malloc_lock>:
 800c44c:	4801      	ldr	r0, [pc, #4]	; (800c454 <__malloc_lock+0x8>)
 800c44e:	f7ff bf72 	b.w	800c336 <__retarget_lock_acquire_recursive>
 800c452:	bf00      	nop
 800c454:	200038ec 	.word	0x200038ec

0800c458 <__malloc_unlock>:
 800c458:	4801      	ldr	r0, [pc, #4]	; (800c460 <__malloc_unlock+0x8>)
 800c45a:	f7ff bf6d 	b.w	800c338 <__retarget_lock_release_recursive>
 800c45e:	bf00      	nop
 800c460:	200038ec 	.word	0x200038ec

0800c464 <_Balloc>:
 800c464:	b570      	push	{r4, r5, r6, lr}
 800c466:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c468:	4604      	mov	r4, r0
 800c46a:	460d      	mov	r5, r1
 800c46c:	b976      	cbnz	r6, 800c48c <_Balloc+0x28>
 800c46e:	2010      	movs	r0, #16
 800c470:	f7fc fab0 	bl	80089d4 <malloc>
 800c474:	4602      	mov	r2, r0
 800c476:	6260      	str	r0, [r4, #36]	; 0x24
 800c478:	b920      	cbnz	r0, 800c484 <_Balloc+0x20>
 800c47a:	4b18      	ldr	r3, [pc, #96]	; (800c4dc <_Balloc+0x78>)
 800c47c:	4818      	ldr	r0, [pc, #96]	; (800c4e0 <_Balloc+0x7c>)
 800c47e:	2166      	movs	r1, #102	; 0x66
 800c480:	f000 ff98 	bl	800d3b4 <__assert_func>
 800c484:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c488:	6006      	str	r6, [r0, #0]
 800c48a:	60c6      	str	r6, [r0, #12]
 800c48c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c48e:	68f3      	ldr	r3, [r6, #12]
 800c490:	b183      	cbz	r3, 800c4b4 <_Balloc+0x50>
 800c492:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c494:	68db      	ldr	r3, [r3, #12]
 800c496:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c49a:	b9b8      	cbnz	r0, 800c4cc <_Balloc+0x68>
 800c49c:	2101      	movs	r1, #1
 800c49e:	fa01 f605 	lsl.w	r6, r1, r5
 800c4a2:	1d72      	adds	r2, r6, #5
 800c4a4:	0092      	lsls	r2, r2, #2
 800c4a6:	4620      	mov	r0, r4
 800c4a8:	f000 fc97 	bl	800cdda <_calloc_r>
 800c4ac:	b160      	cbz	r0, 800c4c8 <_Balloc+0x64>
 800c4ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c4b2:	e00e      	b.n	800c4d2 <_Balloc+0x6e>
 800c4b4:	2221      	movs	r2, #33	; 0x21
 800c4b6:	2104      	movs	r1, #4
 800c4b8:	4620      	mov	r0, r4
 800c4ba:	f000 fc8e 	bl	800cdda <_calloc_r>
 800c4be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c4c0:	60f0      	str	r0, [r6, #12]
 800c4c2:	68db      	ldr	r3, [r3, #12]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d1e4      	bne.n	800c492 <_Balloc+0x2e>
 800c4c8:	2000      	movs	r0, #0
 800c4ca:	bd70      	pop	{r4, r5, r6, pc}
 800c4cc:	6802      	ldr	r2, [r0, #0]
 800c4ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c4d8:	e7f7      	b.n	800c4ca <_Balloc+0x66>
 800c4da:	bf00      	nop
 800c4dc:	0800ea9e 	.word	0x0800ea9e
 800c4e0:	0800ec08 	.word	0x0800ec08

0800c4e4 <_Bfree>:
 800c4e4:	b570      	push	{r4, r5, r6, lr}
 800c4e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c4e8:	4605      	mov	r5, r0
 800c4ea:	460c      	mov	r4, r1
 800c4ec:	b976      	cbnz	r6, 800c50c <_Bfree+0x28>
 800c4ee:	2010      	movs	r0, #16
 800c4f0:	f7fc fa70 	bl	80089d4 <malloc>
 800c4f4:	4602      	mov	r2, r0
 800c4f6:	6268      	str	r0, [r5, #36]	; 0x24
 800c4f8:	b920      	cbnz	r0, 800c504 <_Bfree+0x20>
 800c4fa:	4b09      	ldr	r3, [pc, #36]	; (800c520 <_Bfree+0x3c>)
 800c4fc:	4809      	ldr	r0, [pc, #36]	; (800c524 <_Bfree+0x40>)
 800c4fe:	218a      	movs	r1, #138	; 0x8a
 800c500:	f000 ff58 	bl	800d3b4 <__assert_func>
 800c504:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c508:	6006      	str	r6, [r0, #0]
 800c50a:	60c6      	str	r6, [r0, #12]
 800c50c:	b13c      	cbz	r4, 800c51e <_Bfree+0x3a>
 800c50e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c510:	6862      	ldr	r2, [r4, #4]
 800c512:	68db      	ldr	r3, [r3, #12]
 800c514:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c518:	6021      	str	r1, [r4, #0]
 800c51a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c51e:	bd70      	pop	{r4, r5, r6, pc}
 800c520:	0800ea9e 	.word	0x0800ea9e
 800c524:	0800ec08 	.word	0x0800ec08

0800c528 <__multadd>:
 800c528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c52c:	690e      	ldr	r6, [r1, #16]
 800c52e:	4607      	mov	r7, r0
 800c530:	4698      	mov	r8, r3
 800c532:	460c      	mov	r4, r1
 800c534:	f101 0014 	add.w	r0, r1, #20
 800c538:	2300      	movs	r3, #0
 800c53a:	6805      	ldr	r5, [r0, #0]
 800c53c:	b2a9      	uxth	r1, r5
 800c53e:	fb02 8101 	mla	r1, r2, r1, r8
 800c542:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800c546:	0c2d      	lsrs	r5, r5, #16
 800c548:	fb02 c505 	mla	r5, r2, r5, ip
 800c54c:	b289      	uxth	r1, r1
 800c54e:	3301      	adds	r3, #1
 800c550:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800c554:	429e      	cmp	r6, r3
 800c556:	f840 1b04 	str.w	r1, [r0], #4
 800c55a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800c55e:	dcec      	bgt.n	800c53a <__multadd+0x12>
 800c560:	f1b8 0f00 	cmp.w	r8, #0
 800c564:	d022      	beq.n	800c5ac <__multadd+0x84>
 800c566:	68a3      	ldr	r3, [r4, #8]
 800c568:	42b3      	cmp	r3, r6
 800c56a:	dc19      	bgt.n	800c5a0 <__multadd+0x78>
 800c56c:	6861      	ldr	r1, [r4, #4]
 800c56e:	4638      	mov	r0, r7
 800c570:	3101      	adds	r1, #1
 800c572:	f7ff ff77 	bl	800c464 <_Balloc>
 800c576:	4605      	mov	r5, r0
 800c578:	b928      	cbnz	r0, 800c586 <__multadd+0x5e>
 800c57a:	4602      	mov	r2, r0
 800c57c:	4b0d      	ldr	r3, [pc, #52]	; (800c5b4 <__multadd+0x8c>)
 800c57e:	480e      	ldr	r0, [pc, #56]	; (800c5b8 <__multadd+0x90>)
 800c580:	21b5      	movs	r1, #181	; 0xb5
 800c582:	f000 ff17 	bl	800d3b4 <__assert_func>
 800c586:	6922      	ldr	r2, [r4, #16]
 800c588:	3202      	adds	r2, #2
 800c58a:	f104 010c 	add.w	r1, r4, #12
 800c58e:	0092      	lsls	r2, r2, #2
 800c590:	300c      	adds	r0, #12
 800c592:	f7fc fa27 	bl	80089e4 <memcpy>
 800c596:	4621      	mov	r1, r4
 800c598:	4638      	mov	r0, r7
 800c59a:	f7ff ffa3 	bl	800c4e4 <_Bfree>
 800c59e:	462c      	mov	r4, r5
 800c5a0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800c5a4:	3601      	adds	r6, #1
 800c5a6:	f8c3 8014 	str.w	r8, [r3, #20]
 800c5aa:	6126      	str	r6, [r4, #16]
 800c5ac:	4620      	mov	r0, r4
 800c5ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5b2:	bf00      	nop
 800c5b4:	0800eb14 	.word	0x0800eb14
 800c5b8:	0800ec08 	.word	0x0800ec08

0800c5bc <__s2b>:
 800c5bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c5c0:	460c      	mov	r4, r1
 800c5c2:	4615      	mov	r5, r2
 800c5c4:	461f      	mov	r7, r3
 800c5c6:	2209      	movs	r2, #9
 800c5c8:	3308      	adds	r3, #8
 800c5ca:	4606      	mov	r6, r0
 800c5cc:	fb93 f3f2 	sdiv	r3, r3, r2
 800c5d0:	2100      	movs	r1, #0
 800c5d2:	2201      	movs	r2, #1
 800c5d4:	429a      	cmp	r2, r3
 800c5d6:	db09      	blt.n	800c5ec <__s2b+0x30>
 800c5d8:	4630      	mov	r0, r6
 800c5da:	f7ff ff43 	bl	800c464 <_Balloc>
 800c5de:	b940      	cbnz	r0, 800c5f2 <__s2b+0x36>
 800c5e0:	4602      	mov	r2, r0
 800c5e2:	4b19      	ldr	r3, [pc, #100]	; (800c648 <__s2b+0x8c>)
 800c5e4:	4819      	ldr	r0, [pc, #100]	; (800c64c <__s2b+0x90>)
 800c5e6:	21ce      	movs	r1, #206	; 0xce
 800c5e8:	f000 fee4 	bl	800d3b4 <__assert_func>
 800c5ec:	0052      	lsls	r2, r2, #1
 800c5ee:	3101      	adds	r1, #1
 800c5f0:	e7f0      	b.n	800c5d4 <__s2b+0x18>
 800c5f2:	9b08      	ldr	r3, [sp, #32]
 800c5f4:	6143      	str	r3, [r0, #20]
 800c5f6:	2d09      	cmp	r5, #9
 800c5f8:	f04f 0301 	mov.w	r3, #1
 800c5fc:	6103      	str	r3, [r0, #16]
 800c5fe:	dd16      	ble.n	800c62e <__s2b+0x72>
 800c600:	f104 0909 	add.w	r9, r4, #9
 800c604:	46c8      	mov	r8, r9
 800c606:	442c      	add	r4, r5
 800c608:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c60c:	4601      	mov	r1, r0
 800c60e:	3b30      	subs	r3, #48	; 0x30
 800c610:	220a      	movs	r2, #10
 800c612:	4630      	mov	r0, r6
 800c614:	f7ff ff88 	bl	800c528 <__multadd>
 800c618:	45a0      	cmp	r8, r4
 800c61a:	d1f5      	bne.n	800c608 <__s2b+0x4c>
 800c61c:	f1a5 0408 	sub.w	r4, r5, #8
 800c620:	444c      	add	r4, r9
 800c622:	1b2d      	subs	r5, r5, r4
 800c624:	1963      	adds	r3, r4, r5
 800c626:	42bb      	cmp	r3, r7
 800c628:	db04      	blt.n	800c634 <__s2b+0x78>
 800c62a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c62e:	340a      	adds	r4, #10
 800c630:	2509      	movs	r5, #9
 800c632:	e7f6      	b.n	800c622 <__s2b+0x66>
 800c634:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c638:	4601      	mov	r1, r0
 800c63a:	3b30      	subs	r3, #48	; 0x30
 800c63c:	220a      	movs	r2, #10
 800c63e:	4630      	mov	r0, r6
 800c640:	f7ff ff72 	bl	800c528 <__multadd>
 800c644:	e7ee      	b.n	800c624 <__s2b+0x68>
 800c646:	bf00      	nop
 800c648:	0800eb14 	.word	0x0800eb14
 800c64c:	0800ec08 	.word	0x0800ec08

0800c650 <__hi0bits>:
 800c650:	0c03      	lsrs	r3, r0, #16
 800c652:	041b      	lsls	r3, r3, #16
 800c654:	b9d3      	cbnz	r3, 800c68c <__hi0bits+0x3c>
 800c656:	0400      	lsls	r0, r0, #16
 800c658:	2310      	movs	r3, #16
 800c65a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c65e:	bf04      	itt	eq
 800c660:	0200      	lsleq	r0, r0, #8
 800c662:	3308      	addeq	r3, #8
 800c664:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c668:	bf04      	itt	eq
 800c66a:	0100      	lsleq	r0, r0, #4
 800c66c:	3304      	addeq	r3, #4
 800c66e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c672:	bf04      	itt	eq
 800c674:	0080      	lsleq	r0, r0, #2
 800c676:	3302      	addeq	r3, #2
 800c678:	2800      	cmp	r0, #0
 800c67a:	db05      	blt.n	800c688 <__hi0bits+0x38>
 800c67c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c680:	f103 0301 	add.w	r3, r3, #1
 800c684:	bf08      	it	eq
 800c686:	2320      	moveq	r3, #32
 800c688:	4618      	mov	r0, r3
 800c68a:	4770      	bx	lr
 800c68c:	2300      	movs	r3, #0
 800c68e:	e7e4      	b.n	800c65a <__hi0bits+0xa>

0800c690 <__lo0bits>:
 800c690:	6803      	ldr	r3, [r0, #0]
 800c692:	f013 0207 	ands.w	r2, r3, #7
 800c696:	4601      	mov	r1, r0
 800c698:	d00b      	beq.n	800c6b2 <__lo0bits+0x22>
 800c69a:	07da      	lsls	r2, r3, #31
 800c69c:	d424      	bmi.n	800c6e8 <__lo0bits+0x58>
 800c69e:	0798      	lsls	r0, r3, #30
 800c6a0:	bf49      	itett	mi
 800c6a2:	085b      	lsrmi	r3, r3, #1
 800c6a4:	089b      	lsrpl	r3, r3, #2
 800c6a6:	2001      	movmi	r0, #1
 800c6a8:	600b      	strmi	r3, [r1, #0]
 800c6aa:	bf5c      	itt	pl
 800c6ac:	600b      	strpl	r3, [r1, #0]
 800c6ae:	2002      	movpl	r0, #2
 800c6b0:	4770      	bx	lr
 800c6b2:	b298      	uxth	r0, r3
 800c6b4:	b9b0      	cbnz	r0, 800c6e4 <__lo0bits+0x54>
 800c6b6:	0c1b      	lsrs	r3, r3, #16
 800c6b8:	2010      	movs	r0, #16
 800c6ba:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c6be:	bf04      	itt	eq
 800c6c0:	0a1b      	lsreq	r3, r3, #8
 800c6c2:	3008      	addeq	r0, #8
 800c6c4:	071a      	lsls	r2, r3, #28
 800c6c6:	bf04      	itt	eq
 800c6c8:	091b      	lsreq	r3, r3, #4
 800c6ca:	3004      	addeq	r0, #4
 800c6cc:	079a      	lsls	r2, r3, #30
 800c6ce:	bf04      	itt	eq
 800c6d0:	089b      	lsreq	r3, r3, #2
 800c6d2:	3002      	addeq	r0, #2
 800c6d4:	07da      	lsls	r2, r3, #31
 800c6d6:	d403      	bmi.n	800c6e0 <__lo0bits+0x50>
 800c6d8:	085b      	lsrs	r3, r3, #1
 800c6da:	f100 0001 	add.w	r0, r0, #1
 800c6de:	d005      	beq.n	800c6ec <__lo0bits+0x5c>
 800c6e0:	600b      	str	r3, [r1, #0]
 800c6e2:	4770      	bx	lr
 800c6e4:	4610      	mov	r0, r2
 800c6e6:	e7e8      	b.n	800c6ba <__lo0bits+0x2a>
 800c6e8:	2000      	movs	r0, #0
 800c6ea:	4770      	bx	lr
 800c6ec:	2020      	movs	r0, #32
 800c6ee:	4770      	bx	lr

0800c6f0 <__i2b>:
 800c6f0:	b510      	push	{r4, lr}
 800c6f2:	460c      	mov	r4, r1
 800c6f4:	2101      	movs	r1, #1
 800c6f6:	f7ff feb5 	bl	800c464 <_Balloc>
 800c6fa:	4602      	mov	r2, r0
 800c6fc:	b928      	cbnz	r0, 800c70a <__i2b+0x1a>
 800c6fe:	4b05      	ldr	r3, [pc, #20]	; (800c714 <__i2b+0x24>)
 800c700:	4805      	ldr	r0, [pc, #20]	; (800c718 <__i2b+0x28>)
 800c702:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c706:	f000 fe55 	bl	800d3b4 <__assert_func>
 800c70a:	2301      	movs	r3, #1
 800c70c:	6144      	str	r4, [r0, #20]
 800c70e:	6103      	str	r3, [r0, #16]
 800c710:	bd10      	pop	{r4, pc}
 800c712:	bf00      	nop
 800c714:	0800eb14 	.word	0x0800eb14
 800c718:	0800ec08 	.word	0x0800ec08

0800c71c <__multiply>:
 800c71c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c720:	4614      	mov	r4, r2
 800c722:	690a      	ldr	r2, [r1, #16]
 800c724:	6923      	ldr	r3, [r4, #16]
 800c726:	429a      	cmp	r2, r3
 800c728:	bfb8      	it	lt
 800c72a:	460b      	movlt	r3, r1
 800c72c:	460d      	mov	r5, r1
 800c72e:	bfbc      	itt	lt
 800c730:	4625      	movlt	r5, r4
 800c732:	461c      	movlt	r4, r3
 800c734:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800c738:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c73c:	68ab      	ldr	r3, [r5, #8]
 800c73e:	6869      	ldr	r1, [r5, #4]
 800c740:	eb0a 0709 	add.w	r7, sl, r9
 800c744:	42bb      	cmp	r3, r7
 800c746:	b085      	sub	sp, #20
 800c748:	bfb8      	it	lt
 800c74a:	3101      	addlt	r1, #1
 800c74c:	f7ff fe8a 	bl	800c464 <_Balloc>
 800c750:	b930      	cbnz	r0, 800c760 <__multiply+0x44>
 800c752:	4602      	mov	r2, r0
 800c754:	4b42      	ldr	r3, [pc, #264]	; (800c860 <__multiply+0x144>)
 800c756:	4843      	ldr	r0, [pc, #268]	; (800c864 <__multiply+0x148>)
 800c758:	f240 115d 	movw	r1, #349	; 0x15d
 800c75c:	f000 fe2a 	bl	800d3b4 <__assert_func>
 800c760:	f100 0614 	add.w	r6, r0, #20
 800c764:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800c768:	4633      	mov	r3, r6
 800c76a:	2200      	movs	r2, #0
 800c76c:	4543      	cmp	r3, r8
 800c76e:	d31e      	bcc.n	800c7ae <__multiply+0x92>
 800c770:	f105 0c14 	add.w	ip, r5, #20
 800c774:	f104 0314 	add.w	r3, r4, #20
 800c778:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800c77c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800c780:	9202      	str	r2, [sp, #8]
 800c782:	ebac 0205 	sub.w	r2, ip, r5
 800c786:	3a15      	subs	r2, #21
 800c788:	f022 0203 	bic.w	r2, r2, #3
 800c78c:	3204      	adds	r2, #4
 800c78e:	f105 0115 	add.w	r1, r5, #21
 800c792:	458c      	cmp	ip, r1
 800c794:	bf38      	it	cc
 800c796:	2204      	movcc	r2, #4
 800c798:	9201      	str	r2, [sp, #4]
 800c79a:	9a02      	ldr	r2, [sp, #8]
 800c79c:	9303      	str	r3, [sp, #12]
 800c79e:	429a      	cmp	r2, r3
 800c7a0:	d808      	bhi.n	800c7b4 <__multiply+0x98>
 800c7a2:	2f00      	cmp	r7, #0
 800c7a4:	dc55      	bgt.n	800c852 <__multiply+0x136>
 800c7a6:	6107      	str	r7, [r0, #16]
 800c7a8:	b005      	add	sp, #20
 800c7aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7ae:	f843 2b04 	str.w	r2, [r3], #4
 800c7b2:	e7db      	b.n	800c76c <__multiply+0x50>
 800c7b4:	f8b3 a000 	ldrh.w	sl, [r3]
 800c7b8:	f1ba 0f00 	cmp.w	sl, #0
 800c7bc:	d020      	beq.n	800c800 <__multiply+0xe4>
 800c7be:	f105 0e14 	add.w	lr, r5, #20
 800c7c2:	46b1      	mov	r9, r6
 800c7c4:	2200      	movs	r2, #0
 800c7c6:	f85e 4b04 	ldr.w	r4, [lr], #4
 800c7ca:	f8d9 b000 	ldr.w	fp, [r9]
 800c7ce:	b2a1      	uxth	r1, r4
 800c7d0:	fa1f fb8b 	uxth.w	fp, fp
 800c7d4:	fb0a b101 	mla	r1, sl, r1, fp
 800c7d8:	4411      	add	r1, r2
 800c7da:	f8d9 2000 	ldr.w	r2, [r9]
 800c7de:	0c24      	lsrs	r4, r4, #16
 800c7e0:	0c12      	lsrs	r2, r2, #16
 800c7e2:	fb0a 2404 	mla	r4, sl, r4, r2
 800c7e6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800c7ea:	b289      	uxth	r1, r1
 800c7ec:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800c7f0:	45f4      	cmp	ip, lr
 800c7f2:	f849 1b04 	str.w	r1, [r9], #4
 800c7f6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800c7fa:	d8e4      	bhi.n	800c7c6 <__multiply+0xaa>
 800c7fc:	9901      	ldr	r1, [sp, #4]
 800c7fe:	5072      	str	r2, [r6, r1]
 800c800:	9a03      	ldr	r2, [sp, #12]
 800c802:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c806:	3304      	adds	r3, #4
 800c808:	f1b9 0f00 	cmp.w	r9, #0
 800c80c:	d01f      	beq.n	800c84e <__multiply+0x132>
 800c80e:	6834      	ldr	r4, [r6, #0]
 800c810:	f105 0114 	add.w	r1, r5, #20
 800c814:	46b6      	mov	lr, r6
 800c816:	f04f 0a00 	mov.w	sl, #0
 800c81a:	880a      	ldrh	r2, [r1, #0]
 800c81c:	f8be b002 	ldrh.w	fp, [lr, #2]
 800c820:	fb09 b202 	mla	r2, r9, r2, fp
 800c824:	4492      	add	sl, r2
 800c826:	b2a4      	uxth	r4, r4
 800c828:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800c82c:	f84e 4b04 	str.w	r4, [lr], #4
 800c830:	f851 4b04 	ldr.w	r4, [r1], #4
 800c834:	f8be 2000 	ldrh.w	r2, [lr]
 800c838:	0c24      	lsrs	r4, r4, #16
 800c83a:	fb09 2404 	mla	r4, r9, r4, r2
 800c83e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800c842:	458c      	cmp	ip, r1
 800c844:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800c848:	d8e7      	bhi.n	800c81a <__multiply+0xfe>
 800c84a:	9a01      	ldr	r2, [sp, #4]
 800c84c:	50b4      	str	r4, [r6, r2]
 800c84e:	3604      	adds	r6, #4
 800c850:	e7a3      	b.n	800c79a <__multiply+0x7e>
 800c852:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c856:	2b00      	cmp	r3, #0
 800c858:	d1a5      	bne.n	800c7a6 <__multiply+0x8a>
 800c85a:	3f01      	subs	r7, #1
 800c85c:	e7a1      	b.n	800c7a2 <__multiply+0x86>
 800c85e:	bf00      	nop
 800c860:	0800eb14 	.word	0x0800eb14
 800c864:	0800ec08 	.word	0x0800ec08

0800c868 <__pow5mult>:
 800c868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c86c:	4615      	mov	r5, r2
 800c86e:	f012 0203 	ands.w	r2, r2, #3
 800c872:	4606      	mov	r6, r0
 800c874:	460f      	mov	r7, r1
 800c876:	d007      	beq.n	800c888 <__pow5mult+0x20>
 800c878:	4c25      	ldr	r4, [pc, #148]	; (800c910 <__pow5mult+0xa8>)
 800c87a:	3a01      	subs	r2, #1
 800c87c:	2300      	movs	r3, #0
 800c87e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c882:	f7ff fe51 	bl	800c528 <__multadd>
 800c886:	4607      	mov	r7, r0
 800c888:	10ad      	asrs	r5, r5, #2
 800c88a:	d03d      	beq.n	800c908 <__pow5mult+0xa0>
 800c88c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c88e:	b97c      	cbnz	r4, 800c8b0 <__pow5mult+0x48>
 800c890:	2010      	movs	r0, #16
 800c892:	f7fc f89f 	bl	80089d4 <malloc>
 800c896:	4602      	mov	r2, r0
 800c898:	6270      	str	r0, [r6, #36]	; 0x24
 800c89a:	b928      	cbnz	r0, 800c8a8 <__pow5mult+0x40>
 800c89c:	4b1d      	ldr	r3, [pc, #116]	; (800c914 <__pow5mult+0xac>)
 800c89e:	481e      	ldr	r0, [pc, #120]	; (800c918 <__pow5mult+0xb0>)
 800c8a0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c8a4:	f000 fd86 	bl	800d3b4 <__assert_func>
 800c8a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c8ac:	6004      	str	r4, [r0, #0]
 800c8ae:	60c4      	str	r4, [r0, #12]
 800c8b0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c8b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c8b8:	b94c      	cbnz	r4, 800c8ce <__pow5mult+0x66>
 800c8ba:	f240 2171 	movw	r1, #625	; 0x271
 800c8be:	4630      	mov	r0, r6
 800c8c0:	f7ff ff16 	bl	800c6f0 <__i2b>
 800c8c4:	2300      	movs	r3, #0
 800c8c6:	f8c8 0008 	str.w	r0, [r8, #8]
 800c8ca:	4604      	mov	r4, r0
 800c8cc:	6003      	str	r3, [r0, #0]
 800c8ce:	f04f 0900 	mov.w	r9, #0
 800c8d2:	07eb      	lsls	r3, r5, #31
 800c8d4:	d50a      	bpl.n	800c8ec <__pow5mult+0x84>
 800c8d6:	4639      	mov	r1, r7
 800c8d8:	4622      	mov	r2, r4
 800c8da:	4630      	mov	r0, r6
 800c8dc:	f7ff ff1e 	bl	800c71c <__multiply>
 800c8e0:	4639      	mov	r1, r7
 800c8e2:	4680      	mov	r8, r0
 800c8e4:	4630      	mov	r0, r6
 800c8e6:	f7ff fdfd 	bl	800c4e4 <_Bfree>
 800c8ea:	4647      	mov	r7, r8
 800c8ec:	106d      	asrs	r5, r5, #1
 800c8ee:	d00b      	beq.n	800c908 <__pow5mult+0xa0>
 800c8f0:	6820      	ldr	r0, [r4, #0]
 800c8f2:	b938      	cbnz	r0, 800c904 <__pow5mult+0x9c>
 800c8f4:	4622      	mov	r2, r4
 800c8f6:	4621      	mov	r1, r4
 800c8f8:	4630      	mov	r0, r6
 800c8fa:	f7ff ff0f 	bl	800c71c <__multiply>
 800c8fe:	6020      	str	r0, [r4, #0]
 800c900:	f8c0 9000 	str.w	r9, [r0]
 800c904:	4604      	mov	r4, r0
 800c906:	e7e4      	b.n	800c8d2 <__pow5mult+0x6a>
 800c908:	4638      	mov	r0, r7
 800c90a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c90e:	bf00      	nop
 800c910:	0800ed58 	.word	0x0800ed58
 800c914:	0800ea9e 	.word	0x0800ea9e
 800c918:	0800ec08 	.word	0x0800ec08

0800c91c <__lshift>:
 800c91c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c920:	460c      	mov	r4, r1
 800c922:	6849      	ldr	r1, [r1, #4]
 800c924:	6923      	ldr	r3, [r4, #16]
 800c926:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c92a:	68a3      	ldr	r3, [r4, #8]
 800c92c:	4607      	mov	r7, r0
 800c92e:	4691      	mov	r9, r2
 800c930:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c934:	f108 0601 	add.w	r6, r8, #1
 800c938:	42b3      	cmp	r3, r6
 800c93a:	db0b      	blt.n	800c954 <__lshift+0x38>
 800c93c:	4638      	mov	r0, r7
 800c93e:	f7ff fd91 	bl	800c464 <_Balloc>
 800c942:	4605      	mov	r5, r0
 800c944:	b948      	cbnz	r0, 800c95a <__lshift+0x3e>
 800c946:	4602      	mov	r2, r0
 800c948:	4b28      	ldr	r3, [pc, #160]	; (800c9ec <__lshift+0xd0>)
 800c94a:	4829      	ldr	r0, [pc, #164]	; (800c9f0 <__lshift+0xd4>)
 800c94c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c950:	f000 fd30 	bl	800d3b4 <__assert_func>
 800c954:	3101      	adds	r1, #1
 800c956:	005b      	lsls	r3, r3, #1
 800c958:	e7ee      	b.n	800c938 <__lshift+0x1c>
 800c95a:	2300      	movs	r3, #0
 800c95c:	f100 0114 	add.w	r1, r0, #20
 800c960:	f100 0210 	add.w	r2, r0, #16
 800c964:	4618      	mov	r0, r3
 800c966:	4553      	cmp	r3, sl
 800c968:	db33      	blt.n	800c9d2 <__lshift+0xb6>
 800c96a:	6920      	ldr	r0, [r4, #16]
 800c96c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c970:	f104 0314 	add.w	r3, r4, #20
 800c974:	f019 091f 	ands.w	r9, r9, #31
 800c978:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c97c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c980:	d02b      	beq.n	800c9da <__lshift+0xbe>
 800c982:	f1c9 0e20 	rsb	lr, r9, #32
 800c986:	468a      	mov	sl, r1
 800c988:	2200      	movs	r2, #0
 800c98a:	6818      	ldr	r0, [r3, #0]
 800c98c:	fa00 f009 	lsl.w	r0, r0, r9
 800c990:	4302      	orrs	r2, r0
 800c992:	f84a 2b04 	str.w	r2, [sl], #4
 800c996:	f853 2b04 	ldr.w	r2, [r3], #4
 800c99a:	459c      	cmp	ip, r3
 800c99c:	fa22 f20e 	lsr.w	r2, r2, lr
 800c9a0:	d8f3      	bhi.n	800c98a <__lshift+0x6e>
 800c9a2:	ebac 0304 	sub.w	r3, ip, r4
 800c9a6:	3b15      	subs	r3, #21
 800c9a8:	f023 0303 	bic.w	r3, r3, #3
 800c9ac:	3304      	adds	r3, #4
 800c9ae:	f104 0015 	add.w	r0, r4, #21
 800c9b2:	4584      	cmp	ip, r0
 800c9b4:	bf38      	it	cc
 800c9b6:	2304      	movcc	r3, #4
 800c9b8:	50ca      	str	r2, [r1, r3]
 800c9ba:	b10a      	cbz	r2, 800c9c0 <__lshift+0xa4>
 800c9bc:	f108 0602 	add.w	r6, r8, #2
 800c9c0:	3e01      	subs	r6, #1
 800c9c2:	4638      	mov	r0, r7
 800c9c4:	612e      	str	r6, [r5, #16]
 800c9c6:	4621      	mov	r1, r4
 800c9c8:	f7ff fd8c 	bl	800c4e4 <_Bfree>
 800c9cc:	4628      	mov	r0, r5
 800c9ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9d2:	f842 0f04 	str.w	r0, [r2, #4]!
 800c9d6:	3301      	adds	r3, #1
 800c9d8:	e7c5      	b.n	800c966 <__lshift+0x4a>
 800c9da:	3904      	subs	r1, #4
 800c9dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800c9e0:	f841 2f04 	str.w	r2, [r1, #4]!
 800c9e4:	459c      	cmp	ip, r3
 800c9e6:	d8f9      	bhi.n	800c9dc <__lshift+0xc0>
 800c9e8:	e7ea      	b.n	800c9c0 <__lshift+0xa4>
 800c9ea:	bf00      	nop
 800c9ec:	0800eb14 	.word	0x0800eb14
 800c9f0:	0800ec08 	.word	0x0800ec08

0800c9f4 <__mcmp>:
 800c9f4:	b530      	push	{r4, r5, lr}
 800c9f6:	6902      	ldr	r2, [r0, #16]
 800c9f8:	690c      	ldr	r4, [r1, #16]
 800c9fa:	1b12      	subs	r2, r2, r4
 800c9fc:	d10e      	bne.n	800ca1c <__mcmp+0x28>
 800c9fe:	f100 0314 	add.w	r3, r0, #20
 800ca02:	3114      	adds	r1, #20
 800ca04:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ca08:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ca0c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ca10:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ca14:	42a5      	cmp	r5, r4
 800ca16:	d003      	beq.n	800ca20 <__mcmp+0x2c>
 800ca18:	d305      	bcc.n	800ca26 <__mcmp+0x32>
 800ca1a:	2201      	movs	r2, #1
 800ca1c:	4610      	mov	r0, r2
 800ca1e:	bd30      	pop	{r4, r5, pc}
 800ca20:	4283      	cmp	r3, r0
 800ca22:	d3f3      	bcc.n	800ca0c <__mcmp+0x18>
 800ca24:	e7fa      	b.n	800ca1c <__mcmp+0x28>
 800ca26:	f04f 32ff 	mov.w	r2, #4294967295
 800ca2a:	e7f7      	b.n	800ca1c <__mcmp+0x28>

0800ca2c <__mdiff>:
 800ca2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca30:	460c      	mov	r4, r1
 800ca32:	4606      	mov	r6, r0
 800ca34:	4611      	mov	r1, r2
 800ca36:	4620      	mov	r0, r4
 800ca38:	4617      	mov	r7, r2
 800ca3a:	f7ff ffdb 	bl	800c9f4 <__mcmp>
 800ca3e:	1e05      	subs	r5, r0, #0
 800ca40:	d110      	bne.n	800ca64 <__mdiff+0x38>
 800ca42:	4629      	mov	r1, r5
 800ca44:	4630      	mov	r0, r6
 800ca46:	f7ff fd0d 	bl	800c464 <_Balloc>
 800ca4a:	b930      	cbnz	r0, 800ca5a <__mdiff+0x2e>
 800ca4c:	4b39      	ldr	r3, [pc, #228]	; (800cb34 <__mdiff+0x108>)
 800ca4e:	4602      	mov	r2, r0
 800ca50:	f240 2132 	movw	r1, #562	; 0x232
 800ca54:	4838      	ldr	r0, [pc, #224]	; (800cb38 <__mdiff+0x10c>)
 800ca56:	f000 fcad 	bl	800d3b4 <__assert_func>
 800ca5a:	2301      	movs	r3, #1
 800ca5c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ca60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca64:	bfa4      	itt	ge
 800ca66:	463b      	movge	r3, r7
 800ca68:	4627      	movge	r7, r4
 800ca6a:	4630      	mov	r0, r6
 800ca6c:	6879      	ldr	r1, [r7, #4]
 800ca6e:	bfa6      	itte	ge
 800ca70:	461c      	movge	r4, r3
 800ca72:	2500      	movge	r5, #0
 800ca74:	2501      	movlt	r5, #1
 800ca76:	f7ff fcf5 	bl	800c464 <_Balloc>
 800ca7a:	b920      	cbnz	r0, 800ca86 <__mdiff+0x5a>
 800ca7c:	4b2d      	ldr	r3, [pc, #180]	; (800cb34 <__mdiff+0x108>)
 800ca7e:	4602      	mov	r2, r0
 800ca80:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ca84:	e7e6      	b.n	800ca54 <__mdiff+0x28>
 800ca86:	693e      	ldr	r6, [r7, #16]
 800ca88:	60c5      	str	r5, [r0, #12]
 800ca8a:	6925      	ldr	r5, [r4, #16]
 800ca8c:	f107 0114 	add.w	r1, r7, #20
 800ca90:	f104 0914 	add.w	r9, r4, #20
 800ca94:	f100 0e14 	add.w	lr, r0, #20
 800ca98:	f107 0210 	add.w	r2, r7, #16
 800ca9c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800caa0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800caa4:	46f2      	mov	sl, lr
 800caa6:	2700      	movs	r7, #0
 800caa8:	f859 3b04 	ldr.w	r3, [r9], #4
 800caac:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800cab0:	fa1f f883 	uxth.w	r8, r3
 800cab4:	fa17 f78b 	uxtah	r7, r7, fp
 800cab8:	0c1b      	lsrs	r3, r3, #16
 800caba:	eba7 0808 	sub.w	r8, r7, r8
 800cabe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cac2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800cac6:	fa1f f888 	uxth.w	r8, r8
 800caca:	141f      	asrs	r7, r3, #16
 800cacc:	454d      	cmp	r5, r9
 800cace:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800cad2:	f84a 3b04 	str.w	r3, [sl], #4
 800cad6:	d8e7      	bhi.n	800caa8 <__mdiff+0x7c>
 800cad8:	1b2b      	subs	r3, r5, r4
 800cada:	3b15      	subs	r3, #21
 800cadc:	f023 0303 	bic.w	r3, r3, #3
 800cae0:	3304      	adds	r3, #4
 800cae2:	3415      	adds	r4, #21
 800cae4:	42a5      	cmp	r5, r4
 800cae6:	bf38      	it	cc
 800cae8:	2304      	movcc	r3, #4
 800caea:	4419      	add	r1, r3
 800caec:	4473      	add	r3, lr
 800caee:	469e      	mov	lr, r3
 800caf0:	460d      	mov	r5, r1
 800caf2:	4565      	cmp	r5, ip
 800caf4:	d30e      	bcc.n	800cb14 <__mdiff+0xe8>
 800caf6:	f10c 0203 	add.w	r2, ip, #3
 800cafa:	1a52      	subs	r2, r2, r1
 800cafc:	f022 0203 	bic.w	r2, r2, #3
 800cb00:	3903      	subs	r1, #3
 800cb02:	458c      	cmp	ip, r1
 800cb04:	bf38      	it	cc
 800cb06:	2200      	movcc	r2, #0
 800cb08:	441a      	add	r2, r3
 800cb0a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800cb0e:	b17b      	cbz	r3, 800cb30 <__mdiff+0x104>
 800cb10:	6106      	str	r6, [r0, #16]
 800cb12:	e7a5      	b.n	800ca60 <__mdiff+0x34>
 800cb14:	f855 8b04 	ldr.w	r8, [r5], #4
 800cb18:	fa17 f488 	uxtah	r4, r7, r8
 800cb1c:	1422      	asrs	r2, r4, #16
 800cb1e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800cb22:	b2a4      	uxth	r4, r4
 800cb24:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800cb28:	f84e 4b04 	str.w	r4, [lr], #4
 800cb2c:	1417      	asrs	r7, r2, #16
 800cb2e:	e7e0      	b.n	800caf2 <__mdiff+0xc6>
 800cb30:	3e01      	subs	r6, #1
 800cb32:	e7ea      	b.n	800cb0a <__mdiff+0xde>
 800cb34:	0800eb14 	.word	0x0800eb14
 800cb38:	0800ec08 	.word	0x0800ec08

0800cb3c <__ulp>:
 800cb3c:	b082      	sub	sp, #8
 800cb3e:	ed8d 0b00 	vstr	d0, [sp]
 800cb42:	9b01      	ldr	r3, [sp, #4]
 800cb44:	4912      	ldr	r1, [pc, #72]	; (800cb90 <__ulp+0x54>)
 800cb46:	4019      	ands	r1, r3
 800cb48:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800cb4c:	2900      	cmp	r1, #0
 800cb4e:	dd05      	ble.n	800cb5c <__ulp+0x20>
 800cb50:	2200      	movs	r2, #0
 800cb52:	460b      	mov	r3, r1
 800cb54:	ec43 2b10 	vmov	d0, r2, r3
 800cb58:	b002      	add	sp, #8
 800cb5a:	4770      	bx	lr
 800cb5c:	4249      	negs	r1, r1
 800cb5e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800cb62:	ea4f 5021 	mov.w	r0, r1, asr #20
 800cb66:	f04f 0200 	mov.w	r2, #0
 800cb6a:	f04f 0300 	mov.w	r3, #0
 800cb6e:	da04      	bge.n	800cb7a <__ulp+0x3e>
 800cb70:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800cb74:	fa41 f300 	asr.w	r3, r1, r0
 800cb78:	e7ec      	b.n	800cb54 <__ulp+0x18>
 800cb7a:	f1a0 0114 	sub.w	r1, r0, #20
 800cb7e:	291e      	cmp	r1, #30
 800cb80:	bfda      	itte	le
 800cb82:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800cb86:	fa20 f101 	lsrle.w	r1, r0, r1
 800cb8a:	2101      	movgt	r1, #1
 800cb8c:	460a      	mov	r2, r1
 800cb8e:	e7e1      	b.n	800cb54 <__ulp+0x18>
 800cb90:	7ff00000 	.word	0x7ff00000

0800cb94 <__b2d>:
 800cb94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb96:	6905      	ldr	r5, [r0, #16]
 800cb98:	f100 0714 	add.w	r7, r0, #20
 800cb9c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800cba0:	1f2e      	subs	r6, r5, #4
 800cba2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800cba6:	4620      	mov	r0, r4
 800cba8:	f7ff fd52 	bl	800c650 <__hi0bits>
 800cbac:	f1c0 0320 	rsb	r3, r0, #32
 800cbb0:	280a      	cmp	r0, #10
 800cbb2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800cc30 <__b2d+0x9c>
 800cbb6:	600b      	str	r3, [r1, #0]
 800cbb8:	dc14      	bgt.n	800cbe4 <__b2d+0x50>
 800cbba:	f1c0 0e0b 	rsb	lr, r0, #11
 800cbbe:	fa24 f10e 	lsr.w	r1, r4, lr
 800cbc2:	42b7      	cmp	r7, r6
 800cbc4:	ea41 030c 	orr.w	r3, r1, ip
 800cbc8:	bf34      	ite	cc
 800cbca:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800cbce:	2100      	movcs	r1, #0
 800cbd0:	3015      	adds	r0, #21
 800cbd2:	fa04 f000 	lsl.w	r0, r4, r0
 800cbd6:	fa21 f10e 	lsr.w	r1, r1, lr
 800cbda:	ea40 0201 	orr.w	r2, r0, r1
 800cbde:	ec43 2b10 	vmov	d0, r2, r3
 800cbe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cbe4:	42b7      	cmp	r7, r6
 800cbe6:	bf3a      	itte	cc
 800cbe8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800cbec:	f1a5 0608 	subcc.w	r6, r5, #8
 800cbf0:	2100      	movcs	r1, #0
 800cbf2:	380b      	subs	r0, #11
 800cbf4:	d017      	beq.n	800cc26 <__b2d+0x92>
 800cbf6:	f1c0 0c20 	rsb	ip, r0, #32
 800cbfa:	fa04 f500 	lsl.w	r5, r4, r0
 800cbfe:	42be      	cmp	r6, r7
 800cc00:	fa21 f40c 	lsr.w	r4, r1, ip
 800cc04:	ea45 0504 	orr.w	r5, r5, r4
 800cc08:	bf8c      	ite	hi
 800cc0a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800cc0e:	2400      	movls	r4, #0
 800cc10:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800cc14:	fa01 f000 	lsl.w	r0, r1, r0
 800cc18:	fa24 f40c 	lsr.w	r4, r4, ip
 800cc1c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800cc20:	ea40 0204 	orr.w	r2, r0, r4
 800cc24:	e7db      	b.n	800cbde <__b2d+0x4a>
 800cc26:	ea44 030c 	orr.w	r3, r4, ip
 800cc2a:	460a      	mov	r2, r1
 800cc2c:	e7d7      	b.n	800cbde <__b2d+0x4a>
 800cc2e:	bf00      	nop
 800cc30:	3ff00000 	.word	0x3ff00000

0800cc34 <__d2b>:
 800cc34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cc38:	4689      	mov	r9, r1
 800cc3a:	2101      	movs	r1, #1
 800cc3c:	ec57 6b10 	vmov	r6, r7, d0
 800cc40:	4690      	mov	r8, r2
 800cc42:	f7ff fc0f 	bl	800c464 <_Balloc>
 800cc46:	4604      	mov	r4, r0
 800cc48:	b930      	cbnz	r0, 800cc58 <__d2b+0x24>
 800cc4a:	4602      	mov	r2, r0
 800cc4c:	4b25      	ldr	r3, [pc, #148]	; (800cce4 <__d2b+0xb0>)
 800cc4e:	4826      	ldr	r0, [pc, #152]	; (800cce8 <__d2b+0xb4>)
 800cc50:	f240 310a 	movw	r1, #778	; 0x30a
 800cc54:	f000 fbae 	bl	800d3b4 <__assert_func>
 800cc58:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800cc5c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cc60:	bb35      	cbnz	r5, 800ccb0 <__d2b+0x7c>
 800cc62:	2e00      	cmp	r6, #0
 800cc64:	9301      	str	r3, [sp, #4]
 800cc66:	d028      	beq.n	800ccba <__d2b+0x86>
 800cc68:	4668      	mov	r0, sp
 800cc6a:	9600      	str	r6, [sp, #0]
 800cc6c:	f7ff fd10 	bl	800c690 <__lo0bits>
 800cc70:	9900      	ldr	r1, [sp, #0]
 800cc72:	b300      	cbz	r0, 800ccb6 <__d2b+0x82>
 800cc74:	9a01      	ldr	r2, [sp, #4]
 800cc76:	f1c0 0320 	rsb	r3, r0, #32
 800cc7a:	fa02 f303 	lsl.w	r3, r2, r3
 800cc7e:	430b      	orrs	r3, r1
 800cc80:	40c2      	lsrs	r2, r0
 800cc82:	6163      	str	r3, [r4, #20]
 800cc84:	9201      	str	r2, [sp, #4]
 800cc86:	9b01      	ldr	r3, [sp, #4]
 800cc88:	61a3      	str	r3, [r4, #24]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	bf14      	ite	ne
 800cc8e:	2202      	movne	r2, #2
 800cc90:	2201      	moveq	r2, #1
 800cc92:	6122      	str	r2, [r4, #16]
 800cc94:	b1d5      	cbz	r5, 800cccc <__d2b+0x98>
 800cc96:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cc9a:	4405      	add	r5, r0
 800cc9c:	f8c9 5000 	str.w	r5, [r9]
 800cca0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cca4:	f8c8 0000 	str.w	r0, [r8]
 800cca8:	4620      	mov	r0, r4
 800ccaa:	b003      	add	sp, #12
 800ccac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ccb0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ccb4:	e7d5      	b.n	800cc62 <__d2b+0x2e>
 800ccb6:	6161      	str	r1, [r4, #20]
 800ccb8:	e7e5      	b.n	800cc86 <__d2b+0x52>
 800ccba:	a801      	add	r0, sp, #4
 800ccbc:	f7ff fce8 	bl	800c690 <__lo0bits>
 800ccc0:	9b01      	ldr	r3, [sp, #4]
 800ccc2:	6163      	str	r3, [r4, #20]
 800ccc4:	2201      	movs	r2, #1
 800ccc6:	6122      	str	r2, [r4, #16]
 800ccc8:	3020      	adds	r0, #32
 800ccca:	e7e3      	b.n	800cc94 <__d2b+0x60>
 800cccc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ccd0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ccd4:	f8c9 0000 	str.w	r0, [r9]
 800ccd8:	6918      	ldr	r0, [r3, #16]
 800ccda:	f7ff fcb9 	bl	800c650 <__hi0bits>
 800ccde:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cce2:	e7df      	b.n	800cca4 <__d2b+0x70>
 800cce4:	0800eb14 	.word	0x0800eb14
 800cce8:	0800ec08 	.word	0x0800ec08

0800ccec <__ratio>:
 800ccec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccf0:	4688      	mov	r8, r1
 800ccf2:	4669      	mov	r1, sp
 800ccf4:	4681      	mov	r9, r0
 800ccf6:	f7ff ff4d 	bl	800cb94 <__b2d>
 800ccfa:	a901      	add	r1, sp, #4
 800ccfc:	4640      	mov	r0, r8
 800ccfe:	ec55 4b10 	vmov	r4, r5, d0
 800cd02:	f7ff ff47 	bl	800cb94 <__b2d>
 800cd06:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cd0a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800cd0e:	eba3 0c02 	sub.w	ip, r3, r2
 800cd12:	e9dd 3200 	ldrd	r3, r2, [sp]
 800cd16:	1a9b      	subs	r3, r3, r2
 800cd18:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800cd1c:	ec51 0b10 	vmov	r0, r1, d0
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	bfd6      	itet	le
 800cd24:	460a      	movle	r2, r1
 800cd26:	462a      	movgt	r2, r5
 800cd28:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800cd2c:	468b      	mov	fp, r1
 800cd2e:	462f      	mov	r7, r5
 800cd30:	bfd4      	ite	le
 800cd32:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800cd36:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800cd3a:	4620      	mov	r0, r4
 800cd3c:	ee10 2a10 	vmov	r2, s0
 800cd40:	465b      	mov	r3, fp
 800cd42:	4639      	mov	r1, r7
 800cd44:	f7f3 fd82 	bl	800084c <__aeabi_ddiv>
 800cd48:	ec41 0b10 	vmov	d0, r0, r1
 800cd4c:	b003      	add	sp, #12
 800cd4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cd52 <__copybits>:
 800cd52:	3901      	subs	r1, #1
 800cd54:	b570      	push	{r4, r5, r6, lr}
 800cd56:	1149      	asrs	r1, r1, #5
 800cd58:	6914      	ldr	r4, [r2, #16]
 800cd5a:	3101      	adds	r1, #1
 800cd5c:	f102 0314 	add.w	r3, r2, #20
 800cd60:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cd64:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cd68:	1f05      	subs	r5, r0, #4
 800cd6a:	42a3      	cmp	r3, r4
 800cd6c:	d30c      	bcc.n	800cd88 <__copybits+0x36>
 800cd6e:	1aa3      	subs	r3, r4, r2
 800cd70:	3b11      	subs	r3, #17
 800cd72:	f023 0303 	bic.w	r3, r3, #3
 800cd76:	3211      	adds	r2, #17
 800cd78:	42a2      	cmp	r2, r4
 800cd7a:	bf88      	it	hi
 800cd7c:	2300      	movhi	r3, #0
 800cd7e:	4418      	add	r0, r3
 800cd80:	2300      	movs	r3, #0
 800cd82:	4288      	cmp	r0, r1
 800cd84:	d305      	bcc.n	800cd92 <__copybits+0x40>
 800cd86:	bd70      	pop	{r4, r5, r6, pc}
 800cd88:	f853 6b04 	ldr.w	r6, [r3], #4
 800cd8c:	f845 6f04 	str.w	r6, [r5, #4]!
 800cd90:	e7eb      	b.n	800cd6a <__copybits+0x18>
 800cd92:	f840 3b04 	str.w	r3, [r0], #4
 800cd96:	e7f4      	b.n	800cd82 <__copybits+0x30>

0800cd98 <__any_on>:
 800cd98:	f100 0214 	add.w	r2, r0, #20
 800cd9c:	6900      	ldr	r0, [r0, #16]
 800cd9e:	114b      	asrs	r3, r1, #5
 800cda0:	4298      	cmp	r0, r3
 800cda2:	b510      	push	{r4, lr}
 800cda4:	db11      	blt.n	800cdca <__any_on+0x32>
 800cda6:	dd0a      	ble.n	800cdbe <__any_on+0x26>
 800cda8:	f011 011f 	ands.w	r1, r1, #31
 800cdac:	d007      	beq.n	800cdbe <__any_on+0x26>
 800cdae:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800cdb2:	fa24 f001 	lsr.w	r0, r4, r1
 800cdb6:	fa00 f101 	lsl.w	r1, r0, r1
 800cdba:	428c      	cmp	r4, r1
 800cdbc:	d10b      	bne.n	800cdd6 <__any_on+0x3e>
 800cdbe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cdc2:	4293      	cmp	r3, r2
 800cdc4:	d803      	bhi.n	800cdce <__any_on+0x36>
 800cdc6:	2000      	movs	r0, #0
 800cdc8:	bd10      	pop	{r4, pc}
 800cdca:	4603      	mov	r3, r0
 800cdcc:	e7f7      	b.n	800cdbe <__any_on+0x26>
 800cdce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cdd2:	2900      	cmp	r1, #0
 800cdd4:	d0f5      	beq.n	800cdc2 <__any_on+0x2a>
 800cdd6:	2001      	movs	r0, #1
 800cdd8:	e7f6      	b.n	800cdc8 <__any_on+0x30>

0800cdda <_calloc_r>:
 800cdda:	b513      	push	{r0, r1, r4, lr}
 800cddc:	434a      	muls	r2, r1
 800cdde:	4611      	mov	r1, r2
 800cde0:	9201      	str	r2, [sp, #4]
 800cde2:	f7fb fe65 	bl	8008ab0 <_malloc_r>
 800cde6:	4604      	mov	r4, r0
 800cde8:	b118      	cbz	r0, 800cdf2 <_calloc_r+0x18>
 800cdea:	9a01      	ldr	r2, [sp, #4]
 800cdec:	2100      	movs	r1, #0
 800cdee:	f7fb fe07 	bl	8008a00 <memset>
 800cdf2:	4620      	mov	r0, r4
 800cdf4:	b002      	add	sp, #8
 800cdf6:	bd10      	pop	{r4, pc}

0800cdf8 <__ssputs_r>:
 800cdf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cdfc:	688e      	ldr	r6, [r1, #8]
 800cdfe:	429e      	cmp	r6, r3
 800ce00:	4682      	mov	sl, r0
 800ce02:	460c      	mov	r4, r1
 800ce04:	4690      	mov	r8, r2
 800ce06:	461f      	mov	r7, r3
 800ce08:	d838      	bhi.n	800ce7c <__ssputs_r+0x84>
 800ce0a:	898a      	ldrh	r2, [r1, #12]
 800ce0c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ce10:	d032      	beq.n	800ce78 <__ssputs_r+0x80>
 800ce12:	6825      	ldr	r5, [r4, #0]
 800ce14:	6909      	ldr	r1, [r1, #16]
 800ce16:	eba5 0901 	sub.w	r9, r5, r1
 800ce1a:	6965      	ldr	r5, [r4, #20]
 800ce1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ce20:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ce24:	3301      	adds	r3, #1
 800ce26:	444b      	add	r3, r9
 800ce28:	106d      	asrs	r5, r5, #1
 800ce2a:	429d      	cmp	r5, r3
 800ce2c:	bf38      	it	cc
 800ce2e:	461d      	movcc	r5, r3
 800ce30:	0553      	lsls	r3, r2, #21
 800ce32:	d531      	bpl.n	800ce98 <__ssputs_r+0xa0>
 800ce34:	4629      	mov	r1, r5
 800ce36:	f7fb fe3b 	bl	8008ab0 <_malloc_r>
 800ce3a:	4606      	mov	r6, r0
 800ce3c:	b950      	cbnz	r0, 800ce54 <__ssputs_r+0x5c>
 800ce3e:	230c      	movs	r3, #12
 800ce40:	f8ca 3000 	str.w	r3, [sl]
 800ce44:	89a3      	ldrh	r3, [r4, #12]
 800ce46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce4a:	81a3      	strh	r3, [r4, #12]
 800ce4c:	f04f 30ff 	mov.w	r0, #4294967295
 800ce50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce54:	6921      	ldr	r1, [r4, #16]
 800ce56:	464a      	mov	r2, r9
 800ce58:	f7fb fdc4 	bl	80089e4 <memcpy>
 800ce5c:	89a3      	ldrh	r3, [r4, #12]
 800ce5e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ce62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce66:	81a3      	strh	r3, [r4, #12]
 800ce68:	6126      	str	r6, [r4, #16]
 800ce6a:	6165      	str	r5, [r4, #20]
 800ce6c:	444e      	add	r6, r9
 800ce6e:	eba5 0509 	sub.w	r5, r5, r9
 800ce72:	6026      	str	r6, [r4, #0]
 800ce74:	60a5      	str	r5, [r4, #8]
 800ce76:	463e      	mov	r6, r7
 800ce78:	42be      	cmp	r6, r7
 800ce7a:	d900      	bls.n	800ce7e <__ssputs_r+0x86>
 800ce7c:	463e      	mov	r6, r7
 800ce7e:	4632      	mov	r2, r6
 800ce80:	6820      	ldr	r0, [r4, #0]
 800ce82:	4641      	mov	r1, r8
 800ce84:	f000 fae8 	bl	800d458 <memmove>
 800ce88:	68a3      	ldr	r3, [r4, #8]
 800ce8a:	6822      	ldr	r2, [r4, #0]
 800ce8c:	1b9b      	subs	r3, r3, r6
 800ce8e:	4432      	add	r2, r6
 800ce90:	60a3      	str	r3, [r4, #8]
 800ce92:	6022      	str	r2, [r4, #0]
 800ce94:	2000      	movs	r0, #0
 800ce96:	e7db      	b.n	800ce50 <__ssputs_r+0x58>
 800ce98:	462a      	mov	r2, r5
 800ce9a:	f000 faf7 	bl	800d48c <_realloc_r>
 800ce9e:	4606      	mov	r6, r0
 800cea0:	2800      	cmp	r0, #0
 800cea2:	d1e1      	bne.n	800ce68 <__ssputs_r+0x70>
 800cea4:	6921      	ldr	r1, [r4, #16]
 800cea6:	4650      	mov	r0, sl
 800cea8:	f7fb fdb2 	bl	8008a10 <_free_r>
 800ceac:	e7c7      	b.n	800ce3e <__ssputs_r+0x46>
	...

0800ceb0 <_svfiprintf_r>:
 800ceb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ceb4:	4698      	mov	r8, r3
 800ceb6:	898b      	ldrh	r3, [r1, #12]
 800ceb8:	061b      	lsls	r3, r3, #24
 800ceba:	b09d      	sub	sp, #116	; 0x74
 800cebc:	4607      	mov	r7, r0
 800cebe:	460d      	mov	r5, r1
 800cec0:	4614      	mov	r4, r2
 800cec2:	d50e      	bpl.n	800cee2 <_svfiprintf_r+0x32>
 800cec4:	690b      	ldr	r3, [r1, #16]
 800cec6:	b963      	cbnz	r3, 800cee2 <_svfiprintf_r+0x32>
 800cec8:	2140      	movs	r1, #64	; 0x40
 800ceca:	f7fb fdf1 	bl	8008ab0 <_malloc_r>
 800cece:	6028      	str	r0, [r5, #0]
 800ced0:	6128      	str	r0, [r5, #16]
 800ced2:	b920      	cbnz	r0, 800cede <_svfiprintf_r+0x2e>
 800ced4:	230c      	movs	r3, #12
 800ced6:	603b      	str	r3, [r7, #0]
 800ced8:	f04f 30ff 	mov.w	r0, #4294967295
 800cedc:	e0d1      	b.n	800d082 <_svfiprintf_r+0x1d2>
 800cede:	2340      	movs	r3, #64	; 0x40
 800cee0:	616b      	str	r3, [r5, #20]
 800cee2:	2300      	movs	r3, #0
 800cee4:	9309      	str	r3, [sp, #36]	; 0x24
 800cee6:	2320      	movs	r3, #32
 800cee8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ceec:	f8cd 800c 	str.w	r8, [sp, #12]
 800cef0:	2330      	movs	r3, #48	; 0x30
 800cef2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d09c <_svfiprintf_r+0x1ec>
 800cef6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cefa:	f04f 0901 	mov.w	r9, #1
 800cefe:	4623      	mov	r3, r4
 800cf00:	469a      	mov	sl, r3
 800cf02:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf06:	b10a      	cbz	r2, 800cf0c <_svfiprintf_r+0x5c>
 800cf08:	2a25      	cmp	r2, #37	; 0x25
 800cf0a:	d1f9      	bne.n	800cf00 <_svfiprintf_r+0x50>
 800cf0c:	ebba 0b04 	subs.w	fp, sl, r4
 800cf10:	d00b      	beq.n	800cf2a <_svfiprintf_r+0x7a>
 800cf12:	465b      	mov	r3, fp
 800cf14:	4622      	mov	r2, r4
 800cf16:	4629      	mov	r1, r5
 800cf18:	4638      	mov	r0, r7
 800cf1a:	f7ff ff6d 	bl	800cdf8 <__ssputs_r>
 800cf1e:	3001      	adds	r0, #1
 800cf20:	f000 80aa 	beq.w	800d078 <_svfiprintf_r+0x1c8>
 800cf24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cf26:	445a      	add	r2, fp
 800cf28:	9209      	str	r2, [sp, #36]	; 0x24
 800cf2a:	f89a 3000 	ldrb.w	r3, [sl]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	f000 80a2 	beq.w	800d078 <_svfiprintf_r+0x1c8>
 800cf34:	2300      	movs	r3, #0
 800cf36:	f04f 32ff 	mov.w	r2, #4294967295
 800cf3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cf3e:	f10a 0a01 	add.w	sl, sl, #1
 800cf42:	9304      	str	r3, [sp, #16]
 800cf44:	9307      	str	r3, [sp, #28]
 800cf46:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cf4a:	931a      	str	r3, [sp, #104]	; 0x68
 800cf4c:	4654      	mov	r4, sl
 800cf4e:	2205      	movs	r2, #5
 800cf50:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf54:	4851      	ldr	r0, [pc, #324]	; (800d09c <_svfiprintf_r+0x1ec>)
 800cf56:	f7f3 f93b 	bl	80001d0 <memchr>
 800cf5a:	9a04      	ldr	r2, [sp, #16]
 800cf5c:	b9d8      	cbnz	r0, 800cf96 <_svfiprintf_r+0xe6>
 800cf5e:	06d0      	lsls	r0, r2, #27
 800cf60:	bf44      	itt	mi
 800cf62:	2320      	movmi	r3, #32
 800cf64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf68:	0711      	lsls	r1, r2, #28
 800cf6a:	bf44      	itt	mi
 800cf6c:	232b      	movmi	r3, #43	; 0x2b
 800cf6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf72:	f89a 3000 	ldrb.w	r3, [sl]
 800cf76:	2b2a      	cmp	r3, #42	; 0x2a
 800cf78:	d015      	beq.n	800cfa6 <_svfiprintf_r+0xf6>
 800cf7a:	9a07      	ldr	r2, [sp, #28]
 800cf7c:	4654      	mov	r4, sl
 800cf7e:	2000      	movs	r0, #0
 800cf80:	f04f 0c0a 	mov.w	ip, #10
 800cf84:	4621      	mov	r1, r4
 800cf86:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cf8a:	3b30      	subs	r3, #48	; 0x30
 800cf8c:	2b09      	cmp	r3, #9
 800cf8e:	d94e      	bls.n	800d02e <_svfiprintf_r+0x17e>
 800cf90:	b1b0      	cbz	r0, 800cfc0 <_svfiprintf_r+0x110>
 800cf92:	9207      	str	r2, [sp, #28]
 800cf94:	e014      	b.n	800cfc0 <_svfiprintf_r+0x110>
 800cf96:	eba0 0308 	sub.w	r3, r0, r8
 800cf9a:	fa09 f303 	lsl.w	r3, r9, r3
 800cf9e:	4313      	orrs	r3, r2
 800cfa0:	9304      	str	r3, [sp, #16]
 800cfa2:	46a2      	mov	sl, r4
 800cfa4:	e7d2      	b.n	800cf4c <_svfiprintf_r+0x9c>
 800cfa6:	9b03      	ldr	r3, [sp, #12]
 800cfa8:	1d19      	adds	r1, r3, #4
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	9103      	str	r1, [sp, #12]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	bfbb      	ittet	lt
 800cfb2:	425b      	neglt	r3, r3
 800cfb4:	f042 0202 	orrlt.w	r2, r2, #2
 800cfb8:	9307      	strge	r3, [sp, #28]
 800cfba:	9307      	strlt	r3, [sp, #28]
 800cfbc:	bfb8      	it	lt
 800cfbe:	9204      	strlt	r2, [sp, #16]
 800cfc0:	7823      	ldrb	r3, [r4, #0]
 800cfc2:	2b2e      	cmp	r3, #46	; 0x2e
 800cfc4:	d10c      	bne.n	800cfe0 <_svfiprintf_r+0x130>
 800cfc6:	7863      	ldrb	r3, [r4, #1]
 800cfc8:	2b2a      	cmp	r3, #42	; 0x2a
 800cfca:	d135      	bne.n	800d038 <_svfiprintf_r+0x188>
 800cfcc:	9b03      	ldr	r3, [sp, #12]
 800cfce:	1d1a      	adds	r2, r3, #4
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	9203      	str	r2, [sp, #12]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	bfb8      	it	lt
 800cfd8:	f04f 33ff 	movlt.w	r3, #4294967295
 800cfdc:	3402      	adds	r4, #2
 800cfde:	9305      	str	r3, [sp, #20]
 800cfe0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d0ac <_svfiprintf_r+0x1fc>
 800cfe4:	7821      	ldrb	r1, [r4, #0]
 800cfe6:	2203      	movs	r2, #3
 800cfe8:	4650      	mov	r0, sl
 800cfea:	f7f3 f8f1 	bl	80001d0 <memchr>
 800cfee:	b140      	cbz	r0, 800d002 <_svfiprintf_r+0x152>
 800cff0:	2340      	movs	r3, #64	; 0x40
 800cff2:	eba0 000a 	sub.w	r0, r0, sl
 800cff6:	fa03 f000 	lsl.w	r0, r3, r0
 800cffa:	9b04      	ldr	r3, [sp, #16]
 800cffc:	4303      	orrs	r3, r0
 800cffe:	3401      	adds	r4, #1
 800d000:	9304      	str	r3, [sp, #16]
 800d002:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d006:	4826      	ldr	r0, [pc, #152]	; (800d0a0 <_svfiprintf_r+0x1f0>)
 800d008:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d00c:	2206      	movs	r2, #6
 800d00e:	f7f3 f8df 	bl	80001d0 <memchr>
 800d012:	2800      	cmp	r0, #0
 800d014:	d038      	beq.n	800d088 <_svfiprintf_r+0x1d8>
 800d016:	4b23      	ldr	r3, [pc, #140]	; (800d0a4 <_svfiprintf_r+0x1f4>)
 800d018:	bb1b      	cbnz	r3, 800d062 <_svfiprintf_r+0x1b2>
 800d01a:	9b03      	ldr	r3, [sp, #12]
 800d01c:	3307      	adds	r3, #7
 800d01e:	f023 0307 	bic.w	r3, r3, #7
 800d022:	3308      	adds	r3, #8
 800d024:	9303      	str	r3, [sp, #12]
 800d026:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d028:	4433      	add	r3, r6
 800d02a:	9309      	str	r3, [sp, #36]	; 0x24
 800d02c:	e767      	b.n	800cefe <_svfiprintf_r+0x4e>
 800d02e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d032:	460c      	mov	r4, r1
 800d034:	2001      	movs	r0, #1
 800d036:	e7a5      	b.n	800cf84 <_svfiprintf_r+0xd4>
 800d038:	2300      	movs	r3, #0
 800d03a:	3401      	adds	r4, #1
 800d03c:	9305      	str	r3, [sp, #20]
 800d03e:	4619      	mov	r1, r3
 800d040:	f04f 0c0a 	mov.w	ip, #10
 800d044:	4620      	mov	r0, r4
 800d046:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d04a:	3a30      	subs	r2, #48	; 0x30
 800d04c:	2a09      	cmp	r2, #9
 800d04e:	d903      	bls.n	800d058 <_svfiprintf_r+0x1a8>
 800d050:	2b00      	cmp	r3, #0
 800d052:	d0c5      	beq.n	800cfe0 <_svfiprintf_r+0x130>
 800d054:	9105      	str	r1, [sp, #20]
 800d056:	e7c3      	b.n	800cfe0 <_svfiprintf_r+0x130>
 800d058:	fb0c 2101 	mla	r1, ip, r1, r2
 800d05c:	4604      	mov	r4, r0
 800d05e:	2301      	movs	r3, #1
 800d060:	e7f0      	b.n	800d044 <_svfiprintf_r+0x194>
 800d062:	ab03      	add	r3, sp, #12
 800d064:	9300      	str	r3, [sp, #0]
 800d066:	462a      	mov	r2, r5
 800d068:	4b0f      	ldr	r3, [pc, #60]	; (800d0a8 <_svfiprintf_r+0x1f8>)
 800d06a:	a904      	add	r1, sp, #16
 800d06c:	4638      	mov	r0, r7
 800d06e:	f7fb fe19 	bl	8008ca4 <_printf_float>
 800d072:	1c42      	adds	r2, r0, #1
 800d074:	4606      	mov	r6, r0
 800d076:	d1d6      	bne.n	800d026 <_svfiprintf_r+0x176>
 800d078:	89ab      	ldrh	r3, [r5, #12]
 800d07a:	065b      	lsls	r3, r3, #25
 800d07c:	f53f af2c 	bmi.w	800ced8 <_svfiprintf_r+0x28>
 800d080:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d082:	b01d      	add	sp, #116	; 0x74
 800d084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d088:	ab03      	add	r3, sp, #12
 800d08a:	9300      	str	r3, [sp, #0]
 800d08c:	462a      	mov	r2, r5
 800d08e:	4b06      	ldr	r3, [pc, #24]	; (800d0a8 <_svfiprintf_r+0x1f8>)
 800d090:	a904      	add	r1, sp, #16
 800d092:	4638      	mov	r0, r7
 800d094:	f7fc f8aa 	bl	80091ec <_printf_i>
 800d098:	e7eb      	b.n	800d072 <_svfiprintf_r+0x1c2>
 800d09a:	bf00      	nop
 800d09c:	0800ed64 	.word	0x0800ed64
 800d0a0:	0800ed6e 	.word	0x0800ed6e
 800d0a4:	08008ca5 	.word	0x08008ca5
 800d0a8:	0800cdf9 	.word	0x0800cdf9
 800d0ac:	0800ed6a 	.word	0x0800ed6a

0800d0b0 <__sfputc_r>:
 800d0b0:	6893      	ldr	r3, [r2, #8]
 800d0b2:	3b01      	subs	r3, #1
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	b410      	push	{r4}
 800d0b8:	6093      	str	r3, [r2, #8]
 800d0ba:	da08      	bge.n	800d0ce <__sfputc_r+0x1e>
 800d0bc:	6994      	ldr	r4, [r2, #24]
 800d0be:	42a3      	cmp	r3, r4
 800d0c0:	db01      	blt.n	800d0c6 <__sfputc_r+0x16>
 800d0c2:	290a      	cmp	r1, #10
 800d0c4:	d103      	bne.n	800d0ce <__sfputc_r+0x1e>
 800d0c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d0ca:	f7fd bcad 	b.w	800aa28 <__swbuf_r>
 800d0ce:	6813      	ldr	r3, [r2, #0]
 800d0d0:	1c58      	adds	r0, r3, #1
 800d0d2:	6010      	str	r0, [r2, #0]
 800d0d4:	7019      	strb	r1, [r3, #0]
 800d0d6:	4608      	mov	r0, r1
 800d0d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d0dc:	4770      	bx	lr

0800d0de <__sfputs_r>:
 800d0de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0e0:	4606      	mov	r6, r0
 800d0e2:	460f      	mov	r7, r1
 800d0e4:	4614      	mov	r4, r2
 800d0e6:	18d5      	adds	r5, r2, r3
 800d0e8:	42ac      	cmp	r4, r5
 800d0ea:	d101      	bne.n	800d0f0 <__sfputs_r+0x12>
 800d0ec:	2000      	movs	r0, #0
 800d0ee:	e007      	b.n	800d100 <__sfputs_r+0x22>
 800d0f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0f4:	463a      	mov	r2, r7
 800d0f6:	4630      	mov	r0, r6
 800d0f8:	f7ff ffda 	bl	800d0b0 <__sfputc_r>
 800d0fc:	1c43      	adds	r3, r0, #1
 800d0fe:	d1f3      	bne.n	800d0e8 <__sfputs_r+0xa>
 800d100:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d104 <_vfiprintf_r>:
 800d104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d108:	460d      	mov	r5, r1
 800d10a:	b09d      	sub	sp, #116	; 0x74
 800d10c:	4614      	mov	r4, r2
 800d10e:	4698      	mov	r8, r3
 800d110:	4606      	mov	r6, r0
 800d112:	b118      	cbz	r0, 800d11c <_vfiprintf_r+0x18>
 800d114:	6983      	ldr	r3, [r0, #24]
 800d116:	b90b      	cbnz	r3, 800d11c <_vfiprintf_r+0x18>
 800d118:	f7fe fcfc 	bl	800bb14 <__sinit>
 800d11c:	4b89      	ldr	r3, [pc, #548]	; (800d344 <_vfiprintf_r+0x240>)
 800d11e:	429d      	cmp	r5, r3
 800d120:	d11b      	bne.n	800d15a <_vfiprintf_r+0x56>
 800d122:	6875      	ldr	r5, [r6, #4]
 800d124:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d126:	07d9      	lsls	r1, r3, #31
 800d128:	d405      	bmi.n	800d136 <_vfiprintf_r+0x32>
 800d12a:	89ab      	ldrh	r3, [r5, #12]
 800d12c:	059a      	lsls	r2, r3, #22
 800d12e:	d402      	bmi.n	800d136 <_vfiprintf_r+0x32>
 800d130:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d132:	f7ff f900 	bl	800c336 <__retarget_lock_acquire_recursive>
 800d136:	89ab      	ldrh	r3, [r5, #12]
 800d138:	071b      	lsls	r3, r3, #28
 800d13a:	d501      	bpl.n	800d140 <_vfiprintf_r+0x3c>
 800d13c:	692b      	ldr	r3, [r5, #16]
 800d13e:	b9eb      	cbnz	r3, 800d17c <_vfiprintf_r+0x78>
 800d140:	4629      	mov	r1, r5
 800d142:	4630      	mov	r0, r6
 800d144:	f7fd fcd4 	bl	800aaf0 <__swsetup_r>
 800d148:	b1c0      	cbz	r0, 800d17c <_vfiprintf_r+0x78>
 800d14a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d14c:	07dc      	lsls	r4, r3, #31
 800d14e:	d50e      	bpl.n	800d16e <_vfiprintf_r+0x6a>
 800d150:	f04f 30ff 	mov.w	r0, #4294967295
 800d154:	b01d      	add	sp, #116	; 0x74
 800d156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d15a:	4b7b      	ldr	r3, [pc, #492]	; (800d348 <_vfiprintf_r+0x244>)
 800d15c:	429d      	cmp	r5, r3
 800d15e:	d101      	bne.n	800d164 <_vfiprintf_r+0x60>
 800d160:	68b5      	ldr	r5, [r6, #8]
 800d162:	e7df      	b.n	800d124 <_vfiprintf_r+0x20>
 800d164:	4b79      	ldr	r3, [pc, #484]	; (800d34c <_vfiprintf_r+0x248>)
 800d166:	429d      	cmp	r5, r3
 800d168:	bf08      	it	eq
 800d16a:	68f5      	ldreq	r5, [r6, #12]
 800d16c:	e7da      	b.n	800d124 <_vfiprintf_r+0x20>
 800d16e:	89ab      	ldrh	r3, [r5, #12]
 800d170:	0598      	lsls	r0, r3, #22
 800d172:	d4ed      	bmi.n	800d150 <_vfiprintf_r+0x4c>
 800d174:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d176:	f7ff f8df 	bl	800c338 <__retarget_lock_release_recursive>
 800d17a:	e7e9      	b.n	800d150 <_vfiprintf_r+0x4c>
 800d17c:	2300      	movs	r3, #0
 800d17e:	9309      	str	r3, [sp, #36]	; 0x24
 800d180:	2320      	movs	r3, #32
 800d182:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d186:	f8cd 800c 	str.w	r8, [sp, #12]
 800d18a:	2330      	movs	r3, #48	; 0x30
 800d18c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d350 <_vfiprintf_r+0x24c>
 800d190:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d194:	f04f 0901 	mov.w	r9, #1
 800d198:	4623      	mov	r3, r4
 800d19a:	469a      	mov	sl, r3
 800d19c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d1a0:	b10a      	cbz	r2, 800d1a6 <_vfiprintf_r+0xa2>
 800d1a2:	2a25      	cmp	r2, #37	; 0x25
 800d1a4:	d1f9      	bne.n	800d19a <_vfiprintf_r+0x96>
 800d1a6:	ebba 0b04 	subs.w	fp, sl, r4
 800d1aa:	d00b      	beq.n	800d1c4 <_vfiprintf_r+0xc0>
 800d1ac:	465b      	mov	r3, fp
 800d1ae:	4622      	mov	r2, r4
 800d1b0:	4629      	mov	r1, r5
 800d1b2:	4630      	mov	r0, r6
 800d1b4:	f7ff ff93 	bl	800d0de <__sfputs_r>
 800d1b8:	3001      	adds	r0, #1
 800d1ba:	f000 80aa 	beq.w	800d312 <_vfiprintf_r+0x20e>
 800d1be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d1c0:	445a      	add	r2, fp
 800d1c2:	9209      	str	r2, [sp, #36]	; 0x24
 800d1c4:	f89a 3000 	ldrb.w	r3, [sl]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	f000 80a2 	beq.w	800d312 <_vfiprintf_r+0x20e>
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	f04f 32ff 	mov.w	r2, #4294967295
 800d1d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d1d8:	f10a 0a01 	add.w	sl, sl, #1
 800d1dc:	9304      	str	r3, [sp, #16]
 800d1de:	9307      	str	r3, [sp, #28]
 800d1e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d1e4:	931a      	str	r3, [sp, #104]	; 0x68
 800d1e6:	4654      	mov	r4, sl
 800d1e8:	2205      	movs	r2, #5
 800d1ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1ee:	4858      	ldr	r0, [pc, #352]	; (800d350 <_vfiprintf_r+0x24c>)
 800d1f0:	f7f2 ffee 	bl	80001d0 <memchr>
 800d1f4:	9a04      	ldr	r2, [sp, #16]
 800d1f6:	b9d8      	cbnz	r0, 800d230 <_vfiprintf_r+0x12c>
 800d1f8:	06d1      	lsls	r1, r2, #27
 800d1fa:	bf44      	itt	mi
 800d1fc:	2320      	movmi	r3, #32
 800d1fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d202:	0713      	lsls	r3, r2, #28
 800d204:	bf44      	itt	mi
 800d206:	232b      	movmi	r3, #43	; 0x2b
 800d208:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d20c:	f89a 3000 	ldrb.w	r3, [sl]
 800d210:	2b2a      	cmp	r3, #42	; 0x2a
 800d212:	d015      	beq.n	800d240 <_vfiprintf_r+0x13c>
 800d214:	9a07      	ldr	r2, [sp, #28]
 800d216:	4654      	mov	r4, sl
 800d218:	2000      	movs	r0, #0
 800d21a:	f04f 0c0a 	mov.w	ip, #10
 800d21e:	4621      	mov	r1, r4
 800d220:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d224:	3b30      	subs	r3, #48	; 0x30
 800d226:	2b09      	cmp	r3, #9
 800d228:	d94e      	bls.n	800d2c8 <_vfiprintf_r+0x1c4>
 800d22a:	b1b0      	cbz	r0, 800d25a <_vfiprintf_r+0x156>
 800d22c:	9207      	str	r2, [sp, #28]
 800d22e:	e014      	b.n	800d25a <_vfiprintf_r+0x156>
 800d230:	eba0 0308 	sub.w	r3, r0, r8
 800d234:	fa09 f303 	lsl.w	r3, r9, r3
 800d238:	4313      	orrs	r3, r2
 800d23a:	9304      	str	r3, [sp, #16]
 800d23c:	46a2      	mov	sl, r4
 800d23e:	e7d2      	b.n	800d1e6 <_vfiprintf_r+0xe2>
 800d240:	9b03      	ldr	r3, [sp, #12]
 800d242:	1d19      	adds	r1, r3, #4
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	9103      	str	r1, [sp, #12]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	bfbb      	ittet	lt
 800d24c:	425b      	neglt	r3, r3
 800d24e:	f042 0202 	orrlt.w	r2, r2, #2
 800d252:	9307      	strge	r3, [sp, #28]
 800d254:	9307      	strlt	r3, [sp, #28]
 800d256:	bfb8      	it	lt
 800d258:	9204      	strlt	r2, [sp, #16]
 800d25a:	7823      	ldrb	r3, [r4, #0]
 800d25c:	2b2e      	cmp	r3, #46	; 0x2e
 800d25e:	d10c      	bne.n	800d27a <_vfiprintf_r+0x176>
 800d260:	7863      	ldrb	r3, [r4, #1]
 800d262:	2b2a      	cmp	r3, #42	; 0x2a
 800d264:	d135      	bne.n	800d2d2 <_vfiprintf_r+0x1ce>
 800d266:	9b03      	ldr	r3, [sp, #12]
 800d268:	1d1a      	adds	r2, r3, #4
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	9203      	str	r2, [sp, #12]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	bfb8      	it	lt
 800d272:	f04f 33ff 	movlt.w	r3, #4294967295
 800d276:	3402      	adds	r4, #2
 800d278:	9305      	str	r3, [sp, #20]
 800d27a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d360 <_vfiprintf_r+0x25c>
 800d27e:	7821      	ldrb	r1, [r4, #0]
 800d280:	2203      	movs	r2, #3
 800d282:	4650      	mov	r0, sl
 800d284:	f7f2 ffa4 	bl	80001d0 <memchr>
 800d288:	b140      	cbz	r0, 800d29c <_vfiprintf_r+0x198>
 800d28a:	2340      	movs	r3, #64	; 0x40
 800d28c:	eba0 000a 	sub.w	r0, r0, sl
 800d290:	fa03 f000 	lsl.w	r0, r3, r0
 800d294:	9b04      	ldr	r3, [sp, #16]
 800d296:	4303      	orrs	r3, r0
 800d298:	3401      	adds	r4, #1
 800d29a:	9304      	str	r3, [sp, #16]
 800d29c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2a0:	482c      	ldr	r0, [pc, #176]	; (800d354 <_vfiprintf_r+0x250>)
 800d2a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d2a6:	2206      	movs	r2, #6
 800d2a8:	f7f2 ff92 	bl	80001d0 <memchr>
 800d2ac:	2800      	cmp	r0, #0
 800d2ae:	d03f      	beq.n	800d330 <_vfiprintf_r+0x22c>
 800d2b0:	4b29      	ldr	r3, [pc, #164]	; (800d358 <_vfiprintf_r+0x254>)
 800d2b2:	bb1b      	cbnz	r3, 800d2fc <_vfiprintf_r+0x1f8>
 800d2b4:	9b03      	ldr	r3, [sp, #12]
 800d2b6:	3307      	adds	r3, #7
 800d2b8:	f023 0307 	bic.w	r3, r3, #7
 800d2bc:	3308      	adds	r3, #8
 800d2be:	9303      	str	r3, [sp, #12]
 800d2c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2c2:	443b      	add	r3, r7
 800d2c4:	9309      	str	r3, [sp, #36]	; 0x24
 800d2c6:	e767      	b.n	800d198 <_vfiprintf_r+0x94>
 800d2c8:	fb0c 3202 	mla	r2, ip, r2, r3
 800d2cc:	460c      	mov	r4, r1
 800d2ce:	2001      	movs	r0, #1
 800d2d0:	e7a5      	b.n	800d21e <_vfiprintf_r+0x11a>
 800d2d2:	2300      	movs	r3, #0
 800d2d4:	3401      	adds	r4, #1
 800d2d6:	9305      	str	r3, [sp, #20]
 800d2d8:	4619      	mov	r1, r3
 800d2da:	f04f 0c0a 	mov.w	ip, #10
 800d2de:	4620      	mov	r0, r4
 800d2e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d2e4:	3a30      	subs	r2, #48	; 0x30
 800d2e6:	2a09      	cmp	r2, #9
 800d2e8:	d903      	bls.n	800d2f2 <_vfiprintf_r+0x1ee>
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d0c5      	beq.n	800d27a <_vfiprintf_r+0x176>
 800d2ee:	9105      	str	r1, [sp, #20]
 800d2f0:	e7c3      	b.n	800d27a <_vfiprintf_r+0x176>
 800d2f2:	fb0c 2101 	mla	r1, ip, r1, r2
 800d2f6:	4604      	mov	r4, r0
 800d2f8:	2301      	movs	r3, #1
 800d2fa:	e7f0      	b.n	800d2de <_vfiprintf_r+0x1da>
 800d2fc:	ab03      	add	r3, sp, #12
 800d2fe:	9300      	str	r3, [sp, #0]
 800d300:	462a      	mov	r2, r5
 800d302:	4b16      	ldr	r3, [pc, #88]	; (800d35c <_vfiprintf_r+0x258>)
 800d304:	a904      	add	r1, sp, #16
 800d306:	4630      	mov	r0, r6
 800d308:	f7fb fccc 	bl	8008ca4 <_printf_float>
 800d30c:	4607      	mov	r7, r0
 800d30e:	1c78      	adds	r0, r7, #1
 800d310:	d1d6      	bne.n	800d2c0 <_vfiprintf_r+0x1bc>
 800d312:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d314:	07d9      	lsls	r1, r3, #31
 800d316:	d405      	bmi.n	800d324 <_vfiprintf_r+0x220>
 800d318:	89ab      	ldrh	r3, [r5, #12]
 800d31a:	059a      	lsls	r2, r3, #22
 800d31c:	d402      	bmi.n	800d324 <_vfiprintf_r+0x220>
 800d31e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d320:	f7ff f80a 	bl	800c338 <__retarget_lock_release_recursive>
 800d324:	89ab      	ldrh	r3, [r5, #12]
 800d326:	065b      	lsls	r3, r3, #25
 800d328:	f53f af12 	bmi.w	800d150 <_vfiprintf_r+0x4c>
 800d32c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d32e:	e711      	b.n	800d154 <_vfiprintf_r+0x50>
 800d330:	ab03      	add	r3, sp, #12
 800d332:	9300      	str	r3, [sp, #0]
 800d334:	462a      	mov	r2, r5
 800d336:	4b09      	ldr	r3, [pc, #36]	; (800d35c <_vfiprintf_r+0x258>)
 800d338:	a904      	add	r1, sp, #16
 800d33a:	4630      	mov	r0, r6
 800d33c:	f7fb ff56 	bl	80091ec <_printf_i>
 800d340:	e7e4      	b.n	800d30c <_vfiprintf_r+0x208>
 800d342:	bf00      	nop
 800d344:	0800eb48 	.word	0x0800eb48
 800d348:	0800eb68 	.word	0x0800eb68
 800d34c:	0800eb28 	.word	0x0800eb28
 800d350:	0800ed64 	.word	0x0800ed64
 800d354:	0800ed6e 	.word	0x0800ed6e
 800d358:	08008ca5 	.word	0x08008ca5
 800d35c:	0800d0df 	.word	0x0800d0df
 800d360:	0800ed6a 	.word	0x0800ed6a

0800d364 <_read_r>:
 800d364:	b538      	push	{r3, r4, r5, lr}
 800d366:	4d07      	ldr	r5, [pc, #28]	; (800d384 <_read_r+0x20>)
 800d368:	4604      	mov	r4, r0
 800d36a:	4608      	mov	r0, r1
 800d36c:	4611      	mov	r1, r2
 800d36e:	2200      	movs	r2, #0
 800d370:	602a      	str	r2, [r5, #0]
 800d372:	461a      	mov	r2, r3
 800d374:	f7f6 f998 	bl	80036a8 <_read>
 800d378:	1c43      	adds	r3, r0, #1
 800d37a:	d102      	bne.n	800d382 <_read_r+0x1e>
 800d37c:	682b      	ldr	r3, [r5, #0]
 800d37e:	b103      	cbz	r3, 800d382 <_read_r+0x1e>
 800d380:	6023      	str	r3, [r4, #0]
 800d382:	bd38      	pop	{r3, r4, r5, pc}
 800d384:	200038f4 	.word	0x200038f4

0800d388 <nan>:
 800d388:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d390 <nan+0x8>
 800d38c:	4770      	bx	lr
 800d38e:	bf00      	nop
 800d390:	00000000 	.word	0x00000000
 800d394:	7ff80000 	.word	0x7ff80000

0800d398 <__ascii_wctomb>:
 800d398:	b149      	cbz	r1, 800d3ae <__ascii_wctomb+0x16>
 800d39a:	2aff      	cmp	r2, #255	; 0xff
 800d39c:	bf85      	ittet	hi
 800d39e:	238a      	movhi	r3, #138	; 0x8a
 800d3a0:	6003      	strhi	r3, [r0, #0]
 800d3a2:	700a      	strbls	r2, [r1, #0]
 800d3a4:	f04f 30ff 	movhi.w	r0, #4294967295
 800d3a8:	bf98      	it	ls
 800d3aa:	2001      	movls	r0, #1
 800d3ac:	4770      	bx	lr
 800d3ae:	4608      	mov	r0, r1
 800d3b0:	4770      	bx	lr
	...

0800d3b4 <__assert_func>:
 800d3b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d3b6:	4614      	mov	r4, r2
 800d3b8:	461a      	mov	r2, r3
 800d3ba:	4b09      	ldr	r3, [pc, #36]	; (800d3e0 <__assert_func+0x2c>)
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	4605      	mov	r5, r0
 800d3c0:	68d8      	ldr	r0, [r3, #12]
 800d3c2:	b14c      	cbz	r4, 800d3d8 <__assert_func+0x24>
 800d3c4:	4b07      	ldr	r3, [pc, #28]	; (800d3e4 <__assert_func+0x30>)
 800d3c6:	9100      	str	r1, [sp, #0]
 800d3c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d3cc:	4906      	ldr	r1, [pc, #24]	; (800d3e8 <__assert_func+0x34>)
 800d3ce:	462b      	mov	r3, r5
 800d3d0:	f000 f80e 	bl	800d3f0 <fiprintf>
 800d3d4:	f000 f880 	bl	800d4d8 <abort>
 800d3d8:	4b04      	ldr	r3, [pc, #16]	; (800d3ec <__assert_func+0x38>)
 800d3da:	461c      	mov	r4, r3
 800d3dc:	e7f3      	b.n	800d3c6 <__assert_func+0x12>
 800d3de:	bf00      	nop
 800d3e0:	20000018 	.word	0x20000018
 800d3e4:	0800ed75 	.word	0x0800ed75
 800d3e8:	0800ed82 	.word	0x0800ed82
 800d3ec:	0800edb0 	.word	0x0800edb0

0800d3f0 <fiprintf>:
 800d3f0:	b40e      	push	{r1, r2, r3}
 800d3f2:	b503      	push	{r0, r1, lr}
 800d3f4:	4601      	mov	r1, r0
 800d3f6:	ab03      	add	r3, sp, #12
 800d3f8:	4805      	ldr	r0, [pc, #20]	; (800d410 <fiprintf+0x20>)
 800d3fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800d3fe:	6800      	ldr	r0, [r0, #0]
 800d400:	9301      	str	r3, [sp, #4]
 800d402:	f7ff fe7f 	bl	800d104 <_vfiprintf_r>
 800d406:	b002      	add	sp, #8
 800d408:	f85d eb04 	ldr.w	lr, [sp], #4
 800d40c:	b003      	add	sp, #12
 800d40e:	4770      	bx	lr
 800d410:	20000018 	.word	0x20000018

0800d414 <_fstat_r>:
 800d414:	b538      	push	{r3, r4, r5, lr}
 800d416:	4d07      	ldr	r5, [pc, #28]	; (800d434 <_fstat_r+0x20>)
 800d418:	2300      	movs	r3, #0
 800d41a:	4604      	mov	r4, r0
 800d41c:	4608      	mov	r0, r1
 800d41e:	4611      	mov	r1, r2
 800d420:	602b      	str	r3, [r5, #0]
 800d422:	f7f6 f969 	bl	80036f8 <_fstat>
 800d426:	1c43      	adds	r3, r0, #1
 800d428:	d102      	bne.n	800d430 <_fstat_r+0x1c>
 800d42a:	682b      	ldr	r3, [r5, #0]
 800d42c:	b103      	cbz	r3, 800d430 <_fstat_r+0x1c>
 800d42e:	6023      	str	r3, [r4, #0]
 800d430:	bd38      	pop	{r3, r4, r5, pc}
 800d432:	bf00      	nop
 800d434:	200038f4 	.word	0x200038f4

0800d438 <_isatty_r>:
 800d438:	b538      	push	{r3, r4, r5, lr}
 800d43a:	4d06      	ldr	r5, [pc, #24]	; (800d454 <_isatty_r+0x1c>)
 800d43c:	2300      	movs	r3, #0
 800d43e:	4604      	mov	r4, r0
 800d440:	4608      	mov	r0, r1
 800d442:	602b      	str	r3, [r5, #0]
 800d444:	f7f6 f8c6 	bl	80035d4 <_isatty>
 800d448:	1c43      	adds	r3, r0, #1
 800d44a:	d102      	bne.n	800d452 <_isatty_r+0x1a>
 800d44c:	682b      	ldr	r3, [r5, #0]
 800d44e:	b103      	cbz	r3, 800d452 <_isatty_r+0x1a>
 800d450:	6023      	str	r3, [r4, #0]
 800d452:	bd38      	pop	{r3, r4, r5, pc}
 800d454:	200038f4 	.word	0x200038f4

0800d458 <memmove>:
 800d458:	4288      	cmp	r0, r1
 800d45a:	b510      	push	{r4, lr}
 800d45c:	eb01 0402 	add.w	r4, r1, r2
 800d460:	d902      	bls.n	800d468 <memmove+0x10>
 800d462:	4284      	cmp	r4, r0
 800d464:	4623      	mov	r3, r4
 800d466:	d807      	bhi.n	800d478 <memmove+0x20>
 800d468:	1e43      	subs	r3, r0, #1
 800d46a:	42a1      	cmp	r1, r4
 800d46c:	d008      	beq.n	800d480 <memmove+0x28>
 800d46e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d472:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d476:	e7f8      	b.n	800d46a <memmove+0x12>
 800d478:	4402      	add	r2, r0
 800d47a:	4601      	mov	r1, r0
 800d47c:	428a      	cmp	r2, r1
 800d47e:	d100      	bne.n	800d482 <memmove+0x2a>
 800d480:	bd10      	pop	{r4, pc}
 800d482:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d486:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d48a:	e7f7      	b.n	800d47c <memmove+0x24>

0800d48c <_realloc_r>:
 800d48c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d48e:	4607      	mov	r7, r0
 800d490:	4614      	mov	r4, r2
 800d492:	460e      	mov	r6, r1
 800d494:	b921      	cbnz	r1, 800d4a0 <_realloc_r+0x14>
 800d496:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d49a:	4611      	mov	r1, r2
 800d49c:	f7fb bb08 	b.w	8008ab0 <_malloc_r>
 800d4a0:	b922      	cbnz	r2, 800d4ac <_realloc_r+0x20>
 800d4a2:	f7fb fab5 	bl	8008a10 <_free_r>
 800d4a6:	4625      	mov	r5, r4
 800d4a8:	4628      	mov	r0, r5
 800d4aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d4ac:	f000 f81b 	bl	800d4e6 <_malloc_usable_size_r>
 800d4b0:	42a0      	cmp	r0, r4
 800d4b2:	d20f      	bcs.n	800d4d4 <_realloc_r+0x48>
 800d4b4:	4621      	mov	r1, r4
 800d4b6:	4638      	mov	r0, r7
 800d4b8:	f7fb fafa 	bl	8008ab0 <_malloc_r>
 800d4bc:	4605      	mov	r5, r0
 800d4be:	2800      	cmp	r0, #0
 800d4c0:	d0f2      	beq.n	800d4a8 <_realloc_r+0x1c>
 800d4c2:	4631      	mov	r1, r6
 800d4c4:	4622      	mov	r2, r4
 800d4c6:	f7fb fa8d 	bl	80089e4 <memcpy>
 800d4ca:	4631      	mov	r1, r6
 800d4cc:	4638      	mov	r0, r7
 800d4ce:	f7fb fa9f 	bl	8008a10 <_free_r>
 800d4d2:	e7e9      	b.n	800d4a8 <_realloc_r+0x1c>
 800d4d4:	4635      	mov	r5, r6
 800d4d6:	e7e7      	b.n	800d4a8 <_realloc_r+0x1c>

0800d4d8 <abort>:
 800d4d8:	b508      	push	{r3, lr}
 800d4da:	2006      	movs	r0, #6
 800d4dc:	f000 f834 	bl	800d548 <raise>
 800d4e0:	2001      	movs	r0, #1
 800d4e2:	f000 f85d 	bl	800d5a0 <_exit>

0800d4e6 <_malloc_usable_size_r>:
 800d4e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d4ea:	1f18      	subs	r0, r3, #4
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	bfbc      	itt	lt
 800d4f0:	580b      	ldrlt	r3, [r1, r0]
 800d4f2:	18c0      	addlt	r0, r0, r3
 800d4f4:	4770      	bx	lr

0800d4f6 <_raise_r>:
 800d4f6:	291f      	cmp	r1, #31
 800d4f8:	b538      	push	{r3, r4, r5, lr}
 800d4fa:	4604      	mov	r4, r0
 800d4fc:	460d      	mov	r5, r1
 800d4fe:	d904      	bls.n	800d50a <_raise_r+0x14>
 800d500:	2316      	movs	r3, #22
 800d502:	6003      	str	r3, [r0, #0]
 800d504:	f04f 30ff 	mov.w	r0, #4294967295
 800d508:	bd38      	pop	{r3, r4, r5, pc}
 800d50a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d50c:	b112      	cbz	r2, 800d514 <_raise_r+0x1e>
 800d50e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d512:	b94b      	cbnz	r3, 800d528 <_raise_r+0x32>
 800d514:	4620      	mov	r0, r4
 800d516:	f000 f831 	bl	800d57c <_getpid_r>
 800d51a:	462a      	mov	r2, r5
 800d51c:	4601      	mov	r1, r0
 800d51e:	4620      	mov	r0, r4
 800d520:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d524:	f000 b818 	b.w	800d558 <_kill_r>
 800d528:	2b01      	cmp	r3, #1
 800d52a:	d00a      	beq.n	800d542 <_raise_r+0x4c>
 800d52c:	1c59      	adds	r1, r3, #1
 800d52e:	d103      	bne.n	800d538 <_raise_r+0x42>
 800d530:	2316      	movs	r3, #22
 800d532:	6003      	str	r3, [r0, #0]
 800d534:	2001      	movs	r0, #1
 800d536:	e7e7      	b.n	800d508 <_raise_r+0x12>
 800d538:	2400      	movs	r4, #0
 800d53a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d53e:	4628      	mov	r0, r5
 800d540:	4798      	blx	r3
 800d542:	2000      	movs	r0, #0
 800d544:	e7e0      	b.n	800d508 <_raise_r+0x12>
	...

0800d548 <raise>:
 800d548:	4b02      	ldr	r3, [pc, #8]	; (800d554 <raise+0xc>)
 800d54a:	4601      	mov	r1, r0
 800d54c:	6818      	ldr	r0, [r3, #0]
 800d54e:	f7ff bfd2 	b.w	800d4f6 <_raise_r>
 800d552:	bf00      	nop
 800d554:	20000018 	.word	0x20000018

0800d558 <_kill_r>:
 800d558:	b538      	push	{r3, r4, r5, lr}
 800d55a:	4d07      	ldr	r5, [pc, #28]	; (800d578 <_kill_r+0x20>)
 800d55c:	2300      	movs	r3, #0
 800d55e:	4604      	mov	r4, r0
 800d560:	4608      	mov	r0, r1
 800d562:	4611      	mov	r1, r2
 800d564:	602b      	str	r3, [r5, #0]
 800d566:	f000 f813 	bl	800d590 <_kill>
 800d56a:	1c43      	adds	r3, r0, #1
 800d56c:	d102      	bne.n	800d574 <_kill_r+0x1c>
 800d56e:	682b      	ldr	r3, [r5, #0]
 800d570:	b103      	cbz	r3, 800d574 <_kill_r+0x1c>
 800d572:	6023      	str	r3, [r4, #0]
 800d574:	bd38      	pop	{r3, r4, r5, pc}
 800d576:	bf00      	nop
 800d578:	200038f4 	.word	0x200038f4

0800d57c <_getpid_r>:
 800d57c:	f000 b800 	b.w	800d580 <_getpid>

0800d580 <_getpid>:
 800d580:	4b02      	ldr	r3, [pc, #8]	; (800d58c <_getpid+0xc>)
 800d582:	2258      	movs	r2, #88	; 0x58
 800d584:	601a      	str	r2, [r3, #0]
 800d586:	f04f 30ff 	mov.w	r0, #4294967295
 800d58a:	4770      	bx	lr
 800d58c:	200038f4 	.word	0x200038f4

0800d590 <_kill>:
 800d590:	4b02      	ldr	r3, [pc, #8]	; (800d59c <_kill+0xc>)
 800d592:	2258      	movs	r2, #88	; 0x58
 800d594:	601a      	str	r2, [r3, #0]
 800d596:	f04f 30ff 	mov.w	r0, #4294967295
 800d59a:	4770      	bx	lr
 800d59c:	200038f4 	.word	0x200038f4

0800d5a0 <_exit>:
 800d5a0:	e7fe      	b.n	800d5a0 <_exit>
	...

0800d5a4 <_init>:
 800d5a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5a6:	bf00      	nop
 800d5a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d5aa:	bc08      	pop	{r3}
 800d5ac:	469e      	mov	lr, r3
 800d5ae:	4770      	bx	lr

0800d5b0 <_fini>:
 800d5b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5b2:	bf00      	nop
 800d5b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d5b6:	bc08      	pop	{r3}
 800d5b8:	469e      	mov	lr, r3
 800d5ba:	4770      	bx	lr
