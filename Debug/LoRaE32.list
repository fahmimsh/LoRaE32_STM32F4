
LoRaE32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000de00  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001994  0800df90  0800df90  0001df90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f924  0800f924  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800f924  0800f924  0001f924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f92c  0800f92c  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f92c  0800f92c  0001f92c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f930  0800f930  0001f930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800f934  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003804  200001e8  0800fb1c  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200039ec  0800fb1c  000239ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016f3b  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f55  00000000  00000000  00037153  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b8  00000000  00000000  0003a0a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fa0  00000000  00000000  0003b160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023f18  00000000  00000000  0003c100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015819  00000000  00000000  00060018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d0a66  00000000  00000000  00075831  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00146297  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005eb8  00000000  00000000  001462ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000003c  00000000  00000000  0014c1a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000076  00000000  00000000  0014c1e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800df78 	.word	0x0800df78

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800df78 	.word	0x0800df78

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <GPS_p>:
#include "GPS.h"

void GPS_p(){
 8000fec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000ff0:	b095      	sub	sp, #84	; 0x54
 8000ff2:	af0e      	add	r7, sp, #56	; 0x38
    //HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
    //Reset aller variablen, falls es was schief geht steht überall null
    GPS.valid = false;
 8000ff4:	4b6f      	ldr	r3, [pc, #444]	; (80011b4 <GPS_p+0x1c8>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
    GPS.lat,GPS.lon,GPS.hdop,GPS.alt,GPS.bla,GPS.index_end,GPS.hour,GPS.min,GPS.sec,GPS.millis,GPS.sats,GPS.checksum,GPS.checksum_calc = 0;
 8000ffc:	4b6d      	ldr	r3, [pc, #436]	; (80011b4 <GPS_p+0x1c8>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

    if (strstr(GPS.message, "$GNGGA")){
 8001004:	4b6b      	ldr	r3, [pc, #428]	; (80011b4 <GPS_p+0x1c8>)
 8001006:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001008:	496b      	ldr	r1, [pc, #428]	; (80011b8 <GPS_p+0x1cc>)
 800100a:	4618      	mov	r0, r3
 800100c:	f008 fe4f 	bl	8009cae <strstr>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	f000 80c9 	beq.w	80011aa <GPS_p+0x1be>
        //Valid message in stream
        //Beispiel von Position zuhause $GNGGA,151017.00,4916.72813,N,01127.64911,E,1,09,0.93,435.5,M,46.6,M,,*4A
        GPS.message2 = strstr(GPS.message,"$GNGGA");         //pointer auf begin des GNGGA satzes setzen
 8001018:	4b66      	ldr	r3, [pc, #408]	; (80011b4 <GPS_p+0x1c8>)
 800101a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800101c:	4966      	ldr	r1, [pc, #408]	; (80011b8 <GPS_p+0x1cc>)
 800101e:	4618      	mov	r0, r3
 8001020:	f008 fe45 	bl	8009cae <strstr>
 8001024:	4603      	mov	r3, r0
 8001026:	4a63      	ldr	r2, [pc, #396]	; (80011b4 <GPS_p+0x1c8>)
 8001028:	64d3      	str	r3, [r2, #76]	; 0x4c
        sscanf(GPS.message2, "$GNGGA,%2hd%2hd%2hd.%2hd,%lf,%c,%lf,%c,%hd,%hd,%lf,%lf,M,%lf,M,,*%x",&GPS.hour,&GPS.min,&GPS.sec,&GPS.millis,&GPS.lat,&GPS.NS_ind,&GPS.lon,&GPS.EW_ind,&GPS.fixtype,&GPS.sats,&GPS.hdop,&GPS.alt,&GPS.bla,&GPS.checksum);
 800102a:	4b62      	ldr	r3, [pc, #392]	; (80011b4 <GPS_p+0x1c8>)
 800102c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800102e:	4b63      	ldr	r3, [pc, #396]	; (80011bc <GPS_p+0x1d0>)
 8001030:	930b      	str	r3, [sp, #44]	; 0x2c
 8001032:	4b63      	ldr	r3, [pc, #396]	; (80011c0 <GPS_p+0x1d4>)
 8001034:	930a      	str	r3, [sp, #40]	; 0x28
 8001036:	4b63      	ldr	r3, [pc, #396]	; (80011c4 <GPS_p+0x1d8>)
 8001038:	9309      	str	r3, [sp, #36]	; 0x24
 800103a:	4b63      	ldr	r3, [pc, #396]	; (80011c8 <GPS_p+0x1dc>)
 800103c:	9308      	str	r3, [sp, #32]
 800103e:	4b63      	ldr	r3, [pc, #396]	; (80011cc <GPS_p+0x1e0>)
 8001040:	9307      	str	r3, [sp, #28]
 8001042:	4b63      	ldr	r3, [pc, #396]	; (80011d0 <GPS_p+0x1e4>)
 8001044:	9306      	str	r3, [sp, #24]
 8001046:	4b63      	ldr	r3, [pc, #396]	; (80011d4 <GPS_p+0x1e8>)
 8001048:	9305      	str	r3, [sp, #20]
 800104a:	4b63      	ldr	r3, [pc, #396]	; (80011d8 <GPS_p+0x1ec>)
 800104c:	9304      	str	r3, [sp, #16]
 800104e:	4b63      	ldr	r3, [pc, #396]	; (80011dc <GPS_p+0x1f0>)
 8001050:	9303      	str	r3, [sp, #12]
 8001052:	4b63      	ldr	r3, [pc, #396]	; (80011e0 <GPS_p+0x1f4>)
 8001054:	9302      	str	r3, [sp, #8]
 8001056:	4b63      	ldr	r3, [pc, #396]	; (80011e4 <GPS_p+0x1f8>)
 8001058:	9301      	str	r3, [sp, #4]
 800105a:	4b63      	ldr	r3, [pc, #396]	; (80011e8 <GPS_p+0x1fc>)
 800105c:	9300      	str	r3, [sp, #0]
 800105e:	4b63      	ldr	r3, [pc, #396]	; (80011ec <GPS_p+0x200>)
 8001060:	4a63      	ldr	r2, [pc, #396]	; (80011f0 <GPS_p+0x204>)
 8001062:	4964      	ldr	r1, [pc, #400]	; (80011f4 <GPS_p+0x208>)
 8001064:	f008 fda0 	bl	8009ba8 <siscanf>

        printf("position %f %c , %f %c @ %f M\nfix_info:\nSATS: %d\nFIX: %d\nHDOP: %f\nchecksum: 0x%2hx\r\n",GPS.lat,GPS.NS_ind,GPS.lon,GPS.EW_ind,GPS.alt,GPS.sats,GPS.fixtype,GPS.hdop,GPS.checksum);
 8001068:	4b52      	ldr	r3, [pc, #328]	; (80011b4 <GPS_p+0x1c8>)
 800106a:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 800106e:	4b51      	ldr	r3, [pc, #324]	; (80011b4 <GPS_p+0x1c8>)
 8001070:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001074:	60fb      	str	r3, [r7, #12]
 8001076:	4b4f      	ldr	r3, [pc, #316]	; (80011b4 <GPS_p+0x1c8>)
 8001078:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800107c:	494d      	ldr	r1, [pc, #308]	; (80011b4 <GPS_p+0x1c8>)
 800107e:	f891 1045 	ldrb.w	r1, [r1, #69]	; 0x45
 8001082:	60b9      	str	r1, [r7, #8]
 8001084:	494b      	ldr	r1, [pc, #300]	; (80011b4 <GPS_p+0x1c8>)
 8001086:	e9d1 0108 	ldrd	r0, r1, [r1, #32]
 800108a:	4c4a      	ldr	r4, [pc, #296]	; (80011b4 <GPS_p+0x1c8>)
 800108c:	f9b4 403e 	ldrsh.w	r4, [r4, #62]	; 0x3e
 8001090:	607c      	str	r4, [r7, #4]
 8001092:	4c48      	ldr	r4, [pc, #288]	; (80011b4 <GPS_p+0x1c8>)
 8001094:	f9b4 403c 	ldrsh.w	r4, [r4, #60]	; 0x3c
 8001098:	603c      	str	r4, [r7, #0]
 800109a:	4c46      	ldr	r4, [pc, #280]	; (80011b4 <GPS_p+0x1c8>)
 800109c:	e9d4 4506 	ldrd	r4, r5, [r4, #24]
 80010a0:	4e44      	ldr	r6, [pc, #272]	; (80011b4 <GPS_p+0x1c8>)
 80010a2:	f9b6 6040 	ldrsh.w	r6, [r6, #64]	; 0x40
 80010a6:	960c      	str	r6, [sp, #48]	; 0x30
 80010a8:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 80010ac:	683d      	ldr	r5, [r7, #0]
 80010ae:	9509      	str	r5, [sp, #36]	; 0x24
 80010b0:	687c      	ldr	r4, [r7, #4]
 80010b2:	9408      	str	r4, [sp, #32]
 80010b4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80010b8:	68b9      	ldr	r1, [r7, #8]
 80010ba:	9104      	str	r1, [sp, #16]
 80010bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	9300      	str	r3, [sp, #0]
 80010c4:	4642      	mov	r2, r8
 80010c6:	464b      	mov	r3, r9
 80010c8:	484b      	ldr	r0, [pc, #300]	; (80011f8 <GPS_p+0x20c>)
 80010ca:	f008 fc35 	bl	8009938 <iprintf>

        //Resette alles für Checksumme
        GPS.checksum_calc=0;
 80010ce:	4b39      	ldr	r3, [pc, #228]	; (80011b4 <GPS_p+0x1c8>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
        GPS.index_end=1;
 80010d6:	4b37      	ldr	r3, [pc, #220]	; (80011b4 <GPS_p+0x1c8>)
 80010d8:	2201      	movs	r2, #1
 80010da:	865a      	strh	r2, [r3, #50]	; 0x32
        char x = 'A';
 80010dc:	2341      	movs	r3, #65	; 0x41
 80010de:	75fb      	strb	r3, [r7, #23]

        //solange das zeichen kein * ist weiter prüfen und den index mit hoch zählen
        while(x!= '*'){
 80010e0:	e010      	b.n	8001104 <GPS_p+0x118>
            GPS.index_end++;
 80010e2:	4b34      	ldr	r3, [pc, #208]	; (80011b4 <GPS_p+0x1c8>)
 80010e4:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 80010e8:	b29b      	uxth	r3, r3
 80010ea:	3301      	adds	r3, #1
 80010ec:	b29b      	uxth	r3, r3
 80010ee:	b21a      	sxth	r2, r3
 80010f0:	4b30      	ldr	r3, [pc, #192]	; (80011b4 <GPS_p+0x1c8>)
 80010f2:	865a      	strh	r2, [r3, #50]	; 0x32
            x = GPS.message2[GPS.index_end];
 80010f4:	4b2f      	ldr	r3, [pc, #188]	; (80011b4 <GPS_p+0x1c8>)
 80010f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f8:	4a2e      	ldr	r2, [pc, #184]	; (80011b4 <GPS_p+0x1c8>)
 80010fa:	f9b2 2032 	ldrsh.w	r2, [r2, #50]	; 0x32
 80010fe:	4413      	add	r3, r2
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	75fb      	strb	r3, [r7, #23]
        while(x!= '*'){
 8001104:	7dfb      	ldrb	r3, [r7, #23]
 8001106:	2b2a      	cmp	r3, #42	; 0x2a
 8001108:	d1eb      	bne.n	80010e2 <GPS_p+0xf6>
        }

        //warum -2 erklärt sich mir nicht ganz
        GPS.index_end -=2;
 800110a:	4b2a      	ldr	r3, [pc, #168]	; (80011b4 <GPS_p+0x1c8>)
 800110c:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8001110:	b29b      	uxth	r3, r3
 8001112:	3b02      	subs	r3, #2
 8001114:	b29b      	uxth	r3, r3
 8001116:	b21a      	sxth	r2, r3
 8001118:	4b26      	ldr	r3, [pc, #152]	; (80011b4 <GPS_p+0x1c8>)
 800111a:	865a      	strh	r2, [r3, #50]	; 0x32

        //Exclusiv ODER verknüpfung aller empfangenen Zeichen im Satz bildet die Checksumme
        for (int i=1; i<GPS.index_end;i++){
 800111c:	2301      	movs	r3, #1
 800111e:	613b      	str	r3, [r7, #16]
 8001120:	e010      	b.n	8001144 <GPS_p+0x158>
            GPS.checksum_calc=GPS.checksum_calc^GPS.message2[i];
 8001122:	4b24      	ldr	r3, [pc, #144]	; (80011b4 <GPS_p+0x1c8>)
 8001124:	f9b3 2042 	ldrsh.w	r2, [r3, #66]	; 0x42
 8001128:	4b22      	ldr	r3, [pc, #136]	; (80011b4 <GPS_p+0x1c8>)
 800112a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	440b      	add	r3, r1
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	b21b      	sxth	r3, r3
 8001134:	4053      	eors	r3, r2
 8001136:	b21a      	sxth	r2, r3
 8001138:	4b1e      	ldr	r3, [pc, #120]	; (80011b4 <GPS_p+0x1c8>)
 800113a:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
        for (int i=1; i<GPS.index_end;i++){
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	3301      	adds	r3, #1
 8001142:	613b      	str	r3, [r7, #16]
 8001144:	4b1b      	ldr	r3, [pc, #108]	; (80011b4 <GPS_p+0x1c8>)
 8001146:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 800114a:	461a      	mov	r2, r3
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	4293      	cmp	r3, r2
 8001150:	dbe7      	blt.n	8001122 <GPS_p+0x136>

        }
            printf("berechnete checksumme: 0x%x",GPS.checksum_calc);
 8001152:	4b18      	ldr	r3, [pc, #96]	; (80011b4 <GPS_p+0x1c8>)
 8001154:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 8001158:	4619      	mov	r1, r3
 800115a:	4828      	ldr	r0, [pc, #160]	; (80011fc <GPS_p+0x210>)
 800115c:	f008 fbec 	bl	8009938 <iprintf>

        //Wenn die empfangene Chekcsumme = berechnette Checksumme sind die Daten Korrekt
            if(GPS.checksum_calc==GPS.checksum){
 8001160:	4b14      	ldr	r3, [pc, #80]	; (80011b4 <GPS_p+0x1c8>)
 8001162:	f9b3 2042 	ldrsh.w	r2, [r3, #66]	; 0x42
 8001166:	4b13      	ldr	r3, [pc, #76]	; (80011b4 <GPS_p+0x1c8>)
 8001168:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800116c:	429a      	cmp	r2, r3
 800116e:	d11c      	bne.n	80011aa <GPS_p+0x1be>
                GPS.valid = true;
 8001170:	4b10      	ldr	r3, [pc, #64]	; (80011b4 <GPS_p+0x1c8>)
 8001172:	2201      	movs	r2, #1
 8001174:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                GPS.FIXTIME = (HAL_GetTick());
 8001178:	f002 ff1a 	bl	8003fb0 <HAL_GetTick>
 800117c:	4603      	mov	r3, r0
 800117e:	4a0d      	ldr	r2, [pc, #52]	; (80011b4 <GPS_p+0x1c8>)
 8001180:	6013      	str	r3, [r2, #0]
            printf("\nZEIT UTC: %d:%d:%d.%d\n",GPS.hour,GPS.min,GPS.sec,GPS.millis);
 8001182:	4b0c      	ldr	r3, [pc, #48]	; (80011b4 <GPS_p+0x1c8>)
 8001184:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8001188:	4619      	mov	r1, r3
 800118a:	4b0a      	ldr	r3, [pc, #40]	; (80011b4 <GPS_p+0x1c8>)
 800118c:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 8001190:	461a      	mov	r2, r3
 8001192:	4b08      	ldr	r3, [pc, #32]	; (80011b4 <GPS_p+0x1c8>)
 8001194:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 8001198:	4618      	mov	r0, r3
 800119a:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <GPS_p+0x1c8>)
 800119c:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 80011a0:	9300      	str	r3, [sp, #0]
 80011a2:	4603      	mov	r3, r0
 80011a4:	4816      	ldr	r0, [pc, #88]	; (8001200 <GPS_p+0x214>)
 80011a6:	f008 fbc7 	bl	8009938 <iprintf>
            }
    }


}
 80011aa:	bf00      	nop
 80011ac:	371c      	adds	r7, #28
 80011ae:	46bd      	mov	sp, r7
 80011b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80011b4:	20000b68 	.word	0x20000b68
 80011b8:	0800df90 	.word	0x0800df90
 80011bc:	20000ba8 	.word	0x20000ba8
 80011c0:	20000b90 	.word	0x20000b90
 80011c4:	20000b88 	.word	0x20000b88
 80011c8:	20000b80 	.word	0x20000b80
 80011cc:	20000ba6 	.word	0x20000ba6
 80011d0:	20000ba4 	.word	0x20000ba4
 80011d4:	20000bad 	.word	0x20000bad
 80011d8:	20000b78 	.word	0x20000b78
 80011dc:	20000bac 	.word	0x20000bac
 80011e0:	20000b70 	.word	0x20000b70
 80011e4:	20000ba2 	.word	0x20000ba2
 80011e8:	20000ba0 	.word	0x20000ba0
 80011ec:	20000b9e 	.word	0x20000b9e
 80011f0:	20000b9c 	.word	0x20000b9c
 80011f4:	0800df98 	.word	0x0800df98
 80011f8:	0800dfdc 	.word	0x0800dfdc
 80011fc:	0800e034 	.word	0x0800e034
 8001200:	0800e050 	.word	0x0800e050

08001204 <ILI9341_DrawChar>:

	ILI9341_DrawRectangle(X0True, Y0True, xLen, yLen, color);
}

void ILI9341_DrawChar(char ch, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 8001204:	b590      	push	{r4, r7, lr}
 8001206:	b08d      	sub	sp, #52	; 0x34
 8001208:	af02      	add	r7, sp, #8
 800120a:	60b9      	str	r1, [r7, #8]
 800120c:	4611      	mov	r1, r2
 800120e:	461a      	mov	r2, r3
 8001210:	4603      	mov	r3, r0
 8001212:	73fb      	strb	r3, [r7, #15]
 8001214:	460b      	mov	r3, r1
 8001216:	81bb      	strh	r3, [r7, #12]
 8001218:	4613      	mov	r3, r2
 800121a:	80fb      	strh	r3, [r7, #6]
	if ((ch < 31) || (ch > 127)) return;
 800121c:	7bfb      	ldrb	r3, [r7, #15]
 800121e:	2b1e      	cmp	r3, #30
 8001220:	d961      	bls.n	80012e6 <ILI9341_DrawChar+0xe2>
 8001222:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001226:	2b00      	cmp	r3, #0
 8001228:	db5d      	blt.n	80012e6 <ILI9341_DrawChar+0xe2>

	uint8_t fOffset, fWidth, fHeight, fBPL;
	uint8_t *tempChar;

	fOffset = font[0];
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	77fb      	strb	r3, [r7, #31]
	fWidth = font[1];
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	785b      	ldrb	r3, [r3, #1]
 8001234:	77bb      	strb	r3, [r7, #30]
	fHeight = font[2];
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	789b      	ldrb	r3, [r3, #2]
 800123a:	777b      	strb	r3, [r7, #29]
	fBPL = font[3];
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	78db      	ldrb	r3, [r3, #3]
 8001240:	773b      	strb	r3, [r7, #28]

	tempChar = (uint8_t*)&font[((ch - 0x20) * fOffset) + 4]; /* Current Character = Meta + (Character Index * Offset) */
 8001242:	7bfb      	ldrb	r3, [r7, #15]
 8001244:	3b20      	subs	r3, #32
 8001246:	7ffa      	ldrb	r2, [r7, #31]
 8001248:	fb02 f303 	mul.w	r3, r2, r3
 800124c:	3304      	adds	r3, #4
 800124e:	68ba      	ldr	r2, [r7, #8]
 8001250:	4413      	add	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]

	/* Clear background first */
	ILI9341_DrawRectangle(X, Y, fWidth, fHeight, bgcolor);
 8001254:	7fbb      	ldrb	r3, [r7, #30]
 8001256:	b29a      	uxth	r2, r3
 8001258:	7f7b      	ldrb	r3, [r7, #29]
 800125a:	b29c      	uxth	r4, r3
 800125c:	88f9      	ldrh	r1, [r7, #6]
 800125e:	89b8      	ldrh	r0, [r7, #12]
 8001260:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001262:	9300      	str	r3, [sp, #0]
 8001264:	4623      	mov	r3, r4
 8001266:	f000 fc1d 	bl	8001aa4 <ILI9341_DrawRectangle>

	for (int j=0; j < fHeight; j++)
 800126a:	2300      	movs	r3, #0
 800126c:	627b      	str	r3, [r7, #36]	; 0x24
 800126e:	e035      	b.n	80012dc <ILI9341_DrawChar+0xd8>
	{
		for (int i=0; i < fWidth; i++)
 8001270:	2300      	movs	r3, #0
 8001272:	623b      	str	r3, [r7, #32]
 8001274:	e02b      	b.n	80012ce <ILI9341_DrawChar+0xca>
		{
			uint8_t z =  tempChar[fBPL * i + ((j & 0xF8) >> 3) + 1]; /* (j & 0xF8) >> 3, increase one by 8-bits */
 8001276:	7f3b      	ldrb	r3, [r7, #28]
 8001278:	6a3a      	ldr	r2, [r7, #32]
 800127a:	fb02 f203 	mul.w	r2, r2, r3
 800127e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001280:	10db      	asrs	r3, r3, #3
 8001282:	f003 031f 	and.w	r3, r3, #31
 8001286:	4413      	add	r3, r2
 8001288:	3301      	adds	r3, #1
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	4413      	add	r3, r2
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	75fb      	strb	r3, [r7, #23]
			uint8_t b = 1 << (j & 0x07);
 8001292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001294:	f003 0307 	and.w	r3, r3, #7
 8001298:	2201      	movs	r2, #1
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	75bb      	strb	r3, [r7, #22]
			if (( z & b ) != 0x00)
 80012a0:	7dfa      	ldrb	r2, [r7, #23]
 80012a2:	7dbb      	ldrb	r3, [r7, #22]
 80012a4:	4013      	ands	r3, r2
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d00d      	beq.n	80012c8 <ILI9341_DrawChar+0xc4>
			{
				ILI9341_DrawPixel(X+i, Y+j, color);
 80012ac:	6a3b      	ldr	r3, [r7, #32]
 80012ae:	b29a      	uxth	r2, r3
 80012b0:	89bb      	ldrh	r3, [r7, #12]
 80012b2:	4413      	add	r3, r2
 80012b4:	b298      	uxth	r0, r3
 80012b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b8:	b29a      	uxth	r2, r3
 80012ba:	88fb      	ldrh	r3, [r7, #6]
 80012bc:	4413      	add	r3, r2
 80012be:	b29b      	uxth	r3, r3
 80012c0:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80012c2:	4619      	mov	r1, r3
 80012c4:	f000 fb88 	bl	80019d8 <ILI9341_DrawPixel>
		for (int i=0; i < fWidth; i++)
 80012c8:	6a3b      	ldr	r3, [r7, #32]
 80012ca:	3301      	adds	r3, #1
 80012cc:	623b      	str	r3, [r7, #32]
 80012ce:	7fbb      	ldrb	r3, [r7, #30]
 80012d0:	6a3a      	ldr	r2, [r7, #32]
 80012d2:	429a      	cmp	r2, r3
 80012d4:	dbcf      	blt.n	8001276 <ILI9341_DrawChar+0x72>
	for (int j=0; j < fHeight; j++)
 80012d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d8:	3301      	adds	r3, #1
 80012da:	627b      	str	r3, [r7, #36]	; 0x24
 80012dc:	7f7b      	ldrb	r3, [r7, #29]
 80012de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012e0:	429a      	cmp	r2, r3
 80012e2:	dbc5      	blt.n	8001270 <ILI9341_DrawChar+0x6c>
 80012e4:	e000      	b.n	80012e8 <ILI9341_DrawChar+0xe4>
	if ((ch < 31) || (ch > 127)) return;
 80012e6:	bf00      	nop
			}
		}
	}
}
 80012e8:	372c      	adds	r7, #44	; 0x2c
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd90      	pop	{r4, r7, pc}

080012ee <ILI9341_DrawText>:

void ILI9341_DrawText(const char* str, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b08a      	sub	sp, #40	; 0x28
 80012f2:	af02      	add	r7, sp, #8
 80012f4:	60f8      	str	r0, [r7, #12]
 80012f6:	60b9      	str	r1, [r7, #8]
 80012f8:	4611      	mov	r1, r2
 80012fa:	461a      	mov	r2, r3
 80012fc:	460b      	mov	r3, r1
 80012fe:	80fb      	strh	r3, [r7, #6]
 8001300:	4613      	mov	r3, r2
 8001302:	80bb      	strh	r3, [r7, #4]
	uint8_t charWidth;			/* Width of character */
	uint8_t fOffset = font[0];	/* Offset of character */
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	77fb      	strb	r3, [r7, #31]
	uint8_t fWidth = font[1];	/* Width of font */
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	785b      	ldrb	r3, [r3, #1]
 800130e:	77bb      	strb	r3, [r7, #30]

	while (*str)
 8001310:	e02d      	b.n	800136e <ILI9341_DrawText+0x80>
	{
		ILI9341_DrawChar(*str, font, X, Y, color, bgcolor);
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	7818      	ldrb	r0, [r3, #0]
 8001316:	88b9      	ldrh	r1, [r7, #4]
 8001318:	88fa      	ldrh	r2, [r7, #6]
 800131a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800131c:	9301      	str	r3, [sp, #4]
 800131e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001320:	9300      	str	r3, [sp, #0]
 8001322:	460b      	mov	r3, r1
 8001324:	68b9      	ldr	r1, [r7, #8]
 8001326:	f7ff ff6d 	bl	8001204 <ILI9341_DrawChar>

		/* Check character width and calculate proper position */
		uint8_t *tempChar = (uint8_t*)&font[((*str - 0x20) * fOffset) + 4];
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	3b20      	subs	r3, #32
 8001330:	7ffa      	ldrb	r2, [r7, #31]
 8001332:	fb02 f303 	mul.w	r3, r2, r3
 8001336:	3304      	adds	r3, #4
 8001338:	68ba      	ldr	r2, [r7, #8]
 800133a:	4413      	add	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
		charWidth = tempChar[0];
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	75fb      	strb	r3, [r7, #23]

		if(charWidth + 2 < fWidth)
 8001344:	7dfb      	ldrb	r3, [r7, #23]
 8001346:	1c9a      	adds	r2, r3, #2
 8001348:	7fbb      	ldrb	r3, [r7, #30]
 800134a:	429a      	cmp	r2, r3
 800134c:	da07      	bge.n	800135e <ILI9341_DrawText+0x70>
		{
			/* If character width is smaller than font width */
			X += (charWidth + 2);
 800134e:	7dfb      	ldrb	r3, [r7, #23]
 8001350:	b29a      	uxth	r2, r3
 8001352:	88fb      	ldrh	r3, [r7, #6]
 8001354:	4413      	add	r3, r2
 8001356:	b29b      	uxth	r3, r3
 8001358:	3302      	adds	r3, #2
 800135a:	80fb      	strh	r3, [r7, #6]
 800135c:	e004      	b.n	8001368 <ILI9341_DrawText+0x7a>
		}
		else
		{
			X += fWidth;
 800135e:	7fbb      	ldrb	r3, [r7, #30]
 8001360:	b29a      	uxth	r2, r3
 8001362:	88fb      	ldrh	r3, [r7, #6]
 8001364:	4413      	add	r3, r2
 8001366:	80fb      	strh	r3, [r7, #6]
		}

		str++;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	3301      	adds	r3, #1
 800136c:	60fb      	str	r3, [r7, #12]
	while (*str)
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d1cd      	bne.n	8001312 <ILI9341_DrawText+0x24>
	}
}
 8001376:	bf00      	nop
 8001378:	bf00      	nop
 800137a:	3720      	adds	r7, #32
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <HAL_SPI_TxCpltCallback>:

volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  /* Deselect when Tx Complete */
  if(hspi == HSPI_INSTANCE)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	4a06      	ldr	r2, [pc, #24]	; (80013a4 <HAL_SPI_TxCpltCallback+0x24>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d104      	bne.n	800139a <HAL_SPI_TxCpltCallback+0x1a>
  {
	  HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001390:	2201      	movs	r2, #1
 8001392:	2101      	movs	r1, #1
 8001394:	4804      	ldr	r0, [pc, #16]	; (80013a8 <HAL_SPI_TxCpltCallback+0x28>)
 8001396:	f003 fd03 	bl	8004da0 <HAL_GPIO_WritePin>
  }
}
 800139a:	bf00      	nop
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	20003840 	.word	0x20003840
 80013a8:	40020800 	.word	0x40020800

080013ac <ILI9341_SPI_Tx>:

static void ILI9341_SPI_Tx(uint8_t data)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 80013b6:	bf00      	nop
 80013b8:	4b08      	ldr	r3, [pc, #32]	; (80013dc <ILI9341_SPI_Tx+0x30>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	f003 0302 	and.w	r3, r3, #2
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d1f8      	bne.n	80013b8 <ILI9341_SPI_Tx+0xc>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, &data, 1);
 80013c6:	1dfb      	adds	r3, r7, #7
 80013c8:	2201      	movs	r2, #1
 80013ca:	4619      	mov	r1, r3
 80013cc:	4803      	ldr	r0, [pc, #12]	; (80013dc <ILI9341_SPI_Tx+0x30>)
 80013ce:	f005 ff59 	bl	8007284 <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
}
 80013d2:	bf00      	nop
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	20003840 	.word	0x20003840

080013e0 <ILI9341_SPI_TxBuffer>:

static void ILI9341_SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	460b      	mov	r3, r1
 80013ea:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 80013ec:	bf00      	nop
 80013ee:	4b08      	ldr	r3, [pc, #32]	; (8001410 <ILI9341_SPI_TxBuffer+0x30>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	f003 0302 	and.w	r3, r3, #2
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	d1f8      	bne.n	80013ee <ILI9341_SPI_TxBuffer+0xe>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, buffer, len);
 80013fc:	887b      	ldrh	r3, [r7, #2]
 80013fe:	461a      	mov	r2, r3
 8001400:	6879      	ldr	r1, [r7, #4]
 8001402:	4803      	ldr	r0, [pc, #12]	; (8001410 <ILI9341_SPI_TxBuffer+0x30>)
 8001404:	f005 ff3e 	bl	8007284 <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, buffer, len, 10);
}
 8001408:	bf00      	nop
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	20003840 	.word	0x20003840

08001414 <ILI9341_WriteCommand>:

void ILI9341_WriteCommand(uint8_t cmd)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	//command
 800141e:	2200      	movs	r2, #0
 8001420:	2101      	movs	r1, #1
 8001422:	4808      	ldr	r0, [pc, #32]	; (8001444 <ILI9341_WriteCommand+0x30>)
 8001424:	f003 fcbc 	bl	8004da0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8001428:	2200      	movs	r2, #0
 800142a:	2101      	movs	r1, #1
 800142c:	4806      	ldr	r0, [pc, #24]	; (8001448 <ILI9341_WriteCommand+0x34>)
 800142e:	f003 fcb7 	bl	8004da0 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(cmd);
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff ffb9 	bl	80013ac <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 800143a:	bf00      	nop
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	40020000 	.word	0x40020000
 8001448:	40020800 	.word	0x40020800

0800144c <ILI9341_WriteData>:

void ILI9341_WriteData(uint8_t data)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	4603      	mov	r3, r0
 8001454:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 8001456:	2201      	movs	r2, #1
 8001458:	2101      	movs	r1, #1
 800145a:	4808      	ldr	r0, [pc, #32]	; (800147c <ILI9341_WriteData+0x30>)
 800145c:	f003 fca0 	bl	8004da0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8001460:	2200      	movs	r2, #0
 8001462:	2101      	movs	r1, #1
 8001464:	4806      	ldr	r0, [pc, #24]	; (8001480 <ILI9341_WriteData+0x34>)
 8001466:	f003 fc9b 	bl	8004da0 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(data);
 800146a:	79fb      	ldrb	r3, [r7, #7]
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff ff9d 	bl	80013ac <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8001472:	bf00      	nop
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40020000 	.word	0x40020000
 8001480:	40020800 	.word	0x40020800

08001484 <ILI9341_WriteBuffer>:

void ILI9341_WriteBuffer(uint8_t *buffer, uint16_t len)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	460b      	mov	r3, r1
 800148e:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 8001490:	2201      	movs	r2, #1
 8001492:	2101      	movs	r1, #1
 8001494:	4808      	ldr	r0, [pc, #32]	; (80014b8 <ILI9341_WriteBuffer+0x34>)
 8001496:	f003 fc83 	bl	8004da0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 800149a:	2200      	movs	r2, #0
 800149c:	2101      	movs	r1, #1
 800149e:	4807      	ldr	r0, [pc, #28]	; (80014bc <ILI9341_WriteBuffer+0x38>)
 80014a0:	f003 fc7e 	bl	8004da0 <HAL_GPIO_WritePin>
	ILI9341_SPI_TxBuffer(buffer, len);
 80014a4:	887b      	ldrh	r3, [r7, #2]
 80014a6:	4619      	mov	r1, r3
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f7ff ff99 	bl	80013e0 <ILI9341_SPI_TxBuffer>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 80014ae:	bf00      	nop
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40020000 	.word	0x40020000
 80014bc:	40020800 	.word	0x40020800

080014c0 <ILI9341_SetAddress>:

void ILI9341_SetAddress(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 80014c0:	b590      	push	{r4, r7, lr}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4604      	mov	r4, r0
 80014c8:	4608      	mov	r0, r1
 80014ca:	4611      	mov	r1, r2
 80014cc:	461a      	mov	r2, r3
 80014ce:	4623      	mov	r3, r4
 80014d0:	80fb      	strh	r3, [r7, #6]
 80014d2:	4603      	mov	r3, r0
 80014d4:	80bb      	strh	r3, [r7, #4]
 80014d6:	460b      	mov	r3, r1
 80014d8:	807b      	strh	r3, [r7, #2]
 80014da:	4613      	mov	r3, r2
 80014dc:	803b      	strh	r3, [r7, #0]
	uint8_t buffer[4];
	buffer[0] = x1 >> 8;
 80014de:	88fb      	ldrh	r3, [r7, #6]
 80014e0:	0a1b      	lsrs	r3, r3, #8
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	733b      	strb	r3, [r7, #12]
	buffer[1] = x1;
 80014e8:	88fb      	ldrh	r3, [r7, #6]
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	737b      	strb	r3, [r7, #13]
	buffer[2] = x2 >> 8;
 80014ee:	887b      	ldrh	r3, [r7, #2]
 80014f0:	0a1b      	lsrs	r3, r3, #8
 80014f2:	b29b      	uxth	r3, r3
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	73bb      	strb	r3, [r7, #14]
	buffer[3] = x2;
 80014f8:	887b      	ldrh	r3, [r7, #2]
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2A);
 80014fe:	202a      	movs	r0, #42	; 0x2a
 8001500:	f7ff ff88 	bl	8001414 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 8001504:	f107 030c 	add.w	r3, r7, #12
 8001508:	2104      	movs	r1, #4
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff ffba 	bl	8001484 <ILI9341_WriteBuffer>

	buffer[0] = y1 >> 8;
 8001510:	88bb      	ldrh	r3, [r7, #4]
 8001512:	0a1b      	lsrs	r3, r3, #8
 8001514:	b29b      	uxth	r3, r3
 8001516:	b2db      	uxtb	r3, r3
 8001518:	733b      	strb	r3, [r7, #12]
	buffer[1] = y1;
 800151a:	88bb      	ldrh	r3, [r7, #4]
 800151c:	b2db      	uxtb	r3, r3
 800151e:	737b      	strb	r3, [r7, #13]
	buffer[2] = y2 >> 8;
 8001520:	883b      	ldrh	r3, [r7, #0]
 8001522:	0a1b      	lsrs	r3, r3, #8
 8001524:	b29b      	uxth	r3, r3
 8001526:	b2db      	uxtb	r3, r3
 8001528:	73bb      	strb	r3, [r7, #14]
	buffer[3] = y2;
 800152a:	883b      	ldrh	r3, [r7, #0]
 800152c:	b2db      	uxtb	r3, r3
 800152e:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2B);
 8001530:	202b      	movs	r0, #43	; 0x2b
 8001532:	f7ff ff6f 	bl	8001414 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 8001536:	f107 030c 	add.w	r3, r7, #12
 800153a:	2104      	movs	r1, #4
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff ffa1 	bl	8001484 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);
 8001542:	202c      	movs	r0, #44	; 0x2c
 8001544:	f7ff ff66 	bl	8001414 <ILI9341_WriteCommand>
}
 8001548:	bf00      	nop
 800154a:	3714      	adds	r7, #20
 800154c:	46bd      	mov	sp, r7
 800154e:	bd90      	pop	{r4, r7, pc}

08001550 <ILI9341_Reset>:

void ILI9341_Reset(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);	//Disable
 8001554:	2200      	movs	r2, #0
 8001556:	2104      	movs	r1, #4
 8001558:	480c      	ldr	r0, [pc, #48]	; (800158c <ILI9341_Reset+0x3c>)
 800155a:	f003 fc21 	bl	8004da0 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800155e:	200a      	movs	r0, #10
 8001560:	f002 fd32 	bl	8003fc8 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);		//Select
 8001564:	2200      	movs	r2, #0
 8001566:	2101      	movs	r1, #1
 8001568:	4808      	ldr	r0, [pc, #32]	; (800158c <ILI9341_Reset+0x3c>)
 800156a:	f003 fc19 	bl	8004da0 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800156e:	200a      	movs	r0, #10
 8001570:	f002 fd2a 	bl	8003fc8 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 8001574:	2201      	movs	r2, #1
 8001576:	2104      	movs	r1, #4
 8001578:	4804      	ldr	r0, [pc, #16]	; (800158c <ILI9341_Reset+0x3c>)
 800157a:	f003 fc11 	bl	8004da0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET); 		//Deselect
 800157e:	2201      	movs	r2, #1
 8001580:	2101      	movs	r1, #1
 8001582:	4802      	ldr	r0, [pc, #8]	; (800158c <ILI9341_Reset+0x3c>)
 8001584:	f003 fc0c 	bl	8004da0 <HAL_GPIO_WritePin>
}
 8001588:	bf00      	nop
 800158a:	bd80      	pop	{r7, pc}
 800158c:	40020800 	.word	0x40020800

08001590 <ILI9341_Enable>:

void ILI9341_Enable(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 8001594:	2201      	movs	r2, #1
 8001596:	2104      	movs	r1, #4
 8001598:	4802      	ldr	r0, [pc, #8]	; (80015a4 <ILI9341_Enable+0x14>)
 800159a:	f003 fc01 	bl	8004da0 <HAL_GPIO_WritePin>
}
 800159e:	bf00      	nop
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40020800 	.word	0x40020800

080015a8 <ILI9341_Init>:

void ILI9341_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
	ILI9341_Enable();
 80015ac:	f7ff fff0 	bl	8001590 <ILI9341_Enable>
	ILI9341_Reset();
 80015b0:	f7ff ffce 	bl	8001550 <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_WriteCommand(0x01);
 80015b4:	2001      	movs	r0, #1
 80015b6:	f7ff ff2d 	bl	8001414 <ILI9341_WriteCommand>
	HAL_Delay(10);
 80015ba:	200a      	movs	r0, #10
 80015bc:	f002 fd04 	bl	8003fc8 <HAL_Delay>

	//POWER CONTROL A
	ILI9341_WriteCommand(0xCB);
 80015c0:	20cb      	movs	r0, #203	; 0xcb
 80015c2:	f7ff ff27 	bl	8001414 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x39);
 80015c6:	2039      	movs	r0, #57	; 0x39
 80015c8:	f7ff ff40 	bl	800144c <ILI9341_WriteData>
	ILI9341_WriteData(0x2C);
 80015cc:	202c      	movs	r0, #44	; 0x2c
 80015ce:	f7ff ff3d 	bl	800144c <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 80015d2:	2000      	movs	r0, #0
 80015d4:	f7ff ff3a 	bl	800144c <ILI9341_WriteData>
	ILI9341_WriteData(0x34);
 80015d8:	2034      	movs	r0, #52	; 0x34
 80015da:	f7ff ff37 	bl	800144c <ILI9341_WriteData>
	ILI9341_WriteData(0x02);
 80015de:	2002      	movs	r0, #2
 80015e0:	f7ff ff34 	bl	800144c <ILI9341_WriteData>

	//POWER CONTROL B
	ILI9341_WriteCommand(0xCF);
 80015e4:	20cf      	movs	r0, #207	; 0xcf
 80015e6:	f7ff ff15 	bl	8001414 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 80015ea:	2000      	movs	r0, #0
 80015ec:	f7ff ff2e 	bl	800144c <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 80015f0:	20c1      	movs	r0, #193	; 0xc1
 80015f2:	f7ff ff2b 	bl	800144c <ILI9341_WriteData>
	ILI9341_WriteData(0x30);
 80015f6:	2030      	movs	r0, #48	; 0x30
 80015f8:	f7ff ff28 	bl	800144c <ILI9341_WriteData>

	//DRIVER TIMING CONTROL A
	ILI9341_WriteCommand(0xE8);
 80015fc:	20e8      	movs	r0, #232	; 0xe8
 80015fe:	f7ff ff09 	bl	8001414 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x85);
 8001602:	2085      	movs	r0, #133	; 0x85
 8001604:	f7ff ff22 	bl	800144c <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8001608:	2000      	movs	r0, #0
 800160a:	f7ff ff1f 	bl	800144c <ILI9341_WriteData>
	ILI9341_WriteData(0x78);
 800160e:	2078      	movs	r0, #120	; 0x78
 8001610:	f7ff ff1c 	bl	800144c <ILI9341_WriteData>

	//DRIVER TIMING CONTROL B
	ILI9341_WriteCommand(0xEA);
 8001614:	20ea      	movs	r0, #234	; 0xea
 8001616:	f7ff fefd 	bl	8001414 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 800161a:	2000      	movs	r0, #0
 800161c:	f7ff ff16 	bl	800144c <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8001620:	2000      	movs	r0, #0
 8001622:	f7ff ff13 	bl	800144c <ILI9341_WriteData>

	//POWER ON SEQUENCE CONTROL
	ILI9341_WriteCommand(0xED);
 8001626:	20ed      	movs	r0, #237	; 0xed
 8001628:	f7ff fef4 	bl	8001414 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x64);
 800162c:	2064      	movs	r0, #100	; 0x64
 800162e:	f7ff ff0d 	bl	800144c <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8001632:	2003      	movs	r0, #3
 8001634:	f7ff ff0a 	bl	800144c <ILI9341_WriteData>
	ILI9341_WriteData(0x12);
 8001638:	2012      	movs	r0, #18
 800163a:	f7ff ff07 	bl	800144c <ILI9341_WriteData>
	ILI9341_WriteData(0x81);
 800163e:	2081      	movs	r0, #129	; 0x81
 8001640:	f7ff ff04 	bl	800144c <ILI9341_WriteData>

	//PUMP RATIO CONTROL
	ILI9341_WriteCommand(0xF7);
 8001644:	20f7      	movs	r0, #247	; 0xf7
 8001646:	f7ff fee5 	bl	8001414 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x20);
 800164a:	2020      	movs	r0, #32
 800164c:	f7ff fefe 	bl	800144c <ILI9341_WriteData>

	//POWER CONTROL,VRH[5:0]
	ILI9341_WriteCommand(0xC0);
 8001650:	20c0      	movs	r0, #192	; 0xc0
 8001652:	f7ff fedf 	bl	8001414 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x23);
 8001656:	2023      	movs	r0, #35	; 0x23
 8001658:	f7ff fef8 	bl	800144c <ILI9341_WriteData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_WriteCommand(0xC1);
 800165c:	20c1      	movs	r0, #193	; 0xc1
 800165e:	f7ff fed9 	bl	8001414 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x10);
 8001662:	2010      	movs	r0, #16
 8001664:	f7ff fef2 	bl	800144c <ILI9341_WriteData>

	//VCM CONTROL
	ILI9341_WriteCommand(0xC5);
 8001668:	20c5      	movs	r0, #197	; 0xc5
 800166a:	f7ff fed3 	bl	8001414 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x3E);
 800166e:	203e      	movs	r0, #62	; 0x3e
 8001670:	f7ff feec 	bl	800144c <ILI9341_WriteData>
	ILI9341_WriteData(0x28);
 8001674:	2028      	movs	r0, #40	; 0x28
 8001676:	f7ff fee9 	bl	800144c <ILI9341_WriteData>

	//VCM CONTROL 2
	ILI9341_WriteCommand(0xC7);
 800167a:	20c7      	movs	r0, #199	; 0xc7
 800167c:	f7ff feca 	bl	8001414 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x86);
 8001680:	2086      	movs	r0, #134	; 0x86
 8001682:	f7ff fee3 	bl	800144c <ILI9341_WriteData>

	//MEMORY ACCESS CONTROL
	ILI9341_WriteCommand(0x36);
 8001686:	2036      	movs	r0, #54	; 0x36
 8001688:	f7ff fec4 	bl	8001414 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x48);
 800168c:	2048      	movs	r0, #72	; 0x48
 800168e:	f7ff fedd 	bl	800144c <ILI9341_WriteData>

	//PIXEL FORMAT
	ILI9341_WriteCommand(0x3A);
 8001692:	203a      	movs	r0, #58	; 0x3a
 8001694:	f7ff febe 	bl	8001414 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x55);
 8001698:	2055      	movs	r0, #85	; 0x55
 800169a:	f7ff fed7 	bl	800144c <ILI9341_WriteData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_WriteCommand(0xB1);
 800169e:	20b1      	movs	r0, #177	; 0xb1
 80016a0:	f7ff feb8 	bl	8001414 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 80016a4:	2000      	movs	r0, #0
 80016a6:	f7ff fed1 	bl	800144c <ILI9341_WriteData>
	ILI9341_WriteData(0x18);
 80016aa:	2018      	movs	r0, #24
 80016ac:	f7ff fece 	bl	800144c <ILI9341_WriteData>

	//DISPLAY FUNCTION CONTROL
	ILI9341_WriteCommand(0xB6);
 80016b0:	20b6      	movs	r0, #182	; 0xb6
 80016b2:	f7ff feaf 	bl	8001414 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x08);
 80016b6:	2008      	movs	r0, #8
 80016b8:	f7ff fec8 	bl	800144c <ILI9341_WriteData>
	ILI9341_WriteData(0x82);
 80016bc:	2082      	movs	r0, #130	; 0x82
 80016be:	f7ff fec5 	bl	800144c <ILI9341_WriteData>
	ILI9341_WriteData(0x27);
 80016c2:	2027      	movs	r0, #39	; 0x27
 80016c4:	f7ff fec2 	bl	800144c <ILI9341_WriteData>

	//3GAMMA FUNCTION DISABLE
	ILI9341_WriteCommand(0xF2);
 80016c8:	20f2      	movs	r0, #242	; 0xf2
 80016ca:	f7ff fea3 	bl	8001414 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 80016ce:	2000      	movs	r0, #0
 80016d0:	f7ff febc 	bl	800144c <ILI9341_WriteData>

	//GAMMA CURVE SELECTED
	ILI9341_WriteCommand(0x26);
 80016d4:	2026      	movs	r0, #38	; 0x26
 80016d6:	f7ff fe9d 	bl	8001414 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x01);
 80016da:	2001      	movs	r0, #1
 80016dc:	f7ff feb6 	bl	800144c <ILI9341_WriteData>

	//POSITIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE0);
 80016e0:	20e0      	movs	r0, #224	; 0xe0
 80016e2:	f7ff fe97 	bl	8001414 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x0F);
 80016e6:	200f      	movs	r0, #15
 80016e8:	f7ff feb0 	bl	800144c <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 80016ec:	2031      	movs	r0, #49	; 0x31
 80016ee:	f7ff fead 	bl	800144c <ILI9341_WriteData>
	ILI9341_WriteData(0x2B);
 80016f2:	202b      	movs	r0, #43	; 0x2b
 80016f4:	f7ff feaa 	bl	800144c <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 80016f8:	200c      	movs	r0, #12
 80016fa:	f7ff fea7 	bl	800144c <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 80016fe:	200e      	movs	r0, #14
 8001700:	f7ff fea4 	bl	800144c <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8001704:	2008      	movs	r0, #8
 8001706:	f7ff fea1 	bl	800144c <ILI9341_WriteData>
	ILI9341_WriteData(0x4E);
 800170a:	204e      	movs	r0, #78	; 0x4e
 800170c:	f7ff fe9e 	bl	800144c <ILI9341_WriteData>
	ILI9341_WriteData(0xF1);
 8001710:	20f1      	movs	r0, #241	; 0xf1
 8001712:	f7ff fe9b 	bl	800144c <ILI9341_WriteData>
	ILI9341_WriteData(0x37);
 8001716:	2037      	movs	r0, #55	; 0x37
 8001718:	f7ff fe98 	bl	800144c <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 800171c:	2007      	movs	r0, #7
 800171e:	f7ff fe95 	bl	800144c <ILI9341_WriteData>
	ILI9341_WriteData(0x10);
 8001722:	2010      	movs	r0, #16
 8001724:	f7ff fe92 	bl	800144c <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8001728:	2003      	movs	r0, #3
 800172a:	f7ff fe8f 	bl	800144c <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 800172e:	200e      	movs	r0, #14
 8001730:	f7ff fe8c 	bl	800144c <ILI9341_WriteData>
	ILI9341_WriteData(0x09);
 8001734:	2009      	movs	r0, #9
 8001736:	f7ff fe89 	bl	800144c <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 800173a:	2000      	movs	r0, #0
 800173c:	f7ff fe86 	bl	800144c <ILI9341_WriteData>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE1);
 8001740:	20e1      	movs	r0, #225	; 0xe1
 8001742:	f7ff fe67 	bl	8001414 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8001746:	2000      	movs	r0, #0
 8001748:	f7ff fe80 	bl	800144c <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 800174c:	200e      	movs	r0, #14
 800174e:	f7ff fe7d 	bl	800144c <ILI9341_WriteData>
	ILI9341_WriteData(0x14);
 8001752:	2014      	movs	r0, #20
 8001754:	f7ff fe7a 	bl	800144c <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8001758:	2003      	movs	r0, #3
 800175a:	f7ff fe77 	bl	800144c <ILI9341_WriteData>
	ILI9341_WriteData(0x11);
 800175e:	2011      	movs	r0, #17
 8001760:	f7ff fe74 	bl	800144c <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8001764:	2007      	movs	r0, #7
 8001766:	f7ff fe71 	bl	800144c <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 800176a:	2031      	movs	r0, #49	; 0x31
 800176c:	f7ff fe6e 	bl	800144c <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8001770:	20c1      	movs	r0, #193	; 0xc1
 8001772:	f7ff fe6b 	bl	800144c <ILI9341_WriteData>
	ILI9341_WriteData(0x48);
 8001776:	2048      	movs	r0, #72	; 0x48
 8001778:	f7ff fe68 	bl	800144c <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 800177c:	2008      	movs	r0, #8
 800177e:	f7ff fe65 	bl	800144c <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 8001782:	200f      	movs	r0, #15
 8001784:	f7ff fe62 	bl	800144c <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8001788:	200c      	movs	r0, #12
 800178a:	f7ff fe5f 	bl	800144c <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 800178e:	2031      	movs	r0, #49	; 0x31
 8001790:	f7ff fe5c 	bl	800144c <ILI9341_WriteData>
	ILI9341_WriteData(0x36);
 8001794:	2036      	movs	r0, #54	; 0x36
 8001796:	f7ff fe59 	bl	800144c <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 800179a:	200f      	movs	r0, #15
 800179c:	f7ff fe56 	bl	800144c <ILI9341_WriteData>

	//EXIT SLEEP
	ILI9341_WriteCommand(0x11);
 80017a0:	2011      	movs	r0, #17
 80017a2:	f7ff fe37 	bl	8001414 <ILI9341_WriteCommand>
	HAL_Delay(100);
 80017a6:	2064      	movs	r0, #100	; 0x64
 80017a8:	f002 fc0e 	bl	8003fc8 <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_WriteCommand(0x29);
 80017ac:	2029      	movs	r0, #41	; 0x29
 80017ae:	f7ff fe31 	bl	8001414 <ILI9341_WriteCommand>

	//STARTING ROTATION
	ILI9341_SetRotation(SCREEN_VERTICAL_1);
 80017b2:	2000      	movs	r0, #0
 80017b4:	f000 f802 	bl	80017bc <ILI9341_SetRotation>
}
 80017b8:	bf00      	nop
 80017ba:	bd80      	pop	{r7, pc}

080017bc <ILI9341_SetRotation>:

void ILI9341_SetRotation(uint8_t rotation)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	4603      	mov	r3, r0
 80017c4:	71fb      	strb	r3, [r7, #7]
	ILI9341_WriteCommand(0x36);
 80017c6:	2036      	movs	r0, #54	; 0x36
 80017c8:	f7ff fe24 	bl	8001414 <ILI9341_WriteCommand>
	HAL_Delay(1);
 80017cc:	2001      	movs	r0, #1
 80017ce:	f002 fbfb 	bl	8003fc8 <HAL_Delay>

	switch(rotation)
 80017d2:	79fb      	ldrb	r3, [r7, #7]
 80017d4:	2b03      	cmp	r3, #3
 80017d6:	d837      	bhi.n	8001848 <ILI9341_SetRotation+0x8c>
 80017d8:	a201      	add	r2, pc, #4	; (adr r2, 80017e0 <ILI9341_SetRotation+0x24>)
 80017da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017de:	bf00      	nop
 80017e0:	080017f1 	.word	0x080017f1
 80017e4:	08001807 	.word	0x08001807
 80017e8:	0800181d 	.word	0x0800181d
 80017ec:	08001833 	.word	0x08001833
	{
	case SCREEN_VERTICAL_1:
		ILI9341_WriteData(0x40|0x08);
 80017f0:	2048      	movs	r0, #72	; 0x48
 80017f2:	f7ff fe2b 	bl	800144c <ILI9341_WriteData>
		LCD_WIDTH = 240;
 80017f6:	4b17      	ldr	r3, [pc, #92]	; (8001854 <ILI9341_SetRotation+0x98>)
 80017f8:	22f0      	movs	r2, #240	; 0xf0
 80017fa:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 80017fc:	4b16      	ldr	r3, [pc, #88]	; (8001858 <ILI9341_SetRotation+0x9c>)
 80017fe:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001802:	801a      	strh	r2, [r3, #0]
		break;
 8001804:	e021      	b.n	800184a <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_1:
		ILI9341_WriteData(0x20|0x08);
 8001806:	2028      	movs	r0, #40	; 0x28
 8001808:	f7ff fe20 	bl	800144c <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 800180c:	4b11      	ldr	r3, [pc, #68]	; (8001854 <ILI9341_SetRotation+0x98>)
 800180e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001812:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8001814:	4b10      	ldr	r3, [pc, #64]	; (8001858 <ILI9341_SetRotation+0x9c>)
 8001816:	22f0      	movs	r2, #240	; 0xf0
 8001818:	801a      	strh	r2, [r3, #0]
		break;
 800181a:	e016      	b.n	800184a <ILI9341_SetRotation+0x8e>
	case SCREEN_VERTICAL_2:
		ILI9341_WriteData(0x80|0x08);
 800181c:	2088      	movs	r0, #136	; 0x88
 800181e:	f7ff fe15 	bl	800144c <ILI9341_WriteData>
		LCD_WIDTH  = 240;
 8001822:	4b0c      	ldr	r3, [pc, #48]	; (8001854 <ILI9341_SetRotation+0x98>)
 8001824:	22f0      	movs	r2, #240	; 0xf0
 8001826:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8001828:	4b0b      	ldr	r3, [pc, #44]	; (8001858 <ILI9341_SetRotation+0x9c>)
 800182a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800182e:	801a      	strh	r2, [r3, #0]
		break;
 8001830:	e00b      	b.n	800184a <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_2:
		ILI9341_WriteData(0x40|0x80|0x20|0x08);
 8001832:	20e8      	movs	r0, #232	; 0xe8
 8001834:	f7ff fe0a 	bl	800144c <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 8001838:	4b06      	ldr	r3, [pc, #24]	; (8001854 <ILI9341_SetRotation+0x98>)
 800183a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800183e:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8001840:	4b05      	ldr	r3, [pc, #20]	; (8001858 <ILI9341_SetRotation+0x9c>)
 8001842:	22f0      	movs	r2, #240	; 0xf0
 8001844:	801a      	strh	r2, [r3, #0]
		break;
 8001846:	e000      	b.n	800184a <ILI9341_SetRotation+0x8e>
	default:
		break;
 8001848:	bf00      	nop
	}
}
 800184a:	bf00      	nop
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	20000002 	.word	0x20000002
 8001858:	20000000 	.word	0x20000000

0800185c <ILI9341_DrawColorBurst>:
	uint8_t buffer[2] = {color>>8, color};
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
}

void ILI9341_DrawColorBurst(uint16_t color, uint32_t size)
{
 800185c:	b5b0      	push	{r4, r5, r7, lr}
 800185e:	b08c      	sub	sp, #48	; 0x30
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	6039      	str	r1, [r7, #0]
 8001866:	80fb      	strh	r3, [r7, #6]
 8001868:	466b      	mov	r3, sp
 800186a:	461d      	mov	r5, r3
	uint32_t BufferSize = 0;
 800186c:	2300      	movs	r3, #0
 800186e:	627b      	str	r3, [r7, #36]	; 0x24

	if((size*2) < BURST_MAX_SIZE)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001878:	d202      	bcs.n	8001880 <ILI9341_DrawColorBurst+0x24>
	{
		BufferSize = size;
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	627b      	str	r3, [r7, #36]	; 0x24
 800187e:	e002      	b.n	8001886 <ILI9341_DrawColorBurst+0x2a>
	}
	else
	{
		BufferSize = BURST_MAX_SIZE;
 8001880:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001884:	627b      	str	r3, [r7, #36]	; 0x24
	}

	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8001886:	2201      	movs	r2, #1
 8001888:	2101      	movs	r1, #1
 800188a:	483d      	ldr	r0, [pc, #244]	; (8001980 <ILI9341_DrawColorBurst+0x124>)
 800188c:	f003 fa88 	bl	8004da0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001890:	2200      	movs	r2, #0
 8001892:	2101      	movs	r1, #1
 8001894:	483b      	ldr	r0, [pc, #236]	; (8001984 <ILI9341_DrawColorBurst+0x128>)
 8001896:	f003 fa83 	bl	8004da0 <HAL_GPIO_WritePin>

	uint8_t chifted = color>>8;
 800189a:	88fb      	ldrh	r3, [r7, #6]
 800189c:	0a1b      	lsrs	r3, r3, #8
 800189e:	b29b      	uxth	r3, r3
 80018a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t BurstBuffer[BufferSize];
 80018a4:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80018a6:	4623      	mov	r3, r4
 80018a8:	3b01      	subs	r3, #1
 80018aa:	61fb      	str	r3, [r7, #28]
 80018ac:	4620      	mov	r0, r4
 80018ae:	f04f 0100 	mov.w	r1, #0
 80018b2:	f04f 0200 	mov.w	r2, #0
 80018b6:	f04f 0300 	mov.w	r3, #0
 80018ba:	00cb      	lsls	r3, r1, #3
 80018bc:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80018c0:	00c2      	lsls	r2, r0, #3
 80018c2:	4620      	mov	r0, r4
 80018c4:	f04f 0100 	mov.w	r1, #0
 80018c8:	f04f 0200 	mov.w	r2, #0
 80018cc:	f04f 0300 	mov.w	r3, #0
 80018d0:	00cb      	lsls	r3, r1, #3
 80018d2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80018d6:	00c2      	lsls	r2, r0, #3
 80018d8:	1de3      	adds	r3, r4, #7
 80018da:	08db      	lsrs	r3, r3, #3
 80018dc:	00db      	lsls	r3, r3, #3
 80018de:	ebad 0d03 	sub.w	sp, sp, r3
 80018e2:	466b      	mov	r3, sp
 80018e4:	3300      	adds	r3, #0
 80018e6:	61bb      	str	r3, [r7, #24]

	for(uint32_t j = 0; j < BufferSize; j+=2)
 80018e8:	2300      	movs	r3, #0
 80018ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80018ec:	e00e      	b.n	800190c <ILI9341_DrawColorBurst+0xb0>
	{
		BurstBuffer[j] = chifted;
 80018ee:	69ba      	ldr	r2, [r7, #24]
 80018f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018f2:	4413      	add	r3, r2
 80018f4:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80018f8:	701a      	strb	r2, [r3, #0]
		BurstBuffer[j+1] = color;
 80018fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018fc:	3301      	adds	r3, #1
 80018fe:	88fa      	ldrh	r2, [r7, #6]
 8001900:	b2d1      	uxtb	r1, r2
 8001902:	69ba      	ldr	r2, [r7, #24]
 8001904:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < BufferSize; j+=2)
 8001906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001908:	3302      	adds	r3, #2
 800190a:	62bb      	str	r3, [r7, #40]	; 0x28
 800190c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800190e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001910:	429a      	cmp	r2, r3
 8001912:	d3ec      	bcc.n	80018ee <ILI9341_DrawColorBurst+0x92>
	}

	uint32_t SendingSize = size * 2;
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	617b      	str	r3, [r7, #20]
	uint32_t SendingInBlock = SendingSize / BufferSize;
 800191a:	697a      	ldr	r2, [r7, #20]
 800191c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001922:	613b      	str	r3, [r7, #16]
	uint32_t RemainderFromBlock = SendingSize % BufferSize;
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001928:	fbb3 f2f2 	udiv	r2, r3, r2
 800192c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800192e:	fb01 f202 	mul.w	r2, r1, r2
 8001932:	1a9b      	subs	r3, r3, r2
 8001934:	60fb      	str	r3, [r7, #12]

	if(SendingInBlock != 0)
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d010      	beq.n	800195e <ILI9341_DrawColorBurst+0x102>
	{
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 800193c:	2300      	movs	r3, #0
 800193e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001940:	e009      	b.n	8001956 <ILI9341_DrawColorBurst+0xfa>
		{
			HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, BufferSize, 10);
 8001942:	69b9      	ldr	r1, [r7, #24]
 8001944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001946:	b29a      	uxth	r2, r3
 8001948:	230a      	movs	r3, #10
 800194a:	480f      	ldr	r0, [pc, #60]	; (8001988 <ILI9341_DrawColorBurst+0x12c>)
 800194c:	f005 fb5d 	bl	800700a <HAL_SPI_Transmit>
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8001950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001952:	3301      	adds	r3, #1
 8001954:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001956:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	429a      	cmp	r2, r3
 800195c:	d3f1      	bcc.n	8001942 <ILI9341_DrawColorBurst+0xe6>
		}
	}

	HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, RemainderFromBlock, 10);
 800195e:	69b9      	ldr	r1, [r7, #24]
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	b29a      	uxth	r2, r3
 8001964:	230a      	movs	r3, #10
 8001966:	4808      	ldr	r0, [pc, #32]	; (8001988 <ILI9341_DrawColorBurst+0x12c>)
 8001968:	f005 fb4f 	bl	800700a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800196c:	2201      	movs	r2, #1
 800196e:	2101      	movs	r1, #1
 8001970:	4804      	ldr	r0, [pc, #16]	; (8001984 <ILI9341_DrawColorBurst+0x128>)
 8001972:	f003 fa15 	bl	8004da0 <HAL_GPIO_WritePin>
 8001976:	46ad      	mov	sp, r5
}
 8001978:	bf00      	nop
 800197a:	3730      	adds	r7, #48	; 0x30
 800197c:	46bd      	mov	sp, r7
 800197e:	bdb0      	pop	{r4, r5, r7, pc}
 8001980:	40020000 	.word	0x40020000
 8001984:	40020800 	.word	0x40020800
 8001988:	20003840 	.word	0x20003840

0800198c <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	4603      	mov	r3, r0
 8001994:	80fb      	strh	r3, [r7, #6]
	ILI9341_SetAddress(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8001996:	4b0e      	ldr	r3, [pc, #56]	; (80019d0 <ILI9341_FillScreen+0x44>)
 8001998:	881b      	ldrh	r3, [r3, #0]
 800199a:	b29a      	uxth	r2, r3
 800199c:	4b0d      	ldr	r3, [pc, #52]	; (80019d4 <ILI9341_FillScreen+0x48>)
 800199e:	881b      	ldrh	r3, [r3, #0]
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	2100      	movs	r1, #0
 80019a4:	2000      	movs	r0, #0
 80019a6:	f7ff fd8b 	bl	80014c0 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, LCD_WIDTH*LCD_HEIGHT);
 80019aa:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <ILI9341_FillScreen+0x44>)
 80019ac:	881b      	ldrh	r3, [r3, #0]
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	461a      	mov	r2, r3
 80019b2:	4b08      	ldr	r3, [pc, #32]	; (80019d4 <ILI9341_FillScreen+0x48>)
 80019b4:	881b      	ldrh	r3, [r3, #0]
 80019b6:	b29b      	uxth	r3, r3
 80019b8:	fb03 f302 	mul.w	r3, r3, r2
 80019bc:	461a      	mov	r2, r3
 80019be:	88fb      	ldrh	r3, [r7, #6]
 80019c0:	4611      	mov	r1, r2
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7ff ff4a 	bl	800185c <ILI9341_DrawColorBurst>
}
 80019c8:	bf00      	nop
 80019ca:	3708      	adds	r7, #8
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	20000002 	.word	0x20000002
 80019d4:	20000000 	.word	0x20000000

080019d8 <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x,uint16_t y,uint16_t color)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	4603      	mov	r3, r0
 80019e0:	80fb      	strh	r3, [r7, #6]
 80019e2:	460b      	mov	r3, r1
 80019e4:	80bb      	strh	r3, [r7, #4]
 80019e6:	4613      	mov	r3, r2
 80019e8:	807b      	strh	r3, [r7, #2]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 80019ea:	4b2c      	ldr	r3, [pc, #176]	; (8001a9c <ILI9341_DrawPixel+0xc4>)
 80019ec:	881b      	ldrh	r3, [r3, #0]
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	88fa      	ldrh	r2, [r7, #6]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d24d      	bcs.n	8001a92 <ILI9341_DrawPixel+0xba>
 80019f6:	4b2a      	ldr	r3, [pc, #168]	; (8001aa0 <ILI9341_DrawPixel+0xc8>)
 80019f8:	881b      	ldrh	r3, [r3, #0]
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	88ba      	ldrh	r2, [r7, #4]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d247      	bcs.n	8001a92 <ILI9341_DrawPixel+0xba>

	uint8_t bufferX[4] = {x>>8, x, (x+1)>>8, (x+1)};
 8001a02:	88fb      	ldrh	r3, [r7, #6]
 8001a04:	0a1b      	lsrs	r3, r3, #8
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	753b      	strb	r3, [r7, #20]
 8001a0c:	88fb      	ldrh	r3, [r7, #6]
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	757b      	strb	r3, [r7, #21]
 8001a12:	88fb      	ldrh	r3, [r7, #6]
 8001a14:	3301      	adds	r3, #1
 8001a16:	121b      	asrs	r3, r3, #8
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	75bb      	strb	r3, [r7, #22]
 8001a1c:	88fb      	ldrh	r3, [r7, #6]
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	3301      	adds	r3, #1
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	75fb      	strb	r3, [r7, #23]
	uint8_t bufferY[4] = {y>>8, y, (y+1)>>8, (y+1)};
 8001a26:	88bb      	ldrh	r3, [r7, #4]
 8001a28:	0a1b      	lsrs	r3, r3, #8
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	743b      	strb	r3, [r7, #16]
 8001a30:	88bb      	ldrh	r3, [r7, #4]
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	747b      	strb	r3, [r7, #17]
 8001a36:	88bb      	ldrh	r3, [r7, #4]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	121b      	asrs	r3, r3, #8
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	74bb      	strb	r3, [r7, #18]
 8001a40:	88bb      	ldrh	r3, [r7, #4]
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	3301      	adds	r3, #1
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	74fb      	strb	r3, [r7, #19]
	uint8_t bufferC[2] = {color>>8, color};
 8001a4a:	887b      	ldrh	r3, [r7, #2]
 8001a4c:	0a1b      	lsrs	r3, r3, #8
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	733b      	strb	r3, [r7, #12]
 8001a54:	887b      	ldrh	r3, [r7, #2]
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	737b      	strb	r3, [r7, #13]

	ILI9341_WriteCommand(0x2A);						//ADDRESS
 8001a5a:	202a      	movs	r0, #42	; 0x2a
 8001a5c:	f7ff fcda 	bl	8001414 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferX, sizeof(bufferX));	//XDATA
 8001a60:	f107 0314 	add.w	r3, r7, #20
 8001a64:	2104      	movs	r1, #4
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff fd0c 	bl	8001484 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2B);						//ADDRESS
 8001a6c:	202b      	movs	r0, #43	; 0x2b
 8001a6e:	f7ff fcd1 	bl	8001414 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferY, sizeof(bufferY));	//YDATA
 8001a72:	f107 0310 	add.w	r3, r7, #16
 8001a76:	2104      	movs	r1, #4
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff fd03 	bl	8001484 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);						//ADDRESS
 8001a7e:	202c      	movs	r0, #44	; 0x2c
 8001a80:	f7ff fcc8 	bl	8001414 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferC, sizeof(bufferC));	//COLOR
 8001a84:	f107 030c 	add.w	r3, r7, #12
 8001a88:	2102      	movs	r1, #2
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff fcfa 	bl	8001484 <ILI9341_WriteBuffer>
 8001a90:	e000      	b.n	8001a94 <ILI9341_DrawPixel+0xbc>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001a92:	bf00      	nop
}
 8001a94:	3718      	adds	r7, #24
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	20000002 	.word	0x20000002
 8001aa0:	20000000 	.word	0x20000000

08001aa4 <ILI9341_DrawRectangle>:

void ILI9341_DrawRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 8001aa4:	b590      	push	{r4, r7, lr}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	4604      	mov	r4, r0
 8001aac:	4608      	mov	r0, r1
 8001aae:	4611      	mov	r1, r2
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	4623      	mov	r3, r4
 8001ab4:	80fb      	strh	r3, [r7, #6]
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	80bb      	strh	r3, [r7, #4]
 8001aba:	460b      	mov	r3, r1
 8001abc:	807b      	strh	r3, [r7, #2]
 8001abe:	4613      	mov	r3, r2
 8001ac0:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001ac2:	4b24      	ldr	r3, [pc, #144]	; (8001b54 <ILI9341_DrawRectangle+0xb0>)
 8001ac4:	881b      	ldrh	r3, [r3, #0]
 8001ac6:	b29b      	uxth	r3, r3
 8001ac8:	88fa      	ldrh	r2, [r7, #6]
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d23d      	bcs.n	8001b4a <ILI9341_DrawRectangle+0xa6>
 8001ace:	4b22      	ldr	r3, [pc, #136]	; (8001b58 <ILI9341_DrawRectangle+0xb4>)
 8001ad0:	881b      	ldrh	r3, [r3, #0]
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	88ba      	ldrh	r2, [r7, #4]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d237      	bcs.n	8001b4a <ILI9341_DrawRectangle+0xa6>

	if((x+width-1)>=LCD_WIDTH)
 8001ada:	88fa      	ldrh	r2, [r7, #6]
 8001adc:	887b      	ldrh	r3, [r7, #2]
 8001ade:	4413      	add	r3, r2
 8001ae0:	4a1c      	ldr	r2, [pc, #112]	; (8001b54 <ILI9341_DrawRectangle+0xb0>)
 8001ae2:	8812      	ldrh	r2, [r2, #0]
 8001ae4:	b292      	uxth	r2, r2
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	dd05      	ble.n	8001af6 <ILI9341_DrawRectangle+0x52>
	{
		width=LCD_WIDTH-x;
 8001aea:	4b1a      	ldr	r3, [pc, #104]	; (8001b54 <ILI9341_DrawRectangle+0xb0>)
 8001aec:	881b      	ldrh	r3, [r3, #0]
 8001aee:	b29a      	uxth	r2, r3
 8001af0:	88fb      	ldrh	r3, [r7, #6]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	807b      	strh	r3, [r7, #2]
	}

	if((y+height-1)>=LCD_HEIGHT)
 8001af6:	88ba      	ldrh	r2, [r7, #4]
 8001af8:	883b      	ldrh	r3, [r7, #0]
 8001afa:	4413      	add	r3, r2
 8001afc:	4a16      	ldr	r2, [pc, #88]	; (8001b58 <ILI9341_DrawRectangle+0xb4>)
 8001afe:	8812      	ldrh	r2, [r2, #0]
 8001b00:	b292      	uxth	r2, r2
 8001b02:	4293      	cmp	r3, r2
 8001b04:	dd05      	ble.n	8001b12 <ILI9341_DrawRectangle+0x6e>
	{
		height=LCD_HEIGHT-y;
 8001b06:	4b14      	ldr	r3, [pc, #80]	; (8001b58 <ILI9341_DrawRectangle+0xb4>)
 8001b08:	881b      	ldrh	r3, [r3, #0]
 8001b0a:	b29a      	uxth	r2, r3
 8001b0c:	88bb      	ldrh	r3, [r7, #4]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	803b      	strh	r3, [r7, #0]
	}

	ILI9341_SetAddress(x, y, x+width-1, y+height-1);
 8001b12:	88fa      	ldrh	r2, [r7, #6]
 8001b14:	887b      	ldrh	r3, [r7, #2]
 8001b16:	4413      	add	r3, r2
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	b29c      	uxth	r4, r3
 8001b1e:	88ba      	ldrh	r2, [r7, #4]
 8001b20:	883b      	ldrh	r3, [r7, #0]
 8001b22:	4413      	add	r3, r2
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	3b01      	subs	r3, #1
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	88b9      	ldrh	r1, [r7, #4]
 8001b2c:	88f8      	ldrh	r0, [r7, #6]
 8001b2e:	4622      	mov	r2, r4
 8001b30:	f7ff fcc6 	bl	80014c0 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, height*width);
 8001b34:	883b      	ldrh	r3, [r7, #0]
 8001b36:	887a      	ldrh	r2, [r7, #2]
 8001b38:	fb02 f303 	mul.w	r3, r2, r3
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	8b3b      	ldrh	r3, [r7, #24]
 8001b40:	4611      	mov	r1, r2
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7ff fe8a 	bl	800185c <ILI9341_DrawColorBurst>
 8001b48:	e000      	b.n	8001b4c <ILI9341_DrawRectangle+0xa8>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001b4a:	bf00      	nop
}
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd90      	pop	{r4, r7, pc}
 8001b52:	bf00      	nop
 8001b54:	20000002 	.word	0x20000002
 8001b58:	20000000 	.word	0x20000000

08001b5c <ILI9341_DrawHLine>:

void ILI9341_DrawHLine(uint16_t x, uint16_t y, uint16_t width, uint16_t color)
{
 8001b5c:	b590      	push	{r4, r7, lr}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	4604      	mov	r4, r0
 8001b64:	4608      	mov	r0, r1
 8001b66:	4611      	mov	r1, r2
 8001b68:	461a      	mov	r2, r3
 8001b6a:	4623      	mov	r3, r4
 8001b6c:	80fb      	strh	r3, [r7, #6]
 8001b6e:	4603      	mov	r3, r0
 8001b70:	80bb      	strh	r3, [r7, #4]
 8001b72:	460b      	mov	r3, r1
 8001b74:	807b      	strh	r3, [r7, #2]
 8001b76:	4613      	mov	r3, r2
 8001b78:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001b7a:	4b18      	ldr	r3, [pc, #96]	; (8001bdc <ILI9341_DrawHLine+0x80>)
 8001b7c:	881b      	ldrh	r3, [r3, #0]
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	88fa      	ldrh	r2, [r7, #6]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d225      	bcs.n	8001bd2 <ILI9341_DrawHLine+0x76>
 8001b86:	4b16      	ldr	r3, [pc, #88]	; (8001be0 <ILI9341_DrawHLine+0x84>)
 8001b88:	881b      	ldrh	r3, [r3, #0]
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	88ba      	ldrh	r2, [r7, #4]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d21f      	bcs.n	8001bd2 <ILI9341_DrawHLine+0x76>

	if((x+width-1)>=LCD_WIDTH)
 8001b92:	88fa      	ldrh	r2, [r7, #6]
 8001b94:	887b      	ldrh	r3, [r7, #2]
 8001b96:	4413      	add	r3, r2
 8001b98:	4a10      	ldr	r2, [pc, #64]	; (8001bdc <ILI9341_DrawHLine+0x80>)
 8001b9a:	8812      	ldrh	r2, [r2, #0]
 8001b9c:	b292      	uxth	r2, r2
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	dd05      	ble.n	8001bae <ILI9341_DrawHLine+0x52>
	{
		width=LCD_WIDTH-x;
 8001ba2:	4b0e      	ldr	r3, [pc, #56]	; (8001bdc <ILI9341_DrawHLine+0x80>)
 8001ba4:	881b      	ldrh	r3, [r3, #0]
 8001ba6:	b29a      	uxth	r2, r3
 8001ba8:	88fb      	ldrh	r3, [r7, #6]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	807b      	strh	r3, [r7, #2]
	}

	ILI9341_SetAddress(x, y, x+width-1, y);
 8001bae:	88fa      	ldrh	r2, [r7, #6]
 8001bb0:	887b      	ldrh	r3, [r7, #2]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	b29a      	uxth	r2, r3
 8001bba:	88bb      	ldrh	r3, [r7, #4]
 8001bbc:	88b9      	ldrh	r1, [r7, #4]
 8001bbe:	88f8      	ldrh	r0, [r7, #6]
 8001bc0:	f7ff fc7e 	bl	80014c0 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, width);
 8001bc4:	887a      	ldrh	r2, [r7, #2]
 8001bc6:	883b      	ldrh	r3, [r7, #0]
 8001bc8:	4611      	mov	r1, r2
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7ff fe46 	bl	800185c <ILI9341_DrawColorBurst>
 8001bd0:	e000      	b.n	8001bd4 <ILI9341_DrawHLine+0x78>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001bd2:	bf00      	nop
}
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd90      	pop	{r4, r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	20000002 	.word	0x20000002
 8001be0:	20000000 	.word	0x20000000

08001be4 <ILI9341_DrawVLine>:

void ILI9341_DrawVLine(uint16_t x, uint16_t y, uint16_t height, uint16_t color)
{
 8001be4:	b590      	push	{r4, r7, lr}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	4604      	mov	r4, r0
 8001bec:	4608      	mov	r0, r1
 8001bee:	4611      	mov	r1, r2
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	4623      	mov	r3, r4
 8001bf4:	80fb      	strh	r3, [r7, #6]
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	80bb      	strh	r3, [r7, #4]
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	807b      	strh	r3, [r7, #2]
 8001bfe:	4613      	mov	r3, r2
 8001c00:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001c02:	4b18      	ldr	r3, [pc, #96]	; (8001c64 <ILI9341_DrawVLine+0x80>)
 8001c04:	881b      	ldrh	r3, [r3, #0]
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	88fa      	ldrh	r2, [r7, #6]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d225      	bcs.n	8001c5a <ILI9341_DrawVLine+0x76>
 8001c0e:	4b16      	ldr	r3, [pc, #88]	; (8001c68 <ILI9341_DrawVLine+0x84>)
 8001c10:	881b      	ldrh	r3, [r3, #0]
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	88ba      	ldrh	r2, [r7, #4]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d21f      	bcs.n	8001c5a <ILI9341_DrawVLine+0x76>

	if((y+height-1)>=LCD_HEIGHT)
 8001c1a:	88ba      	ldrh	r2, [r7, #4]
 8001c1c:	887b      	ldrh	r3, [r7, #2]
 8001c1e:	4413      	add	r3, r2
 8001c20:	4a11      	ldr	r2, [pc, #68]	; (8001c68 <ILI9341_DrawVLine+0x84>)
 8001c22:	8812      	ldrh	r2, [r2, #0]
 8001c24:	b292      	uxth	r2, r2
 8001c26:	4293      	cmp	r3, r2
 8001c28:	dd05      	ble.n	8001c36 <ILI9341_DrawVLine+0x52>
	{
		height=LCD_HEIGHT-y;
 8001c2a:	4b0f      	ldr	r3, [pc, #60]	; (8001c68 <ILI9341_DrawVLine+0x84>)
 8001c2c:	881b      	ldrh	r3, [r3, #0]
 8001c2e:	b29a      	uxth	r2, r3
 8001c30:	88bb      	ldrh	r3, [r7, #4]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	807b      	strh	r3, [r7, #2]
	}

	ILI9341_SetAddress(x, y, x, y+height-1);
 8001c36:	88ba      	ldrh	r2, [r7, #4]
 8001c38:	887b      	ldrh	r3, [r7, #2]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	88fa      	ldrh	r2, [r7, #6]
 8001c44:	88b9      	ldrh	r1, [r7, #4]
 8001c46:	88f8      	ldrh	r0, [r7, #6]
 8001c48:	f7ff fc3a 	bl	80014c0 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, height);
 8001c4c:	887a      	ldrh	r2, [r7, #2]
 8001c4e:	883b      	ldrh	r3, [r7, #0]
 8001c50:	4611      	mov	r1, r2
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff fe02 	bl	800185c <ILI9341_DrawColorBurst>
 8001c58:	e000      	b.n	8001c5c <ILI9341_DrawVLine+0x78>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001c5a:	bf00      	nop
}
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd90      	pop	{r4, r7, pc}
 8001c62:	bf00      	nop
 8001c64:	20000002 	.word	0x20000002
 8001c68:	20000000 	.word	0x20000000

08001c6c <wireWriteRegister>:
/*!
    @brief  Sends a single command byte over I2C
*/
/**************************************************************************/
void wireWriteRegister (uint8_t reg, uint16_t value)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b088      	sub	sp, #32
 8001c70:	af04      	add	r7, sp, #16
 8001c72:	4603      	mov	r3, r0
 8001c74:	460a      	mov	r2, r1
 8001c76:	71fb      	strb	r3, [r7, #7]
 8001c78:	4613      	mov	r3, r2
 8001c7a:	80bb      	strh	r3, [r7, #4]
	uint8_t i2c_temp[2];
	i2c_temp[0] = value>>8;
 8001c7c:	88bb      	ldrh	r3, [r7, #4]
 8001c7e:	0a1b      	lsrs	r3, r3, #8
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	733b      	strb	r3, [r7, #12]
	i2c_temp[1] = value;
 8001c86:	88bb      	ldrh	r3, [r7, #4]
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(&hi2c1, INA219_ADDRESS<<1, (uint16_t)reg, 1, i2c_temp, 2, 0xffffffff);
 8001c8c:	79fb      	ldrb	r3, [r7, #7]
 8001c8e:	b29a      	uxth	r2, r3
 8001c90:	f04f 33ff 	mov.w	r3, #4294967295
 8001c94:	9302      	str	r3, [sp, #8]
 8001c96:	2302      	movs	r3, #2
 8001c98:	9301      	str	r3, [sp, #4]
 8001c9a:	f107 030c 	add.w	r3, r7, #12
 8001c9e:	9300      	str	r3, [sp, #0]
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	2180      	movs	r1, #128	; 0x80
 8001ca4:	4804      	ldr	r0, [pc, #16]	; (8001cb8 <wireWriteRegister+0x4c>)
 8001ca6:	f003 f9f1 	bl	800508c <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8001caa:	2001      	movs	r0, #1
 8001cac:	f002 f98c 	bl	8003fc8 <HAL_Delay>
}
 8001cb0:	bf00      	nop
 8001cb2:	3710      	adds	r7, #16
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	20002ec8 	.word	0x20002ec8

08001cbc <wireReadRegister>:
/*!
    @brief  Reads a 16 bit values over I2C
*/
/**************************************************************************/
void wireReadRegister(uint8_t reg, uint16_t *value)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b088      	sub	sp, #32
 8001cc0:	af04      	add	r7, sp, #16
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	6039      	str	r1, [r7, #0]
 8001cc6:	71fb      	strb	r3, [r7, #7]
	uint8_t i2c_temp[2];
	HAL_I2C_Mem_Read(&hi2c1, INA219_ADDRESS<<1, (uint16_t)reg, 1,i2c_temp, 2, 0xffffffff);
 8001cc8:	79fb      	ldrb	r3, [r7, #7]
 8001cca:	b29a      	uxth	r2, r3
 8001ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8001cd0:	9302      	str	r3, [sp, #8]
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	9301      	str	r3, [sp, #4]
 8001cd6:	f107 030c 	add.w	r3, r7, #12
 8001cda:	9300      	str	r3, [sp, #0]
 8001cdc:	2301      	movs	r3, #1
 8001cde:	2180      	movs	r1, #128	; 0x80
 8001ce0:	4809      	ldr	r0, [pc, #36]	; (8001d08 <wireReadRegister+0x4c>)
 8001ce2:	f003 facd 	bl	8005280 <HAL_I2C_Mem_Read>
	HAL_Delay(1);
 8001ce6:	2001      	movs	r0, #1
 8001ce8:	f002 f96e 	bl	8003fc8 <HAL_Delay>
	*value = ((uint16_t)i2c_temp[0]<<8 )|(uint16_t)i2c_temp[1];
 8001cec:	7b3b      	ldrb	r3, [r7, #12]
 8001cee:	021b      	lsls	r3, r3, #8
 8001cf0:	b21a      	sxth	r2, r3
 8001cf2:	7b7b      	ldrb	r3, [r7, #13]
 8001cf4:	b21b      	sxth	r3, r3
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	b21b      	sxth	r3, r3
 8001cfa:	b29a      	uxth	r2, r3
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	801a      	strh	r2, [r3, #0]
}
 8001d00:	bf00      	nop
 8001d02:	3710      	adds	r7, #16
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	20002ec8 	.word	0x20002ec8

08001d0c <setCalibration_16V_400mA>:
    @brief set device to alibration which uses the highest precision for
      current measurement (0.1mA), at the expense of
      only supporting 16V at 400mA max.
*/
/**************************************************************************/
void setCalibration_16V_400mA(void) {
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0

  // 5. Compute the calibration register
  // Cal = trunc (0.04096 / (Current_LSB * RSHUNT))
  // Cal = 8192 (0x2000)

  ina219_calValue = 8192;
 8001d12:	4b0e      	ldr	r3, [pc, #56]	; (8001d4c <setCalibration_16V_400mA+0x40>)
 8001d14:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d18:	601a      	str	r2, [r3, #0]
  // MaximumPower = Max_Current_Before_Overflow * VBUS_MAX
  // MaximumPower = 0.4 * 16V
  // MaximumPower = 6.4W

  // Set multipliers to convert raw current/power values
  ina219_currentDivider_mA = 20;  // Current LSB = 50uA per bit (1000/50 = 20)
 8001d1a:	4b0d      	ldr	r3, [pc, #52]	; (8001d50 <setCalibration_16V_400mA+0x44>)
 8001d1c:	2214      	movs	r2, #20
 8001d1e:	601a      	str	r2, [r3, #0]
  ina219_powerMultiplier_mW = 1;     // Power LSB = 1mW per bit
 8001d20:	4b0c      	ldr	r3, [pc, #48]	; (8001d54 <setCalibration_16V_400mA+0x48>)
 8001d22:	2201      	movs	r2, #1
 8001d24:	601a      	str	r2, [r3, #0]

  // Set Calibration register to 'Cal' calculated above
  wireWriteRegister(INA219_REG_CALIBRATION, ina219_calValue);
 8001d26:	4b09      	ldr	r3, [pc, #36]	; (8001d4c <setCalibration_16V_400mA+0x40>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	2005      	movs	r0, #5
 8001d30:	f7ff ff9c 	bl	8001c6c <wireWriteRegister>

  // Set Config register to take into account the settings above
  uint16_t config = INA219_CONFIG_BVOLTAGERANGE_16V |
 8001d34:	f240 139f 	movw	r3, #415	; 0x19f
 8001d38:	80fb      	strh	r3, [r7, #6]
                    INA219_CONFIG_GAIN_1_40MV |
                    INA219_CONFIG_BADCRES_12BIT |
                    INA219_CONFIG_SADCRES_12BIT_1S_532US |
                    INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS;
  wireWriteRegister(INA219_REG_CONFIG, config);
 8001d3a:	88fb      	ldrh	r3, [r7, #6]
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	2000      	movs	r0, #0
 8001d40:	f7ff ff94 	bl	8001c6c <wireWriteRegister>
}
 8001d44:	bf00      	nop
 8001d46:	3708      	adds	r7, #8
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	20002bcc 	.word	0x20002bcc
 8001d50:	20000bc0 	.word	0x20000bc0
 8001d54:	20000bc4 	.word	0x20000bc4

08001d58 <getBusVoltage_raw>:
/*!
    @brief  Gets the raw bus voltage (16-bit signed integer, so +-32767)
    @return the raw bus voltage reading
*/
/**************************************************************************/
int16_t getBusVoltage_raw() {
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
  uint16_t value;
  wireReadRegister(INA219_REG_BUSVOLTAGE, &value);
 8001d5e:	1dbb      	adds	r3, r7, #6
 8001d60:	4619      	mov	r1, r3
 8001d62:	2002      	movs	r0, #2
 8001d64:	f7ff ffaa 	bl	8001cbc <wireReadRegister>

  // Shift to the right 3 to drop CNVR and OVF and multiply by LSB
  return (int16_t)((value >> 3) * 4);
 8001d68:	88fb      	ldrh	r3, [r7, #6]
 8001d6a:	08db      	lsrs	r3, r3, #3
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	b29b      	uxth	r3, r3
 8001d72:	b21b      	sxth	r3, r3
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3708      	adds	r7, #8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <getCurrent_raw>:
/*!
    @brief  Gets the raw current value (16-bit signed integer, so +-32767)
    @return the raw current reading
*/
/**************************************************************************/
int16_t getCurrent_raw() {
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0

  // Sometimes a sharp load will reset the INA219, which will
  // reset the cal register, meaning CURRENT and POWER will
  // not be available ... avoid this by always setting a cal
  // value even if it's an unfortunate extra step
  wireWriteRegister(INA219_REG_CALIBRATION, ina219_calValue);
 8001d82:	4b09      	ldr	r3, [pc, #36]	; (8001da8 <getCurrent_raw+0x2c>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	4619      	mov	r1, r3
 8001d8a:	2005      	movs	r0, #5
 8001d8c:	f7ff ff6e 	bl	8001c6c <wireWriteRegister>

  // Now we can safely read the CURRENT register!
  wireReadRegister(INA219_REG_CURRENT, &value);
 8001d90:	1dbb      	adds	r3, r7, #6
 8001d92:	4619      	mov	r1, r3
 8001d94:	2004      	movs	r0, #4
 8001d96:	f7ff ff91 	bl	8001cbc <wireReadRegister>

  return (int16_t)value;
 8001d9a:	88fb      	ldrh	r3, [r7, #6]
 8001d9c:	b21b      	sxth	r3, r3
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	20002bcc 	.word	0x20002bcc

08001dac <getPower_raw>:
/*!
    @brief  Gets the raw power value (16-bit signed integer, so +-32767)
    @return raw power reading
*/
/**************************************************************************/
int16_t getPower_raw() {
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0

  // Sometimes a sharp load will reset the INA219, which will
  // reset the cal register, meaning CURRENT and POWER will
  // not be available ... avoid this by always setting a cal
  // value even if it's an unfortunate extra step
  wireWriteRegister(INA219_REG_CALIBRATION, ina219_calValue);
 8001db2:	4b09      	ldr	r3, [pc, #36]	; (8001dd8 <getPower_raw+0x2c>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	4619      	mov	r1, r3
 8001dba:	2005      	movs	r0, #5
 8001dbc:	f7ff ff56 	bl	8001c6c <wireWriteRegister>

  // Now we can safely read the POWER register!
  wireReadRegister(INA219_REG_POWER, &value);
 8001dc0:	1dbb      	adds	r3, r7, #6
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	2003      	movs	r0, #3
 8001dc6:	f7ff ff79 	bl	8001cbc <wireReadRegister>

  return (int16_t)value;
 8001dca:	88fb      	ldrh	r3, [r7, #6]
 8001dcc:	b21b      	sxth	r3, r3
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	20002bcc 	.word	0x20002bcc
 8001ddc:	00000000 	.word	0x00000000

08001de0 <getBusVoltage_V>:
/*!
    @brief  Gets the shunt voltage in volts
    @return the bus voltage converted to volts
*/
/**************************************************************************/
float getBusVoltage_V() {
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
  int16_t value = getBusVoltage_raw();
 8001de6:	f7ff ffb7 	bl	8001d58 <getBusVoltage_raw>
 8001dea:	4603      	mov	r3, r0
 8001dec:	80fb      	strh	r3, [r7, #6]
  return value * 0.001;
 8001dee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7fe fb96 	bl	8000524 <__aeabi_i2d>
 8001df8:	a309      	add	r3, pc, #36	; (adr r3, 8001e20 <getBusVoltage_V+0x40>)
 8001dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dfe:	f7fe fbfb 	bl	80005f8 <__aeabi_dmul>
 8001e02:	4602      	mov	r2, r0
 8001e04:	460b      	mov	r3, r1
 8001e06:	4610      	mov	r0, r2
 8001e08:	4619      	mov	r1, r3
 8001e0a:	f7fe feed 	bl	8000be8 <__aeabi_d2f>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	ee07 3a90 	vmov	s15, r3
}
 8001e14:	eeb0 0a67 	vmov.f32	s0, s15
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	d2f1a9fc 	.word	0xd2f1a9fc
 8001e24:	3f50624d 	.word	0x3f50624d

08001e28 <getCurrent_mA>:
    @brief  Gets the current value in mA, taking into account the
            config settings and current LSB
    @return the current reading convereted to milliamps
*/
/**************************************************************************/
float getCurrent_mA() {
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
  float valueDec = getCurrent_raw();
 8001e2e:	f7ff ffa5 	bl	8001d7c <getCurrent_raw>
 8001e32:	4603      	mov	r3, r0
 8001e34:	ee07 3a90 	vmov	s15, r3
 8001e38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e3c:	edc7 7a01 	vstr	s15, [r7, #4]
  valueDec /= ina219_currentDivider_mA;
 8001e40:	4b09      	ldr	r3, [pc, #36]	; (8001e68 <getCurrent_mA+0x40>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	ee07 3a90 	vmov	s15, r3
 8001e48:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e4c:	edd7 6a01 	vldr	s13, [r7, #4]
 8001e50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e54:	edc7 7a01 	vstr	s15, [r7, #4]
  return valueDec;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	ee07 3a90 	vmov	s15, r3
}
 8001e5e:	eeb0 0a67 	vmov.f32	s0, s15
 8001e62:	3708      	adds	r7, #8
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	20000bc0 	.word	0x20000bc0

08001e6c <getPower_mW>:
    @brief  Gets the power value in mW, taking into account the
            config settings and current LSB
    @return power reading converted to milliwatts
*/
/**************************************************************************/
float getPower_mW() {
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
  float valueDec = getPower_raw();
 8001e72:	f7ff ff9b 	bl	8001dac <getPower_raw>
 8001e76:	4603      	mov	r3, r0
 8001e78:	ee07 3a90 	vmov	s15, r3
 8001e7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e80:	edc7 7a01 	vstr	s15, [r7, #4]
  valueDec *= ina219_powerMultiplier_mW;
 8001e84:	4b09      	ldr	r3, [pc, #36]	; (8001eac <getPower_mW+0x40>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	ee07 3a90 	vmov	s15, r3
 8001e8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e90:	ed97 7a01 	vldr	s14, [r7, #4]
 8001e94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e98:	edc7 7a01 	vstr	s15, [r7, #4]
  return valueDec;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	ee07 3a90 	vmov	s15, r3
}
 8001ea2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ea6:	3708      	adds	r7, #8
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	20000bc4 	.word	0x20000bc4

08001eb0 <HAL_UART_RxCpltCallback>:
char printbuffer[300];

bool printed;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart3, Rx_data, RX_BUFFER_SIZE);
 8001eb8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ebc:	4906      	ldr	r1, [pc, #24]	; (8001ed8 <HAL_UART_RxCpltCallback+0x28>)
 8001ebe:	4807      	ldr	r0, [pc, #28]	; (8001edc <HAL_UART_RxCpltCallback+0x2c>)
 8001ec0:	f005 fd77 	bl	80079b2 <HAL_UART_Receive_IT>
  GPS.message=Rx_data;
 8001ec4:	4b06      	ldr	r3, [pc, #24]	; (8001ee0 <HAL_UART_RxCpltCallback+0x30>)
 8001ec6:	4a04      	ldr	r2, [pc, #16]	; (8001ed8 <HAL_UART_RxCpltCallback+0x28>)
 8001ec8:	649a      	str	r2, [r3, #72]	; 0x48
  update = true;
 8001eca:	4b06      	ldr	r3, [pc, #24]	; (8001ee4 <HAL_UART_RxCpltCallback+0x34>)
 8001ecc:	2201      	movs	r2, #1
 8001ece:	701a      	strb	r2, [r3, #0]
}
 8001ed0:	bf00      	nop
 8001ed2:	3708      	adds	r7, #8
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	20000a68 	.word	0x20000a68
 8001edc:	20002e84 	.word	0x20002e84
 8001ee0:	20000b68 	.word	0x20000b68
 8001ee4:	20000bb8 	.word	0x20000bb8

08001ee8 <set_time>:
/**Fungsi ini digunakan untuk set timer jika dibutuhkan untuk set rtc
  */
void set_time(void){
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b086      	sub	sp, #24
 8001eec:	af00      	add	r7, sp, #0
	  RTC_TimeTypeDef sTime = {0};
 8001eee:	1d3b      	adds	r3, r7, #4
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	605a      	str	r2, [r3, #4]
 8001ef6:	609a      	str	r2, [r3, #8]
 8001ef8:	60da      	str	r2, [r3, #12]
 8001efa:	611a      	str	r2, [r3, #16]
	  RTC_DateTypeDef sDate = {0};
 8001efc:	2300      	movs	r3, #0
 8001efe:	603b      	str	r3, [r7, #0]
	  /** Initialize RTC and set the Time and Date
	  */
	  sTime.Hours = 0x10;
 8001f00:	2310      	movs	r3, #16
 8001f02:	713b      	strb	r3, [r7, #4]
	  sTime.Minutes = 0x1;
 8001f04:	2301      	movs	r3, #1
 8001f06:	717b      	strb	r3, [r7, #5]
	  sTime.Seconds = 0x0;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	71bb      	strb	r3, [r7, #6]
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	613b      	str	r3, [r7, #16]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001f10:	2300      	movs	r3, #0
 8001f12:	617b      	str	r3, [r7, #20]
	  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001f14:	1d3b      	adds	r3, r7, #4
 8001f16:	2201      	movs	r2, #1
 8001f18:	4619      	mov	r1, r3
 8001f1a:	4812      	ldr	r0, [pc, #72]	; (8001f64 <set_time+0x7c>)
 8001f1c:	f004 fd19 	bl	8006952 <HAL_RTC_SetTime>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <set_time+0x42>
	  {
	    Error_Handler();
 8001f26:	f001 fbf9 	bl	800371c <Error_Handler>
	  }
	  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	703b      	strb	r3, [r7, #0]
	  sDate.Month = RTC_MONTH_OCTOBER;
 8001f2e:	2310      	movs	r3, #16
 8001f30:	707b      	strb	r3, [r7, #1]
	  sDate.Date = 0x18;
 8001f32:	2318      	movs	r3, #24
 8001f34:	70bb      	strb	r3, [r7, #2]
	  sDate.Year = 0x21;
 8001f36:	2321      	movs	r3, #33	; 0x21
 8001f38:	70fb      	strb	r3, [r7, #3]

	  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001f3a:	463b      	mov	r3, r7
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	4619      	mov	r1, r3
 8001f40:	4808      	ldr	r0, [pc, #32]	; (8001f64 <set_time+0x7c>)
 8001f42:	f004 fe21 	bl	8006b88 <HAL_RTC_SetDate>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <set_time+0x68>
	  {
	    Error_Handler();
 8001f4c:	f001 fbe6 	bl	800371c <Error_Handler>
	  }
	  /* USER CODE BEGIN RTC_Init 2 */
	  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);
 8001f50:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8001f54:	2101      	movs	r1, #1
 8001f56:	4803      	ldr	r0, [pc, #12]	; (8001f64 <set_time+0x7c>)
 8001f58:	f004 ff9c 	bl	8006e94 <HAL_RTCEx_BKUPWrite>
	  /* USER CODE END RTC_Init 2 */

}
 8001f5c:	bf00      	nop
 8001f5e:	3718      	adds	r7, #24
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	20003004 	.word	0x20003004

08001f68 <getLCD>:
/**Fungsi ini digunakan untuk LCD*/

void getLCD(char *data_lat,char *data_lng, char *volt, char *amper, char *persen, char *gabungtanggal)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af02      	add	r7, sp, #8
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	607a      	str	r2, [r7, #4]
 8001f74:	603b      	str	r3, [r7, #0]
	  ILI9341_DrawVLine(0, 0, 320, DARKGREEN);
 8001f76:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8001f7a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001f7e:	2100      	movs	r1, #0
 8001f80:	2000      	movs	r0, #0
 8001f82:	f7ff fe2f 	bl	8001be4 <ILI9341_DrawVLine>
	  ILI9341_DrawVLine(2, 0, 320, DARKGREEN);
 8001f86:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8001f8a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001f8e:	2100      	movs	r1, #0
 8001f90:	2002      	movs	r0, #2
 8001f92:	f7ff fe27 	bl	8001be4 <ILI9341_DrawVLine>
	  ILI9341_DrawText(gabungtanggal, FONT3, 9, 8, WHITE, BLACK);
 8001f96:	2300      	movs	r3, #0
 8001f98:	9301      	str	r3, [sp, #4]
 8001f9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f9e:	9300      	str	r3, [sp, #0]
 8001fa0:	2308      	movs	r3, #8
 8001fa2:	2209      	movs	r2, #9
 8001fa4:	4960      	ldr	r1, [pc, #384]	; (8002128 <getLCD+0x1c0>)
 8001fa6:	69f8      	ldr	r0, [r7, #28]
 8001fa8:	f7ff f9a1 	bl	80012ee <ILI9341_DrawText>
	  ILI9341_DrawText(persen, FONT3, 155, 8, WHITE, BLACK);
 8001fac:	2300      	movs	r3, #0
 8001fae:	9301      	str	r3, [sp, #4]
 8001fb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fb4:	9300      	str	r3, [sp, #0]
 8001fb6:	2308      	movs	r3, #8
 8001fb8:	229b      	movs	r2, #155	; 0x9b
 8001fba:	495b      	ldr	r1, [pc, #364]	; (8002128 <getLCD+0x1c0>)
 8001fbc:	69b8      	ldr	r0, [r7, #24]
 8001fbe:	f7ff f996 	bl	80012ee <ILI9341_DrawText>
	  if(atoi(persen) <= 100 && atoi(persen) >= 80)
 8001fc2:	69b8      	ldr	r0, [r7, #24]
 8001fc4:	f006 fdfa 	bl	8008bbc <atoi>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b64      	cmp	r3, #100	; 0x64
 8001fcc:	dc33      	bgt.n	8002036 <getLCD+0xce>
 8001fce:	69b8      	ldr	r0, [r7, #24]
 8001fd0:	f006 fdf4 	bl	8008bbc <atoi>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b4f      	cmp	r3, #79	; 0x4f
 8001fd8:	dd2d      	ble.n	8002036 <getLCD+0xce>
	  {
		  ILI9341_DrawRectangle(190, 4, 8, 20, GREENYELLOW);
 8001fda:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8001fde:	9300      	str	r3, [sp, #0]
 8001fe0:	2314      	movs	r3, #20
 8001fe2:	2208      	movs	r2, #8
 8001fe4:	2104      	movs	r1, #4
 8001fe6:	20be      	movs	r0, #190	; 0xbe
 8001fe8:	f7ff fd5c 	bl	8001aa4 <ILI9341_DrawRectangle>
		  ILI9341_DrawRectangle(200, 4, 8, 20, GREENYELLOW);
 8001fec:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8001ff0:	9300      	str	r3, [sp, #0]
 8001ff2:	2314      	movs	r3, #20
 8001ff4:	2208      	movs	r2, #8
 8001ff6:	2104      	movs	r1, #4
 8001ff8:	20c8      	movs	r0, #200	; 0xc8
 8001ffa:	f7ff fd53 	bl	8001aa4 <ILI9341_DrawRectangle>
		  ILI9341_DrawRectangle(210, 4, 8, 20, GREENYELLOW);
 8001ffe:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8002002:	9300      	str	r3, [sp, #0]
 8002004:	2314      	movs	r3, #20
 8002006:	2208      	movs	r2, #8
 8002008:	2104      	movs	r1, #4
 800200a:	20d2      	movs	r0, #210	; 0xd2
 800200c:	f7ff fd4a 	bl	8001aa4 <ILI9341_DrawRectangle>
		  ILI9341_DrawRectangle(220, 4, 8, 20, GREENYELLOW);
 8002010:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8002014:	9300      	str	r3, [sp, #0]
 8002016:	2314      	movs	r3, #20
 8002018:	2208      	movs	r2, #8
 800201a:	2104      	movs	r1, #4
 800201c:	20dc      	movs	r0, #220	; 0xdc
 800201e:	f7ff fd41 	bl	8001aa4 <ILI9341_DrawRectangle>
		  ILI9341_DrawRectangle(230, 4, 8, 20, GREENYELLOW);
 8002022:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8002026:	9300      	str	r3, [sp, #0]
 8002028:	2314      	movs	r3, #20
 800202a:	2208      	movs	r2, #8
 800202c:	2104      	movs	r1, #4
 800202e:	20e6      	movs	r0, #230	; 0xe6
 8002030:	f7ff fd38 	bl	8001aa4 <ILI9341_DrawRectangle>
 8002034:	e083      	b.n	800213e <getLCD+0x1d6>
	  }
	  else if(atoi(persen) <= 60 && atoi(persen) >= 79)
 8002036:	69b8      	ldr	r0, [r7, #24]
 8002038:	f006 fdc0 	bl	8008bbc <atoi>
 800203c:	4603      	mov	r3, r0
 800203e:	2b3c      	cmp	r3, #60	; 0x3c
 8002040:	dc2a      	bgt.n	8002098 <getLCD+0x130>
 8002042:	69b8      	ldr	r0, [r7, #24]
 8002044:	f006 fdba 	bl	8008bbc <atoi>
 8002048:	4603      	mov	r3, r0
 800204a:	2b4e      	cmp	r3, #78	; 0x4e
 800204c:	dd24      	ble.n	8002098 <getLCD+0x130>
	  {
		  ILI9341_DrawRectangle(200, 4, 8, 20, GREENYELLOW);
 800204e:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8002052:	9300      	str	r3, [sp, #0]
 8002054:	2314      	movs	r3, #20
 8002056:	2208      	movs	r2, #8
 8002058:	2104      	movs	r1, #4
 800205a:	20c8      	movs	r0, #200	; 0xc8
 800205c:	f7ff fd22 	bl	8001aa4 <ILI9341_DrawRectangle>
		  ILI9341_DrawRectangle(210, 4, 8, 20, GREENYELLOW);
 8002060:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8002064:	9300      	str	r3, [sp, #0]
 8002066:	2314      	movs	r3, #20
 8002068:	2208      	movs	r2, #8
 800206a:	2104      	movs	r1, #4
 800206c:	20d2      	movs	r0, #210	; 0xd2
 800206e:	f7ff fd19 	bl	8001aa4 <ILI9341_DrawRectangle>
		  ILI9341_DrawRectangle(220, 4, 8, 20, GREENYELLOW);
 8002072:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8002076:	9300      	str	r3, [sp, #0]
 8002078:	2314      	movs	r3, #20
 800207a:	2208      	movs	r2, #8
 800207c:	2104      	movs	r1, #4
 800207e:	20dc      	movs	r0, #220	; 0xdc
 8002080:	f7ff fd10 	bl	8001aa4 <ILI9341_DrawRectangle>
		  ILI9341_DrawRectangle(230, 4, 8, 20, GREENYELLOW);
 8002084:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8002088:	9300      	str	r3, [sp, #0]
 800208a:	2314      	movs	r3, #20
 800208c:	2208      	movs	r2, #8
 800208e:	2104      	movs	r1, #4
 8002090:	20e6      	movs	r0, #230	; 0xe6
 8002092:	f7ff fd07 	bl	8001aa4 <ILI9341_DrawRectangle>
 8002096:	e052      	b.n	800213e <getLCD+0x1d6>
	  }
	  else if(atoi(persen) <= 60 && atoi(persen) >= 79)
 8002098:	69b8      	ldr	r0, [r7, #24]
 800209a:	f006 fd8f 	bl	8008bbc <atoi>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b3c      	cmp	r3, #60	; 0x3c
 80020a2:	dc21      	bgt.n	80020e8 <getLCD+0x180>
 80020a4:	69b8      	ldr	r0, [r7, #24]
 80020a6:	f006 fd89 	bl	8008bbc <atoi>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b4e      	cmp	r3, #78	; 0x4e
 80020ae:	dd1b      	ble.n	80020e8 <getLCD+0x180>
	  {
		  ILI9341_DrawRectangle(210, 4, 8, 20, GREENYELLOW);
 80020b0:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80020b4:	9300      	str	r3, [sp, #0]
 80020b6:	2314      	movs	r3, #20
 80020b8:	2208      	movs	r2, #8
 80020ba:	2104      	movs	r1, #4
 80020bc:	20d2      	movs	r0, #210	; 0xd2
 80020be:	f7ff fcf1 	bl	8001aa4 <ILI9341_DrawRectangle>
		  ILI9341_DrawRectangle(220, 4, 8, 20, GREENYELLOW);
 80020c2:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80020c6:	9300      	str	r3, [sp, #0]
 80020c8:	2314      	movs	r3, #20
 80020ca:	2208      	movs	r2, #8
 80020cc:	2104      	movs	r1, #4
 80020ce:	20dc      	movs	r0, #220	; 0xdc
 80020d0:	f7ff fce8 	bl	8001aa4 <ILI9341_DrawRectangle>
		  ILI9341_DrawRectangle(230, 4, 8, 20, GREENYELLOW);
 80020d4:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80020d8:	9300      	str	r3, [sp, #0]
 80020da:	2314      	movs	r3, #20
 80020dc:	2208      	movs	r2, #8
 80020de:	2104      	movs	r1, #4
 80020e0:	20e6      	movs	r0, #230	; 0xe6
 80020e2:	f7ff fcdf 	bl	8001aa4 <ILI9341_DrawRectangle>
 80020e6:	e02a      	b.n	800213e <getLCD+0x1d6>
	  }
	  else if(atoi(persen) <= 60 && atoi(persen) >= 79)
 80020e8:	69b8      	ldr	r0, [r7, #24]
 80020ea:	f006 fd67 	bl	8008bbc <atoi>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b3c      	cmp	r3, #60	; 0x3c
 80020f2:	dc1b      	bgt.n	800212c <getLCD+0x1c4>
 80020f4:	69b8      	ldr	r0, [r7, #24]
 80020f6:	f006 fd61 	bl	8008bbc <atoi>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b4e      	cmp	r3, #78	; 0x4e
 80020fe:	dd15      	ble.n	800212c <getLCD+0x1c4>
	  {
		  ILI9341_DrawRectangle(220, 4, 8, 20, GREENYELLOW);
 8002100:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8002104:	9300      	str	r3, [sp, #0]
 8002106:	2314      	movs	r3, #20
 8002108:	2208      	movs	r2, #8
 800210a:	2104      	movs	r1, #4
 800210c:	20dc      	movs	r0, #220	; 0xdc
 800210e:	f7ff fcc9 	bl	8001aa4 <ILI9341_DrawRectangle>
		  ILI9341_DrawRectangle(230, 4, 8, 20, GREENYELLOW);
 8002112:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8002116:	9300      	str	r3, [sp, #0]
 8002118:	2314      	movs	r3, #20
 800211a:	2208      	movs	r2, #8
 800211c:	2104      	movs	r1, #4
 800211e:	20e6      	movs	r0, #230	; 0xe6
 8002120:	f7ff fcc0 	bl	8001aa4 <ILI9341_DrawRectangle>
 8002124:	e00b      	b.n	800213e <getLCD+0x1d6>
 8002126:	bf00      	nop
 8002128:	0800ead4 	.word	0x0800ead4
	  }
	  else
	  {
		  ILI9341_DrawRectangle(230, 4, 8, 20, GREENYELLOW);
 800212c:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8002130:	9300      	str	r3, [sp, #0]
 8002132:	2314      	movs	r3, #20
 8002134:	2208      	movs	r2, #8
 8002136:	2104      	movs	r1, #4
 8002138:	20e6      	movs	r0, #230	; 0xe6
 800213a:	f7ff fcb3 	bl	8001aa4 <ILI9341_DrawRectangle>
	  }
	  ILI9341_DrawVLine(237, 0, 320, DARKGREEN);
 800213e:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8002142:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002146:	2100      	movs	r1, #0
 8002148:	20ed      	movs	r0, #237	; 0xed
 800214a:	f7ff fd4b 	bl	8001be4 <ILI9341_DrawVLine>
	  ILI9341_DrawVLine(239, 0, 320, DARKGREEN);
 800214e:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8002152:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002156:	2100      	movs	r1, #0
 8002158:	20ef      	movs	r0, #239	; 0xef
 800215a:	f7ff fd43 	bl	8001be4 <ILI9341_DrawVLine>
	  ILI9341_DrawHLine(0, 30, 240, DARKGREEN);
 800215e:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8002162:	22f0      	movs	r2, #240	; 0xf0
 8002164:	211e      	movs	r1, #30
 8002166:	2000      	movs	r0, #0
 8002168:	f7ff fcf8 	bl	8001b5c <ILI9341_DrawHLine>
	  ILI9341_DrawHLine(0, 32, 240, DARKGREEN);
 800216c:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8002170:	22f0      	movs	r2, #240	; 0xf0
 8002172:	2120      	movs	r1, #32
 8002174:	2000      	movs	r0, #0
 8002176:	f7ff fcf1 	bl	8001b5c <ILI9341_DrawHLine>
	  ILI9341_DrawText("ID NODE : A", FONT3, 9, 40, WHITE, BLACK);
 800217a:	2300      	movs	r3, #0
 800217c:	9301      	str	r3, [sp, #4]
 800217e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002182:	9300      	str	r3, [sp, #0]
 8002184:	2328      	movs	r3, #40	; 0x28
 8002186:	2209      	movs	r2, #9
 8002188:	496c      	ldr	r1, [pc, #432]	; (800233c <getLCD+0x3d4>)
 800218a:	486d      	ldr	r0, [pc, #436]	; (8002340 <getLCD+0x3d8>)
 800218c:	f7ff f8af 	bl	80012ee <ILI9341_DrawText>
	  ILI9341_DrawText(volt, FONT3, 120, 40, WHITE, BLACK);
 8002190:	2300      	movs	r3, #0
 8002192:	9301      	str	r3, [sp, #4]
 8002194:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002198:	9300      	str	r3, [sp, #0]
 800219a:	2328      	movs	r3, #40	; 0x28
 800219c:	2278      	movs	r2, #120	; 0x78
 800219e:	4967      	ldr	r1, [pc, #412]	; (800233c <getLCD+0x3d4>)
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f7ff f8a4 	bl	80012ee <ILI9341_DrawText>
	  ILI9341_DrawText(amper, FONT3, 180, 40, WHITE, BLACK);
 80021a6:	2300      	movs	r3, #0
 80021a8:	9301      	str	r3, [sp, #4]
 80021aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021ae:	9300      	str	r3, [sp, #0]
 80021b0:	2328      	movs	r3, #40	; 0x28
 80021b2:	22b4      	movs	r2, #180	; 0xb4
 80021b4:	4961      	ldr	r1, [pc, #388]	; (800233c <getLCD+0x3d4>)
 80021b6:	6838      	ldr	r0, [r7, #0]
 80021b8:	f7ff f899 	bl	80012ee <ILI9341_DrawText>
	  ILI9341_DrawHLine(0, 60, 240, DARKGREEN);
 80021bc:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 80021c0:	22f0      	movs	r2, #240	; 0xf0
 80021c2:	213c      	movs	r1, #60	; 0x3c
 80021c4:	2000      	movs	r0, #0
 80021c6:	f7ff fcc9 	bl	8001b5c <ILI9341_DrawHLine>
	  ILI9341_DrawHLine(0, 62, 240, DARKGREEN);
 80021ca:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 80021ce:	22f0      	movs	r2, #240	; 0xf0
 80021d0:	213e      	movs	r1, #62	; 0x3e
 80021d2:	2000      	movs	r0, #0
 80021d4:	f7ff fcc2 	bl	8001b5c <ILI9341_DrawHLine>
	  ILI9341_DrawText("Masukkan Pesan yang anda kirim : ", FONT2, 9, 70, WHITE, BLACK);
 80021d8:	2300      	movs	r3, #0
 80021da:	9301      	str	r3, [sp, #4]
 80021dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021e0:	9300      	str	r3, [sp, #0]
 80021e2:	2346      	movs	r3, #70	; 0x46
 80021e4:	2209      	movs	r2, #9
 80021e6:	4957      	ldr	r1, [pc, #348]	; (8002344 <getLCD+0x3dc>)
 80021e8:	4857      	ldr	r0, [pc, #348]	; (8002348 <getLCD+0x3e0>)
 80021ea:	f7ff f880 	bl	80012ee <ILI9341_DrawText>
	  ILI9341_DrawHLine(0, 85, 240, DARKGREEN);
 80021ee:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 80021f2:	22f0      	movs	r2, #240	; 0xf0
 80021f4:	2155      	movs	r1, #85	; 0x55
 80021f6:	2000      	movs	r0, #0
 80021f8:	f7ff fcb0 	bl	8001b5c <ILI9341_DrawHLine>
	  ILI9341_DrawHLine(0, 87, 240, DARKGREEN);
 80021fc:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8002200:	22f0      	movs	r2, #240	; 0xf0
 8002202:	2157      	movs	r1, #87	; 0x57
 8002204:	2000      	movs	r0, #0
 8002206:	f7ff fca9 	bl	8001b5c <ILI9341_DrawHLine>
	  ILI9341_DrawText("Ini Pesan Anda", FONT2, 9, 95, WHITE, BLACK);
 800220a:	2300      	movs	r3, #0
 800220c:	9301      	str	r3, [sp, #4]
 800220e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002212:	9300      	str	r3, [sp, #0]
 8002214:	235f      	movs	r3, #95	; 0x5f
 8002216:	2209      	movs	r2, #9
 8002218:	494a      	ldr	r1, [pc, #296]	; (8002344 <getLCD+0x3dc>)
 800221a:	484c      	ldr	r0, [pc, #304]	; (800234c <getLCD+0x3e4>)
 800221c:	f7ff f867 	bl	80012ee <ILI9341_DrawText>
	  ILI9341_DrawHLine(0, 150, 240, DARKGREEN);
 8002220:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8002224:	22f0      	movs	r2, #240	; 0xf0
 8002226:	2196      	movs	r1, #150	; 0x96
 8002228:	2000      	movs	r0, #0
 800222a:	f7ff fc97 	bl	8001b5c <ILI9341_DrawHLine>
	  ILI9341_DrawHLine(0, 152, 240, DARKGREEN);
 800222e:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8002232:	22f0      	movs	r2, #240	; 0xf0
 8002234:	2198      	movs	r1, #152	; 0x98
 8002236:	2000      	movs	r0, #0
 8002238:	f7ff fc90 	bl	8001b5c <ILI9341_DrawHLine>
	  ILI9341_DrawText("Anda Menerima Pesan : ", FONT2, 9, 160, WHITE, BLACK);
 800223c:	2300      	movs	r3, #0
 800223e:	9301      	str	r3, [sp, #4]
 8002240:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002244:	9300      	str	r3, [sp, #0]
 8002246:	23a0      	movs	r3, #160	; 0xa0
 8002248:	2209      	movs	r2, #9
 800224a:	493e      	ldr	r1, [pc, #248]	; (8002344 <getLCD+0x3dc>)
 800224c:	4840      	ldr	r0, [pc, #256]	; (8002350 <getLCD+0x3e8>)
 800224e:	f7ff f84e 	bl	80012ee <ILI9341_DrawText>
	  ILI9341_DrawText("Ini Pesan dia", FONT2, 9, 175, WHITE, BLACK);
 8002252:	2300      	movs	r3, #0
 8002254:	9301      	str	r3, [sp, #4]
 8002256:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800225a:	9300      	str	r3, [sp, #0]
 800225c:	23af      	movs	r3, #175	; 0xaf
 800225e:	2209      	movs	r2, #9
 8002260:	4938      	ldr	r1, [pc, #224]	; (8002344 <getLCD+0x3dc>)
 8002262:	483c      	ldr	r0, [pc, #240]	; (8002354 <getLCD+0x3ec>)
 8002264:	f7ff f843 	bl	80012ee <ILI9341_DrawText>
	  ILI9341_DrawHLine(0, 245, 240, DARKGREEN);
 8002268:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 800226c:	22f0      	movs	r2, #240	; 0xf0
 800226e:	21f5      	movs	r1, #245	; 0xf5
 8002270:	2000      	movs	r0, #0
 8002272:	f7ff fc73 	bl	8001b5c <ILI9341_DrawHLine>
	  ILI9341_DrawHLine(0, 247, 240, DARKGREEN);
 8002276:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 800227a:	22f0      	movs	r2, #240	; 0xf0
 800227c:	21f7      	movs	r1, #247	; 0xf7
 800227e:	2000      	movs	r0, #0
 8002280:	f7ff fc6c 	bl	8001b5c <ILI9341_DrawHLine>
	  ILI9341_DrawText("Lokasi   : ", FONT2, 9, 255, WHITE, BLACK);
 8002284:	2300      	movs	r3, #0
 8002286:	9301      	str	r3, [sp, #4]
 8002288:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800228c:	9300      	str	r3, [sp, #0]
 800228e:	23ff      	movs	r3, #255	; 0xff
 8002290:	2209      	movs	r2, #9
 8002292:	492c      	ldr	r1, [pc, #176]	; (8002344 <getLCD+0x3dc>)
 8002294:	4830      	ldr	r0, [pc, #192]	; (8002358 <getLCD+0x3f0>)
 8002296:	f7ff f82a 	bl	80012ee <ILI9341_DrawText>
	  ILI9341_DrawText("Latitude : ", FONT2, 9, 270, WHITE, BLACK);
 800229a:	2300      	movs	r3, #0
 800229c:	9301      	str	r3, [sp, #4]
 800229e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022a2:	9300      	str	r3, [sp, #0]
 80022a4:	f44f 7387 	mov.w	r3, #270	; 0x10e
 80022a8:	2209      	movs	r2, #9
 80022aa:	4926      	ldr	r1, [pc, #152]	; (8002344 <getLCD+0x3dc>)
 80022ac:	482b      	ldr	r0, [pc, #172]	; (800235c <getLCD+0x3f4>)
 80022ae:	f7ff f81e 	bl	80012ee <ILI9341_DrawText>
	  ILI9341_DrawText(data_lat, FONT2, 75, 270, WHITE, BLACK);
 80022b2:	2300      	movs	r3, #0
 80022b4:	9301      	str	r3, [sp, #4]
 80022b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022ba:	9300      	str	r3, [sp, #0]
 80022bc:	f44f 7387 	mov.w	r3, #270	; 0x10e
 80022c0:	224b      	movs	r2, #75	; 0x4b
 80022c2:	4920      	ldr	r1, [pc, #128]	; (8002344 <getLCD+0x3dc>)
 80022c4:	68f8      	ldr	r0, [r7, #12]
 80022c6:	f7ff f812 	bl	80012ee <ILI9341_DrawText>
	  ILI9341_DrawText("Longitude : ", FONT2, 9, 285, WHITE, BLACK);
 80022ca:	2300      	movs	r3, #0
 80022cc:	9301      	str	r3, [sp, #4]
 80022ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022d2:	9300      	str	r3, [sp, #0]
 80022d4:	f240 131d 	movw	r3, #285	; 0x11d
 80022d8:	2209      	movs	r2, #9
 80022da:	491a      	ldr	r1, [pc, #104]	; (8002344 <getLCD+0x3dc>)
 80022dc:	4820      	ldr	r0, [pc, #128]	; (8002360 <getLCD+0x3f8>)
 80022de:	f7ff f806 	bl	80012ee <ILI9341_DrawText>
	  ILI9341_DrawText(data_lng, FONT2, 75, 285, WHITE, BLACK);
 80022e2:	2300      	movs	r3, #0
 80022e4:	9301      	str	r3, [sp, #4]
 80022e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022ea:	9300      	str	r3, [sp, #0]
 80022ec:	f240 131d 	movw	r3, #285	; 0x11d
 80022f0:	224b      	movs	r2, #75	; 0x4b
 80022f2:	4914      	ldr	r1, [pc, #80]	; (8002344 <getLCD+0x3dc>)
 80022f4:	68b8      	ldr	r0, [r7, #8]
 80022f6:	f7fe fffa 	bl	80012ee <ILI9341_DrawText>
	  ILI9341_DrawHLine(0, 300, 240, DARKGREEN);
 80022fa:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 80022fe:	22f0      	movs	r2, #240	; 0xf0
 8002300:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002304:	2000      	movs	r0, #0
 8002306:	f7ff fc29 	bl	8001b5c <ILI9341_DrawHLine>
	  ILI9341_DrawHLine(0, 300, 240, DARKGREEN);
 800230a:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 800230e:	22f0      	movs	r2, #240	; 0xf0
 8002310:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002314:	2000      	movs	r0, #0
 8002316:	f7ff fc21 	bl	8001b5c <ILI9341_DrawHLine>
	  ILI9341_DrawText("Copyright : www.pens.ac.id", FONT2, 30, 305, WHITE, BLACK);
 800231a:	2300      	movs	r3, #0
 800231c:	9301      	str	r3, [sp, #4]
 800231e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002322:	9300      	str	r3, [sp, #0]
 8002324:	f240 1331 	movw	r3, #305	; 0x131
 8002328:	221e      	movs	r2, #30
 800232a:	4906      	ldr	r1, [pc, #24]	; (8002344 <getLCD+0x3dc>)
 800232c:	480d      	ldr	r0, [pc, #52]	; (8002364 <getLCD+0x3fc>)
 800232e:	f7fe ffde 	bl	80012ee <ILI9341_DrawText>
}
 8002332:	bf00      	nop
 8002334:	3710      	adds	r7, #16
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	0800ead4 	.word	0x0800ead4
 8002340:	0800e088 	.word	0x0800e088
 8002344:	0800e2f0 	.word	0x0800e2f0
 8002348:	0800e094 	.word	0x0800e094
 800234c:	0800e0b8 	.word	0x0800e0b8
 8002350:	0800e0c8 	.word	0x0800e0c8
 8002354:	0800e0e0 	.word	0x0800e0e0
 8002358:	0800e0f0 	.word	0x0800e0f0
 800235c:	0800e0fc 	.word	0x0800e0fc
 8002360:	0800e108 	.word	0x0800e108
 8002364:	0800e118 	.word	0x0800e118

08002368 <get_time>:

/**Fungsi ini digunakan untuk membaca interanal RTC
  */
void get_time(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af00      	add	r7, sp, #0
	if (HAL_GetTick() - rtc_millis >= 500){
 800236e:	f001 fe1f 	bl	8003fb0 <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	4b16      	ldr	r3, [pc, #88]	; (80023d0 <get_time+0x68>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800237e:	d323      	bcc.n	80023c8 <get_time+0x60>
		rtc_millis = HAL_GetTick();
 8002380:	f001 fe16 	bl	8003fb0 <HAL_GetTick>
 8002384:	4603      	mov	r3, r0
 8002386:	4a12      	ldr	r2, [pc, #72]	; (80023d0 <get_time+0x68>)
 8002388:	6013      	str	r3, [r2, #0]
		 RTC_DateTypeDef gDate;
		 RTC_TimeTypeDef gTime;
		 HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 800238a:	463b      	mov	r3, r7
 800238c:	2200      	movs	r2, #0
 800238e:	4619      	mov	r1, r3
 8002390:	4810      	ldr	r0, [pc, #64]	; (80023d4 <get_time+0x6c>)
 8002392:	f004 fb9b 	bl	8006acc <HAL_RTC_GetTime>
		 HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 8002396:	f107 0314 	add.w	r3, r7, #20
 800239a:	2200      	movs	r2, #0
 800239c:	4619      	mov	r1, r3
 800239e:	480d      	ldr	r0, [pc, #52]	; (80023d4 <get_time+0x6c>)
 80023a0:	f004 fc99 	bl	8006cd6 <HAL_RTC_GetDate>
		 jam = gTime.Hours; menit = gTime.Minutes; detik = gTime.Seconds;
 80023a4:	783a      	ldrb	r2, [r7, #0]
 80023a6:	4b0c      	ldr	r3, [pc, #48]	; (80023d8 <get_time+0x70>)
 80023a8:	701a      	strb	r2, [r3, #0]
 80023aa:	787a      	ldrb	r2, [r7, #1]
 80023ac:	4b0b      	ldr	r3, [pc, #44]	; (80023dc <get_time+0x74>)
 80023ae:	701a      	strb	r2, [r3, #0]
 80023b0:	78ba      	ldrb	r2, [r7, #2]
 80023b2:	4b0b      	ldr	r3, [pc, #44]	; (80023e0 <get_time+0x78>)
 80023b4:	701a      	strb	r2, [r3, #0]
		 tanggal = gDate.Date; bulan = gDate.Month; tahun = gDate.Year;
 80023b6:	7dba      	ldrb	r2, [r7, #22]
 80023b8:	4b0a      	ldr	r3, [pc, #40]	; (80023e4 <get_time+0x7c>)
 80023ba:	701a      	strb	r2, [r3, #0]
 80023bc:	7d7a      	ldrb	r2, [r7, #21]
 80023be:	4b0a      	ldr	r3, [pc, #40]	; (80023e8 <get_time+0x80>)
 80023c0:	701a      	strb	r2, [r3, #0]
 80023c2:	7dfa      	ldrb	r2, [r7, #23]
 80023c4:	4b09      	ldr	r3, [pc, #36]	; (80023ec <get_time+0x84>)
 80023c6:	701a      	strb	r2, [r3, #0]
//		 printf("%02d:%02d:%02d || %02d-%02d-%2d\r\n",jam, menit, detik,tanggal, bulan, 2000 + tahun);
	}
}
 80023c8:	bf00      	nop
 80023ca:	3718      	adds	r7, #24
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	20000a10 	.word	0x20000a10
 80023d4:	20003004 	.word	0x20003004
 80023d8:	20002fe0 	.word	0x20002fe0
 80023dc:	20002f1d 	.word	0x20002f1d
 80023e0:	2000303e 	.word	0x2000303e
 80023e4:	20002f1e 	.word	0x20002f1e
 80023e8:	20003920 	.word	0x20003920
 80023ec:	20003910 	.word	0x20003910

080023f0 <get_ampere_volt>:
/**Fungsi ini digunakan untuk membaca baterai
  */
void get_ampere_volt(void){
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
	setCalibration_16V_400mA();
 80023f6:	f7ff fc89 	bl	8001d0c <setCalibration_16V_400mA>
	tegangan = getBusVoltage_V();
 80023fa:	f7ff fcf1 	bl	8001de0 <getBusVoltage_V>
 80023fe:	eef0 7a40 	vmov.f32	s15, s0
 8002402:	4b3d      	ldr	r3, [pc, #244]	; (80024f8 <get_ampere_volt+0x108>)
 8002404:	edc3 7a00 	vstr	s15, [r3]
	Vshunt = getPower_mW();
 8002408:	f7ff fd30 	bl	8001e6c <getPower_mW>
 800240c:	eef0 7a40 	vmov.f32	s15, s0
 8002410:	4b3a      	ldr	r3, [pc, #232]	; (80024fc <get_ampere_volt+0x10c>)
 8002412:	edc3 7a00 	vstr	s15, [r3]
	arus = getCurrent_mA() * (-1);
 8002416:	f7ff fd07 	bl	8001e28 <getCurrent_mA>
 800241a:	eef0 7a40 	vmov.f32	s15, s0
 800241e:	eef1 7a67 	vneg.f32	s15, s15
 8002422:	4b37      	ldr	r3, [pc, #220]	; (8002500 <get_ampere_volt+0x110>)
 8002424:	edc3 7a00 	vstr	s15, [r3]
	float maxVoltage = 12.4;
 8002428:	4b36      	ldr	r3, [pc, #216]	; (8002504 <get_ampere_volt+0x114>)
 800242a:	607b      	str	r3, [r7, #4]
	float minVoltage = 11.2;
 800242c:	4b36      	ldr	r3, [pc, #216]	; (8002508 <get_ampere_volt+0x118>)
 800242e:	603b      	str	r3, [r7, #0]
	batteryPercentage = (tegangan - minVoltage) / (maxVoltage - minVoltage) * 100;
 8002430:	4b31      	ldr	r3, [pc, #196]	; (80024f8 <get_ampere_volt+0x108>)
 8002432:	ed93 7a00 	vldr	s14, [r3]
 8002436:	edd7 7a00 	vldr	s15, [r7]
 800243a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800243e:	ed97 7a01 	vldr	s14, [r7, #4]
 8002442:	edd7 7a00 	vldr	s15, [r7]
 8002446:	ee37 7a67 	vsub.f32	s14, s14, s15
 800244a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800244e:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800250c <get_ampere_volt+0x11c>
 8002452:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002456:	4b2e      	ldr	r3, [pc, #184]	; (8002510 <get_ampere_volt+0x120>)
 8002458:	edc3 7a00 	vstr	s15, [r3]
	if (batteryPercentage > 100) batteryPercentage = 100;
 800245c:	4b2c      	ldr	r3, [pc, #176]	; (8002510 <get_ampere_volt+0x120>)
 800245e:	edd3 7a00 	vldr	s15, [r3]
 8002462:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800250c <get_ampere_volt+0x11c>
 8002466:	eef4 7ac7 	vcmpe.f32	s15, s14
 800246a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800246e:	dd03      	ble.n	8002478 <get_ampere_volt+0x88>
 8002470:	4b27      	ldr	r3, [pc, #156]	; (8002510 <get_ampere_volt+0x120>)
 8002472:	4a28      	ldr	r2, [pc, #160]	; (8002514 <get_ampere_volt+0x124>)
 8002474:	601a      	str	r2, [r3, #0]
 8002476:	e00b      	b.n	8002490 <get_ampere_volt+0xa0>
	else if (batteryPercentage < 0) batteryPercentage = 0;
 8002478:	4b25      	ldr	r3, [pc, #148]	; (8002510 <get_ampere_volt+0x120>)
 800247a:	edd3 7a00 	vldr	s15, [r3]
 800247e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002486:	d503      	bpl.n	8002490 <get_ampere_volt+0xa0>
 8002488:	4b21      	ldr	r3, [pc, #132]	; (8002510 <get_ampere_volt+0x120>)
 800248a:	f04f 0200 	mov.w	r2, #0
 800248e:	601a      	str	r2, [r3, #0]
	if (HAL_GetTick() - ina219_millis >= 500){
 8002490:	f001 fd8e 	bl	8003fb0 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	4b20      	ldr	r3, [pc, #128]	; (8002518 <get_ampere_volt+0x128>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80024a0:	d325      	bcc.n	80024ee <get_ampere_volt+0xfe>
		ina219_millis = HAL_GetTick();
 80024a2:	f001 fd85 	bl	8003fb0 <HAL_GetTick>
 80024a6:	4603      	mov	r3, r0
 80024a8:	4a1b      	ldr	r2, [pc, #108]	; (8002518 <get_ampere_volt+0x128>)
 80024aa:	6013      	str	r3, [r2, #0]
//		printf("Vbus: %.1f V| persen: %.1f percent | Ampere: %.1f mA\r\n",tegangan, batteryPercentage, arus);
		sprintf(volt, "%.4g", tegangan);
 80024ac:	4b12      	ldr	r3, [pc, #72]	; (80024f8 <get_ampere_volt+0x108>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7fe f849 	bl	8000548 <__aeabi_f2d>
 80024b6:	4602      	mov	r2, r0
 80024b8:	460b      	mov	r3, r1
 80024ba:	4918      	ldr	r1, [pc, #96]	; (800251c <get_ampere_volt+0x12c>)
 80024bc:	4818      	ldr	r0, [pc, #96]	; (8002520 <get_ampere_volt+0x130>)
 80024be:	f007 fb53 	bl	8009b68 <siprintf>
		sprintf(amper, "%.5g", arus);
 80024c2:	4b0f      	ldr	r3, [pc, #60]	; (8002500 <get_ampere_volt+0x110>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7fe f83e 	bl	8000548 <__aeabi_f2d>
 80024cc:	4602      	mov	r2, r0
 80024ce:	460b      	mov	r3, r1
 80024d0:	4914      	ldr	r1, [pc, #80]	; (8002524 <get_ampere_volt+0x134>)
 80024d2:	4815      	ldr	r0, [pc, #84]	; (8002528 <get_ampere_volt+0x138>)
 80024d4:	f007 fb48 	bl	8009b68 <siprintf>
		sprintf(persen, "%.2g", batteryPercentage);
 80024d8:	4b0d      	ldr	r3, [pc, #52]	; (8002510 <get_ampere_volt+0x120>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4618      	mov	r0, r3
 80024de:	f7fe f833 	bl	8000548 <__aeabi_f2d>
 80024e2:	4602      	mov	r2, r0
 80024e4:	460b      	mov	r3, r1
 80024e6:	4911      	ldr	r1, [pc, #68]	; (800252c <get_ampere_volt+0x13c>)
 80024e8:	4811      	ldr	r0, [pc, #68]	; (8002530 <get_ampere_volt+0x140>)
 80024ea:	f007 fb3d 	bl	8009b68 <siprintf>
//
	}
}
 80024ee:	bf00      	nop
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	20000a20 	.word	0x20000a20
 80024fc:	20000a24 	.word	0x20000a24
 8002500:	20000a28 	.word	0x20000a28
 8002504:	41466666 	.word	0x41466666
 8002508:	41333333 	.word	0x41333333
 800250c:	42c80000 	.word	0x42c80000
 8002510:	20000a2c 	.word	0x20000a2c
 8002514:	42c80000 	.word	0x42c80000
 8002518:	20000a14 	.word	0x20000a14
 800251c:	0800e134 	.word	0x0800e134
 8002520:	20003898 	.word	0x20003898
 8002524:	0800e13c 	.word	0x0800e13c
 8002528:	20002f34 	.word	0x20002f34
 800252c:	0800e144 	.word	0x0800e144
 8002530:	20002f68 	.word	0x20002f68

08002534 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002534:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002538:	b09b      	sub	sp, #108	; 0x6c
 800253a:	af10      	add	r7, sp, #64	; 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800253c:	f001 fcd2 	bl	8003ee4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002540:	f000 f9ca 	bl	80028d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002544:	f000 fbca 	bl	8002cdc <MX_GPIO_Init>
  MX_DMA_Init();
 8002548:	f000 fb8a 	bl	8002c60 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800254c:	f000 fb0a 	bl	8002b64 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002550:	f000 fb32 	bl	8002bb8 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8002554:	f000 fa70 	bl	8002a38 <MX_RTC_Init>
  MX_I2C1_Init();
 8002558:	f000 fa40 	bl	80029dc <MX_I2C1_Init>
  MX_USART3_UART_Init();
 800255c:	f000 fb56 	bl	8002c0c <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8002560:	f000 faca 	bl	8002af8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart1);
 8002564:	48ad      	ldr	r0, [pc, #692]	; (800281c <main+0x2e8>)
 8002566:	f001 f8df 	bl	8003728 <RetargetInit>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, RxBuf, RxBuf_SIZE);
 800256a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800256e:	49ac      	ldr	r1, [pc, #688]	; (8002820 <main+0x2ec>)
 8002570:	48ac      	ldr	r0, [pc, #688]	; (8002824 <main+0x2f0>)
 8002572:	f005 fa4e 	bl	8007a12 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8002576:	4bac      	ldr	r3, [pc, #688]	; (8002828 <main+0x2f4>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	4baa      	ldr	r3, [pc, #680]	; (8002828 <main+0x2f4>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f022 0208 	bic.w	r2, r2, #8
 8002584:	601a      	str	r2, [r3, #0]
  HAL_UARTEx_ReceiveToIdle_DMA(&huart3, RxBuf_3, RxBuf_SIZE);
 8002586:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800258a:	49a8      	ldr	r1, [pc, #672]	; (800282c <main+0x2f8>)
 800258c:	48a8      	ldr	r0, [pc, #672]	; (8002830 <main+0x2fc>)
 800258e:	f005 fa40 	bl	8007a12 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8002592:	4ba8      	ldr	r3, [pc, #672]	; (8002834 <main+0x300>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	4ba6      	ldr	r3, [pc, #664]	; (8002834 <main+0x300>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f022 0208 	bic.w	r2, r2, #8
 80025a0:	601a      	str	r2, [r3, #0]
  //set m0 m1
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);
 80025a2:	2200      	movs	r2, #0
 80025a4:	2104      	movs	r1, #4
 80025a6:	48a4      	ldr	r0, [pc, #656]	; (8002838 <main+0x304>)
 80025a8:	f002 fbfa 	bl	8004da0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, 0);
 80025ac:	2200      	movs	r2, #0
 80025ae:	2108      	movs	r1, #8
 80025b0:	48a1      	ldr	r0, [pc, #644]	; (8002838 <main+0x304>)
 80025b2:	f002 fbf5 	bl	8004da0 <HAL_GPIO_WritePin>
  if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0x32F2){
 80025b6:	2101      	movs	r1, #1
 80025b8:	48a0      	ldr	r0, [pc, #640]	; (800283c <main+0x308>)
 80025ba:	f004 fc85 	bl	8006ec8 <HAL_RTCEx_BKUPRead>
 80025be:	4603      	mov	r3, r0
 80025c0:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d001      	beq.n	80025cc <main+0x98>
	  set_time();
 80025c8:	f7ff fc8e 	bl	8001ee8 <set_time>
  }
  //begin LCD
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, 1);
 80025cc:	2201      	movs	r2, #1
 80025ce:	2110      	movs	r1, #16
 80025d0:	489b      	ldr	r0, [pc, #620]	; (8002840 <main+0x30c>)
 80025d2:	f002 fbe5 	bl	8004da0 <HAL_GPIO_WritePin>
  ILI9341_Init();
 80025d6:	f7fe ffe7 	bl	80015a8 <ILI9341_Init>
  ILI9341_FillScreen(BLACK);
 80025da:	2000      	movs	r0, #0
 80025dc:	f7ff f9d6 	bl	800198c <ILI9341_FillScreen>
  ILI9341_SetRotation(SCREEN_VERTICAL_2);
 80025e0:	2002      	movs	r0, #2
 80025e2:	f7ff f8eb 	bl	80017bc <ILI9341_SetRotation>
  //begin keypad
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, 1);
 80025e6:	2201      	movs	r2, #1
 80025e8:	2110      	movs	r1, #16
 80025ea:	4893      	ldr	r0, [pc, #588]	; (8002838 <main+0x304>)
 80025ec:	f002 fbd8 	bl	8004da0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, 1);
 80025f0:	2201      	movs	r2, #1
 80025f2:	2120      	movs	r1, #32
 80025f4:	4890      	ldr	r0, [pc, #576]	; (8002838 <main+0x304>)
 80025f6:	f002 fbd3 	bl	8004da0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, 1);
 80025fa:	2201      	movs	r2, #1
 80025fc:	2140      	movs	r1, #64	; 0x40
 80025fe:	488e      	ldr	r0, [pc, #568]	; (8002838 <main+0x304>)
 8002600:	f002 fbce 	bl	8004da0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, 1);
 8002604:	2201      	movs	r2, #1
 8002606:	2180      	movs	r1, #128	; 0x80
 8002608:	488b      	ldr	r0, [pc, #556]	; (8002838 <main+0x304>)
 800260a:	f002 fbc9 	bl	8004da0 <HAL_GPIO_WritePin>
  //Millis second set
  rtc_millis = HAL_GetTick();
 800260e:	f001 fccf 	bl	8003fb0 <HAL_GetTick>
 8002612:	4603      	mov	r3, r0
 8002614:	4a8b      	ldr	r2, [pc, #556]	; (8002844 <main+0x310>)
 8002616:	6013      	str	r3, [r2, #0]
  ina219_millis = HAL_GetTick();
 8002618:	f001 fcca 	bl	8003fb0 <HAL_GetTick>
 800261c:	4603      	mov	r3, r0
 800261e:	4a8a      	ldr	r2, [pc, #552]	; (8002848 <main+0x314>)
 8002620:	6013      	str	r3, [r2, #0]
  //kirim data dummy  *node,lat,long,data,jam, menit, detik, tegangan
  ukuranstring = sprintf((char*)buff_s, "*A,latitude,longitude,data,jam,menit,detik,baterai\r\n");
 8002622:	498a      	ldr	r1, [pc, #552]	; (800284c <main+0x318>)
 8002624:	488a      	ldr	r0, [pc, #552]	; (8002850 <main+0x31c>)
 8002626:	f007 fa9f 	bl	8009b68 <siprintf>
 800262a:	4603      	mov	r3, r0
 800262c:	b29a      	uxth	r2, r3
 800262e:	4b89      	ldr	r3, [pc, #548]	; (8002854 <main+0x320>)
 8002630:	801a      	strh	r2, [r3, #0]
  HAL_UART_Transmit(&huart2, buff_s, ukuranstring, 100);
 8002632:	4b88      	ldr	r3, [pc, #544]	; (8002854 <main+0x320>)
 8002634:	881a      	ldrh	r2, [r3, #0]
 8002636:	2364      	movs	r3, #100	; 0x64
 8002638:	4985      	ldr	r1, [pc, #532]	; (8002850 <main+0x31c>)
 800263a:	487a      	ldr	r0, [pc, #488]	; (8002824 <main+0x2f0>)
 800263c:	f005 f885 	bl	800774a <HAL_UART_Transmit>
  led_reaction(100, 600);
 8002640:	f44f 7116 	mov.w	r1, #600	; 0x258
 8002644:	2064      	movs	r0, #100	; 0x64
 8002646:	f001 f801 	bl	800364c <led_reaction>

  //GPS
  HAL_UART_Receive_IT (&huart3, Rx_data, RX_BUFFER_SIZE);
 800264a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800264e:	4982      	ldr	r1, [pc, #520]	; (8002858 <main+0x324>)
 8002650:	4877      	ldr	r0, [pc, #476]	; (8002830 <main+0x2fc>)
 8002652:	f005 f9ae 	bl	80079b2 <HAL_UART_Receive_IT>
   uint8_t ubxcfgrate[] = { // UBX-CFG-RATE 10 Hz Measurement/Navigation
 8002656:	4b81      	ldr	r3, [pc, #516]	; (800285c <main+0x328>)
 8002658:	f107 0414 	add.w	r4, r7, #20
 800265c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800265e:	c407      	stmia	r4!, {r0, r1, r2}
 8002660:	8023      	strh	r3, [r4, #0]
   0xB5,0x62,0x06,0x08,0x06,0x00,

   0x64,0x00,0x01,0x00,0x01,0x00, // Payload

   0x7A,0x12 }; // Checksum
   HAL_UART_Transmit(&huart1,(uint8_t *)ubxcfgrate,14,200);
 8002662:	f107 0114 	add.w	r1, r7, #20
 8002666:	23c8      	movs	r3, #200	; 0xc8
 8002668:	220e      	movs	r2, #14
 800266a:	486c      	ldr	r0, [pc, #432]	; (800281c <main+0x2e8>)
 800266c:	f005 f86d 	bl	800774a <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  get_time();
 8002670:	f7ff fe7a 	bl	8002368 <get_time>
	  get_keypad(keyPressed);
 8002674:	4b7a      	ldr	r3, [pc, #488]	; (8002860 <main+0x32c>)
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	4618      	mov	r0, r3
 800267a:	f000 fe95 	bl	80033a8 <get_keypad>
	  get_ampere_volt();
 800267e:	f7ff feb7 	bl	80023f0 <get_ampere_volt>
//	  jam, menit, detik,tanggal, bulan, 2000 + tahun
	  snprintf( gabungtanggal, 50, "%02d:%02d:%02d %02d-%02d-%2d",jam, menit, detik,tanggal, bulan, 2000 + tahun );
 8002682:	4b78      	ldr	r3, [pc, #480]	; (8002864 <main+0x330>)
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	461d      	mov	r5, r3
 8002688:	4b77      	ldr	r3, [pc, #476]	; (8002868 <main+0x334>)
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	461a      	mov	r2, r3
 800268e:	4b77      	ldr	r3, [pc, #476]	; (800286c <main+0x338>)
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	4619      	mov	r1, r3
 8002694:	4b76      	ldr	r3, [pc, #472]	; (8002870 <main+0x33c>)
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	4618      	mov	r0, r3
 800269a:	4b76      	ldr	r3, [pc, #472]	; (8002874 <main+0x340>)
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	461c      	mov	r4, r3
 80026a0:	4b75      	ldr	r3, [pc, #468]	; (8002878 <main+0x344>)
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80026a8:	9304      	str	r3, [sp, #16]
 80026aa:	9403      	str	r4, [sp, #12]
 80026ac:	9002      	str	r0, [sp, #8]
 80026ae:	9101      	str	r1, [sp, #4]
 80026b0:	9200      	str	r2, [sp, #0]
 80026b2:	462b      	mov	r3, r5
 80026b4:	4a71      	ldr	r2, [pc, #452]	; (800287c <main+0x348>)
 80026b6:	2132      	movs	r1, #50	; 0x32
 80026b8:	4871      	ldr	r0, [pc, #452]	; (8002880 <main+0x34c>)
 80026ba:	f007 fa21 	bl	8009b00 <sniprintf>
//	  printf("%s\n", gabungtanggal);
	  getLCD(lat, lon, volt, amper, persen,gabungtanggal);
 80026be:	4b70      	ldr	r3, [pc, #448]	; (8002880 <main+0x34c>)
 80026c0:	9301      	str	r3, [sp, #4]
 80026c2:	4b70      	ldr	r3, [pc, #448]	; (8002884 <main+0x350>)
 80026c4:	9300      	str	r3, [sp, #0]
 80026c6:	4b70      	ldr	r3, [pc, #448]	; (8002888 <main+0x354>)
 80026c8:	4a70      	ldr	r2, [pc, #448]	; (800288c <main+0x358>)
 80026ca:	4971      	ldr	r1, [pc, #452]	; (8002890 <main+0x35c>)
 80026cc:	4871      	ldr	r0, [pc, #452]	; (8002894 <main+0x360>)
 80026ce:	f7ff fc4b 	bl	8001f68 <getLCD>
//	  printf("%02d:%02d:%02d || %02d-%02d-%2d\r\n",jam, menit, detik,tanggal, bulan, 2000 + tahun);
//	  printf("%s", lat);
//	  get_gps();
	  printf("%lf",GPS.lat);
 80026d2:	4b71      	ldr	r3, [pc, #452]	; (8002898 <main+0x364>)
 80026d4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80026d8:	4870      	ldr	r0, [pc, #448]	; (800289c <main+0x368>)
 80026da:	f007 f92d 	bl	8009938 <iprintf>
	   if(update){
 80026de:	4b70      	ldr	r3, [pc, #448]	; (80028a0 <main+0x36c>)
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d007      	beq.n	80026f6 <main+0x1c2>
	  		  update=false;
 80026e6:	4b6e      	ldr	r3, [pc, #440]	; (80028a0 <main+0x36c>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	701a      	strb	r2, [r3, #0]
	  		  GPS_p();
 80026ec:	f7fe fc7e 	bl	8000fec <GPS_p>
	  		  printed=false;
 80026f0:	4b6c      	ldr	r3, [pc, #432]	; (80028a4 <main+0x370>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	701a      	strb	r2, [r3, #0]
	  	  }
	  	  long int test;
	      test = HAL_GetTick();                                                        //Hole Zeit von Systicktimer
 80026f6:	f001 fc5b 	bl	8003fb0 <HAL_GetTick>
 80026fa:	4603      	mov	r3, r0
 80026fc:	627b      	str	r3, [r7, #36]	; 0x24
	      if(!((GPS.FIXTIME+1000) >test)){GPS.valid = false;}                          //Fix verfällt noch 1 sekunde
 80026fe:	4b66      	ldr	r3, [pc, #408]	; (8002898 <main+0x364>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 8002706:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002708:	429a      	cmp	r2, r3
 800270a:	dd03      	ble.n	8002714 <main+0x1e0>
 800270c:	4b62      	ldr	r3, [pc, #392]	; (8002898 <main+0x364>)
 800270e:	2200      	movs	r2, #0
 8002710:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

	    if(GPS.valid&& !printed){
 8002714:	4b60      	ldr	r3, [pc, #384]	; (8002898 <main+0x364>)
 8002716:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800271a:	2b00      	cmp	r3, #0
 800271c:	d0a8      	beq.n	8002670 <main+0x13c>
 800271e:	4b61      	ldr	r3, [pc, #388]	; (80028a4 <main+0x370>)
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	f083 0301 	eor.w	r3, r3, #1
 8002726:	b2db      	uxtb	r3, r3
 8002728:	2b00      	cmp	r3, #0
 800272a:	d0a1      	beq.n	8002670 <main+0x13c>
//	    	printf("%d:%d:%d.%d \n %lf  %c\n %lf  %c\n", GPS.hours,GPS.mins,GPS.secs,GPS.millis,GPS.latitude,GPS.NS_ind, GPS.longitude,GPS.EW_ind);
	    	sprintf(printbuffer,"%d:%d:%d.%d \n latitude:%lf NS_ind: %c\n longitude:%lf SE_ind: %c\nHDOP : %lf\nSats : %d\nAltitude:  %lf M\n", GPS.hour,GPS.min,GPS.sec,GPS.millis,GPS.lat,GPS.NS_ind, GPS.lon,GPS.EW_ind,GPS.hdop,GPS.sats,GPS.alt);
 800272c:	4b5a      	ldr	r3, [pc, #360]	; (8002898 <main+0x364>)
 800272e:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8002732:	469c      	mov	ip, r3
 8002734:	4b58      	ldr	r3, [pc, #352]	; (8002898 <main+0x364>)
 8002736:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 800273a:	469e      	mov	lr, r3
 800273c:	4b56      	ldr	r3, [pc, #344]	; (8002898 <main+0x364>)
 800273e:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 8002742:	461e      	mov	r6, r3
 8002744:	4b54      	ldr	r3, [pc, #336]	; (8002898 <main+0x364>)
 8002746:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 800274a:	60fb      	str	r3, [r7, #12]
 800274c:	4b52      	ldr	r3, [pc, #328]	; (8002898 <main+0x364>)
 800274e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002752:	4b51      	ldr	r3, [pc, #324]	; (8002898 <main+0x364>)
 8002754:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002758:	60bb      	str	r3, [r7, #8]
 800275a:	4b4f      	ldr	r3, [pc, #316]	; (8002898 <main+0x364>)
 800275c:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8002760:	4b4d      	ldr	r3, [pc, #308]	; (8002898 <main+0x364>)
 8002762:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002766:	607b      	str	r3, [r7, #4]
 8002768:	4b4b      	ldr	r3, [pc, #300]	; (8002898 <main+0x364>)
 800276a:	e9d3 8906 	ldrd	r8, r9, [r3, #24]
 800276e:	4b4a      	ldr	r3, [pc, #296]	; (8002898 <main+0x364>)
 8002770:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8002774:	603b      	str	r3, [r7, #0]
 8002776:	4b48      	ldr	r3, [pc, #288]	; (8002898 <main+0x364>)
 8002778:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800277c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8002780:	683a      	ldr	r2, [r7, #0]
 8002782:	920c      	str	r2, [sp, #48]	; 0x30
 8002784:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	9208      	str	r2, [sp, #32]
 800278c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8002790:	68ba      	ldr	r2, [r7, #8]
 8002792:	9204      	str	r2, [sp, #16]
 8002794:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	9301      	str	r3, [sp, #4]
 800279c:	9600      	str	r6, [sp, #0]
 800279e:	4673      	mov	r3, lr
 80027a0:	4662      	mov	r2, ip
 80027a2:	4941      	ldr	r1, [pc, #260]	; (80028a8 <main+0x374>)
 80027a4:	4841      	ldr	r0, [pc, #260]	; (80028ac <main+0x378>)
 80027a6:	f007 f9df 	bl	8009b68 <siprintf>
	    	//HAL_UART_Transmit(&huart2,(uint8_t *)GPS.message,strlen(GPS.message),1000);
	    	printf("%lf",GPS.lat);
 80027aa:	4b3b      	ldr	r3, [pc, #236]	; (8002898 <main+0x364>)
 80027ac:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80027b0:	483a      	ldr	r0, [pc, #232]	; (800289c <main+0x368>)
 80027b2:	f007 f8c1 	bl	8009938 <iprintf>
	    	HAL_UART_Transmit(&huart1,(uint8_t *) printbuffer,strlen(printbuffer),100);
 80027b6:	483d      	ldr	r0, [pc, #244]	; (80028ac <main+0x378>)
 80027b8:	f7fd fd5a 	bl	8000270 <strlen>
 80027bc:	4603      	mov	r3, r0
 80027be:	b29a      	uxth	r2, r3
 80027c0:	2364      	movs	r3, #100	; 0x64
 80027c2:	493a      	ldr	r1, [pc, #232]	; (80028ac <main+0x378>)
 80027c4:	4815      	ldr	r0, [pc, #84]	; (800281c <main+0x2e8>)
 80027c6:	f004 ffc0 	bl	800774a <HAL_UART_Transmit>
	        sprintf(printbuffer,"indexbegin: %d       indexend:  %d\nChecksum: 0x%x    Berechnete Checksum: 0x%x\n",GPS.index_begin,GPS.index_end,GPS.checksum,GPS.checksum_calc);
 80027ca:	4b33      	ldr	r3, [pc, #204]	; (8002898 <main+0x364>)
 80027cc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80027d0:	4619      	mov	r1, r3
 80027d2:	4b31      	ldr	r3, [pc, #196]	; (8002898 <main+0x364>)
 80027d4:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 80027d8:	4618      	mov	r0, r3
 80027da:	4b2f      	ldr	r3, [pc, #188]	; (8002898 <main+0x364>)
 80027dc:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80027e0:	461a      	mov	r2, r3
 80027e2:	4b2d      	ldr	r3, [pc, #180]	; (8002898 <main+0x364>)
 80027e4:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 80027e8:	9301      	str	r3, [sp, #4]
 80027ea:	9200      	str	r2, [sp, #0]
 80027ec:	4603      	mov	r3, r0
 80027ee:	460a      	mov	r2, r1
 80027f0:	492f      	ldr	r1, [pc, #188]	; (80028b0 <main+0x37c>)
 80027f2:	482e      	ldr	r0, [pc, #184]	; (80028ac <main+0x378>)
 80027f4:	f007 f9b8 	bl	8009b68 <siprintf>
	        HAL_UART_Transmit(&huart1,(uint8_t*) printbuffer,strlen(printbuffer),200);
 80027f8:	482c      	ldr	r0, [pc, #176]	; (80028ac <main+0x378>)
 80027fa:	f7fd fd39 	bl	8000270 <strlen>
 80027fe:	4603      	mov	r3, r0
 8002800:	b29a      	uxth	r2, r3
 8002802:	23c8      	movs	r3, #200	; 0xc8
 8002804:	4929      	ldr	r1, [pc, #164]	; (80028ac <main+0x378>)
 8002806:	4805      	ldr	r0, [pc, #20]	; (800281c <main+0x2e8>)
 8002808:	f004 ff9f 	bl	800774a <HAL_UART_Transmit>
	        printed = true;
 800280c:	4b25      	ldr	r3, [pc, #148]	; (80028a4 <main+0x370>)
 800280e:	2201      	movs	r2, #1
 8002810:	701a      	strb	r2, [r3, #0]
	    	switch (GPS.fixtype){
 8002812:	4b21      	ldr	r3, [pc, #132]	; (8002898 <main+0x364>)
 8002814:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8002818:	2b02      	cmp	r3, #2
 800281a:	e04b      	b.n	80028b4 <main+0x380>
 800281c:	20002f9c 	.word	0x20002f9c
 8002820:	20003040 	.word	0x20003040
 8002824:	200038cc 	.word	0x200038cc
 8002828:	20002cfc 	.word	0x20002cfc
 800282c:	20000604 	.word	0x20000604
 8002830:	20002e84 	.word	0x20002e84
 8002834:	20002e24 	.word	0x20002e24
 8002838:	40020c00 	.word	0x40020c00
 800283c:	20003004 	.word	0x20003004
 8002840:	40020800 	.word	0x40020800
 8002844:	20000a10 	.word	0x20000a10
 8002848:	20000a14 	.word	0x20000a14
 800284c:	0800e14c 	.word	0x0800e14c
 8002850:	20002d5c 	.word	0x20002d5c
 8002854:	2000303c 	.word	0x2000303c
 8002858:	20000a68 	.word	0x20000a68
 800285c:	0800e260 	.word	0x0800e260
 8002860:	20000a4c 	.word	0x20000a4c
 8002864:	20002fe0 	.word	0x20002fe0
 8002868:	20002f1d 	.word	0x20002f1d
 800286c:	2000303e 	.word	0x2000303e
 8002870:	20002f1e 	.word	0x20002f1e
 8002874:	20003920 	.word	0x20003920
 8002878:	20003910 	.word	0x20003910
 800287c:	0800e184 	.word	0x0800e184
 8002880:	200039a0 	.word	0x200039a0
 8002884:	20002f68 	.word	0x20002f68
 8002888:	20002f34 	.word	0x20002f34
 800288c:	20003898 	.word	0x20003898
 8002890:	20003028 	.word	0x20003028
 8002894:	20003984 	.word	0x20003984
 8002898:	20000b68 	.word	0x20000b68
 800289c:	0800e1a4 	.word	0x0800e1a4
 80028a0:	20000bb8 	.word	0x20000bb8
 80028a4:	20002ff8 	.word	0x20002ff8
 80028a8:	0800e1a8 	.word	0x0800e1a8
 80028ac:	20002bd0 	.word	0x20002bd0
 80028b0:	0800e210 	.word	0x0800e210
 80028b4:	d009      	beq.n	80028ca <main+0x396>
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	dc03      	bgt.n	80028c2 <main+0x38e>
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d007      	beq.n	80028ce <main+0x39a>
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d007      	beq.n	80028d2 <main+0x39e>
	        	case 2:
	       		////printf("\n 3D fix\n");
	        	break;
	        default:
	        	////printf ("ERROR\n");
	        	HAL_Delay(100);
 80028c2:	2064      	movs	r0, #100	; 0x64
 80028c4:	f001 fb80 	bl	8003fc8 <HAL_Delay>
 80028c8:	e6d2      	b.n	8002670 <main+0x13c>
	        	break;
 80028ca:	bf00      	nop
 80028cc:	e6d0      	b.n	8002670 <main+0x13c>
	       	 	break;
 80028ce:	bf00      	nop
 80028d0:	e6ce      	b.n	8002670 <main+0x13c>
	        	break;
 80028d2:	bf00      	nop
  {
 80028d4:	e6cc      	b.n	8002670 <main+0x13c>
 80028d6:	bf00      	nop

080028d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b098      	sub	sp, #96	; 0x60
 80028dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80028de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80028e2:	2230      	movs	r2, #48	; 0x30
 80028e4:	2100      	movs	r1, #0
 80028e6:	4618      	mov	r0, r3
 80028e8:	f006 f9a4 	bl	8008c34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80028ec:	f107 031c 	add.w	r3, r7, #28
 80028f0:	2200      	movs	r2, #0
 80028f2:	601a      	str	r2, [r3, #0]
 80028f4:	605a      	str	r2, [r3, #4]
 80028f6:	609a      	str	r2, [r3, #8]
 80028f8:	60da      	str	r2, [r3, #12]
 80028fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80028fc:	f107 030c 	add.w	r3, r7, #12
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]
 8002904:	605a      	str	r2, [r3, #4]
 8002906:	609a      	str	r2, [r3, #8]
 8002908:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800290a:	2300      	movs	r3, #0
 800290c:	60bb      	str	r3, [r7, #8]
 800290e:	4b31      	ldr	r3, [pc, #196]	; (80029d4 <SystemClock_Config+0xfc>)
 8002910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002912:	4a30      	ldr	r2, [pc, #192]	; (80029d4 <SystemClock_Config+0xfc>)
 8002914:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002918:	6413      	str	r3, [r2, #64]	; 0x40
 800291a:	4b2e      	ldr	r3, [pc, #184]	; (80029d4 <SystemClock_Config+0xfc>)
 800291c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002922:	60bb      	str	r3, [r7, #8]
 8002924:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002926:	2300      	movs	r3, #0
 8002928:	607b      	str	r3, [r7, #4]
 800292a:	4b2b      	ldr	r3, [pc, #172]	; (80029d8 <SystemClock_Config+0x100>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a2a      	ldr	r2, [pc, #168]	; (80029d8 <SystemClock_Config+0x100>)
 8002930:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002934:	6013      	str	r3, [r2, #0]
 8002936:	4b28      	ldr	r3, [pc, #160]	; (80029d8 <SystemClock_Config+0x100>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800293e:	607b      	str	r3, [r7, #4]
 8002940:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002942:	2309      	movs	r3, #9
 8002944:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002946:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800294a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800294c:	2301      	movs	r3, #1
 800294e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002950:	2302      	movs	r3, #2
 8002952:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002954:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002958:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800295a:	2304      	movs	r3, #4
 800295c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 800295e:	23a8      	movs	r3, #168	; 0xa8
 8002960:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002962:	2302      	movs	r3, #2
 8002964:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002966:	2304      	movs	r3, #4
 8002968:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800296a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800296e:	4618      	mov	r0, r3
 8002970:	f003 fa08 	bl	8005d84 <HAL_RCC_OscConfig>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800297a:	f000 fecf 	bl	800371c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800297e:	230f      	movs	r3, #15
 8002980:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002982:	2302      	movs	r3, #2
 8002984:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002986:	2300      	movs	r3, #0
 8002988:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800298a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800298e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002990:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002994:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002996:	f107 031c 	add.w	r3, r7, #28
 800299a:	2105      	movs	r1, #5
 800299c:	4618      	mov	r0, r3
 800299e:	f003 fc69 	bl	8006274 <HAL_RCC_ClockConfig>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d001      	beq.n	80029ac <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80029a8:	f000 feb8 	bl	800371c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80029ac:	2302      	movs	r3, #2
 80029ae:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80029b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029b4:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029b6:	f107 030c 	add.w	r3, r7, #12
 80029ba:	4618      	mov	r0, r3
 80029bc:	f003 fe56 	bl	800666c <HAL_RCCEx_PeriphCLKConfig>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80029c6:	f000 fea9 	bl	800371c <Error_Handler>
  }
}
 80029ca:	bf00      	nop
 80029cc:	3760      	adds	r7, #96	; 0x60
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	40023800 	.word	0x40023800
 80029d8:	40007000 	.word	0x40007000

080029dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80029e0:	4b12      	ldr	r3, [pc, #72]	; (8002a2c <MX_I2C1_Init+0x50>)
 80029e2:	4a13      	ldr	r2, [pc, #76]	; (8002a30 <MX_I2C1_Init+0x54>)
 80029e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80029e6:	4b11      	ldr	r3, [pc, #68]	; (8002a2c <MX_I2C1_Init+0x50>)
 80029e8:	4a12      	ldr	r2, [pc, #72]	; (8002a34 <MX_I2C1_Init+0x58>)
 80029ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80029ec:	4b0f      	ldr	r3, [pc, #60]	; (8002a2c <MX_I2C1_Init+0x50>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80029f2:	4b0e      	ldr	r3, [pc, #56]	; (8002a2c <MX_I2C1_Init+0x50>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80029f8:	4b0c      	ldr	r3, [pc, #48]	; (8002a2c <MX_I2C1_Init+0x50>)
 80029fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80029fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a00:	4b0a      	ldr	r3, [pc, #40]	; (8002a2c <MX_I2C1_Init+0x50>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002a06:	4b09      	ldr	r3, [pc, #36]	; (8002a2c <MX_I2C1_Init+0x50>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a0c:	4b07      	ldr	r3, [pc, #28]	; (8002a2c <MX_I2C1_Init+0x50>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a12:	4b06      	ldr	r3, [pc, #24]	; (8002a2c <MX_I2C1_Init+0x50>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002a18:	4804      	ldr	r0, [pc, #16]	; (8002a2c <MX_I2C1_Init+0x50>)
 8002a1a:	f002 f9f3 	bl	8004e04 <HAL_I2C_Init>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d001      	beq.n	8002a28 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002a24:	f000 fe7a 	bl	800371c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002a28:	bf00      	nop
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	20002ec8 	.word	0x20002ec8
 8002a30:	40005400 	.word	0x40005400
 8002a34:	000186a0 	.word	0x000186a0

08002a38 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b086      	sub	sp, #24
 8002a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */
	//JANGAN LUPA DIKOMEN YA
  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002a3e:	1d3b      	adds	r3, r7, #4
 8002a40:	2200      	movs	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]
 8002a44:	605a      	str	r2, [r3, #4]
 8002a46:	609a      	str	r2, [r3, #8]
 8002a48:	60da      	str	r2, [r3, #12]
 8002a4a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002a50:	4b27      	ldr	r3, [pc, #156]	; (8002af0 <MX_RTC_Init+0xb8>)
 8002a52:	4a28      	ldr	r2, [pc, #160]	; (8002af4 <MX_RTC_Init+0xbc>)
 8002a54:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002a56:	4b26      	ldr	r3, [pc, #152]	; (8002af0 <MX_RTC_Init+0xb8>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002a5c:	4b24      	ldr	r3, [pc, #144]	; (8002af0 <MX_RTC_Init+0xb8>)
 8002a5e:	227f      	movs	r2, #127	; 0x7f
 8002a60:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002a62:	4b23      	ldr	r3, [pc, #140]	; (8002af0 <MX_RTC_Init+0xb8>)
 8002a64:	22ff      	movs	r2, #255	; 0xff
 8002a66:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002a68:	4b21      	ldr	r3, [pc, #132]	; (8002af0 <MX_RTC_Init+0xb8>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002a6e:	4b20      	ldr	r3, [pc, #128]	; (8002af0 <MX_RTC_Init+0xb8>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002a74:	4b1e      	ldr	r3, [pc, #120]	; (8002af0 <MX_RTC_Init+0xb8>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002a7a:	481d      	ldr	r0, [pc, #116]	; (8002af0 <MX_RTC_Init+0xb8>)
 8002a7c:	f003 fed8 	bl	8006830 <HAL_RTC_Init>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d001      	beq.n	8002a8a <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8002a86:	f000 fe49 	bl	800371c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x11;
 8002a8a:	2311      	movs	r3, #17
 8002a8c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x35;
 8002a8e:	2335      	movs	r3, #53	; 0x35
 8002a90:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x5;
 8002a92:	2305      	movs	r3, #5
 8002a94:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002a96:	2300      	movs	r3, #0
 8002a98:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002a9e:	1d3b      	adds	r3, r7, #4
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	4812      	ldr	r0, [pc, #72]	; (8002af0 <MX_RTC_Init+0xb8>)
 8002aa6:	f003 ff54 	bl	8006952 <HAL_RTC_SetTime>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d001      	beq.n	8002ab4 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8002ab0:	f000 fe34 	bl	800371c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_OCTOBER;
 8002ab8:	2310      	movs	r3, #16
 8002aba:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x18;
 8002abc:	2318      	movs	r3, #24
 8002abe:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x21;
 8002ac0:	2321      	movs	r3, #33	; 0x21
 8002ac2:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002ac4:	463b      	mov	r3, r7
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	4619      	mov	r1, r3
 8002aca:	4809      	ldr	r0, [pc, #36]	; (8002af0 <MX_RTC_Init+0xb8>)
 8002acc:	f004 f85c 	bl	8006b88 <HAL_RTC_SetDate>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8002ad6:	f000 fe21 	bl	800371c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
	  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);
 8002ada:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8002ade:	2101      	movs	r1, #1
 8002ae0:	4803      	ldr	r0, [pc, #12]	; (8002af0 <MX_RTC_Init+0xb8>)
 8002ae2:	f004 f9d7 	bl	8006e94 <HAL_RTCEx_BKUPWrite>
  /* USER CODE END RTC_Init 2 */

}
 8002ae6:	bf00      	nop
 8002ae8:	3718      	adds	r7, #24
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	20003004 	.word	0x20003004
 8002af4:	40002800 	.word	0x40002800

08002af8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002afc:	4b17      	ldr	r3, [pc, #92]	; (8002b5c <MX_SPI1_Init+0x64>)
 8002afe:	4a18      	ldr	r2, [pc, #96]	; (8002b60 <MX_SPI1_Init+0x68>)
 8002b00:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002b02:	4b16      	ldr	r3, [pc, #88]	; (8002b5c <MX_SPI1_Init+0x64>)
 8002b04:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002b08:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002b0a:	4b14      	ldr	r3, [pc, #80]	; (8002b5c <MX_SPI1_Init+0x64>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b10:	4b12      	ldr	r3, [pc, #72]	; (8002b5c <MX_SPI1_Init+0x64>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b16:	4b11      	ldr	r3, [pc, #68]	; (8002b5c <MX_SPI1_Init+0x64>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b1c:	4b0f      	ldr	r3, [pc, #60]	; (8002b5c <MX_SPI1_Init+0x64>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002b22:	4b0e      	ldr	r3, [pc, #56]	; (8002b5c <MX_SPI1_Init+0x64>)
 8002b24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b28:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002b2a:	4b0c      	ldr	r3, [pc, #48]	; (8002b5c <MX_SPI1_Init+0x64>)
 8002b2c:	2208      	movs	r2, #8
 8002b2e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b30:	4b0a      	ldr	r3, [pc, #40]	; (8002b5c <MX_SPI1_Init+0x64>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b36:	4b09      	ldr	r3, [pc, #36]	; (8002b5c <MX_SPI1_Init+0x64>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b3c:	4b07      	ldr	r3, [pc, #28]	; (8002b5c <MX_SPI1_Init+0x64>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002b42:	4b06      	ldr	r3, [pc, #24]	; (8002b5c <MX_SPI1_Init+0x64>)
 8002b44:	220a      	movs	r2, #10
 8002b46:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002b48:	4804      	ldr	r0, [pc, #16]	; (8002b5c <MX_SPI1_Init+0x64>)
 8002b4a:	f004 f9d5 	bl	8006ef8 <HAL_SPI_Init>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d001      	beq.n	8002b58 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002b54:	f000 fde2 	bl	800371c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002b58:	bf00      	nop
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	20003840 	.word	0x20003840
 8002b60:	40013000 	.word	0x40013000

08002b64 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002b68:	4b11      	ldr	r3, [pc, #68]	; (8002bb0 <MX_USART1_UART_Init+0x4c>)
 8002b6a:	4a12      	ldr	r2, [pc, #72]	; (8002bb4 <MX_USART1_UART_Init+0x50>)
 8002b6c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002b6e:	4b10      	ldr	r3, [pc, #64]	; (8002bb0 <MX_USART1_UART_Init+0x4c>)
 8002b70:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002b74:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002b76:	4b0e      	ldr	r3, [pc, #56]	; (8002bb0 <MX_USART1_UART_Init+0x4c>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002b7c:	4b0c      	ldr	r3, [pc, #48]	; (8002bb0 <MX_USART1_UART_Init+0x4c>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002b82:	4b0b      	ldr	r3, [pc, #44]	; (8002bb0 <MX_USART1_UART_Init+0x4c>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002b88:	4b09      	ldr	r3, [pc, #36]	; (8002bb0 <MX_USART1_UART_Init+0x4c>)
 8002b8a:	220c      	movs	r2, #12
 8002b8c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b8e:	4b08      	ldr	r3, [pc, #32]	; (8002bb0 <MX_USART1_UART_Init+0x4c>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b94:	4b06      	ldr	r3, [pc, #24]	; (8002bb0 <MX_USART1_UART_Init+0x4c>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b9a:	4805      	ldr	r0, [pc, #20]	; (8002bb0 <MX_USART1_UART_Init+0x4c>)
 8002b9c:	f004 fd88 	bl	80076b0 <HAL_UART_Init>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002ba6:	f000 fdb9 	bl	800371c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002baa:	bf00      	nop
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	20002f9c 	.word	0x20002f9c
 8002bb4:	40011000 	.word	0x40011000

08002bb8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002bbc:	4b11      	ldr	r3, [pc, #68]	; (8002c04 <MX_USART2_UART_Init+0x4c>)
 8002bbe:	4a12      	ldr	r2, [pc, #72]	; (8002c08 <MX_USART2_UART_Init+0x50>)
 8002bc0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002bc2:	4b10      	ldr	r3, [pc, #64]	; (8002c04 <MX_USART2_UART_Init+0x4c>)
 8002bc4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002bc8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002bca:	4b0e      	ldr	r3, [pc, #56]	; (8002c04 <MX_USART2_UART_Init+0x4c>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002bd0:	4b0c      	ldr	r3, [pc, #48]	; (8002c04 <MX_USART2_UART_Init+0x4c>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002bd6:	4b0b      	ldr	r3, [pc, #44]	; (8002c04 <MX_USART2_UART_Init+0x4c>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002bdc:	4b09      	ldr	r3, [pc, #36]	; (8002c04 <MX_USART2_UART_Init+0x4c>)
 8002bde:	220c      	movs	r2, #12
 8002be0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002be2:	4b08      	ldr	r3, [pc, #32]	; (8002c04 <MX_USART2_UART_Init+0x4c>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002be8:	4b06      	ldr	r3, [pc, #24]	; (8002c04 <MX_USART2_UART_Init+0x4c>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002bee:	4805      	ldr	r0, [pc, #20]	; (8002c04 <MX_USART2_UART_Init+0x4c>)
 8002bf0:	f004 fd5e 	bl	80076b0 <HAL_UART_Init>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d001      	beq.n	8002bfe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002bfa:	f000 fd8f 	bl	800371c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002bfe:	bf00      	nop
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	200038cc 	.word	0x200038cc
 8002c08:	40004400 	.word	0x40004400

08002c0c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002c10:	4b11      	ldr	r3, [pc, #68]	; (8002c58 <MX_USART3_UART_Init+0x4c>)
 8002c12:	4a12      	ldr	r2, [pc, #72]	; (8002c5c <MX_USART3_UART_Init+0x50>)
 8002c14:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002c16:	4b10      	ldr	r3, [pc, #64]	; (8002c58 <MX_USART3_UART_Init+0x4c>)
 8002c18:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002c1c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002c1e:	4b0e      	ldr	r3, [pc, #56]	; (8002c58 <MX_USART3_UART_Init+0x4c>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002c24:	4b0c      	ldr	r3, [pc, #48]	; (8002c58 <MX_USART3_UART_Init+0x4c>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002c2a:	4b0b      	ldr	r3, [pc, #44]	; (8002c58 <MX_USART3_UART_Init+0x4c>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002c30:	4b09      	ldr	r3, [pc, #36]	; (8002c58 <MX_USART3_UART_Init+0x4c>)
 8002c32:	220c      	movs	r2, #12
 8002c34:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c36:	4b08      	ldr	r3, [pc, #32]	; (8002c58 <MX_USART3_UART_Init+0x4c>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c3c:	4b06      	ldr	r3, [pc, #24]	; (8002c58 <MX_USART3_UART_Init+0x4c>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002c42:	4805      	ldr	r0, [pc, #20]	; (8002c58 <MX_USART3_UART_Init+0x4c>)
 8002c44:	f004 fd34 	bl	80076b0 <HAL_UART_Init>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002c4e:	f000 fd65 	bl	800371c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002c52:	bf00      	nop
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	20002e84 	.word	0x20002e84
 8002c5c:	40004800 	.word	0x40004800

08002c60 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002c66:	2300      	movs	r3, #0
 8002c68:	607b      	str	r3, [r7, #4]
 8002c6a:	4b1b      	ldr	r3, [pc, #108]	; (8002cd8 <MX_DMA_Init+0x78>)
 8002c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6e:	4a1a      	ldr	r2, [pc, #104]	; (8002cd8 <MX_DMA_Init+0x78>)
 8002c70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002c74:	6313      	str	r3, [r2, #48]	; 0x30
 8002c76:	4b18      	ldr	r3, [pc, #96]	; (8002cd8 <MX_DMA_Init+0x78>)
 8002c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c7e:	607b      	str	r3, [r7, #4]
 8002c80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002c82:	2300      	movs	r3, #0
 8002c84:	603b      	str	r3, [r7, #0]
 8002c86:	4b14      	ldr	r3, [pc, #80]	; (8002cd8 <MX_DMA_Init+0x78>)
 8002c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8a:	4a13      	ldr	r2, [pc, #76]	; (8002cd8 <MX_DMA_Init+0x78>)
 8002c8c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c90:	6313      	str	r3, [r2, #48]	; 0x30
 8002c92:	4b11      	ldr	r3, [pc, #68]	; (8002cd8 <MX_DMA_Init+0x78>)
 8002c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c9a:	603b      	str	r3, [r7, #0]
 8002c9c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	2100      	movs	r1, #0
 8002ca2:	200c      	movs	r0, #12
 8002ca4:	f001 fa8f 	bl	80041c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002ca8:	200c      	movs	r0, #12
 8002caa:	f001 faa8 	bl	80041fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002cae:	2200      	movs	r2, #0
 8002cb0:	2100      	movs	r1, #0
 8002cb2:	2010      	movs	r0, #16
 8002cb4:	f001 fa87 	bl	80041c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002cb8:	2010      	movs	r0, #16
 8002cba:	f001 faa0 	bl	80041fe <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	203b      	movs	r0, #59	; 0x3b
 8002cc4:	f001 fa7f 	bl	80041c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002cc8:	203b      	movs	r0, #59	; 0x3b
 8002cca:	f001 fa98 	bl	80041fe <HAL_NVIC_EnableIRQ>

}
 8002cce:	bf00      	nop
 8002cd0:	3708      	adds	r7, #8
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	40023800 	.word	0x40023800

08002cdc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b08c      	sub	sp, #48	; 0x30
 8002ce0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ce2:	f107 031c 	add.w	r3, r7, #28
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	601a      	str	r2, [r3, #0]
 8002cea:	605a      	str	r2, [r3, #4]
 8002cec:	609a      	str	r2, [r3, #8]
 8002cee:	60da      	str	r2, [r3, #12]
 8002cf0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	61bb      	str	r3, [r7, #24]
 8002cf6:	4b5d      	ldr	r3, [pc, #372]	; (8002e6c <MX_GPIO_Init+0x190>)
 8002cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfa:	4a5c      	ldr	r2, [pc, #368]	; (8002e6c <MX_GPIO_Init+0x190>)
 8002cfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d00:	6313      	str	r3, [r2, #48]	; 0x30
 8002d02:	4b5a      	ldr	r3, [pc, #360]	; (8002e6c <MX_GPIO_Init+0x190>)
 8002d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d0a:	61bb      	str	r3, [r7, #24]
 8002d0c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d0e:	2300      	movs	r3, #0
 8002d10:	617b      	str	r3, [r7, #20]
 8002d12:	4b56      	ldr	r3, [pc, #344]	; (8002e6c <MX_GPIO_Init+0x190>)
 8002d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d16:	4a55      	ldr	r2, [pc, #340]	; (8002e6c <MX_GPIO_Init+0x190>)
 8002d18:	f043 0304 	orr.w	r3, r3, #4
 8002d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d1e:	4b53      	ldr	r3, [pc, #332]	; (8002e6c <MX_GPIO_Init+0x190>)
 8002d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d22:	f003 0304 	and.w	r3, r3, #4
 8002d26:	617b      	str	r3, [r7, #20]
 8002d28:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	613b      	str	r3, [r7, #16]
 8002d2e:	4b4f      	ldr	r3, [pc, #316]	; (8002e6c <MX_GPIO_Init+0x190>)
 8002d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d32:	4a4e      	ldr	r2, [pc, #312]	; (8002e6c <MX_GPIO_Init+0x190>)
 8002d34:	f043 0301 	orr.w	r3, r3, #1
 8002d38:	6313      	str	r3, [r2, #48]	; 0x30
 8002d3a:	4b4c      	ldr	r3, [pc, #304]	; (8002e6c <MX_GPIO_Init+0x190>)
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	613b      	str	r3, [r7, #16]
 8002d44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d46:	2300      	movs	r3, #0
 8002d48:	60fb      	str	r3, [r7, #12]
 8002d4a:	4b48      	ldr	r3, [pc, #288]	; (8002e6c <MX_GPIO_Init+0x190>)
 8002d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4e:	4a47      	ldr	r2, [pc, #284]	; (8002e6c <MX_GPIO_Init+0x190>)
 8002d50:	f043 0310 	orr.w	r3, r3, #16
 8002d54:	6313      	str	r3, [r2, #48]	; 0x30
 8002d56:	4b45      	ldr	r3, [pc, #276]	; (8002e6c <MX_GPIO_Init+0x190>)
 8002d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5a:	f003 0310 	and.w	r3, r3, #16
 8002d5e:	60fb      	str	r3, [r7, #12]
 8002d60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d62:	2300      	movs	r3, #0
 8002d64:	60bb      	str	r3, [r7, #8]
 8002d66:	4b41      	ldr	r3, [pc, #260]	; (8002e6c <MX_GPIO_Init+0x190>)
 8002d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6a:	4a40      	ldr	r2, [pc, #256]	; (8002e6c <MX_GPIO_Init+0x190>)
 8002d6c:	f043 0302 	orr.w	r3, r3, #2
 8002d70:	6313      	str	r3, [r2, #48]	; 0x30
 8002d72:	4b3e      	ldr	r3, [pc, #248]	; (8002e6c <MX_GPIO_Init+0x190>)
 8002d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d76:	f003 0302 	and.w	r3, r3, #2
 8002d7a:	60bb      	str	r3, [r7, #8]
 8002d7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d7e:	2300      	movs	r3, #0
 8002d80:	607b      	str	r3, [r7, #4]
 8002d82:	4b3a      	ldr	r3, [pc, #232]	; (8002e6c <MX_GPIO_Init+0x190>)
 8002d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d86:	4a39      	ldr	r2, [pc, #228]	; (8002e6c <MX_GPIO_Init+0x190>)
 8002d88:	f043 0308 	orr.w	r3, r3, #8
 8002d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d8e:	4b37      	ldr	r3, [pc, #220]	; (8002e6c <MX_GPIO_Init+0x190>)
 8002d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d92:	f003 0308 	and.w	r3, r3, #8
 8002d96:	607b      	str	r3, [r7, #4]
 8002d98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_4, GPIO_PIN_RESET);
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	2115      	movs	r1, #21
 8002d9e:	4834      	ldr	r0, [pc, #208]	; (8002e70 <MX_GPIO_Init+0x194>)
 8002da0:	f001 fffe 	bl	8004da0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8002da4:	2200      	movs	r2, #0
 8002da6:	2103      	movs	r1, #3
 8002da8:	4832      	ldr	r0, [pc, #200]	; (8002e74 <MX_GPIO_Init+0x198>)
 8002daa:	f001 fff9 	bl	8004da0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14
 8002dae:	2200      	movs	r2, #0
 8002db0:	f44f 4156 	mov.w	r1, #54784	; 0xd600
 8002db4:	4830      	ldr	r0, [pc, #192]	; (8002e78 <MX_GPIO_Init+0x19c>)
 8002db6:	f001 fff3 	bl	8004da0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8002dba:	2200      	movs	r2, #0
 8002dbc:	21f0      	movs	r1, #240	; 0xf0
 8002dbe:	482f      	ldr	r0, [pc, #188]	; (8002e7c <MX_GPIO_Init+0x1a0>)
 8002dc0:	f001 ffee 	bl	8004da0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC2 PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_4;
 8002dc4:	2315      	movs	r3, #21
 8002dc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dd4:	f107 031c 	add.w	r3, r7, #28
 8002dd8:	4619      	mov	r1, r3
 8002dda:	4825      	ldr	r0, [pc, #148]	; (8002e70 <MX_GPIO_Init+0x194>)
 8002ddc:	f001 fe2c 	bl	8004a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002de0:	2303      	movs	r3, #3
 8002de2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002de4:	2301      	movs	r3, #1
 8002de6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de8:	2300      	movs	r3, #0
 8002dea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dec:	2300      	movs	r3, #0
 8002dee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002df0:	f107 031c 	add.w	r3, r7, #28
 8002df4:	4619      	mov	r1, r3
 8002df6:	481f      	ldr	r0, [pc, #124]	; (8002e74 <MX_GPIO_Init+0x198>)
 8002df8:	f001 fe1e 	bl	8004a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE9 PE10 PE12 PE14
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14
 8002dfc:	f44f 4356 	mov.w	r3, #54784	; 0xd600
 8002e00:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e02:	2301      	movs	r3, #1
 8002e04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e06:	2300      	movs	r3, #0
 8002e08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e0e:	f107 031c 	add.w	r3, r7, #28
 8002e12:	4619      	mov	r1, r3
 8002e14:	4818      	ldr	r0, [pc, #96]	; (8002e78 <MX_GPIO_Init+0x19c>)
 8002e16:	f001 fe0f 	bl	8004a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002e1a:	23f0      	movs	r3, #240	; 0xf0
 8002e1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e22:	2300      	movs	r3, #0
 8002e24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e26:	2300      	movs	r3, #0
 8002e28:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e2a:	f107 031c 	add.w	r3, r7, #28
 8002e2e:	4619      	mov	r1, r3
 8002e30:	4812      	ldr	r0, [pc, #72]	; (8002e7c <MX_GPIO_Init+0x1a0>)
 8002e32:	f001 fe01 	bl	8004a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
 8002e36:	f44f 734a 	mov.w	r3, #808	; 0x328
 8002e3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002e3c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002e40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e42:	2300      	movs	r3, #0
 8002e44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e46:	f107 031c 	add.w	r3, r7, #28
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	480c      	ldr	r0, [pc, #48]	; (8002e80 <MX_GPIO_Init+0x1a4>)
 8002e4e:	f001 fdf3 	bl	8004a38 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002e52:	2200      	movs	r2, #0
 8002e54:	2100      	movs	r1, #0
 8002e56:	2017      	movs	r0, #23
 8002e58:	f001 f9b5 	bl	80041c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002e5c:	2017      	movs	r0, #23
 8002e5e:	f001 f9ce 	bl	80041fe <HAL_NVIC_EnableIRQ>

}
 8002e62:	bf00      	nop
 8002e64:	3730      	adds	r7, #48	; 0x30
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	40023800 	.word	0x40023800
 8002e70:	40020800 	.word	0x40020800
 8002e74:	40020000 	.word	0x40020000
 8002e78:	40021000 	.word	0x40021000
 8002e7c:	40020c00 	.word	0x40020c00
 8002e80:	40020400 	.word	0x40020400

08002e84 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
/**Fungsi ini digunakan untuk interrupt LoRa E32 jika ada data masuk
  */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b086      	sub	sp, #24
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	807b      	strh	r3, [r7, #2]
	//variable parse
	uint8_t new_Data[10];
	//uint8_t prev_Data;
	if (huart->Instance == USART2)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a62      	ldr	r2, [pc, #392]	; (8003020 <HAL_UARTEx_RxEventCallback+0x19c>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d167      	bne.n	8002f6a <HAL_UARTEx_RxEventCallback+0xe6>
	{
		oldPos = newPos;  // Update the last position before copying new data
 8002e9a:	4b62      	ldr	r3, [pc, #392]	; (8003024 <HAL_UARTEx_RxEventCallback+0x1a0>)
 8002e9c:	881a      	ldrh	r2, [r3, #0]
 8002e9e:	4b62      	ldr	r3, [pc, #392]	; (8003028 <HAL_UARTEx_RxEventCallback+0x1a4>)
 8002ea0:	801a      	strh	r2, [r3, #0]

		/* If the data in large and it is about to exceed the buffer size, we have to route it to the start of the buffer
		 * This is to maintain the circular buffer
		 * The old data in the main buffer will be overlapped
		 */
		if (oldPos+Size > MainBuf_SIZE)  // If the current position + new data size is greater than the main buffer
 8002ea2:	4b61      	ldr	r3, [pc, #388]	; (8003028 <HAL_UARTEx_RxEventCallback+0x1a4>)
 8002ea4:	881b      	ldrh	r3, [r3, #0]
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	887b      	ldrh	r3, [r7, #2]
 8002eaa:	4413      	add	r3, r2
 8002eac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eb0:	dd22      	ble.n	8002ef8 <HAL_UARTEx_RxEventCallback+0x74>
		{
			uint16_t datatocopy = MainBuf_SIZE-oldPos;  // find out how much space is left in the main buffer
 8002eb2:	4b5d      	ldr	r3, [pc, #372]	; (8003028 <HAL_UARTEx_RxEventCallback+0x1a4>)
 8002eb4:	881b      	ldrh	r3, [r3, #0]
 8002eb6:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8002eba:	82bb      	strh	r3, [r7, #20]
			memcpy ((uint8_t *)MainBuf+oldPos, RxBuf, datatocopy);  // copy data in that remaining space
 8002ebc:	4b5a      	ldr	r3, [pc, #360]	; (8003028 <HAL_UARTEx_RxEventCallback+0x1a4>)
 8002ebe:	881b      	ldrh	r3, [r3, #0]
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	4b5a      	ldr	r3, [pc, #360]	; (800302c <HAL_UARTEx_RxEventCallback+0x1a8>)
 8002ec4:	4413      	add	r3, r2
 8002ec6:	8aba      	ldrh	r2, [r7, #20]
 8002ec8:	4959      	ldr	r1, [pc, #356]	; (8003030 <HAL_UARTEx_RxEventCallback+0x1ac>)
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f005 fea4 	bl	8008c18 <memcpy>

			oldPos = 0;  // point to the start of the buffer
 8002ed0:	4b55      	ldr	r3, [pc, #340]	; (8003028 <HAL_UARTEx_RxEventCallback+0x1a4>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)MainBuf, (uint8_t *)RxBuf+datatocopy, (Size-datatocopy));  // copy the remaining data
 8002ed6:	8abb      	ldrh	r3, [r7, #20]
 8002ed8:	4a55      	ldr	r2, [pc, #340]	; (8003030 <HAL_UARTEx_RxEventCallback+0x1ac>)
 8002eda:	1899      	adds	r1, r3, r2
 8002edc:	887a      	ldrh	r2, [r7, #2]
 8002ede:	8abb      	ldrh	r3, [r7, #20]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	4851      	ldr	r0, [pc, #324]	; (800302c <HAL_UARTEx_RxEventCallback+0x1a8>)
 8002ee6:	f005 fe97 	bl	8008c18 <memcpy>
			newPos = (Size-datatocopy);  // update the position
 8002eea:	887a      	ldrh	r2, [r7, #2]
 8002eec:	8abb      	ldrh	r3, [r7, #20]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	b29a      	uxth	r2, r3
 8002ef2:	4b4c      	ldr	r3, [pc, #304]	; (8003024 <HAL_UARTEx_RxEventCallback+0x1a0>)
 8002ef4:	801a      	strh	r2, [r3, #0]
 8002ef6:	e010      	b.n	8002f1a <HAL_UARTEx_RxEventCallback+0x96>
		/* if the current position + new data size is less than the main buffer
		 * we will simply copy the data into the buffer and update the position
		 */
		else
		{
			memcpy ((uint8_t *)MainBuf+newPos, RxBuf, Size);
 8002ef8:	4b4a      	ldr	r3, [pc, #296]	; (8003024 <HAL_UARTEx_RxEventCallback+0x1a0>)
 8002efa:	881b      	ldrh	r3, [r3, #0]
 8002efc:	461a      	mov	r2, r3
 8002efe:	4b4b      	ldr	r3, [pc, #300]	; (800302c <HAL_UARTEx_RxEventCallback+0x1a8>)
 8002f00:	4413      	add	r3, r2
 8002f02:	887a      	ldrh	r2, [r7, #2]
 8002f04:	494a      	ldr	r1, [pc, #296]	; (8003030 <HAL_UARTEx_RxEventCallback+0x1ac>)
 8002f06:	4618      	mov	r0, r3
 8002f08:	f005 fe86 	bl	8008c18 <memcpy>
			newPos = Size+oldPos;
 8002f0c:	4b46      	ldr	r3, [pc, #280]	; (8003028 <HAL_UARTEx_RxEventCallback+0x1a4>)
 8002f0e:	881a      	ldrh	r2, [r3, #0]
 8002f10:	887b      	ldrh	r3, [r7, #2]
 8002f12:	4413      	add	r3, r2
 8002f14:	b29a      	uxth	r2, r3
 8002f16:	4b43      	ldr	r3, [pc, #268]	; (8003024 <HAL_UARTEx_RxEventCallback+0x1a0>)
 8002f18:	801a      	strh	r2, [r3, #0]
		}
		/* start the DMA again */
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *) RxBuf, RxBuf_SIZE);
 8002f1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f1e:	4944      	ldr	r1, [pc, #272]	; (8003030 <HAL_UARTEx_RxEventCallback+0x1ac>)
 8002f20:	4844      	ldr	r0, [pc, #272]	; (8003034 <HAL_UARTEx_RxEventCallback+0x1b0>)
 8002f22:	f004 fd76 	bl	8007a12 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8002f26:	4b44      	ldr	r3, [pc, #272]	; (8003038 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	4b42      	ldr	r3, [pc, #264]	; (8003038 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f022 0208 	bic.w	r2, r2, #8
 8002f34:	601a      	str	r2, [r3, #0]

		if(RxBuf_3[0] == '*'){ //*node,lat,long,data,jam, menit, detik, tegangan
 8002f36:	4b41      	ldr	r3, [pc, #260]	; (800303c <HAL_UARTEx_RxEventCallback+0x1b8>)
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	2b2a      	cmp	r3, #42	; 0x2a
 8002f3c:	d10b      	bne.n	8002f56 <HAL_UARTEx_RxEventCallback+0xd2>
			new_Data[0] = MainBuf[1];
 8002f3e:	4b3b      	ldr	r3, [pc, #236]	; (800302c <HAL_UARTEx_RxEventCallback+0x1a8>)
 8002f40:	785b      	ldrb	r3, [r3, #1]
 8002f42:	723b      	strb	r3, [r7, #8]
			if (new_Data[0]){
 8002f44:	7a3b      	ldrb	r3, [r7, #8]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d005      	beq.n	8002f56 <HAL_UARTEx_RxEventCallback+0xd2>
				HAL_UART_Transmit(&huart2, MainBuf, Size, 100);
 8002f4a:	887a      	ldrh	r2, [r7, #2]
 8002f4c:	2364      	movs	r3, #100	; 0x64
 8002f4e:	4937      	ldr	r1, [pc, #220]	; (800302c <HAL_UARTEx_RxEventCallback+0x1a8>)
 8002f50:	4838      	ldr	r0, [pc, #224]	; (8003034 <HAL_UARTEx_RxEventCallback+0x1b0>)
 8002f52:	f004 fbfa 	bl	800774a <HAL_UART_Transmit>
			}
			//prev_Data = new_Data[0];
		}
		printf("%s", MainBuf);
 8002f56:	4935      	ldr	r1, [pc, #212]	; (800302c <HAL_UARTEx_RxEventCallback+0x1a8>)
 8002f58:	4839      	ldr	r0, [pc, #228]	; (8003040 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8002f5a:	f006 fced 	bl	8009938 <iprintf>
		led_reaction(100, 600);
 8002f5e:	f44f 7116 	mov.w	r1, #600	; 0x258
 8002f62:	2064      	movs	r0, #100	; 0x64
 8002f64:	f000 fb72 	bl	800364c <led_reaction>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t *) RxBuf_3, RxBuf_SIZE);
		__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
//		printf("%s", MainBuf_3); //gpsdata
		usart_3_state = true;
	}
}
 8002f68:	e055      	b.n	8003016 <HAL_UARTEx_RxEventCallback+0x192>
	}else if(huart->Instance == USART3){
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a35      	ldr	r2, [pc, #212]	; (8003044 <HAL_UARTEx_RxEventCallback+0x1c0>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d150      	bne.n	8003016 <HAL_UARTEx_RxEventCallback+0x192>
		oldPos_3 = newPos_3;
 8002f74:	4b34      	ldr	r3, [pc, #208]	; (8003048 <HAL_UARTEx_RxEventCallback+0x1c4>)
 8002f76:	881a      	ldrh	r2, [r3, #0]
 8002f78:	4b34      	ldr	r3, [pc, #208]	; (800304c <HAL_UARTEx_RxEventCallback+0x1c8>)
 8002f7a:	801a      	strh	r2, [r3, #0]
		if (oldPos_3+Size > MainBuf_SIZE)  // If the current position + new data size is greater than the main buffer
 8002f7c:	4b33      	ldr	r3, [pc, #204]	; (800304c <HAL_UARTEx_RxEventCallback+0x1c8>)
 8002f7e:	881b      	ldrh	r3, [r3, #0]
 8002f80:	461a      	mov	r2, r3
 8002f82:	887b      	ldrh	r3, [r7, #2]
 8002f84:	4413      	add	r3, r2
 8002f86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f8a:	dd22      	ble.n	8002fd2 <HAL_UARTEx_RxEventCallback+0x14e>
			uint16_t datatocopy_3 = MainBuf_SIZE-oldPos_3;  // find out how much space is left in the main buffer
 8002f8c:	4b2f      	ldr	r3, [pc, #188]	; (800304c <HAL_UARTEx_RxEventCallback+0x1c8>)
 8002f8e:	881b      	ldrh	r3, [r3, #0]
 8002f90:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8002f94:	82fb      	strh	r3, [r7, #22]
			memcpy ((uint8_t *)MainBuf_3+oldPos_3, RxBuf_3, datatocopy_3);  // copy data in that remaining space
 8002f96:	4b2d      	ldr	r3, [pc, #180]	; (800304c <HAL_UARTEx_RxEventCallback+0x1c8>)
 8002f98:	881b      	ldrh	r3, [r3, #0]
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	4b2c      	ldr	r3, [pc, #176]	; (8003050 <HAL_UARTEx_RxEventCallback+0x1cc>)
 8002f9e:	4413      	add	r3, r2
 8002fa0:	8afa      	ldrh	r2, [r7, #22]
 8002fa2:	4926      	ldr	r1, [pc, #152]	; (800303c <HAL_UARTEx_RxEventCallback+0x1b8>)
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f005 fe37 	bl	8008c18 <memcpy>
			oldPos_3 = 0;  // point to the start of the buffer
 8002faa:	4b28      	ldr	r3, [pc, #160]	; (800304c <HAL_UARTEx_RxEventCallback+0x1c8>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)MainBuf_3, (uint8_t *)RxBuf_3+datatocopy_3, (Size-datatocopy_3));  // copy the remaining data
 8002fb0:	8afb      	ldrh	r3, [r7, #22]
 8002fb2:	4a22      	ldr	r2, [pc, #136]	; (800303c <HAL_UARTEx_RxEventCallback+0x1b8>)
 8002fb4:	1899      	adds	r1, r3, r2
 8002fb6:	887a      	ldrh	r2, [r7, #2]
 8002fb8:	8afb      	ldrh	r3, [r7, #22]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	4824      	ldr	r0, [pc, #144]	; (8003050 <HAL_UARTEx_RxEventCallback+0x1cc>)
 8002fc0:	f005 fe2a 	bl	8008c18 <memcpy>
			newPos_3 = (Size-datatocopy_3);
 8002fc4:	887a      	ldrh	r2, [r7, #2]
 8002fc6:	8afb      	ldrh	r3, [r7, #22]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	b29a      	uxth	r2, r3
 8002fcc:	4b1e      	ldr	r3, [pc, #120]	; (8003048 <HAL_UARTEx_RxEventCallback+0x1c4>)
 8002fce:	801a      	strh	r2, [r3, #0]
 8002fd0:	e010      	b.n	8002ff4 <HAL_UARTEx_RxEventCallback+0x170>
			memcpy ((uint8_t *)MainBuf+newPos_3, RxBuf_3, Size);
 8002fd2:	4b1d      	ldr	r3, [pc, #116]	; (8003048 <HAL_UARTEx_RxEventCallback+0x1c4>)
 8002fd4:	881b      	ldrh	r3, [r3, #0]
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	4b14      	ldr	r3, [pc, #80]	; (800302c <HAL_UARTEx_RxEventCallback+0x1a8>)
 8002fda:	4413      	add	r3, r2
 8002fdc:	887a      	ldrh	r2, [r7, #2]
 8002fde:	4917      	ldr	r1, [pc, #92]	; (800303c <HAL_UARTEx_RxEventCallback+0x1b8>)
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f005 fe19 	bl	8008c18 <memcpy>
			newPos_3 = Size+oldPos_3;
 8002fe6:	4b19      	ldr	r3, [pc, #100]	; (800304c <HAL_UARTEx_RxEventCallback+0x1c8>)
 8002fe8:	881a      	ldrh	r2, [r3, #0]
 8002fea:	887b      	ldrh	r3, [r7, #2]
 8002fec:	4413      	add	r3, r2
 8002fee:	b29a      	uxth	r2, r3
 8002ff0:	4b15      	ldr	r3, [pc, #84]	; (8003048 <HAL_UARTEx_RxEventCallback+0x1c4>)
 8002ff2:	801a      	strh	r2, [r3, #0]
		HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t *) RxBuf_3, RxBuf_SIZE);
 8002ff4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ff8:	4910      	ldr	r1, [pc, #64]	; (800303c <HAL_UARTEx_RxEventCallback+0x1b8>)
 8002ffa:	4816      	ldr	r0, [pc, #88]	; (8003054 <HAL_UARTEx_RxEventCallback+0x1d0>)
 8002ffc:	f004 fd09 	bl	8007a12 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8003000:	4b15      	ldr	r3, [pc, #84]	; (8003058 <HAL_UARTEx_RxEventCallback+0x1d4>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	4b14      	ldr	r3, [pc, #80]	; (8003058 <HAL_UARTEx_RxEventCallback+0x1d4>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f022 0208 	bic.w	r2, r2, #8
 800300e:	601a      	str	r2, [r3, #0]
		usart_3_state = true;
 8003010:	4b12      	ldr	r3, [pc, #72]	; (800305c <HAL_UARTEx_RxEventCallback+0x1d8>)
 8003012:	2201      	movs	r2, #1
 8003014:	701a      	strb	r2, [r3, #0]
}
 8003016:	bf00      	nop
 8003018:	3718      	adds	r7, #24
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	40004400 	.word	0x40004400
 8003024:	20000a08 	.word	0x20000a08
 8003028:	20000a06 	.word	0x20000a06
 800302c:	20003440 	.word	0x20003440
 8003030:	20003040 	.word	0x20003040
 8003034:	200038cc 	.word	0x200038cc
 8003038:	20002cfc 	.word	0x20002cfc
 800303c:	20000604 	.word	0x20000604
 8003040:	0800e270 	.word	0x0800e270
 8003044:	40004800 	.word	0x40004800
 8003048:	20000a0c 	.word	0x20000a0c
 800304c:	20000a0a 	.word	0x20000a0a
 8003050:	20000204 	.word	0x20000204
 8003054:	20002e84 	.word	0x20002e84
 8003058:	20002e24 	.word	0x20002e24
 800305c:	20000a04 	.word	0x20000a04

08003060 <HAL_GPIO_EXTI_Callback>:
/**Fungsi ini digunakan untuk keypad untuk mengirim pesan dan juga di intrupsi jika ada data masuk dari keypad
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	4603      	mov	r3, r0
 8003068:	80fb      	strh	r3, [r7, #6]
  currentMillis = HAL_GetTick();
 800306a:	f000 ffa1 	bl	8003fb0 <HAL_GetTick>
 800306e:	4603      	mov	r3, r0
 8003070:	4aa3      	ldr	r2, [pc, #652]	; (8003300 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8003072:	6013      	str	r3, [r2, #0]
  if (currentMillis - previousMillis > 10) {
 8003074:	4ba2      	ldr	r3, [pc, #648]	; (8003300 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	4ba2      	ldr	r3, [pc, #648]	; (8003304 <HAL_GPIO_EXTI_Callback+0x2a4>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b0a      	cmp	r3, #10
 8003080:	f240 817f 	bls.w	8003382 <HAL_GPIO_EXTI_Callback+0x322>
    /*Configure GPIO pins : PB3 PB5 PB8 PB9 to GPIO_INPUT*/
    GPIO_InitStructPrivate.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
 8003084:	4ba0      	ldr	r3, [pc, #640]	; (8003308 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8003086:	f44f 724a 	mov.w	r2, #808	; 0x328
 800308a:	601a      	str	r2, [r3, #0]
    GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 800308c:	4b9e      	ldr	r3, [pc, #632]	; (8003308 <HAL_GPIO_EXTI_Callback+0x2a8>)
 800308e:	2200      	movs	r2, #0
 8003090:	605a      	str	r2, [r3, #4]
    GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8003092:	4b9d      	ldr	r3, [pc, #628]	; (8003308 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8003094:	2200      	movs	r2, #0
 8003096:	609a      	str	r2, [r3, #8]
    GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8003098:	4b9b      	ldr	r3, [pc, #620]	; (8003308 <HAL_GPIO_EXTI_Callback+0x2a8>)
 800309a:	2200      	movs	r2, #0
 800309c:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructPrivate);
 800309e:	499a      	ldr	r1, [pc, #616]	; (8003308 <HAL_GPIO_EXTI_Callback+0x2a8>)
 80030a0:	489a      	ldr	r0, [pc, #616]	; (800330c <HAL_GPIO_EXTI_Callback+0x2ac>)
 80030a2:	f001 fcc9 	bl	8004a38 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, 1);
 80030a6:	2201      	movs	r2, #1
 80030a8:	2110      	movs	r1, #16
 80030aa:	4899      	ldr	r0, [pc, #612]	; (8003310 <HAL_GPIO_EXTI_Callback+0x2b0>)
 80030ac:	f001 fe78 	bl	8004da0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, 0);
 80030b0:	2200      	movs	r2, #0
 80030b2:	2120      	movs	r1, #32
 80030b4:	4896      	ldr	r0, [pc, #600]	; (8003310 <HAL_GPIO_EXTI_Callback+0x2b0>)
 80030b6:	f001 fe73 	bl	8004da0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, 0);
 80030ba:	2200      	movs	r2, #0
 80030bc:	2140      	movs	r1, #64	; 0x40
 80030be:	4894      	ldr	r0, [pc, #592]	; (8003310 <HAL_GPIO_EXTI_Callback+0x2b0>)
 80030c0:	f001 fe6e 	bl	8004da0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, 0);
 80030c4:	2200      	movs	r2, #0
 80030c6:	2180      	movs	r1, #128	; 0x80
 80030c8:	4891      	ldr	r0, [pc, #580]	; (8003310 <HAL_GPIO_EXTI_Callback+0x2b0>)
 80030ca:	f001 fe69 	bl	8004da0 <HAL_GPIO_WritePin>
    if(GPIO_Pin == GPIO_PIN_3 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3))
 80030ce:	88fb      	ldrh	r3, [r7, #6]
 80030d0:	2b08      	cmp	r3, #8
 80030d2:	d10a      	bne.n	80030ea <HAL_GPIO_EXTI_Callback+0x8a>
 80030d4:	2108      	movs	r1, #8
 80030d6:	488d      	ldr	r0, [pc, #564]	; (800330c <HAL_GPIO_EXTI_Callback+0x2ac>)
 80030d8:	f001 fe4a 	bl	8004d70 <HAL_GPIO_ReadPin>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d003      	beq.n	80030ea <HAL_GPIO_EXTI_Callback+0x8a>
    {
      keyPressed = 14; //ASCII value of D
 80030e2:	4b8c      	ldr	r3, [pc, #560]	; (8003314 <HAL_GPIO_EXTI_Callback+0x2b4>)
 80030e4:	220e      	movs	r2, #14
 80030e6:	701a      	strb	r2, [r3, #0]
 80030e8:	e02c      	b.n	8003144 <HAL_GPIO_EXTI_Callback+0xe4>
    }
    else if(GPIO_Pin == GPIO_PIN_5 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5))
 80030ea:	88fb      	ldrh	r3, [r7, #6]
 80030ec:	2b20      	cmp	r3, #32
 80030ee:	d10a      	bne.n	8003106 <HAL_GPIO_EXTI_Callback+0xa6>
 80030f0:	2120      	movs	r1, #32
 80030f2:	4886      	ldr	r0, [pc, #536]	; (800330c <HAL_GPIO_EXTI_Callback+0x2ac>)
 80030f4:	f001 fe3c 	bl	8004d70 <HAL_GPIO_ReadPin>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d003      	beq.n	8003106 <HAL_GPIO_EXTI_Callback+0xa6>
    {
      keyPressed = 13; //ASCII value of C
 80030fe:	4b85      	ldr	r3, [pc, #532]	; (8003314 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8003100:	220d      	movs	r2, #13
 8003102:	701a      	strb	r2, [r3, #0]
 8003104:	e01e      	b.n	8003144 <HAL_GPIO_EXTI_Callback+0xe4>
    }
    else if(GPIO_Pin == GPIO_PIN_8 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))
 8003106:	88fb      	ldrh	r3, [r7, #6]
 8003108:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800310c:	d10b      	bne.n	8003126 <HAL_GPIO_EXTI_Callback+0xc6>
 800310e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003112:	487e      	ldr	r0, [pc, #504]	; (800330c <HAL_GPIO_EXTI_Callback+0x2ac>)
 8003114:	f001 fe2c 	bl	8004d70 <HAL_GPIO_ReadPin>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d003      	beq.n	8003126 <HAL_GPIO_EXTI_Callback+0xc6>
    {
      keyPressed = 12; //ASCII value of B
 800311e:	4b7d      	ldr	r3, [pc, #500]	; (8003314 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8003120:	220c      	movs	r2, #12
 8003122:	701a      	strb	r2, [r3, #0]
 8003124:	e00e      	b.n	8003144 <HAL_GPIO_EXTI_Callback+0xe4>
    }
    else if(GPIO_Pin == GPIO_PIN_9 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9))
 8003126:	88fb      	ldrh	r3, [r7, #6]
 8003128:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800312c:	d10a      	bne.n	8003144 <HAL_GPIO_EXTI_Callback+0xe4>
 800312e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003132:	4876      	ldr	r0, [pc, #472]	; (800330c <HAL_GPIO_EXTI_Callback+0x2ac>)
 8003134:	f001 fe1c 	bl	8004d70 <HAL_GPIO_ReadPin>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d002      	beq.n	8003144 <HAL_GPIO_EXTI_Callback+0xe4>
    {
      keyPressed = 11; //ASCII value of A
 800313e:	4b75      	ldr	r3, [pc, #468]	; (8003314 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8003140:	220b      	movs	r2, #11
 8003142:	701a      	strb	r2, [r3, #0]
    }

    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, 0);
 8003144:	2200      	movs	r2, #0
 8003146:	2110      	movs	r1, #16
 8003148:	4871      	ldr	r0, [pc, #452]	; (8003310 <HAL_GPIO_EXTI_Callback+0x2b0>)
 800314a:	f001 fe29 	bl	8004da0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, 1);
 800314e:	2201      	movs	r2, #1
 8003150:	2120      	movs	r1, #32
 8003152:	486f      	ldr	r0, [pc, #444]	; (8003310 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8003154:	f001 fe24 	bl	8004da0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, 0);
 8003158:	2200      	movs	r2, #0
 800315a:	2140      	movs	r1, #64	; 0x40
 800315c:	486c      	ldr	r0, [pc, #432]	; (8003310 <HAL_GPIO_EXTI_Callback+0x2b0>)
 800315e:	f001 fe1f 	bl	8004da0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, 0);
 8003162:	2200      	movs	r2, #0
 8003164:	2180      	movs	r1, #128	; 0x80
 8003166:	486a      	ldr	r0, [pc, #424]	; (8003310 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8003168:	f001 fe1a 	bl	8004da0 <HAL_GPIO_WritePin>

    if(GPIO_Pin == GPIO_PIN_3 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3))
 800316c:	88fb      	ldrh	r3, [r7, #6]
 800316e:	2b08      	cmp	r3, #8
 8003170:	d10a      	bne.n	8003188 <HAL_GPIO_EXTI_Callback+0x128>
 8003172:	2108      	movs	r1, #8
 8003174:	4865      	ldr	r0, [pc, #404]	; (800330c <HAL_GPIO_EXTI_Callback+0x2ac>)
 8003176:	f001 fdfb 	bl	8004d70 <HAL_GPIO_ReadPin>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d003      	beq.n	8003188 <HAL_GPIO_EXTI_Callback+0x128>
    {
      keyPressed = 15; //ASCII value of #
 8003180:	4b64      	ldr	r3, [pc, #400]	; (8003314 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8003182:	220f      	movs	r2, #15
 8003184:	701a      	strb	r2, [r3, #0]
 8003186:	e02c      	b.n	80031e2 <HAL_GPIO_EXTI_Callback+0x182>
    }
    else if(GPIO_Pin == GPIO_PIN_5 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5))
 8003188:	88fb      	ldrh	r3, [r7, #6]
 800318a:	2b20      	cmp	r3, #32
 800318c:	d10a      	bne.n	80031a4 <HAL_GPIO_EXTI_Callback+0x144>
 800318e:	2120      	movs	r1, #32
 8003190:	485e      	ldr	r0, [pc, #376]	; (800330c <HAL_GPIO_EXTI_Callback+0x2ac>)
 8003192:	f001 fded 	bl	8004d70 <HAL_GPIO_ReadPin>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d003      	beq.n	80031a4 <HAL_GPIO_EXTI_Callback+0x144>
    {
      keyPressed = 9; //ASCII value of 9
 800319c:	4b5d      	ldr	r3, [pc, #372]	; (8003314 <HAL_GPIO_EXTI_Callback+0x2b4>)
 800319e:	2209      	movs	r2, #9
 80031a0:	701a      	strb	r2, [r3, #0]
 80031a2:	e01e      	b.n	80031e2 <HAL_GPIO_EXTI_Callback+0x182>
    }
    else if(GPIO_Pin == GPIO_PIN_8 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))
 80031a4:	88fb      	ldrh	r3, [r7, #6]
 80031a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031aa:	d10b      	bne.n	80031c4 <HAL_GPIO_EXTI_Callback+0x164>
 80031ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80031b0:	4856      	ldr	r0, [pc, #344]	; (800330c <HAL_GPIO_EXTI_Callback+0x2ac>)
 80031b2:	f001 fddd 	bl	8004d70 <HAL_GPIO_ReadPin>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d003      	beq.n	80031c4 <HAL_GPIO_EXTI_Callback+0x164>
    {
      keyPressed = 6; //ASCII value of 6
 80031bc:	4b55      	ldr	r3, [pc, #340]	; (8003314 <HAL_GPIO_EXTI_Callback+0x2b4>)
 80031be:	2206      	movs	r2, #6
 80031c0:	701a      	strb	r2, [r3, #0]
 80031c2:	e00e      	b.n	80031e2 <HAL_GPIO_EXTI_Callback+0x182>
    }
    else if(GPIO_Pin == GPIO_PIN_9 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9))
 80031c4:	88fb      	ldrh	r3, [r7, #6]
 80031c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031ca:	d10a      	bne.n	80031e2 <HAL_GPIO_EXTI_Callback+0x182>
 80031cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80031d0:	484e      	ldr	r0, [pc, #312]	; (800330c <HAL_GPIO_EXTI_Callback+0x2ac>)
 80031d2:	f001 fdcd 	bl	8004d70 <HAL_GPIO_ReadPin>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d002      	beq.n	80031e2 <HAL_GPIO_EXTI_Callback+0x182>
    {
      keyPressed = 3; //ASCII value of 3
 80031dc:	4b4d      	ldr	r3, [pc, #308]	; (8003314 <HAL_GPIO_EXTI_Callback+0x2b4>)
 80031de:	2203      	movs	r2, #3
 80031e0:	701a      	strb	r2, [r3, #0]
    }

    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, 0);
 80031e2:	2200      	movs	r2, #0
 80031e4:	2110      	movs	r1, #16
 80031e6:	484a      	ldr	r0, [pc, #296]	; (8003310 <HAL_GPIO_EXTI_Callback+0x2b0>)
 80031e8:	f001 fdda 	bl	8004da0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, 0);
 80031ec:	2200      	movs	r2, #0
 80031ee:	2120      	movs	r1, #32
 80031f0:	4847      	ldr	r0, [pc, #284]	; (8003310 <HAL_GPIO_EXTI_Callback+0x2b0>)
 80031f2:	f001 fdd5 	bl	8004da0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, 1);
 80031f6:	2201      	movs	r2, #1
 80031f8:	2140      	movs	r1, #64	; 0x40
 80031fa:	4845      	ldr	r0, [pc, #276]	; (8003310 <HAL_GPIO_EXTI_Callback+0x2b0>)
 80031fc:	f001 fdd0 	bl	8004da0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, 0);
 8003200:	2200      	movs	r2, #0
 8003202:	2180      	movs	r1, #128	; 0x80
 8003204:	4842      	ldr	r0, [pc, #264]	; (8003310 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8003206:	f001 fdcb 	bl	8004da0 <HAL_GPIO_WritePin>
    if(GPIO_Pin == GPIO_PIN_3 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3))
 800320a:	88fb      	ldrh	r3, [r7, #6]
 800320c:	2b08      	cmp	r3, #8
 800320e:	d10a      	bne.n	8003226 <HAL_GPIO_EXTI_Callback+0x1c6>
 8003210:	2108      	movs	r1, #8
 8003212:	483e      	ldr	r0, [pc, #248]	; (800330c <HAL_GPIO_EXTI_Callback+0x2ac>)
 8003214:	f001 fdac 	bl	8004d70 <HAL_GPIO_ReadPin>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d003      	beq.n	8003226 <HAL_GPIO_EXTI_Callback+0x1c6>
    {
      keyPressed = 16; //ASCII value of 0
 800321e:	4b3d      	ldr	r3, [pc, #244]	; (8003314 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8003220:	2210      	movs	r2, #16
 8003222:	701a      	strb	r2, [r3, #0]
 8003224:	e02c      	b.n	8003280 <HAL_GPIO_EXTI_Callback+0x220>
    }
    else if(GPIO_Pin == GPIO_PIN_5 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5))
 8003226:	88fb      	ldrh	r3, [r7, #6]
 8003228:	2b20      	cmp	r3, #32
 800322a:	d10a      	bne.n	8003242 <HAL_GPIO_EXTI_Callback+0x1e2>
 800322c:	2120      	movs	r1, #32
 800322e:	4837      	ldr	r0, [pc, #220]	; (800330c <HAL_GPIO_EXTI_Callback+0x2ac>)
 8003230:	f001 fd9e 	bl	8004d70 <HAL_GPIO_ReadPin>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d003      	beq.n	8003242 <HAL_GPIO_EXTI_Callback+0x1e2>
    {
      keyPressed = 8; //ASCII value of 8
 800323a:	4b36      	ldr	r3, [pc, #216]	; (8003314 <HAL_GPIO_EXTI_Callback+0x2b4>)
 800323c:	2208      	movs	r2, #8
 800323e:	701a      	strb	r2, [r3, #0]
 8003240:	e01e      	b.n	8003280 <HAL_GPIO_EXTI_Callback+0x220>
    }
    else if(GPIO_Pin == GPIO_PIN_8 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))
 8003242:	88fb      	ldrh	r3, [r7, #6]
 8003244:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003248:	d10b      	bne.n	8003262 <HAL_GPIO_EXTI_Callback+0x202>
 800324a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800324e:	482f      	ldr	r0, [pc, #188]	; (800330c <HAL_GPIO_EXTI_Callback+0x2ac>)
 8003250:	f001 fd8e 	bl	8004d70 <HAL_GPIO_ReadPin>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d003      	beq.n	8003262 <HAL_GPIO_EXTI_Callback+0x202>
    {
      keyPressed = 5; //ASCII value of 5
 800325a:	4b2e      	ldr	r3, [pc, #184]	; (8003314 <HAL_GPIO_EXTI_Callback+0x2b4>)
 800325c:	2205      	movs	r2, #5
 800325e:	701a      	strb	r2, [r3, #0]
 8003260:	e00e      	b.n	8003280 <HAL_GPIO_EXTI_Callback+0x220>
    }
    else if(GPIO_Pin == GPIO_PIN_9 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9))
 8003262:	88fb      	ldrh	r3, [r7, #6]
 8003264:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003268:	d10a      	bne.n	8003280 <HAL_GPIO_EXTI_Callback+0x220>
 800326a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800326e:	4827      	ldr	r0, [pc, #156]	; (800330c <HAL_GPIO_EXTI_Callback+0x2ac>)
 8003270:	f001 fd7e 	bl	8004d70 <HAL_GPIO_ReadPin>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d002      	beq.n	8003280 <HAL_GPIO_EXTI_Callback+0x220>
    {
      keyPressed = 2; //ASCII value of 2
 800327a:	4b26      	ldr	r3, [pc, #152]	; (8003314 <HAL_GPIO_EXTI_Callback+0x2b4>)
 800327c:	2202      	movs	r2, #2
 800327e:	701a      	strb	r2, [r3, #0]
    }

    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, 0);
 8003280:	2200      	movs	r2, #0
 8003282:	2110      	movs	r1, #16
 8003284:	4822      	ldr	r0, [pc, #136]	; (8003310 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8003286:	f001 fd8b 	bl	8004da0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, 0);
 800328a:	2200      	movs	r2, #0
 800328c:	2120      	movs	r1, #32
 800328e:	4820      	ldr	r0, [pc, #128]	; (8003310 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8003290:	f001 fd86 	bl	8004da0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, 0);
 8003294:	2200      	movs	r2, #0
 8003296:	2140      	movs	r1, #64	; 0x40
 8003298:	481d      	ldr	r0, [pc, #116]	; (8003310 <HAL_GPIO_EXTI_Callback+0x2b0>)
 800329a:	f001 fd81 	bl	8004da0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, 1);
 800329e:	2201      	movs	r2, #1
 80032a0:	2180      	movs	r1, #128	; 0x80
 80032a2:	481b      	ldr	r0, [pc, #108]	; (8003310 <HAL_GPIO_EXTI_Callback+0x2b0>)
 80032a4:	f001 fd7c 	bl	8004da0 <HAL_GPIO_WritePin>
    if(GPIO_Pin == GPIO_PIN_3 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3))
 80032a8:	88fb      	ldrh	r3, [r7, #6]
 80032aa:	2b08      	cmp	r3, #8
 80032ac:	d10a      	bne.n	80032c4 <HAL_GPIO_EXTI_Callback+0x264>
 80032ae:	2108      	movs	r1, #8
 80032b0:	4816      	ldr	r0, [pc, #88]	; (800330c <HAL_GPIO_EXTI_Callback+0x2ac>)
 80032b2:	f001 fd5d 	bl	8004d70 <HAL_GPIO_ReadPin>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d003      	beq.n	80032c4 <HAL_GPIO_EXTI_Callback+0x264>
    {
      keyPressed = 17; //ASCII value of *
 80032bc:	4b15      	ldr	r3, [pc, #84]	; (8003314 <HAL_GPIO_EXTI_Callback+0x2b4>)
 80032be:	2211      	movs	r2, #17
 80032c0:	701a      	strb	r2, [r3, #0]
 80032c2:	e038      	b.n	8003336 <HAL_GPIO_EXTI_Callback+0x2d6>
    }
    else if(GPIO_Pin == GPIO_PIN_5 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5))
 80032c4:	88fb      	ldrh	r3, [r7, #6]
 80032c6:	2b20      	cmp	r3, #32
 80032c8:	d10a      	bne.n	80032e0 <HAL_GPIO_EXTI_Callback+0x280>
 80032ca:	2120      	movs	r1, #32
 80032cc:	480f      	ldr	r0, [pc, #60]	; (800330c <HAL_GPIO_EXTI_Callback+0x2ac>)
 80032ce:	f001 fd4f 	bl	8004d70 <HAL_GPIO_ReadPin>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d003      	beq.n	80032e0 <HAL_GPIO_EXTI_Callback+0x280>
    {
      keyPressed = 7; //ASCII value of 7
 80032d8:	4b0e      	ldr	r3, [pc, #56]	; (8003314 <HAL_GPIO_EXTI_Callback+0x2b4>)
 80032da:	2207      	movs	r2, #7
 80032dc:	701a      	strb	r2, [r3, #0]
 80032de:	e02a      	b.n	8003336 <HAL_GPIO_EXTI_Callback+0x2d6>
    }
    else if(GPIO_Pin == GPIO_PIN_8 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))
 80032e0:	88fb      	ldrh	r3, [r7, #6]
 80032e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032e6:	d117      	bne.n	8003318 <HAL_GPIO_EXTI_Callback+0x2b8>
 80032e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80032ec:	4807      	ldr	r0, [pc, #28]	; (800330c <HAL_GPIO_EXTI_Callback+0x2ac>)
 80032ee:	f001 fd3f 	bl	8004d70 <HAL_GPIO_ReadPin>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d00f      	beq.n	8003318 <HAL_GPIO_EXTI_Callback+0x2b8>
    {
      keyPressed = 4; //ASCII value of 4
 80032f8:	4b06      	ldr	r3, [pc, #24]	; (8003314 <HAL_GPIO_EXTI_Callback+0x2b4>)
 80032fa:	2204      	movs	r2, #4
 80032fc:	701a      	strb	r2, [r3, #0]
 80032fe:	e01a      	b.n	8003336 <HAL_GPIO_EXTI_Callback+0x2d6>
 8003300:	20000a48 	.word	0x20000a48
 8003304:	20000a44 	.word	0x20000a44
 8003308:	20000a30 	.word	0x20000a30
 800330c:	40020400 	.word	0x40020400
 8003310:	40020c00 	.word	0x40020c00
 8003314:	20000a4c 	.word	0x20000a4c
    }
    else if(GPIO_Pin == GPIO_PIN_9 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9))
 8003318:	88fb      	ldrh	r3, [r7, #6]
 800331a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800331e:	d10a      	bne.n	8003336 <HAL_GPIO_EXTI_Callback+0x2d6>
 8003320:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003324:	4819      	ldr	r0, [pc, #100]	; (800338c <HAL_GPIO_EXTI_Callback+0x32c>)
 8003326:	f001 fd23 	bl	8004d70 <HAL_GPIO_ReadPin>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d002      	beq.n	8003336 <HAL_GPIO_EXTI_Callback+0x2d6>
    {
      keyPressed = 1; //ASCII value of 1
 8003330:	4b17      	ldr	r3, [pc, #92]	; (8003390 <HAL_GPIO_EXTI_Callback+0x330>)
 8003332:	2201      	movs	r2, #1
 8003334:	701a      	strb	r2, [r3, #0]
    }
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, 1);
 8003336:	2201      	movs	r2, #1
 8003338:	2110      	movs	r1, #16
 800333a:	4816      	ldr	r0, [pc, #88]	; (8003394 <HAL_GPIO_EXTI_Callback+0x334>)
 800333c:	f001 fd30 	bl	8004da0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, 1);
 8003340:	2201      	movs	r2, #1
 8003342:	2120      	movs	r1, #32
 8003344:	4813      	ldr	r0, [pc, #76]	; (8003394 <HAL_GPIO_EXTI_Callback+0x334>)
 8003346:	f001 fd2b 	bl	8004da0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, 1);
 800334a:	2201      	movs	r2, #1
 800334c:	2140      	movs	r1, #64	; 0x40
 800334e:	4811      	ldr	r0, [pc, #68]	; (8003394 <HAL_GPIO_EXTI_Callback+0x334>)
 8003350:	f001 fd26 	bl	8004da0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, 1);
 8003354:	2201      	movs	r2, #1
 8003356:	2180      	movs	r1, #128	; 0x80
 8003358:	480e      	ldr	r0, [pc, #56]	; (8003394 <HAL_GPIO_EXTI_Callback+0x334>)
 800335a:	f001 fd21 	bl	8004da0 <HAL_GPIO_WritePin>
    /*Configure GPIO pins : PB6 PB7 PB8 PB9 back to EXTI*/
    GPIO_InitStructPrivate.Mode = GPIO_MODE_IT_RISING;
 800335e:	4b0e      	ldr	r3, [pc, #56]	; (8003398 <HAL_GPIO_EXTI_Callback+0x338>)
 8003360:	f44f 1288 	mov.w	r2, #1114112	; 0x110000
 8003364:	605a      	str	r2, [r3, #4]
    GPIO_InitStructPrivate.Pull = GPIO_PULLDOWN;
 8003366:	4b0c      	ldr	r3, [pc, #48]	; (8003398 <HAL_GPIO_EXTI_Callback+0x338>)
 8003368:	2202      	movs	r2, #2
 800336a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructPrivate);
 800336c:	490a      	ldr	r1, [pc, #40]	; (8003398 <HAL_GPIO_EXTI_Callback+0x338>)
 800336e:	4807      	ldr	r0, [pc, #28]	; (800338c <HAL_GPIO_EXTI_Callback+0x32c>)
 8003370:	f001 fb62 	bl	8004a38 <HAL_GPIO_Init>
    //printf("nilai key pad %d\r\n", keyPressed);
    previousMillis = currentMillis;
 8003374:	4b09      	ldr	r3, [pc, #36]	; (800339c <HAL_GPIO_EXTI_Callback+0x33c>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a09      	ldr	r2, [pc, #36]	; (80033a0 <HAL_GPIO_EXTI_Callback+0x340>)
 800337a:	6013      	str	r3, [r2, #0]
    key_kondisi = true;
 800337c:	4b09      	ldr	r3, [pc, #36]	; (80033a4 <HAL_GPIO_EXTI_Callback+0x344>)
 800337e:	2201      	movs	r2, #1
 8003380:	701a      	strb	r2, [r3, #0]
  }
}
 8003382:	bf00      	nop
 8003384:	3708      	adds	r7, #8
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	40020400 	.word	0x40020400
 8003390:	20000a4c 	.word	0x20000a4c
 8003394:	40020c00 	.word	0x40020c00
 8003398:	20000a30 	.word	0x20000a30
 800339c:	20000a48 	.word	0x20000a48
 80033a0:	20000a44 	.word	0x20000a44
 80033a4:	20000a55 	.word	0x20000a55

080033a8 <get_keypad>:
/**Fungsi ini digunakan untuk mendapatkan karakter dari nilai keypad yangdigunakan
  */
void get_keypad(uint8_t keypadin){
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	4603      	mov	r3, r0
 80033b0:	71fb      	strb	r3, [r7, #7]
	if(key_kondisi == true){
 80033b2:	4b97      	ldr	r3, [pc, #604]	; (8003610 <get_keypad+0x268>)
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	f000 8126 	beq.w	8003608 <get_keypad+0x260>
		if(keypadin != keyPressed_prev || counter >= 5){
 80033bc:	4b95      	ldr	r3, [pc, #596]	; (8003614 <get_keypad+0x26c>)
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	79fa      	ldrb	r2, [r7, #7]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d103      	bne.n	80033ce <get_keypad+0x26>
 80033c6:	4b94      	ldr	r3, [pc, #592]	; (8003618 <get_keypad+0x270>)
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	2b04      	cmp	r3, #4
 80033cc:	d902      	bls.n	80033d4 <get_keypad+0x2c>
	  	  counter = 0;
 80033ce:	4b92      	ldr	r3, [pc, #584]	; (8003618 <get_keypad+0x270>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	701a      	strb	r2, [r3, #0]
	    }
		if(keypadin == 1){
 80033d4:	79fb      	ldrb	r3, [r7, #7]
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d114      	bne.n	8003404 <get_keypad+0x5c>
			counter ++;
 80033da:	4b8f      	ldr	r3, [pc, #572]	; (8003618 <get_keypad+0x270>)
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	3301      	adds	r3, #1
 80033e0:	b2da      	uxtb	r2, r3
 80033e2:	4b8d      	ldr	r3, [pc, #564]	; (8003618 <get_keypad+0x270>)
 80033e4:	701a      	strb	r2, [r3, #0]
			strcpy((uint8_t*)key, " 1abc");
 80033e6:	4b8d      	ldr	r3, [pc, #564]	; (800361c <get_keypad+0x274>)
 80033e8:	4a8d      	ldr	r2, [pc, #564]	; (8003620 <get_keypad+0x278>)
 80033ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80033ee:	6018      	str	r0, [r3, #0]
 80033f0:	3304      	adds	r3, #4
 80033f2:	8019      	strh	r1, [r3, #0]
		     keypad = key[counter];
 80033f4:	4b88      	ldr	r3, [pc, #544]	; (8003618 <get_keypad+0x270>)
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	461a      	mov	r2, r3
 80033fa:	4b88      	ldr	r3, [pc, #544]	; (800361c <get_keypad+0x274>)
 80033fc:	5c9a      	ldrb	r2, [r3, r2]
 80033fe:	4b89      	ldr	r3, [pc, #548]	; (8003624 <get_keypad+0x27c>)
 8003400:	701a      	strb	r2, [r3, #0]
 8003402:	e0f1      	b.n	80035e8 <get_keypad+0x240>
		}else if(keypadin == 2){
 8003404:	79fb      	ldrb	r3, [r7, #7]
 8003406:	2b02      	cmp	r3, #2
 8003408:	d114      	bne.n	8003434 <get_keypad+0x8c>
			counter ++;
 800340a:	4b83      	ldr	r3, [pc, #524]	; (8003618 <get_keypad+0x270>)
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	3301      	adds	r3, #1
 8003410:	b2da      	uxtb	r2, r3
 8003412:	4b81      	ldr	r3, [pc, #516]	; (8003618 <get_keypad+0x270>)
 8003414:	701a      	strb	r2, [r3, #0]
			strcpy((uint8_t*)key, " 2def");
 8003416:	4b81      	ldr	r3, [pc, #516]	; (800361c <get_keypad+0x274>)
 8003418:	4a83      	ldr	r2, [pc, #524]	; (8003628 <get_keypad+0x280>)
 800341a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800341e:	6018      	str	r0, [r3, #0]
 8003420:	3304      	adds	r3, #4
 8003422:	8019      	strh	r1, [r3, #0]
		     keypad = key[counter];
 8003424:	4b7c      	ldr	r3, [pc, #496]	; (8003618 <get_keypad+0x270>)
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	461a      	mov	r2, r3
 800342a:	4b7c      	ldr	r3, [pc, #496]	; (800361c <get_keypad+0x274>)
 800342c:	5c9a      	ldrb	r2, [r3, r2]
 800342e:	4b7d      	ldr	r3, [pc, #500]	; (8003624 <get_keypad+0x27c>)
 8003430:	701a      	strb	r2, [r3, #0]
 8003432:	e0d9      	b.n	80035e8 <get_keypad+0x240>
		}else if(keypadin == 3){
 8003434:	79fb      	ldrb	r3, [r7, #7]
 8003436:	2b03      	cmp	r3, #3
 8003438:	d114      	bne.n	8003464 <get_keypad+0xbc>
			counter ++;
 800343a:	4b77      	ldr	r3, [pc, #476]	; (8003618 <get_keypad+0x270>)
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	3301      	adds	r3, #1
 8003440:	b2da      	uxtb	r2, r3
 8003442:	4b75      	ldr	r3, [pc, #468]	; (8003618 <get_keypad+0x270>)
 8003444:	701a      	strb	r2, [r3, #0]
			strcpy((uint8_t*)key, " 3ghi");
 8003446:	4b75      	ldr	r3, [pc, #468]	; (800361c <get_keypad+0x274>)
 8003448:	4a78      	ldr	r2, [pc, #480]	; (800362c <get_keypad+0x284>)
 800344a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800344e:	6018      	str	r0, [r3, #0]
 8003450:	3304      	adds	r3, #4
 8003452:	8019      	strh	r1, [r3, #0]
		     keypad = key[counter];
 8003454:	4b70      	ldr	r3, [pc, #448]	; (8003618 <get_keypad+0x270>)
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	461a      	mov	r2, r3
 800345a:	4b70      	ldr	r3, [pc, #448]	; (800361c <get_keypad+0x274>)
 800345c:	5c9a      	ldrb	r2, [r3, r2]
 800345e:	4b71      	ldr	r3, [pc, #452]	; (8003624 <get_keypad+0x27c>)
 8003460:	701a      	strb	r2, [r3, #0]
 8003462:	e0c1      	b.n	80035e8 <get_keypad+0x240>
		}else if(keypadin == 4){
 8003464:	79fb      	ldrb	r3, [r7, #7]
 8003466:	2b04      	cmp	r3, #4
 8003468:	d114      	bne.n	8003494 <get_keypad+0xec>
			counter ++;
 800346a:	4b6b      	ldr	r3, [pc, #428]	; (8003618 <get_keypad+0x270>)
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	3301      	adds	r3, #1
 8003470:	b2da      	uxtb	r2, r3
 8003472:	4b69      	ldr	r3, [pc, #420]	; (8003618 <get_keypad+0x270>)
 8003474:	701a      	strb	r2, [r3, #0]
			strcpy((uint8_t*)key, " 4jkl");
 8003476:	4b69      	ldr	r3, [pc, #420]	; (800361c <get_keypad+0x274>)
 8003478:	4a6d      	ldr	r2, [pc, #436]	; (8003630 <get_keypad+0x288>)
 800347a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800347e:	6018      	str	r0, [r3, #0]
 8003480:	3304      	adds	r3, #4
 8003482:	8019      	strh	r1, [r3, #0]
		     keypad = key[counter];
 8003484:	4b64      	ldr	r3, [pc, #400]	; (8003618 <get_keypad+0x270>)
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	461a      	mov	r2, r3
 800348a:	4b64      	ldr	r3, [pc, #400]	; (800361c <get_keypad+0x274>)
 800348c:	5c9a      	ldrb	r2, [r3, r2]
 800348e:	4b65      	ldr	r3, [pc, #404]	; (8003624 <get_keypad+0x27c>)
 8003490:	701a      	strb	r2, [r3, #0]
 8003492:	e0a9      	b.n	80035e8 <get_keypad+0x240>
		}else if(keypadin == 5){
 8003494:	79fb      	ldrb	r3, [r7, #7]
 8003496:	2b05      	cmp	r3, #5
 8003498:	d114      	bne.n	80034c4 <get_keypad+0x11c>
			counter ++;
 800349a:	4b5f      	ldr	r3, [pc, #380]	; (8003618 <get_keypad+0x270>)
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	3301      	adds	r3, #1
 80034a0:	b2da      	uxtb	r2, r3
 80034a2:	4b5d      	ldr	r3, [pc, #372]	; (8003618 <get_keypad+0x270>)
 80034a4:	701a      	strb	r2, [r3, #0]
			strcpy((uint8_t*)key, " 5mno");
 80034a6:	4b5d      	ldr	r3, [pc, #372]	; (800361c <get_keypad+0x274>)
 80034a8:	4a62      	ldr	r2, [pc, #392]	; (8003634 <get_keypad+0x28c>)
 80034aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80034ae:	6018      	str	r0, [r3, #0]
 80034b0:	3304      	adds	r3, #4
 80034b2:	8019      	strh	r1, [r3, #0]
		     keypad = key[counter];
 80034b4:	4b58      	ldr	r3, [pc, #352]	; (8003618 <get_keypad+0x270>)
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	461a      	mov	r2, r3
 80034ba:	4b58      	ldr	r3, [pc, #352]	; (800361c <get_keypad+0x274>)
 80034bc:	5c9a      	ldrb	r2, [r3, r2]
 80034be:	4b59      	ldr	r3, [pc, #356]	; (8003624 <get_keypad+0x27c>)
 80034c0:	701a      	strb	r2, [r3, #0]
 80034c2:	e091      	b.n	80035e8 <get_keypad+0x240>
		}else if(keypadin == 6){
 80034c4:	79fb      	ldrb	r3, [r7, #7]
 80034c6:	2b06      	cmp	r3, #6
 80034c8:	d114      	bne.n	80034f4 <get_keypad+0x14c>
			counter ++;
 80034ca:	4b53      	ldr	r3, [pc, #332]	; (8003618 <get_keypad+0x270>)
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	3301      	adds	r3, #1
 80034d0:	b2da      	uxtb	r2, r3
 80034d2:	4b51      	ldr	r3, [pc, #324]	; (8003618 <get_keypad+0x270>)
 80034d4:	701a      	strb	r2, [r3, #0]
			strcpy((uint8_t*)key, " 6pqr");
 80034d6:	4b51      	ldr	r3, [pc, #324]	; (800361c <get_keypad+0x274>)
 80034d8:	4a57      	ldr	r2, [pc, #348]	; (8003638 <get_keypad+0x290>)
 80034da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80034de:	6018      	str	r0, [r3, #0]
 80034e0:	3304      	adds	r3, #4
 80034e2:	8019      	strh	r1, [r3, #0]
		     keypad = key[counter];
 80034e4:	4b4c      	ldr	r3, [pc, #304]	; (8003618 <get_keypad+0x270>)
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	461a      	mov	r2, r3
 80034ea:	4b4c      	ldr	r3, [pc, #304]	; (800361c <get_keypad+0x274>)
 80034ec:	5c9a      	ldrb	r2, [r3, r2]
 80034ee:	4b4d      	ldr	r3, [pc, #308]	; (8003624 <get_keypad+0x27c>)
 80034f0:	701a      	strb	r2, [r3, #0]
 80034f2:	e079      	b.n	80035e8 <get_keypad+0x240>
		}else if(keypadin == 7){
 80034f4:	79fb      	ldrb	r3, [r7, #7]
 80034f6:	2b07      	cmp	r3, #7
 80034f8:	d114      	bne.n	8003524 <get_keypad+0x17c>
			counter ++;
 80034fa:	4b47      	ldr	r3, [pc, #284]	; (8003618 <get_keypad+0x270>)
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	3301      	adds	r3, #1
 8003500:	b2da      	uxtb	r2, r3
 8003502:	4b45      	ldr	r3, [pc, #276]	; (8003618 <get_keypad+0x270>)
 8003504:	701a      	strb	r2, [r3, #0]
			strcpy((uint8_t*)key, " 7stu");
 8003506:	4b45      	ldr	r3, [pc, #276]	; (800361c <get_keypad+0x274>)
 8003508:	4a4c      	ldr	r2, [pc, #304]	; (800363c <get_keypad+0x294>)
 800350a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800350e:	6018      	str	r0, [r3, #0]
 8003510:	3304      	adds	r3, #4
 8003512:	8019      	strh	r1, [r3, #0]
		     keypad = key[counter];
 8003514:	4b40      	ldr	r3, [pc, #256]	; (8003618 <get_keypad+0x270>)
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	461a      	mov	r2, r3
 800351a:	4b40      	ldr	r3, [pc, #256]	; (800361c <get_keypad+0x274>)
 800351c:	5c9a      	ldrb	r2, [r3, r2]
 800351e:	4b41      	ldr	r3, [pc, #260]	; (8003624 <get_keypad+0x27c>)
 8003520:	701a      	strb	r2, [r3, #0]
 8003522:	e061      	b.n	80035e8 <get_keypad+0x240>
		}else if(keypadin == 8){
 8003524:	79fb      	ldrb	r3, [r7, #7]
 8003526:	2b08      	cmp	r3, #8
 8003528:	d114      	bne.n	8003554 <get_keypad+0x1ac>
			counter ++;
 800352a:	4b3b      	ldr	r3, [pc, #236]	; (8003618 <get_keypad+0x270>)
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	3301      	adds	r3, #1
 8003530:	b2da      	uxtb	r2, r3
 8003532:	4b39      	ldr	r3, [pc, #228]	; (8003618 <get_keypad+0x270>)
 8003534:	701a      	strb	r2, [r3, #0]
			strcpy((uint8_t*)key, " 8vwx");
 8003536:	4b39      	ldr	r3, [pc, #228]	; (800361c <get_keypad+0x274>)
 8003538:	4a41      	ldr	r2, [pc, #260]	; (8003640 <get_keypad+0x298>)
 800353a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800353e:	6018      	str	r0, [r3, #0]
 8003540:	3304      	adds	r3, #4
 8003542:	8019      	strh	r1, [r3, #0]
		     keypad = key[counter];
 8003544:	4b34      	ldr	r3, [pc, #208]	; (8003618 <get_keypad+0x270>)
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	461a      	mov	r2, r3
 800354a:	4b34      	ldr	r3, [pc, #208]	; (800361c <get_keypad+0x274>)
 800354c:	5c9a      	ldrb	r2, [r3, r2]
 800354e:	4b35      	ldr	r3, [pc, #212]	; (8003624 <get_keypad+0x27c>)
 8003550:	701a      	strb	r2, [r3, #0]
 8003552:	e049      	b.n	80035e8 <get_keypad+0x240>
		}else if(keypadin == 9){
 8003554:	79fb      	ldrb	r3, [r7, #7]
 8003556:	2b09      	cmp	r3, #9
 8003558:	d114      	bne.n	8003584 <get_keypad+0x1dc>
			counter ++;
 800355a:	4b2f      	ldr	r3, [pc, #188]	; (8003618 <get_keypad+0x270>)
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	3301      	adds	r3, #1
 8003560:	b2da      	uxtb	r2, r3
 8003562:	4b2d      	ldr	r3, [pc, #180]	; (8003618 <get_keypad+0x270>)
 8003564:	701a      	strb	r2, [r3, #0]
			strcpy((uint8_t*)key, " 4yz");
 8003566:	4b2d      	ldr	r3, [pc, #180]	; (800361c <get_keypad+0x274>)
 8003568:	4a36      	ldr	r2, [pc, #216]	; (8003644 <get_keypad+0x29c>)
 800356a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800356e:	6018      	str	r0, [r3, #0]
 8003570:	3304      	adds	r3, #4
 8003572:	7019      	strb	r1, [r3, #0]
		     keypad = key[counter];
 8003574:	4b28      	ldr	r3, [pc, #160]	; (8003618 <get_keypad+0x270>)
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	461a      	mov	r2, r3
 800357a:	4b28      	ldr	r3, [pc, #160]	; (800361c <get_keypad+0x274>)
 800357c:	5c9a      	ldrb	r2, [r3, r2]
 800357e:	4b29      	ldr	r3, [pc, #164]	; (8003624 <get_keypad+0x27c>)
 8003580:	701a      	strb	r2, [r3, #0]
 8003582:	e031      	b.n	80035e8 <get_keypad+0x240>
		}else if(keypadin == 11){
 8003584:	79fb      	ldrb	r3, [r7, #7]
 8003586:	2b0b      	cmp	r3, #11
 8003588:	d10d      	bne.n	80035a6 <get_keypad+0x1fe>
			counter = 0;
 800358a:	4b23      	ldr	r3, [pc, #140]	; (8003618 <get_keypad+0x270>)
 800358c:	2200      	movs	r2, #0
 800358e:	701a      	strb	r2, [r3, #0]
			strcpy((uint8_t*)key, "D"); //delete
 8003590:	4b22      	ldr	r3, [pc, #136]	; (800361c <get_keypad+0x274>)
 8003592:	2244      	movs	r2, #68	; 0x44
 8003594:	801a      	strh	r2, [r3, #0]
		     keypad = key[counter];
 8003596:	4b20      	ldr	r3, [pc, #128]	; (8003618 <get_keypad+0x270>)
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	461a      	mov	r2, r3
 800359c:	4b1f      	ldr	r3, [pc, #124]	; (800361c <get_keypad+0x274>)
 800359e:	5c9a      	ldrb	r2, [r3, r2]
 80035a0:	4b20      	ldr	r3, [pc, #128]	; (8003624 <get_keypad+0x27c>)
 80035a2:	701a      	strb	r2, [r3, #0]
 80035a4:	e020      	b.n	80035e8 <get_keypad+0x240>
		}else if(keypadin == 12){
 80035a6:	79fb      	ldrb	r3, [r7, #7]
 80035a8:	2b0c      	cmp	r3, #12
 80035aa:	d10d      	bne.n	80035c8 <get_keypad+0x220>
			counter = 0;
 80035ac:	4b1a      	ldr	r3, [pc, #104]	; (8003618 <get_keypad+0x270>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	701a      	strb	r2, [r3, #0]
			strcpy((uint8_t*)key, "O"); //oke / KIRIM
 80035b2:	4b1a      	ldr	r3, [pc, #104]	; (800361c <get_keypad+0x274>)
 80035b4:	224f      	movs	r2, #79	; 0x4f
 80035b6:	801a      	strh	r2, [r3, #0]
		     keypad = key[counter];
 80035b8:	4b17      	ldr	r3, [pc, #92]	; (8003618 <get_keypad+0x270>)
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	461a      	mov	r2, r3
 80035be:	4b17      	ldr	r3, [pc, #92]	; (800361c <get_keypad+0x274>)
 80035c0:	5c9a      	ldrb	r2, [r3, r2]
 80035c2:	4b18      	ldr	r3, [pc, #96]	; (8003624 <get_keypad+0x27c>)
 80035c4:	701a      	strb	r2, [r3, #0]
 80035c6:	e00f      	b.n	80035e8 <get_keypad+0x240>
		}else if(keypadin == 13){
 80035c8:	79fb      	ldrb	r3, [r7, #7]
 80035ca:	2b0d      	cmp	r3, #13
 80035cc:	d10c      	bne.n	80035e8 <get_keypad+0x240>
			counter = 0;
 80035ce:	4b12      	ldr	r3, [pc, #72]	; (8003618 <get_keypad+0x270>)
 80035d0:	2200      	movs	r2, #0
 80035d2:	701a      	strb	r2, [r3, #0]
			strcpy((uint8_t*)key, " "); //spasi
 80035d4:	4b11      	ldr	r3, [pc, #68]	; (800361c <get_keypad+0x274>)
 80035d6:	2220      	movs	r2, #32
 80035d8:	801a      	strh	r2, [r3, #0]
		     keypad = key[counter];
 80035da:	4b0f      	ldr	r3, [pc, #60]	; (8003618 <get_keypad+0x270>)
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	461a      	mov	r2, r3
 80035e0:	4b0e      	ldr	r3, [pc, #56]	; (800361c <get_keypad+0x274>)
 80035e2:	5c9a      	ldrb	r2, [r3, r2]
 80035e4:	4b0f      	ldr	r3, [pc, #60]	; (8003624 <get_keypad+0x27c>)
 80035e6:	701a      	strb	r2, [r3, #0]
		}
		printf("key %c\r\n", keypad);
 80035e8:	4b0e      	ldr	r3, [pc, #56]	; (8003624 <get_keypad+0x27c>)
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	4619      	mov	r1, r3
 80035ee:	4816      	ldr	r0, [pc, #88]	; (8003648 <get_keypad+0x2a0>)
 80035f0:	f006 f9a2 	bl	8009938 <iprintf>
		keyPressed_prev = keypadin;
 80035f4:	4a07      	ldr	r2, [pc, #28]	; (8003614 <get_keypad+0x26c>)
 80035f6:	79fb      	ldrb	r3, [r7, #7]
 80035f8:	7013      	strb	r3, [r2, #0]
		key_kondisi = false;
 80035fa:	4b05      	ldr	r3, [pc, #20]	; (8003610 <get_keypad+0x268>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	701a      	strb	r2, [r3, #0]
		led_reaction(100,100);
 8003600:	2164      	movs	r1, #100	; 0x64
 8003602:	2064      	movs	r0, #100	; 0x64
 8003604:	f000 f822 	bl	800364c <led_reaction>
	  }
}
 8003608:	bf00      	nop
 800360a:	3708      	adds	r7, #8
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}
 8003610:	20000a55 	.word	0x20000a55
 8003614:	20000a4d 	.word	0x20000a4d
 8003618:	20000a4e 	.word	0x20000a4e
 800361c:	20000a50 	.word	0x20000a50
 8003620:	0800e274 	.word	0x0800e274
 8003624:	20000a4f 	.word	0x20000a4f
 8003628:	0800e27c 	.word	0x0800e27c
 800362c:	0800e284 	.word	0x0800e284
 8003630:	0800e28c 	.word	0x0800e28c
 8003634:	0800e294 	.word	0x0800e294
 8003638:	0800e29c 	.word	0x0800e29c
 800363c:	0800e2a4 	.word	0x0800e2a4
 8003640:	0800e2ac 	.word	0x0800e2ac
 8003644:	0800e2b4 	.word	0x0800e2b4
 8003648:	0800e2bc 	.word	0x0800e2bc

0800364c <led_reaction>:
/**Fungsi ini LED Blink untuk indikasi
  */
void led_reaction(uint16_t led_time, uint16_t time_loop){
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
 8003652:	4603      	mov	r3, r0
 8003654:	460a      	mov	r2, r1
 8003656:	80fb      	strh	r3, [r7, #6]
 8003658:	4613      	mov	r3, r2
 800365a:	80bb      	strh	r3, [r7, #4]
	led_loop_on = HAL_GetTick();
 800365c:	f000 fca8 	bl	8003fb0 <HAL_GetTick>
 8003660:	4603      	mov	r3, r0
 8003662:	4a29      	ldr	r2, [pc, #164]	; (8003708 <led_reaction+0xbc>)
 8003664:	6013      	str	r3, [r2, #0]
	while ((unsigned long)HAL_GetTick() - led_loop_on <= time_loop){
 8003666:	e041      	b.n	80036ec <led_reaction+0xa0>
		if (HAL_GetTick() - led_prev_on >= led_time){
 8003668:	f000 fca2 	bl	8003fb0 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	4b27      	ldr	r3, [pc, #156]	; (800370c <led_reaction+0xc0>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	1ad2      	subs	r2, r2, r3
 8003674:	88fb      	ldrh	r3, [r7, #6]
 8003676:	429a      	cmp	r2, r3
 8003678:	d338      	bcc.n	80036ec <led_reaction+0xa0>
			led_prev_on = HAL_GetTick();
 800367a:	f000 fc99 	bl	8003fb0 <HAL_GetTick>
 800367e:	4603      	mov	r3, r0
 8003680:	4a22      	ldr	r2, [pc, #136]	; (800370c <led_reaction+0xc0>)
 8003682:	6013      	str	r3, [r2, #0]
			if (led_hijau_kuning == 0){
 8003684:	4b22      	ldr	r3, [pc, #136]	; (8003710 <led_reaction+0xc4>)
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	f083 0301 	eor.w	r3, r3, #1
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b00      	cmp	r3, #0
 8003690:	d003      	beq.n	800369a <led_reaction+0x4e>
				led_hijau_kuning = 1;
 8003692:	4b1f      	ldr	r3, [pc, #124]	; (8003710 <led_reaction+0xc4>)
 8003694:	2201      	movs	r2, #1
 8003696:	701a      	strb	r2, [r3, #0]
 8003698:	e002      	b.n	80036a0 <led_reaction+0x54>
			} else {
				led_hijau_kuning = 0;
 800369a:	4b1d      	ldr	r3, [pc, #116]	; (8003710 <led_reaction+0xc4>)
 800369c:	2200      	movs	r2, #0
 800369e:	701a      	strb	r2, [r3, #0]
			}
			if (led_merah == 0){
 80036a0:	4b1c      	ldr	r3, [pc, #112]	; (8003714 <led_reaction+0xc8>)
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	f083 0301 	eor.w	r3, r3, #1
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d003      	beq.n	80036b6 <led_reaction+0x6a>
				led_merah = 1;
 80036ae:	4b19      	ldr	r3, [pc, #100]	; (8003714 <led_reaction+0xc8>)
 80036b0:	2201      	movs	r2, #1
 80036b2:	701a      	strb	r2, [r3, #0]
 80036b4:	e002      	b.n	80036bc <led_reaction+0x70>
			} else {
				led_merah = 0;
 80036b6:	4b17      	ldr	r3, [pc, #92]	; (8003714 <led_reaction+0xc8>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	701a      	strb	r2, [r3, #0]
			}
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, led_hijau_kuning);
 80036bc:	4b14      	ldr	r3, [pc, #80]	; (8003710 <led_reaction+0xc4>)
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	461a      	mov	r2, r3
 80036c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80036c6:	4814      	ldr	r0, [pc, #80]	; (8003718 <led_reaction+0xcc>)
 80036c8:	f001 fb6a 	bl	8004da0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, led_merah);
 80036cc:	4b11      	ldr	r3, [pc, #68]	; (8003714 <led_reaction+0xc8>)
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	461a      	mov	r2, r3
 80036d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80036d6:	4810      	ldr	r0, [pc, #64]	; (8003718 <led_reaction+0xcc>)
 80036d8:	f001 fb62 	bl	8004da0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, led_hijau_kuning);
 80036dc:	4b0c      	ldr	r3, [pc, #48]	; (8003710 <led_reaction+0xc4>)
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	461a      	mov	r2, r3
 80036e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80036e6:	480c      	ldr	r0, [pc, #48]	; (8003718 <led_reaction+0xcc>)
 80036e8:	f001 fb5a 	bl	8004da0 <HAL_GPIO_WritePin>
	while ((unsigned long)HAL_GetTick() - led_loop_on <= time_loop){
 80036ec:	f000 fc60 	bl	8003fb0 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	4b05      	ldr	r3, [pc, #20]	; (8003708 <led_reaction+0xbc>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	1ad2      	subs	r2, r2, r3
 80036f8:	88bb      	ldrh	r3, [r7, #4]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d9b4      	bls.n	8003668 <led_reaction+0x1c>
		}
	}
}
 80036fe:	bf00      	nop
 8003700:	bf00      	nop
 8003702:	3708      	adds	r7, #8
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	20000a1c 	.word	0x20000a1c
 800370c:	20000a18 	.word	0x20000a18
 8003710:	20000004 	.word	0x20000004
 8003714:	20000a56 	.word	0x20000a56
 8003718:	40021000 	.word	0x40021000

0800371c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800371c:	b480      	push	{r7}
 800371e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003720:	b672      	cpsid	i
}
 8003722:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003724:	e7fe      	b.n	8003724 <Error_Handler+0x8>
	...

08003728 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8003730:	4a07      	ldr	r2, [pc, #28]	; (8003750 <RetargetInit+0x28>)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8003736:	4b07      	ldr	r3, [pc, #28]	; (8003754 <RetargetInit+0x2c>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	6898      	ldr	r0, [r3, #8]
 800373c:	2300      	movs	r3, #0
 800373e:	2202      	movs	r2, #2
 8003740:	2100      	movs	r1, #0
 8003742:	f006 f911 	bl	8009968 <setvbuf>
}
 8003746:	bf00      	nop
 8003748:	3708      	adds	r7, #8
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	200039d4 	.word	0x200039d4
 8003754:	20000014 	.word	0x20000014

08003758 <_isatty>:

int _isatty(int fd) {
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2b00      	cmp	r3, #0
 8003764:	db04      	blt.n	8003770 <_isatty+0x18>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2b02      	cmp	r3, #2
 800376a:	dc01      	bgt.n	8003770 <_isatty+0x18>
    return 1;
 800376c:	2301      	movs	r3, #1
 800376e:	e005      	b.n	800377c <_isatty+0x24>

  errno = EBADF;
 8003770:	f005 fa28 	bl	8008bc4 <__errno>
 8003774:	4603      	mov	r3, r0
 8003776:	2209      	movs	r2, #9
 8003778:	601a      	str	r2, [r3, #0]
  return 0;
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	3708      	adds	r7, #8
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <_write>:

int _write(int fd, char* ptr, int len) {
 8003784:	b580      	push	{r7, lr}
 8003786:	b086      	sub	sp, #24
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2b01      	cmp	r3, #1
 8003794:	d002      	beq.n	800379c <_write+0x18>
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2b02      	cmp	r3, #2
 800379a:	d111      	bne.n	80037c0 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 800379c:	4b0e      	ldr	r3, [pc, #56]	; (80037d8 <_write+0x54>)
 800379e:	6818      	ldr	r0, [r3, #0]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	b29a      	uxth	r2, r3
 80037a4:	f04f 33ff 	mov.w	r3, #4294967295
 80037a8:	68b9      	ldr	r1, [r7, #8]
 80037aa:	f003 ffce 	bl	800774a <HAL_UART_Transmit>
 80037ae:	4603      	mov	r3, r0
 80037b0:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80037b2:	7dfb      	ldrb	r3, [r7, #23]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d101      	bne.n	80037bc <_write+0x38>
      return len;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	e008      	b.n	80037ce <_write+0x4a>
    else
      return EIO;
 80037bc:	2305      	movs	r3, #5
 80037be:	e006      	b.n	80037ce <_write+0x4a>
  }
  errno = EBADF;
 80037c0:	f005 fa00 	bl	8008bc4 <__errno>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2209      	movs	r2, #9
 80037c8:	601a      	str	r2, [r3, #0]
  return -1;
 80037ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3718      	adds	r7, #24
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	200039d4 	.word	0x200039d4

080037dc <_close>:

int _close(int fd) {
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	db04      	blt.n	80037f4 <_close+0x18>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	dc01      	bgt.n	80037f4 <_close+0x18>
    return 0;
 80037f0:	2300      	movs	r3, #0
 80037f2:	e006      	b.n	8003802 <_close+0x26>

  errno = EBADF;
 80037f4:	f005 f9e6 	bl	8008bc4 <__errno>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2209      	movs	r2, #9
 80037fc:	601a      	str	r2, [r3, #0]
  return -1;
 80037fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003802:	4618      	mov	r0, r3
 8003804:	3708      	adds	r7, #8
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}

0800380a <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 800380a:	b580      	push	{r7, lr}
 800380c:	b084      	sub	sp, #16
 800380e:	af00      	add	r7, sp, #0
 8003810:	60f8      	str	r0, [r7, #12]
 8003812:	60b9      	str	r1, [r7, #8]
 8003814:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8003816:	f005 f9d5 	bl	8008bc4 <__errno>
 800381a:	4603      	mov	r3, r0
 800381c:	2209      	movs	r2, #9
 800381e:	601a      	str	r2, [r3, #0]
  return -1;
 8003820:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003824:	4618      	mov	r0, r3
 8003826:	3710      	adds	r7, #16
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <_read>:

int _read(int fd, char* ptr, int len) {
 800382c:	b580      	push	{r7, lr}
 800382e:	b086      	sub	sp, #24
 8003830:	af00      	add	r7, sp, #0
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	60b9      	str	r1, [r7, #8]
 8003836:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d110      	bne.n	8003860 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 800383e:	4b0e      	ldr	r3, [pc, #56]	; (8003878 <_read+0x4c>)
 8003840:	6818      	ldr	r0, [r3, #0]
 8003842:	f04f 33ff 	mov.w	r3, #4294967295
 8003846:	2201      	movs	r2, #1
 8003848:	68b9      	ldr	r1, [r7, #8]
 800384a:	f004 f810 	bl	800786e <HAL_UART_Receive>
 800384e:	4603      	mov	r3, r0
 8003850:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8003852:	7dfb      	ldrb	r3, [r7, #23]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d101      	bne.n	800385c <_read+0x30>
      return 1;
 8003858:	2301      	movs	r3, #1
 800385a:	e008      	b.n	800386e <_read+0x42>
    else
      return EIO;
 800385c:	2305      	movs	r3, #5
 800385e:	e006      	b.n	800386e <_read+0x42>
  }
  errno = EBADF;
 8003860:	f005 f9b0 	bl	8008bc4 <__errno>
 8003864:	4603      	mov	r3, r0
 8003866:	2209      	movs	r2, #9
 8003868:	601a      	str	r2, [r3, #0]
  return -1;
 800386a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800386e:	4618      	mov	r0, r3
 8003870:	3718      	adds	r7, #24
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	200039d4 	.word	0x200039d4

0800387c <_fstat>:

int _fstat(int fd, struct stat* st) {
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2b00      	cmp	r3, #0
 800388a:	db08      	blt.n	800389e <_fstat+0x22>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2b02      	cmp	r3, #2
 8003890:	dc05      	bgt.n	800389e <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003898:	605a      	str	r2, [r3, #4]
    return 0;
 800389a:	2300      	movs	r3, #0
 800389c:	e005      	b.n	80038aa <_fstat+0x2e>
  }

  errno = EBADF;
 800389e:	f005 f991 	bl	8008bc4 <__errno>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2209      	movs	r2, #9
 80038a6:	601a      	str	r2, [r3, #0]
  return 0;
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3708      	adds	r7, #8
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
	...

080038b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038ba:	2300      	movs	r3, #0
 80038bc:	607b      	str	r3, [r7, #4]
 80038be:	4b10      	ldr	r3, [pc, #64]	; (8003900 <HAL_MspInit+0x4c>)
 80038c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c2:	4a0f      	ldr	r2, [pc, #60]	; (8003900 <HAL_MspInit+0x4c>)
 80038c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038c8:	6453      	str	r3, [r2, #68]	; 0x44
 80038ca:	4b0d      	ldr	r3, [pc, #52]	; (8003900 <HAL_MspInit+0x4c>)
 80038cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038d2:	607b      	str	r3, [r7, #4]
 80038d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80038d6:	2300      	movs	r3, #0
 80038d8:	603b      	str	r3, [r7, #0]
 80038da:	4b09      	ldr	r3, [pc, #36]	; (8003900 <HAL_MspInit+0x4c>)
 80038dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038de:	4a08      	ldr	r2, [pc, #32]	; (8003900 <HAL_MspInit+0x4c>)
 80038e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038e4:	6413      	str	r3, [r2, #64]	; 0x40
 80038e6:	4b06      	ldr	r3, [pc, #24]	; (8003900 <HAL_MspInit+0x4c>)
 80038e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ee:	603b      	str	r3, [r7, #0]
 80038f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80038f2:	bf00      	nop
 80038f4:	370c      	adds	r7, #12
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	40023800 	.word	0x40023800

08003904 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b08a      	sub	sp, #40	; 0x28
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800390c:	f107 0314 	add.w	r3, r7, #20
 8003910:	2200      	movs	r2, #0
 8003912:	601a      	str	r2, [r3, #0]
 8003914:	605a      	str	r2, [r3, #4]
 8003916:	609a      	str	r2, [r3, #8]
 8003918:	60da      	str	r2, [r3, #12]
 800391a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a19      	ldr	r2, [pc, #100]	; (8003988 <HAL_I2C_MspInit+0x84>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d12b      	bne.n	800397e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003926:	2300      	movs	r3, #0
 8003928:	613b      	str	r3, [r7, #16]
 800392a:	4b18      	ldr	r3, [pc, #96]	; (800398c <HAL_I2C_MspInit+0x88>)
 800392c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392e:	4a17      	ldr	r2, [pc, #92]	; (800398c <HAL_I2C_MspInit+0x88>)
 8003930:	f043 0302 	orr.w	r3, r3, #2
 8003934:	6313      	str	r3, [r2, #48]	; 0x30
 8003936:	4b15      	ldr	r3, [pc, #84]	; (800398c <HAL_I2C_MspInit+0x88>)
 8003938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393a:	f003 0302 	and.w	r3, r3, #2
 800393e:	613b      	str	r3, [r7, #16]
 8003940:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003942:	23c0      	movs	r3, #192	; 0xc0
 8003944:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003946:	2312      	movs	r3, #18
 8003948:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800394a:	2301      	movs	r3, #1
 800394c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800394e:	2303      	movs	r3, #3
 8003950:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003952:	2304      	movs	r3, #4
 8003954:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003956:	f107 0314 	add.w	r3, r7, #20
 800395a:	4619      	mov	r1, r3
 800395c:	480c      	ldr	r0, [pc, #48]	; (8003990 <HAL_I2C_MspInit+0x8c>)
 800395e:	f001 f86b 	bl	8004a38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003962:	2300      	movs	r3, #0
 8003964:	60fb      	str	r3, [r7, #12]
 8003966:	4b09      	ldr	r3, [pc, #36]	; (800398c <HAL_I2C_MspInit+0x88>)
 8003968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396a:	4a08      	ldr	r2, [pc, #32]	; (800398c <HAL_I2C_MspInit+0x88>)
 800396c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003970:	6413      	str	r3, [r2, #64]	; 0x40
 8003972:	4b06      	ldr	r3, [pc, #24]	; (800398c <HAL_I2C_MspInit+0x88>)
 8003974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003976:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800397a:	60fb      	str	r3, [r7, #12]
 800397c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800397e:	bf00      	nop
 8003980:	3728      	adds	r7, #40	; 0x28
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	40005400 	.word	0x40005400
 800398c:	40023800 	.word	0x40023800
 8003990:	40020400 	.word	0x40020400

08003994 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a05      	ldr	r2, [pc, #20]	; (80039b8 <HAL_RTC_MspInit+0x24>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d102      	bne.n	80039ac <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80039a6:	4b05      	ldr	r3, [pc, #20]	; (80039bc <HAL_RTC_MspInit+0x28>)
 80039a8:	2201      	movs	r2, #1
 80039aa:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80039ac:	bf00      	nop
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr
 80039b8:	40002800 	.word	0x40002800
 80039bc:	42470e3c 	.word	0x42470e3c

080039c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b08a      	sub	sp, #40	; 0x28
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039c8:	f107 0314 	add.w	r3, r7, #20
 80039cc:	2200      	movs	r2, #0
 80039ce:	601a      	str	r2, [r3, #0]
 80039d0:	605a      	str	r2, [r3, #4]
 80039d2:	609a      	str	r2, [r3, #8]
 80039d4:	60da      	str	r2, [r3, #12]
 80039d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a30      	ldr	r2, [pc, #192]	; (8003aa0 <HAL_SPI_MspInit+0xe0>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d159      	bne.n	8003a96 <HAL_SPI_MspInit+0xd6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80039e2:	2300      	movs	r3, #0
 80039e4:	613b      	str	r3, [r7, #16]
 80039e6:	4b2f      	ldr	r3, [pc, #188]	; (8003aa4 <HAL_SPI_MspInit+0xe4>)
 80039e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ea:	4a2e      	ldr	r2, [pc, #184]	; (8003aa4 <HAL_SPI_MspInit+0xe4>)
 80039ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80039f0:	6453      	str	r3, [r2, #68]	; 0x44
 80039f2:	4b2c      	ldr	r3, [pc, #176]	; (8003aa4 <HAL_SPI_MspInit+0xe4>)
 80039f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039fa:	613b      	str	r3, [r7, #16]
 80039fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039fe:	2300      	movs	r3, #0
 8003a00:	60fb      	str	r3, [r7, #12]
 8003a02:	4b28      	ldr	r3, [pc, #160]	; (8003aa4 <HAL_SPI_MspInit+0xe4>)
 8003a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a06:	4a27      	ldr	r2, [pc, #156]	; (8003aa4 <HAL_SPI_MspInit+0xe4>)
 8003a08:	f043 0301 	orr.w	r3, r3, #1
 8003a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a0e:	4b25      	ldr	r3, [pc, #148]	; (8003aa4 <HAL_SPI_MspInit+0xe4>)
 8003a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a12:	f003 0301 	and.w	r3, r3, #1
 8003a16:	60fb      	str	r3, [r7, #12]
 8003a18:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003a1a:	23a0      	movs	r3, #160	; 0xa0
 8003a1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a1e:	2302      	movs	r3, #2
 8003a20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a22:	2300      	movs	r3, #0
 8003a24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a26:	2303      	movs	r3, #3
 8003a28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003a2a:	2305      	movs	r3, #5
 8003a2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a2e:	f107 0314 	add.w	r3, r7, #20
 8003a32:	4619      	mov	r1, r3
 8003a34:	481c      	ldr	r0, [pc, #112]	; (8003aa8 <HAL_SPI_MspInit+0xe8>)
 8003a36:	f000 ffff 	bl	8004a38 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8003a3a:	4b1c      	ldr	r3, [pc, #112]	; (8003aac <HAL_SPI_MspInit+0xec>)
 8003a3c:	4a1c      	ldr	r2, [pc, #112]	; (8003ab0 <HAL_SPI_MspInit+0xf0>)
 8003a3e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8003a40:	4b1a      	ldr	r3, [pc, #104]	; (8003aac <HAL_SPI_MspInit+0xec>)
 8003a42:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8003a46:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003a48:	4b18      	ldr	r3, [pc, #96]	; (8003aac <HAL_SPI_MspInit+0xec>)
 8003a4a:	2240      	movs	r2, #64	; 0x40
 8003a4c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a4e:	4b17      	ldr	r3, [pc, #92]	; (8003aac <HAL_SPI_MspInit+0xec>)
 8003a50:	2200      	movs	r2, #0
 8003a52:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003a54:	4b15      	ldr	r3, [pc, #84]	; (8003aac <HAL_SPI_MspInit+0xec>)
 8003a56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a5a:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a5c:	4b13      	ldr	r3, [pc, #76]	; (8003aac <HAL_SPI_MspInit+0xec>)
 8003a5e:	2200      	movs	r2, #0
 8003a60:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a62:	4b12      	ldr	r3, [pc, #72]	; (8003aac <HAL_SPI_MspInit+0xec>)
 8003a64:	2200      	movs	r2, #0
 8003a66:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8003a68:	4b10      	ldr	r3, [pc, #64]	; (8003aac <HAL_SPI_MspInit+0xec>)
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003a6e:	4b0f      	ldr	r3, [pc, #60]	; (8003aac <HAL_SPI_MspInit+0xec>)
 8003a70:	2200      	movs	r2, #0
 8003a72:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a74:	4b0d      	ldr	r3, [pc, #52]	; (8003aac <HAL_SPI_MspInit+0xec>)
 8003a76:	2200      	movs	r2, #0
 8003a78:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003a7a:	480c      	ldr	r0, [pc, #48]	; (8003aac <HAL_SPI_MspInit+0xec>)
 8003a7c:	f000 fbda 	bl	8004234 <HAL_DMA_Init>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d001      	beq.n	8003a8a <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 8003a86:	f7ff fe49 	bl	800371c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a07      	ldr	r2, [pc, #28]	; (8003aac <HAL_SPI_MspInit+0xec>)
 8003a8e:	649a      	str	r2, [r3, #72]	; 0x48
 8003a90:	4a06      	ldr	r2, [pc, #24]	; (8003aac <HAL_SPI_MspInit+0xec>)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003a96:	bf00      	nop
 8003a98:	3728      	adds	r7, #40	; 0x28
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	40013000 	.word	0x40013000
 8003aa4:	40023800 	.word	0x40023800
 8003aa8:	40020000 	.word	0x40020000
 8003aac:	20003924 	.word	0x20003924
 8003ab0:	40026458 	.word	0x40026458

08003ab4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b08e      	sub	sp, #56	; 0x38
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003abc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	601a      	str	r2, [r3, #0]
 8003ac4:	605a      	str	r2, [r3, #4]
 8003ac6:	609a      	str	r2, [r3, #8]
 8003ac8:	60da      	str	r2, [r3, #12]
 8003aca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a86      	ldr	r2, [pc, #536]	; (8003cec <HAL_UART_MspInit+0x238>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d135      	bne.n	8003b42 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	623b      	str	r3, [r7, #32]
 8003ada:	4b85      	ldr	r3, [pc, #532]	; (8003cf0 <HAL_UART_MspInit+0x23c>)
 8003adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ade:	4a84      	ldr	r2, [pc, #528]	; (8003cf0 <HAL_UART_MspInit+0x23c>)
 8003ae0:	f043 0310 	orr.w	r3, r3, #16
 8003ae4:	6453      	str	r3, [r2, #68]	; 0x44
 8003ae6:	4b82      	ldr	r3, [pc, #520]	; (8003cf0 <HAL_UART_MspInit+0x23c>)
 8003ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aea:	f003 0310 	and.w	r3, r3, #16
 8003aee:	623b      	str	r3, [r7, #32]
 8003af0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003af2:	2300      	movs	r3, #0
 8003af4:	61fb      	str	r3, [r7, #28]
 8003af6:	4b7e      	ldr	r3, [pc, #504]	; (8003cf0 <HAL_UART_MspInit+0x23c>)
 8003af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afa:	4a7d      	ldr	r2, [pc, #500]	; (8003cf0 <HAL_UART_MspInit+0x23c>)
 8003afc:	f043 0301 	orr.w	r3, r3, #1
 8003b00:	6313      	str	r3, [r2, #48]	; 0x30
 8003b02:	4b7b      	ldr	r3, [pc, #492]	; (8003cf0 <HAL_UART_MspInit+0x23c>)
 8003b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b06:	f003 0301 	and.w	r3, r3, #1
 8003b0a:	61fb      	str	r3, [r7, #28]
 8003b0c:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003b0e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003b12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b14:	2302      	movs	r3, #2
 8003b16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003b20:	2307      	movs	r3, #7
 8003b22:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b28:	4619      	mov	r1, r3
 8003b2a:	4872      	ldr	r0, [pc, #456]	; (8003cf4 <HAL_UART_MspInit+0x240>)
 8003b2c:	f000 ff84 	bl	8004a38 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003b30:	2200      	movs	r2, #0
 8003b32:	2100      	movs	r1, #0
 8003b34:	2025      	movs	r0, #37	; 0x25
 8003b36:	f000 fb46 	bl	80041c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003b3a:	2025      	movs	r0, #37	; 0x25
 8003b3c:	f000 fb5f 	bl	80041fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003b40:	e0cf      	b.n	8003ce2 <HAL_UART_MspInit+0x22e>
  else if(huart->Instance==USART2)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a6c      	ldr	r2, [pc, #432]	; (8003cf8 <HAL_UART_MspInit+0x244>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d162      	bne.n	8003c12 <HAL_UART_MspInit+0x15e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	61bb      	str	r3, [r7, #24]
 8003b50:	4b67      	ldr	r3, [pc, #412]	; (8003cf0 <HAL_UART_MspInit+0x23c>)
 8003b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b54:	4a66      	ldr	r2, [pc, #408]	; (8003cf0 <HAL_UART_MspInit+0x23c>)
 8003b56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b5a:	6413      	str	r3, [r2, #64]	; 0x40
 8003b5c:	4b64      	ldr	r3, [pc, #400]	; (8003cf0 <HAL_UART_MspInit+0x23c>)
 8003b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b64:	61bb      	str	r3, [r7, #24]
 8003b66:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b68:	2300      	movs	r3, #0
 8003b6a:	617b      	str	r3, [r7, #20]
 8003b6c:	4b60      	ldr	r3, [pc, #384]	; (8003cf0 <HAL_UART_MspInit+0x23c>)
 8003b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b70:	4a5f      	ldr	r2, [pc, #380]	; (8003cf0 <HAL_UART_MspInit+0x23c>)
 8003b72:	f043 0301 	orr.w	r3, r3, #1
 8003b76:	6313      	str	r3, [r2, #48]	; 0x30
 8003b78:	4b5d      	ldr	r3, [pc, #372]	; (8003cf0 <HAL_UART_MspInit+0x23c>)
 8003b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7c:	f003 0301 	and.w	r3, r3, #1
 8003b80:	617b      	str	r3, [r7, #20]
 8003b82:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003b84:	230c      	movs	r3, #12
 8003b86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b88:	2302      	movs	r3, #2
 8003b8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b90:	2303      	movs	r3, #3
 8003b92:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003b94:	2307      	movs	r3, #7
 8003b96:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b9c:	4619      	mov	r1, r3
 8003b9e:	4855      	ldr	r0, [pc, #340]	; (8003cf4 <HAL_UART_MspInit+0x240>)
 8003ba0:	f000 ff4a 	bl	8004a38 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003ba4:	4b55      	ldr	r3, [pc, #340]	; (8003cfc <HAL_UART_MspInit+0x248>)
 8003ba6:	4a56      	ldr	r2, [pc, #344]	; (8003d00 <HAL_UART_MspInit+0x24c>)
 8003ba8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003baa:	4b54      	ldr	r3, [pc, #336]	; (8003cfc <HAL_UART_MspInit+0x248>)
 8003bac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003bb0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003bb2:	4b52      	ldr	r3, [pc, #328]	; (8003cfc <HAL_UART_MspInit+0x248>)
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003bb8:	4b50      	ldr	r3, [pc, #320]	; (8003cfc <HAL_UART_MspInit+0x248>)
 8003bba:	2200      	movs	r2, #0
 8003bbc:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003bbe:	4b4f      	ldr	r3, [pc, #316]	; (8003cfc <HAL_UART_MspInit+0x248>)
 8003bc0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003bc4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003bc6:	4b4d      	ldr	r3, [pc, #308]	; (8003cfc <HAL_UART_MspInit+0x248>)
 8003bc8:	2200      	movs	r2, #0
 8003bca:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003bcc:	4b4b      	ldr	r3, [pc, #300]	; (8003cfc <HAL_UART_MspInit+0x248>)
 8003bce:	2200      	movs	r2, #0
 8003bd0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003bd2:	4b4a      	ldr	r3, [pc, #296]	; (8003cfc <HAL_UART_MspInit+0x248>)
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003bd8:	4b48      	ldr	r3, [pc, #288]	; (8003cfc <HAL_UART_MspInit+0x248>)
 8003bda:	2200      	movs	r2, #0
 8003bdc:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003bde:	4b47      	ldr	r3, [pc, #284]	; (8003cfc <HAL_UART_MspInit+0x248>)
 8003be0:	2200      	movs	r2, #0
 8003be2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003be4:	4845      	ldr	r0, [pc, #276]	; (8003cfc <HAL_UART_MspInit+0x248>)
 8003be6:	f000 fb25 	bl	8004234 <HAL_DMA_Init>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d001      	beq.n	8003bf4 <HAL_UART_MspInit+0x140>
      Error_Handler();
 8003bf0:	f7ff fd94 	bl	800371c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	4a41      	ldr	r2, [pc, #260]	; (8003cfc <HAL_UART_MspInit+0x248>)
 8003bf8:	639a      	str	r2, [r3, #56]	; 0x38
 8003bfa:	4a40      	ldr	r2, [pc, #256]	; (8003cfc <HAL_UART_MspInit+0x248>)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003c00:	2200      	movs	r2, #0
 8003c02:	2100      	movs	r1, #0
 8003c04:	2026      	movs	r0, #38	; 0x26
 8003c06:	f000 fade 	bl	80041c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003c0a:	2026      	movs	r0, #38	; 0x26
 8003c0c:	f000 faf7 	bl	80041fe <HAL_NVIC_EnableIRQ>
}
 8003c10:	e067      	b.n	8003ce2 <HAL_UART_MspInit+0x22e>
  else if(huart->Instance==USART3)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a3b      	ldr	r2, [pc, #236]	; (8003d04 <HAL_UART_MspInit+0x250>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d162      	bne.n	8003ce2 <HAL_UART_MspInit+0x22e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	613b      	str	r3, [r7, #16]
 8003c20:	4b33      	ldr	r3, [pc, #204]	; (8003cf0 <HAL_UART_MspInit+0x23c>)
 8003c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c24:	4a32      	ldr	r2, [pc, #200]	; (8003cf0 <HAL_UART_MspInit+0x23c>)
 8003c26:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c2a:	6413      	str	r3, [r2, #64]	; 0x40
 8003c2c:	4b30      	ldr	r3, [pc, #192]	; (8003cf0 <HAL_UART_MspInit+0x23c>)
 8003c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c34:	613b      	str	r3, [r7, #16]
 8003c36:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c38:	2300      	movs	r3, #0
 8003c3a:	60fb      	str	r3, [r7, #12]
 8003c3c:	4b2c      	ldr	r3, [pc, #176]	; (8003cf0 <HAL_UART_MspInit+0x23c>)
 8003c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c40:	4a2b      	ldr	r2, [pc, #172]	; (8003cf0 <HAL_UART_MspInit+0x23c>)
 8003c42:	f043 0302 	orr.w	r3, r3, #2
 8003c46:	6313      	str	r3, [r2, #48]	; 0x30
 8003c48:	4b29      	ldr	r3, [pc, #164]	; (8003cf0 <HAL_UART_MspInit+0x23c>)
 8003c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4c:	f003 0302 	and.w	r3, r3, #2
 8003c50:	60fb      	str	r3, [r7, #12]
 8003c52:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003c54:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003c58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c5a:	2302      	movs	r3, #2
 8003c5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c62:	2303      	movs	r3, #3
 8003c64:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003c66:	2307      	movs	r3, #7
 8003c68:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c6e:	4619      	mov	r1, r3
 8003c70:	4825      	ldr	r0, [pc, #148]	; (8003d08 <HAL_UART_MspInit+0x254>)
 8003c72:	f000 fee1 	bl	8004a38 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8003c76:	4b25      	ldr	r3, [pc, #148]	; (8003d0c <HAL_UART_MspInit+0x258>)
 8003c78:	4a25      	ldr	r2, [pc, #148]	; (8003d10 <HAL_UART_MspInit+0x25c>)
 8003c7a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8003c7c:	4b23      	ldr	r3, [pc, #140]	; (8003d0c <HAL_UART_MspInit+0x258>)
 8003c7e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003c82:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c84:	4b21      	ldr	r3, [pc, #132]	; (8003d0c <HAL_UART_MspInit+0x258>)
 8003c86:	2200      	movs	r2, #0
 8003c88:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c8a:	4b20      	ldr	r3, [pc, #128]	; (8003d0c <HAL_UART_MspInit+0x258>)
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003c90:	4b1e      	ldr	r3, [pc, #120]	; (8003d0c <HAL_UART_MspInit+0x258>)
 8003c92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c96:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003c98:	4b1c      	ldr	r3, [pc, #112]	; (8003d0c <HAL_UART_MspInit+0x258>)
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c9e:	4b1b      	ldr	r3, [pc, #108]	; (8003d0c <HAL_UART_MspInit+0x258>)
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8003ca4:	4b19      	ldr	r3, [pc, #100]	; (8003d0c <HAL_UART_MspInit+0x258>)
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003caa:	4b18      	ldr	r3, [pc, #96]	; (8003d0c <HAL_UART_MspInit+0x258>)
 8003cac:	2200      	movs	r2, #0
 8003cae:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003cb0:	4b16      	ldr	r3, [pc, #88]	; (8003d0c <HAL_UART_MspInit+0x258>)
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003cb6:	4815      	ldr	r0, [pc, #84]	; (8003d0c <HAL_UART_MspInit+0x258>)
 8003cb8:	f000 fabc 	bl	8004234 <HAL_DMA_Init>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d001      	beq.n	8003cc6 <HAL_UART_MspInit+0x212>
      Error_Handler();
 8003cc2:	f7ff fd2b 	bl	800371c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a10      	ldr	r2, [pc, #64]	; (8003d0c <HAL_UART_MspInit+0x258>)
 8003cca:	639a      	str	r2, [r3, #56]	; 0x38
 8003ccc:	4a0f      	ldr	r2, [pc, #60]	; (8003d0c <HAL_UART_MspInit+0x258>)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	2100      	movs	r1, #0
 8003cd6:	2027      	movs	r0, #39	; 0x27
 8003cd8:	f000 fa75 	bl	80041c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003cdc:	2027      	movs	r0, #39	; 0x27
 8003cde:	f000 fa8e 	bl	80041fe <HAL_NVIC_EnableIRQ>
}
 8003ce2:	bf00      	nop
 8003ce4:	3738      	adds	r7, #56	; 0x38
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	40011000 	.word	0x40011000
 8003cf0:	40023800 	.word	0x40023800
 8003cf4:	40020000 	.word	0x40020000
 8003cf8:	40004400 	.word	0x40004400
 8003cfc:	20002cfc 	.word	0x20002cfc
 8003d00:	40026088 	.word	0x40026088
 8003d04:	40004800 	.word	0x40004800
 8003d08:	40020400 	.word	0x40020400
 8003d0c:	20002e24 	.word	0x20002e24
 8003d10:	40026028 	.word	0x40026028

08003d14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d14:	b480      	push	{r7}
 8003d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003d18:	e7fe      	b.n	8003d18 <NMI_Handler+0x4>

08003d1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d1a:	b480      	push	{r7}
 8003d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d1e:	e7fe      	b.n	8003d1e <HardFault_Handler+0x4>

08003d20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d20:	b480      	push	{r7}
 8003d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d24:	e7fe      	b.n	8003d24 <MemManage_Handler+0x4>

08003d26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d26:	b480      	push	{r7}
 8003d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d2a:	e7fe      	b.n	8003d2a <BusFault_Handler+0x4>

08003d2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d30:	e7fe      	b.n	8003d30 <UsageFault_Handler+0x4>

08003d32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d32:	b480      	push	{r7}
 8003d34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003d36:	bf00      	nop
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d40:	b480      	push	{r7}
 8003d42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d44:	bf00      	nop
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr

08003d4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d4e:	b480      	push	{r7}
 8003d50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d52:	bf00      	nop
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr

08003d5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d60:	f000 f912 	bl	8003f88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d64:	bf00      	nop
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003d6c:	4802      	ldr	r0, [pc, #8]	; (8003d78 <DMA1_Stream1_IRQHandler+0x10>)
 8003d6e:	f000 fbf9 	bl	8004564 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003d72:	bf00      	nop
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	20002e24 	.word	0x20002e24

08003d7c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003d80:	4802      	ldr	r0, [pc, #8]	; (8003d8c <DMA1_Stream5_IRQHandler+0x10>)
 8003d82:	f000 fbef 	bl	8004564 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003d86:	bf00      	nop
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	20002cfc 	.word	0x20002cfc

08003d90 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8003d94:	2020      	movs	r0, #32
 8003d96:	f001 f81d 	bl	8004dd4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8003d9a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003d9e:	f001 f819 	bl	8004dd4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8003da2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003da6:	f001 f815 	bl	8004dd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003daa:	bf00      	nop
 8003dac:	bd80      	pop	{r7, pc}
	...

08003db0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003db4:	4802      	ldr	r0, [pc, #8]	; (8003dc0 <USART1_IRQHandler+0x10>)
 8003db6:	f003 fe91 	bl	8007adc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003dba:	bf00      	nop
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	20002f9c 	.word	0x20002f9c

08003dc4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003dc8:	4802      	ldr	r0, [pc, #8]	; (8003dd4 <USART2_IRQHandler+0x10>)
 8003dca:	f003 fe87 	bl	8007adc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003dce:	bf00      	nop
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	200038cc 	.word	0x200038cc

08003dd8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003ddc:	4802      	ldr	r0, [pc, #8]	; (8003de8 <USART3_IRQHandler+0x10>)
 8003dde:	f003 fe7d 	bl	8007adc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003de2:	bf00      	nop
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	20002e84 	.word	0x20002e84

08003dec <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003df0:	4802      	ldr	r0, [pc, #8]	; (8003dfc <DMA2_Stream3_IRQHandler+0x10>)
 8003df2:	f000 fbb7 	bl	8004564 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8003df6:	bf00      	nop
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	20003924 	.word	0x20003924

08003e00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b086      	sub	sp, #24
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003e08:	4a14      	ldr	r2, [pc, #80]	; (8003e5c <_sbrk+0x5c>)
 8003e0a:	4b15      	ldr	r3, [pc, #84]	; (8003e60 <_sbrk+0x60>)
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003e14:	4b13      	ldr	r3, [pc, #76]	; (8003e64 <_sbrk+0x64>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d102      	bne.n	8003e22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003e1c:	4b11      	ldr	r3, [pc, #68]	; (8003e64 <_sbrk+0x64>)
 8003e1e:	4a12      	ldr	r2, [pc, #72]	; (8003e68 <_sbrk+0x68>)
 8003e20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003e22:	4b10      	ldr	r3, [pc, #64]	; (8003e64 <_sbrk+0x64>)
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4413      	add	r3, r2
 8003e2a:	693a      	ldr	r2, [r7, #16]
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d207      	bcs.n	8003e40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003e30:	f004 fec8 	bl	8008bc4 <__errno>
 8003e34:	4603      	mov	r3, r0
 8003e36:	220c      	movs	r2, #12
 8003e38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e3e:	e009      	b.n	8003e54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003e40:	4b08      	ldr	r3, [pc, #32]	; (8003e64 <_sbrk+0x64>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003e46:	4b07      	ldr	r3, [pc, #28]	; (8003e64 <_sbrk+0x64>)
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4413      	add	r3, r2
 8003e4e:	4a05      	ldr	r2, [pc, #20]	; (8003e64 <_sbrk+0x64>)
 8003e50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003e52:	68fb      	ldr	r3, [r7, #12]
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3718      	adds	r7, #24
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	20020000 	.word	0x20020000
 8003e60:	00000400 	.word	0x00000400
 8003e64:	20000a58 	.word	0x20000a58
 8003e68:	200039f0 	.word	0x200039f0

08003e6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003e70:	4b06      	ldr	r3, [pc, #24]	; (8003e8c <SystemInit+0x20>)
 8003e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e76:	4a05      	ldr	r2, [pc, #20]	; (8003e8c <SystemInit+0x20>)
 8003e78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003e80:	bf00      	nop
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
 8003e8a:	bf00      	nop
 8003e8c:	e000ed00 	.word	0xe000ed00

08003e90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003e90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003ec8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003e94:	480d      	ldr	r0, [pc, #52]	; (8003ecc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003e96:	490e      	ldr	r1, [pc, #56]	; (8003ed0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003e98:	4a0e      	ldr	r2, [pc, #56]	; (8003ed4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003e9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003e9c:	e002      	b.n	8003ea4 <LoopCopyDataInit>

08003e9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ea0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ea2:	3304      	adds	r3, #4

08003ea4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ea4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ea6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ea8:	d3f9      	bcc.n	8003e9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003eaa:	4a0b      	ldr	r2, [pc, #44]	; (8003ed8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003eac:	4c0b      	ldr	r4, [pc, #44]	; (8003edc <LoopFillZerobss+0x26>)
  movs r3, #0
 8003eae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003eb0:	e001      	b.n	8003eb6 <LoopFillZerobss>

08003eb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003eb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003eb4:	3204      	adds	r2, #4

08003eb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003eb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003eb8:	d3fb      	bcc.n	8003eb2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003eba:	f7ff ffd7 	bl	8003e6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003ebe:	f004 fe87 	bl	8008bd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003ec2:	f7fe fb37 	bl	8002534 <main>
  bx  lr    
 8003ec6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003ec8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003ecc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ed0:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8003ed4:	0800f934 	.word	0x0800f934
  ldr r2, =_sbss
 8003ed8:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8003edc:	200039ec 	.word	0x200039ec

08003ee0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003ee0:	e7fe      	b.n	8003ee0 <ADC_IRQHandler>
	...

08003ee4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003ee8:	4b0e      	ldr	r3, [pc, #56]	; (8003f24 <HAL_Init+0x40>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a0d      	ldr	r2, [pc, #52]	; (8003f24 <HAL_Init+0x40>)
 8003eee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ef2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003ef4:	4b0b      	ldr	r3, [pc, #44]	; (8003f24 <HAL_Init+0x40>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a0a      	ldr	r2, [pc, #40]	; (8003f24 <HAL_Init+0x40>)
 8003efa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003efe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f00:	4b08      	ldr	r3, [pc, #32]	; (8003f24 <HAL_Init+0x40>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a07      	ldr	r2, [pc, #28]	; (8003f24 <HAL_Init+0x40>)
 8003f06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f0c:	2003      	movs	r0, #3
 8003f0e:	f000 f94f 	bl	80041b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003f12:	2000      	movs	r0, #0
 8003f14:	f000 f808 	bl	8003f28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003f18:	f7ff fccc 	bl	80038b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f1c:	2300      	movs	r3, #0
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	40023c00 	.word	0x40023c00

08003f28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b082      	sub	sp, #8
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003f30:	4b12      	ldr	r3, [pc, #72]	; (8003f7c <HAL_InitTick+0x54>)
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	4b12      	ldr	r3, [pc, #72]	; (8003f80 <HAL_InitTick+0x58>)
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	4619      	mov	r1, r3
 8003f3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f46:	4618      	mov	r0, r3
 8003f48:	f000 f967 	bl	800421a <HAL_SYSTICK_Config>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d001      	beq.n	8003f56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e00e      	b.n	8003f74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2b0f      	cmp	r3, #15
 8003f5a:	d80a      	bhi.n	8003f72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	6879      	ldr	r1, [r7, #4]
 8003f60:	f04f 30ff 	mov.w	r0, #4294967295
 8003f64:	f000 f92f 	bl	80041c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003f68:	4a06      	ldr	r2, [pc, #24]	; (8003f84 <HAL_InitTick+0x5c>)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	e000      	b.n	8003f74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3708      	adds	r7, #8
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	20000008 	.word	0x20000008
 8003f80:	20000010 	.word	0x20000010
 8003f84:	2000000c 	.word	0x2000000c

08003f88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f8c:	4b06      	ldr	r3, [pc, #24]	; (8003fa8 <HAL_IncTick+0x20>)
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	461a      	mov	r2, r3
 8003f92:	4b06      	ldr	r3, [pc, #24]	; (8003fac <HAL_IncTick+0x24>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4413      	add	r3, r2
 8003f98:	4a04      	ldr	r2, [pc, #16]	; (8003fac <HAL_IncTick+0x24>)
 8003f9a:	6013      	str	r3, [r2, #0]
}
 8003f9c:	bf00      	nop
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr
 8003fa6:	bf00      	nop
 8003fa8:	20000010 	.word	0x20000010
 8003fac:	200039d8 	.word	0x200039d8

08003fb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	af00      	add	r7, sp, #0
  return uwTick;
 8003fb4:	4b03      	ldr	r3, [pc, #12]	; (8003fc4 <HAL_GetTick+0x14>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr
 8003fc2:	bf00      	nop
 8003fc4:	200039d8 	.word	0x200039d8

08003fc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003fd0:	f7ff ffee 	bl	8003fb0 <HAL_GetTick>
 8003fd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fe0:	d005      	beq.n	8003fee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003fe2:	4b0a      	ldr	r3, [pc, #40]	; (800400c <HAL_Delay+0x44>)
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	4413      	add	r3, r2
 8003fec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003fee:	bf00      	nop
 8003ff0:	f7ff ffde 	bl	8003fb0 <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	68fa      	ldr	r2, [r7, #12]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d8f7      	bhi.n	8003ff0 <HAL_Delay+0x28>
  {
  }
}
 8004000:	bf00      	nop
 8004002:	bf00      	nop
 8004004:	3710      	adds	r7, #16
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	20000010 	.word	0x20000010

08004010 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004010:	b480      	push	{r7}
 8004012:	b085      	sub	sp, #20
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f003 0307 	and.w	r3, r3, #7
 800401e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004020:	4b0c      	ldr	r3, [pc, #48]	; (8004054 <__NVIC_SetPriorityGrouping+0x44>)
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004026:	68ba      	ldr	r2, [r7, #8]
 8004028:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800402c:	4013      	ands	r3, r2
 800402e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004038:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800403c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004040:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004042:	4a04      	ldr	r2, [pc, #16]	; (8004054 <__NVIC_SetPriorityGrouping+0x44>)
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	60d3      	str	r3, [r2, #12]
}
 8004048:	bf00      	nop
 800404a:	3714      	adds	r7, #20
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr
 8004054:	e000ed00 	.word	0xe000ed00

08004058 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004058:	b480      	push	{r7}
 800405a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800405c:	4b04      	ldr	r3, [pc, #16]	; (8004070 <__NVIC_GetPriorityGrouping+0x18>)
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	0a1b      	lsrs	r3, r3, #8
 8004062:	f003 0307 	and.w	r3, r3, #7
}
 8004066:	4618      	mov	r0, r3
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr
 8004070:	e000ed00 	.word	0xe000ed00

08004074 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
 800407a:	4603      	mov	r3, r0
 800407c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800407e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004082:	2b00      	cmp	r3, #0
 8004084:	db0b      	blt.n	800409e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004086:	79fb      	ldrb	r3, [r7, #7]
 8004088:	f003 021f 	and.w	r2, r3, #31
 800408c:	4907      	ldr	r1, [pc, #28]	; (80040ac <__NVIC_EnableIRQ+0x38>)
 800408e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004092:	095b      	lsrs	r3, r3, #5
 8004094:	2001      	movs	r0, #1
 8004096:	fa00 f202 	lsl.w	r2, r0, r2
 800409a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800409e:	bf00      	nop
 80040a0:	370c      	adds	r7, #12
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr
 80040aa:	bf00      	nop
 80040ac:	e000e100 	.word	0xe000e100

080040b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	4603      	mov	r3, r0
 80040b8:	6039      	str	r1, [r7, #0]
 80040ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	db0a      	blt.n	80040da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	b2da      	uxtb	r2, r3
 80040c8:	490c      	ldr	r1, [pc, #48]	; (80040fc <__NVIC_SetPriority+0x4c>)
 80040ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ce:	0112      	lsls	r2, r2, #4
 80040d0:	b2d2      	uxtb	r2, r2
 80040d2:	440b      	add	r3, r1
 80040d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80040d8:	e00a      	b.n	80040f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	b2da      	uxtb	r2, r3
 80040de:	4908      	ldr	r1, [pc, #32]	; (8004100 <__NVIC_SetPriority+0x50>)
 80040e0:	79fb      	ldrb	r3, [r7, #7]
 80040e2:	f003 030f 	and.w	r3, r3, #15
 80040e6:	3b04      	subs	r3, #4
 80040e8:	0112      	lsls	r2, r2, #4
 80040ea:	b2d2      	uxtb	r2, r2
 80040ec:	440b      	add	r3, r1
 80040ee:	761a      	strb	r2, [r3, #24]
}
 80040f0:	bf00      	nop
 80040f2:	370c      	adds	r7, #12
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr
 80040fc:	e000e100 	.word	0xe000e100
 8004100:	e000ed00 	.word	0xe000ed00

08004104 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004104:	b480      	push	{r7}
 8004106:	b089      	sub	sp, #36	; 0x24
 8004108:	af00      	add	r7, sp, #0
 800410a:	60f8      	str	r0, [r7, #12]
 800410c:	60b9      	str	r1, [r7, #8]
 800410e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f003 0307 	and.w	r3, r3, #7
 8004116:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	f1c3 0307 	rsb	r3, r3, #7
 800411e:	2b04      	cmp	r3, #4
 8004120:	bf28      	it	cs
 8004122:	2304      	movcs	r3, #4
 8004124:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004126:	69fb      	ldr	r3, [r7, #28]
 8004128:	3304      	adds	r3, #4
 800412a:	2b06      	cmp	r3, #6
 800412c:	d902      	bls.n	8004134 <NVIC_EncodePriority+0x30>
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	3b03      	subs	r3, #3
 8004132:	e000      	b.n	8004136 <NVIC_EncodePriority+0x32>
 8004134:	2300      	movs	r3, #0
 8004136:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004138:	f04f 32ff 	mov.w	r2, #4294967295
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	fa02 f303 	lsl.w	r3, r2, r3
 8004142:	43da      	mvns	r2, r3
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	401a      	ands	r2, r3
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800414c:	f04f 31ff 	mov.w	r1, #4294967295
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	fa01 f303 	lsl.w	r3, r1, r3
 8004156:	43d9      	mvns	r1, r3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800415c:	4313      	orrs	r3, r2
         );
}
 800415e:	4618      	mov	r0, r3
 8004160:	3724      	adds	r7, #36	; 0x24
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr
	...

0800416c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b082      	sub	sp, #8
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	3b01      	subs	r3, #1
 8004178:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800417c:	d301      	bcc.n	8004182 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800417e:	2301      	movs	r3, #1
 8004180:	e00f      	b.n	80041a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004182:	4a0a      	ldr	r2, [pc, #40]	; (80041ac <SysTick_Config+0x40>)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	3b01      	subs	r3, #1
 8004188:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800418a:	210f      	movs	r1, #15
 800418c:	f04f 30ff 	mov.w	r0, #4294967295
 8004190:	f7ff ff8e 	bl	80040b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004194:	4b05      	ldr	r3, [pc, #20]	; (80041ac <SysTick_Config+0x40>)
 8004196:	2200      	movs	r2, #0
 8004198:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800419a:	4b04      	ldr	r3, [pc, #16]	; (80041ac <SysTick_Config+0x40>)
 800419c:	2207      	movs	r2, #7
 800419e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80041a0:	2300      	movs	r3, #0
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3708      	adds	r7, #8
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	e000e010 	.word	0xe000e010

080041b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b082      	sub	sp, #8
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f7ff ff29 	bl	8004010 <__NVIC_SetPriorityGrouping>
}
 80041be:	bf00      	nop
 80041c0:	3708      	adds	r7, #8
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}

080041c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80041c6:	b580      	push	{r7, lr}
 80041c8:	b086      	sub	sp, #24
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	4603      	mov	r3, r0
 80041ce:	60b9      	str	r1, [r7, #8]
 80041d0:	607a      	str	r2, [r7, #4]
 80041d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80041d4:	2300      	movs	r3, #0
 80041d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80041d8:	f7ff ff3e 	bl	8004058 <__NVIC_GetPriorityGrouping>
 80041dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	68b9      	ldr	r1, [r7, #8]
 80041e2:	6978      	ldr	r0, [r7, #20]
 80041e4:	f7ff ff8e 	bl	8004104 <NVIC_EncodePriority>
 80041e8:	4602      	mov	r2, r0
 80041ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041ee:	4611      	mov	r1, r2
 80041f0:	4618      	mov	r0, r3
 80041f2:	f7ff ff5d 	bl	80040b0 <__NVIC_SetPriority>
}
 80041f6:	bf00      	nop
 80041f8:	3718      	adds	r7, #24
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}

080041fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041fe:	b580      	push	{r7, lr}
 8004200:	b082      	sub	sp, #8
 8004202:	af00      	add	r7, sp, #0
 8004204:	4603      	mov	r3, r0
 8004206:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004208:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800420c:	4618      	mov	r0, r3
 800420e:	f7ff ff31 	bl	8004074 <__NVIC_EnableIRQ>
}
 8004212:	bf00      	nop
 8004214:	3708      	adds	r7, #8
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}

0800421a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800421a:	b580      	push	{r7, lr}
 800421c:	b082      	sub	sp, #8
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f7ff ffa2 	bl	800416c <SysTick_Config>
 8004228:	4603      	mov	r3, r0
}
 800422a:	4618      	mov	r0, r3
 800422c:	3708      	adds	r7, #8
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
	...

08004234 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b086      	sub	sp, #24
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800423c:	2300      	movs	r3, #0
 800423e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004240:	f7ff feb6 	bl	8003fb0 <HAL_GetTick>
 8004244:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d101      	bne.n	8004250 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e099      	b.n	8004384 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2202      	movs	r2, #2
 8004254:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f022 0201 	bic.w	r2, r2, #1
 800426e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004270:	e00f      	b.n	8004292 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004272:	f7ff fe9d 	bl	8003fb0 <HAL_GetTick>
 8004276:	4602      	mov	r2, r0
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	2b05      	cmp	r3, #5
 800427e:	d908      	bls.n	8004292 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2220      	movs	r2, #32
 8004284:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2203      	movs	r2, #3
 800428a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e078      	b.n	8004384 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 0301 	and.w	r3, r3, #1
 800429c:	2b00      	cmp	r3, #0
 800429e:	d1e8      	bne.n	8004272 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80042a8:	697a      	ldr	r2, [r7, #20]
 80042aa:	4b38      	ldr	r3, [pc, #224]	; (800438c <HAL_DMA_Init+0x158>)
 80042ac:	4013      	ands	r3, r2
 80042ae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	685a      	ldr	r2, [r3, #4]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80042be:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	691b      	ldr	r3, [r3, #16]
 80042c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	699b      	ldr	r3, [r3, #24]
 80042d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6a1b      	ldr	r3, [r3, #32]
 80042dc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80042de:	697a      	ldr	r2, [r7, #20]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e8:	2b04      	cmp	r3, #4
 80042ea:	d107      	bne.n	80042fc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f4:	4313      	orrs	r3, r2
 80042f6:	697a      	ldr	r2, [r7, #20]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	697a      	ldr	r2, [r7, #20]
 8004302:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	695b      	ldr	r3, [r3, #20]
 800430a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	f023 0307 	bic.w	r3, r3, #7
 8004312:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004318:	697a      	ldr	r2, [r7, #20]
 800431a:	4313      	orrs	r3, r2
 800431c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004322:	2b04      	cmp	r3, #4
 8004324:	d117      	bne.n	8004356 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800432a:	697a      	ldr	r2, [r7, #20]
 800432c:	4313      	orrs	r3, r2
 800432e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004334:	2b00      	cmp	r3, #0
 8004336:	d00e      	beq.n	8004356 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f000 fb01 	bl	8004940 <DMA_CheckFifoParam>
 800433e:	4603      	mov	r3, r0
 8004340:	2b00      	cmp	r3, #0
 8004342:	d008      	beq.n	8004356 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2240      	movs	r2, #64	; 0x40
 8004348:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2201      	movs	r2, #1
 800434e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004352:	2301      	movs	r3, #1
 8004354:	e016      	b.n	8004384 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	697a      	ldr	r2, [r7, #20]
 800435c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 fab8 	bl	80048d4 <DMA_CalcBaseAndBitshift>
 8004364:	4603      	mov	r3, r0
 8004366:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800436c:	223f      	movs	r2, #63	; 0x3f
 800436e:	409a      	lsls	r2, r3
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2201      	movs	r2, #1
 800437e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004382:	2300      	movs	r3, #0
}
 8004384:	4618      	mov	r0, r3
 8004386:	3718      	adds	r7, #24
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}
 800438c:	f010803f 	.word	0xf010803f

08004390 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b086      	sub	sp, #24
 8004394:	af00      	add	r7, sp, #0
 8004396:	60f8      	str	r0, [r7, #12]
 8004398:	60b9      	str	r1, [r7, #8]
 800439a:	607a      	str	r2, [r7, #4]
 800439c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800439e:	2300      	movs	r3, #0
 80043a0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043a6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d101      	bne.n	80043b6 <HAL_DMA_Start_IT+0x26>
 80043b2:	2302      	movs	r3, #2
 80043b4:	e040      	b.n	8004438 <HAL_DMA_Start_IT+0xa8>
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2201      	movs	r2, #1
 80043ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d12f      	bne.n	800442a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2202      	movs	r2, #2
 80043ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2200      	movs	r2, #0
 80043d6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	68b9      	ldr	r1, [r7, #8]
 80043de:	68f8      	ldr	r0, [r7, #12]
 80043e0:	f000 fa4a 	bl	8004878 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043e8:	223f      	movs	r2, #63	; 0x3f
 80043ea:	409a      	lsls	r2, r3
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f042 0216 	orr.w	r2, r2, #22
 80043fe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004404:	2b00      	cmp	r3, #0
 8004406:	d007      	beq.n	8004418 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f042 0208 	orr.w	r2, r2, #8
 8004416:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f042 0201 	orr.w	r2, r2, #1
 8004426:	601a      	str	r2, [r3, #0]
 8004428:	e005      	b.n	8004436 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2200      	movs	r2, #0
 800442e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004432:	2302      	movs	r3, #2
 8004434:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004436:	7dfb      	ldrb	r3, [r7, #23]
}
 8004438:	4618      	mov	r0, r3
 800443a:	3718      	adds	r7, #24
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}

08004440 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800444c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800444e:	f7ff fdaf 	bl	8003fb0 <HAL_GetTick>
 8004452:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800445a:	b2db      	uxtb	r3, r3
 800445c:	2b02      	cmp	r3, #2
 800445e:	d008      	beq.n	8004472 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2280      	movs	r2, #128	; 0x80
 8004464:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e052      	b.n	8004518 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f022 0216 	bic.w	r2, r2, #22
 8004480:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	695a      	ldr	r2, [r3, #20]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004490:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004496:	2b00      	cmp	r3, #0
 8004498:	d103      	bne.n	80044a2 <HAL_DMA_Abort+0x62>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d007      	beq.n	80044b2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f022 0208 	bic.w	r2, r2, #8
 80044b0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f022 0201 	bic.w	r2, r2, #1
 80044c0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80044c2:	e013      	b.n	80044ec <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80044c4:	f7ff fd74 	bl	8003fb0 <HAL_GetTick>
 80044c8:	4602      	mov	r2, r0
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	2b05      	cmp	r3, #5
 80044d0:	d90c      	bls.n	80044ec <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2220      	movs	r2, #32
 80044d6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2203      	movs	r2, #3
 80044dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80044e8:	2303      	movs	r3, #3
 80044ea:	e015      	b.n	8004518 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0301 	and.w	r3, r3, #1
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d1e4      	bne.n	80044c4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044fe:	223f      	movs	r2, #63	; 0x3f
 8004500:	409a      	lsls	r2, r3
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2201      	movs	r2, #1
 800450a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004516:	2300      	movs	r3, #0
}
 8004518:	4618      	mov	r0, r3
 800451a:	3710      	adds	r7, #16
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}

08004520 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800452e:	b2db      	uxtb	r3, r3
 8004530:	2b02      	cmp	r3, #2
 8004532:	d004      	beq.n	800453e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2280      	movs	r2, #128	; 0x80
 8004538:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e00c      	b.n	8004558 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2205      	movs	r2, #5
 8004542:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f022 0201 	bic.w	r2, r2, #1
 8004554:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004556:	2300      	movs	r3, #0
}
 8004558:	4618      	mov	r0, r3
 800455a:	370c      	adds	r7, #12
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr

08004564 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b086      	sub	sp, #24
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800456c:	2300      	movs	r3, #0
 800456e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004570:	4b92      	ldr	r3, [pc, #584]	; (80047bc <HAL_DMA_IRQHandler+0x258>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a92      	ldr	r2, [pc, #584]	; (80047c0 <HAL_DMA_IRQHandler+0x25c>)
 8004576:	fba2 2303 	umull	r2, r3, r2, r3
 800457a:	0a9b      	lsrs	r3, r3, #10
 800457c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004582:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800458e:	2208      	movs	r2, #8
 8004590:	409a      	lsls	r2, r3
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	4013      	ands	r3, r2
 8004596:	2b00      	cmp	r3, #0
 8004598:	d01a      	beq.n	80045d0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0304 	and.w	r3, r3, #4
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d013      	beq.n	80045d0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f022 0204 	bic.w	r2, r2, #4
 80045b6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045bc:	2208      	movs	r2, #8
 80045be:	409a      	lsls	r2, r3
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045c8:	f043 0201 	orr.w	r2, r3, #1
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045d4:	2201      	movs	r2, #1
 80045d6:	409a      	lsls	r2, r3
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	4013      	ands	r3, r2
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d012      	beq.n	8004606 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	695b      	ldr	r3, [r3, #20]
 80045e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00b      	beq.n	8004606 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045f2:	2201      	movs	r2, #1
 80045f4:	409a      	lsls	r2, r3
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045fe:	f043 0202 	orr.w	r2, r3, #2
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800460a:	2204      	movs	r2, #4
 800460c:	409a      	lsls	r2, r3
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	4013      	ands	r3, r2
 8004612:	2b00      	cmp	r3, #0
 8004614:	d012      	beq.n	800463c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0302 	and.w	r3, r3, #2
 8004620:	2b00      	cmp	r3, #0
 8004622:	d00b      	beq.n	800463c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004628:	2204      	movs	r2, #4
 800462a:	409a      	lsls	r2, r3
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004634:	f043 0204 	orr.w	r2, r3, #4
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004640:	2210      	movs	r2, #16
 8004642:	409a      	lsls	r2, r3
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	4013      	ands	r3, r2
 8004648:	2b00      	cmp	r3, #0
 800464a:	d043      	beq.n	80046d4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0308 	and.w	r3, r3, #8
 8004656:	2b00      	cmp	r3, #0
 8004658:	d03c      	beq.n	80046d4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800465e:	2210      	movs	r2, #16
 8004660:	409a      	lsls	r2, r3
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004670:	2b00      	cmp	r3, #0
 8004672:	d018      	beq.n	80046a6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d108      	bne.n	8004694 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004686:	2b00      	cmp	r3, #0
 8004688:	d024      	beq.n	80046d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	4798      	blx	r3
 8004692:	e01f      	b.n	80046d4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004698:	2b00      	cmp	r3, #0
 800469a:	d01b      	beq.n	80046d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	4798      	blx	r3
 80046a4:	e016      	b.n	80046d4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d107      	bne.n	80046c4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f022 0208 	bic.w	r2, r2, #8
 80046c2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d003      	beq.n	80046d4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046d8:	2220      	movs	r2, #32
 80046da:	409a      	lsls	r2, r3
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	4013      	ands	r3, r2
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	f000 808e 	beq.w	8004802 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0310 	and.w	r3, r3, #16
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	f000 8086 	beq.w	8004802 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046fa:	2220      	movs	r2, #32
 80046fc:	409a      	lsls	r2, r3
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004708:	b2db      	uxtb	r3, r3
 800470a:	2b05      	cmp	r3, #5
 800470c:	d136      	bne.n	800477c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f022 0216 	bic.w	r2, r2, #22
 800471c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	695a      	ldr	r2, [r3, #20]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800472c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004732:	2b00      	cmp	r3, #0
 8004734:	d103      	bne.n	800473e <HAL_DMA_IRQHandler+0x1da>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800473a:	2b00      	cmp	r3, #0
 800473c:	d007      	beq.n	800474e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f022 0208 	bic.w	r2, r2, #8
 800474c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004752:	223f      	movs	r2, #63	; 0x3f
 8004754:	409a      	lsls	r2, r3
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2201      	movs	r2, #1
 800475e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800476e:	2b00      	cmp	r3, #0
 8004770:	d07d      	beq.n	800486e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	4798      	blx	r3
        }
        return;
 800477a:	e078      	b.n	800486e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d01c      	beq.n	80047c4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004794:	2b00      	cmp	r3, #0
 8004796:	d108      	bne.n	80047aa <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800479c:	2b00      	cmp	r3, #0
 800479e:	d030      	beq.n	8004802 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	4798      	blx	r3
 80047a8:	e02b      	b.n	8004802 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d027      	beq.n	8004802 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	4798      	blx	r3
 80047ba:	e022      	b.n	8004802 <HAL_DMA_IRQHandler+0x29e>
 80047bc:	20000008 	.word	0x20000008
 80047c0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d10f      	bne.n	80047f2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f022 0210 	bic.w	r2, r2, #16
 80047e0:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2201      	movs	r2, #1
 80047e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d003      	beq.n	8004802 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004806:	2b00      	cmp	r3, #0
 8004808:	d032      	beq.n	8004870 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800480e:	f003 0301 	and.w	r3, r3, #1
 8004812:	2b00      	cmp	r3, #0
 8004814:	d022      	beq.n	800485c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2205      	movs	r2, #5
 800481a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f022 0201 	bic.w	r2, r2, #1
 800482c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	3301      	adds	r3, #1
 8004832:	60bb      	str	r3, [r7, #8]
 8004834:	697a      	ldr	r2, [r7, #20]
 8004836:	429a      	cmp	r2, r3
 8004838:	d307      	bcc.n	800484a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0301 	and.w	r3, r3, #1
 8004844:	2b00      	cmp	r3, #0
 8004846:	d1f2      	bne.n	800482e <HAL_DMA_IRQHandler+0x2ca>
 8004848:	e000      	b.n	800484c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800484a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004860:	2b00      	cmp	r3, #0
 8004862:	d005      	beq.n	8004870 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	4798      	blx	r3
 800486c:	e000      	b.n	8004870 <HAL_DMA_IRQHandler+0x30c>
        return;
 800486e:	bf00      	nop
    }
  }
}
 8004870:	3718      	adds	r7, #24
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop

08004878 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004878:	b480      	push	{r7}
 800487a:	b085      	sub	sp, #20
 800487c:	af00      	add	r7, sp, #0
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	607a      	str	r2, [r7, #4]
 8004884:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004894:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	683a      	ldr	r2, [r7, #0]
 800489c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	2b40      	cmp	r3, #64	; 0x40
 80048a4:	d108      	bne.n	80048b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	68ba      	ldr	r2, [r7, #8]
 80048b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80048b6:	e007      	b.n	80048c8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	68ba      	ldr	r2, [r7, #8]
 80048be:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	60da      	str	r2, [r3, #12]
}
 80048c8:	bf00      	nop
 80048ca:	3714      	adds	r7, #20
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b085      	sub	sp, #20
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	3b10      	subs	r3, #16
 80048e4:	4a14      	ldr	r2, [pc, #80]	; (8004938 <DMA_CalcBaseAndBitshift+0x64>)
 80048e6:	fba2 2303 	umull	r2, r3, r2, r3
 80048ea:	091b      	lsrs	r3, r3, #4
 80048ec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80048ee:	4a13      	ldr	r2, [pc, #76]	; (800493c <DMA_CalcBaseAndBitshift+0x68>)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	4413      	add	r3, r2
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	461a      	mov	r2, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2b03      	cmp	r3, #3
 8004900:	d909      	bls.n	8004916 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800490a:	f023 0303 	bic.w	r3, r3, #3
 800490e:	1d1a      	adds	r2, r3, #4
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	659a      	str	r2, [r3, #88]	; 0x58
 8004914:	e007      	b.n	8004926 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800491e:	f023 0303 	bic.w	r3, r3, #3
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800492a:	4618      	mov	r0, r3
 800492c:	3714      	adds	r7, #20
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr
 8004936:	bf00      	nop
 8004938:	aaaaaaab 	.word	0xaaaaaaab
 800493c:	0800f450 	.word	0x0800f450

08004940 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004940:	b480      	push	{r7}
 8004942:	b085      	sub	sp, #20
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004948:	2300      	movs	r3, #0
 800494a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004950:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	699b      	ldr	r3, [r3, #24]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d11f      	bne.n	800499a <DMA_CheckFifoParam+0x5a>
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	2b03      	cmp	r3, #3
 800495e:	d856      	bhi.n	8004a0e <DMA_CheckFifoParam+0xce>
 8004960:	a201      	add	r2, pc, #4	; (adr r2, 8004968 <DMA_CheckFifoParam+0x28>)
 8004962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004966:	bf00      	nop
 8004968:	08004979 	.word	0x08004979
 800496c:	0800498b 	.word	0x0800498b
 8004970:	08004979 	.word	0x08004979
 8004974:	08004a0f 	.word	0x08004a0f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800497c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004980:	2b00      	cmp	r3, #0
 8004982:	d046      	beq.n	8004a12 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004988:	e043      	b.n	8004a12 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800498e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004992:	d140      	bne.n	8004a16 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004998:	e03d      	b.n	8004a16 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	699b      	ldr	r3, [r3, #24]
 800499e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049a2:	d121      	bne.n	80049e8 <DMA_CheckFifoParam+0xa8>
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	2b03      	cmp	r3, #3
 80049a8:	d837      	bhi.n	8004a1a <DMA_CheckFifoParam+0xda>
 80049aa:	a201      	add	r2, pc, #4	; (adr r2, 80049b0 <DMA_CheckFifoParam+0x70>)
 80049ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049b0:	080049c1 	.word	0x080049c1
 80049b4:	080049c7 	.word	0x080049c7
 80049b8:	080049c1 	.word	0x080049c1
 80049bc:	080049d9 	.word	0x080049d9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	73fb      	strb	r3, [r7, #15]
      break;
 80049c4:	e030      	b.n	8004a28 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d025      	beq.n	8004a1e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049d6:	e022      	b.n	8004a1e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049dc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80049e0:	d11f      	bne.n	8004a22 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80049e6:	e01c      	b.n	8004a22 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	2b02      	cmp	r3, #2
 80049ec:	d903      	bls.n	80049f6 <DMA_CheckFifoParam+0xb6>
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	2b03      	cmp	r3, #3
 80049f2:	d003      	beq.n	80049fc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80049f4:	e018      	b.n	8004a28 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	73fb      	strb	r3, [r7, #15]
      break;
 80049fa:	e015      	b.n	8004a28 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d00e      	beq.n	8004a26 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	73fb      	strb	r3, [r7, #15]
      break;
 8004a0c:	e00b      	b.n	8004a26 <DMA_CheckFifoParam+0xe6>
      break;
 8004a0e:	bf00      	nop
 8004a10:	e00a      	b.n	8004a28 <DMA_CheckFifoParam+0xe8>
      break;
 8004a12:	bf00      	nop
 8004a14:	e008      	b.n	8004a28 <DMA_CheckFifoParam+0xe8>
      break;
 8004a16:	bf00      	nop
 8004a18:	e006      	b.n	8004a28 <DMA_CheckFifoParam+0xe8>
      break;
 8004a1a:	bf00      	nop
 8004a1c:	e004      	b.n	8004a28 <DMA_CheckFifoParam+0xe8>
      break;
 8004a1e:	bf00      	nop
 8004a20:	e002      	b.n	8004a28 <DMA_CheckFifoParam+0xe8>
      break;   
 8004a22:	bf00      	nop
 8004a24:	e000      	b.n	8004a28 <DMA_CheckFifoParam+0xe8>
      break;
 8004a26:	bf00      	nop
    }
  } 
  
  return status; 
 8004a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3714      	adds	r7, #20
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr
 8004a36:	bf00      	nop

08004a38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b089      	sub	sp, #36	; 0x24
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004a42:	2300      	movs	r3, #0
 8004a44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004a46:	2300      	movs	r3, #0
 8004a48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a4e:	2300      	movs	r3, #0
 8004a50:	61fb      	str	r3, [r7, #28]
 8004a52:	e16b      	b.n	8004d2c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004a54:	2201      	movs	r2, #1
 8004a56:	69fb      	ldr	r3, [r7, #28]
 8004a58:	fa02 f303 	lsl.w	r3, r2, r3
 8004a5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	697a      	ldr	r2, [r7, #20]
 8004a64:	4013      	ands	r3, r2
 8004a66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004a68:	693a      	ldr	r2, [r7, #16]
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	f040 815a 	bne.w	8004d26 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	f003 0303 	and.w	r3, r3, #3
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d005      	beq.n	8004a8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004a86:	2b02      	cmp	r3, #2
 8004a88:	d130      	bne.n	8004aec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004a90:	69fb      	ldr	r3, [r7, #28]
 8004a92:	005b      	lsls	r3, r3, #1
 8004a94:	2203      	movs	r2, #3
 8004a96:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9a:	43db      	mvns	r3, r3
 8004a9c:	69ba      	ldr	r2, [r7, #24]
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	68da      	ldr	r2, [r3, #12]
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	005b      	lsls	r3, r3, #1
 8004aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8004aae:	69ba      	ldr	r2, [r7, #24]
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	69ba      	ldr	r2, [r7, #24]
 8004ab8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac8:	43db      	mvns	r3, r3
 8004aca:	69ba      	ldr	r2, [r7, #24]
 8004acc:	4013      	ands	r3, r2
 8004ace:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	091b      	lsrs	r3, r3, #4
 8004ad6:	f003 0201 	and.w	r2, r3, #1
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae0:	69ba      	ldr	r2, [r7, #24]
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	69ba      	ldr	r2, [r7, #24]
 8004aea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	f003 0303 	and.w	r3, r3, #3
 8004af4:	2b03      	cmp	r3, #3
 8004af6:	d017      	beq.n	8004b28 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004afe:	69fb      	ldr	r3, [r7, #28]
 8004b00:	005b      	lsls	r3, r3, #1
 8004b02:	2203      	movs	r2, #3
 8004b04:	fa02 f303 	lsl.w	r3, r2, r3
 8004b08:	43db      	mvns	r3, r3
 8004b0a:	69ba      	ldr	r2, [r7, #24]
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	689a      	ldr	r2, [r3, #8]
 8004b14:	69fb      	ldr	r3, [r7, #28]
 8004b16:	005b      	lsls	r3, r3, #1
 8004b18:	fa02 f303 	lsl.w	r3, r2, r3
 8004b1c:	69ba      	ldr	r2, [r7, #24]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	69ba      	ldr	r2, [r7, #24]
 8004b26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	f003 0303 	and.w	r3, r3, #3
 8004b30:	2b02      	cmp	r3, #2
 8004b32:	d123      	bne.n	8004b7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	08da      	lsrs	r2, r3, #3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	3208      	adds	r2, #8
 8004b3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	f003 0307 	and.w	r3, r3, #7
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	220f      	movs	r2, #15
 8004b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b50:	43db      	mvns	r3, r3
 8004b52:	69ba      	ldr	r2, [r7, #24]
 8004b54:	4013      	ands	r3, r2
 8004b56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	691a      	ldr	r2, [r3, #16]
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	f003 0307 	and.w	r3, r3, #7
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	fa02 f303 	lsl.w	r3, r2, r3
 8004b68:	69ba      	ldr	r2, [r7, #24]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004b6e:	69fb      	ldr	r3, [r7, #28]
 8004b70:	08da      	lsrs	r2, r3, #3
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	3208      	adds	r2, #8
 8004b76:	69b9      	ldr	r1, [r7, #24]
 8004b78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	005b      	lsls	r3, r3, #1
 8004b86:	2203      	movs	r2, #3
 8004b88:	fa02 f303 	lsl.w	r3, r2, r3
 8004b8c:	43db      	mvns	r3, r3
 8004b8e:	69ba      	ldr	r2, [r7, #24]
 8004b90:	4013      	ands	r3, r2
 8004b92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	f003 0203 	and.w	r2, r3, #3
 8004b9c:	69fb      	ldr	r3, [r7, #28]
 8004b9e:	005b      	lsls	r3, r3, #1
 8004ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba4:	69ba      	ldr	r2, [r7, #24]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	69ba      	ldr	r2, [r7, #24]
 8004bae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	f000 80b4 	beq.w	8004d26 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	60fb      	str	r3, [r7, #12]
 8004bc2:	4b60      	ldr	r3, [pc, #384]	; (8004d44 <HAL_GPIO_Init+0x30c>)
 8004bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bc6:	4a5f      	ldr	r2, [pc, #380]	; (8004d44 <HAL_GPIO_Init+0x30c>)
 8004bc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004bcc:	6453      	str	r3, [r2, #68]	; 0x44
 8004bce:	4b5d      	ldr	r3, [pc, #372]	; (8004d44 <HAL_GPIO_Init+0x30c>)
 8004bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bd6:	60fb      	str	r3, [r7, #12]
 8004bd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004bda:	4a5b      	ldr	r2, [pc, #364]	; (8004d48 <HAL_GPIO_Init+0x310>)
 8004bdc:	69fb      	ldr	r3, [r7, #28]
 8004bde:	089b      	lsrs	r3, r3, #2
 8004be0:	3302      	adds	r3, #2
 8004be2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004be6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004be8:	69fb      	ldr	r3, [r7, #28]
 8004bea:	f003 0303 	and.w	r3, r3, #3
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	220f      	movs	r2, #15
 8004bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf6:	43db      	mvns	r3, r3
 8004bf8:	69ba      	ldr	r2, [r7, #24]
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a52      	ldr	r2, [pc, #328]	; (8004d4c <HAL_GPIO_Init+0x314>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d02b      	beq.n	8004c5e <HAL_GPIO_Init+0x226>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4a51      	ldr	r2, [pc, #324]	; (8004d50 <HAL_GPIO_Init+0x318>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d025      	beq.n	8004c5a <HAL_GPIO_Init+0x222>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a50      	ldr	r2, [pc, #320]	; (8004d54 <HAL_GPIO_Init+0x31c>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d01f      	beq.n	8004c56 <HAL_GPIO_Init+0x21e>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4a4f      	ldr	r2, [pc, #316]	; (8004d58 <HAL_GPIO_Init+0x320>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d019      	beq.n	8004c52 <HAL_GPIO_Init+0x21a>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a4e      	ldr	r2, [pc, #312]	; (8004d5c <HAL_GPIO_Init+0x324>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d013      	beq.n	8004c4e <HAL_GPIO_Init+0x216>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4a4d      	ldr	r2, [pc, #308]	; (8004d60 <HAL_GPIO_Init+0x328>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d00d      	beq.n	8004c4a <HAL_GPIO_Init+0x212>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a4c      	ldr	r2, [pc, #304]	; (8004d64 <HAL_GPIO_Init+0x32c>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d007      	beq.n	8004c46 <HAL_GPIO_Init+0x20e>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a4b      	ldr	r2, [pc, #300]	; (8004d68 <HAL_GPIO_Init+0x330>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d101      	bne.n	8004c42 <HAL_GPIO_Init+0x20a>
 8004c3e:	2307      	movs	r3, #7
 8004c40:	e00e      	b.n	8004c60 <HAL_GPIO_Init+0x228>
 8004c42:	2308      	movs	r3, #8
 8004c44:	e00c      	b.n	8004c60 <HAL_GPIO_Init+0x228>
 8004c46:	2306      	movs	r3, #6
 8004c48:	e00a      	b.n	8004c60 <HAL_GPIO_Init+0x228>
 8004c4a:	2305      	movs	r3, #5
 8004c4c:	e008      	b.n	8004c60 <HAL_GPIO_Init+0x228>
 8004c4e:	2304      	movs	r3, #4
 8004c50:	e006      	b.n	8004c60 <HAL_GPIO_Init+0x228>
 8004c52:	2303      	movs	r3, #3
 8004c54:	e004      	b.n	8004c60 <HAL_GPIO_Init+0x228>
 8004c56:	2302      	movs	r3, #2
 8004c58:	e002      	b.n	8004c60 <HAL_GPIO_Init+0x228>
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e000      	b.n	8004c60 <HAL_GPIO_Init+0x228>
 8004c5e:	2300      	movs	r3, #0
 8004c60:	69fa      	ldr	r2, [r7, #28]
 8004c62:	f002 0203 	and.w	r2, r2, #3
 8004c66:	0092      	lsls	r2, r2, #2
 8004c68:	4093      	lsls	r3, r2
 8004c6a:	69ba      	ldr	r2, [r7, #24]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004c70:	4935      	ldr	r1, [pc, #212]	; (8004d48 <HAL_GPIO_Init+0x310>)
 8004c72:	69fb      	ldr	r3, [r7, #28]
 8004c74:	089b      	lsrs	r3, r3, #2
 8004c76:	3302      	adds	r3, #2
 8004c78:	69ba      	ldr	r2, [r7, #24]
 8004c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004c7e:	4b3b      	ldr	r3, [pc, #236]	; (8004d6c <HAL_GPIO_Init+0x334>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	43db      	mvns	r3, r3
 8004c88:	69ba      	ldr	r2, [r7, #24]
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d003      	beq.n	8004ca2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004c9a:	69ba      	ldr	r2, [r7, #24]
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004ca2:	4a32      	ldr	r2, [pc, #200]	; (8004d6c <HAL_GPIO_Init+0x334>)
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004ca8:	4b30      	ldr	r3, [pc, #192]	; (8004d6c <HAL_GPIO_Init+0x334>)
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	43db      	mvns	r3, r3
 8004cb2:	69ba      	ldr	r2, [r7, #24]
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d003      	beq.n	8004ccc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004cc4:	69ba      	ldr	r2, [r7, #24]
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004ccc:	4a27      	ldr	r2, [pc, #156]	; (8004d6c <HAL_GPIO_Init+0x334>)
 8004cce:	69bb      	ldr	r3, [r7, #24]
 8004cd0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004cd2:	4b26      	ldr	r3, [pc, #152]	; (8004d6c <HAL_GPIO_Init+0x334>)
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	43db      	mvns	r3, r3
 8004cdc:	69ba      	ldr	r2, [r7, #24]
 8004cde:	4013      	ands	r3, r2
 8004ce0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d003      	beq.n	8004cf6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004cee:	69ba      	ldr	r2, [r7, #24]
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004cf6:	4a1d      	ldr	r2, [pc, #116]	; (8004d6c <HAL_GPIO_Init+0x334>)
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004cfc:	4b1b      	ldr	r3, [pc, #108]	; (8004d6c <HAL_GPIO_Init+0x334>)
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	43db      	mvns	r3, r3
 8004d06:	69ba      	ldr	r2, [r7, #24]
 8004d08:	4013      	ands	r3, r2
 8004d0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d003      	beq.n	8004d20 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004d18:	69ba      	ldr	r2, [r7, #24]
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004d20:	4a12      	ldr	r2, [pc, #72]	; (8004d6c <HAL_GPIO_Init+0x334>)
 8004d22:	69bb      	ldr	r3, [r7, #24]
 8004d24:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d26:	69fb      	ldr	r3, [r7, #28]
 8004d28:	3301      	adds	r3, #1
 8004d2a:	61fb      	str	r3, [r7, #28]
 8004d2c:	69fb      	ldr	r3, [r7, #28]
 8004d2e:	2b0f      	cmp	r3, #15
 8004d30:	f67f ae90 	bls.w	8004a54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004d34:	bf00      	nop
 8004d36:	bf00      	nop
 8004d38:	3724      	adds	r7, #36	; 0x24
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr
 8004d42:	bf00      	nop
 8004d44:	40023800 	.word	0x40023800
 8004d48:	40013800 	.word	0x40013800
 8004d4c:	40020000 	.word	0x40020000
 8004d50:	40020400 	.word	0x40020400
 8004d54:	40020800 	.word	0x40020800
 8004d58:	40020c00 	.word	0x40020c00
 8004d5c:	40021000 	.word	0x40021000
 8004d60:	40021400 	.word	0x40021400
 8004d64:	40021800 	.word	0x40021800
 8004d68:	40021c00 	.word	0x40021c00
 8004d6c:	40013c00 	.word	0x40013c00

08004d70 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b085      	sub	sp, #20
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	460b      	mov	r3, r1
 8004d7a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	691a      	ldr	r2, [r3, #16]
 8004d80:	887b      	ldrh	r3, [r7, #2]
 8004d82:	4013      	ands	r3, r2
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d002      	beq.n	8004d8e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	73fb      	strb	r3, [r7, #15]
 8004d8c:	e001      	b.n	8004d92 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3714      	adds	r7, #20
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	460b      	mov	r3, r1
 8004daa:	807b      	strh	r3, [r7, #2]
 8004dac:	4613      	mov	r3, r2
 8004dae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004db0:	787b      	ldrb	r3, [r7, #1]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d003      	beq.n	8004dbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004db6:	887a      	ldrh	r2, [r7, #2]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004dbc:	e003      	b.n	8004dc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004dbe:	887b      	ldrh	r3, [r7, #2]
 8004dc0:	041a      	lsls	r2, r3, #16
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	619a      	str	r2, [r3, #24]
}
 8004dc6:	bf00      	nop
 8004dc8:	370c      	adds	r7, #12
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr
	...

08004dd4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b082      	sub	sp, #8
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	4603      	mov	r3, r0
 8004ddc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004dde:	4b08      	ldr	r3, [pc, #32]	; (8004e00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004de0:	695a      	ldr	r2, [r3, #20]
 8004de2:	88fb      	ldrh	r3, [r7, #6]
 8004de4:	4013      	ands	r3, r2
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d006      	beq.n	8004df8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004dea:	4a05      	ldr	r2, [pc, #20]	; (8004e00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004dec:	88fb      	ldrh	r3, [r7, #6]
 8004dee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004df0:	88fb      	ldrh	r3, [r7, #6]
 8004df2:	4618      	mov	r0, r3
 8004df4:	f7fe f934 	bl	8003060 <HAL_GPIO_EXTI_Callback>
  }
}
 8004df8:	bf00      	nop
 8004dfa:	3708      	adds	r7, #8
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}
 8004e00:	40013c00 	.word	0x40013c00

08004e04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d101      	bne.n	8004e16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e12b      	b.n	800506e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d106      	bne.n	8004e30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f7fe fd6a 	bl	8003904 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2224      	movs	r2, #36	; 0x24
 8004e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f022 0201 	bic.w	r2, r2, #1
 8004e46:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e56:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e66:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004e68:	f001 fbd8 	bl	800661c <HAL_RCC_GetPCLK1Freq>
 8004e6c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	4a81      	ldr	r2, [pc, #516]	; (8005078 <HAL_I2C_Init+0x274>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d807      	bhi.n	8004e88 <HAL_I2C_Init+0x84>
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	4a80      	ldr	r2, [pc, #512]	; (800507c <HAL_I2C_Init+0x278>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	bf94      	ite	ls
 8004e80:	2301      	movls	r3, #1
 8004e82:	2300      	movhi	r3, #0
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	e006      	b.n	8004e96 <HAL_I2C_Init+0x92>
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	4a7d      	ldr	r2, [pc, #500]	; (8005080 <HAL_I2C_Init+0x27c>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	bf94      	ite	ls
 8004e90:	2301      	movls	r3, #1
 8004e92:	2300      	movhi	r3, #0
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d001      	beq.n	8004e9e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e0e7      	b.n	800506e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	4a78      	ldr	r2, [pc, #480]	; (8005084 <HAL_I2C_Init+0x280>)
 8004ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ea6:	0c9b      	lsrs	r3, r3, #18
 8004ea8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	68ba      	ldr	r2, [r7, #8]
 8004eba:	430a      	orrs	r2, r1
 8004ebc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	6a1b      	ldr	r3, [r3, #32]
 8004ec4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	4a6a      	ldr	r2, [pc, #424]	; (8005078 <HAL_I2C_Init+0x274>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d802      	bhi.n	8004ed8 <HAL_I2C_Init+0xd4>
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	e009      	b.n	8004eec <HAL_I2C_Init+0xe8>
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004ede:	fb02 f303 	mul.w	r3, r2, r3
 8004ee2:	4a69      	ldr	r2, [pc, #420]	; (8005088 <HAL_I2C_Init+0x284>)
 8004ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ee8:	099b      	lsrs	r3, r3, #6
 8004eea:	3301      	adds	r3, #1
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	6812      	ldr	r2, [r2, #0]
 8004ef0:	430b      	orrs	r3, r1
 8004ef2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	69db      	ldr	r3, [r3, #28]
 8004efa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004efe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	495c      	ldr	r1, [pc, #368]	; (8005078 <HAL_I2C_Init+0x274>)
 8004f08:	428b      	cmp	r3, r1
 8004f0a:	d819      	bhi.n	8004f40 <HAL_I2C_Init+0x13c>
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	1e59      	subs	r1, r3, #1
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	005b      	lsls	r3, r3, #1
 8004f16:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f1a:	1c59      	adds	r1, r3, #1
 8004f1c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004f20:	400b      	ands	r3, r1
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00a      	beq.n	8004f3c <HAL_I2C_Init+0x138>
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	1e59      	subs	r1, r3, #1
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	005b      	lsls	r3, r3, #1
 8004f30:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f34:	3301      	adds	r3, #1
 8004f36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f3a:	e051      	b.n	8004fe0 <HAL_I2C_Init+0x1dc>
 8004f3c:	2304      	movs	r3, #4
 8004f3e:	e04f      	b.n	8004fe0 <HAL_I2C_Init+0x1dc>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d111      	bne.n	8004f6c <HAL_I2C_Init+0x168>
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	1e58      	subs	r0, r3, #1
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6859      	ldr	r1, [r3, #4]
 8004f50:	460b      	mov	r3, r1
 8004f52:	005b      	lsls	r3, r3, #1
 8004f54:	440b      	add	r3, r1
 8004f56:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f5a:	3301      	adds	r3, #1
 8004f5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	bf0c      	ite	eq
 8004f64:	2301      	moveq	r3, #1
 8004f66:	2300      	movne	r3, #0
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	e012      	b.n	8004f92 <HAL_I2C_Init+0x18e>
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	1e58      	subs	r0, r3, #1
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6859      	ldr	r1, [r3, #4]
 8004f74:	460b      	mov	r3, r1
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	440b      	add	r3, r1
 8004f7a:	0099      	lsls	r1, r3, #2
 8004f7c:	440b      	add	r3, r1
 8004f7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f82:	3301      	adds	r3, #1
 8004f84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	bf0c      	ite	eq
 8004f8c:	2301      	moveq	r3, #1
 8004f8e:	2300      	movne	r3, #0
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d001      	beq.n	8004f9a <HAL_I2C_Init+0x196>
 8004f96:	2301      	movs	r3, #1
 8004f98:	e022      	b.n	8004fe0 <HAL_I2C_Init+0x1dc>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d10e      	bne.n	8004fc0 <HAL_I2C_Init+0x1bc>
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	1e58      	subs	r0, r3, #1
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6859      	ldr	r1, [r3, #4]
 8004faa:	460b      	mov	r3, r1
 8004fac:	005b      	lsls	r3, r3, #1
 8004fae:	440b      	add	r3, r1
 8004fb0:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fbe:	e00f      	b.n	8004fe0 <HAL_I2C_Init+0x1dc>
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	1e58      	subs	r0, r3, #1
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6859      	ldr	r1, [r3, #4]
 8004fc8:	460b      	mov	r3, r1
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	440b      	add	r3, r1
 8004fce:	0099      	lsls	r1, r3, #2
 8004fd0:	440b      	add	r3, r1
 8004fd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fd6:	3301      	adds	r3, #1
 8004fd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fdc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004fe0:	6879      	ldr	r1, [r7, #4]
 8004fe2:	6809      	ldr	r1, [r1, #0]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	69da      	ldr	r2, [r3, #28]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a1b      	ldr	r3, [r3, #32]
 8004ffa:	431a      	orrs	r2, r3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	430a      	orrs	r2, r1
 8005002:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800500e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	6911      	ldr	r1, [r2, #16]
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	68d2      	ldr	r2, [r2, #12]
 800501a:	4311      	orrs	r1, r2
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	6812      	ldr	r2, [r2, #0]
 8005020:	430b      	orrs	r3, r1
 8005022:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	695a      	ldr	r2, [r3, #20]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	699b      	ldr	r3, [r3, #24]
 8005036:	431a      	orrs	r2, r3
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	430a      	orrs	r2, r1
 800503e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f042 0201 	orr.w	r2, r2, #1
 800504e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2220      	movs	r2, #32
 800505a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800506c:	2300      	movs	r3, #0
}
 800506e:	4618      	mov	r0, r3
 8005070:	3710      	adds	r7, #16
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	000186a0 	.word	0x000186a0
 800507c:	001e847f 	.word	0x001e847f
 8005080:	003d08ff 	.word	0x003d08ff
 8005084:	431bde83 	.word	0x431bde83
 8005088:	10624dd3 	.word	0x10624dd3

0800508c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b088      	sub	sp, #32
 8005090:	af02      	add	r7, sp, #8
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	4608      	mov	r0, r1
 8005096:	4611      	mov	r1, r2
 8005098:	461a      	mov	r2, r3
 800509a:	4603      	mov	r3, r0
 800509c:	817b      	strh	r3, [r7, #10]
 800509e:	460b      	mov	r3, r1
 80050a0:	813b      	strh	r3, [r7, #8]
 80050a2:	4613      	mov	r3, r2
 80050a4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80050a6:	f7fe ff83 	bl	8003fb0 <HAL_GetTick>
 80050aa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	2b20      	cmp	r3, #32
 80050b6:	f040 80d9 	bne.w	800526c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	9300      	str	r3, [sp, #0]
 80050be:	2319      	movs	r3, #25
 80050c0:	2201      	movs	r2, #1
 80050c2:	496d      	ldr	r1, [pc, #436]	; (8005278 <HAL_I2C_Mem_Write+0x1ec>)
 80050c4:	68f8      	ldr	r0, [r7, #12]
 80050c6:	f000 fc7f 	bl	80059c8 <I2C_WaitOnFlagUntilTimeout>
 80050ca:	4603      	mov	r3, r0
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d001      	beq.n	80050d4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80050d0:	2302      	movs	r3, #2
 80050d2:	e0cc      	b.n	800526e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d101      	bne.n	80050e2 <HAL_I2C_Mem_Write+0x56>
 80050de:	2302      	movs	r3, #2
 80050e0:	e0c5      	b.n	800526e <HAL_I2C_Mem_Write+0x1e2>
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2201      	movs	r2, #1
 80050e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 0301 	and.w	r3, r3, #1
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d007      	beq.n	8005108 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f042 0201 	orr.w	r2, r2, #1
 8005106:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005116:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2221      	movs	r2, #33	; 0x21
 800511c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2240      	movs	r2, #64	; 0x40
 8005124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2200      	movs	r2, #0
 800512c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	6a3a      	ldr	r2, [r7, #32]
 8005132:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005138:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800513e:	b29a      	uxth	r2, r3
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	4a4d      	ldr	r2, [pc, #308]	; (800527c <HAL_I2C_Mem_Write+0x1f0>)
 8005148:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800514a:	88f8      	ldrh	r0, [r7, #6]
 800514c:	893a      	ldrh	r2, [r7, #8]
 800514e:	8979      	ldrh	r1, [r7, #10]
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	9301      	str	r3, [sp, #4]
 8005154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005156:	9300      	str	r3, [sp, #0]
 8005158:	4603      	mov	r3, r0
 800515a:	68f8      	ldr	r0, [r7, #12]
 800515c:	f000 fab6 	bl	80056cc <I2C_RequestMemoryWrite>
 8005160:	4603      	mov	r3, r0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d052      	beq.n	800520c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e081      	b.n	800526e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800516a:	697a      	ldr	r2, [r7, #20]
 800516c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800516e:	68f8      	ldr	r0, [r7, #12]
 8005170:	f000 fd00 	bl	8005b74 <I2C_WaitOnTXEFlagUntilTimeout>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d00d      	beq.n	8005196 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800517e:	2b04      	cmp	r3, #4
 8005180:	d107      	bne.n	8005192 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005190:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e06b      	b.n	800526e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519a:	781a      	ldrb	r2, [r3, #0]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a6:	1c5a      	adds	r2, r3, #1
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051b0:	3b01      	subs	r3, #1
 80051b2:	b29a      	uxth	r2, r3
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051bc:	b29b      	uxth	r3, r3
 80051be:	3b01      	subs	r3, #1
 80051c0:	b29a      	uxth	r2, r3
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	695b      	ldr	r3, [r3, #20]
 80051cc:	f003 0304 	and.w	r3, r3, #4
 80051d0:	2b04      	cmp	r3, #4
 80051d2:	d11b      	bne.n	800520c <HAL_I2C_Mem_Write+0x180>
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d017      	beq.n	800520c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e0:	781a      	ldrb	r2, [r3, #0]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ec:	1c5a      	adds	r2, r3, #1
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051f6:	3b01      	subs	r3, #1
 80051f8:	b29a      	uxth	r2, r3
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005202:	b29b      	uxth	r3, r3
 8005204:	3b01      	subs	r3, #1
 8005206:	b29a      	uxth	r2, r3
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005210:	2b00      	cmp	r3, #0
 8005212:	d1aa      	bne.n	800516a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005214:	697a      	ldr	r2, [r7, #20]
 8005216:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005218:	68f8      	ldr	r0, [r7, #12]
 800521a:	f000 fcec 	bl	8005bf6 <I2C_WaitOnBTFFlagUntilTimeout>
 800521e:	4603      	mov	r3, r0
 8005220:	2b00      	cmp	r3, #0
 8005222:	d00d      	beq.n	8005240 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005228:	2b04      	cmp	r3, #4
 800522a:	d107      	bne.n	800523c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800523a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	e016      	b.n	800526e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800524e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2220      	movs	r2, #32
 8005254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2200      	movs	r2, #0
 800525c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2200      	movs	r2, #0
 8005264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005268:	2300      	movs	r3, #0
 800526a:	e000      	b.n	800526e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800526c:	2302      	movs	r3, #2
  }
}
 800526e:	4618      	mov	r0, r3
 8005270:	3718      	adds	r7, #24
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}
 8005276:	bf00      	nop
 8005278:	00100002 	.word	0x00100002
 800527c:	ffff0000 	.word	0xffff0000

08005280 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b08c      	sub	sp, #48	; 0x30
 8005284:	af02      	add	r7, sp, #8
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	4608      	mov	r0, r1
 800528a:	4611      	mov	r1, r2
 800528c:	461a      	mov	r2, r3
 800528e:	4603      	mov	r3, r0
 8005290:	817b      	strh	r3, [r7, #10]
 8005292:	460b      	mov	r3, r1
 8005294:	813b      	strh	r3, [r7, #8]
 8005296:	4613      	mov	r3, r2
 8005298:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800529a:	f7fe fe89 	bl	8003fb0 <HAL_GetTick>
 800529e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052a6:	b2db      	uxtb	r3, r3
 80052a8:	2b20      	cmp	r3, #32
 80052aa:	f040 8208 	bne.w	80056be <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80052ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b0:	9300      	str	r3, [sp, #0]
 80052b2:	2319      	movs	r3, #25
 80052b4:	2201      	movs	r2, #1
 80052b6:	497b      	ldr	r1, [pc, #492]	; (80054a4 <HAL_I2C_Mem_Read+0x224>)
 80052b8:	68f8      	ldr	r0, [r7, #12]
 80052ba:	f000 fb85 	bl	80059c8 <I2C_WaitOnFlagUntilTimeout>
 80052be:	4603      	mov	r3, r0
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d001      	beq.n	80052c8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80052c4:	2302      	movs	r3, #2
 80052c6:	e1fb      	b.n	80056c0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d101      	bne.n	80052d6 <HAL_I2C_Mem_Read+0x56>
 80052d2:	2302      	movs	r3, #2
 80052d4:	e1f4      	b.n	80056c0 <HAL_I2C_Mem_Read+0x440>
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2201      	movs	r2, #1
 80052da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 0301 	and.w	r3, r3, #1
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d007      	beq.n	80052fc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f042 0201 	orr.w	r2, r2, #1
 80052fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800530a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2222      	movs	r2, #34	; 0x22
 8005310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2240      	movs	r2, #64	; 0x40
 8005318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2200      	movs	r2, #0
 8005320:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005326:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800532c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005332:	b29a      	uxth	r2, r3
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	4a5b      	ldr	r2, [pc, #364]	; (80054a8 <HAL_I2C_Mem_Read+0x228>)
 800533c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800533e:	88f8      	ldrh	r0, [r7, #6]
 8005340:	893a      	ldrh	r2, [r7, #8]
 8005342:	8979      	ldrh	r1, [r7, #10]
 8005344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005346:	9301      	str	r3, [sp, #4]
 8005348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800534a:	9300      	str	r3, [sp, #0]
 800534c:	4603      	mov	r3, r0
 800534e:	68f8      	ldr	r0, [r7, #12]
 8005350:	f000 fa52 	bl	80057f8 <I2C_RequestMemoryRead>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d001      	beq.n	800535e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	e1b0      	b.n	80056c0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005362:	2b00      	cmp	r3, #0
 8005364:	d113      	bne.n	800538e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005366:	2300      	movs	r3, #0
 8005368:	623b      	str	r3, [r7, #32]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	695b      	ldr	r3, [r3, #20]
 8005370:	623b      	str	r3, [r7, #32]
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	699b      	ldr	r3, [r3, #24]
 8005378:	623b      	str	r3, [r7, #32]
 800537a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800538a:	601a      	str	r2, [r3, #0]
 800538c:	e184      	b.n	8005698 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005392:	2b01      	cmp	r3, #1
 8005394:	d11b      	bne.n	80053ce <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053a6:	2300      	movs	r3, #0
 80053a8:	61fb      	str	r3, [r7, #28]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	695b      	ldr	r3, [r3, #20]
 80053b0:	61fb      	str	r3, [r7, #28]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	699b      	ldr	r3, [r3, #24]
 80053b8:	61fb      	str	r3, [r7, #28]
 80053ba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053ca:	601a      	str	r2, [r3, #0]
 80053cc:	e164      	b.n	8005698 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053d2:	2b02      	cmp	r3, #2
 80053d4:	d11b      	bne.n	800540e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053e4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053f6:	2300      	movs	r3, #0
 80053f8:	61bb      	str	r3, [r7, #24]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	695b      	ldr	r3, [r3, #20]
 8005400:	61bb      	str	r3, [r7, #24]
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	699b      	ldr	r3, [r3, #24]
 8005408:	61bb      	str	r3, [r7, #24]
 800540a:	69bb      	ldr	r3, [r7, #24]
 800540c:	e144      	b.n	8005698 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800540e:	2300      	movs	r3, #0
 8005410:	617b      	str	r3, [r7, #20]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	695b      	ldr	r3, [r3, #20]
 8005418:	617b      	str	r3, [r7, #20]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	699b      	ldr	r3, [r3, #24]
 8005420:	617b      	str	r3, [r7, #20]
 8005422:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005424:	e138      	b.n	8005698 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800542a:	2b03      	cmp	r3, #3
 800542c:	f200 80f1 	bhi.w	8005612 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005434:	2b01      	cmp	r3, #1
 8005436:	d123      	bne.n	8005480 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800543a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800543c:	68f8      	ldr	r0, [r7, #12]
 800543e:	f000 fc1b 	bl	8005c78 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005442:	4603      	mov	r3, r0
 8005444:	2b00      	cmp	r3, #0
 8005446:	d001      	beq.n	800544c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	e139      	b.n	80056c0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	691a      	ldr	r2, [r3, #16]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005456:	b2d2      	uxtb	r2, r2
 8005458:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545e:	1c5a      	adds	r2, r3, #1
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005468:	3b01      	subs	r3, #1
 800546a:	b29a      	uxth	r2, r3
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005474:	b29b      	uxth	r3, r3
 8005476:	3b01      	subs	r3, #1
 8005478:	b29a      	uxth	r2, r3
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800547e:	e10b      	b.n	8005698 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005484:	2b02      	cmp	r3, #2
 8005486:	d14e      	bne.n	8005526 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548a:	9300      	str	r3, [sp, #0]
 800548c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800548e:	2200      	movs	r2, #0
 8005490:	4906      	ldr	r1, [pc, #24]	; (80054ac <HAL_I2C_Mem_Read+0x22c>)
 8005492:	68f8      	ldr	r0, [r7, #12]
 8005494:	f000 fa98 	bl	80059c8 <I2C_WaitOnFlagUntilTimeout>
 8005498:	4603      	mov	r3, r0
 800549a:	2b00      	cmp	r3, #0
 800549c:	d008      	beq.n	80054b0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e10e      	b.n	80056c0 <HAL_I2C_Mem_Read+0x440>
 80054a2:	bf00      	nop
 80054a4:	00100002 	.word	0x00100002
 80054a8:	ffff0000 	.word	0xffff0000
 80054ac:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	691a      	ldr	r2, [r3, #16]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ca:	b2d2      	uxtb	r2, r2
 80054cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d2:	1c5a      	adds	r2, r3, #1
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054dc:	3b01      	subs	r3, #1
 80054de:	b29a      	uxth	r2, r3
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	3b01      	subs	r3, #1
 80054ec:	b29a      	uxth	r2, r3
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	691a      	ldr	r2, [r3, #16]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fc:	b2d2      	uxtb	r2, r2
 80054fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005504:	1c5a      	adds	r2, r3, #1
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800550e:	3b01      	subs	r3, #1
 8005510:	b29a      	uxth	r2, r3
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800551a:	b29b      	uxth	r3, r3
 800551c:	3b01      	subs	r3, #1
 800551e:	b29a      	uxth	r2, r3
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005524:	e0b8      	b.n	8005698 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005528:	9300      	str	r3, [sp, #0]
 800552a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800552c:	2200      	movs	r2, #0
 800552e:	4966      	ldr	r1, [pc, #408]	; (80056c8 <HAL_I2C_Mem_Read+0x448>)
 8005530:	68f8      	ldr	r0, [r7, #12]
 8005532:	f000 fa49 	bl	80059c8 <I2C_WaitOnFlagUntilTimeout>
 8005536:	4603      	mov	r3, r0
 8005538:	2b00      	cmp	r3, #0
 800553a:	d001      	beq.n	8005540 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	e0bf      	b.n	80056c0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800554e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	691a      	ldr	r2, [r3, #16]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555a:	b2d2      	uxtb	r2, r2
 800555c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005562:	1c5a      	adds	r2, r3, #1
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800556c:	3b01      	subs	r3, #1
 800556e:	b29a      	uxth	r2, r3
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005578:	b29b      	uxth	r3, r3
 800557a:	3b01      	subs	r3, #1
 800557c:	b29a      	uxth	r2, r3
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005584:	9300      	str	r3, [sp, #0]
 8005586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005588:	2200      	movs	r2, #0
 800558a:	494f      	ldr	r1, [pc, #316]	; (80056c8 <HAL_I2C_Mem_Read+0x448>)
 800558c:	68f8      	ldr	r0, [r7, #12]
 800558e:	f000 fa1b 	bl	80059c8 <I2C_WaitOnFlagUntilTimeout>
 8005592:	4603      	mov	r3, r0
 8005594:	2b00      	cmp	r3, #0
 8005596:	d001      	beq.n	800559c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	e091      	b.n	80056c0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	691a      	ldr	r2, [r3, #16]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b6:	b2d2      	uxtb	r2, r2
 80055b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055be:	1c5a      	adds	r2, r3, #1
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055c8:	3b01      	subs	r3, #1
 80055ca:	b29a      	uxth	r2, r3
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	3b01      	subs	r3, #1
 80055d8:	b29a      	uxth	r2, r3
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	691a      	ldr	r2, [r3, #16]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e8:	b2d2      	uxtb	r2, r2
 80055ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f0:	1c5a      	adds	r2, r3, #1
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055fa:	3b01      	subs	r3, #1
 80055fc:	b29a      	uxth	r2, r3
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005606:	b29b      	uxth	r3, r3
 8005608:	3b01      	subs	r3, #1
 800560a:	b29a      	uxth	r2, r3
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005610:	e042      	b.n	8005698 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005612:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005614:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005616:	68f8      	ldr	r0, [r7, #12]
 8005618:	f000 fb2e 	bl	8005c78 <I2C_WaitOnRXNEFlagUntilTimeout>
 800561c:	4603      	mov	r3, r0
 800561e:	2b00      	cmp	r3, #0
 8005620:	d001      	beq.n	8005626 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e04c      	b.n	80056c0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	691a      	ldr	r2, [r3, #16]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005630:	b2d2      	uxtb	r2, r2
 8005632:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005638:	1c5a      	adds	r2, r3, #1
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005642:	3b01      	subs	r3, #1
 8005644:	b29a      	uxth	r2, r3
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800564e:	b29b      	uxth	r3, r3
 8005650:	3b01      	subs	r3, #1
 8005652:	b29a      	uxth	r2, r3
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	695b      	ldr	r3, [r3, #20]
 800565e:	f003 0304 	and.w	r3, r3, #4
 8005662:	2b04      	cmp	r3, #4
 8005664:	d118      	bne.n	8005698 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	691a      	ldr	r2, [r3, #16]
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005670:	b2d2      	uxtb	r2, r2
 8005672:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005678:	1c5a      	adds	r2, r3, #1
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005682:	3b01      	subs	r3, #1
 8005684:	b29a      	uxth	r2, r3
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800568e:	b29b      	uxth	r3, r3
 8005690:	3b01      	subs	r3, #1
 8005692:	b29a      	uxth	r2, r3
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800569c:	2b00      	cmp	r3, #0
 800569e:	f47f aec2 	bne.w	8005426 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2220      	movs	r2, #32
 80056a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2200      	movs	r2, #0
 80056ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2200      	movs	r2, #0
 80056b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80056ba:	2300      	movs	r3, #0
 80056bc:	e000      	b.n	80056c0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80056be:	2302      	movs	r3, #2
  }
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3728      	adds	r7, #40	; 0x28
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}
 80056c8:	00010004 	.word	0x00010004

080056cc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b088      	sub	sp, #32
 80056d0:	af02      	add	r7, sp, #8
 80056d2:	60f8      	str	r0, [r7, #12]
 80056d4:	4608      	mov	r0, r1
 80056d6:	4611      	mov	r1, r2
 80056d8:	461a      	mov	r2, r3
 80056da:	4603      	mov	r3, r0
 80056dc:	817b      	strh	r3, [r7, #10]
 80056de:	460b      	mov	r3, r1
 80056e0:	813b      	strh	r3, [r7, #8]
 80056e2:	4613      	mov	r3, r2
 80056e4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056f4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80056f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f8:	9300      	str	r3, [sp, #0]
 80056fa:	6a3b      	ldr	r3, [r7, #32]
 80056fc:	2200      	movs	r2, #0
 80056fe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005702:	68f8      	ldr	r0, [r7, #12]
 8005704:	f000 f960 	bl	80059c8 <I2C_WaitOnFlagUntilTimeout>
 8005708:	4603      	mov	r3, r0
 800570a:	2b00      	cmp	r3, #0
 800570c:	d00d      	beq.n	800572a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005718:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800571c:	d103      	bne.n	8005726 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005724:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005726:	2303      	movs	r3, #3
 8005728:	e05f      	b.n	80057ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800572a:	897b      	ldrh	r3, [r7, #10]
 800572c:	b2db      	uxtb	r3, r3
 800572e:	461a      	mov	r2, r3
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005738:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800573a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573c:	6a3a      	ldr	r2, [r7, #32]
 800573e:	492d      	ldr	r1, [pc, #180]	; (80057f4 <I2C_RequestMemoryWrite+0x128>)
 8005740:	68f8      	ldr	r0, [r7, #12]
 8005742:	f000 f998 	bl	8005a76 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005746:	4603      	mov	r3, r0
 8005748:	2b00      	cmp	r3, #0
 800574a:	d001      	beq.n	8005750 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	e04c      	b.n	80057ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005750:	2300      	movs	r3, #0
 8005752:	617b      	str	r3, [r7, #20]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	695b      	ldr	r3, [r3, #20]
 800575a:	617b      	str	r3, [r7, #20]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	699b      	ldr	r3, [r3, #24]
 8005762:	617b      	str	r3, [r7, #20]
 8005764:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005766:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005768:	6a39      	ldr	r1, [r7, #32]
 800576a:	68f8      	ldr	r0, [r7, #12]
 800576c:	f000 fa02 	bl	8005b74 <I2C_WaitOnTXEFlagUntilTimeout>
 8005770:	4603      	mov	r3, r0
 8005772:	2b00      	cmp	r3, #0
 8005774:	d00d      	beq.n	8005792 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577a:	2b04      	cmp	r3, #4
 800577c:	d107      	bne.n	800578e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800578c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e02b      	b.n	80057ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005792:	88fb      	ldrh	r3, [r7, #6]
 8005794:	2b01      	cmp	r3, #1
 8005796:	d105      	bne.n	80057a4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005798:	893b      	ldrh	r3, [r7, #8]
 800579a:	b2da      	uxtb	r2, r3
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	611a      	str	r2, [r3, #16]
 80057a2:	e021      	b.n	80057e8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80057a4:	893b      	ldrh	r3, [r7, #8]
 80057a6:	0a1b      	lsrs	r3, r3, #8
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	b2da      	uxtb	r2, r3
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057b4:	6a39      	ldr	r1, [r7, #32]
 80057b6:	68f8      	ldr	r0, [r7, #12]
 80057b8:	f000 f9dc 	bl	8005b74 <I2C_WaitOnTXEFlagUntilTimeout>
 80057bc:	4603      	mov	r3, r0
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d00d      	beq.n	80057de <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c6:	2b04      	cmp	r3, #4
 80057c8:	d107      	bne.n	80057da <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057d8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e005      	b.n	80057ea <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80057de:	893b      	ldrh	r3, [r7, #8]
 80057e0:	b2da      	uxtb	r2, r3
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80057e8:	2300      	movs	r3, #0
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3718      	adds	r7, #24
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}
 80057f2:	bf00      	nop
 80057f4:	00010002 	.word	0x00010002

080057f8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b088      	sub	sp, #32
 80057fc:	af02      	add	r7, sp, #8
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	4608      	mov	r0, r1
 8005802:	4611      	mov	r1, r2
 8005804:	461a      	mov	r2, r3
 8005806:	4603      	mov	r3, r0
 8005808:	817b      	strh	r3, [r7, #10]
 800580a:	460b      	mov	r3, r1
 800580c:	813b      	strh	r3, [r7, #8]
 800580e:	4613      	mov	r3, r2
 8005810:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005820:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005830:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005834:	9300      	str	r3, [sp, #0]
 8005836:	6a3b      	ldr	r3, [r7, #32]
 8005838:	2200      	movs	r2, #0
 800583a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800583e:	68f8      	ldr	r0, [r7, #12]
 8005840:	f000 f8c2 	bl	80059c8 <I2C_WaitOnFlagUntilTimeout>
 8005844:	4603      	mov	r3, r0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d00d      	beq.n	8005866 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005854:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005858:	d103      	bne.n	8005862 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005860:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005862:	2303      	movs	r3, #3
 8005864:	e0aa      	b.n	80059bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005866:	897b      	ldrh	r3, [r7, #10]
 8005868:	b2db      	uxtb	r3, r3
 800586a:	461a      	mov	r2, r3
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005874:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005878:	6a3a      	ldr	r2, [r7, #32]
 800587a:	4952      	ldr	r1, [pc, #328]	; (80059c4 <I2C_RequestMemoryRead+0x1cc>)
 800587c:	68f8      	ldr	r0, [r7, #12]
 800587e:	f000 f8fa 	bl	8005a76 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005882:	4603      	mov	r3, r0
 8005884:	2b00      	cmp	r3, #0
 8005886:	d001      	beq.n	800588c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	e097      	b.n	80059bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800588c:	2300      	movs	r3, #0
 800588e:	617b      	str	r3, [r7, #20]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	695b      	ldr	r3, [r3, #20]
 8005896:	617b      	str	r3, [r7, #20]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	699b      	ldr	r3, [r3, #24]
 800589e:	617b      	str	r3, [r7, #20]
 80058a0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058a4:	6a39      	ldr	r1, [r7, #32]
 80058a6:	68f8      	ldr	r0, [r7, #12]
 80058a8:	f000 f964 	bl	8005b74 <I2C_WaitOnTXEFlagUntilTimeout>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d00d      	beq.n	80058ce <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b6:	2b04      	cmp	r3, #4
 80058b8:	d107      	bne.n	80058ca <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058c8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	e076      	b.n	80059bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80058ce:	88fb      	ldrh	r3, [r7, #6]
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	d105      	bne.n	80058e0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80058d4:	893b      	ldrh	r3, [r7, #8]
 80058d6:	b2da      	uxtb	r2, r3
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	611a      	str	r2, [r3, #16]
 80058de:	e021      	b.n	8005924 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80058e0:	893b      	ldrh	r3, [r7, #8]
 80058e2:	0a1b      	lsrs	r3, r3, #8
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	b2da      	uxtb	r2, r3
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058f0:	6a39      	ldr	r1, [r7, #32]
 80058f2:	68f8      	ldr	r0, [r7, #12]
 80058f4:	f000 f93e 	bl	8005b74 <I2C_WaitOnTXEFlagUntilTimeout>
 80058f8:	4603      	mov	r3, r0
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d00d      	beq.n	800591a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005902:	2b04      	cmp	r3, #4
 8005904:	d107      	bne.n	8005916 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005914:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	e050      	b.n	80059bc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800591a:	893b      	ldrh	r3, [r7, #8]
 800591c:	b2da      	uxtb	r2, r3
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005924:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005926:	6a39      	ldr	r1, [r7, #32]
 8005928:	68f8      	ldr	r0, [r7, #12]
 800592a:	f000 f923 	bl	8005b74 <I2C_WaitOnTXEFlagUntilTimeout>
 800592e:	4603      	mov	r3, r0
 8005930:	2b00      	cmp	r3, #0
 8005932:	d00d      	beq.n	8005950 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005938:	2b04      	cmp	r3, #4
 800593a:	d107      	bne.n	800594c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800594a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	e035      	b.n	80059bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800595e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005962:	9300      	str	r3, [sp, #0]
 8005964:	6a3b      	ldr	r3, [r7, #32]
 8005966:	2200      	movs	r2, #0
 8005968:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800596c:	68f8      	ldr	r0, [r7, #12]
 800596e:	f000 f82b 	bl	80059c8 <I2C_WaitOnFlagUntilTimeout>
 8005972:	4603      	mov	r3, r0
 8005974:	2b00      	cmp	r3, #0
 8005976:	d00d      	beq.n	8005994 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005982:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005986:	d103      	bne.n	8005990 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800598e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005990:	2303      	movs	r3, #3
 8005992:	e013      	b.n	80059bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005994:	897b      	ldrh	r3, [r7, #10]
 8005996:	b2db      	uxtb	r3, r3
 8005998:	f043 0301 	orr.w	r3, r3, #1
 800599c:	b2da      	uxtb	r2, r3
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80059a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a6:	6a3a      	ldr	r2, [r7, #32]
 80059a8:	4906      	ldr	r1, [pc, #24]	; (80059c4 <I2C_RequestMemoryRead+0x1cc>)
 80059aa:	68f8      	ldr	r0, [r7, #12]
 80059ac:	f000 f863 	bl	8005a76 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d001      	beq.n	80059ba <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	e000      	b.n	80059bc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80059ba:	2300      	movs	r3, #0
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3718      	adds	r7, #24
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}
 80059c4:	00010002 	.word	0x00010002

080059c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b084      	sub	sp, #16
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	60f8      	str	r0, [r7, #12]
 80059d0:	60b9      	str	r1, [r7, #8]
 80059d2:	603b      	str	r3, [r7, #0]
 80059d4:	4613      	mov	r3, r2
 80059d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80059d8:	e025      	b.n	8005a26 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059e0:	d021      	beq.n	8005a26 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059e2:	f7fe fae5 	bl	8003fb0 <HAL_GetTick>
 80059e6:	4602      	mov	r2, r0
 80059e8:	69bb      	ldr	r3, [r7, #24]
 80059ea:	1ad3      	subs	r3, r2, r3
 80059ec:	683a      	ldr	r2, [r7, #0]
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d302      	bcc.n	80059f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d116      	bne.n	8005a26 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2200      	movs	r2, #0
 80059fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2220      	movs	r2, #32
 8005a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a12:	f043 0220 	orr.w	r2, r3, #32
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e023      	b.n	8005a6e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	0c1b      	lsrs	r3, r3, #16
 8005a2a:	b2db      	uxtb	r3, r3
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d10d      	bne.n	8005a4c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	695b      	ldr	r3, [r3, #20]
 8005a36:	43da      	mvns	r2, r3
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	4013      	ands	r3, r2
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	bf0c      	ite	eq
 8005a42:	2301      	moveq	r3, #1
 8005a44:	2300      	movne	r3, #0
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	461a      	mov	r2, r3
 8005a4a:	e00c      	b.n	8005a66 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	699b      	ldr	r3, [r3, #24]
 8005a52:	43da      	mvns	r2, r3
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	4013      	ands	r3, r2
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	bf0c      	ite	eq
 8005a5e:	2301      	moveq	r3, #1
 8005a60:	2300      	movne	r3, #0
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	461a      	mov	r2, r3
 8005a66:	79fb      	ldrb	r3, [r7, #7]
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d0b6      	beq.n	80059da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a6c:	2300      	movs	r3, #0
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3710      	adds	r7, #16
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}

08005a76 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005a76:	b580      	push	{r7, lr}
 8005a78:	b084      	sub	sp, #16
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	60f8      	str	r0, [r7, #12]
 8005a7e:	60b9      	str	r1, [r7, #8]
 8005a80:	607a      	str	r2, [r7, #4]
 8005a82:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005a84:	e051      	b.n	8005b2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	695b      	ldr	r3, [r3, #20]
 8005a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a94:	d123      	bne.n	8005ade <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005aa4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005aae:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2220      	movs	r2, #32
 8005aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aca:	f043 0204 	orr.w	r2, r3, #4
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	e046      	b.n	8005b6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ae4:	d021      	beq.n	8005b2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ae6:	f7fe fa63 	bl	8003fb0 <HAL_GetTick>
 8005aea:	4602      	mov	r2, r0
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	1ad3      	subs	r3, r2, r3
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d302      	bcc.n	8005afc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d116      	bne.n	8005b2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2200      	movs	r2, #0
 8005b00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2220      	movs	r2, #32
 8005b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b16:	f043 0220 	orr.w	r2, r3, #32
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2200      	movs	r2, #0
 8005b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	e020      	b.n	8005b6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	0c1b      	lsrs	r3, r3, #16
 8005b2e:	b2db      	uxtb	r3, r3
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d10c      	bne.n	8005b4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	695b      	ldr	r3, [r3, #20]
 8005b3a:	43da      	mvns	r2, r3
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	4013      	ands	r3, r2
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	bf14      	ite	ne
 8005b46:	2301      	movne	r3, #1
 8005b48:	2300      	moveq	r3, #0
 8005b4a:	b2db      	uxtb	r3, r3
 8005b4c:	e00b      	b.n	8005b66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	699b      	ldr	r3, [r3, #24]
 8005b54:	43da      	mvns	r2, r3
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	4013      	ands	r3, r2
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	bf14      	ite	ne
 8005b60:	2301      	movne	r3, #1
 8005b62:	2300      	moveq	r3, #0
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d18d      	bne.n	8005a86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005b6a:	2300      	movs	r3, #0
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3710      	adds	r7, #16
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}

08005b74 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b084      	sub	sp, #16
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	60f8      	str	r0, [r7, #12]
 8005b7c:	60b9      	str	r1, [r7, #8]
 8005b7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b80:	e02d      	b.n	8005bde <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005b82:	68f8      	ldr	r0, [r7, #12]
 8005b84:	f000 f8ce 	bl	8005d24 <I2C_IsAcknowledgeFailed>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d001      	beq.n	8005b92 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e02d      	b.n	8005bee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b98:	d021      	beq.n	8005bde <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b9a:	f7fe fa09 	bl	8003fb0 <HAL_GetTick>
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	1ad3      	subs	r3, r2, r3
 8005ba4:	68ba      	ldr	r2, [r7, #8]
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d302      	bcc.n	8005bb0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d116      	bne.n	8005bde <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2220      	movs	r2, #32
 8005bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bca:	f043 0220 	orr.w	r2, r3, #32
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e007      	b.n	8005bee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	695b      	ldr	r3, [r3, #20]
 8005be4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005be8:	2b80      	cmp	r3, #128	; 0x80
 8005bea:	d1ca      	bne.n	8005b82 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005bec:	2300      	movs	r3, #0
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3710      	adds	r7, #16
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}

08005bf6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005bf6:	b580      	push	{r7, lr}
 8005bf8:	b084      	sub	sp, #16
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	60f8      	str	r0, [r7, #12]
 8005bfe:	60b9      	str	r1, [r7, #8]
 8005c00:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005c02:	e02d      	b.n	8005c60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005c04:	68f8      	ldr	r0, [r7, #12]
 8005c06:	f000 f88d 	bl	8005d24 <I2C_IsAcknowledgeFailed>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d001      	beq.n	8005c14 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	e02d      	b.n	8005c70 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c1a:	d021      	beq.n	8005c60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c1c:	f7fe f9c8 	bl	8003fb0 <HAL_GetTick>
 8005c20:	4602      	mov	r2, r0
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	1ad3      	subs	r3, r2, r3
 8005c26:	68ba      	ldr	r2, [r7, #8]
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	d302      	bcc.n	8005c32 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d116      	bne.n	8005c60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2200      	movs	r2, #0
 8005c36:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2220      	movs	r2, #32
 8005c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c4c:	f043 0220 	orr.w	r2, r3, #32
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2200      	movs	r2, #0
 8005c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	e007      	b.n	8005c70 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	695b      	ldr	r3, [r3, #20]
 8005c66:	f003 0304 	and.w	r3, r3, #4
 8005c6a:	2b04      	cmp	r3, #4
 8005c6c:	d1ca      	bne.n	8005c04 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005c6e:	2300      	movs	r3, #0
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3710      	adds	r7, #16
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	60b9      	str	r1, [r7, #8]
 8005c82:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005c84:	e042      	b.n	8005d0c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	695b      	ldr	r3, [r3, #20]
 8005c8c:	f003 0310 	and.w	r3, r3, #16
 8005c90:	2b10      	cmp	r3, #16
 8005c92:	d119      	bne.n	8005cc8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f06f 0210 	mvn.w	r2, #16
 8005c9c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2220      	movs	r2, #32
 8005ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e029      	b.n	8005d1c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cc8:	f7fe f972 	bl	8003fb0 <HAL_GetTick>
 8005ccc:	4602      	mov	r2, r0
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	1ad3      	subs	r3, r2, r3
 8005cd2:	68ba      	ldr	r2, [r7, #8]
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d302      	bcc.n	8005cde <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d116      	bne.n	8005d0c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2220      	movs	r2, #32
 8005ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf8:	f043 0220 	orr.w	r2, r3, #32
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2200      	movs	r2, #0
 8005d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	e007      	b.n	8005d1c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	695b      	ldr	r3, [r3, #20]
 8005d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d16:	2b40      	cmp	r3, #64	; 0x40
 8005d18:	d1b5      	bne.n	8005c86 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005d1a:	2300      	movs	r3, #0
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3710      	adds	r7, #16
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}

08005d24 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b083      	sub	sp, #12
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	695b      	ldr	r3, [r3, #20]
 8005d32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d3a:	d11b      	bne.n	8005d74 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005d44:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2220      	movs	r2, #32
 8005d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2200      	movs	r2, #0
 8005d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d60:	f043 0204 	orr.w	r2, r3, #4
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005d70:	2301      	movs	r3, #1
 8005d72:	e000      	b.n	8005d76 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	370c      	adds	r7, #12
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr
	...

08005d84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b086      	sub	sp, #24
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d101      	bne.n	8005d96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
 8005d94:	e264      	b.n	8006260 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f003 0301 	and.w	r3, r3, #1
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d075      	beq.n	8005e8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005da2:	4ba3      	ldr	r3, [pc, #652]	; (8006030 <HAL_RCC_OscConfig+0x2ac>)
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	f003 030c 	and.w	r3, r3, #12
 8005daa:	2b04      	cmp	r3, #4
 8005dac:	d00c      	beq.n	8005dc8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005dae:	4ba0      	ldr	r3, [pc, #640]	; (8006030 <HAL_RCC_OscConfig+0x2ac>)
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005db6:	2b08      	cmp	r3, #8
 8005db8:	d112      	bne.n	8005de0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005dba:	4b9d      	ldr	r3, [pc, #628]	; (8006030 <HAL_RCC_OscConfig+0x2ac>)
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005dc6:	d10b      	bne.n	8005de0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005dc8:	4b99      	ldr	r3, [pc, #612]	; (8006030 <HAL_RCC_OscConfig+0x2ac>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d05b      	beq.n	8005e8c <HAL_RCC_OscConfig+0x108>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d157      	bne.n	8005e8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e23f      	b.n	8006260 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005de8:	d106      	bne.n	8005df8 <HAL_RCC_OscConfig+0x74>
 8005dea:	4b91      	ldr	r3, [pc, #580]	; (8006030 <HAL_RCC_OscConfig+0x2ac>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a90      	ldr	r2, [pc, #576]	; (8006030 <HAL_RCC_OscConfig+0x2ac>)
 8005df0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005df4:	6013      	str	r3, [r2, #0]
 8005df6:	e01d      	b.n	8005e34 <HAL_RCC_OscConfig+0xb0>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e00:	d10c      	bne.n	8005e1c <HAL_RCC_OscConfig+0x98>
 8005e02:	4b8b      	ldr	r3, [pc, #556]	; (8006030 <HAL_RCC_OscConfig+0x2ac>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a8a      	ldr	r2, [pc, #552]	; (8006030 <HAL_RCC_OscConfig+0x2ac>)
 8005e08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e0c:	6013      	str	r3, [r2, #0]
 8005e0e:	4b88      	ldr	r3, [pc, #544]	; (8006030 <HAL_RCC_OscConfig+0x2ac>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a87      	ldr	r2, [pc, #540]	; (8006030 <HAL_RCC_OscConfig+0x2ac>)
 8005e14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e18:	6013      	str	r3, [r2, #0]
 8005e1a:	e00b      	b.n	8005e34 <HAL_RCC_OscConfig+0xb0>
 8005e1c:	4b84      	ldr	r3, [pc, #528]	; (8006030 <HAL_RCC_OscConfig+0x2ac>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a83      	ldr	r2, [pc, #524]	; (8006030 <HAL_RCC_OscConfig+0x2ac>)
 8005e22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e26:	6013      	str	r3, [r2, #0]
 8005e28:	4b81      	ldr	r3, [pc, #516]	; (8006030 <HAL_RCC_OscConfig+0x2ac>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a80      	ldr	r2, [pc, #512]	; (8006030 <HAL_RCC_OscConfig+0x2ac>)
 8005e2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d013      	beq.n	8005e64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e3c:	f7fe f8b8 	bl	8003fb0 <HAL_GetTick>
 8005e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e42:	e008      	b.n	8005e56 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e44:	f7fe f8b4 	bl	8003fb0 <HAL_GetTick>
 8005e48:	4602      	mov	r2, r0
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	1ad3      	subs	r3, r2, r3
 8005e4e:	2b64      	cmp	r3, #100	; 0x64
 8005e50:	d901      	bls.n	8005e56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005e52:	2303      	movs	r3, #3
 8005e54:	e204      	b.n	8006260 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e56:	4b76      	ldr	r3, [pc, #472]	; (8006030 <HAL_RCC_OscConfig+0x2ac>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d0f0      	beq.n	8005e44 <HAL_RCC_OscConfig+0xc0>
 8005e62:	e014      	b.n	8005e8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e64:	f7fe f8a4 	bl	8003fb0 <HAL_GetTick>
 8005e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e6a:	e008      	b.n	8005e7e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e6c:	f7fe f8a0 	bl	8003fb0 <HAL_GetTick>
 8005e70:	4602      	mov	r2, r0
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	1ad3      	subs	r3, r2, r3
 8005e76:	2b64      	cmp	r3, #100	; 0x64
 8005e78:	d901      	bls.n	8005e7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005e7a:	2303      	movs	r3, #3
 8005e7c:	e1f0      	b.n	8006260 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e7e:	4b6c      	ldr	r3, [pc, #432]	; (8006030 <HAL_RCC_OscConfig+0x2ac>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d1f0      	bne.n	8005e6c <HAL_RCC_OscConfig+0xe8>
 8005e8a:	e000      	b.n	8005e8e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f003 0302 	and.w	r3, r3, #2
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d063      	beq.n	8005f62 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005e9a:	4b65      	ldr	r3, [pc, #404]	; (8006030 <HAL_RCC_OscConfig+0x2ac>)
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	f003 030c 	and.w	r3, r3, #12
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d00b      	beq.n	8005ebe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ea6:	4b62      	ldr	r3, [pc, #392]	; (8006030 <HAL_RCC_OscConfig+0x2ac>)
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005eae:	2b08      	cmp	r3, #8
 8005eb0:	d11c      	bne.n	8005eec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005eb2:	4b5f      	ldr	r3, [pc, #380]	; (8006030 <HAL_RCC_OscConfig+0x2ac>)
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d116      	bne.n	8005eec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ebe:	4b5c      	ldr	r3, [pc, #368]	; (8006030 <HAL_RCC_OscConfig+0x2ac>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f003 0302 	and.w	r3, r3, #2
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d005      	beq.n	8005ed6 <HAL_RCC_OscConfig+0x152>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	68db      	ldr	r3, [r3, #12]
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d001      	beq.n	8005ed6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e1c4      	b.n	8006260 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ed6:	4b56      	ldr	r3, [pc, #344]	; (8006030 <HAL_RCC_OscConfig+0x2ac>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	691b      	ldr	r3, [r3, #16]
 8005ee2:	00db      	lsls	r3, r3, #3
 8005ee4:	4952      	ldr	r1, [pc, #328]	; (8006030 <HAL_RCC_OscConfig+0x2ac>)
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005eea:	e03a      	b.n	8005f62 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d020      	beq.n	8005f36 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ef4:	4b4f      	ldr	r3, [pc, #316]	; (8006034 <HAL_RCC_OscConfig+0x2b0>)
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005efa:	f7fe f859 	bl	8003fb0 <HAL_GetTick>
 8005efe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f00:	e008      	b.n	8005f14 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f02:	f7fe f855 	bl	8003fb0 <HAL_GetTick>
 8005f06:	4602      	mov	r2, r0
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	1ad3      	subs	r3, r2, r3
 8005f0c:	2b02      	cmp	r3, #2
 8005f0e:	d901      	bls.n	8005f14 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005f10:	2303      	movs	r3, #3
 8005f12:	e1a5      	b.n	8006260 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f14:	4b46      	ldr	r3, [pc, #280]	; (8006030 <HAL_RCC_OscConfig+0x2ac>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f003 0302 	and.w	r3, r3, #2
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d0f0      	beq.n	8005f02 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f20:	4b43      	ldr	r3, [pc, #268]	; (8006030 <HAL_RCC_OscConfig+0x2ac>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	691b      	ldr	r3, [r3, #16]
 8005f2c:	00db      	lsls	r3, r3, #3
 8005f2e:	4940      	ldr	r1, [pc, #256]	; (8006030 <HAL_RCC_OscConfig+0x2ac>)
 8005f30:	4313      	orrs	r3, r2
 8005f32:	600b      	str	r3, [r1, #0]
 8005f34:	e015      	b.n	8005f62 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f36:	4b3f      	ldr	r3, [pc, #252]	; (8006034 <HAL_RCC_OscConfig+0x2b0>)
 8005f38:	2200      	movs	r2, #0
 8005f3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f3c:	f7fe f838 	bl	8003fb0 <HAL_GetTick>
 8005f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f42:	e008      	b.n	8005f56 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f44:	f7fe f834 	bl	8003fb0 <HAL_GetTick>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	1ad3      	subs	r3, r2, r3
 8005f4e:	2b02      	cmp	r3, #2
 8005f50:	d901      	bls.n	8005f56 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005f52:	2303      	movs	r3, #3
 8005f54:	e184      	b.n	8006260 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f56:	4b36      	ldr	r3, [pc, #216]	; (8006030 <HAL_RCC_OscConfig+0x2ac>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f003 0302 	and.w	r3, r3, #2
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d1f0      	bne.n	8005f44 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f003 0308 	and.w	r3, r3, #8
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d030      	beq.n	8005fd0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	695b      	ldr	r3, [r3, #20]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d016      	beq.n	8005fa4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f76:	4b30      	ldr	r3, [pc, #192]	; (8006038 <HAL_RCC_OscConfig+0x2b4>)
 8005f78:	2201      	movs	r2, #1
 8005f7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f7c:	f7fe f818 	bl	8003fb0 <HAL_GetTick>
 8005f80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f82:	e008      	b.n	8005f96 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f84:	f7fe f814 	bl	8003fb0 <HAL_GetTick>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	1ad3      	subs	r3, r2, r3
 8005f8e:	2b02      	cmp	r3, #2
 8005f90:	d901      	bls.n	8005f96 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005f92:	2303      	movs	r3, #3
 8005f94:	e164      	b.n	8006260 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f96:	4b26      	ldr	r3, [pc, #152]	; (8006030 <HAL_RCC_OscConfig+0x2ac>)
 8005f98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f9a:	f003 0302 	and.w	r3, r3, #2
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d0f0      	beq.n	8005f84 <HAL_RCC_OscConfig+0x200>
 8005fa2:	e015      	b.n	8005fd0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005fa4:	4b24      	ldr	r3, [pc, #144]	; (8006038 <HAL_RCC_OscConfig+0x2b4>)
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005faa:	f7fe f801 	bl	8003fb0 <HAL_GetTick>
 8005fae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005fb0:	e008      	b.n	8005fc4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005fb2:	f7fd fffd 	bl	8003fb0 <HAL_GetTick>
 8005fb6:	4602      	mov	r2, r0
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	1ad3      	subs	r3, r2, r3
 8005fbc:	2b02      	cmp	r3, #2
 8005fbe:	d901      	bls.n	8005fc4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005fc0:	2303      	movs	r3, #3
 8005fc2:	e14d      	b.n	8006260 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005fc4:	4b1a      	ldr	r3, [pc, #104]	; (8006030 <HAL_RCC_OscConfig+0x2ac>)
 8005fc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fc8:	f003 0302 	and.w	r3, r3, #2
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d1f0      	bne.n	8005fb2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f003 0304 	and.w	r3, r3, #4
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	f000 80a0 	beq.w	800611e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005fe2:	4b13      	ldr	r3, [pc, #76]	; (8006030 <HAL_RCC_OscConfig+0x2ac>)
 8005fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d10f      	bne.n	800600e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fee:	2300      	movs	r3, #0
 8005ff0:	60bb      	str	r3, [r7, #8]
 8005ff2:	4b0f      	ldr	r3, [pc, #60]	; (8006030 <HAL_RCC_OscConfig+0x2ac>)
 8005ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff6:	4a0e      	ldr	r2, [pc, #56]	; (8006030 <HAL_RCC_OscConfig+0x2ac>)
 8005ff8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ffc:	6413      	str	r3, [r2, #64]	; 0x40
 8005ffe:	4b0c      	ldr	r3, [pc, #48]	; (8006030 <HAL_RCC_OscConfig+0x2ac>)
 8006000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006006:	60bb      	str	r3, [r7, #8]
 8006008:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800600a:	2301      	movs	r3, #1
 800600c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800600e:	4b0b      	ldr	r3, [pc, #44]	; (800603c <HAL_RCC_OscConfig+0x2b8>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006016:	2b00      	cmp	r3, #0
 8006018:	d121      	bne.n	800605e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800601a:	4b08      	ldr	r3, [pc, #32]	; (800603c <HAL_RCC_OscConfig+0x2b8>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a07      	ldr	r2, [pc, #28]	; (800603c <HAL_RCC_OscConfig+0x2b8>)
 8006020:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006024:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006026:	f7fd ffc3 	bl	8003fb0 <HAL_GetTick>
 800602a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800602c:	e011      	b.n	8006052 <HAL_RCC_OscConfig+0x2ce>
 800602e:	bf00      	nop
 8006030:	40023800 	.word	0x40023800
 8006034:	42470000 	.word	0x42470000
 8006038:	42470e80 	.word	0x42470e80
 800603c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006040:	f7fd ffb6 	bl	8003fb0 <HAL_GetTick>
 8006044:	4602      	mov	r2, r0
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	1ad3      	subs	r3, r2, r3
 800604a:	2b02      	cmp	r3, #2
 800604c:	d901      	bls.n	8006052 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800604e:	2303      	movs	r3, #3
 8006050:	e106      	b.n	8006260 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006052:	4b85      	ldr	r3, [pc, #532]	; (8006268 <HAL_RCC_OscConfig+0x4e4>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800605a:	2b00      	cmp	r3, #0
 800605c:	d0f0      	beq.n	8006040 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	2b01      	cmp	r3, #1
 8006064:	d106      	bne.n	8006074 <HAL_RCC_OscConfig+0x2f0>
 8006066:	4b81      	ldr	r3, [pc, #516]	; (800626c <HAL_RCC_OscConfig+0x4e8>)
 8006068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800606a:	4a80      	ldr	r2, [pc, #512]	; (800626c <HAL_RCC_OscConfig+0x4e8>)
 800606c:	f043 0301 	orr.w	r3, r3, #1
 8006070:	6713      	str	r3, [r2, #112]	; 0x70
 8006072:	e01c      	b.n	80060ae <HAL_RCC_OscConfig+0x32a>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	2b05      	cmp	r3, #5
 800607a:	d10c      	bne.n	8006096 <HAL_RCC_OscConfig+0x312>
 800607c:	4b7b      	ldr	r3, [pc, #492]	; (800626c <HAL_RCC_OscConfig+0x4e8>)
 800607e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006080:	4a7a      	ldr	r2, [pc, #488]	; (800626c <HAL_RCC_OscConfig+0x4e8>)
 8006082:	f043 0304 	orr.w	r3, r3, #4
 8006086:	6713      	str	r3, [r2, #112]	; 0x70
 8006088:	4b78      	ldr	r3, [pc, #480]	; (800626c <HAL_RCC_OscConfig+0x4e8>)
 800608a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800608c:	4a77      	ldr	r2, [pc, #476]	; (800626c <HAL_RCC_OscConfig+0x4e8>)
 800608e:	f043 0301 	orr.w	r3, r3, #1
 8006092:	6713      	str	r3, [r2, #112]	; 0x70
 8006094:	e00b      	b.n	80060ae <HAL_RCC_OscConfig+0x32a>
 8006096:	4b75      	ldr	r3, [pc, #468]	; (800626c <HAL_RCC_OscConfig+0x4e8>)
 8006098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800609a:	4a74      	ldr	r2, [pc, #464]	; (800626c <HAL_RCC_OscConfig+0x4e8>)
 800609c:	f023 0301 	bic.w	r3, r3, #1
 80060a0:	6713      	str	r3, [r2, #112]	; 0x70
 80060a2:	4b72      	ldr	r3, [pc, #456]	; (800626c <HAL_RCC_OscConfig+0x4e8>)
 80060a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060a6:	4a71      	ldr	r2, [pc, #452]	; (800626c <HAL_RCC_OscConfig+0x4e8>)
 80060a8:	f023 0304 	bic.w	r3, r3, #4
 80060ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d015      	beq.n	80060e2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060b6:	f7fd ff7b 	bl	8003fb0 <HAL_GetTick>
 80060ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060bc:	e00a      	b.n	80060d4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060be:	f7fd ff77 	bl	8003fb0 <HAL_GetTick>
 80060c2:	4602      	mov	r2, r0
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	1ad3      	subs	r3, r2, r3
 80060c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d901      	bls.n	80060d4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80060d0:	2303      	movs	r3, #3
 80060d2:	e0c5      	b.n	8006260 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060d4:	4b65      	ldr	r3, [pc, #404]	; (800626c <HAL_RCC_OscConfig+0x4e8>)
 80060d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060d8:	f003 0302 	and.w	r3, r3, #2
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d0ee      	beq.n	80060be <HAL_RCC_OscConfig+0x33a>
 80060e0:	e014      	b.n	800610c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060e2:	f7fd ff65 	bl	8003fb0 <HAL_GetTick>
 80060e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060e8:	e00a      	b.n	8006100 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060ea:	f7fd ff61 	bl	8003fb0 <HAL_GetTick>
 80060ee:	4602      	mov	r2, r0
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	1ad3      	subs	r3, r2, r3
 80060f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d901      	bls.n	8006100 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80060fc:	2303      	movs	r3, #3
 80060fe:	e0af      	b.n	8006260 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006100:	4b5a      	ldr	r3, [pc, #360]	; (800626c <HAL_RCC_OscConfig+0x4e8>)
 8006102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006104:	f003 0302 	and.w	r3, r3, #2
 8006108:	2b00      	cmp	r3, #0
 800610a:	d1ee      	bne.n	80060ea <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800610c:	7dfb      	ldrb	r3, [r7, #23]
 800610e:	2b01      	cmp	r3, #1
 8006110:	d105      	bne.n	800611e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006112:	4b56      	ldr	r3, [pc, #344]	; (800626c <HAL_RCC_OscConfig+0x4e8>)
 8006114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006116:	4a55      	ldr	r2, [pc, #340]	; (800626c <HAL_RCC_OscConfig+0x4e8>)
 8006118:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800611c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	699b      	ldr	r3, [r3, #24]
 8006122:	2b00      	cmp	r3, #0
 8006124:	f000 809b 	beq.w	800625e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006128:	4b50      	ldr	r3, [pc, #320]	; (800626c <HAL_RCC_OscConfig+0x4e8>)
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	f003 030c 	and.w	r3, r3, #12
 8006130:	2b08      	cmp	r3, #8
 8006132:	d05c      	beq.n	80061ee <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	699b      	ldr	r3, [r3, #24]
 8006138:	2b02      	cmp	r3, #2
 800613a:	d141      	bne.n	80061c0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800613c:	4b4c      	ldr	r3, [pc, #304]	; (8006270 <HAL_RCC_OscConfig+0x4ec>)
 800613e:	2200      	movs	r2, #0
 8006140:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006142:	f7fd ff35 	bl	8003fb0 <HAL_GetTick>
 8006146:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006148:	e008      	b.n	800615c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800614a:	f7fd ff31 	bl	8003fb0 <HAL_GetTick>
 800614e:	4602      	mov	r2, r0
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	1ad3      	subs	r3, r2, r3
 8006154:	2b02      	cmp	r3, #2
 8006156:	d901      	bls.n	800615c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006158:	2303      	movs	r3, #3
 800615a:	e081      	b.n	8006260 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800615c:	4b43      	ldr	r3, [pc, #268]	; (800626c <HAL_RCC_OscConfig+0x4e8>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006164:	2b00      	cmp	r3, #0
 8006166:	d1f0      	bne.n	800614a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	69da      	ldr	r2, [r3, #28]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6a1b      	ldr	r3, [r3, #32]
 8006170:	431a      	orrs	r2, r3
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006176:	019b      	lsls	r3, r3, #6
 8006178:	431a      	orrs	r2, r3
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800617e:	085b      	lsrs	r3, r3, #1
 8006180:	3b01      	subs	r3, #1
 8006182:	041b      	lsls	r3, r3, #16
 8006184:	431a      	orrs	r2, r3
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800618a:	061b      	lsls	r3, r3, #24
 800618c:	4937      	ldr	r1, [pc, #220]	; (800626c <HAL_RCC_OscConfig+0x4e8>)
 800618e:	4313      	orrs	r3, r2
 8006190:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006192:	4b37      	ldr	r3, [pc, #220]	; (8006270 <HAL_RCC_OscConfig+0x4ec>)
 8006194:	2201      	movs	r2, #1
 8006196:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006198:	f7fd ff0a 	bl	8003fb0 <HAL_GetTick>
 800619c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800619e:	e008      	b.n	80061b2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061a0:	f7fd ff06 	bl	8003fb0 <HAL_GetTick>
 80061a4:	4602      	mov	r2, r0
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	1ad3      	subs	r3, r2, r3
 80061aa:	2b02      	cmp	r3, #2
 80061ac:	d901      	bls.n	80061b2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80061ae:	2303      	movs	r3, #3
 80061b0:	e056      	b.n	8006260 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061b2:	4b2e      	ldr	r3, [pc, #184]	; (800626c <HAL_RCC_OscConfig+0x4e8>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d0f0      	beq.n	80061a0 <HAL_RCC_OscConfig+0x41c>
 80061be:	e04e      	b.n	800625e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061c0:	4b2b      	ldr	r3, [pc, #172]	; (8006270 <HAL_RCC_OscConfig+0x4ec>)
 80061c2:	2200      	movs	r2, #0
 80061c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061c6:	f7fd fef3 	bl	8003fb0 <HAL_GetTick>
 80061ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061cc:	e008      	b.n	80061e0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061ce:	f7fd feef 	bl	8003fb0 <HAL_GetTick>
 80061d2:	4602      	mov	r2, r0
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	1ad3      	subs	r3, r2, r3
 80061d8:	2b02      	cmp	r3, #2
 80061da:	d901      	bls.n	80061e0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80061dc:	2303      	movs	r3, #3
 80061de:	e03f      	b.n	8006260 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061e0:	4b22      	ldr	r3, [pc, #136]	; (800626c <HAL_RCC_OscConfig+0x4e8>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d1f0      	bne.n	80061ce <HAL_RCC_OscConfig+0x44a>
 80061ec:	e037      	b.n	800625e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	699b      	ldr	r3, [r3, #24]
 80061f2:	2b01      	cmp	r3, #1
 80061f4:	d101      	bne.n	80061fa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	e032      	b.n	8006260 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80061fa:	4b1c      	ldr	r3, [pc, #112]	; (800626c <HAL_RCC_OscConfig+0x4e8>)
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	699b      	ldr	r3, [r3, #24]
 8006204:	2b01      	cmp	r3, #1
 8006206:	d028      	beq.n	800625a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006212:	429a      	cmp	r2, r3
 8006214:	d121      	bne.n	800625a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006220:	429a      	cmp	r2, r3
 8006222:	d11a      	bne.n	800625a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006224:	68fa      	ldr	r2, [r7, #12]
 8006226:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800622a:	4013      	ands	r3, r2
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006230:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006232:	4293      	cmp	r3, r2
 8006234:	d111      	bne.n	800625a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006240:	085b      	lsrs	r3, r3, #1
 8006242:	3b01      	subs	r3, #1
 8006244:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006246:	429a      	cmp	r2, r3
 8006248:	d107      	bne.n	800625a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006254:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006256:	429a      	cmp	r2, r3
 8006258:	d001      	beq.n	800625e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	e000      	b.n	8006260 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800625e:	2300      	movs	r3, #0
}
 8006260:	4618      	mov	r0, r3
 8006262:	3718      	adds	r7, #24
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}
 8006268:	40007000 	.word	0x40007000
 800626c:	40023800 	.word	0x40023800
 8006270:	42470060 	.word	0x42470060

08006274 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b084      	sub	sp, #16
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d101      	bne.n	8006288 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006284:	2301      	movs	r3, #1
 8006286:	e0cc      	b.n	8006422 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006288:	4b68      	ldr	r3, [pc, #416]	; (800642c <HAL_RCC_ClockConfig+0x1b8>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f003 0307 	and.w	r3, r3, #7
 8006290:	683a      	ldr	r2, [r7, #0]
 8006292:	429a      	cmp	r2, r3
 8006294:	d90c      	bls.n	80062b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006296:	4b65      	ldr	r3, [pc, #404]	; (800642c <HAL_RCC_ClockConfig+0x1b8>)
 8006298:	683a      	ldr	r2, [r7, #0]
 800629a:	b2d2      	uxtb	r2, r2
 800629c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800629e:	4b63      	ldr	r3, [pc, #396]	; (800642c <HAL_RCC_ClockConfig+0x1b8>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f003 0307 	and.w	r3, r3, #7
 80062a6:	683a      	ldr	r2, [r7, #0]
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d001      	beq.n	80062b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80062ac:	2301      	movs	r3, #1
 80062ae:	e0b8      	b.n	8006422 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f003 0302 	and.w	r3, r3, #2
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d020      	beq.n	80062fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f003 0304 	and.w	r3, r3, #4
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d005      	beq.n	80062d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80062c8:	4b59      	ldr	r3, [pc, #356]	; (8006430 <HAL_RCC_ClockConfig+0x1bc>)
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	4a58      	ldr	r2, [pc, #352]	; (8006430 <HAL_RCC_ClockConfig+0x1bc>)
 80062ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80062d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f003 0308 	and.w	r3, r3, #8
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d005      	beq.n	80062ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80062e0:	4b53      	ldr	r3, [pc, #332]	; (8006430 <HAL_RCC_ClockConfig+0x1bc>)
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	4a52      	ldr	r2, [pc, #328]	; (8006430 <HAL_RCC_ClockConfig+0x1bc>)
 80062e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80062ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80062ec:	4b50      	ldr	r3, [pc, #320]	; (8006430 <HAL_RCC_ClockConfig+0x1bc>)
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	494d      	ldr	r1, [pc, #308]	; (8006430 <HAL_RCC_ClockConfig+0x1bc>)
 80062fa:	4313      	orrs	r3, r2
 80062fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f003 0301 	and.w	r3, r3, #1
 8006306:	2b00      	cmp	r3, #0
 8006308:	d044      	beq.n	8006394 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	2b01      	cmp	r3, #1
 8006310:	d107      	bne.n	8006322 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006312:	4b47      	ldr	r3, [pc, #284]	; (8006430 <HAL_RCC_ClockConfig+0x1bc>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800631a:	2b00      	cmp	r3, #0
 800631c:	d119      	bne.n	8006352 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	e07f      	b.n	8006422 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	2b02      	cmp	r3, #2
 8006328:	d003      	beq.n	8006332 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800632e:	2b03      	cmp	r3, #3
 8006330:	d107      	bne.n	8006342 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006332:	4b3f      	ldr	r3, [pc, #252]	; (8006430 <HAL_RCC_ClockConfig+0x1bc>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800633a:	2b00      	cmp	r3, #0
 800633c:	d109      	bne.n	8006352 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	e06f      	b.n	8006422 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006342:	4b3b      	ldr	r3, [pc, #236]	; (8006430 <HAL_RCC_ClockConfig+0x1bc>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f003 0302 	and.w	r3, r3, #2
 800634a:	2b00      	cmp	r3, #0
 800634c:	d101      	bne.n	8006352 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	e067      	b.n	8006422 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006352:	4b37      	ldr	r3, [pc, #220]	; (8006430 <HAL_RCC_ClockConfig+0x1bc>)
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	f023 0203 	bic.w	r2, r3, #3
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	4934      	ldr	r1, [pc, #208]	; (8006430 <HAL_RCC_ClockConfig+0x1bc>)
 8006360:	4313      	orrs	r3, r2
 8006362:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006364:	f7fd fe24 	bl	8003fb0 <HAL_GetTick>
 8006368:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800636a:	e00a      	b.n	8006382 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800636c:	f7fd fe20 	bl	8003fb0 <HAL_GetTick>
 8006370:	4602      	mov	r2, r0
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	1ad3      	subs	r3, r2, r3
 8006376:	f241 3288 	movw	r2, #5000	; 0x1388
 800637a:	4293      	cmp	r3, r2
 800637c:	d901      	bls.n	8006382 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800637e:	2303      	movs	r3, #3
 8006380:	e04f      	b.n	8006422 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006382:	4b2b      	ldr	r3, [pc, #172]	; (8006430 <HAL_RCC_ClockConfig+0x1bc>)
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	f003 020c 	and.w	r2, r3, #12
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	009b      	lsls	r3, r3, #2
 8006390:	429a      	cmp	r2, r3
 8006392:	d1eb      	bne.n	800636c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006394:	4b25      	ldr	r3, [pc, #148]	; (800642c <HAL_RCC_ClockConfig+0x1b8>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f003 0307 	and.w	r3, r3, #7
 800639c:	683a      	ldr	r2, [r7, #0]
 800639e:	429a      	cmp	r2, r3
 80063a0:	d20c      	bcs.n	80063bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063a2:	4b22      	ldr	r3, [pc, #136]	; (800642c <HAL_RCC_ClockConfig+0x1b8>)
 80063a4:	683a      	ldr	r2, [r7, #0]
 80063a6:	b2d2      	uxtb	r2, r2
 80063a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80063aa:	4b20      	ldr	r3, [pc, #128]	; (800642c <HAL_RCC_ClockConfig+0x1b8>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f003 0307 	and.w	r3, r3, #7
 80063b2:	683a      	ldr	r2, [r7, #0]
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d001      	beq.n	80063bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	e032      	b.n	8006422 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f003 0304 	and.w	r3, r3, #4
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d008      	beq.n	80063da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80063c8:	4b19      	ldr	r3, [pc, #100]	; (8006430 <HAL_RCC_ClockConfig+0x1bc>)
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	4916      	ldr	r1, [pc, #88]	; (8006430 <HAL_RCC_ClockConfig+0x1bc>)
 80063d6:	4313      	orrs	r3, r2
 80063d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f003 0308 	and.w	r3, r3, #8
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d009      	beq.n	80063fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80063e6:	4b12      	ldr	r3, [pc, #72]	; (8006430 <HAL_RCC_ClockConfig+0x1bc>)
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	691b      	ldr	r3, [r3, #16]
 80063f2:	00db      	lsls	r3, r3, #3
 80063f4:	490e      	ldr	r1, [pc, #56]	; (8006430 <HAL_RCC_ClockConfig+0x1bc>)
 80063f6:	4313      	orrs	r3, r2
 80063f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80063fa:	f000 f821 	bl	8006440 <HAL_RCC_GetSysClockFreq>
 80063fe:	4602      	mov	r2, r0
 8006400:	4b0b      	ldr	r3, [pc, #44]	; (8006430 <HAL_RCC_ClockConfig+0x1bc>)
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	091b      	lsrs	r3, r3, #4
 8006406:	f003 030f 	and.w	r3, r3, #15
 800640a:	490a      	ldr	r1, [pc, #40]	; (8006434 <HAL_RCC_ClockConfig+0x1c0>)
 800640c:	5ccb      	ldrb	r3, [r1, r3]
 800640e:	fa22 f303 	lsr.w	r3, r2, r3
 8006412:	4a09      	ldr	r2, [pc, #36]	; (8006438 <HAL_RCC_ClockConfig+0x1c4>)
 8006414:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006416:	4b09      	ldr	r3, [pc, #36]	; (800643c <HAL_RCC_ClockConfig+0x1c8>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4618      	mov	r0, r3
 800641c:	f7fd fd84 	bl	8003f28 <HAL_InitTick>

  return HAL_OK;
 8006420:	2300      	movs	r3, #0
}
 8006422:	4618      	mov	r0, r3
 8006424:	3710      	adds	r7, #16
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}
 800642a:	bf00      	nop
 800642c:	40023c00 	.word	0x40023c00
 8006430:	40023800 	.word	0x40023800
 8006434:	0800f438 	.word	0x0800f438
 8006438:	20000008 	.word	0x20000008
 800643c:	2000000c 	.word	0x2000000c

08006440 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006440:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006444:	b084      	sub	sp, #16
 8006446:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006448:	2300      	movs	r3, #0
 800644a:	607b      	str	r3, [r7, #4]
 800644c:	2300      	movs	r3, #0
 800644e:	60fb      	str	r3, [r7, #12]
 8006450:	2300      	movs	r3, #0
 8006452:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006454:	2300      	movs	r3, #0
 8006456:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006458:	4b67      	ldr	r3, [pc, #412]	; (80065f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	f003 030c 	and.w	r3, r3, #12
 8006460:	2b08      	cmp	r3, #8
 8006462:	d00d      	beq.n	8006480 <HAL_RCC_GetSysClockFreq+0x40>
 8006464:	2b08      	cmp	r3, #8
 8006466:	f200 80bd 	bhi.w	80065e4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800646a:	2b00      	cmp	r3, #0
 800646c:	d002      	beq.n	8006474 <HAL_RCC_GetSysClockFreq+0x34>
 800646e:	2b04      	cmp	r3, #4
 8006470:	d003      	beq.n	800647a <HAL_RCC_GetSysClockFreq+0x3a>
 8006472:	e0b7      	b.n	80065e4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006474:	4b61      	ldr	r3, [pc, #388]	; (80065fc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006476:	60bb      	str	r3, [r7, #8]
       break;
 8006478:	e0b7      	b.n	80065ea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800647a:	4b61      	ldr	r3, [pc, #388]	; (8006600 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800647c:	60bb      	str	r3, [r7, #8]
      break;
 800647e:	e0b4      	b.n	80065ea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006480:	4b5d      	ldr	r3, [pc, #372]	; (80065f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006488:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800648a:	4b5b      	ldr	r3, [pc, #364]	; (80065f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006492:	2b00      	cmp	r3, #0
 8006494:	d04d      	beq.n	8006532 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006496:	4b58      	ldr	r3, [pc, #352]	; (80065f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	099b      	lsrs	r3, r3, #6
 800649c:	461a      	mov	r2, r3
 800649e:	f04f 0300 	mov.w	r3, #0
 80064a2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80064a6:	f04f 0100 	mov.w	r1, #0
 80064aa:	ea02 0800 	and.w	r8, r2, r0
 80064ae:	ea03 0901 	and.w	r9, r3, r1
 80064b2:	4640      	mov	r0, r8
 80064b4:	4649      	mov	r1, r9
 80064b6:	f04f 0200 	mov.w	r2, #0
 80064ba:	f04f 0300 	mov.w	r3, #0
 80064be:	014b      	lsls	r3, r1, #5
 80064c0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80064c4:	0142      	lsls	r2, r0, #5
 80064c6:	4610      	mov	r0, r2
 80064c8:	4619      	mov	r1, r3
 80064ca:	ebb0 0008 	subs.w	r0, r0, r8
 80064ce:	eb61 0109 	sbc.w	r1, r1, r9
 80064d2:	f04f 0200 	mov.w	r2, #0
 80064d6:	f04f 0300 	mov.w	r3, #0
 80064da:	018b      	lsls	r3, r1, #6
 80064dc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80064e0:	0182      	lsls	r2, r0, #6
 80064e2:	1a12      	subs	r2, r2, r0
 80064e4:	eb63 0301 	sbc.w	r3, r3, r1
 80064e8:	f04f 0000 	mov.w	r0, #0
 80064ec:	f04f 0100 	mov.w	r1, #0
 80064f0:	00d9      	lsls	r1, r3, #3
 80064f2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80064f6:	00d0      	lsls	r0, r2, #3
 80064f8:	4602      	mov	r2, r0
 80064fa:	460b      	mov	r3, r1
 80064fc:	eb12 0208 	adds.w	r2, r2, r8
 8006500:	eb43 0309 	adc.w	r3, r3, r9
 8006504:	f04f 0000 	mov.w	r0, #0
 8006508:	f04f 0100 	mov.w	r1, #0
 800650c:	0259      	lsls	r1, r3, #9
 800650e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006512:	0250      	lsls	r0, r2, #9
 8006514:	4602      	mov	r2, r0
 8006516:	460b      	mov	r3, r1
 8006518:	4610      	mov	r0, r2
 800651a:	4619      	mov	r1, r3
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	461a      	mov	r2, r3
 8006520:	f04f 0300 	mov.w	r3, #0
 8006524:	f7fa fbb0 	bl	8000c88 <__aeabi_uldivmod>
 8006528:	4602      	mov	r2, r0
 800652a:	460b      	mov	r3, r1
 800652c:	4613      	mov	r3, r2
 800652e:	60fb      	str	r3, [r7, #12]
 8006530:	e04a      	b.n	80065c8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006532:	4b31      	ldr	r3, [pc, #196]	; (80065f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	099b      	lsrs	r3, r3, #6
 8006538:	461a      	mov	r2, r3
 800653a:	f04f 0300 	mov.w	r3, #0
 800653e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006542:	f04f 0100 	mov.w	r1, #0
 8006546:	ea02 0400 	and.w	r4, r2, r0
 800654a:	ea03 0501 	and.w	r5, r3, r1
 800654e:	4620      	mov	r0, r4
 8006550:	4629      	mov	r1, r5
 8006552:	f04f 0200 	mov.w	r2, #0
 8006556:	f04f 0300 	mov.w	r3, #0
 800655a:	014b      	lsls	r3, r1, #5
 800655c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006560:	0142      	lsls	r2, r0, #5
 8006562:	4610      	mov	r0, r2
 8006564:	4619      	mov	r1, r3
 8006566:	1b00      	subs	r0, r0, r4
 8006568:	eb61 0105 	sbc.w	r1, r1, r5
 800656c:	f04f 0200 	mov.w	r2, #0
 8006570:	f04f 0300 	mov.w	r3, #0
 8006574:	018b      	lsls	r3, r1, #6
 8006576:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800657a:	0182      	lsls	r2, r0, #6
 800657c:	1a12      	subs	r2, r2, r0
 800657e:	eb63 0301 	sbc.w	r3, r3, r1
 8006582:	f04f 0000 	mov.w	r0, #0
 8006586:	f04f 0100 	mov.w	r1, #0
 800658a:	00d9      	lsls	r1, r3, #3
 800658c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006590:	00d0      	lsls	r0, r2, #3
 8006592:	4602      	mov	r2, r0
 8006594:	460b      	mov	r3, r1
 8006596:	1912      	adds	r2, r2, r4
 8006598:	eb45 0303 	adc.w	r3, r5, r3
 800659c:	f04f 0000 	mov.w	r0, #0
 80065a0:	f04f 0100 	mov.w	r1, #0
 80065a4:	0299      	lsls	r1, r3, #10
 80065a6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80065aa:	0290      	lsls	r0, r2, #10
 80065ac:	4602      	mov	r2, r0
 80065ae:	460b      	mov	r3, r1
 80065b0:	4610      	mov	r0, r2
 80065b2:	4619      	mov	r1, r3
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	461a      	mov	r2, r3
 80065b8:	f04f 0300 	mov.w	r3, #0
 80065bc:	f7fa fb64 	bl	8000c88 <__aeabi_uldivmod>
 80065c0:	4602      	mov	r2, r0
 80065c2:	460b      	mov	r3, r1
 80065c4:	4613      	mov	r3, r2
 80065c6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80065c8:	4b0b      	ldr	r3, [pc, #44]	; (80065f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	0c1b      	lsrs	r3, r3, #16
 80065ce:	f003 0303 	and.w	r3, r3, #3
 80065d2:	3301      	adds	r3, #1
 80065d4:	005b      	lsls	r3, r3, #1
 80065d6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80065d8:	68fa      	ldr	r2, [r7, #12]
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80065e0:	60bb      	str	r3, [r7, #8]
      break;
 80065e2:	e002      	b.n	80065ea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80065e4:	4b05      	ldr	r3, [pc, #20]	; (80065fc <HAL_RCC_GetSysClockFreq+0x1bc>)
 80065e6:	60bb      	str	r3, [r7, #8]
      break;
 80065e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80065ea:	68bb      	ldr	r3, [r7, #8]
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3710      	adds	r7, #16
 80065f0:	46bd      	mov	sp, r7
 80065f2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80065f6:	bf00      	nop
 80065f8:	40023800 	.word	0x40023800
 80065fc:	00f42400 	.word	0x00f42400
 8006600:	007a1200 	.word	0x007a1200

08006604 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006604:	b480      	push	{r7}
 8006606:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006608:	4b03      	ldr	r3, [pc, #12]	; (8006618 <HAL_RCC_GetHCLKFreq+0x14>)
 800660a:	681b      	ldr	r3, [r3, #0]
}
 800660c:	4618      	mov	r0, r3
 800660e:	46bd      	mov	sp, r7
 8006610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006614:	4770      	bx	lr
 8006616:	bf00      	nop
 8006618:	20000008 	.word	0x20000008

0800661c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006620:	f7ff fff0 	bl	8006604 <HAL_RCC_GetHCLKFreq>
 8006624:	4602      	mov	r2, r0
 8006626:	4b05      	ldr	r3, [pc, #20]	; (800663c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	0a9b      	lsrs	r3, r3, #10
 800662c:	f003 0307 	and.w	r3, r3, #7
 8006630:	4903      	ldr	r1, [pc, #12]	; (8006640 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006632:	5ccb      	ldrb	r3, [r1, r3]
 8006634:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006638:	4618      	mov	r0, r3
 800663a:	bd80      	pop	{r7, pc}
 800663c:	40023800 	.word	0x40023800
 8006640:	0800f448 	.word	0x0800f448

08006644 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006648:	f7ff ffdc 	bl	8006604 <HAL_RCC_GetHCLKFreq>
 800664c:	4602      	mov	r2, r0
 800664e:	4b05      	ldr	r3, [pc, #20]	; (8006664 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	0b5b      	lsrs	r3, r3, #13
 8006654:	f003 0307 	and.w	r3, r3, #7
 8006658:	4903      	ldr	r1, [pc, #12]	; (8006668 <HAL_RCC_GetPCLK2Freq+0x24>)
 800665a:	5ccb      	ldrb	r3, [r1, r3]
 800665c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006660:	4618      	mov	r0, r3
 8006662:	bd80      	pop	{r7, pc}
 8006664:	40023800 	.word	0x40023800
 8006668:	0800f448 	.word	0x0800f448

0800666c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b086      	sub	sp, #24
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006674:	2300      	movs	r3, #0
 8006676:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006678:	2300      	movs	r3, #0
 800667a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f003 0301 	and.w	r3, r3, #1
 8006684:	2b00      	cmp	r3, #0
 8006686:	d105      	bne.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006690:	2b00      	cmp	r3, #0
 8006692:	d035      	beq.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006694:	4b62      	ldr	r3, [pc, #392]	; (8006820 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006696:	2200      	movs	r2, #0
 8006698:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800669a:	f7fd fc89 	bl	8003fb0 <HAL_GetTick>
 800669e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80066a0:	e008      	b.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80066a2:	f7fd fc85 	bl	8003fb0 <HAL_GetTick>
 80066a6:	4602      	mov	r2, r0
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	1ad3      	subs	r3, r2, r3
 80066ac:	2b02      	cmp	r3, #2
 80066ae:	d901      	bls.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80066b0:	2303      	movs	r3, #3
 80066b2:	e0b0      	b.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80066b4:	4b5b      	ldr	r3, [pc, #364]	; (8006824 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d1f0      	bne.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	019a      	lsls	r2, r3, #6
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	071b      	lsls	r3, r3, #28
 80066cc:	4955      	ldr	r1, [pc, #340]	; (8006824 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80066ce:	4313      	orrs	r3, r2
 80066d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80066d4:	4b52      	ldr	r3, [pc, #328]	; (8006820 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80066d6:	2201      	movs	r2, #1
 80066d8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80066da:	f7fd fc69 	bl	8003fb0 <HAL_GetTick>
 80066de:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80066e0:	e008      	b.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80066e2:	f7fd fc65 	bl	8003fb0 <HAL_GetTick>
 80066e6:	4602      	mov	r2, r0
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	1ad3      	subs	r3, r2, r3
 80066ec:	2b02      	cmp	r3, #2
 80066ee:	d901      	bls.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80066f0:	2303      	movs	r3, #3
 80066f2:	e090      	b.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80066f4:	4b4b      	ldr	r3, [pc, #300]	; (8006824 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d0f0      	beq.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f003 0302 	and.w	r3, r3, #2
 8006708:	2b00      	cmp	r3, #0
 800670a:	f000 8083 	beq.w	8006814 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800670e:	2300      	movs	r3, #0
 8006710:	60fb      	str	r3, [r7, #12]
 8006712:	4b44      	ldr	r3, [pc, #272]	; (8006824 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006716:	4a43      	ldr	r2, [pc, #268]	; (8006824 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800671c:	6413      	str	r3, [r2, #64]	; 0x40
 800671e:	4b41      	ldr	r3, [pc, #260]	; (8006824 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006726:	60fb      	str	r3, [r7, #12]
 8006728:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800672a:	4b3f      	ldr	r3, [pc, #252]	; (8006828 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a3e      	ldr	r2, [pc, #248]	; (8006828 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006730:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006734:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006736:	f7fd fc3b 	bl	8003fb0 <HAL_GetTick>
 800673a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800673c:	e008      	b.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800673e:	f7fd fc37 	bl	8003fb0 <HAL_GetTick>
 8006742:	4602      	mov	r2, r0
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	1ad3      	subs	r3, r2, r3
 8006748:	2b02      	cmp	r3, #2
 800674a:	d901      	bls.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800674c:	2303      	movs	r3, #3
 800674e:	e062      	b.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006750:	4b35      	ldr	r3, [pc, #212]	; (8006828 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006758:	2b00      	cmp	r3, #0
 800675a:	d0f0      	beq.n	800673e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800675c:	4b31      	ldr	r3, [pc, #196]	; (8006824 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800675e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006760:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006764:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d02f      	beq.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x160>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	68db      	ldr	r3, [r3, #12]
 8006770:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006774:	693a      	ldr	r2, [r7, #16]
 8006776:	429a      	cmp	r2, r3
 8006778:	d028      	beq.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800677a:	4b2a      	ldr	r3, [pc, #168]	; (8006824 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800677c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800677e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006782:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006784:	4b29      	ldr	r3, [pc, #164]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006786:	2201      	movs	r2, #1
 8006788:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800678a:	4b28      	ldr	r3, [pc, #160]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800678c:	2200      	movs	r2, #0
 800678e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006790:	4a24      	ldr	r2, [pc, #144]	; (8006824 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006796:	4b23      	ldr	r3, [pc, #140]	; (8006824 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800679a:	f003 0301 	and.w	r3, r3, #1
 800679e:	2b01      	cmp	r3, #1
 80067a0:	d114      	bne.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80067a2:	f7fd fc05 	bl	8003fb0 <HAL_GetTick>
 80067a6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067a8:	e00a      	b.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80067aa:	f7fd fc01 	bl	8003fb0 <HAL_GetTick>
 80067ae:	4602      	mov	r2, r0
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	1ad3      	subs	r3, r2, r3
 80067b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d901      	bls.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80067bc:	2303      	movs	r3, #3
 80067be:	e02a      	b.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067c0:	4b18      	ldr	r3, [pc, #96]	; (8006824 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80067c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067c4:	f003 0302 	and.w	r3, r3, #2
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d0ee      	beq.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	68db      	ldr	r3, [r3, #12]
 80067d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067d8:	d10d      	bne.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80067da:	4b12      	ldr	r3, [pc, #72]	; (8006824 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	68db      	ldr	r3, [r3, #12]
 80067e6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80067ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067ee:	490d      	ldr	r1, [pc, #52]	; (8006824 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80067f0:	4313      	orrs	r3, r2
 80067f2:	608b      	str	r3, [r1, #8]
 80067f4:	e005      	b.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80067f6:	4b0b      	ldr	r3, [pc, #44]	; (8006824 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	4a0a      	ldr	r2, [pc, #40]	; (8006824 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80067fc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006800:	6093      	str	r3, [r2, #8]
 8006802:	4b08      	ldr	r3, [pc, #32]	; (8006824 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006804:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	68db      	ldr	r3, [r3, #12]
 800680a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800680e:	4905      	ldr	r1, [pc, #20]	; (8006824 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006810:	4313      	orrs	r3, r2
 8006812:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006814:	2300      	movs	r3, #0
}
 8006816:	4618      	mov	r0, r3
 8006818:	3718      	adds	r7, #24
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}
 800681e:	bf00      	nop
 8006820:	42470068 	.word	0x42470068
 8006824:	40023800 	.word	0x40023800
 8006828:	40007000 	.word	0x40007000
 800682c:	42470e40 	.word	0x42470e40

08006830 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b082      	sub	sp, #8
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d101      	bne.n	8006842 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	e083      	b.n	800694a <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	7f5b      	ldrb	r3, [r3, #29]
 8006846:	b2db      	uxtb	r3, r3
 8006848:	2b00      	cmp	r3, #0
 800684a:	d105      	bne.n	8006858 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2200      	movs	r2, #0
 8006850:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f7fd f89e 	bl	8003994 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2202      	movs	r2, #2
 800685c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	22ca      	movs	r2, #202	; 0xca
 8006864:	625a      	str	r2, [r3, #36]	; 0x24
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	2253      	movs	r2, #83	; 0x53
 800686c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f000 faa8 	bl	8006dc4 <RTC_EnterInitMode>
 8006874:	4603      	mov	r3, r0
 8006876:	2b00      	cmp	r3, #0
 8006878:	d008      	beq.n	800688c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	22ff      	movs	r2, #255	; 0xff
 8006880:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2204      	movs	r2, #4
 8006886:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8006888:	2301      	movs	r3, #1
 800688a:	e05e      	b.n	800694a <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	689b      	ldr	r3, [r3, #8]
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	6812      	ldr	r2, [r2, #0]
 8006896:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800689a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800689e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	6899      	ldr	r1, [r3, #8]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	685a      	ldr	r2, [r3, #4]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	691b      	ldr	r3, [r3, #16]
 80068ae:	431a      	orrs	r2, r3
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	695b      	ldr	r3, [r3, #20]
 80068b4:	431a      	orrs	r2, r3
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	430a      	orrs	r2, r1
 80068bc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	687a      	ldr	r2, [r7, #4]
 80068c4:	68d2      	ldr	r2, [r2, #12]
 80068c6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	6919      	ldr	r1, [r3, #16]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	041a      	lsls	r2, r3, #16
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	430a      	orrs	r2, r1
 80068da:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	68da      	ldr	r2, [r3, #12]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80068ea:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	f003 0320 	and.w	r3, r3, #32
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d10e      	bne.n	8006918 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f000 fa3a 	bl	8006d74 <HAL_RTC_WaitForSynchro>
 8006900:	4603      	mov	r3, r0
 8006902:	2b00      	cmp	r3, #0
 8006904:	d008      	beq.n	8006918 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	22ff      	movs	r2, #255	; 0xff
 800690c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2204      	movs	r2, #4
 8006912:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	e018      	b.n	800694a <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006926:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	699a      	ldr	r2, [r3, #24]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	430a      	orrs	r2, r1
 8006938:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	22ff      	movs	r2, #255	; 0xff
 8006940:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2201      	movs	r2, #1
 8006946:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8006948:	2300      	movs	r3, #0
  }
}
 800694a:	4618      	mov	r0, r3
 800694c:	3708      	adds	r7, #8
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}

08006952 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006952:	b590      	push	{r4, r7, lr}
 8006954:	b087      	sub	sp, #28
 8006956:	af00      	add	r7, sp, #0
 8006958:	60f8      	str	r0, [r7, #12]
 800695a:	60b9      	str	r1, [r7, #8]
 800695c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800695e:	2300      	movs	r3, #0
 8006960:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	7f1b      	ldrb	r3, [r3, #28]
 8006966:	2b01      	cmp	r3, #1
 8006968:	d101      	bne.n	800696e <HAL_RTC_SetTime+0x1c>
 800696a:	2302      	movs	r3, #2
 800696c:	e0aa      	b.n	8006ac4 <HAL_RTC_SetTime+0x172>
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2201      	movs	r2, #1
 8006972:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2202      	movs	r2, #2
 8006978:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d126      	bne.n	80069ce <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800698a:	2b00      	cmp	r3, #0
 800698c:	d102      	bne.n	8006994 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	2200      	movs	r2, #0
 8006992:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	4618      	mov	r0, r3
 800699a:	f000 fa3f 	bl	8006e1c <RTC_ByteToBcd2>
 800699e:	4603      	mov	r3, r0
 80069a0:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	785b      	ldrb	r3, [r3, #1]
 80069a6:	4618      	mov	r0, r3
 80069a8:	f000 fa38 	bl	8006e1c <RTC_ByteToBcd2>
 80069ac:	4603      	mov	r3, r0
 80069ae:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80069b0:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	789b      	ldrb	r3, [r3, #2]
 80069b6:	4618      	mov	r0, r3
 80069b8:	f000 fa30 	bl	8006e1c <RTC_ByteToBcd2>
 80069bc:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80069be:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	78db      	ldrb	r3, [r3, #3]
 80069c6:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80069c8:	4313      	orrs	r3, r2
 80069ca:	617b      	str	r3, [r7, #20]
 80069cc:	e018      	b.n	8006a00 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	689b      	ldr	r3, [r3, #8]
 80069d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d102      	bne.n	80069e2 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	2200      	movs	r2, #0
 80069e0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	781b      	ldrb	r3, [r3, #0]
 80069e6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	785b      	ldrb	r3, [r3, #1]
 80069ec:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80069ee:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80069f0:	68ba      	ldr	r2, [r7, #8]
 80069f2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80069f4:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	78db      	ldrb	r3, [r3, #3]
 80069fa:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80069fc:	4313      	orrs	r3, r2
 80069fe:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	22ca      	movs	r2, #202	; 0xca
 8006a06:	625a      	str	r2, [r3, #36]	; 0x24
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	2253      	movs	r2, #83	; 0x53
 8006a0e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006a10:	68f8      	ldr	r0, [r7, #12]
 8006a12:	f000 f9d7 	bl	8006dc4 <RTC_EnterInitMode>
 8006a16:	4603      	mov	r3, r0
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d00b      	beq.n	8006a34 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	22ff      	movs	r2, #255	; 0xff
 8006a22:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2204      	movs	r2, #4
 8006a28:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8006a30:	2301      	movs	r3, #1
 8006a32:	e047      	b.n	8006ac4 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681a      	ldr	r2, [r3, #0]
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006a3e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006a42:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	689a      	ldr	r2, [r3, #8]
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006a52:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	6899      	ldr	r1, [r3, #8]
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	68da      	ldr	r2, [r3, #12]
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	691b      	ldr	r3, [r3, #16]
 8006a62:	431a      	orrs	r2, r3
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	430a      	orrs	r2, r1
 8006a6a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	68da      	ldr	r2, [r3, #12]
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a7a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	f003 0320 	and.w	r3, r3, #32
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d111      	bne.n	8006aae <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006a8a:	68f8      	ldr	r0, [r7, #12]
 8006a8c:	f000 f972 	bl	8006d74 <HAL_RTC_WaitForSynchro>
 8006a90:	4603      	mov	r3, r0
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d00b      	beq.n	8006aae <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	22ff      	movs	r2, #255	; 0xff
 8006a9c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2204      	movs	r2, #4
 8006aa2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	e00a      	b.n	8006ac4 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	22ff      	movs	r2, #255	; 0xff
 8006ab4:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2201      	movs	r2, #1
 8006aba:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8006ac2:	2300      	movs	r3, #0
  }
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	371c      	adds	r7, #28
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd90      	pop	{r4, r7, pc}

08006acc <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b086      	sub	sp, #24
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	60f8      	str	r0, [r7, #12]
 8006ad4:	60b9      	str	r1, [r7, #8]
 8006ad6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	691b      	ldr	r3, [r3, #16]
 8006aec:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006afe:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006b02:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	0c1b      	lsrs	r3, r3, #16
 8006b08:	b2db      	uxtb	r3, r3
 8006b0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b0e:	b2da      	uxtb	r2, r3
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	0a1b      	lsrs	r3, r3, #8
 8006b18:	b2db      	uxtb	r3, r3
 8006b1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b1e:	b2da      	uxtb	r2, r3
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	b2db      	uxtb	r3, r3
 8006b28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b2c:	b2da      	uxtb	r2, r3
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	0c1b      	lsrs	r3, r3, #16
 8006b36:	b2db      	uxtb	r3, r3
 8006b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b3c:	b2da      	uxtb	r2, r3
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d11a      	bne.n	8006b7e <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	781b      	ldrb	r3, [r3, #0]
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f000 f983 	bl	8006e58 <RTC_Bcd2ToByte>
 8006b52:	4603      	mov	r3, r0
 8006b54:	461a      	mov	r2, r3
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	785b      	ldrb	r3, [r3, #1]
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f000 f97a 	bl	8006e58 <RTC_Bcd2ToByte>
 8006b64:	4603      	mov	r3, r0
 8006b66:	461a      	mov	r2, r3
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	789b      	ldrb	r3, [r3, #2]
 8006b70:	4618      	mov	r0, r3
 8006b72:	f000 f971 	bl	8006e58 <RTC_Bcd2ToByte>
 8006b76:	4603      	mov	r3, r0
 8006b78:	461a      	mov	r2, r3
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006b7e:	2300      	movs	r3, #0
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3718      	adds	r7, #24
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}

08006b88 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006b88:	b590      	push	{r4, r7, lr}
 8006b8a:	b087      	sub	sp, #28
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	60f8      	str	r0, [r7, #12]
 8006b90:	60b9      	str	r1, [r7, #8]
 8006b92:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006b94:	2300      	movs	r3, #0
 8006b96:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	7f1b      	ldrb	r3, [r3, #28]
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	d101      	bne.n	8006ba4 <HAL_RTC_SetDate+0x1c>
 8006ba0:	2302      	movs	r3, #2
 8006ba2:	e094      	b.n	8006cce <HAL_RTC_SetDate+0x146>
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2202      	movs	r2, #2
 8006bae:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d10e      	bne.n	8006bd4 <HAL_RTC_SetDate+0x4c>
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	785b      	ldrb	r3, [r3, #1]
 8006bba:	f003 0310 	and.w	r3, r3, #16
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d008      	beq.n	8006bd4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	785b      	ldrb	r3, [r3, #1]
 8006bc6:	f023 0310 	bic.w	r3, r3, #16
 8006bca:	b2db      	uxtb	r3, r3
 8006bcc:	330a      	adds	r3, #10
 8006bce:	b2da      	uxtb	r2, r3
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d11c      	bne.n	8006c14 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	78db      	ldrb	r3, [r3, #3]
 8006bde:	4618      	mov	r0, r3
 8006be0:	f000 f91c 	bl	8006e1c <RTC_ByteToBcd2>
 8006be4:	4603      	mov	r3, r0
 8006be6:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	785b      	ldrb	r3, [r3, #1]
 8006bec:	4618      	mov	r0, r3
 8006bee:	f000 f915 	bl	8006e1c <RTC_ByteToBcd2>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006bf6:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	789b      	ldrb	r3, [r3, #2]
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f000 f90d 	bl	8006e1c <RTC_ByteToBcd2>
 8006c02:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006c04:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	617b      	str	r3, [r7, #20]
 8006c12:	e00e      	b.n	8006c32 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	78db      	ldrb	r3, [r3, #3]
 8006c18:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	785b      	ldrb	r3, [r3, #1]
 8006c1e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006c20:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8006c22:	68ba      	ldr	r2, [r7, #8]
 8006c24:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8006c26:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	22ca      	movs	r2, #202	; 0xca
 8006c38:	625a      	str	r2, [r3, #36]	; 0x24
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	2253      	movs	r2, #83	; 0x53
 8006c40:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006c42:	68f8      	ldr	r0, [r7, #12]
 8006c44:	f000 f8be 	bl	8006dc4 <RTC_EnterInitMode>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d00b      	beq.n	8006c66 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	22ff      	movs	r2, #255	; 0xff
 8006c54:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2204      	movs	r2, #4
 8006c5a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8006c62:	2301      	movs	r3, #1
 8006c64:	e033      	b.n	8006cce <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681a      	ldr	r2, [r3, #0]
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006c70:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006c74:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	68da      	ldr	r2, [r3, #12]
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c84:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	f003 0320 	and.w	r3, r3, #32
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d111      	bne.n	8006cb8 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006c94:	68f8      	ldr	r0, [r7, #12]
 8006c96:	f000 f86d 	bl	8006d74 <HAL_RTC_WaitForSynchro>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d00b      	beq.n	8006cb8 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	22ff      	movs	r2, #255	; 0xff
 8006ca6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2204      	movs	r2, #4
 8006cac:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	e00a      	b.n	8006cce <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	22ff      	movs	r2, #255	; 0xff
 8006cbe:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8006ccc:	2300      	movs	r3, #0
  }
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	371c      	adds	r7, #28
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd90      	pop	{r4, r7, pc}

08006cd6 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006cd6:	b580      	push	{r7, lr}
 8006cd8:	b086      	sub	sp, #24
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	60f8      	str	r0, [r7, #12]
 8006cde:	60b9      	str	r1, [r7, #8]
 8006ce0:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006cf0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006cf4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	0c1b      	lsrs	r3, r3, #16
 8006cfa:	b2da      	uxtb	r2, r3
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	0a1b      	lsrs	r3, r3, #8
 8006d04:	b2db      	uxtb	r3, r3
 8006d06:	f003 031f 	and.w	r3, r3, #31
 8006d0a:	b2da      	uxtb	r2, r3
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	b2db      	uxtb	r3, r3
 8006d14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d18:	b2da      	uxtb	r2, r3
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	0b5b      	lsrs	r3, r3, #13
 8006d22:	b2db      	uxtb	r3, r3
 8006d24:	f003 0307 	and.w	r3, r3, #7
 8006d28:	b2da      	uxtb	r2, r3
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d11a      	bne.n	8006d6a <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	78db      	ldrb	r3, [r3, #3]
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f000 f88d 	bl	8006e58 <RTC_Bcd2ToByte>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	461a      	mov	r2, r3
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	785b      	ldrb	r3, [r3, #1]
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f000 f884 	bl	8006e58 <RTC_Bcd2ToByte>
 8006d50:	4603      	mov	r3, r0
 8006d52:	461a      	mov	r2, r3
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	789b      	ldrb	r3, [r3, #2]
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f000 f87b 	bl	8006e58 <RTC_Bcd2ToByte>
 8006d62:	4603      	mov	r3, r0
 8006d64:	461a      	mov	r2, r3
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006d6a:	2300      	movs	r3, #0
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3718      	adds	r7, #24
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}

08006d74 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b084      	sub	sp, #16
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	68da      	ldr	r2, [r3, #12]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006d8e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006d90:	f7fd f90e 	bl	8003fb0 <HAL_GetTick>
 8006d94:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006d96:	e009      	b.n	8006dac <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006d98:	f7fd f90a 	bl	8003fb0 <HAL_GetTick>
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	1ad3      	subs	r3, r2, r3
 8006da2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006da6:	d901      	bls.n	8006dac <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006da8:	2303      	movs	r3, #3
 8006daa:	e007      	b.n	8006dbc <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	68db      	ldr	r3, [r3, #12]
 8006db2:	f003 0320 	and.w	r3, r3, #32
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d0ee      	beq.n	8006d98 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006dba:	2300      	movs	r3, #0
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3710      	adds	r7, #16
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}

08006dc4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b084      	sub	sp, #16
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	68db      	ldr	r3, [r3, #12]
 8006dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d119      	bne.n	8006e12 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f04f 32ff 	mov.w	r2, #4294967295
 8006de6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006de8:	f7fd f8e2 	bl	8003fb0 <HAL_GetTick>
 8006dec:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006dee:	e009      	b.n	8006e04 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006df0:	f7fd f8de 	bl	8003fb0 <HAL_GetTick>
 8006df4:	4602      	mov	r2, r0
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	1ad3      	subs	r3, r2, r3
 8006dfa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006dfe:	d901      	bls.n	8006e04 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8006e00:	2303      	movs	r3, #3
 8006e02:	e007      	b.n	8006e14 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	68db      	ldr	r3, [r3, #12]
 8006e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d0ee      	beq.n	8006df0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8006e12:	2300      	movs	r3, #0
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3710      	adds	r7, #16
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}

08006e1c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b085      	sub	sp, #20
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	4603      	mov	r3, r0
 8006e24:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006e26:	2300      	movs	r3, #0
 8006e28:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8006e2a:	e005      	b.n	8006e38 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	3301      	adds	r3, #1
 8006e30:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8006e32:	79fb      	ldrb	r3, [r7, #7]
 8006e34:	3b0a      	subs	r3, #10
 8006e36:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8006e38:	79fb      	ldrb	r3, [r7, #7]
 8006e3a:	2b09      	cmp	r3, #9
 8006e3c:	d8f6      	bhi.n	8006e2c <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	b2db      	uxtb	r3, r3
 8006e42:	011b      	lsls	r3, r3, #4
 8006e44:	b2da      	uxtb	r2, r3
 8006e46:	79fb      	ldrb	r3, [r7, #7]
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	b2db      	uxtb	r3, r3
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3714      	adds	r7, #20
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr

08006e58 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b085      	sub	sp, #20
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	4603      	mov	r3, r0
 8006e60:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8006e62:	2300      	movs	r3, #0
 8006e64:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8006e66:	79fb      	ldrb	r3, [r7, #7]
 8006e68:	091b      	lsrs	r3, r3, #4
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	461a      	mov	r2, r3
 8006e6e:	4613      	mov	r3, r2
 8006e70:	009b      	lsls	r3, r3, #2
 8006e72:	4413      	add	r3, r2
 8006e74:	005b      	lsls	r3, r3, #1
 8006e76:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8006e78:	79fb      	ldrb	r3, [r7, #7]
 8006e7a:	f003 030f 	and.w	r3, r3, #15
 8006e7e:	b2da      	uxtb	r2, r3
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	b2db      	uxtb	r3, r3
 8006e84:	4413      	add	r3, r2
 8006e86:	b2db      	uxtb	r3, r3
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3714      	adds	r7, #20
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr

08006e94 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b087      	sub	sp, #28
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	60f8      	str	r0, [r7, #12]
 8006e9c:	60b9      	str	r1, [r7, #8]
 8006e9e:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	3350      	adds	r3, #80	; 0x50
 8006eaa:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	009b      	lsls	r3, r3, #2
 8006eb0:	697a      	ldr	r2, [r7, #20]
 8006eb2:	4413      	add	r3, r2
 8006eb4:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	687a      	ldr	r2, [r7, #4]
 8006eba:	601a      	str	r2, [r3, #0]
}
 8006ebc:	bf00      	nop
 8006ebe:	371c      	adds	r7, #28
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec6:	4770      	bx	lr

08006ec8 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b085      	sub	sp, #20
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	3350      	adds	r3, #80	; 0x50
 8006edc:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	009b      	lsls	r3, r3, #2
 8006ee2:	68fa      	ldr	r2, [r7, #12]
 8006ee4:	4413      	add	r3, r2
 8006ee6:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3714      	adds	r7, #20
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef6:	4770      	bx	lr

08006ef8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b082      	sub	sp, #8
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d101      	bne.n	8006f0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006f06:	2301      	movs	r3, #1
 8006f08:	e07b      	b.n	8007002 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d108      	bne.n	8006f24 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f1a:	d009      	beq.n	8006f30 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	61da      	str	r2, [r3, #28]
 8006f22:	e005      	b.n	8006f30 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2200      	movs	r2, #0
 8006f34:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f3c:	b2db      	uxtb	r3, r3
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d106      	bne.n	8006f50 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2200      	movs	r2, #0
 8006f46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f7fc fd38 	bl	80039c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2202      	movs	r2, #2
 8006f54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	681a      	ldr	r2, [r3, #0]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f66:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	689b      	ldr	r3, [r3, #8]
 8006f74:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006f78:	431a      	orrs	r2, r3
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	68db      	ldr	r3, [r3, #12]
 8006f7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f82:	431a      	orrs	r2, r3
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	691b      	ldr	r3, [r3, #16]
 8006f88:	f003 0302 	and.w	r3, r3, #2
 8006f8c:	431a      	orrs	r2, r3
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	695b      	ldr	r3, [r3, #20]
 8006f92:	f003 0301 	and.w	r3, r3, #1
 8006f96:	431a      	orrs	r2, r3
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	699b      	ldr	r3, [r3, #24]
 8006f9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006fa0:	431a      	orrs	r2, r3
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	69db      	ldr	r3, [r3, #28]
 8006fa6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006faa:	431a      	orrs	r2, r3
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6a1b      	ldr	r3, [r3, #32]
 8006fb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fb4:	ea42 0103 	orr.w	r1, r2, r3
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fbc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	430a      	orrs	r2, r1
 8006fc6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	699b      	ldr	r3, [r3, #24]
 8006fcc:	0c1b      	lsrs	r3, r3, #16
 8006fce:	f003 0104 	and.w	r1, r3, #4
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd6:	f003 0210 	and.w	r2, r3, #16
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	430a      	orrs	r2, r1
 8006fe0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	69da      	ldr	r2, [r3, #28]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ff0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007000:	2300      	movs	r3, #0
}
 8007002:	4618      	mov	r0, r3
 8007004:	3708      	adds	r7, #8
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}

0800700a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800700a:	b580      	push	{r7, lr}
 800700c:	b088      	sub	sp, #32
 800700e:	af00      	add	r7, sp, #0
 8007010:	60f8      	str	r0, [r7, #12]
 8007012:	60b9      	str	r1, [r7, #8]
 8007014:	603b      	str	r3, [r7, #0]
 8007016:	4613      	mov	r3, r2
 8007018:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800701a:	2300      	movs	r3, #0
 800701c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007024:	2b01      	cmp	r3, #1
 8007026:	d101      	bne.n	800702c <HAL_SPI_Transmit+0x22>
 8007028:	2302      	movs	r3, #2
 800702a:	e126      	b.n	800727a <HAL_SPI_Transmit+0x270>
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2201      	movs	r2, #1
 8007030:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007034:	f7fc ffbc 	bl	8003fb0 <HAL_GetTick>
 8007038:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800703a:	88fb      	ldrh	r3, [r7, #6]
 800703c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007044:	b2db      	uxtb	r3, r3
 8007046:	2b01      	cmp	r3, #1
 8007048:	d002      	beq.n	8007050 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800704a:	2302      	movs	r3, #2
 800704c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800704e:	e10b      	b.n	8007268 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d002      	beq.n	800705c <HAL_SPI_Transmit+0x52>
 8007056:	88fb      	ldrh	r3, [r7, #6]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d102      	bne.n	8007062 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800705c:	2301      	movs	r3, #1
 800705e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007060:	e102      	b.n	8007268 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2203      	movs	r2, #3
 8007066:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2200      	movs	r2, #0
 800706e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	68ba      	ldr	r2, [r7, #8]
 8007074:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	88fa      	ldrh	r2, [r7, #6]
 800707a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	88fa      	ldrh	r2, [r7, #6]
 8007080:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2200      	movs	r2, #0
 8007086:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2200      	movs	r2, #0
 800708c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2200      	movs	r2, #0
 8007092:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	2200      	movs	r2, #0
 8007098:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2200      	movs	r2, #0
 800709e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070a8:	d10f      	bne.n	80070ca <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	681a      	ldr	r2, [r3, #0]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070b8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80070c8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070d4:	2b40      	cmp	r3, #64	; 0x40
 80070d6:	d007      	beq.n	80070e8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	681a      	ldr	r2, [r3, #0]
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80070e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	68db      	ldr	r3, [r3, #12]
 80070ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070f0:	d14b      	bne.n	800718a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d002      	beq.n	8007100 <HAL_SPI_Transmit+0xf6>
 80070fa:	8afb      	ldrh	r3, [r7, #22]
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	d13e      	bne.n	800717e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007104:	881a      	ldrh	r2, [r3, #0]
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007110:	1c9a      	adds	r2, r3, #2
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800711a:	b29b      	uxth	r3, r3
 800711c:	3b01      	subs	r3, #1
 800711e:	b29a      	uxth	r2, r3
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007124:	e02b      	b.n	800717e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	689b      	ldr	r3, [r3, #8]
 800712c:	f003 0302 	and.w	r3, r3, #2
 8007130:	2b02      	cmp	r3, #2
 8007132:	d112      	bne.n	800715a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007138:	881a      	ldrh	r2, [r3, #0]
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007144:	1c9a      	adds	r2, r3, #2
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800714e:	b29b      	uxth	r3, r3
 8007150:	3b01      	subs	r3, #1
 8007152:	b29a      	uxth	r2, r3
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	86da      	strh	r2, [r3, #54]	; 0x36
 8007158:	e011      	b.n	800717e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800715a:	f7fc ff29 	bl	8003fb0 <HAL_GetTick>
 800715e:	4602      	mov	r2, r0
 8007160:	69bb      	ldr	r3, [r7, #24]
 8007162:	1ad3      	subs	r3, r2, r3
 8007164:	683a      	ldr	r2, [r7, #0]
 8007166:	429a      	cmp	r2, r3
 8007168:	d803      	bhi.n	8007172 <HAL_SPI_Transmit+0x168>
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007170:	d102      	bne.n	8007178 <HAL_SPI_Transmit+0x16e>
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d102      	bne.n	800717e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007178:	2303      	movs	r3, #3
 800717a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800717c:	e074      	b.n	8007268 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007182:	b29b      	uxth	r3, r3
 8007184:	2b00      	cmp	r3, #0
 8007186:	d1ce      	bne.n	8007126 <HAL_SPI_Transmit+0x11c>
 8007188:	e04c      	b.n	8007224 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d002      	beq.n	8007198 <HAL_SPI_Transmit+0x18e>
 8007192:	8afb      	ldrh	r3, [r7, #22]
 8007194:	2b01      	cmp	r3, #1
 8007196:	d140      	bne.n	800721a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	330c      	adds	r3, #12
 80071a2:	7812      	ldrb	r2, [r2, #0]
 80071a4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071aa:	1c5a      	adds	r2, r3, #1
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071b4:	b29b      	uxth	r3, r3
 80071b6:	3b01      	subs	r3, #1
 80071b8:	b29a      	uxth	r2, r3
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80071be:	e02c      	b.n	800721a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	689b      	ldr	r3, [r3, #8]
 80071c6:	f003 0302 	and.w	r3, r3, #2
 80071ca:	2b02      	cmp	r3, #2
 80071cc:	d113      	bne.n	80071f6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	330c      	adds	r3, #12
 80071d8:	7812      	ldrb	r2, [r2, #0]
 80071da:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071e0:	1c5a      	adds	r2, r3, #1
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071ea:	b29b      	uxth	r3, r3
 80071ec:	3b01      	subs	r3, #1
 80071ee:	b29a      	uxth	r2, r3
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	86da      	strh	r2, [r3, #54]	; 0x36
 80071f4:	e011      	b.n	800721a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80071f6:	f7fc fedb 	bl	8003fb0 <HAL_GetTick>
 80071fa:	4602      	mov	r2, r0
 80071fc:	69bb      	ldr	r3, [r7, #24]
 80071fe:	1ad3      	subs	r3, r2, r3
 8007200:	683a      	ldr	r2, [r7, #0]
 8007202:	429a      	cmp	r2, r3
 8007204:	d803      	bhi.n	800720e <HAL_SPI_Transmit+0x204>
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800720c:	d102      	bne.n	8007214 <HAL_SPI_Transmit+0x20a>
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d102      	bne.n	800721a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007214:	2303      	movs	r3, #3
 8007216:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007218:	e026      	b.n	8007268 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800721e:	b29b      	uxth	r3, r3
 8007220:	2b00      	cmp	r3, #0
 8007222:	d1cd      	bne.n	80071c0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007224:	69ba      	ldr	r2, [r7, #24]
 8007226:	6839      	ldr	r1, [r7, #0]
 8007228:	68f8      	ldr	r0, [r7, #12]
 800722a:	f000 f9ff 	bl	800762c <SPI_EndRxTxTransaction>
 800722e:	4603      	mov	r3, r0
 8007230:	2b00      	cmp	r3, #0
 8007232:	d002      	beq.n	800723a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2220      	movs	r2, #32
 8007238:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	689b      	ldr	r3, [r3, #8]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d10a      	bne.n	8007258 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007242:	2300      	movs	r3, #0
 8007244:	613b      	str	r3, [r7, #16]
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	68db      	ldr	r3, [r3, #12]
 800724c:	613b      	str	r3, [r7, #16]
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	689b      	ldr	r3, [r3, #8]
 8007254:	613b      	str	r3, [r7, #16]
 8007256:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800725c:	2b00      	cmp	r3, #0
 800725e:	d002      	beq.n	8007266 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007260:	2301      	movs	r3, #1
 8007262:	77fb      	strb	r3, [r7, #31]
 8007264:	e000      	b.n	8007268 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007266:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	2201      	movs	r2, #1
 800726c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	2200      	movs	r2, #0
 8007274:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007278:	7ffb      	ldrb	r3, [r7, #31]
}
 800727a:	4618      	mov	r0, r3
 800727c:	3720      	adds	r7, #32
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}
	...

08007284 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b086      	sub	sp, #24
 8007288:	af00      	add	r7, sp, #0
 800728a:	60f8      	str	r0, [r7, #12]
 800728c:	60b9      	str	r1, [r7, #8]
 800728e:	4613      	mov	r3, r2
 8007290:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007292:	2300      	movs	r3, #0
 8007294:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800729c:	2b01      	cmp	r3, #1
 800729e:	d101      	bne.n	80072a4 <HAL_SPI_Transmit_DMA+0x20>
 80072a0:	2302      	movs	r3, #2
 80072a2:	e09b      	b.n	80073dc <HAL_SPI_Transmit_DMA+0x158>
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2201      	movs	r2, #1
 80072a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80072b2:	b2db      	uxtb	r3, r3
 80072b4:	2b01      	cmp	r3, #1
 80072b6:	d002      	beq.n	80072be <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80072b8:	2302      	movs	r3, #2
 80072ba:	75fb      	strb	r3, [r7, #23]
    goto error;
 80072bc:	e089      	b.n	80073d2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d002      	beq.n	80072ca <HAL_SPI_Transmit_DMA+0x46>
 80072c4:	88fb      	ldrh	r3, [r7, #6]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d102      	bne.n	80072d0 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80072ca:	2301      	movs	r3, #1
 80072cc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80072ce:	e080      	b.n	80073d2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2203      	movs	r2, #3
 80072d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2200      	movs	r2, #0
 80072dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	68ba      	ldr	r2, [r7, #8]
 80072e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	88fa      	ldrh	r2, [r7, #6]
 80072e8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	88fa      	ldrh	r2, [r7, #6]
 80072ee:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2200      	movs	r2, #0
 80072f4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2200      	movs	r2, #0
 80072fa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	2200      	movs	r2, #0
 8007300:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2200      	movs	r2, #0
 8007306:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2200      	movs	r2, #0
 800730c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	689b      	ldr	r3, [r3, #8]
 8007312:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007316:	d10f      	bne.n	8007338 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	681a      	ldr	r2, [r3, #0]
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007326:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	681a      	ldr	r2, [r3, #0]
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007336:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800733c:	4a29      	ldr	r2, [pc, #164]	; (80073e4 <HAL_SPI_Transmit_DMA+0x160>)
 800733e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007344:	4a28      	ldr	r2, [pc, #160]	; (80073e8 <HAL_SPI_Transmit_DMA+0x164>)
 8007346:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800734c:	4a27      	ldr	r2, [pc, #156]	; (80073ec <HAL_SPI_Transmit_DMA+0x168>)
 800734e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007354:	2200      	movs	r2, #0
 8007356:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007360:	4619      	mov	r1, r3
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	330c      	adds	r3, #12
 8007368:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800736e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007370:	f7fd f80e 	bl	8004390 <HAL_DMA_Start_IT>
 8007374:	4603      	mov	r3, r0
 8007376:	2b00      	cmp	r3, #0
 8007378:	d00c      	beq.n	8007394 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800737e:	f043 0210 	orr.w	r2, r3, #16
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8007386:	2301      	movs	r3, #1
 8007388:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2201      	movs	r2, #1
 800738e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8007392:	e01e      	b.n	80073d2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800739e:	2b40      	cmp	r3, #64	; 0x40
 80073a0:	d007      	beq.n	80073b2 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	681a      	ldr	r2, [r3, #0]
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80073b0:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	685a      	ldr	r2, [r3, #4]
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f042 0220 	orr.w	r2, r2, #32
 80073c0:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	685a      	ldr	r2, [r3, #4]
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f042 0202 	orr.w	r2, r2, #2
 80073d0:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	2200      	movs	r2, #0
 80073d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80073da:	7dfb      	ldrb	r3, [r7, #23]
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3718      	adds	r7, #24
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}
 80073e4:	080074c1 	.word	0x080074c1
 80073e8:	08007419 	.word	0x08007419
 80073ec:	080074dd 	.word	0x080074dd

080073f0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b083      	sub	sp, #12
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80073f8:	bf00      	nop
 80073fa:	370c      	adds	r7, #12
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr

08007404 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007404:	b480      	push	{r7}
 8007406:	b083      	sub	sp, #12
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800740c:	bf00      	nop
 800740e:	370c      	adds	r7, #12
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr

08007418 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b086      	sub	sp, #24
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007424:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007426:	f7fc fdc3 	bl	8003fb0 <HAL_GetTick>
 800742a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007436:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800743a:	d03b      	beq.n	80074b4 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	685a      	ldr	r2, [r3, #4]
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f022 0220 	bic.w	r2, r2, #32
 800744a:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	685a      	ldr	r2, [r3, #4]
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f022 0202 	bic.w	r2, r2, #2
 800745a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800745c:	693a      	ldr	r2, [r7, #16]
 800745e:	2164      	movs	r1, #100	; 0x64
 8007460:	6978      	ldr	r0, [r7, #20]
 8007462:	f000 f8e3 	bl	800762c <SPI_EndRxTxTransaction>
 8007466:	4603      	mov	r3, r0
 8007468:	2b00      	cmp	r3, #0
 800746a:	d005      	beq.n	8007478 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007470:	f043 0220 	orr.w	r2, r3, #32
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d10a      	bne.n	8007496 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007480:	2300      	movs	r3, #0
 8007482:	60fb      	str	r3, [r7, #12]
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	68db      	ldr	r3, [r3, #12]
 800748a:	60fb      	str	r3, [r7, #12]
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	689b      	ldr	r3, [r3, #8]
 8007492:	60fb      	str	r3, [r7, #12]
 8007494:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	2200      	movs	r2, #0
 800749a:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	2201      	movs	r2, #1
 80074a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d003      	beq.n	80074b4 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80074ac:	6978      	ldr	r0, [r7, #20]
 80074ae:	f7ff ffa9 	bl	8007404 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80074b2:	e002      	b.n	80074ba <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80074b4:	6978      	ldr	r0, [r7, #20]
 80074b6:	f7f9 ff63 	bl	8001380 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80074ba:	3718      	adds	r7, #24
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b084      	sub	sp, #16
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074cc:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80074ce:	68f8      	ldr	r0, [r7, #12]
 80074d0:	f7ff ff8e 	bl	80073f0 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80074d4:	bf00      	nop
 80074d6:	3710      	adds	r7, #16
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}

080074dc <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b084      	sub	sp, #16
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074e8:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	685a      	ldr	r2, [r3, #4]
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f022 0203 	bic.w	r2, r2, #3
 80074f8:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074fe:	f043 0210 	orr.w	r2, r3, #16
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2201      	movs	r2, #1
 800750a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800750e:	68f8      	ldr	r0, [r7, #12]
 8007510:	f7ff ff78 	bl	8007404 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007514:	bf00      	nop
 8007516:	3710      	adds	r7, #16
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}

0800751c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b088      	sub	sp, #32
 8007520:	af00      	add	r7, sp, #0
 8007522:	60f8      	str	r0, [r7, #12]
 8007524:	60b9      	str	r1, [r7, #8]
 8007526:	603b      	str	r3, [r7, #0]
 8007528:	4613      	mov	r3, r2
 800752a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800752c:	f7fc fd40 	bl	8003fb0 <HAL_GetTick>
 8007530:	4602      	mov	r2, r0
 8007532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007534:	1a9b      	subs	r3, r3, r2
 8007536:	683a      	ldr	r2, [r7, #0]
 8007538:	4413      	add	r3, r2
 800753a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800753c:	f7fc fd38 	bl	8003fb0 <HAL_GetTick>
 8007540:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007542:	4b39      	ldr	r3, [pc, #228]	; (8007628 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	015b      	lsls	r3, r3, #5
 8007548:	0d1b      	lsrs	r3, r3, #20
 800754a:	69fa      	ldr	r2, [r7, #28]
 800754c:	fb02 f303 	mul.w	r3, r2, r3
 8007550:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007552:	e054      	b.n	80075fe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800755a:	d050      	beq.n	80075fe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800755c:	f7fc fd28 	bl	8003fb0 <HAL_GetTick>
 8007560:	4602      	mov	r2, r0
 8007562:	69bb      	ldr	r3, [r7, #24]
 8007564:	1ad3      	subs	r3, r2, r3
 8007566:	69fa      	ldr	r2, [r7, #28]
 8007568:	429a      	cmp	r2, r3
 800756a:	d902      	bls.n	8007572 <SPI_WaitFlagStateUntilTimeout+0x56>
 800756c:	69fb      	ldr	r3, [r7, #28]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d13d      	bne.n	80075ee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	685a      	ldr	r2, [r3, #4]
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007580:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800758a:	d111      	bne.n	80075b0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	689b      	ldr	r3, [r3, #8]
 8007590:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007594:	d004      	beq.n	80075a0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	689b      	ldr	r3, [r3, #8]
 800759a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800759e:	d107      	bne.n	80075b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	681a      	ldr	r2, [r3, #0]
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075b8:	d10f      	bne.n	80075da <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	681a      	ldr	r2, [r3, #0]
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80075c8:	601a      	str	r2, [r3, #0]
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	681a      	ldr	r2, [r3, #0]
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80075d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	2201      	movs	r2, #1
 80075de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2200      	movs	r2, #0
 80075e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80075ea:	2303      	movs	r3, #3
 80075ec:	e017      	b.n	800761e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d101      	bne.n	80075f8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80075f4:	2300      	movs	r3, #0
 80075f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	3b01      	subs	r3, #1
 80075fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	689a      	ldr	r2, [r3, #8]
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	4013      	ands	r3, r2
 8007608:	68ba      	ldr	r2, [r7, #8]
 800760a:	429a      	cmp	r2, r3
 800760c:	bf0c      	ite	eq
 800760e:	2301      	moveq	r3, #1
 8007610:	2300      	movne	r3, #0
 8007612:	b2db      	uxtb	r3, r3
 8007614:	461a      	mov	r2, r3
 8007616:	79fb      	ldrb	r3, [r7, #7]
 8007618:	429a      	cmp	r2, r3
 800761a:	d19b      	bne.n	8007554 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800761c:	2300      	movs	r3, #0
}
 800761e:	4618      	mov	r0, r3
 8007620:	3720      	adds	r7, #32
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}
 8007626:	bf00      	nop
 8007628:	20000008 	.word	0x20000008

0800762c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b088      	sub	sp, #32
 8007630:	af02      	add	r7, sp, #8
 8007632:	60f8      	str	r0, [r7, #12]
 8007634:	60b9      	str	r1, [r7, #8]
 8007636:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007638:	4b1b      	ldr	r3, [pc, #108]	; (80076a8 <SPI_EndRxTxTransaction+0x7c>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a1b      	ldr	r2, [pc, #108]	; (80076ac <SPI_EndRxTxTransaction+0x80>)
 800763e:	fba2 2303 	umull	r2, r3, r2, r3
 8007642:	0d5b      	lsrs	r3, r3, #21
 8007644:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007648:	fb02 f303 	mul.w	r3, r2, r3
 800764c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	685b      	ldr	r3, [r3, #4]
 8007652:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007656:	d112      	bne.n	800767e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	9300      	str	r3, [sp, #0]
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	2200      	movs	r2, #0
 8007660:	2180      	movs	r1, #128	; 0x80
 8007662:	68f8      	ldr	r0, [r7, #12]
 8007664:	f7ff ff5a 	bl	800751c <SPI_WaitFlagStateUntilTimeout>
 8007668:	4603      	mov	r3, r0
 800766a:	2b00      	cmp	r3, #0
 800766c:	d016      	beq.n	800769c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007672:	f043 0220 	orr.w	r2, r3, #32
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800767a:	2303      	movs	r3, #3
 800767c:	e00f      	b.n	800769e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d00a      	beq.n	800769a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	3b01      	subs	r3, #1
 8007688:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	689b      	ldr	r3, [r3, #8]
 8007690:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007694:	2b80      	cmp	r3, #128	; 0x80
 8007696:	d0f2      	beq.n	800767e <SPI_EndRxTxTransaction+0x52>
 8007698:	e000      	b.n	800769c <SPI_EndRxTxTransaction+0x70>
        break;
 800769a:	bf00      	nop
  }

  return HAL_OK;
 800769c:	2300      	movs	r3, #0
}
 800769e:	4618      	mov	r0, r3
 80076a0:	3718      	adds	r7, #24
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}
 80076a6:	bf00      	nop
 80076a8:	20000008 	.word	0x20000008
 80076ac:	165e9f81 	.word	0x165e9f81

080076b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b082      	sub	sp, #8
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d101      	bne.n	80076c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80076be:	2301      	movs	r3, #1
 80076c0:	e03f      	b.n	8007742 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076c8:	b2db      	uxtb	r3, r3
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d106      	bne.n	80076dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2200      	movs	r2, #0
 80076d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f7fc f9ec 	bl	8003ab4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2224      	movs	r2, #36	; 0x24
 80076e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	68da      	ldr	r2, [r3, #12]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80076f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f001 f899 	bl	800882c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	691a      	ldr	r2, [r3, #16]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007708:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	695a      	ldr	r2, [r3, #20]
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007718:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	68da      	ldr	r2, [r3, #12]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007728:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2200      	movs	r2, #0
 800772e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2220      	movs	r2, #32
 8007734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2220      	movs	r2, #32
 800773c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007740:	2300      	movs	r3, #0
}
 8007742:	4618      	mov	r0, r3
 8007744:	3708      	adds	r7, #8
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}

0800774a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800774a:	b580      	push	{r7, lr}
 800774c:	b08a      	sub	sp, #40	; 0x28
 800774e:	af02      	add	r7, sp, #8
 8007750:	60f8      	str	r0, [r7, #12]
 8007752:	60b9      	str	r1, [r7, #8]
 8007754:	603b      	str	r3, [r7, #0]
 8007756:	4613      	mov	r3, r2
 8007758:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800775a:	2300      	movs	r3, #0
 800775c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007764:	b2db      	uxtb	r3, r3
 8007766:	2b20      	cmp	r3, #32
 8007768:	d17c      	bne.n	8007864 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d002      	beq.n	8007776 <HAL_UART_Transmit+0x2c>
 8007770:	88fb      	ldrh	r3, [r7, #6]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d101      	bne.n	800777a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007776:	2301      	movs	r3, #1
 8007778:	e075      	b.n	8007866 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007780:	2b01      	cmp	r3, #1
 8007782:	d101      	bne.n	8007788 <HAL_UART_Transmit+0x3e>
 8007784:	2302      	movs	r3, #2
 8007786:	e06e      	b.n	8007866 <HAL_UART_Transmit+0x11c>
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2201      	movs	r2, #1
 800778c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2200      	movs	r2, #0
 8007794:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2221      	movs	r2, #33	; 0x21
 800779a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800779e:	f7fc fc07 	bl	8003fb0 <HAL_GetTick>
 80077a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	88fa      	ldrh	r2, [r7, #6]
 80077a8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	88fa      	ldrh	r2, [r7, #6]
 80077ae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	689b      	ldr	r3, [r3, #8]
 80077b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077b8:	d108      	bne.n	80077cc <HAL_UART_Transmit+0x82>
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	691b      	ldr	r3, [r3, #16]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d104      	bne.n	80077cc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80077c2:	2300      	movs	r3, #0
 80077c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	61bb      	str	r3, [r7, #24]
 80077ca:	e003      	b.n	80077d4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80077d0:	2300      	movs	r3, #0
 80077d2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2200      	movs	r2, #0
 80077d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80077dc:	e02a      	b.n	8007834 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	9300      	str	r3, [sp, #0]
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	2200      	movs	r2, #0
 80077e6:	2180      	movs	r1, #128	; 0x80
 80077e8:	68f8      	ldr	r0, [r7, #12]
 80077ea:	f000 fd1b 	bl	8008224 <UART_WaitOnFlagUntilTimeout>
 80077ee:	4603      	mov	r3, r0
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d001      	beq.n	80077f8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80077f4:	2303      	movs	r3, #3
 80077f6:	e036      	b.n	8007866 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80077f8:	69fb      	ldr	r3, [r7, #28]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d10b      	bne.n	8007816 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80077fe:	69bb      	ldr	r3, [r7, #24]
 8007800:	881b      	ldrh	r3, [r3, #0]
 8007802:	461a      	mov	r2, r3
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800780c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800780e:	69bb      	ldr	r3, [r7, #24]
 8007810:	3302      	adds	r3, #2
 8007812:	61bb      	str	r3, [r7, #24]
 8007814:	e007      	b.n	8007826 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007816:	69fb      	ldr	r3, [r7, #28]
 8007818:	781a      	ldrb	r2, [r3, #0]
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007820:	69fb      	ldr	r3, [r7, #28]
 8007822:	3301      	adds	r3, #1
 8007824:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800782a:	b29b      	uxth	r3, r3
 800782c:	3b01      	subs	r3, #1
 800782e:	b29a      	uxth	r2, r3
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007838:	b29b      	uxth	r3, r3
 800783a:	2b00      	cmp	r3, #0
 800783c:	d1cf      	bne.n	80077de <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	9300      	str	r3, [sp, #0]
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	2200      	movs	r2, #0
 8007846:	2140      	movs	r1, #64	; 0x40
 8007848:	68f8      	ldr	r0, [r7, #12]
 800784a:	f000 fceb 	bl	8008224 <UART_WaitOnFlagUntilTimeout>
 800784e:	4603      	mov	r3, r0
 8007850:	2b00      	cmp	r3, #0
 8007852:	d001      	beq.n	8007858 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007854:	2303      	movs	r3, #3
 8007856:	e006      	b.n	8007866 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	2220      	movs	r2, #32
 800785c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007860:	2300      	movs	r3, #0
 8007862:	e000      	b.n	8007866 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007864:	2302      	movs	r3, #2
  }
}
 8007866:	4618      	mov	r0, r3
 8007868:	3720      	adds	r7, #32
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}

0800786e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800786e:	b580      	push	{r7, lr}
 8007870:	b08a      	sub	sp, #40	; 0x28
 8007872:	af02      	add	r7, sp, #8
 8007874:	60f8      	str	r0, [r7, #12]
 8007876:	60b9      	str	r1, [r7, #8]
 8007878:	603b      	str	r3, [r7, #0]
 800787a:	4613      	mov	r3, r2
 800787c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800787e:	2300      	movs	r3, #0
 8007880:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007888:	b2db      	uxtb	r3, r3
 800788a:	2b20      	cmp	r3, #32
 800788c:	f040 808c 	bne.w	80079a8 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d002      	beq.n	800789c <HAL_UART_Receive+0x2e>
 8007896:	88fb      	ldrh	r3, [r7, #6]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d101      	bne.n	80078a0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800789c:	2301      	movs	r3, #1
 800789e:	e084      	b.n	80079aa <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078a6:	2b01      	cmp	r3, #1
 80078a8:	d101      	bne.n	80078ae <HAL_UART_Receive+0x40>
 80078aa:	2302      	movs	r3, #2
 80078ac:	e07d      	b.n	80079aa <HAL_UART_Receive+0x13c>
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2201      	movs	r2, #1
 80078b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2200      	movs	r2, #0
 80078ba:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2222      	movs	r2, #34	; 0x22
 80078c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2200      	movs	r2, #0
 80078c8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80078ca:	f7fc fb71 	bl	8003fb0 <HAL_GetTick>
 80078ce:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	88fa      	ldrh	r2, [r7, #6]
 80078d4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	88fa      	ldrh	r2, [r7, #6]
 80078da:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	689b      	ldr	r3, [r3, #8]
 80078e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078e4:	d108      	bne.n	80078f8 <HAL_UART_Receive+0x8a>
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	691b      	ldr	r3, [r3, #16]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d104      	bne.n	80078f8 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80078ee:	2300      	movs	r3, #0
 80078f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	61bb      	str	r3, [r7, #24]
 80078f6:	e003      	b.n	8007900 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80078fc:	2300      	movs	r3, #0
 80078fe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2200      	movs	r2, #0
 8007904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8007908:	e043      	b.n	8007992 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	9300      	str	r3, [sp, #0]
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	2200      	movs	r2, #0
 8007912:	2120      	movs	r1, #32
 8007914:	68f8      	ldr	r0, [r7, #12]
 8007916:	f000 fc85 	bl	8008224 <UART_WaitOnFlagUntilTimeout>
 800791a:	4603      	mov	r3, r0
 800791c:	2b00      	cmp	r3, #0
 800791e:	d001      	beq.n	8007924 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8007920:	2303      	movs	r3, #3
 8007922:	e042      	b.n	80079aa <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8007924:	69fb      	ldr	r3, [r7, #28]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d10c      	bne.n	8007944 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	685b      	ldr	r3, [r3, #4]
 8007930:	b29b      	uxth	r3, r3
 8007932:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007936:	b29a      	uxth	r2, r3
 8007938:	69bb      	ldr	r3, [r7, #24]
 800793a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800793c:	69bb      	ldr	r3, [r7, #24]
 800793e:	3302      	adds	r3, #2
 8007940:	61bb      	str	r3, [r7, #24]
 8007942:	e01f      	b.n	8007984 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	689b      	ldr	r3, [r3, #8]
 8007948:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800794c:	d007      	beq.n	800795e <HAL_UART_Receive+0xf0>
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	689b      	ldr	r3, [r3, #8]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d10a      	bne.n	800796c <HAL_UART_Receive+0xfe>
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	691b      	ldr	r3, [r3, #16]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d106      	bne.n	800796c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	b2da      	uxtb	r2, r3
 8007966:	69fb      	ldr	r3, [r7, #28]
 8007968:	701a      	strb	r2, [r3, #0]
 800796a:	e008      	b.n	800797e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	b2db      	uxtb	r3, r3
 8007974:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007978:	b2da      	uxtb	r2, r3
 800797a:	69fb      	ldr	r3, [r7, #28]
 800797c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800797e:	69fb      	ldr	r3, [r7, #28]
 8007980:	3301      	adds	r3, #1
 8007982:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007988:	b29b      	uxth	r3, r3
 800798a:	3b01      	subs	r3, #1
 800798c:	b29a      	uxth	r2, r3
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007996:	b29b      	uxth	r3, r3
 8007998:	2b00      	cmp	r3, #0
 800799a:	d1b6      	bne.n	800790a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2220      	movs	r2, #32
 80079a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80079a4:	2300      	movs	r3, #0
 80079a6:	e000      	b.n	80079aa <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80079a8:	2302      	movs	r3, #2
  }
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3720      	adds	r7, #32
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}

080079b2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80079b2:	b580      	push	{r7, lr}
 80079b4:	b084      	sub	sp, #16
 80079b6:	af00      	add	r7, sp, #0
 80079b8:	60f8      	str	r0, [r7, #12]
 80079ba:	60b9      	str	r1, [r7, #8]
 80079bc:	4613      	mov	r3, r2
 80079be:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80079c6:	b2db      	uxtb	r3, r3
 80079c8:	2b20      	cmp	r3, #32
 80079ca:	d11d      	bne.n	8007a08 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d002      	beq.n	80079d8 <HAL_UART_Receive_IT+0x26>
 80079d2:	88fb      	ldrh	r3, [r7, #6]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d101      	bne.n	80079dc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80079d8:	2301      	movs	r3, #1
 80079da:	e016      	b.n	8007a0a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079e2:	2b01      	cmp	r3, #1
 80079e4:	d101      	bne.n	80079ea <HAL_UART_Receive_IT+0x38>
 80079e6:	2302      	movs	r3, #2
 80079e8:	e00f      	b.n	8007a0a <HAL_UART_Receive_IT+0x58>
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2201      	movs	r2, #1
 80079ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	2200      	movs	r2, #0
 80079f6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80079f8:	88fb      	ldrh	r3, [r7, #6]
 80079fa:	461a      	mov	r2, r3
 80079fc:	68b9      	ldr	r1, [r7, #8]
 80079fe:	68f8      	ldr	r0, [r7, #12]
 8007a00:	f000 fc7e 	bl	8008300 <UART_Start_Receive_IT>
 8007a04:	4603      	mov	r3, r0
 8007a06:	e000      	b.n	8007a0a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007a08:	2302      	movs	r3, #2
  }
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3710      	adds	r7, #16
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}

08007a12 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007a12:	b580      	push	{r7, lr}
 8007a14:	b08c      	sub	sp, #48	; 0x30
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	60f8      	str	r0, [r7, #12]
 8007a1a:	60b9      	str	r1, [r7, #8]
 8007a1c:	4613      	mov	r3, r2
 8007a1e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007a26:	b2db      	uxtb	r3, r3
 8007a28:	2b20      	cmp	r3, #32
 8007a2a:	d152      	bne.n	8007ad2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d002      	beq.n	8007a38 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8007a32:	88fb      	ldrh	r3, [r7, #6]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d101      	bne.n	8007a3c <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8007a38:	2301      	movs	r3, #1
 8007a3a:	e04b      	b.n	8007ad4 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a42:	2b01      	cmp	r3, #1
 8007a44:	d101      	bne.n	8007a4a <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8007a46:	2302      	movs	r3, #2
 8007a48:	e044      	b.n	8007ad4 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	2201      	movs	r2, #1
 8007a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2201      	movs	r2, #1
 8007a56:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8007a58:	88fb      	ldrh	r3, [r7, #6]
 8007a5a:	461a      	mov	r2, r3
 8007a5c:	68b9      	ldr	r1, [r7, #8]
 8007a5e:	68f8      	ldr	r0, [r7, #12]
 8007a60:	f000 fc88 	bl	8008374 <UART_Start_Receive_DMA>
 8007a64:	4603      	mov	r3, r0
 8007a66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8007a6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d12c      	bne.n	8007acc <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a76:	2b01      	cmp	r3, #1
 8007a78:	d125      	bne.n	8007ac6 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	613b      	str	r3, [r7, #16]
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	613b      	str	r3, [r7, #16]
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	613b      	str	r3, [r7, #16]
 8007a8e:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	330c      	adds	r3, #12
 8007a96:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a98:	69bb      	ldr	r3, [r7, #24]
 8007a9a:	e853 3f00 	ldrex	r3, [r3]
 8007a9e:	617b      	str	r3, [r7, #20]
   return(result);
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	f043 0310 	orr.w	r3, r3, #16
 8007aa6:	62bb      	str	r3, [r7, #40]	; 0x28
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	330c      	adds	r3, #12
 8007aae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ab0:	627a      	str	r2, [r7, #36]	; 0x24
 8007ab2:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ab4:	6a39      	ldr	r1, [r7, #32]
 8007ab6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ab8:	e841 2300 	strex	r3, r2, [r1]
 8007abc:	61fb      	str	r3, [r7, #28]
   return(result);
 8007abe:	69fb      	ldr	r3, [r7, #28]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d1e5      	bne.n	8007a90 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8007ac4:	e002      	b.n	8007acc <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8007acc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007ad0:	e000      	b.n	8007ad4 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8007ad2:	2302      	movs	r3, #2
  }
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	3730      	adds	r7, #48	; 0x30
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}

08007adc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b0ba      	sub	sp, #232	; 0xe8
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	68db      	ldr	r3, [r3, #12]
 8007af4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	695b      	ldr	r3, [r3, #20]
 8007afe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007b02:	2300      	movs	r3, #0
 8007b04:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007b0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b12:	f003 030f 	and.w	r3, r3, #15
 8007b16:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007b1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d10f      	bne.n	8007b42 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b26:	f003 0320 	and.w	r3, r3, #32
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d009      	beq.n	8007b42 <HAL_UART_IRQHandler+0x66>
 8007b2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b32:	f003 0320 	and.w	r3, r3, #32
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d003      	beq.n	8007b42 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f000 fdbb 	bl	80086b6 <UART_Receive_IT>
      return;
 8007b40:	e256      	b.n	8007ff0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007b42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	f000 80de 	beq.w	8007d08 <HAL_UART_IRQHandler+0x22c>
 8007b4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b50:	f003 0301 	and.w	r3, r3, #1
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d106      	bne.n	8007b66 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007b58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b5c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	f000 80d1 	beq.w	8007d08 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007b66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b6a:	f003 0301 	and.w	r3, r3, #1
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d00b      	beq.n	8007b8a <HAL_UART_IRQHandler+0xae>
 8007b72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d005      	beq.n	8007b8a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b82:	f043 0201 	orr.w	r2, r3, #1
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007b8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b8e:	f003 0304 	and.w	r3, r3, #4
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d00b      	beq.n	8007bae <HAL_UART_IRQHandler+0xd2>
 8007b96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b9a:	f003 0301 	and.w	r3, r3, #1
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d005      	beq.n	8007bae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ba6:	f043 0202 	orr.w	r2, r3, #2
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007bae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bb2:	f003 0302 	and.w	r3, r3, #2
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d00b      	beq.n	8007bd2 <HAL_UART_IRQHandler+0xf6>
 8007bba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007bbe:	f003 0301 	and.w	r3, r3, #1
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d005      	beq.n	8007bd2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bca:	f043 0204 	orr.w	r2, r3, #4
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007bd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bd6:	f003 0308 	and.w	r3, r3, #8
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d011      	beq.n	8007c02 <HAL_UART_IRQHandler+0x126>
 8007bde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007be2:	f003 0320 	and.w	r3, r3, #32
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d105      	bne.n	8007bf6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007bea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007bee:	f003 0301 	and.w	r3, r3, #1
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d005      	beq.n	8007c02 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bfa:	f043 0208 	orr.w	r2, r3, #8
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	f000 81ed 	beq.w	8007fe6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007c0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c10:	f003 0320 	and.w	r3, r3, #32
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d008      	beq.n	8007c2a <HAL_UART_IRQHandler+0x14e>
 8007c18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c1c:	f003 0320 	and.w	r3, r3, #32
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d002      	beq.n	8007c2a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f000 fd46 	bl	80086b6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	695b      	ldr	r3, [r3, #20]
 8007c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c34:	2b40      	cmp	r3, #64	; 0x40
 8007c36:	bf0c      	ite	eq
 8007c38:	2301      	moveq	r3, #1
 8007c3a:	2300      	movne	r3, #0
 8007c3c:	b2db      	uxtb	r3, r3
 8007c3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c46:	f003 0308 	and.w	r3, r3, #8
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d103      	bne.n	8007c56 <HAL_UART_IRQHandler+0x17a>
 8007c4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d04f      	beq.n	8007cf6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f000 fc4e 	bl	80084f8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	695b      	ldr	r3, [r3, #20]
 8007c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c66:	2b40      	cmp	r3, #64	; 0x40
 8007c68:	d141      	bne.n	8007cee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	3314      	adds	r3, #20
 8007c70:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c74:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007c78:	e853 3f00 	ldrex	r3, [r3]
 8007c7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007c80:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	3314      	adds	r3, #20
 8007c92:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007c96:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007c9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c9e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007ca2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007ca6:	e841 2300 	strex	r3, r2, [r1]
 8007caa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007cae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d1d9      	bne.n	8007c6a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d013      	beq.n	8007ce6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cc2:	4a7d      	ldr	r2, [pc, #500]	; (8007eb8 <HAL_UART_IRQHandler+0x3dc>)
 8007cc4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f7fc fc28 	bl	8004520 <HAL_DMA_Abort_IT>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d016      	beq.n	8007d04 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cdc:	687a      	ldr	r2, [r7, #4]
 8007cde:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007ce0:	4610      	mov	r0, r2
 8007ce2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ce4:	e00e      	b.n	8007d04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f000 f99a 	bl	8008020 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cec:	e00a      	b.n	8007d04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f000 f996 	bl	8008020 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cf4:	e006      	b.n	8007d04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 f992 	bl	8008020 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007d02:	e170      	b.n	8007fe6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d04:	bf00      	nop
    return;
 8007d06:	e16e      	b.n	8007fe6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d0c:	2b01      	cmp	r3, #1
 8007d0e:	f040 814a 	bne.w	8007fa6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007d12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d16:	f003 0310 	and.w	r3, r3, #16
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	f000 8143 	beq.w	8007fa6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007d20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d24:	f003 0310 	and.w	r3, r3, #16
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	f000 813c 	beq.w	8007fa6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007d2e:	2300      	movs	r3, #0
 8007d30:	60bb      	str	r3, [r7, #8]
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	60bb      	str	r3, [r7, #8]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	60bb      	str	r3, [r7, #8]
 8007d42:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	695b      	ldr	r3, [r3, #20]
 8007d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d4e:	2b40      	cmp	r3, #64	; 0x40
 8007d50:	f040 80b4 	bne.w	8007ebc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	685b      	ldr	r3, [r3, #4]
 8007d5c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007d60:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	f000 8140 	beq.w	8007fea <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007d6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007d72:	429a      	cmp	r2, r3
 8007d74:	f080 8139 	bcs.w	8007fea <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007d7e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d84:	69db      	ldr	r3, [r3, #28]
 8007d86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d8a:	f000 8088 	beq.w	8007e9e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	330c      	adds	r3, #12
 8007d94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d98:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007d9c:	e853 3f00 	ldrex	r3, [r3]
 8007da0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007da4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007da8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007dac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	330c      	adds	r3, #12
 8007db6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007dba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007dbe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dc2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007dc6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007dca:	e841 2300 	strex	r3, r2, [r1]
 8007dce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007dd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d1d9      	bne.n	8007d8e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	3314      	adds	r3, #20
 8007de0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007de2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007de4:	e853 3f00 	ldrex	r3, [r3]
 8007de8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007dea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007dec:	f023 0301 	bic.w	r3, r3, #1
 8007df0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	3314      	adds	r3, #20
 8007dfa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007dfe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007e02:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e04:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007e06:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007e0a:	e841 2300 	strex	r3, r2, [r1]
 8007e0e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007e10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d1e1      	bne.n	8007dda <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	3314      	adds	r3, #20
 8007e1c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007e20:	e853 3f00 	ldrex	r3, [r3]
 8007e24:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007e26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	3314      	adds	r3, #20
 8007e36:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007e3a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007e3c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e3e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007e40:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007e42:	e841 2300 	strex	r3, r2, [r1]
 8007e46:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007e48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d1e3      	bne.n	8007e16 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2220      	movs	r2, #32
 8007e52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	330c      	adds	r3, #12
 8007e62:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e66:	e853 3f00 	ldrex	r3, [r3]
 8007e6a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007e6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e6e:	f023 0310 	bic.w	r3, r3, #16
 8007e72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	330c      	adds	r3, #12
 8007e7c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007e80:	65ba      	str	r2, [r7, #88]	; 0x58
 8007e82:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e84:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007e86:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007e88:	e841 2300 	strex	r3, r2, [r1]
 8007e8c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007e8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d1e3      	bne.n	8007e5c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f7fc fad1 	bl	8004440 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ea6:	b29b      	uxth	r3, r3
 8007ea8:	1ad3      	subs	r3, r2, r3
 8007eaa:	b29b      	uxth	r3, r3
 8007eac:	4619      	mov	r1, r3
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f7fa ffe8 	bl	8002e84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007eb4:	e099      	b.n	8007fea <HAL_UART_IRQHandler+0x50e>
 8007eb6:	bf00      	nop
 8007eb8:	080085bf 	.word	0x080085bf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ec4:	b29b      	uxth	r3, r3
 8007ec6:	1ad3      	subs	r3, r2, r3
 8007ec8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ed0:	b29b      	uxth	r3, r3
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	f000 808b 	beq.w	8007fee <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007ed8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	f000 8086 	beq.w	8007fee <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	330c      	adds	r3, #12
 8007ee8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eec:	e853 3f00 	ldrex	r3, [r3]
 8007ef0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007ef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ef4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ef8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	330c      	adds	r3, #12
 8007f02:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007f06:	647a      	str	r2, [r7, #68]	; 0x44
 8007f08:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f0a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007f0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f0e:	e841 2300 	strex	r3, r2, [r1]
 8007f12:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007f14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d1e3      	bne.n	8007ee2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	3314      	adds	r3, #20
 8007f20:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f24:	e853 3f00 	ldrex	r3, [r3]
 8007f28:	623b      	str	r3, [r7, #32]
   return(result);
 8007f2a:	6a3b      	ldr	r3, [r7, #32]
 8007f2c:	f023 0301 	bic.w	r3, r3, #1
 8007f30:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	3314      	adds	r3, #20
 8007f3a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007f3e:	633a      	str	r2, [r7, #48]	; 0x30
 8007f40:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007f44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f46:	e841 2300 	strex	r3, r2, [r1]
 8007f4a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d1e3      	bne.n	8007f1a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2220      	movs	r2, #32
 8007f56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	330c      	adds	r3, #12
 8007f66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f68:	693b      	ldr	r3, [r7, #16]
 8007f6a:	e853 3f00 	ldrex	r3, [r3]
 8007f6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f023 0310 	bic.w	r3, r3, #16
 8007f76:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	330c      	adds	r3, #12
 8007f80:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007f84:	61fa      	str	r2, [r7, #28]
 8007f86:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f88:	69b9      	ldr	r1, [r7, #24]
 8007f8a:	69fa      	ldr	r2, [r7, #28]
 8007f8c:	e841 2300 	strex	r3, r2, [r1]
 8007f90:	617b      	str	r3, [r7, #20]
   return(result);
 8007f92:	697b      	ldr	r3, [r7, #20]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d1e3      	bne.n	8007f60 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007f98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007f9c:	4619      	mov	r1, r3
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f7fa ff70 	bl	8002e84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007fa4:	e023      	b.n	8007fee <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007fa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d009      	beq.n	8007fc6 <HAL_UART_IRQHandler+0x4ea>
 8007fb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d003      	beq.n	8007fc6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 fb11 	bl	80085e6 <UART_Transmit_IT>
    return;
 8007fc4:	e014      	b.n	8007ff0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007fc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d00e      	beq.n	8007ff0 <HAL_UART_IRQHandler+0x514>
 8007fd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d008      	beq.n	8007ff0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f000 fb51 	bl	8008686 <UART_EndTransmit_IT>
    return;
 8007fe4:	e004      	b.n	8007ff0 <HAL_UART_IRQHandler+0x514>
    return;
 8007fe6:	bf00      	nop
 8007fe8:	e002      	b.n	8007ff0 <HAL_UART_IRQHandler+0x514>
      return;
 8007fea:	bf00      	nop
 8007fec:	e000      	b.n	8007ff0 <HAL_UART_IRQHandler+0x514>
      return;
 8007fee:	bf00      	nop
  }
}
 8007ff0:	37e8      	adds	r7, #232	; 0xe8
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}
 8007ff6:	bf00      	nop

08007ff8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b083      	sub	sp, #12
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008000:	bf00      	nop
 8008002:	370c      	adds	r7, #12
 8008004:	46bd      	mov	sp, r7
 8008006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800a:	4770      	bx	lr

0800800c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800800c:	b480      	push	{r7}
 800800e:	b083      	sub	sp, #12
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008014:	bf00      	nop
 8008016:	370c      	adds	r7, #12
 8008018:	46bd      	mov	sp, r7
 800801a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801e:	4770      	bx	lr

08008020 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008020:	b480      	push	{r7}
 8008022:	b083      	sub	sp, #12
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008028:	bf00      	nop
 800802a:	370c      	adds	r7, #12
 800802c:	46bd      	mov	sp, r7
 800802e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008032:	4770      	bx	lr

08008034 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b09c      	sub	sp, #112	; 0x70
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008040:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800804c:	2b00      	cmp	r3, #0
 800804e:	d172      	bne.n	8008136 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8008050:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008052:	2200      	movs	r2, #0
 8008054:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008056:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	330c      	adds	r3, #12
 800805c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800805e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008060:	e853 3f00 	ldrex	r3, [r3]
 8008064:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008066:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008068:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800806c:	66bb      	str	r3, [r7, #104]	; 0x68
 800806e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	330c      	adds	r3, #12
 8008074:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008076:	65ba      	str	r2, [r7, #88]	; 0x58
 8008078:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800807a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800807c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800807e:	e841 2300 	strex	r3, r2, [r1]
 8008082:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008084:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008086:	2b00      	cmp	r3, #0
 8008088:	d1e5      	bne.n	8008056 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800808a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	3314      	adds	r3, #20
 8008090:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008094:	e853 3f00 	ldrex	r3, [r3]
 8008098:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800809a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800809c:	f023 0301 	bic.w	r3, r3, #1
 80080a0:	667b      	str	r3, [r7, #100]	; 0x64
 80080a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	3314      	adds	r3, #20
 80080a8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80080aa:	647a      	str	r2, [r7, #68]	; 0x44
 80080ac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80080b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80080b2:	e841 2300 	strex	r3, r2, [r1]
 80080b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80080b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d1e5      	bne.n	800808a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80080be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	3314      	adds	r3, #20
 80080c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c8:	e853 3f00 	ldrex	r3, [r3]
 80080cc:	623b      	str	r3, [r7, #32]
   return(result);
 80080ce:	6a3b      	ldr	r3, [r7, #32]
 80080d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080d4:	663b      	str	r3, [r7, #96]	; 0x60
 80080d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	3314      	adds	r3, #20
 80080dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80080de:	633a      	str	r2, [r7, #48]	; 0x30
 80080e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80080e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080e6:	e841 2300 	strex	r3, r2, [r1]
 80080ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80080ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d1e5      	bne.n	80080be <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80080f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080f4:	2220      	movs	r2, #32
 80080f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080fe:	2b01      	cmp	r3, #1
 8008100:	d119      	bne.n	8008136 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008102:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	330c      	adds	r3, #12
 8008108:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800810a:	693b      	ldr	r3, [r7, #16]
 800810c:	e853 3f00 	ldrex	r3, [r3]
 8008110:	60fb      	str	r3, [r7, #12]
   return(result);
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	f023 0310 	bic.w	r3, r3, #16
 8008118:	65fb      	str	r3, [r7, #92]	; 0x5c
 800811a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	330c      	adds	r3, #12
 8008120:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008122:	61fa      	str	r2, [r7, #28]
 8008124:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008126:	69b9      	ldr	r1, [r7, #24]
 8008128:	69fa      	ldr	r2, [r7, #28]
 800812a:	e841 2300 	strex	r3, r2, [r1]
 800812e:	617b      	str	r3, [r7, #20]
   return(result);
 8008130:	697b      	ldr	r3, [r7, #20]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d1e5      	bne.n	8008102 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008136:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800813a:	2b01      	cmp	r3, #1
 800813c:	d106      	bne.n	800814c <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800813e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008140:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008142:	4619      	mov	r1, r3
 8008144:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008146:	f7fa fe9d 	bl	8002e84 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800814a:	e002      	b.n	8008152 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800814c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800814e:	f7f9 feaf 	bl	8001eb0 <HAL_UART_RxCpltCallback>
}
 8008152:	bf00      	nop
 8008154:	3770      	adds	r7, #112	; 0x70
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}

0800815a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800815a:	b580      	push	{r7, lr}
 800815c:	b084      	sub	sp, #16
 800815e:	af00      	add	r7, sp, #0
 8008160:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008166:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800816c:	2b01      	cmp	r3, #1
 800816e:	d108      	bne.n	8008182 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008174:	085b      	lsrs	r3, r3, #1
 8008176:	b29b      	uxth	r3, r3
 8008178:	4619      	mov	r1, r3
 800817a:	68f8      	ldr	r0, [r7, #12]
 800817c:	f7fa fe82 	bl	8002e84 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008180:	e002      	b.n	8008188 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8008182:	68f8      	ldr	r0, [r7, #12]
 8008184:	f7ff ff42 	bl	800800c <HAL_UART_RxHalfCpltCallback>
}
 8008188:	bf00      	nop
 800818a:	3710      	adds	r7, #16
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}

08008190 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b084      	sub	sp, #16
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008198:	2300      	movs	r3, #0
 800819a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081a0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	695b      	ldr	r3, [r3, #20]
 80081a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081ac:	2b80      	cmp	r3, #128	; 0x80
 80081ae:	bf0c      	ite	eq
 80081b0:	2301      	moveq	r3, #1
 80081b2:	2300      	movne	r3, #0
 80081b4:	b2db      	uxtb	r3, r3
 80081b6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081be:	b2db      	uxtb	r3, r3
 80081c0:	2b21      	cmp	r3, #33	; 0x21
 80081c2:	d108      	bne.n	80081d6 <UART_DMAError+0x46>
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d005      	beq.n	80081d6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	2200      	movs	r2, #0
 80081ce:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80081d0:	68b8      	ldr	r0, [r7, #8]
 80081d2:	f000 f969 	bl	80084a8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	695b      	ldr	r3, [r3, #20]
 80081dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081e0:	2b40      	cmp	r3, #64	; 0x40
 80081e2:	bf0c      	ite	eq
 80081e4:	2301      	moveq	r3, #1
 80081e6:	2300      	movne	r3, #0
 80081e8:	b2db      	uxtb	r3, r3
 80081ea:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80081f2:	b2db      	uxtb	r3, r3
 80081f4:	2b22      	cmp	r3, #34	; 0x22
 80081f6:	d108      	bne.n	800820a <UART_DMAError+0x7a>
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d005      	beq.n	800820a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	2200      	movs	r2, #0
 8008202:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008204:	68b8      	ldr	r0, [r7, #8]
 8008206:	f000 f977 	bl	80084f8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800820e:	f043 0210 	orr.w	r2, r3, #16
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008216:	68b8      	ldr	r0, [r7, #8]
 8008218:	f7ff ff02 	bl	8008020 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800821c:	bf00      	nop
 800821e:	3710      	adds	r7, #16
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}

08008224 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b090      	sub	sp, #64	; 0x40
 8008228:	af00      	add	r7, sp, #0
 800822a:	60f8      	str	r0, [r7, #12]
 800822c:	60b9      	str	r1, [r7, #8]
 800822e:	603b      	str	r3, [r7, #0]
 8008230:	4613      	mov	r3, r2
 8008232:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008234:	e050      	b.n	80082d8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008236:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800823c:	d04c      	beq.n	80082d8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800823e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008240:	2b00      	cmp	r3, #0
 8008242:	d007      	beq.n	8008254 <UART_WaitOnFlagUntilTimeout+0x30>
 8008244:	f7fb feb4 	bl	8003fb0 <HAL_GetTick>
 8008248:	4602      	mov	r2, r0
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	1ad3      	subs	r3, r2, r3
 800824e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008250:	429a      	cmp	r2, r3
 8008252:	d241      	bcs.n	80082d8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	330c      	adds	r3, #12
 800825a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800825c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800825e:	e853 3f00 	ldrex	r3, [r3]
 8008262:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008266:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800826a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	330c      	adds	r3, #12
 8008272:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008274:	637a      	str	r2, [r7, #52]	; 0x34
 8008276:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008278:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800827a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800827c:	e841 2300 	strex	r3, r2, [r1]
 8008280:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008284:	2b00      	cmp	r3, #0
 8008286:	d1e5      	bne.n	8008254 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	3314      	adds	r3, #20
 800828e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	e853 3f00 	ldrex	r3, [r3]
 8008296:	613b      	str	r3, [r7, #16]
   return(result);
 8008298:	693b      	ldr	r3, [r7, #16]
 800829a:	f023 0301 	bic.w	r3, r3, #1
 800829e:	63bb      	str	r3, [r7, #56]	; 0x38
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	3314      	adds	r3, #20
 80082a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80082a8:	623a      	str	r2, [r7, #32]
 80082aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ac:	69f9      	ldr	r1, [r7, #28]
 80082ae:	6a3a      	ldr	r2, [r7, #32]
 80082b0:	e841 2300 	strex	r3, r2, [r1]
 80082b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80082b6:	69bb      	ldr	r3, [r7, #24]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d1e5      	bne.n	8008288 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	2220      	movs	r2, #32
 80082c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	2220      	movs	r2, #32
 80082c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	2200      	movs	r2, #0
 80082d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80082d4:	2303      	movs	r3, #3
 80082d6:	e00f      	b.n	80082f8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	681a      	ldr	r2, [r3, #0]
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	4013      	ands	r3, r2
 80082e2:	68ba      	ldr	r2, [r7, #8]
 80082e4:	429a      	cmp	r2, r3
 80082e6:	bf0c      	ite	eq
 80082e8:	2301      	moveq	r3, #1
 80082ea:	2300      	movne	r3, #0
 80082ec:	b2db      	uxtb	r3, r3
 80082ee:	461a      	mov	r2, r3
 80082f0:	79fb      	ldrb	r3, [r7, #7]
 80082f2:	429a      	cmp	r2, r3
 80082f4:	d09f      	beq.n	8008236 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80082f6:	2300      	movs	r3, #0
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	3740      	adds	r7, #64	; 0x40
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}

08008300 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008300:	b480      	push	{r7}
 8008302:	b085      	sub	sp, #20
 8008304:	af00      	add	r7, sp, #0
 8008306:	60f8      	str	r0, [r7, #12]
 8008308:	60b9      	str	r1, [r7, #8]
 800830a:	4613      	mov	r3, r2
 800830c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	68ba      	ldr	r2, [r7, #8]
 8008312:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	88fa      	ldrh	r2, [r7, #6]
 8008318:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	88fa      	ldrh	r2, [r7, #6]
 800831e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	2200      	movs	r2, #0
 8008324:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	2222      	movs	r2, #34	; 0x22
 800832a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2200      	movs	r2, #0
 8008332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	68da      	ldr	r2, [r3, #12]
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008344:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	695a      	ldr	r2, [r3, #20]
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f042 0201 	orr.w	r2, r2, #1
 8008354:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	68da      	ldr	r2, [r3, #12]
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f042 0220 	orr.w	r2, r2, #32
 8008364:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008366:	2300      	movs	r3, #0
}
 8008368:	4618      	mov	r0, r3
 800836a:	3714      	adds	r7, #20
 800836c:	46bd      	mov	sp, r7
 800836e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008372:	4770      	bx	lr

08008374 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b098      	sub	sp, #96	; 0x60
 8008378:	af00      	add	r7, sp, #0
 800837a:	60f8      	str	r0, [r7, #12]
 800837c:	60b9      	str	r1, [r7, #8]
 800837e:	4613      	mov	r3, r2
 8008380:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8008382:	68ba      	ldr	r2, [r7, #8]
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	88fa      	ldrh	r2, [r7, #6]
 800838c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	2200      	movs	r2, #0
 8008392:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	2222      	movs	r2, #34	; 0x22
 8008398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083a0:	4a3e      	ldr	r2, [pc, #248]	; (800849c <UART_Start_Receive_DMA+0x128>)
 80083a2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083a8:	4a3d      	ldr	r2, [pc, #244]	; (80084a0 <UART_Start_Receive_DMA+0x12c>)
 80083aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083b0:	4a3c      	ldr	r2, [pc, #240]	; (80084a4 <UART_Start_Receive_DMA+0x130>)
 80083b2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083b8:	2200      	movs	r2, #0
 80083ba:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80083bc:	f107 0308 	add.w	r3, r7, #8
 80083c0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	3304      	adds	r3, #4
 80083cc:	4619      	mov	r1, r3
 80083ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80083d0:	681a      	ldr	r2, [r3, #0]
 80083d2:	88fb      	ldrh	r3, [r7, #6]
 80083d4:	f7fb ffdc 	bl	8004390 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80083d8:	2300      	movs	r3, #0
 80083da:	613b      	str	r3, [r7, #16]
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	613b      	str	r3, [r7, #16]
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	685b      	ldr	r3, [r3, #4]
 80083ea:	613b      	str	r3, [r7, #16]
 80083ec:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	2200      	movs	r2, #0
 80083f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	330c      	adds	r3, #12
 80083fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008400:	e853 3f00 	ldrex	r3, [r3]
 8008404:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008406:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008408:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800840c:	65bb      	str	r3, [r7, #88]	; 0x58
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	330c      	adds	r3, #12
 8008414:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008416:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008418:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800841a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800841c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800841e:	e841 2300 	strex	r3, r2, [r1]
 8008422:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008424:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008426:	2b00      	cmp	r3, #0
 8008428:	d1e5      	bne.n	80083f6 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	3314      	adds	r3, #20
 8008430:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008434:	e853 3f00 	ldrex	r3, [r3]
 8008438:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800843a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800843c:	f043 0301 	orr.w	r3, r3, #1
 8008440:	657b      	str	r3, [r7, #84]	; 0x54
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	3314      	adds	r3, #20
 8008448:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800844a:	63ba      	str	r2, [r7, #56]	; 0x38
 800844c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800844e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008450:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008452:	e841 2300 	strex	r3, r2, [r1]
 8008456:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800845a:	2b00      	cmp	r3, #0
 800845c:	d1e5      	bne.n	800842a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	3314      	adds	r3, #20
 8008464:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008466:	69bb      	ldr	r3, [r7, #24]
 8008468:	e853 3f00 	ldrex	r3, [r3]
 800846c:	617b      	str	r3, [r7, #20]
   return(result);
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008474:	653b      	str	r3, [r7, #80]	; 0x50
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	3314      	adds	r3, #20
 800847c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800847e:	627a      	str	r2, [r7, #36]	; 0x24
 8008480:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008482:	6a39      	ldr	r1, [r7, #32]
 8008484:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008486:	e841 2300 	strex	r3, r2, [r1]
 800848a:	61fb      	str	r3, [r7, #28]
   return(result);
 800848c:	69fb      	ldr	r3, [r7, #28]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d1e5      	bne.n	800845e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8008492:	2300      	movs	r3, #0
}
 8008494:	4618      	mov	r0, r3
 8008496:	3760      	adds	r7, #96	; 0x60
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}
 800849c:	08008035 	.word	0x08008035
 80084a0:	0800815b 	.word	0x0800815b
 80084a4:	08008191 	.word	0x08008191

080084a8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80084a8:	b480      	push	{r7}
 80084aa:	b089      	sub	sp, #36	; 0x24
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	330c      	adds	r3, #12
 80084b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	e853 3f00 	ldrex	r3, [r3]
 80084be:	60bb      	str	r3, [r7, #8]
   return(result);
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80084c6:	61fb      	str	r3, [r7, #28]
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	330c      	adds	r3, #12
 80084ce:	69fa      	ldr	r2, [r7, #28]
 80084d0:	61ba      	str	r2, [r7, #24]
 80084d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084d4:	6979      	ldr	r1, [r7, #20]
 80084d6:	69ba      	ldr	r2, [r7, #24]
 80084d8:	e841 2300 	strex	r3, r2, [r1]
 80084dc:	613b      	str	r3, [r7, #16]
   return(result);
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d1e5      	bne.n	80084b0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2220      	movs	r2, #32
 80084e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80084ec:	bf00      	nop
 80084ee:	3724      	adds	r7, #36	; 0x24
 80084f0:	46bd      	mov	sp, r7
 80084f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f6:	4770      	bx	lr

080084f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b095      	sub	sp, #84	; 0x54
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	330c      	adds	r3, #12
 8008506:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800850a:	e853 3f00 	ldrex	r3, [r3]
 800850e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008512:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008516:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	330c      	adds	r3, #12
 800851e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008520:	643a      	str	r2, [r7, #64]	; 0x40
 8008522:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008524:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008526:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008528:	e841 2300 	strex	r3, r2, [r1]
 800852c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800852e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008530:	2b00      	cmp	r3, #0
 8008532:	d1e5      	bne.n	8008500 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	3314      	adds	r3, #20
 800853a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800853c:	6a3b      	ldr	r3, [r7, #32]
 800853e:	e853 3f00 	ldrex	r3, [r3]
 8008542:	61fb      	str	r3, [r7, #28]
   return(result);
 8008544:	69fb      	ldr	r3, [r7, #28]
 8008546:	f023 0301 	bic.w	r3, r3, #1
 800854a:	64bb      	str	r3, [r7, #72]	; 0x48
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	3314      	adds	r3, #20
 8008552:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008554:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008556:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008558:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800855a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800855c:	e841 2300 	strex	r3, r2, [r1]
 8008560:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008564:	2b00      	cmp	r3, #0
 8008566:	d1e5      	bne.n	8008534 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800856c:	2b01      	cmp	r3, #1
 800856e:	d119      	bne.n	80085a4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	330c      	adds	r3, #12
 8008576:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	e853 3f00 	ldrex	r3, [r3]
 800857e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	f023 0310 	bic.w	r3, r3, #16
 8008586:	647b      	str	r3, [r7, #68]	; 0x44
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	330c      	adds	r3, #12
 800858e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008590:	61ba      	str	r2, [r7, #24]
 8008592:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008594:	6979      	ldr	r1, [r7, #20]
 8008596:	69ba      	ldr	r2, [r7, #24]
 8008598:	e841 2300 	strex	r3, r2, [r1]
 800859c:	613b      	str	r3, [r7, #16]
   return(result);
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d1e5      	bne.n	8008570 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2220      	movs	r2, #32
 80085a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2200      	movs	r2, #0
 80085b0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80085b2:	bf00      	nop
 80085b4:	3754      	adds	r7, #84	; 0x54
 80085b6:	46bd      	mov	sp, r7
 80085b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085bc:	4770      	bx	lr

080085be <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80085be:	b580      	push	{r7, lr}
 80085c0:	b084      	sub	sp, #16
 80085c2:	af00      	add	r7, sp, #0
 80085c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	2200      	movs	r2, #0
 80085d0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	2200      	movs	r2, #0
 80085d6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80085d8:	68f8      	ldr	r0, [r7, #12]
 80085da:	f7ff fd21 	bl	8008020 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80085de:	bf00      	nop
 80085e0:	3710      	adds	r7, #16
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}

080085e6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80085e6:	b480      	push	{r7}
 80085e8:	b085      	sub	sp, #20
 80085ea:	af00      	add	r7, sp, #0
 80085ec:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085f4:	b2db      	uxtb	r3, r3
 80085f6:	2b21      	cmp	r3, #33	; 0x21
 80085f8:	d13e      	bne.n	8008678 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	689b      	ldr	r3, [r3, #8]
 80085fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008602:	d114      	bne.n	800862e <UART_Transmit_IT+0x48>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	691b      	ldr	r3, [r3, #16]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d110      	bne.n	800862e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6a1b      	ldr	r3, [r3, #32]
 8008610:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	881b      	ldrh	r3, [r3, #0]
 8008616:	461a      	mov	r2, r3
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008620:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6a1b      	ldr	r3, [r3, #32]
 8008626:	1c9a      	adds	r2, r3, #2
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	621a      	str	r2, [r3, #32]
 800862c:	e008      	b.n	8008640 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6a1b      	ldr	r3, [r3, #32]
 8008632:	1c59      	adds	r1, r3, #1
 8008634:	687a      	ldr	r2, [r7, #4]
 8008636:	6211      	str	r1, [r2, #32]
 8008638:	781a      	ldrb	r2, [r3, #0]
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008644:	b29b      	uxth	r3, r3
 8008646:	3b01      	subs	r3, #1
 8008648:	b29b      	uxth	r3, r3
 800864a:	687a      	ldr	r2, [r7, #4]
 800864c:	4619      	mov	r1, r3
 800864e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008650:	2b00      	cmp	r3, #0
 8008652:	d10f      	bne.n	8008674 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	68da      	ldr	r2, [r3, #12]
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008662:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	68da      	ldr	r2, [r3, #12]
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008672:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008674:	2300      	movs	r3, #0
 8008676:	e000      	b.n	800867a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008678:	2302      	movs	r3, #2
  }
}
 800867a:	4618      	mov	r0, r3
 800867c:	3714      	adds	r7, #20
 800867e:	46bd      	mov	sp, r7
 8008680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008684:	4770      	bx	lr

08008686 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008686:	b580      	push	{r7, lr}
 8008688:	b082      	sub	sp, #8
 800868a:	af00      	add	r7, sp, #0
 800868c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	68da      	ldr	r2, [r3, #12]
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800869c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2220      	movs	r2, #32
 80086a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f7ff fca6 	bl	8007ff8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80086ac:	2300      	movs	r3, #0
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3708      	adds	r7, #8
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}

080086b6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80086b6:	b580      	push	{r7, lr}
 80086b8:	b08c      	sub	sp, #48	; 0x30
 80086ba:	af00      	add	r7, sp, #0
 80086bc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80086c4:	b2db      	uxtb	r3, r3
 80086c6:	2b22      	cmp	r3, #34	; 0x22
 80086c8:	f040 80ab 	bne.w	8008822 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	689b      	ldr	r3, [r3, #8]
 80086d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086d4:	d117      	bne.n	8008706 <UART_Receive_IT+0x50>
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	691b      	ldr	r3, [r3, #16]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d113      	bne.n	8008706 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80086de:	2300      	movs	r3, #0
 80086e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086e6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	685b      	ldr	r3, [r3, #4]
 80086ee:	b29b      	uxth	r3, r3
 80086f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086f4:	b29a      	uxth	r2, r3
 80086f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086f8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086fe:	1c9a      	adds	r2, r3, #2
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	629a      	str	r2, [r3, #40]	; 0x28
 8008704:	e026      	b.n	8008754 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800870a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800870c:	2300      	movs	r3, #0
 800870e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	689b      	ldr	r3, [r3, #8]
 8008714:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008718:	d007      	beq.n	800872a <UART_Receive_IT+0x74>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	689b      	ldr	r3, [r3, #8]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d10a      	bne.n	8008738 <UART_Receive_IT+0x82>
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	691b      	ldr	r3, [r3, #16]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d106      	bne.n	8008738 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	b2da      	uxtb	r2, r3
 8008732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008734:	701a      	strb	r2, [r3, #0]
 8008736:	e008      	b.n	800874a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	685b      	ldr	r3, [r3, #4]
 800873e:	b2db      	uxtb	r3, r3
 8008740:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008744:	b2da      	uxtb	r2, r3
 8008746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008748:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800874e:	1c5a      	adds	r2, r3, #1
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008758:	b29b      	uxth	r3, r3
 800875a:	3b01      	subs	r3, #1
 800875c:	b29b      	uxth	r3, r3
 800875e:	687a      	ldr	r2, [r7, #4]
 8008760:	4619      	mov	r1, r3
 8008762:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008764:	2b00      	cmp	r3, #0
 8008766:	d15a      	bne.n	800881e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	68da      	ldr	r2, [r3, #12]
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f022 0220 	bic.w	r2, r2, #32
 8008776:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	68da      	ldr	r2, [r3, #12]
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008786:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	695a      	ldr	r2, [r3, #20]
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f022 0201 	bic.w	r2, r2, #1
 8008796:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2220      	movs	r2, #32
 800879c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087a4:	2b01      	cmp	r3, #1
 80087a6:	d135      	bne.n	8008814 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2200      	movs	r2, #0
 80087ac:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	330c      	adds	r3, #12
 80087b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	e853 3f00 	ldrex	r3, [r3]
 80087bc:	613b      	str	r3, [r7, #16]
   return(result);
 80087be:	693b      	ldr	r3, [r7, #16]
 80087c0:	f023 0310 	bic.w	r3, r3, #16
 80087c4:	627b      	str	r3, [r7, #36]	; 0x24
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	330c      	adds	r3, #12
 80087cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087ce:	623a      	str	r2, [r7, #32]
 80087d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087d2:	69f9      	ldr	r1, [r7, #28]
 80087d4:	6a3a      	ldr	r2, [r7, #32]
 80087d6:	e841 2300 	strex	r3, r2, [r1]
 80087da:	61bb      	str	r3, [r7, #24]
   return(result);
 80087dc:	69bb      	ldr	r3, [r7, #24]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d1e5      	bne.n	80087ae <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f003 0310 	and.w	r3, r3, #16
 80087ec:	2b10      	cmp	r3, #16
 80087ee:	d10a      	bne.n	8008806 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80087f0:	2300      	movs	r3, #0
 80087f2:	60fb      	str	r3, [r7, #12]
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	60fb      	str	r3, [r7, #12]
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	685b      	ldr	r3, [r3, #4]
 8008802:	60fb      	str	r3, [r7, #12]
 8008804:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800880a:	4619      	mov	r1, r3
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f7fa fb39 	bl	8002e84 <HAL_UARTEx_RxEventCallback>
 8008812:	e002      	b.n	800881a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f7f9 fb4b 	bl	8001eb0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800881a:	2300      	movs	r3, #0
 800881c:	e002      	b.n	8008824 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800881e:	2300      	movs	r3, #0
 8008820:	e000      	b.n	8008824 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008822:	2302      	movs	r3, #2
  }
}
 8008824:	4618      	mov	r0, r3
 8008826:	3730      	adds	r7, #48	; 0x30
 8008828:	46bd      	mov	sp, r7
 800882a:	bd80      	pop	{r7, pc}

0800882c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800882c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008830:	b09f      	sub	sp, #124	; 0x7c
 8008832:	af00      	add	r7, sp, #0
 8008834:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008836:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	691b      	ldr	r3, [r3, #16]
 800883c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008840:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008842:	68d9      	ldr	r1, [r3, #12]
 8008844:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008846:	681a      	ldr	r2, [r3, #0]
 8008848:	ea40 0301 	orr.w	r3, r0, r1
 800884c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800884e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008850:	689a      	ldr	r2, [r3, #8]
 8008852:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008854:	691b      	ldr	r3, [r3, #16]
 8008856:	431a      	orrs	r2, r3
 8008858:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800885a:	695b      	ldr	r3, [r3, #20]
 800885c:	431a      	orrs	r2, r3
 800885e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008860:	69db      	ldr	r3, [r3, #28]
 8008862:	4313      	orrs	r3, r2
 8008864:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8008866:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	68db      	ldr	r3, [r3, #12]
 800886c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008870:	f021 010c 	bic.w	r1, r1, #12
 8008874:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008876:	681a      	ldr	r2, [r3, #0]
 8008878:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800887a:	430b      	orrs	r3, r1
 800887c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800887e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	695b      	ldr	r3, [r3, #20]
 8008884:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008888:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800888a:	6999      	ldr	r1, [r3, #24]
 800888c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800888e:	681a      	ldr	r2, [r3, #0]
 8008890:	ea40 0301 	orr.w	r3, r0, r1
 8008894:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008896:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008898:	681a      	ldr	r2, [r3, #0]
 800889a:	4bc5      	ldr	r3, [pc, #788]	; (8008bb0 <UART_SetConfig+0x384>)
 800889c:	429a      	cmp	r2, r3
 800889e:	d004      	beq.n	80088aa <UART_SetConfig+0x7e>
 80088a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088a2:	681a      	ldr	r2, [r3, #0]
 80088a4:	4bc3      	ldr	r3, [pc, #780]	; (8008bb4 <UART_SetConfig+0x388>)
 80088a6:	429a      	cmp	r2, r3
 80088a8:	d103      	bne.n	80088b2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80088aa:	f7fd fecb 	bl	8006644 <HAL_RCC_GetPCLK2Freq>
 80088ae:	6778      	str	r0, [r7, #116]	; 0x74
 80088b0:	e002      	b.n	80088b8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80088b2:	f7fd feb3 	bl	800661c <HAL_RCC_GetPCLK1Freq>
 80088b6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80088b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088ba:	69db      	ldr	r3, [r3, #28]
 80088bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80088c0:	f040 80b6 	bne.w	8008a30 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80088c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80088c6:	461c      	mov	r4, r3
 80088c8:	f04f 0500 	mov.w	r5, #0
 80088cc:	4622      	mov	r2, r4
 80088ce:	462b      	mov	r3, r5
 80088d0:	1891      	adds	r1, r2, r2
 80088d2:	6439      	str	r1, [r7, #64]	; 0x40
 80088d4:	415b      	adcs	r3, r3
 80088d6:	647b      	str	r3, [r7, #68]	; 0x44
 80088d8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80088dc:	1912      	adds	r2, r2, r4
 80088de:	eb45 0303 	adc.w	r3, r5, r3
 80088e2:	f04f 0000 	mov.w	r0, #0
 80088e6:	f04f 0100 	mov.w	r1, #0
 80088ea:	00d9      	lsls	r1, r3, #3
 80088ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80088f0:	00d0      	lsls	r0, r2, #3
 80088f2:	4602      	mov	r2, r0
 80088f4:	460b      	mov	r3, r1
 80088f6:	1911      	adds	r1, r2, r4
 80088f8:	6639      	str	r1, [r7, #96]	; 0x60
 80088fa:	416b      	adcs	r3, r5
 80088fc:	667b      	str	r3, [r7, #100]	; 0x64
 80088fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008900:	685b      	ldr	r3, [r3, #4]
 8008902:	461a      	mov	r2, r3
 8008904:	f04f 0300 	mov.w	r3, #0
 8008908:	1891      	adds	r1, r2, r2
 800890a:	63b9      	str	r1, [r7, #56]	; 0x38
 800890c:	415b      	adcs	r3, r3
 800890e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008910:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008914:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8008918:	f7f8 f9b6 	bl	8000c88 <__aeabi_uldivmod>
 800891c:	4602      	mov	r2, r0
 800891e:	460b      	mov	r3, r1
 8008920:	4ba5      	ldr	r3, [pc, #660]	; (8008bb8 <UART_SetConfig+0x38c>)
 8008922:	fba3 2302 	umull	r2, r3, r3, r2
 8008926:	095b      	lsrs	r3, r3, #5
 8008928:	011e      	lsls	r6, r3, #4
 800892a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800892c:	461c      	mov	r4, r3
 800892e:	f04f 0500 	mov.w	r5, #0
 8008932:	4622      	mov	r2, r4
 8008934:	462b      	mov	r3, r5
 8008936:	1891      	adds	r1, r2, r2
 8008938:	6339      	str	r1, [r7, #48]	; 0x30
 800893a:	415b      	adcs	r3, r3
 800893c:	637b      	str	r3, [r7, #52]	; 0x34
 800893e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008942:	1912      	adds	r2, r2, r4
 8008944:	eb45 0303 	adc.w	r3, r5, r3
 8008948:	f04f 0000 	mov.w	r0, #0
 800894c:	f04f 0100 	mov.w	r1, #0
 8008950:	00d9      	lsls	r1, r3, #3
 8008952:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008956:	00d0      	lsls	r0, r2, #3
 8008958:	4602      	mov	r2, r0
 800895a:	460b      	mov	r3, r1
 800895c:	1911      	adds	r1, r2, r4
 800895e:	65b9      	str	r1, [r7, #88]	; 0x58
 8008960:	416b      	adcs	r3, r5
 8008962:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008964:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008966:	685b      	ldr	r3, [r3, #4]
 8008968:	461a      	mov	r2, r3
 800896a:	f04f 0300 	mov.w	r3, #0
 800896e:	1891      	adds	r1, r2, r2
 8008970:	62b9      	str	r1, [r7, #40]	; 0x28
 8008972:	415b      	adcs	r3, r3
 8008974:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008976:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800897a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800897e:	f7f8 f983 	bl	8000c88 <__aeabi_uldivmod>
 8008982:	4602      	mov	r2, r0
 8008984:	460b      	mov	r3, r1
 8008986:	4b8c      	ldr	r3, [pc, #560]	; (8008bb8 <UART_SetConfig+0x38c>)
 8008988:	fba3 1302 	umull	r1, r3, r3, r2
 800898c:	095b      	lsrs	r3, r3, #5
 800898e:	2164      	movs	r1, #100	; 0x64
 8008990:	fb01 f303 	mul.w	r3, r1, r3
 8008994:	1ad3      	subs	r3, r2, r3
 8008996:	00db      	lsls	r3, r3, #3
 8008998:	3332      	adds	r3, #50	; 0x32
 800899a:	4a87      	ldr	r2, [pc, #540]	; (8008bb8 <UART_SetConfig+0x38c>)
 800899c:	fba2 2303 	umull	r2, r3, r2, r3
 80089a0:	095b      	lsrs	r3, r3, #5
 80089a2:	005b      	lsls	r3, r3, #1
 80089a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80089a8:	441e      	add	r6, r3
 80089aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80089ac:	4618      	mov	r0, r3
 80089ae:	f04f 0100 	mov.w	r1, #0
 80089b2:	4602      	mov	r2, r0
 80089b4:	460b      	mov	r3, r1
 80089b6:	1894      	adds	r4, r2, r2
 80089b8:	623c      	str	r4, [r7, #32]
 80089ba:	415b      	adcs	r3, r3
 80089bc:	627b      	str	r3, [r7, #36]	; 0x24
 80089be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80089c2:	1812      	adds	r2, r2, r0
 80089c4:	eb41 0303 	adc.w	r3, r1, r3
 80089c8:	f04f 0400 	mov.w	r4, #0
 80089cc:	f04f 0500 	mov.w	r5, #0
 80089d0:	00dd      	lsls	r5, r3, #3
 80089d2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80089d6:	00d4      	lsls	r4, r2, #3
 80089d8:	4622      	mov	r2, r4
 80089da:	462b      	mov	r3, r5
 80089dc:	1814      	adds	r4, r2, r0
 80089de:	653c      	str	r4, [r7, #80]	; 0x50
 80089e0:	414b      	adcs	r3, r1
 80089e2:	657b      	str	r3, [r7, #84]	; 0x54
 80089e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089e6:	685b      	ldr	r3, [r3, #4]
 80089e8:	461a      	mov	r2, r3
 80089ea:	f04f 0300 	mov.w	r3, #0
 80089ee:	1891      	adds	r1, r2, r2
 80089f0:	61b9      	str	r1, [r7, #24]
 80089f2:	415b      	adcs	r3, r3
 80089f4:	61fb      	str	r3, [r7, #28]
 80089f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80089fa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80089fe:	f7f8 f943 	bl	8000c88 <__aeabi_uldivmod>
 8008a02:	4602      	mov	r2, r0
 8008a04:	460b      	mov	r3, r1
 8008a06:	4b6c      	ldr	r3, [pc, #432]	; (8008bb8 <UART_SetConfig+0x38c>)
 8008a08:	fba3 1302 	umull	r1, r3, r3, r2
 8008a0c:	095b      	lsrs	r3, r3, #5
 8008a0e:	2164      	movs	r1, #100	; 0x64
 8008a10:	fb01 f303 	mul.w	r3, r1, r3
 8008a14:	1ad3      	subs	r3, r2, r3
 8008a16:	00db      	lsls	r3, r3, #3
 8008a18:	3332      	adds	r3, #50	; 0x32
 8008a1a:	4a67      	ldr	r2, [pc, #412]	; (8008bb8 <UART_SetConfig+0x38c>)
 8008a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8008a20:	095b      	lsrs	r3, r3, #5
 8008a22:	f003 0207 	and.w	r2, r3, #7
 8008a26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	4432      	add	r2, r6
 8008a2c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008a2e:	e0b9      	b.n	8008ba4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008a30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a32:	461c      	mov	r4, r3
 8008a34:	f04f 0500 	mov.w	r5, #0
 8008a38:	4622      	mov	r2, r4
 8008a3a:	462b      	mov	r3, r5
 8008a3c:	1891      	adds	r1, r2, r2
 8008a3e:	6139      	str	r1, [r7, #16]
 8008a40:	415b      	adcs	r3, r3
 8008a42:	617b      	str	r3, [r7, #20]
 8008a44:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008a48:	1912      	adds	r2, r2, r4
 8008a4a:	eb45 0303 	adc.w	r3, r5, r3
 8008a4e:	f04f 0000 	mov.w	r0, #0
 8008a52:	f04f 0100 	mov.w	r1, #0
 8008a56:	00d9      	lsls	r1, r3, #3
 8008a58:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008a5c:	00d0      	lsls	r0, r2, #3
 8008a5e:	4602      	mov	r2, r0
 8008a60:	460b      	mov	r3, r1
 8008a62:	eb12 0804 	adds.w	r8, r2, r4
 8008a66:	eb43 0905 	adc.w	r9, r3, r5
 8008a6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a6c:	685b      	ldr	r3, [r3, #4]
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f04f 0100 	mov.w	r1, #0
 8008a74:	f04f 0200 	mov.w	r2, #0
 8008a78:	f04f 0300 	mov.w	r3, #0
 8008a7c:	008b      	lsls	r3, r1, #2
 8008a7e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008a82:	0082      	lsls	r2, r0, #2
 8008a84:	4640      	mov	r0, r8
 8008a86:	4649      	mov	r1, r9
 8008a88:	f7f8 f8fe 	bl	8000c88 <__aeabi_uldivmod>
 8008a8c:	4602      	mov	r2, r0
 8008a8e:	460b      	mov	r3, r1
 8008a90:	4b49      	ldr	r3, [pc, #292]	; (8008bb8 <UART_SetConfig+0x38c>)
 8008a92:	fba3 2302 	umull	r2, r3, r3, r2
 8008a96:	095b      	lsrs	r3, r3, #5
 8008a98:	011e      	lsls	r6, r3, #4
 8008a9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	f04f 0100 	mov.w	r1, #0
 8008aa2:	4602      	mov	r2, r0
 8008aa4:	460b      	mov	r3, r1
 8008aa6:	1894      	adds	r4, r2, r2
 8008aa8:	60bc      	str	r4, [r7, #8]
 8008aaa:	415b      	adcs	r3, r3
 8008aac:	60fb      	str	r3, [r7, #12]
 8008aae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008ab2:	1812      	adds	r2, r2, r0
 8008ab4:	eb41 0303 	adc.w	r3, r1, r3
 8008ab8:	f04f 0400 	mov.w	r4, #0
 8008abc:	f04f 0500 	mov.w	r5, #0
 8008ac0:	00dd      	lsls	r5, r3, #3
 8008ac2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008ac6:	00d4      	lsls	r4, r2, #3
 8008ac8:	4622      	mov	r2, r4
 8008aca:	462b      	mov	r3, r5
 8008acc:	1814      	adds	r4, r2, r0
 8008ace:	64bc      	str	r4, [r7, #72]	; 0x48
 8008ad0:	414b      	adcs	r3, r1
 8008ad2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ad4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ad6:	685b      	ldr	r3, [r3, #4]
 8008ad8:	4618      	mov	r0, r3
 8008ada:	f04f 0100 	mov.w	r1, #0
 8008ade:	f04f 0200 	mov.w	r2, #0
 8008ae2:	f04f 0300 	mov.w	r3, #0
 8008ae6:	008b      	lsls	r3, r1, #2
 8008ae8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008aec:	0082      	lsls	r2, r0, #2
 8008aee:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008af2:	f7f8 f8c9 	bl	8000c88 <__aeabi_uldivmod>
 8008af6:	4602      	mov	r2, r0
 8008af8:	460b      	mov	r3, r1
 8008afa:	4b2f      	ldr	r3, [pc, #188]	; (8008bb8 <UART_SetConfig+0x38c>)
 8008afc:	fba3 1302 	umull	r1, r3, r3, r2
 8008b00:	095b      	lsrs	r3, r3, #5
 8008b02:	2164      	movs	r1, #100	; 0x64
 8008b04:	fb01 f303 	mul.w	r3, r1, r3
 8008b08:	1ad3      	subs	r3, r2, r3
 8008b0a:	011b      	lsls	r3, r3, #4
 8008b0c:	3332      	adds	r3, #50	; 0x32
 8008b0e:	4a2a      	ldr	r2, [pc, #168]	; (8008bb8 <UART_SetConfig+0x38c>)
 8008b10:	fba2 2303 	umull	r2, r3, r2, r3
 8008b14:	095b      	lsrs	r3, r3, #5
 8008b16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008b1a:	441e      	add	r6, r3
 8008b1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f04f 0100 	mov.w	r1, #0
 8008b24:	4602      	mov	r2, r0
 8008b26:	460b      	mov	r3, r1
 8008b28:	1894      	adds	r4, r2, r2
 8008b2a:	603c      	str	r4, [r7, #0]
 8008b2c:	415b      	adcs	r3, r3
 8008b2e:	607b      	str	r3, [r7, #4]
 8008b30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b34:	1812      	adds	r2, r2, r0
 8008b36:	eb41 0303 	adc.w	r3, r1, r3
 8008b3a:	f04f 0400 	mov.w	r4, #0
 8008b3e:	f04f 0500 	mov.w	r5, #0
 8008b42:	00dd      	lsls	r5, r3, #3
 8008b44:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008b48:	00d4      	lsls	r4, r2, #3
 8008b4a:	4622      	mov	r2, r4
 8008b4c:	462b      	mov	r3, r5
 8008b4e:	eb12 0a00 	adds.w	sl, r2, r0
 8008b52:	eb43 0b01 	adc.w	fp, r3, r1
 8008b56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b58:	685b      	ldr	r3, [r3, #4]
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f04f 0100 	mov.w	r1, #0
 8008b60:	f04f 0200 	mov.w	r2, #0
 8008b64:	f04f 0300 	mov.w	r3, #0
 8008b68:	008b      	lsls	r3, r1, #2
 8008b6a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008b6e:	0082      	lsls	r2, r0, #2
 8008b70:	4650      	mov	r0, sl
 8008b72:	4659      	mov	r1, fp
 8008b74:	f7f8 f888 	bl	8000c88 <__aeabi_uldivmod>
 8008b78:	4602      	mov	r2, r0
 8008b7a:	460b      	mov	r3, r1
 8008b7c:	4b0e      	ldr	r3, [pc, #56]	; (8008bb8 <UART_SetConfig+0x38c>)
 8008b7e:	fba3 1302 	umull	r1, r3, r3, r2
 8008b82:	095b      	lsrs	r3, r3, #5
 8008b84:	2164      	movs	r1, #100	; 0x64
 8008b86:	fb01 f303 	mul.w	r3, r1, r3
 8008b8a:	1ad3      	subs	r3, r2, r3
 8008b8c:	011b      	lsls	r3, r3, #4
 8008b8e:	3332      	adds	r3, #50	; 0x32
 8008b90:	4a09      	ldr	r2, [pc, #36]	; (8008bb8 <UART_SetConfig+0x38c>)
 8008b92:	fba2 2303 	umull	r2, r3, r2, r3
 8008b96:	095b      	lsrs	r3, r3, #5
 8008b98:	f003 020f 	and.w	r2, r3, #15
 8008b9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	4432      	add	r2, r6
 8008ba2:	609a      	str	r2, [r3, #8]
}
 8008ba4:	bf00      	nop
 8008ba6:	377c      	adds	r7, #124	; 0x7c
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bae:	bf00      	nop
 8008bb0:	40011000 	.word	0x40011000
 8008bb4:	40011400 	.word	0x40011400
 8008bb8:	51eb851f 	.word	0x51eb851f

08008bbc <atoi>:
 8008bbc:	220a      	movs	r2, #10
 8008bbe:	2100      	movs	r1, #0
 8008bc0:	f001 bf40 	b.w	800aa44 <strtol>

08008bc4 <__errno>:
 8008bc4:	4b01      	ldr	r3, [pc, #4]	; (8008bcc <__errno+0x8>)
 8008bc6:	6818      	ldr	r0, [r3, #0]
 8008bc8:	4770      	bx	lr
 8008bca:	bf00      	nop
 8008bcc:	20000014 	.word	0x20000014

08008bd0 <__libc_init_array>:
 8008bd0:	b570      	push	{r4, r5, r6, lr}
 8008bd2:	4d0d      	ldr	r5, [pc, #52]	; (8008c08 <__libc_init_array+0x38>)
 8008bd4:	4c0d      	ldr	r4, [pc, #52]	; (8008c0c <__libc_init_array+0x3c>)
 8008bd6:	1b64      	subs	r4, r4, r5
 8008bd8:	10a4      	asrs	r4, r4, #2
 8008bda:	2600      	movs	r6, #0
 8008bdc:	42a6      	cmp	r6, r4
 8008bde:	d109      	bne.n	8008bf4 <__libc_init_array+0x24>
 8008be0:	4d0b      	ldr	r5, [pc, #44]	; (8008c10 <__libc_init_array+0x40>)
 8008be2:	4c0c      	ldr	r4, [pc, #48]	; (8008c14 <__libc_init_array+0x44>)
 8008be4:	f005 f9c8 	bl	800df78 <_init>
 8008be8:	1b64      	subs	r4, r4, r5
 8008bea:	10a4      	asrs	r4, r4, #2
 8008bec:	2600      	movs	r6, #0
 8008bee:	42a6      	cmp	r6, r4
 8008bf0:	d105      	bne.n	8008bfe <__libc_init_array+0x2e>
 8008bf2:	bd70      	pop	{r4, r5, r6, pc}
 8008bf4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bf8:	4798      	blx	r3
 8008bfa:	3601      	adds	r6, #1
 8008bfc:	e7ee      	b.n	8008bdc <__libc_init_array+0xc>
 8008bfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c02:	4798      	blx	r3
 8008c04:	3601      	adds	r6, #1
 8008c06:	e7f2      	b.n	8008bee <__libc_init_array+0x1e>
 8008c08:	0800f92c 	.word	0x0800f92c
 8008c0c:	0800f92c 	.word	0x0800f92c
 8008c10:	0800f92c 	.word	0x0800f92c
 8008c14:	0800f930 	.word	0x0800f930

08008c18 <memcpy>:
 8008c18:	440a      	add	r2, r1
 8008c1a:	4291      	cmp	r1, r2
 8008c1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c20:	d100      	bne.n	8008c24 <memcpy+0xc>
 8008c22:	4770      	bx	lr
 8008c24:	b510      	push	{r4, lr}
 8008c26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c2e:	4291      	cmp	r1, r2
 8008c30:	d1f9      	bne.n	8008c26 <memcpy+0xe>
 8008c32:	bd10      	pop	{r4, pc}

08008c34 <memset>:
 8008c34:	4402      	add	r2, r0
 8008c36:	4603      	mov	r3, r0
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d100      	bne.n	8008c3e <memset+0xa>
 8008c3c:	4770      	bx	lr
 8008c3e:	f803 1b01 	strb.w	r1, [r3], #1
 8008c42:	e7f9      	b.n	8008c38 <memset+0x4>

08008c44 <__cvt>:
 8008c44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c48:	ec55 4b10 	vmov	r4, r5, d0
 8008c4c:	2d00      	cmp	r5, #0
 8008c4e:	460e      	mov	r6, r1
 8008c50:	4619      	mov	r1, r3
 8008c52:	462b      	mov	r3, r5
 8008c54:	bfbb      	ittet	lt
 8008c56:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008c5a:	461d      	movlt	r5, r3
 8008c5c:	2300      	movge	r3, #0
 8008c5e:	232d      	movlt	r3, #45	; 0x2d
 8008c60:	700b      	strb	r3, [r1, #0]
 8008c62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c64:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008c68:	4691      	mov	r9, r2
 8008c6a:	f023 0820 	bic.w	r8, r3, #32
 8008c6e:	bfbc      	itt	lt
 8008c70:	4622      	movlt	r2, r4
 8008c72:	4614      	movlt	r4, r2
 8008c74:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008c78:	d005      	beq.n	8008c86 <__cvt+0x42>
 8008c7a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008c7e:	d100      	bne.n	8008c82 <__cvt+0x3e>
 8008c80:	3601      	adds	r6, #1
 8008c82:	2102      	movs	r1, #2
 8008c84:	e000      	b.n	8008c88 <__cvt+0x44>
 8008c86:	2103      	movs	r1, #3
 8008c88:	ab03      	add	r3, sp, #12
 8008c8a:	9301      	str	r3, [sp, #4]
 8008c8c:	ab02      	add	r3, sp, #8
 8008c8e:	9300      	str	r3, [sp, #0]
 8008c90:	ec45 4b10 	vmov	d0, r4, r5
 8008c94:	4653      	mov	r3, sl
 8008c96:	4632      	mov	r2, r6
 8008c98:	f001 ff8e 	bl	800abb8 <_dtoa_r>
 8008c9c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008ca0:	4607      	mov	r7, r0
 8008ca2:	d102      	bne.n	8008caa <__cvt+0x66>
 8008ca4:	f019 0f01 	tst.w	r9, #1
 8008ca8:	d022      	beq.n	8008cf0 <__cvt+0xac>
 8008caa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008cae:	eb07 0906 	add.w	r9, r7, r6
 8008cb2:	d110      	bne.n	8008cd6 <__cvt+0x92>
 8008cb4:	783b      	ldrb	r3, [r7, #0]
 8008cb6:	2b30      	cmp	r3, #48	; 0x30
 8008cb8:	d10a      	bne.n	8008cd0 <__cvt+0x8c>
 8008cba:	2200      	movs	r2, #0
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	4620      	mov	r0, r4
 8008cc0:	4629      	mov	r1, r5
 8008cc2:	f7f7 ff01 	bl	8000ac8 <__aeabi_dcmpeq>
 8008cc6:	b918      	cbnz	r0, 8008cd0 <__cvt+0x8c>
 8008cc8:	f1c6 0601 	rsb	r6, r6, #1
 8008ccc:	f8ca 6000 	str.w	r6, [sl]
 8008cd0:	f8da 3000 	ldr.w	r3, [sl]
 8008cd4:	4499      	add	r9, r3
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	2300      	movs	r3, #0
 8008cda:	4620      	mov	r0, r4
 8008cdc:	4629      	mov	r1, r5
 8008cde:	f7f7 fef3 	bl	8000ac8 <__aeabi_dcmpeq>
 8008ce2:	b108      	cbz	r0, 8008ce8 <__cvt+0xa4>
 8008ce4:	f8cd 900c 	str.w	r9, [sp, #12]
 8008ce8:	2230      	movs	r2, #48	; 0x30
 8008cea:	9b03      	ldr	r3, [sp, #12]
 8008cec:	454b      	cmp	r3, r9
 8008cee:	d307      	bcc.n	8008d00 <__cvt+0xbc>
 8008cf0:	9b03      	ldr	r3, [sp, #12]
 8008cf2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008cf4:	1bdb      	subs	r3, r3, r7
 8008cf6:	4638      	mov	r0, r7
 8008cf8:	6013      	str	r3, [r2, #0]
 8008cfa:	b004      	add	sp, #16
 8008cfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d00:	1c59      	adds	r1, r3, #1
 8008d02:	9103      	str	r1, [sp, #12]
 8008d04:	701a      	strb	r2, [r3, #0]
 8008d06:	e7f0      	b.n	8008cea <__cvt+0xa6>

08008d08 <__exponent>:
 8008d08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	2900      	cmp	r1, #0
 8008d0e:	bfb8      	it	lt
 8008d10:	4249      	neglt	r1, r1
 8008d12:	f803 2b02 	strb.w	r2, [r3], #2
 8008d16:	bfb4      	ite	lt
 8008d18:	222d      	movlt	r2, #45	; 0x2d
 8008d1a:	222b      	movge	r2, #43	; 0x2b
 8008d1c:	2909      	cmp	r1, #9
 8008d1e:	7042      	strb	r2, [r0, #1]
 8008d20:	dd2a      	ble.n	8008d78 <__exponent+0x70>
 8008d22:	f10d 0407 	add.w	r4, sp, #7
 8008d26:	46a4      	mov	ip, r4
 8008d28:	270a      	movs	r7, #10
 8008d2a:	46a6      	mov	lr, r4
 8008d2c:	460a      	mov	r2, r1
 8008d2e:	fb91 f6f7 	sdiv	r6, r1, r7
 8008d32:	fb07 1516 	mls	r5, r7, r6, r1
 8008d36:	3530      	adds	r5, #48	; 0x30
 8008d38:	2a63      	cmp	r2, #99	; 0x63
 8008d3a:	f104 34ff 	add.w	r4, r4, #4294967295
 8008d3e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008d42:	4631      	mov	r1, r6
 8008d44:	dcf1      	bgt.n	8008d2a <__exponent+0x22>
 8008d46:	3130      	adds	r1, #48	; 0x30
 8008d48:	f1ae 0502 	sub.w	r5, lr, #2
 8008d4c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008d50:	1c44      	adds	r4, r0, #1
 8008d52:	4629      	mov	r1, r5
 8008d54:	4561      	cmp	r1, ip
 8008d56:	d30a      	bcc.n	8008d6e <__exponent+0x66>
 8008d58:	f10d 0209 	add.w	r2, sp, #9
 8008d5c:	eba2 020e 	sub.w	r2, r2, lr
 8008d60:	4565      	cmp	r5, ip
 8008d62:	bf88      	it	hi
 8008d64:	2200      	movhi	r2, #0
 8008d66:	4413      	add	r3, r2
 8008d68:	1a18      	subs	r0, r3, r0
 8008d6a:	b003      	add	sp, #12
 8008d6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d72:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008d76:	e7ed      	b.n	8008d54 <__exponent+0x4c>
 8008d78:	2330      	movs	r3, #48	; 0x30
 8008d7a:	3130      	adds	r1, #48	; 0x30
 8008d7c:	7083      	strb	r3, [r0, #2]
 8008d7e:	70c1      	strb	r1, [r0, #3]
 8008d80:	1d03      	adds	r3, r0, #4
 8008d82:	e7f1      	b.n	8008d68 <__exponent+0x60>

08008d84 <_printf_float>:
 8008d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d88:	ed2d 8b02 	vpush	{d8}
 8008d8c:	b08d      	sub	sp, #52	; 0x34
 8008d8e:	460c      	mov	r4, r1
 8008d90:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008d94:	4616      	mov	r6, r2
 8008d96:	461f      	mov	r7, r3
 8008d98:	4605      	mov	r5, r0
 8008d9a:	f003 fa1f 	bl	800c1dc <_localeconv_r>
 8008d9e:	f8d0 a000 	ldr.w	sl, [r0]
 8008da2:	4650      	mov	r0, sl
 8008da4:	f7f7 fa64 	bl	8000270 <strlen>
 8008da8:	2300      	movs	r3, #0
 8008daa:	930a      	str	r3, [sp, #40]	; 0x28
 8008dac:	6823      	ldr	r3, [r4, #0]
 8008dae:	9305      	str	r3, [sp, #20]
 8008db0:	f8d8 3000 	ldr.w	r3, [r8]
 8008db4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008db8:	3307      	adds	r3, #7
 8008dba:	f023 0307 	bic.w	r3, r3, #7
 8008dbe:	f103 0208 	add.w	r2, r3, #8
 8008dc2:	f8c8 2000 	str.w	r2, [r8]
 8008dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dca:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008dce:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008dd2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008dd6:	9307      	str	r3, [sp, #28]
 8008dd8:	f8cd 8018 	str.w	r8, [sp, #24]
 8008ddc:	ee08 0a10 	vmov	s16, r0
 8008de0:	4b9f      	ldr	r3, [pc, #636]	; (8009060 <_printf_float+0x2dc>)
 8008de2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008de6:	f04f 32ff 	mov.w	r2, #4294967295
 8008dea:	f7f7 fe9f 	bl	8000b2c <__aeabi_dcmpun>
 8008dee:	bb88      	cbnz	r0, 8008e54 <_printf_float+0xd0>
 8008df0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008df4:	4b9a      	ldr	r3, [pc, #616]	; (8009060 <_printf_float+0x2dc>)
 8008df6:	f04f 32ff 	mov.w	r2, #4294967295
 8008dfa:	f7f7 fe79 	bl	8000af0 <__aeabi_dcmple>
 8008dfe:	bb48      	cbnz	r0, 8008e54 <_printf_float+0xd0>
 8008e00:	2200      	movs	r2, #0
 8008e02:	2300      	movs	r3, #0
 8008e04:	4640      	mov	r0, r8
 8008e06:	4649      	mov	r1, r9
 8008e08:	f7f7 fe68 	bl	8000adc <__aeabi_dcmplt>
 8008e0c:	b110      	cbz	r0, 8008e14 <_printf_float+0x90>
 8008e0e:	232d      	movs	r3, #45	; 0x2d
 8008e10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e14:	4b93      	ldr	r3, [pc, #588]	; (8009064 <_printf_float+0x2e0>)
 8008e16:	4894      	ldr	r0, [pc, #592]	; (8009068 <_printf_float+0x2e4>)
 8008e18:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008e1c:	bf94      	ite	ls
 8008e1e:	4698      	movls	r8, r3
 8008e20:	4680      	movhi	r8, r0
 8008e22:	2303      	movs	r3, #3
 8008e24:	6123      	str	r3, [r4, #16]
 8008e26:	9b05      	ldr	r3, [sp, #20]
 8008e28:	f023 0204 	bic.w	r2, r3, #4
 8008e2c:	6022      	str	r2, [r4, #0]
 8008e2e:	f04f 0900 	mov.w	r9, #0
 8008e32:	9700      	str	r7, [sp, #0]
 8008e34:	4633      	mov	r3, r6
 8008e36:	aa0b      	add	r2, sp, #44	; 0x2c
 8008e38:	4621      	mov	r1, r4
 8008e3a:	4628      	mov	r0, r5
 8008e3c:	f000 f9d8 	bl	80091f0 <_printf_common>
 8008e40:	3001      	adds	r0, #1
 8008e42:	f040 8090 	bne.w	8008f66 <_printf_float+0x1e2>
 8008e46:	f04f 30ff 	mov.w	r0, #4294967295
 8008e4a:	b00d      	add	sp, #52	; 0x34
 8008e4c:	ecbd 8b02 	vpop	{d8}
 8008e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e54:	4642      	mov	r2, r8
 8008e56:	464b      	mov	r3, r9
 8008e58:	4640      	mov	r0, r8
 8008e5a:	4649      	mov	r1, r9
 8008e5c:	f7f7 fe66 	bl	8000b2c <__aeabi_dcmpun>
 8008e60:	b140      	cbz	r0, 8008e74 <_printf_float+0xf0>
 8008e62:	464b      	mov	r3, r9
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	bfbc      	itt	lt
 8008e68:	232d      	movlt	r3, #45	; 0x2d
 8008e6a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008e6e:	487f      	ldr	r0, [pc, #508]	; (800906c <_printf_float+0x2e8>)
 8008e70:	4b7f      	ldr	r3, [pc, #508]	; (8009070 <_printf_float+0x2ec>)
 8008e72:	e7d1      	b.n	8008e18 <_printf_float+0x94>
 8008e74:	6863      	ldr	r3, [r4, #4]
 8008e76:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008e7a:	9206      	str	r2, [sp, #24]
 8008e7c:	1c5a      	adds	r2, r3, #1
 8008e7e:	d13f      	bne.n	8008f00 <_printf_float+0x17c>
 8008e80:	2306      	movs	r3, #6
 8008e82:	6063      	str	r3, [r4, #4]
 8008e84:	9b05      	ldr	r3, [sp, #20]
 8008e86:	6861      	ldr	r1, [r4, #4]
 8008e88:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	9303      	str	r3, [sp, #12]
 8008e90:	ab0a      	add	r3, sp, #40	; 0x28
 8008e92:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008e96:	ab09      	add	r3, sp, #36	; 0x24
 8008e98:	ec49 8b10 	vmov	d0, r8, r9
 8008e9c:	9300      	str	r3, [sp, #0]
 8008e9e:	6022      	str	r2, [r4, #0]
 8008ea0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008ea4:	4628      	mov	r0, r5
 8008ea6:	f7ff fecd 	bl	8008c44 <__cvt>
 8008eaa:	9b06      	ldr	r3, [sp, #24]
 8008eac:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008eae:	2b47      	cmp	r3, #71	; 0x47
 8008eb0:	4680      	mov	r8, r0
 8008eb2:	d108      	bne.n	8008ec6 <_printf_float+0x142>
 8008eb4:	1cc8      	adds	r0, r1, #3
 8008eb6:	db02      	blt.n	8008ebe <_printf_float+0x13a>
 8008eb8:	6863      	ldr	r3, [r4, #4]
 8008eba:	4299      	cmp	r1, r3
 8008ebc:	dd41      	ble.n	8008f42 <_printf_float+0x1be>
 8008ebe:	f1ab 0b02 	sub.w	fp, fp, #2
 8008ec2:	fa5f fb8b 	uxtb.w	fp, fp
 8008ec6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008eca:	d820      	bhi.n	8008f0e <_printf_float+0x18a>
 8008ecc:	3901      	subs	r1, #1
 8008ece:	465a      	mov	r2, fp
 8008ed0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008ed4:	9109      	str	r1, [sp, #36]	; 0x24
 8008ed6:	f7ff ff17 	bl	8008d08 <__exponent>
 8008eda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008edc:	1813      	adds	r3, r2, r0
 8008ede:	2a01      	cmp	r2, #1
 8008ee0:	4681      	mov	r9, r0
 8008ee2:	6123      	str	r3, [r4, #16]
 8008ee4:	dc02      	bgt.n	8008eec <_printf_float+0x168>
 8008ee6:	6822      	ldr	r2, [r4, #0]
 8008ee8:	07d2      	lsls	r2, r2, #31
 8008eea:	d501      	bpl.n	8008ef0 <_printf_float+0x16c>
 8008eec:	3301      	adds	r3, #1
 8008eee:	6123      	str	r3, [r4, #16]
 8008ef0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d09c      	beq.n	8008e32 <_printf_float+0xae>
 8008ef8:	232d      	movs	r3, #45	; 0x2d
 8008efa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008efe:	e798      	b.n	8008e32 <_printf_float+0xae>
 8008f00:	9a06      	ldr	r2, [sp, #24]
 8008f02:	2a47      	cmp	r2, #71	; 0x47
 8008f04:	d1be      	bne.n	8008e84 <_printf_float+0x100>
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d1bc      	bne.n	8008e84 <_printf_float+0x100>
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	e7b9      	b.n	8008e82 <_printf_float+0xfe>
 8008f0e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008f12:	d118      	bne.n	8008f46 <_printf_float+0x1c2>
 8008f14:	2900      	cmp	r1, #0
 8008f16:	6863      	ldr	r3, [r4, #4]
 8008f18:	dd0b      	ble.n	8008f32 <_printf_float+0x1ae>
 8008f1a:	6121      	str	r1, [r4, #16]
 8008f1c:	b913      	cbnz	r3, 8008f24 <_printf_float+0x1a0>
 8008f1e:	6822      	ldr	r2, [r4, #0]
 8008f20:	07d0      	lsls	r0, r2, #31
 8008f22:	d502      	bpl.n	8008f2a <_printf_float+0x1a6>
 8008f24:	3301      	adds	r3, #1
 8008f26:	440b      	add	r3, r1
 8008f28:	6123      	str	r3, [r4, #16]
 8008f2a:	65a1      	str	r1, [r4, #88]	; 0x58
 8008f2c:	f04f 0900 	mov.w	r9, #0
 8008f30:	e7de      	b.n	8008ef0 <_printf_float+0x16c>
 8008f32:	b913      	cbnz	r3, 8008f3a <_printf_float+0x1b6>
 8008f34:	6822      	ldr	r2, [r4, #0]
 8008f36:	07d2      	lsls	r2, r2, #31
 8008f38:	d501      	bpl.n	8008f3e <_printf_float+0x1ba>
 8008f3a:	3302      	adds	r3, #2
 8008f3c:	e7f4      	b.n	8008f28 <_printf_float+0x1a4>
 8008f3e:	2301      	movs	r3, #1
 8008f40:	e7f2      	b.n	8008f28 <_printf_float+0x1a4>
 8008f42:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008f46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f48:	4299      	cmp	r1, r3
 8008f4a:	db05      	blt.n	8008f58 <_printf_float+0x1d4>
 8008f4c:	6823      	ldr	r3, [r4, #0]
 8008f4e:	6121      	str	r1, [r4, #16]
 8008f50:	07d8      	lsls	r0, r3, #31
 8008f52:	d5ea      	bpl.n	8008f2a <_printf_float+0x1a6>
 8008f54:	1c4b      	adds	r3, r1, #1
 8008f56:	e7e7      	b.n	8008f28 <_printf_float+0x1a4>
 8008f58:	2900      	cmp	r1, #0
 8008f5a:	bfd4      	ite	le
 8008f5c:	f1c1 0202 	rsble	r2, r1, #2
 8008f60:	2201      	movgt	r2, #1
 8008f62:	4413      	add	r3, r2
 8008f64:	e7e0      	b.n	8008f28 <_printf_float+0x1a4>
 8008f66:	6823      	ldr	r3, [r4, #0]
 8008f68:	055a      	lsls	r2, r3, #21
 8008f6a:	d407      	bmi.n	8008f7c <_printf_float+0x1f8>
 8008f6c:	6923      	ldr	r3, [r4, #16]
 8008f6e:	4642      	mov	r2, r8
 8008f70:	4631      	mov	r1, r6
 8008f72:	4628      	mov	r0, r5
 8008f74:	47b8      	blx	r7
 8008f76:	3001      	adds	r0, #1
 8008f78:	d12c      	bne.n	8008fd4 <_printf_float+0x250>
 8008f7a:	e764      	b.n	8008e46 <_printf_float+0xc2>
 8008f7c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008f80:	f240 80e0 	bls.w	8009144 <_printf_float+0x3c0>
 8008f84:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008f88:	2200      	movs	r2, #0
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	f7f7 fd9c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008f90:	2800      	cmp	r0, #0
 8008f92:	d034      	beq.n	8008ffe <_printf_float+0x27a>
 8008f94:	4a37      	ldr	r2, [pc, #220]	; (8009074 <_printf_float+0x2f0>)
 8008f96:	2301      	movs	r3, #1
 8008f98:	4631      	mov	r1, r6
 8008f9a:	4628      	mov	r0, r5
 8008f9c:	47b8      	blx	r7
 8008f9e:	3001      	adds	r0, #1
 8008fa0:	f43f af51 	beq.w	8008e46 <_printf_float+0xc2>
 8008fa4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008fa8:	429a      	cmp	r2, r3
 8008faa:	db02      	blt.n	8008fb2 <_printf_float+0x22e>
 8008fac:	6823      	ldr	r3, [r4, #0]
 8008fae:	07d8      	lsls	r0, r3, #31
 8008fb0:	d510      	bpl.n	8008fd4 <_printf_float+0x250>
 8008fb2:	ee18 3a10 	vmov	r3, s16
 8008fb6:	4652      	mov	r2, sl
 8008fb8:	4631      	mov	r1, r6
 8008fba:	4628      	mov	r0, r5
 8008fbc:	47b8      	blx	r7
 8008fbe:	3001      	adds	r0, #1
 8008fc0:	f43f af41 	beq.w	8008e46 <_printf_float+0xc2>
 8008fc4:	f04f 0800 	mov.w	r8, #0
 8008fc8:	f104 091a 	add.w	r9, r4, #26
 8008fcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fce:	3b01      	subs	r3, #1
 8008fd0:	4543      	cmp	r3, r8
 8008fd2:	dc09      	bgt.n	8008fe8 <_printf_float+0x264>
 8008fd4:	6823      	ldr	r3, [r4, #0]
 8008fd6:	079b      	lsls	r3, r3, #30
 8008fd8:	f100 8105 	bmi.w	80091e6 <_printf_float+0x462>
 8008fdc:	68e0      	ldr	r0, [r4, #12]
 8008fde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008fe0:	4298      	cmp	r0, r3
 8008fe2:	bfb8      	it	lt
 8008fe4:	4618      	movlt	r0, r3
 8008fe6:	e730      	b.n	8008e4a <_printf_float+0xc6>
 8008fe8:	2301      	movs	r3, #1
 8008fea:	464a      	mov	r2, r9
 8008fec:	4631      	mov	r1, r6
 8008fee:	4628      	mov	r0, r5
 8008ff0:	47b8      	blx	r7
 8008ff2:	3001      	adds	r0, #1
 8008ff4:	f43f af27 	beq.w	8008e46 <_printf_float+0xc2>
 8008ff8:	f108 0801 	add.w	r8, r8, #1
 8008ffc:	e7e6      	b.n	8008fcc <_printf_float+0x248>
 8008ffe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009000:	2b00      	cmp	r3, #0
 8009002:	dc39      	bgt.n	8009078 <_printf_float+0x2f4>
 8009004:	4a1b      	ldr	r2, [pc, #108]	; (8009074 <_printf_float+0x2f0>)
 8009006:	2301      	movs	r3, #1
 8009008:	4631      	mov	r1, r6
 800900a:	4628      	mov	r0, r5
 800900c:	47b8      	blx	r7
 800900e:	3001      	adds	r0, #1
 8009010:	f43f af19 	beq.w	8008e46 <_printf_float+0xc2>
 8009014:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009018:	4313      	orrs	r3, r2
 800901a:	d102      	bne.n	8009022 <_printf_float+0x29e>
 800901c:	6823      	ldr	r3, [r4, #0]
 800901e:	07d9      	lsls	r1, r3, #31
 8009020:	d5d8      	bpl.n	8008fd4 <_printf_float+0x250>
 8009022:	ee18 3a10 	vmov	r3, s16
 8009026:	4652      	mov	r2, sl
 8009028:	4631      	mov	r1, r6
 800902a:	4628      	mov	r0, r5
 800902c:	47b8      	blx	r7
 800902e:	3001      	adds	r0, #1
 8009030:	f43f af09 	beq.w	8008e46 <_printf_float+0xc2>
 8009034:	f04f 0900 	mov.w	r9, #0
 8009038:	f104 0a1a 	add.w	sl, r4, #26
 800903c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800903e:	425b      	negs	r3, r3
 8009040:	454b      	cmp	r3, r9
 8009042:	dc01      	bgt.n	8009048 <_printf_float+0x2c4>
 8009044:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009046:	e792      	b.n	8008f6e <_printf_float+0x1ea>
 8009048:	2301      	movs	r3, #1
 800904a:	4652      	mov	r2, sl
 800904c:	4631      	mov	r1, r6
 800904e:	4628      	mov	r0, r5
 8009050:	47b8      	blx	r7
 8009052:	3001      	adds	r0, #1
 8009054:	f43f aef7 	beq.w	8008e46 <_printf_float+0xc2>
 8009058:	f109 0901 	add.w	r9, r9, #1
 800905c:	e7ee      	b.n	800903c <_printf_float+0x2b8>
 800905e:	bf00      	nop
 8009060:	7fefffff 	.word	0x7fefffff
 8009064:	0800f45c 	.word	0x0800f45c
 8009068:	0800f460 	.word	0x0800f460
 800906c:	0800f468 	.word	0x0800f468
 8009070:	0800f464 	.word	0x0800f464
 8009074:	0800f8d1 	.word	0x0800f8d1
 8009078:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800907a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800907c:	429a      	cmp	r2, r3
 800907e:	bfa8      	it	ge
 8009080:	461a      	movge	r2, r3
 8009082:	2a00      	cmp	r2, #0
 8009084:	4691      	mov	r9, r2
 8009086:	dc37      	bgt.n	80090f8 <_printf_float+0x374>
 8009088:	f04f 0b00 	mov.w	fp, #0
 800908c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009090:	f104 021a 	add.w	r2, r4, #26
 8009094:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009096:	9305      	str	r3, [sp, #20]
 8009098:	eba3 0309 	sub.w	r3, r3, r9
 800909c:	455b      	cmp	r3, fp
 800909e:	dc33      	bgt.n	8009108 <_printf_float+0x384>
 80090a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80090a4:	429a      	cmp	r2, r3
 80090a6:	db3b      	blt.n	8009120 <_printf_float+0x39c>
 80090a8:	6823      	ldr	r3, [r4, #0]
 80090aa:	07da      	lsls	r2, r3, #31
 80090ac:	d438      	bmi.n	8009120 <_printf_float+0x39c>
 80090ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80090b0:	9b05      	ldr	r3, [sp, #20]
 80090b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80090b4:	1ad3      	subs	r3, r2, r3
 80090b6:	eba2 0901 	sub.w	r9, r2, r1
 80090ba:	4599      	cmp	r9, r3
 80090bc:	bfa8      	it	ge
 80090be:	4699      	movge	r9, r3
 80090c0:	f1b9 0f00 	cmp.w	r9, #0
 80090c4:	dc35      	bgt.n	8009132 <_printf_float+0x3ae>
 80090c6:	f04f 0800 	mov.w	r8, #0
 80090ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80090ce:	f104 0a1a 	add.w	sl, r4, #26
 80090d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80090d6:	1a9b      	subs	r3, r3, r2
 80090d8:	eba3 0309 	sub.w	r3, r3, r9
 80090dc:	4543      	cmp	r3, r8
 80090de:	f77f af79 	ble.w	8008fd4 <_printf_float+0x250>
 80090e2:	2301      	movs	r3, #1
 80090e4:	4652      	mov	r2, sl
 80090e6:	4631      	mov	r1, r6
 80090e8:	4628      	mov	r0, r5
 80090ea:	47b8      	blx	r7
 80090ec:	3001      	adds	r0, #1
 80090ee:	f43f aeaa 	beq.w	8008e46 <_printf_float+0xc2>
 80090f2:	f108 0801 	add.w	r8, r8, #1
 80090f6:	e7ec      	b.n	80090d2 <_printf_float+0x34e>
 80090f8:	4613      	mov	r3, r2
 80090fa:	4631      	mov	r1, r6
 80090fc:	4642      	mov	r2, r8
 80090fe:	4628      	mov	r0, r5
 8009100:	47b8      	blx	r7
 8009102:	3001      	adds	r0, #1
 8009104:	d1c0      	bne.n	8009088 <_printf_float+0x304>
 8009106:	e69e      	b.n	8008e46 <_printf_float+0xc2>
 8009108:	2301      	movs	r3, #1
 800910a:	4631      	mov	r1, r6
 800910c:	4628      	mov	r0, r5
 800910e:	9205      	str	r2, [sp, #20]
 8009110:	47b8      	blx	r7
 8009112:	3001      	adds	r0, #1
 8009114:	f43f ae97 	beq.w	8008e46 <_printf_float+0xc2>
 8009118:	9a05      	ldr	r2, [sp, #20]
 800911a:	f10b 0b01 	add.w	fp, fp, #1
 800911e:	e7b9      	b.n	8009094 <_printf_float+0x310>
 8009120:	ee18 3a10 	vmov	r3, s16
 8009124:	4652      	mov	r2, sl
 8009126:	4631      	mov	r1, r6
 8009128:	4628      	mov	r0, r5
 800912a:	47b8      	blx	r7
 800912c:	3001      	adds	r0, #1
 800912e:	d1be      	bne.n	80090ae <_printf_float+0x32a>
 8009130:	e689      	b.n	8008e46 <_printf_float+0xc2>
 8009132:	9a05      	ldr	r2, [sp, #20]
 8009134:	464b      	mov	r3, r9
 8009136:	4442      	add	r2, r8
 8009138:	4631      	mov	r1, r6
 800913a:	4628      	mov	r0, r5
 800913c:	47b8      	blx	r7
 800913e:	3001      	adds	r0, #1
 8009140:	d1c1      	bne.n	80090c6 <_printf_float+0x342>
 8009142:	e680      	b.n	8008e46 <_printf_float+0xc2>
 8009144:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009146:	2a01      	cmp	r2, #1
 8009148:	dc01      	bgt.n	800914e <_printf_float+0x3ca>
 800914a:	07db      	lsls	r3, r3, #31
 800914c:	d538      	bpl.n	80091c0 <_printf_float+0x43c>
 800914e:	2301      	movs	r3, #1
 8009150:	4642      	mov	r2, r8
 8009152:	4631      	mov	r1, r6
 8009154:	4628      	mov	r0, r5
 8009156:	47b8      	blx	r7
 8009158:	3001      	adds	r0, #1
 800915a:	f43f ae74 	beq.w	8008e46 <_printf_float+0xc2>
 800915e:	ee18 3a10 	vmov	r3, s16
 8009162:	4652      	mov	r2, sl
 8009164:	4631      	mov	r1, r6
 8009166:	4628      	mov	r0, r5
 8009168:	47b8      	blx	r7
 800916a:	3001      	adds	r0, #1
 800916c:	f43f ae6b 	beq.w	8008e46 <_printf_float+0xc2>
 8009170:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009174:	2200      	movs	r2, #0
 8009176:	2300      	movs	r3, #0
 8009178:	f7f7 fca6 	bl	8000ac8 <__aeabi_dcmpeq>
 800917c:	b9d8      	cbnz	r0, 80091b6 <_printf_float+0x432>
 800917e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009180:	f108 0201 	add.w	r2, r8, #1
 8009184:	3b01      	subs	r3, #1
 8009186:	4631      	mov	r1, r6
 8009188:	4628      	mov	r0, r5
 800918a:	47b8      	blx	r7
 800918c:	3001      	adds	r0, #1
 800918e:	d10e      	bne.n	80091ae <_printf_float+0x42a>
 8009190:	e659      	b.n	8008e46 <_printf_float+0xc2>
 8009192:	2301      	movs	r3, #1
 8009194:	4652      	mov	r2, sl
 8009196:	4631      	mov	r1, r6
 8009198:	4628      	mov	r0, r5
 800919a:	47b8      	blx	r7
 800919c:	3001      	adds	r0, #1
 800919e:	f43f ae52 	beq.w	8008e46 <_printf_float+0xc2>
 80091a2:	f108 0801 	add.w	r8, r8, #1
 80091a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091a8:	3b01      	subs	r3, #1
 80091aa:	4543      	cmp	r3, r8
 80091ac:	dcf1      	bgt.n	8009192 <_printf_float+0x40e>
 80091ae:	464b      	mov	r3, r9
 80091b0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80091b4:	e6dc      	b.n	8008f70 <_printf_float+0x1ec>
 80091b6:	f04f 0800 	mov.w	r8, #0
 80091ba:	f104 0a1a 	add.w	sl, r4, #26
 80091be:	e7f2      	b.n	80091a6 <_printf_float+0x422>
 80091c0:	2301      	movs	r3, #1
 80091c2:	4642      	mov	r2, r8
 80091c4:	e7df      	b.n	8009186 <_printf_float+0x402>
 80091c6:	2301      	movs	r3, #1
 80091c8:	464a      	mov	r2, r9
 80091ca:	4631      	mov	r1, r6
 80091cc:	4628      	mov	r0, r5
 80091ce:	47b8      	blx	r7
 80091d0:	3001      	adds	r0, #1
 80091d2:	f43f ae38 	beq.w	8008e46 <_printf_float+0xc2>
 80091d6:	f108 0801 	add.w	r8, r8, #1
 80091da:	68e3      	ldr	r3, [r4, #12]
 80091dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80091de:	1a5b      	subs	r3, r3, r1
 80091e0:	4543      	cmp	r3, r8
 80091e2:	dcf0      	bgt.n	80091c6 <_printf_float+0x442>
 80091e4:	e6fa      	b.n	8008fdc <_printf_float+0x258>
 80091e6:	f04f 0800 	mov.w	r8, #0
 80091ea:	f104 0919 	add.w	r9, r4, #25
 80091ee:	e7f4      	b.n	80091da <_printf_float+0x456>

080091f0 <_printf_common>:
 80091f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091f4:	4616      	mov	r6, r2
 80091f6:	4699      	mov	r9, r3
 80091f8:	688a      	ldr	r2, [r1, #8]
 80091fa:	690b      	ldr	r3, [r1, #16]
 80091fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009200:	4293      	cmp	r3, r2
 8009202:	bfb8      	it	lt
 8009204:	4613      	movlt	r3, r2
 8009206:	6033      	str	r3, [r6, #0]
 8009208:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800920c:	4607      	mov	r7, r0
 800920e:	460c      	mov	r4, r1
 8009210:	b10a      	cbz	r2, 8009216 <_printf_common+0x26>
 8009212:	3301      	adds	r3, #1
 8009214:	6033      	str	r3, [r6, #0]
 8009216:	6823      	ldr	r3, [r4, #0]
 8009218:	0699      	lsls	r1, r3, #26
 800921a:	bf42      	ittt	mi
 800921c:	6833      	ldrmi	r3, [r6, #0]
 800921e:	3302      	addmi	r3, #2
 8009220:	6033      	strmi	r3, [r6, #0]
 8009222:	6825      	ldr	r5, [r4, #0]
 8009224:	f015 0506 	ands.w	r5, r5, #6
 8009228:	d106      	bne.n	8009238 <_printf_common+0x48>
 800922a:	f104 0a19 	add.w	sl, r4, #25
 800922e:	68e3      	ldr	r3, [r4, #12]
 8009230:	6832      	ldr	r2, [r6, #0]
 8009232:	1a9b      	subs	r3, r3, r2
 8009234:	42ab      	cmp	r3, r5
 8009236:	dc26      	bgt.n	8009286 <_printf_common+0x96>
 8009238:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800923c:	1e13      	subs	r3, r2, #0
 800923e:	6822      	ldr	r2, [r4, #0]
 8009240:	bf18      	it	ne
 8009242:	2301      	movne	r3, #1
 8009244:	0692      	lsls	r2, r2, #26
 8009246:	d42b      	bmi.n	80092a0 <_printf_common+0xb0>
 8009248:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800924c:	4649      	mov	r1, r9
 800924e:	4638      	mov	r0, r7
 8009250:	47c0      	blx	r8
 8009252:	3001      	adds	r0, #1
 8009254:	d01e      	beq.n	8009294 <_printf_common+0xa4>
 8009256:	6823      	ldr	r3, [r4, #0]
 8009258:	68e5      	ldr	r5, [r4, #12]
 800925a:	6832      	ldr	r2, [r6, #0]
 800925c:	f003 0306 	and.w	r3, r3, #6
 8009260:	2b04      	cmp	r3, #4
 8009262:	bf08      	it	eq
 8009264:	1aad      	subeq	r5, r5, r2
 8009266:	68a3      	ldr	r3, [r4, #8]
 8009268:	6922      	ldr	r2, [r4, #16]
 800926a:	bf0c      	ite	eq
 800926c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009270:	2500      	movne	r5, #0
 8009272:	4293      	cmp	r3, r2
 8009274:	bfc4      	itt	gt
 8009276:	1a9b      	subgt	r3, r3, r2
 8009278:	18ed      	addgt	r5, r5, r3
 800927a:	2600      	movs	r6, #0
 800927c:	341a      	adds	r4, #26
 800927e:	42b5      	cmp	r5, r6
 8009280:	d11a      	bne.n	80092b8 <_printf_common+0xc8>
 8009282:	2000      	movs	r0, #0
 8009284:	e008      	b.n	8009298 <_printf_common+0xa8>
 8009286:	2301      	movs	r3, #1
 8009288:	4652      	mov	r2, sl
 800928a:	4649      	mov	r1, r9
 800928c:	4638      	mov	r0, r7
 800928e:	47c0      	blx	r8
 8009290:	3001      	adds	r0, #1
 8009292:	d103      	bne.n	800929c <_printf_common+0xac>
 8009294:	f04f 30ff 	mov.w	r0, #4294967295
 8009298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800929c:	3501      	adds	r5, #1
 800929e:	e7c6      	b.n	800922e <_printf_common+0x3e>
 80092a0:	18e1      	adds	r1, r4, r3
 80092a2:	1c5a      	adds	r2, r3, #1
 80092a4:	2030      	movs	r0, #48	; 0x30
 80092a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80092aa:	4422      	add	r2, r4
 80092ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80092b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80092b4:	3302      	adds	r3, #2
 80092b6:	e7c7      	b.n	8009248 <_printf_common+0x58>
 80092b8:	2301      	movs	r3, #1
 80092ba:	4622      	mov	r2, r4
 80092bc:	4649      	mov	r1, r9
 80092be:	4638      	mov	r0, r7
 80092c0:	47c0      	blx	r8
 80092c2:	3001      	adds	r0, #1
 80092c4:	d0e6      	beq.n	8009294 <_printf_common+0xa4>
 80092c6:	3601      	adds	r6, #1
 80092c8:	e7d9      	b.n	800927e <_printf_common+0x8e>
	...

080092cc <_printf_i>:
 80092cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80092d0:	460c      	mov	r4, r1
 80092d2:	4691      	mov	r9, r2
 80092d4:	7e27      	ldrb	r7, [r4, #24]
 80092d6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80092d8:	2f78      	cmp	r7, #120	; 0x78
 80092da:	4680      	mov	r8, r0
 80092dc:	469a      	mov	sl, r3
 80092de:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80092e2:	d807      	bhi.n	80092f4 <_printf_i+0x28>
 80092e4:	2f62      	cmp	r7, #98	; 0x62
 80092e6:	d80a      	bhi.n	80092fe <_printf_i+0x32>
 80092e8:	2f00      	cmp	r7, #0
 80092ea:	f000 80d8 	beq.w	800949e <_printf_i+0x1d2>
 80092ee:	2f58      	cmp	r7, #88	; 0x58
 80092f0:	f000 80a3 	beq.w	800943a <_printf_i+0x16e>
 80092f4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80092f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80092fc:	e03a      	b.n	8009374 <_printf_i+0xa8>
 80092fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009302:	2b15      	cmp	r3, #21
 8009304:	d8f6      	bhi.n	80092f4 <_printf_i+0x28>
 8009306:	a001      	add	r0, pc, #4	; (adr r0, 800930c <_printf_i+0x40>)
 8009308:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800930c:	08009365 	.word	0x08009365
 8009310:	08009379 	.word	0x08009379
 8009314:	080092f5 	.word	0x080092f5
 8009318:	080092f5 	.word	0x080092f5
 800931c:	080092f5 	.word	0x080092f5
 8009320:	080092f5 	.word	0x080092f5
 8009324:	08009379 	.word	0x08009379
 8009328:	080092f5 	.word	0x080092f5
 800932c:	080092f5 	.word	0x080092f5
 8009330:	080092f5 	.word	0x080092f5
 8009334:	080092f5 	.word	0x080092f5
 8009338:	08009485 	.word	0x08009485
 800933c:	080093a9 	.word	0x080093a9
 8009340:	08009467 	.word	0x08009467
 8009344:	080092f5 	.word	0x080092f5
 8009348:	080092f5 	.word	0x080092f5
 800934c:	080094a7 	.word	0x080094a7
 8009350:	080092f5 	.word	0x080092f5
 8009354:	080093a9 	.word	0x080093a9
 8009358:	080092f5 	.word	0x080092f5
 800935c:	080092f5 	.word	0x080092f5
 8009360:	0800946f 	.word	0x0800946f
 8009364:	680b      	ldr	r3, [r1, #0]
 8009366:	1d1a      	adds	r2, r3, #4
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	600a      	str	r2, [r1, #0]
 800936c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009370:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009374:	2301      	movs	r3, #1
 8009376:	e0a3      	b.n	80094c0 <_printf_i+0x1f4>
 8009378:	6825      	ldr	r5, [r4, #0]
 800937a:	6808      	ldr	r0, [r1, #0]
 800937c:	062e      	lsls	r6, r5, #24
 800937e:	f100 0304 	add.w	r3, r0, #4
 8009382:	d50a      	bpl.n	800939a <_printf_i+0xce>
 8009384:	6805      	ldr	r5, [r0, #0]
 8009386:	600b      	str	r3, [r1, #0]
 8009388:	2d00      	cmp	r5, #0
 800938a:	da03      	bge.n	8009394 <_printf_i+0xc8>
 800938c:	232d      	movs	r3, #45	; 0x2d
 800938e:	426d      	negs	r5, r5
 8009390:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009394:	485e      	ldr	r0, [pc, #376]	; (8009510 <_printf_i+0x244>)
 8009396:	230a      	movs	r3, #10
 8009398:	e019      	b.n	80093ce <_printf_i+0x102>
 800939a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800939e:	6805      	ldr	r5, [r0, #0]
 80093a0:	600b      	str	r3, [r1, #0]
 80093a2:	bf18      	it	ne
 80093a4:	b22d      	sxthne	r5, r5
 80093a6:	e7ef      	b.n	8009388 <_printf_i+0xbc>
 80093a8:	680b      	ldr	r3, [r1, #0]
 80093aa:	6825      	ldr	r5, [r4, #0]
 80093ac:	1d18      	adds	r0, r3, #4
 80093ae:	6008      	str	r0, [r1, #0]
 80093b0:	0628      	lsls	r0, r5, #24
 80093b2:	d501      	bpl.n	80093b8 <_printf_i+0xec>
 80093b4:	681d      	ldr	r5, [r3, #0]
 80093b6:	e002      	b.n	80093be <_printf_i+0xf2>
 80093b8:	0669      	lsls	r1, r5, #25
 80093ba:	d5fb      	bpl.n	80093b4 <_printf_i+0xe8>
 80093bc:	881d      	ldrh	r5, [r3, #0]
 80093be:	4854      	ldr	r0, [pc, #336]	; (8009510 <_printf_i+0x244>)
 80093c0:	2f6f      	cmp	r7, #111	; 0x6f
 80093c2:	bf0c      	ite	eq
 80093c4:	2308      	moveq	r3, #8
 80093c6:	230a      	movne	r3, #10
 80093c8:	2100      	movs	r1, #0
 80093ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80093ce:	6866      	ldr	r6, [r4, #4]
 80093d0:	60a6      	str	r6, [r4, #8]
 80093d2:	2e00      	cmp	r6, #0
 80093d4:	bfa2      	ittt	ge
 80093d6:	6821      	ldrge	r1, [r4, #0]
 80093d8:	f021 0104 	bicge.w	r1, r1, #4
 80093dc:	6021      	strge	r1, [r4, #0]
 80093de:	b90d      	cbnz	r5, 80093e4 <_printf_i+0x118>
 80093e0:	2e00      	cmp	r6, #0
 80093e2:	d04d      	beq.n	8009480 <_printf_i+0x1b4>
 80093e4:	4616      	mov	r6, r2
 80093e6:	fbb5 f1f3 	udiv	r1, r5, r3
 80093ea:	fb03 5711 	mls	r7, r3, r1, r5
 80093ee:	5dc7      	ldrb	r7, [r0, r7]
 80093f0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80093f4:	462f      	mov	r7, r5
 80093f6:	42bb      	cmp	r3, r7
 80093f8:	460d      	mov	r5, r1
 80093fa:	d9f4      	bls.n	80093e6 <_printf_i+0x11a>
 80093fc:	2b08      	cmp	r3, #8
 80093fe:	d10b      	bne.n	8009418 <_printf_i+0x14c>
 8009400:	6823      	ldr	r3, [r4, #0]
 8009402:	07df      	lsls	r7, r3, #31
 8009404:	d508      	bpl.n	8009418 <_printf_i+0x14c>
 8009406:	6923      	ldr	r3, [r4, #16]
 8009408:	6861      	ldr	r1, [r4, #4]
 800940a:	4299      	cmp	r1, r3
 800940c:	bfde      	ittt	le
 800940e:	2330      	movle	r3, #48	; 0x30
 8009410:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009414:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009418:	1b92      	subs	r2, r2, r6
 800941a:	6122      	str	r2, [r4, #16]
 800941c:	f8cd a000 	str.w	sl, [sp]
 8009420:	464b      	mov	r3, r9
 8009422:	aa03      	add	r2, sp, #12
 8009424:	4621      	mov	r1, r4
 8009426:	4640      	mov	r0, r8
 8009428:	f7ff fee2 	bl	80091f0 <_printf_common>
 800942c:	3001      	adds	r0, #1
 800942e:	d14c      	bne.n	80094ca <_printf_i+0x1fe>
 8009430:	f04f 30ff 	mov.w	r0, #4294967295
 8009434:	b004      	add	sp, #16
 8009436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800943a:	4835      	ldr	r0, [pc, #212]	; (8009510 <_printf_i+0x244>)
 800943c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009440:	6823      	ldr	r3, [r4, #0]
 8009442:	680e      	ldr	r6, [r1, #0]
 8009444:	061f      	lsls	r7, r3, #24
 8009446:	f856 5b04 	ldr.w	r5, [r6], #4
 800944a:	600e      	str	r6, [r1, #0]
 800944c:	d514      	bpl.n	8009478 <_printf_i+0x1ac>
 800944e:	07d9      	lsls	r1, r3, #31
 8009450:	bf44      	itt	mi
 8009452:	f043 0320 	orrmi.w	r3, r3, #32
 8009456:	6023      	strmi	r3, [r4, #0]
 8009458:	b91d      	cbnz	r5, 8009462 <_printf_i+0x196>
 800945a:	6823      	ldr	r3, [r4, #0]
 800945c:	f023 0320 	bic.w	r3, r3, #32
 8009460:	6023      	str	r3, [r4, #0]
 8009462:	2310      	movs	r3, #16
 8009464:	e7b0      	b.n	80093c8 <_printf_i+0xfc>
 8009466:	6823      	ldr	r3, [r4, #0]
 8009468:	f043 0320 	orr.w	r3, r3, #32
 800946c:	6023      	str	r3, [r4, #0]
 800946e:	2378      	movs	r3, #120	; 0x78
 8009470:	4828      	ldr	r0, [pc, #160]	; (8009514 <_printf_i+0x248>)
 8009472:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009476:	e7e3      	b.n	8009440 <_printf_i+0x174>
 8009478:	065e      	lsls	r6, r3, #25
 800947a:	bf48      	it	mi
 800947c:	b2ad      	uxthmi	r5, r5
 800947e:	e7e6      	b.n	800944e <_printf_i+0x182>
 8009480:	4616      	mov	r6, r2
 8009482:	e7bb      	b.n	80093fc <_printf_i+0x130>
 8009484:	680b      	ldr	r3, [r1, #0]
 8009486:	6826      	ldr	r6, [r4, #0]
 8009488:	6960      	ldr	r0, [r4, #20]
 800948a:	1d1d      	adds	r5, r3, #4
 800948c:	600d      	str	r5, [r1, #0]
 800948e:	0635      	lsls	r5, r6, #24
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	d501      	bpl.n	8009498 <_printf_i+0x1cc>
 8009494:	6018      	str	r0, [r3, #0]
 8009496:	e002      	b.n	800949e <_printf_i+0x1d2>
 8009498:	0671      	lsls	r1, r6, #25
 800949a:	d5fb      	bpl.n	8009494 <_printf_i+0x1c8>
 800949c:	8018      	strh	r0, [r3, #0]
 800949e:	2300      	movs	r3, #0
 80094a0:	6123      	str	r3, [r4, #16]
 80094a2:	4616      	mov	r6, r2
 80094a4:	e7ba      	b.n	800941c <_printf_i+0x150>
 80094a6:	680b      	ldr	r3, [r1, #0]
 80094a8:	1d1a      	adds	r2, r3, #4
 80094aa:	600a      	str	r2, [r1, #0]
 80094ac:	681e      	ldr	r6, [r3, #0]
 80094ae:	6862      	ldr	r2, [r4, #4]
 80094b0:	2100      	movs	r1, #0
 80094b2:	4630      	mov	r0, r6
 80094b4:	f7f6 fe8c 	bl	80001d0 <memchr>
 80094b8:	b108      	cbz	r0, 80094be <_printf_i+0x1f2>
 80094ba:	1b80      	subs	r0, r0, r6
 80094bc:	6060      	str	r0, [r4, #4]
 80094be:	6863      	ldr	r3, [r4, #4]
 80094c0:	6123      	str	r3, [r4, #16]
 80094c2:	2300      	movs	r3, #0
 80094c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094c8:	e7a8      	b.n	800941c <_printf_i+0x150>
 80094ca:	6923      	ldr	r3, [r4, #16]
 80094cc:	4632      	mov	r2, r6
 80094ce:	4649      	mov	r1, r9
 80094d0:	4640      	mov	r0, r8
 80094d2:	47d0      	blx	sl
 80094d4:	3001      	adds	r0, #1
 80094d6:	d0ab      	beq.n	8009430 <_printf_i+0x164>
 80094d8:	6823      	ldr	r3, [r4, #0]
 80094da:	079b      	lsls	r3, r3, #30
 80094dc:	d413      	bmi.n	8009506 <_printf_i+0x23a>
 80094de:	68e0      	ldr	r0, [r4, #12]
 80094e0:	9b03      	ldr	r3, [sp, #12]
 80094e2:	4298      	cmp	r0, r3
 80094e4:	bfb8      	it	lt
 80094e6:	4618      	movlt	r0, r3
 80094e8:	e7a4      	b.n	8009434 <_printf_i+0x168>
 80094ea:	2301      	movs	r3, #1
 80094ec:	4632      	mov	r2, r6
 80094ee:	4649      	mov	r1, r9
 80094f0:	4640      	mov	r0, r8
 80094f2:	47d0      	blx	sl
 80094f4:	3001      	adds	r0, #1
 80094f6:	d09b      	beq.n	8009430 <_printf_i+0x164>
 80094f8:	3501      	adds	r5, #1
 80094fa:	68e3      	ldr	r3, [r4, #12]
 80094fc:	9903      	ldr	r1, [sp, #12]
 80094fe:	1a5b      	subs	r3, r3, r1
 8009500:	42ab      	cmp	r3, r5
 8009502:	dcf2      	bgt.n	80094ea <_printf_i+0x21e>
 8009504:	e7eb      	b.n	80094de <_printf_i+0x212>
 8009506:	2500      	movs	r5, #0
 8009508:	f104 0619 	add.w	r6, r4, #25
 800950c:	e7f5      	b.n	80094fa <_printf_i+0x22e>
 800950e:	bf00      	nop
 8009510:	0800f46c 	.word	0x0800f46c
 8009514:	0800f47d 	.word	0x0800f47d

08009518 <_scanf_float>:
 8009518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800951c:	b087      	sub	sp, #28
 800951e:	4617      	mov	r7, r2
 8009520:	9303      	str	r3, [sp, #12]
 8009522:	688b      	ldr	r3, [r1, #8]
 8009524:	1e5a      	subs	r2, r3, #1
 8009526:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800952a:	bf83      	ittte	hi
 800952c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009530:	195b      	addhi	r3, r3, r5
 8009532:	9302      	strhi	r3, [sp, #8]
 8009534:	2300      	movls	r3, #0
 8009536:	bf86      	itte	hi
 8009538:	f240 135d 	movwhi	r3, #349	; 0x15d
 800953c:	608b      	strhi	r3, [r1, #8]
 800953e:	9302      	strls	r3, [sp, #8]
 8009540:	680b      	ldr	r3, [r1, #0]
 8009542:	468b      	mov	fp, r1
 8009544:	2500      	movs	r5, #0
 8009546:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800954a:	f84b 3b1c 	str.w	r3, [fp], #28
 800954e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009552:	4680      	mov	r8, r0
 8009554:	460c      	mov	r4, r1
 8009556:	465e      	mov	r6, fp
 8009558:	46aa      	mov	sl, r5
 800955a:	46a9      	mov	r9, r5
 800955c:	9501      	str	r5, [sp, #4]
 800955e:	68a2      	ldr	r2, [r4, #8]
 8009560:	b152      	cbz	r2, 8009578 <_scanf_float+0x60>
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	781b      	ldrb	r3, [r3, #0]
 8009566:	2b4e      	cmp	r3, #78	; 0x4e
 8009568:	d864      	bhi.n	8009634 <_scanf_float+0x11c>
 800956a:	2b40      	cmp	r3, #64	; 0x40
 800956c:	d83c      	bhi.n	80095e8 <_scanf_float+0xd0>
 800956e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8009572:	b2c8      	uxtb	r0, r1
 8009574:	280e      	cmp	r0, #14
 8009576:	d93a      	bls.n	80095ee <_scanf_float+0xd6>
 8009578:	f1b9 0f00 	cmp.w	r9, #0
 800957c:	d003      	beq.n	8009586 <_scanf_float+0x6e>
 800957e:	6823      	ldr	r3, [r4, #0]
 8009580:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009584:	6023      	str	r3, [r4, #0]
 8009586:	f10a 3aff 	add.w	sl, sl, #4294967295
 800958a:	f1ba 0f01 	cmp.w	sl, #1
 800958e:	f200 8113 	bhi.w	80097b8 <_scanf_float+0x2a0>
 8009592:	455e      	cmp	r6, fp
 8009594:	f200 8105 	bhi.w	80097a2 <_scanf_float+0x28a>
 8009598:	2501      	movs	r5, #1
 800959a:	4628      	mov	r0, r5
 800959c:	b007      	add	sp, #28
 800959e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095a2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80095a6:	2a0d      	cmp	r2, #13
 80095a8:	d8e6      	bhi.n	8009578 <_scanf_float+0x60>
 80095aa:	a101      	add	r1, pc, #4	; (adr r1, 80095b0 <_scanf_float+0x98>)
 80095ac:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80095b0:	080096ef 	.word	0x080096ef
 80095b4:	08009579 	.word	0x08009579
 80095b8:	08009579 	.word	0x08009579
 80095bc:	08009579 	.word	0x08009579
 80095c0:	0800974f 	.word	0x0800974f
 80095c4:	08009727 	.word	0x08009727
 80095c8:	08009579 	.word	0x08009579
 80095cc:	08009579 	.word	0x08009579
 80095d0:	080096fd 	.word	0x080096fd
 80095d4:	08009579 	.word	0x08009579
 80095d8:	08009579 	.word	0x08009579
 80095dc:	08009579 	.word	0x08009579
 80095e0:	08009579 	.word	0x08009579
 80095e4:	080096b5 	.word	0x080096b5
 80095e8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80095ec:	e7db      	b.n	80095a6 <_scanf_float+0x8e>
 80095ee:	290e      	cmp	r1, #14
 80095f0:	d8c2      	bhi.n	8009578 <_scanf_float+0x60>
 80095f2:	a001      	add	r0, pc, #4	; (adr r0, 80095f8 <_scanf_float+0xe0>)
 80095f4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80095f8:	080096a7 	.word	0x080096a7
 80095fc:	08009579 	.word	0x08009579
 8009600:	080096a7 	.word	0x080096a7
 8009604:	0800973b 	.word	0x0800973b
 8009608:	08009579 	.word	0x08009579
 800960c:	08009655 	.word	0x08009655
 8009610:	08009691 	.word	0x08009691
 8009614:	08009691 	.word	0x08009691
 8009618:	08009691 	.word	0x08009691
 800961c:	08009691 	.word	0x08009691
 8009620:	08009691 	.word	0x08009691
 8009624:	08009691 	.word	0x08009691
 8009628:	08009691 	.word	0x08009691
 800962c:	08009691 	.word	0x08009691
 8009630:	08009691 	.word	0x08009691
 8009634:	2b6e      	cmp	r3, #110	; 0x6e
 8009636:	d809      	bhi.n	800964c <_scanf_float+0x134>
 8009638:	2b60      	cmp	r3, #96	; 0x60
 800963a:	d8b2      	bhi.n	80095a2 <_scanf_float+0x8a>
 800963c:	2b54      	cmp	r3, #84	; 0x54
 800963e:	d077      	beq.n	8009730 <_scanf_float+0x218>
 8009640:	2b59      	cmp	r3, #89	; 0x59
 8009642:	d199      	bne.n	8009578 <_scanf_float+0x60>
 8009644:	2d07      	cmp	r5, #7
 8009646:	d197      	bne.n	8009578 <_scanf_float+0x60>
 8009648:	2508      	movs	r5, #8
 800964a:	e029      	b.n	80096a0 <_scanf_float+0x188>
 800964c:	2b74      	cmp	r3, #116	; 0x74
 800964e:	d06f      	beq.n	8009730 <_scanf_float+0x218>
 8009650:	2b79      	cmp	r3, #121	; 0x79
 8009652:	e7f6      	b.n	8009642 <_scanf_float+0x12a>
 8009654:	6821      	ldr	r1, [r4, #0]
 8009656:	05c8      	lsls	r0, r1, #23
 8009658:	d51a      	bpl.n	8009690 <_scanf_float+0x178>
 800965a:	9b02      	ldr	r3, [sp, #8]
 800965c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009660:	6021      	str	r1, [r4, #0]
 8009662:	f109 0901 	add.w	r9, r9, #1
 8009666:	b11b      	cbz	r3, 8009670 <_scanf_float+0x158>
 8009668:	3b01      	subs	r3, #1
 800966a:	3201      	adds	r2, #1
 800966c:	9302      	str	r3, [sp, #8]
 800966e:	60a2      	str	r2, [r4, #8]
 8009670:	68a3      	ldr	r3, [r4, #8]
 8009672:	3b01      	subs	r3, #1
 8009674:	60a3      	str	r3, [r4, #8]
 8009676:	6923      	ldr	r3, [r4, #16]
 8009678:	3301      	adds	r3, #1
 800967a:	6123      	str	r3, [r4, #16]
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	3b01      	subs	r3, #1
 8009680:	2b00      	cmp	r3, #0
 8009682:	607b      	str	r3, [r7, #4]
 8009684:	f340 8084 	ble.w	8009790 <_scanf_float+0x278>
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	3301      	adds	r3, #1
 800968c:	603b      	str	r3, [r7, #0]
 800968e:	e766      	b.n	800955e <_scanf_float+0x46>
 8009690:	eb1a 0f05 	cmn.w	sl, r5
 8009694:	f47f af70 	bne.w	8009578 <_scanf_float+0x60>
 8009698:	6822      	ldr	r2, [r4, #0]
 800969a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800969e:	6022      	str	r2, [r4, #0]
 80096a0:	f806 3b01 	strb.w	r3, [r6], #1
 80096a4:	e7e4      	b.n	8009670 <_scanf_float+0x158>
 80096a6:	6822      	ldr	r2, [r4, #0]
 80096a8:	0610      	lsls	r0, r2, #24
 80096aa:	f57f af65 	bpl.w	8009578 <_scanf_float+0x60>
 80096ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80096b2:	e7f4      	b.n	800969e <_scanf_float+0x186>
 80096b4:	f1ba 0f00 	cmp.w	sl, #0
 80096b8:	d10e      	bne.n	80096d8 <_scanf_float+0x1c0>
 80096ba:	f1b9 0f00 	cmp.w	r9, #0
 80096be:	d10e      	bne.n	80096de <_scanf_float+0x1c6>
 80096c0:	6822      	ldr	r2, [r4, #0]
 80096c2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80096c6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80096ca:	d108      	bne.n	80096de <_scanf_float+0x1c6>
 80096cc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80096d0:	6022      	str	r2, [r4, #0]
 80096d2:	f04f 0a01 	mov.w	sl, #1
 80096d6:	e7e3      	b.n	80096a0 <_scanf_float+0x188>
 80096d8:	f1ba 0f02 	cmp.w	sl, #2
 80096dc:	d055      	beq.n	800978a <_scanf_float+0x272>
 80096de:	2d01      	cmp	r5, #1
 80096e0:	d002      	beq.n	80096e8 <_scanf_float+0x1d0>
 80096e2:	2d04      	cmp	r5, #4
 80096e4:	f47f af48 	bne.w	8009578 <_scanf_float+0x60>
 80096e8:	3501      	adds	r5, #1
 80096ea:	b2ed      	uxtb	r5, r5
 80096ec:	e7d8      	b.n	80096a0 <_scanf_float+0x188>
 80096ee:	f1ba 0f01 	cmp.w	sl, #1
 80096f2:	f47f af41 	bne.w	8009578 <_scanf_float+0x60>
 80096f6:	f04f 0a02 	mov.w	sl, #2
 80096fa:	e7d1      	b.n	80096a0 <_scanf_float+0x188>
 80096fc:	b97d      	cbnz	r5, 800971e <_scanf_float+0x206>
 80096fe:	f1b9 0f00 	cmp.w	r9, #0
 8009702:	f47f af3c 	bne.w	800957e <_scanf_float+0x66>
 8009706:	6822      	ldr	r2, [r4, #0]
 8009708:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800970c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009710:	f47f af39 	bne.w	8009586 <_scanf_float+0x6e>
 8009714:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009718:	6022      	str	r2, [r4, #0]
 800971a:	2501      	movs	r5, #1
 800971c:	e7c0      	b.n	80096a0 <_scanf_float+0x188>
 800971e:	2d03      	cmp	r5, #3
 8009720:	d0e2      	beq.n	80096e8 <_scanf_float+0x1d0>
 8009722:	2d05      	cmp	r5, #5
 8009724:	e7de      	b.n	80096e4 <_scanf_float+0x1cc>
 8009726:	2d02      	cmp	r5, #2
 8009728:	f47f af26 	bne.w	8009578 <_scanf_float+0x60>
 800972c:	2503      	movs	r5, #3
 800972e:	e7b7      	b.n	80096a0 <_scanf_float+0x188>
 8009730:	2d06      	cmp	r5, #6
 8009732:	f47f af21 	bne.w	8009578 <_scanf_float+0x60>
 8009736:	2507      	movs	r5, #7
 8009738:	e7b2      	b.n	80096a0 <_scanf_float+0x188>
 800973a:	6822      	ldr	r2, [r4, #0]
 800973c:	0591      	lsls	r1, r2, #22
 800973e:	f57f af1b 	bpl.w	8009578 <_scanf_float+0x60>
 8009742:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009746:	6022      	str	r2, [r4, #0]
 8009748:	f8cd 9004 	str.w	r9, [sp, #4]
 800974c:	e7a8      	b.n	80096a0 <_scanf_float+0x188>
 800974e:	6822      	ldr	r2, [r4, #0]
 8009750:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009754:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009758:	d006      	beq.n	8009768 <_scanf_float+0x250>
 800975a:	0550      	lsls	r0, r2, #21
 800975c:	f57f af0c 	bpl.w	8009578 <_scanf_float+0x60>
 8009760:	f1b9 0f00 	cmp.w	r9, #0
 8009764:	f43f af0f 	beq.w	8009586 <_scanf_float+0x6e>
 8009768:	0591      	lsls	r1, r2, #22
 800976a:	bf58      	it	pl
 800976c:	9901      	ldrpl	r1, [sp, #4]
 800976e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009772:	bf58      	it	pl
 8009774:	eba9 0101 	subpl.w	r1, r9, r1
 8009778:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800977c:	bf58      	it	pl
 800977e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009782:	6022      	str	r2, [r4, #0]
 8009784:	f04f 0900 	mov.w	r9, #0
 8009788:	e78a      	b.n	80096a0 <_scanf_float+0x188>
 800978a:	f04f 0a03 	mov.w	sl, #3
 800978e:	e787      	b.n	80096a0 <_scanf_float+0x188>
 8009790:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009794:	4639      	mov	r1, r7
 8009796:	4640      	mov	r0, r8
 8009798:	4798      	blx	r3
 800979a:	2800      	cmp	r0, #0
 800979c:	f43f aedf 	beq.w	800955e <_scanf_float+0x46>
 80097a0:	e6ea      	b.n	8009578 <_scanf_float+0x60>
 80097a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80097a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80097aa:	463a      	mov	r2, r7
 80097ac:	4640      	mov	r0, r8
 80097ae:	4798      	blx	r3
 80097b0:	6923      	ldr	r3, [r4, #16]
 80097b2:	3b01      	subs	r3, #1
 80097b4:	6123      	str	r3, [r4, #16]
 80097b6:	e6ec      	b.n	8009592 <_scanf_float+0x7a>
 80097b8:	1e6b      	subs	r3, r5, #1
 80097ba:	2b06      	cmp	r3, #6
 80097bc:	d825      	bhi.n	800980a <_scanf_float+0x2f2>
 80097be:	2d02      	cmp	r5, #2
 80097c0:	d836      	bhi.n	8009830 <_scanf_float+0x318>
 80097c2:	455e      	cmp	r6, fp
 80097c4:	f67f aee8 	bls.w	8009598 <_scanf_float+0x80>
 80097c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80097cc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80097d0:	463a      	mov	r2, r7
 80097d2:	4640      	mov	r0, r8
 80097d4:	4798      	blx	r3
 80097d6:	6923      	ldr	r3, [r4, #16]
 80097d8:	3b01      	subs	r3, #1
 80097da:	6123      	str	r3, [r4, #16]
 80097dc:	e7f1      	b.n	80097c2 <_scanf_float+0x2aa>
 80097de:	9802      	ldr	r0, [sp, #8]
 80097e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80097e4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80097e8:	9002      	str	r0, [sp, #8]
 80097ea:	463a      	mov	r2, r7
 80097ec:	4640      	mov	r0, r8
 80097ee:	4798      	blx	r3
 80097f0:	6923      	ldr	r3, [r4, #16]
 80097f2:	3b01      	subs	r3, #1
 80097f4:	6123      	str	r3, [r4, #16]
 80097f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80097fa:	fa5f fa8a 	uxtb.w	sl, sl
 80097fe:	f1ba 0f02 	cmp.w	sl, #2
 8009802:	d1ec      	bne.n	80097de <_scanf_float+0x2c6>
 8009804:	3d03      	subs	r5, #3
 8009806:	b2ed      	uxtb	r5, r5
 8009808:	1b76      	subs	r6, r6, r5
 800980a:	6823      	ldr	r3, [r4, #0]
 800980c:	05da      	lsls	r2, r3, #23
 800980e:	d52f      	bpl.n	8009870 <_scanf_float+0x358>
 8009810:	055b      	lsls	r3, r3, #21
 8009812:	d510      	bpl.n	8009836 <_scanf_float+0x31e>
 8009814:	455e      	cmp	r6, fp
 8009816:	f67f aebf 	bls.w	8009598 <_scanf_float+0x80>
 800981a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800981e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009822:	463a      	mov	r2, r7
 8009824:	4640      	mov	r0, r8
 8009826:	4798      	blx	r3
 8009828:	6923      	ldr	r3, [r4, #16]
 800982a:	3b01      	subs	r3, #1
 800982c:	6123      	str	r3, [r4, #16]
 800982e:	e7f1      	b.n	8009814 <_scanf_float+0x2fc>
 8009830:	46aa      	mov	sl, r5
 8009832:	9602      	str	r6, [sp, #8]
 8009834:	e7df      	b.n	80097f6 <_scanf_float+0x2de>
 8009836:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800983a:	6923      	ldr	r3, [r4, #16]
 800983c:	2965      	cmp	r1, #101	; 0x65
 800983e:	f103 33ff 	add.w	r3, r3, #4294967295
 8009842:	f106 35ff 	add.w	r5, r6, #4294967295
 8009846:	6123      	str	r3, [r4, #16]
 8009848:	d00c      	beq.n	8009864 <_scanf_float+0x34c>
 800984a:	2945      	cmp	r1, #69	; 0x45
 800984c:	d00a      	beq.n	8009864 <_scanf_float+0x34c>
 800984e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009852:	463a      	mov	r2, r7
 8009854:	4640      	mov	r0, r8
 8009856:	4798      	blx	r3
 8009858:	6923      	ldr	r3, [r4, #16]
 800985a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800985e:	3b01      	subs	r3, #1
 8009860:	1eb5      	subs	r5, r6, #2
 8009862:	6123      	str	r3, [r4, #16]
 8009864:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009868:	463a      	mov	r2, r7
 800986a:	4640      	mov	r0, r8
 800986c:	4798      	blx	r3
 800986e:	462e      	mov	r6, r5
 8009870:	6825      	ldr	r5, [r4, #0]
 8009872:	f015 0510 	ands.w	r5, r5, #16
 8009876:	d158      	bne.n	800992a <_scanf_float+0x412>
 8009878:	7035      	strb	r5, [r6, #0]
 800987a:	6823      	ldr	r3, [r4, #0]
 800987c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009880:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009884:	d11c      	bne.n	80098c0 <_scanf_float+0x3a8>
 8009886:	9b01      	ldr	r3, [sp, #4]
 8009888:	454b      	cmp	r3, r9
 800988a:	eba3 0209 	sub.w	r2, r3, r9
 800988e:	d124      	bne.n	80098da <_scanf_float+0x3c2>
 8009890:	2200      	movs	r2, #0
 8009892:	4659      	mov	r1, fp
 8009894:	4640      	mov	r0, r8
 8009896:	f001 f849 	bl	800a92c <_strtod_r>
 800989a:	9b03      	ldr	r3, [sp, #12]
 800989c:	6821      	ldr	r1, [r4, #0]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f011 0f02 	tst.w	r1, #2
 80098a4:	ec57 6b10 	vmov	r6, r7, d0
 80098a8:	f103 0204 	add.w	r2, r3, #4
 80098ac:	d020      	beq.n	80098f0 <_scanf_float+0x3d8>
 80098ae:	9903      	ldr	r1, [sp, #12]
 80098b0:	600a      	str	r2, [r1, #0]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	e9c3 6700 	strd	r6, r7, [r3]
 80098b8:	68e3      	ldr	r3, [r4, #12]
 80098ba:	3301      	adds	r3, #1
 80098bc:	60e3      	str	r3, [r4, #12]
 80098be:	e66c      	b.n	800959a <_scanf_float+0x82>
 80098c0:	9b04      	ldr	r3, [sp, #16]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d0e4      	beq.n	8009890 <_scanf_float+0x378>
 80098c6:	9905      	ldr	r1, [sp, #20]
 80098c8:	230a      	movs	r3, #10
 80098ca:	462a      	mov	r2, r5
 80098cc:	3101      	adds	r1, #1
 80098ce:	4640      	mov	r0, r8
 80098d0:	f001 f8b6 	bl	800aa40 <_strtol_r>
 80098d4:	9b04      	ldr	r3, [sp, #16]
 80098d6:	9e05      	ldr	r6, [sp, #20]
 80098d8:	1ac2      	subs	r2, r0, r3
 80098da:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80098de:	429e      	cmp	r6, r3
 80098e0:	bf28      	it	cs
 80098e2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80098e6:	4912      	ldr	r1, [pc, #72]	; (8009930 <_scanf_float+0x418>)
 80098e8:	4630      	mov	r0, r6
 80098ea:	f000 f93d 	bl	8009b68 <siprintf>
 80098ee:	e7cf      	b.n	8009890 <_scanf_float+0x378>
 80098f0:	f011 0f04 	tst.w	r1, #4
 80098f4:	9903      	ldr	r1, [sp, #12]
 80098f6:	600a      	str	r2, [r1, #0]
 80098f8:	d1db      	bne.n	80098b2 <_scanf_float+0x39a>
 80098fa:	f8d3 8000 	ldr.w	r8, [r3]
 80098fe:	ee10 2a10 	vmov	r2, s0
 8009902:	ee10 0a10 	vmov	r0, s0
 8009906:	463b      	mov	r3, r7
 8009908:	4639      	mov	r1, r7
 800990a:	f7f7 f90f 	bl	8000b2c <__aeabi_dcmpun>
 800990e:	b128      	cbz	r0, 800991c <_scanf_float+0x404>
 8009910:	4808      	ldr	r0, [pc, #32]	; (8009934 <_scanf_float+0x41c>)
 8009912:	f000 f8ef 	bl	8009af4 <nanf>
 8009916:	ed88 0a00 	vstr	s0, [r8]
 800991a:	e7cd      	b.n	80098b8 <_scanf_float+0x3a0>
 800991c:	4630      	mov	r0, r6
 800991e:	4639      	mov	r1, r7
 8009920:	f7f7 f962 	bl	8000be8 <__aeabi_d2f>
 8009924:	f8c8 0000 	str.w	r0, [r8]
 8009928:	e7c6      	b.n	80098b8 <_scanf_float+0x3a0>
 800992a:	2500      	movs	r5, #0
 800992c:	e635      	b.n	800959a <_scanf_float+0x82>
 800992e:	bf00      	nop
 8009930:	0800f48e 	.word	0x0800f48e
 8009934:	0800f923 	.word	0x0800f923

08009938 <iprintf>:
 8009938:	b40f      	push	{r0, r1, r2, r3}
 800993a:	4b0a      	ldr	r3, [pc, #40]	; (8009964 <iprintf+0x2c>)
 800993c:	b513      	push	{r0, r1, r4, lr}
 800993e:	681c      	ldr	r4, [r3, #0]
 8009940:	b124      	cbz	r4, 800994c <iprintf+0x14>
 8009942:	69a3      	ldr	r3, [r4, #24]
 8009944:	b913      	cbnz	r3, 800994c <iprintf+0x14>
 8009946:	4620      	mov	r0, r4
 8009948:	f002 f83c 	bl	800b9c4 <__sinit>
 800994c:	ab05      	add	r3, sp, #20
 800994e:	9a04      	ldr	r2, [sp, #16]
 8009950:	68a1      	ldr	r1, [r4, #8]
 8009952:	9301      	str	r3, [sp, #4]
 8009954:	4620      	mov	r0, r4
 8009956:	f003 fda5 	bl	800d4a4 <_vfiprintf_r>
 800995a:	b002      	add	sp, #8
 800995c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009960:	b004      	add	sp, #16
 8009962:	4770      	bx	lr
 8009964:	20000014 	.word	0x20000014

08009968 <setvbuf>:
 8009968:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800996c:	461d      	mov	r5, r3
 800996e:	4b5d      	ldr	r3, [pc, #372]	; (8009ae4 <setvbuf+0x17c>)
 8009970:	681f      	ldr	r7, [r3, #0]
 8009972:	4604      	mov	r4, r0
 8009974:	460e      	mov	r6, r1
 8009976:	4690      	mov	r8, r2
 8009978:	b127      	cbz	r7, 8009984 <setvbuf+0x1c>
 800997a:	69bb      	ldr	r3, [r7, #24]
 800997c:	b913      	cbnz	r3, 8009984 <setvbuf+0x1c>
 800997e:	4638      	mov	r0, r7
 8009980:	f002 f820 	bl	800b9c4 <__sinit>
 8009984:	4b58      	ldr	r3, [pc, #352]	; (8009ae8 <setvbuf+0x180>)
 8009986:	429c      	cmp	r4, r3
 8009988:	d167      	bne.n	8009a5a <setvbuf+0xf2>
 800998a:	687c      	ldr	r4, [r7, #4]
 800998c:	f1b8 0f02 	cmp.w	r8, #2
 8009990:	d006      	beq.n	80099a0 <setvbuf+0x38>
 8009992:	f1b8 0f01 	cmp.w	r8, #1
 8009996:	f200 809f 	bhi.w	8009ad8 <setvbuf+0x170>
 800999a:	2d00      	cmp	r5, #0
 800999c:	f2c0 809c 	blt.w	8009ad8 <setvbuf+0x170>
 80099a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80099a2:	07db      	lsls	r3, r3, #31
 80099a4:	d405      	bmi.n	80099b2 <setvbuf+0x4a>
 80099a6:	89a3      	ldrh	r3, [r4, #12]
 80099a8:	0598      	lsls	r0, r3, #22
 80099aa:	d402      	bmi.n	80099b2 <setvbuf+0x4a>
 80099ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099ae:	f002 fc1a 	bl	800c1e6 <__retarget_lock_acquire_recursive>
 80099b2:	4621      	mov	r1, r4
 80099b4:	4638      	mov	r0, r7
 80099b6:	f001 ff71 	bl	800b89c <_fflush_r>
 80099ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80099bc:	b141      	cbz	r1, 80099d0 <setvbuf+0x68>
 80099be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80099c2:	4299      	cmp	r1, r3
 80099c4:	d002      	beq.n	80099cc <setvbuf+0x64>
 80099c6:	4638      	mov	r0, r7
 80099c8:	f003 f96a 	bl	800cca0 <_free_r>
 80099cc:	2300      	movs	r3, #0
 80099ce:	6363      	str	r3, [r4, #52]	; 0x34
 80099d0:	2300      	movs	r3, #0
 80099d2:	61a3      	str	r3, [r4, #24]
 80099d4:	6063      	str	r3, [r4, #4]
 80099d6:	89a3      	ldrh	r3, [r4, #12]
 80099d8:	0619      	lsls	r1, r3, #24
 80099da:	d503      	bpl.n	80099e4 <setvbuf+0x7c>
 80099dc:	6921      	ldr	r1, [r4, #16]
 80099de:	4638      	mov	r0, r7
 80099e0:	f003 f95e 	bl	800cca0 <_free_r>
 80099e4:	89a3      	ldrh	r3, [r4, #12]
 80099e6:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80099ea:	f023 0303 	bic.w	r3, r3, #3
 80099ee:	f1b8 0f02 	cmp.w	r8, #2
 80099f2:	81a3      	strh	r3, [r4, #12]
 80099f4:	d06c      	beq.n	8009ad0 <setvbuf+0x168>
 80099f6:	ab01      	add	r3, sp, #4
 80099f8:	466a      	mov	r2, sp
 80099fa:	4621      	mov	r1, r4
 80099fc:	4638      	mov	r0, r7
 80099fe:	f002 fc07 	bl	800c210 <__swhatbuf_r>
 8009a02:	89a3      	ldrh	r3, [r4, #12]
 8009a04:	4318      	orrs	r0, r3
 8009a06:	81a0      	strh	r0, [r4, #12]
 8009a08:	2d00      	cmp	r5, #0
 8009a0a:	d130      	bne.n	8009a6e <setvbuf+0x106>
 8009a0c:	9d00      	ldr	r5, [sp, #0]
 8009a0e:	4628      	mov	r0, r5
 8009a10:	f002 fc62 	bl	800c2d8 <malloc>
 8009a14:	4606      	mov	r6, r0
 8009a16:	2800      	cmp	r0, #0
 8009a18:	d155      	bne.n	8009ac6 <setvbuf+0x15e>
 8009a1a:	f8dd 9000 	ldr.w	r9, [sp]
 8009a1e:	45a9      	cmp	r9, r5
 8009a20:	d14a      	bne.n	8009ab8 <setvbuf+0x150>
 8009a22:	f04f 35ff 	mov.w	r5, #4294967295
 8009a26:	2200      	movs	r2, #0
 8009a28:	60a2      	str	r2, [r4, #8]
 8009a2a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8009a2e:	6022      	str	r2, [r4, #0]
 8009a30:	6122      	str	r2, [r4, #16]
 8009a32:	2201      	movs	r2, #1
 8009a34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a38:	6162      	str	r2, [r4, #20]
 8009a3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009a3c:	f043 0302 	orr.w	r3, r3, #2
 8009a40:	07d2      	lsls	r2, r2, #31
 8009a42:	81a3      	strh	r3, [r4, #12]
 8009a44:	d405      	bmi.n	8009a52 <setvbuf+0xea>
 8009a46:	f413 7f00 	tst.w	r3, #512	; 0x200
 8009a4a:	d102      	bne.n	8009a52 <setvbuf+0xea>
 8009a4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a4e:	f002 fbcb 	bl	800c1e8 <__retarget_lock_release_recursive>
 8009a52:	4628      	mov	r0, r5
 8009a54:	b003      	add	sp, #12
 8009a56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a5a:	4b24      	ldr	r3, [pc, #144]	; (8009aec <setvbuf+0x184>)
 8009a5c:	429c      	cmp	r4, r3
 8009a5e:	d101      	bne.n	8009a64 <setvbuf+0xfc>
 8009a60:	68bc      	ldr	r4, [r7, #8]
 8009a62:	e793      	b.n	800998c <setvbuf+0x24>
 8009a64:	4b22      	ldr	r3, [pc, #136]	; (8009af0 <setvbuf+0x188>)
 8009a66:	429c      	cmp	r4, r3
 8009a68:	bf08      	it	eq
 8009a6a:	68fc      	ldreq	r4, [r7, #12]
 8009a6c:	e78e      	b.n	800998c <setvbuf+0x24>
 8009a6e:	2e00      	cmp	r6, #0
 8009a70:	d0cd      	beq.n	8009a0e <setvbuf+0xa6>
 8009a72:	69bb      	ldr	r3, [r7, #24]
 8009a74:	b913      	cbnz	r3, 8009a7c <setvbuf+0x114>
 8009a76:	4638      	mov	r0, r7
 8009a78:	f001 ffa4 	bl	800b9c4 <__sinit>
 8009a7c:	f1b8 0f01 	cmp.w	r8, #1
 8009a80:	bf08      	it	eq
 8009a82:	89a3      	ldrheq	r3, [r4, #12]
 8009a84:	6026      	str	r6, [r4, #0]
 8009a86:	bf04      	itt	eq
 8009a88:	f043 0301 	orreq.w	r3, r3, #1
 8009a8c:	81a3      	strheq	r3, [r4, #12]
 8009a8e:	89a2      	ldrh	r2, [r4, #12]
 8009a90:	f012 0308 	ands.w	r3, r2, #8
 8009a94:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8009a98:	d01c      	beq.n	8009ad4 <setvbuf+0x16c>
 8009a9a:	07d3      	lsls	r3, r2, #31
 8009a9c:	bf41      	itttt	mi
 8009a9e:	2300      	movmi	r3, #0
 8009aa0:	426d      	negmi	r5, r5
 8009aa2:	60a3      	strmi	r3, [r4, #8]
 8009aa4:	61a5      	strmi	r5, [r4, #24]
 8009aa6:	bf58      	it	pl
 8009aa8:	60a5      	strpl	r5, [r4, #8]
 8009aaa:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8009aac:	f015 0501 	ands.w	r5, r5, #1
 8009ab0:	d115      	bne.n	8009ade <setvbuf+0x176>
 8009ab2:	f412 7f00 	tst.w	r2, #512	; 0x200
 8009ab6:	e7c8      	b.n	8009a4a <setvbuf+0xe2>
 8009ab8:	4648      	mov	r0, r9
 8009aba:	f002 fc0d 	bl	800c2d8 <malloc>
 8009abe:	4606      	mov	r6, r0
 8009ac0:	2800      	cmp	r0, #0
 8009ac2:	d0ae      	beq.n	8009a22 <setvbuf+0xba>
 8009ac4:	464d      	mov	r5, r9
 8009ac6:	89a3      	ldrh	r3, [r4, #12]
 8009ac8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009acc:	81a3      	strh	r3, [r4, #12]
 8009ace:	e7d0      	b.n	8009a72 <setvbuf+0x10a>
 8009ad0:	2500      	movs	r5, #0
 8009ad2:	e7a8      	b.n	8009a26 <setvbuf+0xbe>
 8009ad4:	60a3      	str	r3, [r4, #8]
 8009ad6:	e7e8      	b.n	8009aaa <setvbuf+0x142>
 8009ad8:	f04f 35ff 	mov.w	r5, #4294967295
 8009adc:	e7b9      	b.n	8009a52 <setvbuf+0xea>
 8009ade:	2500      	movs	r5, #0
 8009ae0:	e7b7      	b.n	8009a52 <setvbuf+0xea>
 8009ae2:	bf00      	nop
 8009ae4:	20000014 	.word	0x20000014
 8009ae8:	0800f6a0 	.word	0x0800f6a0
 8009aec:	0800f6c0 	.word	0x0800f6c0
 8009af0:	0800f680 	.word	0x0800f680

08009af4 <nanf>:
 8009af4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009afc <nanf+0x8>
 8009af8:	4770      	bx	lr
 8009afa:	bf00      	nop
 8009afc:	7fc00000 	.word	0x7fc00000

08009b00 <sniprintf>:
 8009b00:	b40c      	push	{r2, r3}
 8009b02:	b530      	push	{r4, r5, lr}
 8009b04:	4b17      	ldr	r3, [pc, #92]	; (8009b64 <sniprintf+0x64>)
 8009b06:	1e0c      	subs	r4, r1, #0
 8009b08:	681d      	ldr	r5, [r3, #0]
 8009b0a:	b09d      	sub	sp, #116	; 0x74
 8009b0c:	da08      	bge.n	8009b20 <sniprintf+0x20>
 8009b0e:	238b      	movs	r3, #139	; 0x8b
 8009b10:	602b      	str	r3, [r5, #0]
 8009b12:	f04f 30ff 	mov.w	r0, #4294967295
 8009b16:	b01d      	add	sp, #116	; 0x74
 8009b18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009b1c:	b002      	add	sp, #8
 8009b1e:	4770      	bx	lr
 8009b20:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009b24:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009b28:	bf14      	ite	ne
 8009b2a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009b2e:	4623      	moveq	r3, r4
 8009b30:	9304      	str	r3, [sp, #16]
 8009b32:	9307      	str	r3, [sp, #28]
 8009b34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009b38:	9002      	str	r0, [sp, #8]
 8009b3a:	9006      	str	r0, [sp, #24]
 8009b3c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009b40:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009b42:	ab21      	add	r3, sp, #132	; 0x84
 8009b44:	a902      	add	r1, sp, #8
 8009b46:	4628      	mov	r0, r5
 8009b48:	9301      	str	r3, [sp, #4]
 8009b4a:	f003 f9af 	bl	800ceac <_svfiprintf_r>
 8009b4e:	1c43      	adds	r3, r0, #1
 8009b50:	bfbc      	itt	lt
 8009b52:	238b      	movlt	r3, #139	; 0x8b
 8009b54:	602b      	strlt	r3, [r5, #0]
 8009b56:	2c00      	cmp	r4, #0
 8009b58:	d0dd      	beq.n	8009b16 <sniprintf+0x16>
 8009b5a:	9b02      	ldr	r3, [sp, #8]
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	701a      	strb	r2, [r3, #0]
 8009b60:	e7d9      	b.n	8009b16 <sniprintf+0x16>
 8009b62:	bf00      	nop
 8009b64:	20000014 	.word	0x20000014

08009b68 <siprintf>:
 8009b68:	b40e      	push	{r1, r2, r3}
 8009b6a:	b500      	push	{lr}
 8009b6c:	b09c      	sub	sp, #112	; 0x70
 8009b6e:	ab1d      	add	r3, sp, #116	; 0x74
 8009b70:	9002      	str	r0, [sp, #8]
 8009b72:	9006      	str	r0, [sp, #24]
 8009b74:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009b78:	4809      	ldr	r0, [pc, #36]	; (8009ba0 <siprintf+0x38>)
 8009b7a:	9107      	str	r1, [sp, #28]
 8009b7c:	9104      	str	r1, [sp, #16]
 8009b7e:	4909      	ldr	r1, [pc, #36]	; (8009ba4 <siprintf+0x3c>)
 8009b80:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b84:	9105      	str	r1, [sp, #20]
 8009b86:	6800      	ldr	r0, [r0, #0]
 8009b88:	9301      	str	r3, [sp, #4]
 8009b8a:	a902      	add	r1, sp, #8
 8009b8c:	f003 f98e 	bl	800ceac <_svfiprintf_r>
 8009b90:	9b02      	ldr	r3, [sp, #8]
 8009b92:	2200      	movs	r2, #0
 8009b94:	701a      	strb	r2, [r3, #0]
 8009b96:	b01c      	add	sp, #112	; 0x70
 8009b98:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b9c:	b003      	add	sp, #12
 8009b9e:	4770      	bx	lr
 8009ba0:	20000014 	.word	0x20000014
 8009ba4:	ffff0208 	.word	0xffff0208

08009ba8 <siscanf>:
 8009ba8:	b40e      	push	{r1, r2, r3}
 8009baa:	b510      	push	{r4, lr}
 8009bac:	b09f      	sub	sp, #124	; 0x7c
 8009bae:	ac21      	add	r4, sp, #132	; 0x84
 8009bb0:	f44f 7101 	mov.w	r1, #516	; 0x204
 8009bb4:	f854 2b04 	ldr.w	r2, [r4], #4
 8009bb8:	9201      	str	r2, [sp, #4]
 8009bba:	f8ad 101c 	strh.w	r1, [sp, #28]
 8009bbe:	9004      	str	r0, [sp, #16]
 8009bc0:	9008      	str	r0, [sp, #32]
 8009bc2:	f7f6 fb55 	bl	8000270 <strlen>
 8009bc6:	4b0c      	ldr	r3, [pc, #48]	; (8009bf8 <siscanf+0x50>)
 8009bc8:	9005      	str	r0, [sp, #20]
 8009bca:	9009      	str	r0, [sp, #36]	; 0x24
 8009bcc:	930d      	str	r3, [sp, #52]	; 0x34
 8009bce:	480b      	ldr	r0, [pc, #44]	; (8009bfc <siscanf+0x54>)
 8009bd0:	9a01      	ldr	r2, [sp, #4]
 8009bd2:	6800      	ldr	r0, [r0, #0]
 8009bd4:	9403      	str	r4, [sp, #12]
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	9311      	str	r3, [sp, #68]	; 0x44
 8009bda:	9316      	str	r3, [sp, #88]	; 0x58
 8009bdc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009be0:	f8ad 301e 	strh.w	r3, [sp, #30]
 8009be4:	a904      	add	r1, sp, #16
 8009be6:	4623      	mov	r3, r4
 8009be8:	f003 faba 	bl	800d160 <__ssvfiscanf_r>
 8009bec:	b01f      	add	sp, #124	; 0x7c
 8009bee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009bf2:	b003      	add	sp, #12
 8009bf4:	4770      	bx	lr
 8009bf6:	bf00      	nop
 8009bf8:	08009c23 	.word	0x08009c23
 8009bfc:	20000014 	.word	0x20000014

08009c00 <__sread>:
 8009c00:	b510      	push	{r4, lr}
 8009c02:	460c      	mov	r4, r1
 8009c04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c08:	f003 fec8 	bl	800d99c <_read_r>
 8009c0c:	2800      	cmp	r0, #0
 8009c0e:	bfab      	itete	ge
 8009c10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009c12:	89a3      	ldrhlt	r3, [r4, #12]
 8009c14:	181b      	addge	r3, r3, r0
 8009c16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009c1a:	bfac      	ite	ge
 8009c1c:	6563      	strge	r3, [r4, #84]	; 0x54
 8009c1e:	81a3      	strhlt	r3, [r4, #12]
 8009c20:	bd10      	pop	{r4, pc}

08009c22 <__seofread>:
 8009c22:	2000      	movs	r0, #0
 8009c24:	4770      	bx	lr

08009c26 <__swrite>:
 8009c26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c2a:	461f      	mov	r7, r3
 8009c2c:	898b      	ldrh	r3, [r1, #12]
 8009c2e:	05db      	lsls	r3, r3, #23
 8009c30:	4605      	mov	r5, r0
 8009c32:	460c      	mov	r4, r1
 8009c34:	4616      	mov	r6, r2
 8009c36:	d505      	bpl.n	8009c44 <__swrite+0x1e>
 8009c38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c3c:	2302      	movs	r3, #2
 8009c3e:	2200      	movs	r2, #0
 8009c40:	f002 fad4 	bl	800c1ec <_lseek_r>
 8009c44:	89a3      	ldrh	r3, [r4, #12]
 8009c46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009c4e:	81a3      	strh	r3, [r4, #12]
 8009c50:	4632      	mov	r2, r6
 8009c52:	463b      	mov	r3, r7
 8009c54:	4628      	mov	r0, r5
 8009c56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c5a:	f000 befd 	b.w	800aa58 <_write_r>

08009c5e <__sseek>:
 8009c5e:	b510      	push	{r4, lr}
 8009c60:	460c      	mov	r4, r1
 8009c62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c66:	f002 fac1 	bl	800c1ec <_lseek_r>
 8009c6a:	1c43      	adds	r3, r0, #1
 8009c6c:	89a3      	ldrh	r3, [r4, #12]
 8009c6e:	bf15      	itete	ne
 8009c70:	6560      	strne	r0, [r4, #84]	; 0x54
 8009c72:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009c76:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009c7a:	81a3      	strheq	r3, [r4, #12]
 8009c7c:	bf18      	it	ne
 8009c7e:	81a3      	strhne	r3, [r4, #12]
 8009c80:	bd10      	pop	{r4, pc}

08009c82 <__sclose>:
 8009c82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c86:	f000 bef9 	b.w	800aa7c <_close_r>

08009c8a <strncmp>:
 8009c8a:	b510      	push	{r4, lr}
 8009c8c:	b16a      	cbz	r2, 8009caa <strncmp+0x20>
 8009c8e:	3901      	subs	r1, #1
 8009c90:	1884      	adds	r4, r0, r2
 8009c92:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009c96:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	d103      	bne.n	8009ca6 <strncmp+0x1c>
 8009c9e:	42a0      	cmp	r0, r4
 8009ca0:	d001      	beq.n	8009ca6 <strncmp+0x1c>
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d1f5      	bne.n	8009c92 <strncmp+0x8>
 8009ca6:	1a98      	subs	r0, r3, r2
 8009ca8:	bd10      	pop	{r4, pc}
 8009caa:	4610      	mov	r0, r2
 8009cac:	e7fc      	b.n	8009ca8 <strncmp+0x1e>

08009cae <strstr>:
 8009cae:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009cb0:	780c      	ldrb	r4, [r1, #0]
 8009cb2:	b164      	cbz	r4, 8009cce <strstr+0x20>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	781a      	ldrb	r2, [r3, #0]
 8009cb8:	4618      	mov	r0, r3
 8009cba:	1c5e      	adds	r6, r3, #1
 8009cbc:	b90a      	cbnz	r2, 8009cc2 <strstr+0x14>
 8009cbe:	4610      	mov	r0, r2
 8009cc0:	e005      	b.n	8009cce <strstr+0x20>
 8009cc2:	4294      	cmp	r4, r2
 8009cc4:	d108      	bne.n	8009cd8 <strstr+0x2a>
 8009cc6:	460d      	mov	r5, r1
 8009cc8:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8009ccc:	b902      	cbnz	r2, 8009cd0 <strstr+0x22>
 8009cce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009cd0:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8009cd4:	4297      	cmp	r7, r2
 8009cd6:	d0f7      	beq.n	8009cc8 <strstr+0x1a>
 8009cd8:	4633      	mov	r3, r6
 8009cda:	e7ec      	b.n	8009cb6 <strstr+0x8>

08009cdc <sulp>:
 8009cdc:	b570      	push	{r4, r5, r6, lr}
 8009cde:	4604      	mov	r4, r0
 8009ce0:	460d      	mov	r5, r1
 8009ce2:	ec45 4b10 	vmov	d0, r4, r5
 8009ce6:	4616      	mov	r6, r2
 8009ce8:	f002 fe7c 	bl	800c9e4 <__ulp>
 8009cec:	ec51 0b10 	vmov	r0, r1, d0
 8009cf0:	b17e      	cbz	r6, 8009d12 <sulp+0x36>
 8009cf2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009cf6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	dd09      	ble.n	8009d12 <sulp+0x36>
 8009cfe:	051b      	lsls	r3, r3, #20
 8009d00:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009d04:	2400      	movs	r4, #0
 8009d06:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009d0a:	4622      	mov	r2, r4
 8009d0c:	462b      	mov	r3, r5
 8009d0e:	f7f6 fc73 	bl	80005f8 <__aeabi_dmul>
 8009d12:	bd70      	pop	{r4, r5, r6, pc}
 8009d14:	0000      	movs	r0, r0
	...

08009d18 <_strtod_l>:
 8009d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d1c:	b0a3      	sub	sp, #140	; 0x8c
 8009d1e:	461f      	mov	r7, r3
 8009d20:	2300      	movs	r3, #0
 8009d22:	931e      	str	r3, [sp, #120]	; 0x78
 8009d24:	4ba4      	ldr	r3, [pc, #656]	; (8009fb8 <_strtod_l+0x2a0>)
 8009d26:	9219      	str	r2, [sp, #100]	; 0x64
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	9307      	str	r3, [sp, #28]
 8009d2c:	4604      	mov	r4, r0
 8009d2e:	4618      	mov	r0, r3
 8009d30:	4688      	mov	r8, r1
 8009d32:	f7f6 fa9d 	bl	8000270 <strlen>
 8009d36:	f04f 0a00 	mov.w	sl, #0
 8009d3a:	4605      	mov	r5, r0
 8009d3c:	f04f 0b00 	mov.w	fp, #0
 8009d40:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8009d44:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009d46:	781a      	ldrb	r2, [r3, #0]
 8009d48:	2a2b      	cmp	r2, #43	; 0x2b
 8009d4a:	d04c      	beq.n	8009de6 <_strtod_l+0xce>
 8009d4c:	d839      	bhi.n	8009dc2 <_strtod_l+0xaa>
 8009d4e:	2a0d      	cmp	r2, #13
 8009d50:	d832      	bhi.n	8009db8 <_strtod_l+0xa0>
 8009d52:	2a08      	cmp	r2, #8
 8009d54:	d832      	bhi.n	8009dbc <_strtod_l+0xa4>
 8009d56:	2a00      	cmp	r2, #0
 8009d58:	d03c      	beq.n	8009dd4 <_strtod_l+0xbc>
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	930e      	str	r3, [sp, #56]	; 0x38
 8009d5e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8009d60:	7833      	ldrb	r3, [r6, #0]
 8009d62:	2b30      	cmp	r3, #48	; 0x30
 8009d64:	f040 80b4 	bne.w	8009ed0 <_strtod_l+0x1b8>
 8009d68:	7873      	ldrb	r3, [r6, #1]
 8009d6a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009d6e:	2b58      	cmp	r3, #88	; 0x58
 8009d70:	d16c      	bne.n	8009e4c <_strtod_l+0x134>
 8009d72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d74:	9301      	str	r3, [sp, #4]
 8009d76:	ab1e      	add	r3, sp, #120	; 0x78
 8009d78:	9702      	str	r7, [sp, #8]
 8009d7a:	9300      	str	r3, [sp, #0]
 8009d7c:	4a8f      	ldr	r2, [pc, #572]	; (8009fbc <_strtod_l+0x2a4>)
 8009d7e:	ab1f      	add	r3, sp, #124	; 0x7c
 8009d80:	a91d      	add	r1, sp, #116	; 0x74
 8009d82:	4620      	mov	r0, r4
 8009d84:	f001 ff22 	bl	800bbcc <__gethex>
 8009d88:	f010 0707 	ands.w	r7, r0, #7
 8009d8c:	4605      	mov	r5, r0
 8009d8e:	d005      	beq.n	8009d9c <_strtod_l+0x84>
 8009d90:	2f06      	cmp	r7, #6
 8009d92:	d12a      	bne.n	8009dea <_strtod_l+0xd2>
 8009d94:	3601      	adds	r6, #1
 8009d96:	2300      	movs	r3, #0
 8009d98:	961d      	str	r6, [sp, #116]	; 0x74
 8009d9a:	930e      	str	r3, [sp, #56]	; 0x38
 8009d9c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	f040 8596 	bne.w	800a8d0 <_strtod_l+0xbb8>
 8009da4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009da6:	b1db      	cbz	r3, 8009de0 <_strtod_l+0xc8>
 8009da8:	4652      	mov	r2, sl
 8009daa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009dae:	ec43 2b10 	vmov	d0, r2, r3
 8009db2:	b023      	add	sp, #140	; 0x8c
 8009db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009db8:	2a20      	cmp	r2, #32
 8009dba:	d1ce      	bne.n	8009d5a <_strtod_l+0x42>
 8009dbc:	3301      	adds	r3, #1
 8009dbe:	931d      	str	r3, [sp, #116]	; 0x74
 8009dc0:	e7c0      	b.n	8009d44 <_strtod_l+0x2c>
 8009dc2:	2a2d      	cmp	r2, #45	; 0x2d
 8009dc4:	d1c9      	bne.n	8009d5a <_strtod_l+0x42>
 8009dc6:	2201      	movs	r2, #1
 8009dc8:	920e      	str	r2, [sp, #56]	; 0x38
 8009dca:	1c5a      	adds	r2, r3, #1
 8009dcc:	921d      	str	r2, [sp, #116]	; 0x74
 8009dce:	785b      	ldrb	r3, [r3, #1]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d1c4      	bne.n	8009d5e <_strtod_l+0x46>
 8009dd4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009dd6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	f040 8576 	bne.w	800a8cc <_strtod_l+0xbb4>
 8009de0:	4652      	mov	r2, sl
 8009de2:	465b      	mov	r3, fp
 8009de4:	e7e3      	b.n	8009dae <_strtod_l+0x96>
 8009de6:	2200      	movs	r2, #0
 8009de8:	e7ee      	b.n	8009dc8 <_strtod_l+0xb0>
 8009dea:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009dec:	b13a      	cbz	r2, 8009dfe <_strtod_l+0xe6>
 8009dee:	2135      	movs	r1, #53	; 0x35
 8009df0:	a820      	add	r0, sp, #128	; 0x80
 8009df2:	f002 ff02 	bl	800cbfa <__copybits>
 8009df6:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009df8:	4620      	mov	r0, r4
 8009dfa:	f002 fac7 	bl	800c38c <_Bfree>
 8009dfe:	3f01      	subs	r7, #1
 8009e00:	2f05      	cmp	r7, #5
 8009e02:	d807      	bhi.n	8009e14 <_strtod_l+0xfc>
 8009e04:	e8df f007 	tbb	[pc, r7]
 8009e08:	1d180b0e 	.word	0x1d180b0e
 8009e0c:	030e      	.short	0x030e
 8009e0e:	f04f 0b00 	mov.w	fp, #0
 8009e12:	46da      	mov	sl, fp
 8009e14:	0728      	lsls	r0, r5, #28
 8009e16:	d5c1      	bpl.n	8009d9c <_strtod_l+0x84>
 8009e18:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8009e1c:	e7be      	b.n	8009d9c <_strtod_l+0x84>
 8009e1e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8009e22:	e7f7      	b.n	8009e14 <_strtod_l+0xfc>
 8009e24:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8009e28:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8009e2a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009e2e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009e32:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009e36:	e7ed      	b.n	8009e14 <_strtod_l+0xfc>
 8009e38:	f8df b184 	ldr.w	fp, [pc, #388]	; 8009fc0 <_strtod_l+0x2a8>
 8009e3c:	f04f 0a00 	mov.w	sl, #0
 8009e40:	e7e8      	b.n	8009e14 <_strtod_l+0xfc>
 8009e42:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8009e46:	f04f 3aff 	mov.w	sl, #4294967295
 8009e4a:	e7e3      	b.n	8009e14 <_strtod_l+0xfc>
 8009e4c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009e4e:	1c5a      	adds	r2, r3, #1
 8009e50:	921d      	str	r2, [sp, #116]	; 0x74
 8009e52:	785b      	ldrb	r3, [r3, #1]
 8009e54:	2b30      	cmp	r3, #48	; 0x30
 8009e56:	d0f9      	beq.n	8009e4c <_strtod_l+0x134>
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d09f      	beq.n	8009d9c <_strtod_l+0x84>
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	f04f 0900 	mov.w	r9, #0
 8009e62:	9304      	str	r3, [sp, #16]
 8009e64:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009e66:	930a      	str	r3, [sp, #40]	; 0x28
 8009e68:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009e6c:	464f      	mov	r7, r9
 8009e6e:	220a      	movs	r2, #10
 8009e70:	981d      	ldr	r0, [sp, #116]	; 0x74
 8009e72:	7806      	ldrb	r6, [r0, #0]
 8009e74:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009e78:	b2d9      	uxtb	r1, r3
 8009e7a:	2909      	cmp	r1, #9
 8009e7c:	d92a      	bls.n	8009ed4 <_strtod_l+0x1bc>
 8009e7e:	9907      	ldr	r1, [sp, #28]
 8009e80:	462a      	mov	r2, r5
 8009e82:	f7ff ff02 	bl	8009c8a <strncmp>
 8009e86:	b398      	cbz	r0, 8009ef0 <_strtod_l+0x1d8>
 8009e88:	2000      	movs	r0, #0
 8009e8a:	4633      	mov	r3, r6
 8009e8c:	463d      	mov	r5, r7
 8009e8e:	9007      	str	r0, [sp, #28]
 8009e90:	4602      	mov	r2, r0
 8009e92:	2b65      	cmp	r3, #101	; 0x65
 8009e94:	d001      	beq.n	8009e9a <_strtod_l+0x182>
 8009e96:	2b45      	cmp	r3, #69	; 0x45
 8009e98:	d118      	bne.n	8009ecc <_strtod_l+0x1b4>
 8009e9a:	b91d      	cbnz	r5, 8009ea4 <_strtod_l+0x18c>
 8009e9c:	9b04      	ldr	r3, [sp, #16]
 8009e9e:	4303      	orrs	r3, r0
 8009ea0:	d098      	beq.n	8009dd4 <_strtod_l+0xbc>
 8009ea2:	2500      	movs	r5, #0
 8009ea4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8009ea8:	f108 0301 	add.w	r3, r8, #1
 8009eac:	931d      	str	r3, [sp, #116]	; 0x74
 8009eae:	f898 3001 	ldrb.w	r3, [r8, #1]
 8009eb2:	2b2b      	cmp	r3, #43	; 0x2b
 8009eb4:	d075      	beq.n	8009fa2 <_strtod_l+0x28a>
 8009eb6:	2b2d      	cmp	r3, #45	; 0x2d
 8009eb8:	d07b      	beq.n	8009fb2 <_strtod_l+0x29a>
 8009eba:	f04f 0c00 	mov.w	ip, #0
 8009ebe:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8009ec2:	2909      	cmp	r1, #9
 8009ec4:	f240 8082 	bls.w	8009fcc <_strtod_l+0x2b4>
 8009ec8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8009ecc:	2600      	movs	r6, #0
 8009ece:	e09d      	b.n	800a00c <_strtod_l+0x2f4>
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	e7c4      	b.n	8009e5e <_strtod_l+0x146>
 8009ed4:	2f08      	cmp	r7, #8
 8009ed6:	bfd8      	it	le
 8009ed8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8009eda:	f100 0001 	add.w	r0, r0, #1
 8009ede:	bfda      	itte	le
 8009ee0:	fb02 3301 	mlale	r3, r2, r1, r3
 8009ee4:	9309      	strle	r3, [sp, #36]	; 0x24
 8009ee6:	fb02 3909 	mlagt	r9, r2, r9, r3
 8009eea:	3701      	adds	r7, #1
 8009eec:	901d      	str	r0, [sp, #116]	; 0x74
 8009eee:	e7bf      	b.n	8009e70 <_strtod_l+0x158>
 8009ef0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009ef2:	195a      	adds	r2, r3, r5
 8009ef4:	921d      	str	r2, [sp, #116]	; 0x74
 8009ef6:	5d5b      	ldrb	r3, [r3, r5]
 8009ef8:	2f00      	cmp	r7, #0
 8009efa:	d037      	beq.n	8009f6c <_strtod_l+0x254>
 8009efc:	9007      	str	r0, [sp, #28]
 8009efe:	463d      	mov	r5, r7
 8009f00:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8009f04:	2a09      	cmp	r2, #9
 8009f06:	d912      	bls.n	8009f2e <_strtod_l+0x216>
 8009f08:	2201      	movs	r2, #1
 8009f0a:	e7c2      	b.n	8009e92 <_strtod_l+0x17a>
 8009f0c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009f0e:	1c5a      	adds	r2, r3, #1
 8009f10:	921d      	str	r2, [sp, #116]	; 0x74
 8009f12:	785b      	ldrb	r3, [r3, #1]
 8009f14:	3001      	adds	r0, #1
 8009f16:	2b30      	cmp	r3, #48	; 0x30
 8009f18:	d0f8      	beq.n	8009f0c <_strtod_l+0x1f4>
 8009f1a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8009f1e:	2a08      	cmp	r2, #8
 8009f20:	f200 84db 	bhi.w	800a8da <_strtod_l+0xbc2>
 8009f24:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009f26:	9007      	str	r0, [sp, #28]
 8009f28:	2000      	movs	r0, #0
 8009f2a:	920a      	str	r2, [sp, #40]	; 0x28
 8009f2c:	4605      	mov	r5, r0
 8009f2e:	3b30      	subs	r3, #48	; 0x30
 8009f30:	f100 0201 	add.w	r2, r0, #1
 8009f34:	d014      	beq.n	8009f60 <_strtod_l+0x248>
 8009f36:	9907      	ldr	r1, [sp, #28]
 8009f38:	4411      	add	r1, r2
 8009f3a:	9107      	str	r1, [sp, #28]
 8009f3c:	462a      	mov	r2, r5
 8009f3e:	eb00 0e05 	add.w	lr, r0, r5
 8009f42:	210a      	movs	r1, #10
 8009f44:	4572      	cmp	r2, lr
 8009f46:	d113      	bne.n	8009f70 <_strtod_l+0x258>
 8009f48:	182a      	adds	r2, r5, r0
 8009f4a:	2a08      	cmp	r2, #8
 8009f4c:	f105 0501 	add.w	r5, r5, #1
 8009f50:	4405      	add	r5, r0
 8009f52:	dc1c      	bgt.n	8009f8e <_strtod_l+0x276>
 8009f54:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009f56:	220a      	movs	r2, #10
 8009f58:	fb02 3301 	mla	r3, r2, r1, r3
 8009f5c:	9309      	str	r3, [sp, #36]	; 0x24
 8009f5e:	2200      	movs	r2, #0
 8009f60:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009f62:	1c59      	adds	r1, r3, #1
 8009f64:	911d      	str	r1, [sp, #116]	; 0x74
 8009f66:	785b      	ldrb	r3, [r3, #1]
 8009f68:	4610      	mov	r0, r2
 8009f6a:	e7c9      	b.n	8009f00 <_strtod_l+0x1e8>
 8009f6c:	4638      	mov	r0, r7
 8009f6e:	e7d2      	b.n	8009f16 <_strtod_l+0x1fe>
 8009f70:	2a08      	cmp	r2, #8
 8009f72:	dc04      	bgt.n	8009f7e <_strtod_l+0x266>
 8009f74:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009f76:	434e      	muls	r6, r1
 8009f78:	9609      	str	r6, [sp, #36]	; 0x24
 8009f7a:	3201      	adds	r2, #1
 8009f7c:	e7e2      	b.n	8009f44 <_strtod_l+0x22c>
 8009f7e:	f102 0c01 	add.w	ip, r2, #1
 8009f82:	f1bc 0f10 	cmp.w	ip, #16
 8009f86:	bfd8      	it	le
 8009f88:	fb01 f909 	mulle.w	r9, r1, r9
 8009f8c:	e7f5      	b.n	8009f7a <_strtod_l+0x262>
 8009f8e:	2d10      	cmp	r5, #16
 8009f90:	bfdc      	itt	le
 8009f92:	220a      	movle	r2, #10
 8009f94:	fb02 3909 	mlale	r9, r2, r9, r3
 8009f98:	e7e1      	b.n	8009f5e <_strtod_l+0x246>
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	9307      	str	r3, [sp, #28]
 8009f9e:	2201      	movs	r2, #1
 8009fa0:	e77c      	b.n	8009e9c <_strtod_l+0x184>
 8009fa2:	f04f 0c00 	mov.w	ip, #0
 8009fa6:	f108 0302 	add.w	r3, r8, #2
 8009faa:	931d      	str	r3, [sp, #116]	; 0x74
 8009fac:	f898 3002 	ldrb.w	r3, [r8, #2]
 8009fb0:	e785      	b.n	8009ebe <_strtod_l+0x1a6>
 8009fb2:	f04f 0c01 	mov.w	ip, #1
 8009fb6:	e7f6      	b.n	8009fa6 <_strtod_l+0x28e>
 8009fb8:	0800f74c 	.word	0x0800f74c
 8009fbc:	0800f494 	.word	0x0800f494
 8009fc0:	7ff00000 	.word	0x7ff00000
 8009fc4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009fc6:	1c59      	adds	r1, r3, #1
 8009fc8:	911d      	str	r1, [sp, #116]	; 0x74
 8009fca:	785b      	ldrb	r3, [r3, #1]
 8009fcc:	2b30      	cmp	r3, #48	; 0x30
 8009fce:	d0f9      	beq.n	8009fc4 <_strtod_l+0x2ac>
 8009fd0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8009fd4:	2908      	cmp	r1, #8
 8009fd6:	f63f af79 	bhi.w	8009ecc <_strtod_l+0x1b4>
 8009fda:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8009fde:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009fe0:	9308      	str	r3, [sp, #32]
 8009fe2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009fe4:	1c59      	adds	r1, r3, #1
 8009fe6:	911d      	str	r1, [sp, #116]	; 0x74
 8009fe8:	785b      	ldrb	r3, [r3, #1]
 8009fea:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8009fee:	2e09      	cmp	r6, #9
 8009ff0:	d937      	bls.n	800a062 <_strtod_l+0x34a>
 8009ff2:	9e08      	ldr	r6, [sp, #32]
 8009ff4:	1b89      	subs	r1, r1, r6
 8009ff6:	2908      	cmp	r1, #8
 8009ff8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009ffc:	dc02      	bgt.n	800a004 <_strtod_l+0x2ec>
 8009ffe:	4576      	cmp	r6, lr
 800a000:	bfa8      	it	ge
 800a002:	4676      	movge	r6, lr
 800a004:	f1bc 0f00 	cmp.w	ip, #0
 800a008:	d000      	beq.n	800a00c <_strtod_l+0x2f4>
 800a00a:	4276      	negs	r6, r6
 800a00c:	2d00      	cmp	r5, #0
 800a00e:	d14f      	bne.n	800a0b0 <_strtod_l+0x398>
 800a010:	9904      	ldr	r1, [sp, #16]
 800a012:	4301      	orrs	r1, r0
 800a014:	f47f aec2 	bne.w	8009d9c <_strtod_l+0x84>
 800a018:	2a00      	cmp	r2, #0
 800a01a:	f47f aedb 	bne.w	8009dd4 <_strtod_l+0xbc>
 800a01e:	2b69      	cmp	r3, #105	; 0x69
 800a020:	d027      	beq.n	800a072 <_strtod_l+0x35a>
 800a022:	dc24      	bgt.n	800a06e <_strtod_l+0x356>
 800a024:	2b49      	cmp	r3, #73	; 0x49
 800a026:	d024      	beq.n	800a072 <_strtod_l+0x35a>
 800a028:	2b4e      	cmp	r3, #78	; 0x4e
 800a02a:	f47f aed3 	bne.w	8009dd4 <_strtod_l+0xbc>
 800a02e:	499e      	ldr	r1, [pc, #632]	; (800a2a8 <_strtod_l+0x590>)
 800a030:	a81d      	add	r0, sp, #116	; 0x74
 800a032:	f002 f823 	bl	800c07c <__match>
 800a036:	2800      	cmp	r0, #0
 800a038:	f43f aecc 	beq.w	8009dd4 <_strtod_l+0xbc>
 800a03c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a03e:	781b      	ldrb	r3, [r3, #0]
 800a040:	2b28      	cmp	r3, #40	; 0x28
 800a042:	d12d      	bne.n	800a0a0 <_strtod_l+0x388>
 800a044:	4999      	ldr	r1, [pc, #612]	; (800a2ac <_strtod_l+0x594>)
 800a046:	aa20      	add	r2, sp, #128	; 0x80
 800a048:	a81d      	add	r0, sp, #116	; 0x74
 800a04a:	f002 f82b 	bl	800c0a4 <__hexnan>
 800a04e:	2805      	cmp	r0, #5
 800a050:	d126      	bne.n	800a0a0 <_strtod_l+0x388>
 800a052:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a054:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800a058:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800a05c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800a060:	e69c      	b.n	8009d9c <_strtod_l+0x84>
 800a062:	210a      	movs	r1, #10
 800a064:	fb01 3e0e 	mla	lr, r1, lr, r3
 800a068:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800a06c:	e7b9      	b.n	8009fe2 <_strtod_l+0x2ca>
 800a06e:	2b6e      	cmp	r3, #110	; 0x6e
 800a070:	e7db      	b.n	800a02a <_strtod_l+0x312>
 800a072:	498f      	ldr	r1, [pc, #572]	; (800a2b0 <_strtod_l+0x598>)
 800a074:	a81d      	add	r0, sp, #116	; 0x74
 800a076:	f002 f801 	bl	800c07c <__match>
 800a07a:	2800      	cmp	r0, #0
 800a07c:	f43f aeaa 	beq.w	8009dd4 <_strtod_l+0xbc>
 800a080:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a082:	498c      	ldr	r1, [pc, #560]	; (800a2b4 <_strtod_l+0x59c>)
 800a084:	3b01      	subs	r3, #1
 800a086:	a81d      	add	r0, sp, #116	; 0x74
 800a088:	931d      	str	r3, [sp, #116]	; 0x74
 800a08a:	f001 fff7 	bl	800c07c <__match>
 800a08e:	b910      	cbnz	r0, 800a096 <_strtod_l+0x37e>
 800a090:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a092:	3301      	adds	r3, #1
 800a094:	931d      	str	r3, [sp, #116]	; 0x74
 800a096:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800a2c4 <_strtod_l+0x5ac>
 800a09a:	f04f 0a00 	mov.w	sl, #0
 800a09e:	e67d      	b.n	8009d9c <_strtod_l+0x84>
 800a0a0:	4885      	ldr	r0, [pc, #532]	; (800a2b8 <_strtod_l+0x5a0>)
 800a0a2:	f003 fc8d 	bl	800d9c0 <nan>
 800a0a6:	ed8d 0b04 	vstr	d0, [sp, #16]
 800a0aa:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800a0ae:	e675      	b.n	8009d9c <_strtod_l+0x84>
 800a0b0:	9b07      	ldr	r3, [sp, #28]
 800a0b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a0b4:	1af3      	subs	r3, r6, r3
 800a0b6:	2f00      	cmp	r7, #0
 800a0b8:	bf08      	it	eq
 800a0ba:	462f      	moveq	r7, r5
 800a0bc:	2d10      	cmp	r5, #16
 800a0be:	9308      	str	r3, [sp, #32]
 800a0c0:	46a8      	mov	r8, r5
 800a0c2:	bfa8      	it	ge
 800a0c4:	f04f 0810 	movge.w	r8, #16
 800a0c8:	f7f6 fa1c 	bl	8000504 <__aeabi_ui2d>
 800a0cc:	2d09      	cmp	r5, #9
 800a0ce:	4682      	mov	sl, r0
 800a0d0:	468b      	mov	fp, r1
 800a0d2:	dd13      	ble.n	800a0fc <_strtod_l+0x3e4>
 800a0d4:	4b79      	ldr	r3, [pc, #484]	; (800a2bc <_strtod_l+0x5a4>)
 800a0d6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a0da:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a0de:	f7f6 fa8b 	bl	80005f8 <__aeabi_dmul>
 800a0e2:	4682      	mov	sl, r0
 800a0e4:	4648      	mov	r0, r9
 800a0e6:	468b      	mov	fp, r1
 800a0e8:	f7f6 fa0c 	bl	8000504 <__aeabi_ui2d>
 800a0ec:	4602      	mov	r2, r0
 800a0ee:	460b      	mov	r3, r1
 800a0f0:	4650      	mov	r0, sl
 800a0f2:	4659      	mov	r1, fp
 800a0f4:	f7f6 f8ca 	bl	800028c <__adddf3>
 800a0f8:	4682      	mov	sl, r0
 800a0fa:	468b      	mov	fp, r1
 800a0fc:	2d0f      	cmp	r5, #15
 800a0fe:	dc38      	bgt.n	800a172 <_strtod_l+0x45a>
 800a100:	9b08      	ldr	r3, [sp, #32]
 800a102:	2b00      	cmp	r3, #0
 800a104:	f43f ae4a 	beq.w	8009d9c <_strtod_l+0x84>
 800a108:	dd24      	ble.n	800a154 <_strtod_l+0x43c>
 800a10a:	2b16      	cmp	r3, #22
 800a10c:	dc0b      	bgt.n	800a126 <_strtod_l+0x40e>
 800a10e:	4d6b      	ldr	r5, [pc, #428]	; (800a2bc <_strtod_l+0x5a4>)
 800a110:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800a114:	e9d5 0100 	ldrd	r0, r1, [r5]
 800a118:	4652      	mov	r2, sl
 800a11a:	465b      	mov	r3, fp
 800a11c:	f7f6 fa6c 	bl	80005f8 <__aeabi_dmul>
 800a120:	4682      	mov	sl, r0
 800a122:	468b      	mov	fp, r1
 800a124:	e63a      	b.n	8009d9c <_strtod_l+0x84>
 800a126:	9a08      	ldr	r2, [sp, #32]
 800a128:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800a12c:	4293      	cmp	r3, r2
 800a12e:	db20      	blt.n	800a172 <_strtod_l+0x45a>
 800a130:	4c62      	ldr	r4, [pc, #392]	; (800a2bc <_strtod_l+0x5a4>)
 800a132:	f1c5 050f 	rsb	r5, r5, #15
 800a136:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a13a:	4652      	mov	r2, sl
 800a13c:	465b      	mov	r3, fp
 800a13e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a142:	f7f6 fa59 	bl	80005f8 <__aeabi_dmul>
 800a146:	9b08      	ldr	r3, [sp, #32]
 800a148:	1b5d      	subs	r5, r3, r5
 800a14a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a14e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a152:	e7e3      	b.n	800a11c <_strtod_l+0x404>
 800a154:	9b08      	ldr	r3, [sp, #32]
 800a156:	3316      	adds	r3, #22
 800a158:	db0b      	blt.n	800a172 <_strtod_l+0x45a>
 800a15a:	9b07      	ldr	r3, [sp, #28]
 800a15c:	4a57      	ldr	r2, [pc, #348]	; (800a2bc <_strtod_l+0x5a4>)
 800a15e:	1b9e      	subs	r6, r3, r6
 800a160:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800a164:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a168:	4650      	mov	r0, sl
 800a16a:	4659      	mov	r1, fp
 800a16c:	f7f6 fb6e 	bl	800084c <__aeabi_ddiv>
 800a170:	e7d6      	b.n	800a120 <_strtod_l+0x408>
 800a172:	9b08      	ldr	r3, [sp, #32]
 800a174:	eba5 0808 	sub.w	r8, r5, r8
 800a178:	4498      	add	r8, r3
 800a17a:	f1b8 0f00 	cmp.w	r8, #0
 800a17e:	dd71      	ble.n	800a264 <_strtod_l+0x54c>
 800a180:	f018 030f 	ands.w	r3, r8, #15
 800a184:	d00a      	beq.n	800a19c <_strtod_l+0x484>
 800a186:	494d      	ldr	r1, [pc, #308]	; (800a2bc <_strtod_l+0x5a4>)
 800a188:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a18c:	4652      	mov	r2, sl
 800a18e:	465b      	mov	r3, fp
 800a190:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a194:	f7f6 fa30 	bl	80005f8 <__aeabi_dmul>
 800a198:	4682      	mov	sl, r0
 800a19a:	468b      	mov	fp, r1
 800a19c:	f038 080f 	bics.w	r8, r8, #15
 800a1a0:	d04d      	beq.n	800a23e <_strtod_l+0x526>
 800a1a2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800a1a6:	dd22      	ble.n	800a1ee <_strtod_l+0x4d6>
 800a1a8:	2500      	movs	r5, #0
 800a1aa:	462e      	mov	r6, r5
 800a1ac:	9509      	str	r5, [sp, #36]	; 0x24
 800a1ae:	9507      	str	r5, [sp, #28]
 800a1b0:	2322      	movs	r3, #34	; 0x22
 800a1b2:	f8df b110 	ldr.w	fp, [pc, #272]	; 800a2c4 <_strtod_l+0x5ac>
 800a1b6:	6023      	str	r3, [r4, #0]
 800a1b8:	f04f 0a00 	mov.w	sl, #0
 800a1bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	f43f adec 	beq.w	8009d9c <_strtod_l+0x84>
 800a1c4:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a1c6:	4620      	mov	r0, r4
 800a1c8:	f002 f8e0 	bl	800c38c <_Bfree>
 800a1cc:	9907      	ldr	r1, [sp, #28]
 800a1ce:	4620      	mov	r0, r4
 800a1d0:	f002 f8dc 	bl	800c38c <_Bfree>
 800a1d4:	4631      	mov	r1, r6
 800a1d6:	4620      	mov	r0, r4
 800a1d8:	f002 f8d8 	bl	800c38c <_Bfree>
 800a1dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a1de:	4620      	mov	r0, r4
 800a1e0:	f002 f8d4 	bl	800c38c <_Bfree>
 800a1e4:	4629      	mov	r1, r5
 800a1e6:	4620      	mov	r0, r4
 800a1e8:	f002 f8d0 	bl	800c38c <_Bfree>
 800a1ec:	e5d6      	b.n	8009d9c <_strtod_l+0x84>
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	ea4f 1828 	mov.w	r8, r8, asr #4
 800a1f4:	4650      	mov	r0, sl
 800a1f6:	4659      	mov	r1, fp
 800a1f8:	4699      	mov	r9, r3
 800a1fa:	f1b8 0f01 	cmp.w	r8, #1
 800a1fe:	dc21      	bgt.n	800a244 <_strtod_l+0x52c>
 800a200:	b10b      	cbz	r3, 800a206 <_strtod_l+0x4ee>
 800a202:	4682      	mov	sl, r0
 800a204:	468b      	mov	fp, r1
 800a206:	4b2e      	ldr	r3, [pc, #184]	; (800a2c0 <_strtod_l+0x5a8>)
 800a208:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800a20c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800a210:	4652      	mov	r2, sl
 800a212:	465b      	mov	r3, fp
 800a214:	e9d9 0100 	ldrd	r0, r1, [r9]
 800a218:	f7f6 f9ee 	bl	80005f8 <__aeabi_dmul>
 800a21c:	4b29      	ldr	r3, [pc, #164]	; (800a2c4 <_strtod_l+0x5ac>)
 800a21e:	460a      	mov	r2, r1
 800a220:	400b      	ands	r3, r1
 800a222:	4929      	ldr	r1, [pc, #164]	; (800a2c8 <_strtod_l+0x5b0>)
 800a224:	428b      	cmp	r3, r1
 800a226:	4682      	mov	sl, r0
 800a228:	d8be      	bhi.n	800a1a8 <_strtod_l+0x490>
 800a22a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a22e:	428b      	cmp	r3, r1
 800a230:	bf86      	itte	hi
 800a232:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800a2cc <_strtod_l+0x5b4>
 800a236:	f04f 3aff 	movhi.w	sl, #4294967295
 800a23a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800a23e:	2300      	movs	r3, #0
 800a240:	9304      	str	r3, [sp, #16]
 800a242:	e081      	b.n	800a348 <_strtod_l+0x630>
 800a244:	f018 0f01 	tst.w	r8, #1
 800a248:	d007      	beq.n	800a25a <_strtod_l+0x542>
 800a24a:	4b1d      	ldr	r3, [pc, #116]	; (800a2c0 <_strtod_l+0x5a8>)
 800a24c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800a250:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a254:	f7f6 f9d0 	bl	80005f8 <__aeabi_dmul>
 800a258:	2301      	movs	r3, #1
 800a25a:	f109 0901 	add.w	r9, r9, #1
 800a25e:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a262:	e7ca      	b.n	800a1fa <_strtod_l+0x4e2>
 800a264:	d0eb      	beq.n	800a23e <_strtod_l+0x526>
 800a266:	f1c8 0800 	rsb	r8, r8, #0
 800a26a:	f018 020f 	ands.w	r2, r8, #15
 800a26e:	d00a      	beq.n	800a286 <_strtod_l+0x56e>
 800a270:	4b12      	ldr	r3, [pc, #72]	; (800a2bc <_strtod_l+0x5a4>)
 800a272:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a276:	4650      	mov	r0, sl
 800a278:	4659      	mov	r1, fp
 800a27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a27e:	f7f6 fae5 	bl	800084c <__aeabi_ddiv>
 800a282:	4682      	mov	sl, r0
 800a284:	468b      	mov	fp, r1
 800a286:	ea5f 1828 	movs.w	r8, r8, asr #4
 800a28a:	d0d8      	beq.n	800a23e <_strtod_l+0x526>
 800a28c:	f1b8 0f1f 	cmp.w	r8, #31
 800a290:	dd1e      	ble.n	800a2d0 <_strtod_l+0x5b8>
 800a292:	2500      	movs	r5, #0
 800a294:	462e      	mov	r6, r5
 800a296:	9509      	str	r5, [sp, #36]	; 0x24
 800a298:	9507      	str	r5, [sp, #28]
 800a29a:	2322      	movs	r3, #34	; 0x22
 800a29c:	f04f 0a00 	mov.w	sl, #0
 800a2a0:	f04f 0b00 	mov.w	fp, #0
 800a2a4:	6023      	str	r3, [r4, #0]
 800a2a6:	e789      	b.n	800a1bc <_strtod_l+0x4a4>
 800a2a8:	0800f469 	.word	0x0800f469
 800a2ac:	0800f4a8 	.word	0x0800f4a8
 800a2b0:	0800f461 	.word	0x0800f461
 800a2b4:	0800f5ec 	.word	0x0800f5ec
 800a2b8:	0800f923 	.word	0x0800f923
 800a2bc:	0800f7e8 	.word	0x0800f7e8
 800a2c0:	0800f7c0 	.word	0x0800f7c0
 800a2c4:	7ff00000 	.word	0x7ff00000
 800a2c8:	7ca00000 	.word	0x7ca00000
 800a2cc:	7fefffff 	.word	0x7fefffff
 800a2d0:	f018 0310 	ands.w	r3, r8, #16
 800a2d4:	bf18      	it	ne
 800a2d6:	236a      	movne	r3, #106	; 0x6a
 800a2d8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800a690 <_strtod_l+0x978>
 800a2dc:	9304      	str	r3, [sp, #16]
 800a2de:	4650      	mov	r0, sl
 800a2e0:	4659      	mov	r1, fp
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	f018 0f01 	tst.w	r8, #1
 800a2e8:	d004      	beq.n	800a2f4 <_strtod_l+0x5dc>
 800a2ea:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a2ee:	f7f6 f983 	bl	80005f8 <__aeabi_dmul>
 800a2f2:	2301      	movs	r3, #1
 800a2f4:	ea5f 0868 	movs.w	r8, r8, asr #1
 800a2f8:	f109 0908 	add.w	r9, r9, #8
 800a2fc:	d1f2      	bne.n	800a2e4 <_strtod_l+0x5cc>
 800a2fe:	b10b      	cbz	r3, 800a304 <_strtod_l+0x5ec>
 800a300:	4682      	mov	sl, r0
 800a302:	468b      	mov	fp, r1
 800a304:	9b04      	ldr	r3, [sp, #16]
 800a306:	b1bb      	cbz	r3, 800a338 <_strtod_l+0x620>
 800a308:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800a30c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a310:	2b00      	cmp	r3, #0
 800a312:	4659      	mov	r1, fp
 800a314:	dd10      	ble.n	800a338 <_strtod_l+0x620>
 800a316:	2b1f      	cmp	r3, #31
 800a318:	f340 8128 	ble.w	800a56c <_strtod_l+0x854>
 800a31c:	2b34      	cmp	r3, #52	; 0x34
 800a31e:	bfde      	ittt	le
 800a320:	3b20      	suble	r3, #32
 800a322:	f04f 32ff 	movle.w	r2, #4294967295
 800a326:	fa02 f303 	lslle.w	r3, r2, r3
 800a32a:	f04f 0a00 	mov.w	sl, #0
 800a32e:	bfcc      	ite	gt
 800a330:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800a334:	ea03 0b01 	andle.w	fp, r3, r1
 800a338:	2200      	movs	r2, #0
 800a33a:	2300      	movs	r3, #0
 800a33c:	4650      	mov	r0, sl
 800a33e:	4659      	mov	r1, fp
 800a340:	f7f6 fbc2 	bl	8000ac8 <__aeabi_dcmpeq>
 800a344:	2800      	cmp	r0, #0
 800a346:	d1a4      	bne.n	800a292 <_strtod_l+0x57a>
 800a348:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a34a:	9300      	str	r3, [sp, #0]
 800a34c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a34e:	462b      	mov	r3, r5
 800a350:	463a      	mov	r2, r7
 800a352:	4620      	mov	r0, r4
 800a354:	f002 f886 	bl	800c464 <__s2b>
 800a358:	9009      	str	r0, [sp, #36]	; 0x24
 800a35a:	2800      	cmp	r0, #0
 800a35c:	f43f af24 	beq.w	800a1a8 <_strtod_l+0x490>
 800a360:	9b07      	ldr	r3, [sp, #28]
 800a362:	1b9e      	subs	r6, r3, r6
 800a364:	9b08      	ldr	r3, [sp, #32]
 800a366:	2b00      	cmp	r3, #0
 800a368:	bfb4      	ite	lt
 800a36a:	4633      	movlt	r3, r6
 800a36c:	2300      	movge	r3, #0
 800a36e:	9310      	str	r3, [sp, #64]	; 0x40
 800a370:	9b08      	ldr	r3, [sp, #32]
 800a372:	2500      	movs	r5, #0
 800a374:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a378:	9318      	str	r3, [sp, #96]	; 0x60
 800a37a:	462e      	mov	r6, r5
 800a37c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a37e:	4620      	mov	r0, r4
 800a380:	6859      	ldr	r1, [r3, #4]
 800a382:	f001 ffc3 	bl	800c30c <_Balloc>
 800a386:	9007      	str	r0, [sp, #28]
 800a388:	2800      	cmp	r0, #0
 800a38a:	f43f af11 	beq.w	800a1b0 <_strtod_l+0x498>
 800a38e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a390:	691a      	ldr	r2, [r3, #16]
 800a392:	3202      	adds	r2, #2
 800a394:	f103 010c 	add.w	r1, r3, #12
 800a398:	0092      	lsls	r2, r2, #2
 800a39a:	300c      	adds	r0, #12
 800a39c:	f7fe fc3c 	bl	8008c18 <memcpy>
 800a3a0:	ec4b ab10 	vmov	d0, sl, fp
 800a3a4:	aa20      	add	r2, sp, #128	; 0x80
 800a3a6:	a91f      	add	r1, sp, #124	; 0x7c
 800a3a8:	4620      	mov	r0, r4
 800a3aa:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800a3ae:	f002 fb95 	bl	800cadc <__d2b>
 800a3b2:	901e      	str	r0, [sp, #120]	; 0x78
 800a3b4:	2800      	cmp	r0, #0
 800a3b6:	f43f aefb 	beq.w	800a1b0 <_strtod_l+0x498>
 800a3ba:	2101      	movs	r1, #1
 800a3bc:	4620      	mov	r0, r4
 800a3be:	f002 f8eb 	bl	800c598 <__i2b>
 800a3c2:	4606      	mov	r6, r0
 800a3c4:	2800      	cmp	r0, #0
 800a3c6:	f43f aef3 	beq.w	800a1b0 <_strtod_l+0x498>
 800a3ca:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a3cc:	9904      	ldr	r1, [sp, #16]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	bfab      	itete	ge
 800a3d2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800a3d4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800a3d6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800a3d8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800a3dc:	bfac      	ite	ge
 800a3de:	eb03 0902 	addge.w	r9, r3, r2
 800a3e2:	1ad7      	sublt	r7, r2, r3
 800a3e4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a3e6:	eba3 0801 	sub.w	r8, r3, r1
 800a3ea:	4490      	add	r8, r2
 800a3ec:	4ba3      	ldr	r3, [pc, #652]	; (800a67c <_strtod_l+0x964>)
 800a3ee:	f108 38ff 	add.w	r8, r8, #4294967295
 800a3f2:	4598      	cmp	r8, r3
 800a3f4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a3f8:	f280 80cc 	bge.w	800a594 <_strtod_l+0x87c>
 800a3fc:	eba3 0308 	sub.w	r3, r3, r8
 800a400:	2b1f      	cmp	r3, #31
 800a402:	eba2 0203 	sub.w	r2, r2, r3
 800a406:	f04f 0101 	mov.w	r1, #1
 800a40a:	f300 80b6 	bgt.w	800a57a <_strtod_l+0x862>
 800a40e:	fa01 f303 	lsl.w	r3, r1, r3
 800a412:	9311      	str	r3, [sp, #68]	; 0x44
 800a414:	2300      	movs	r3, #0
 800a416:	930c      	str	r3, [sp, #48]	; 0x30
 800a418:	eb09 0802 	add.w	r8, r9, r2
 800a41c:	9b04      	ldr	r3, [sp, #16]
 800a41e:	45c1      	cmp	r9, r8
 800a420:	4417      	add	r7, r2
 800a422:	441f      	add	r7, r3
 800a424:	464b      	mov	r3, r9
 800a426:	bfa8      	it	ge
 800a428:	4643      	movge	r3, r8
 800a42a:	42bb      	cmp	r3, r7
 800a42c:	bfa8      	it	ge
 800a42e:	463b      	movge	r3, r7
 800a430:	2b00      	cmp	r3, #0
 800a432:	bfc2      	ittt	gt
 800a434:	eba8 0803 	subgt.w	r8, r8, r3
 800a438:	1aff      	subgt	r7, r7, r3
 800a43a:	eba9 0903 	subgt.w	r9, r9, r3
 800a43e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a440:	2b00      	cmp	r3, #0
 800a442:	dd17      	ble.n	800a474 <_strtod_l+0x75c>
 800a444:	4631      	mov	r1, r6
 800a446:	461a      	mov	r2, r3
 800a448:	4620      	mov	r0, r4
 800a44a:	f002 f961 	bl	800c710 <__pow5mult>
 800a44e:	4606      	mov	r6, r0
 800a450:	2800      	cmp	r0, #0
 800a452:	f43f aead 	beq.w	800a1b0 <_strtod_l+0x498>
 800a456:	4601      	mov	r1, r0
 800a458:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a45a:	4620      	mov	r0, r4
 800a45c:	f002 f8b2 	bl	800c5c4 <__multiply>
 800a460:	900f      	str	r0, [sp, #60]	; 0x3c
 800a462:	2800      	cmp	r0, #0
 800a464:	f43f aea4 	beq.w	800a1b0 <_strtod_l+0x498>
 800a468:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a46a:	4620      	mov	r0, r4
 800a46c:	f001 ff8e 	bl	800c38c <_Bfree>
 800a470:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a472:	931e      	str	r3, [sp, #120]	; 0x78
 800a474:	f1b8 0f00 	cmp.w	r8, #0
 800a478:	f300 8091 	bgt.w	800a59e <_strtod_l+0x886>
 800a47c:	9b08      	ldr	r3, [sp, #32]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	dd08      	ble.n	800a494 <_strtod_l+0x77c>
 800a482:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a484:	9907      	ldr	r1, [sp, #28]
 800a486:	4620      	mov	r0, r4
 800a488:	f002 f942 	bl	800c710 <__pow5mult>
 800a48c:	9007      	str	r0, [sp, #28]
 800a48e:	2800      	cmp	r0, #0
 800a490:	f43f ae8e 	beq.w	800a1b0 <_strtod_l+0x498>
 800a494:	2f00      	cmp	r7, #0
 800a496:	dd08      	ble.n	800a4aa <_strtod_l+0x792>
 800a498:	9907      	ldr	r1, [sp, #28]
 800a49a:	463a      	mov	r2, r7
 800a49c:	4620      	mov	r0, r4
 800a49e:	f002 f991 	bl	800c7c4 <__lshift>
 800a4a2:	9007      	str	r0, [sp, #28]
 800a4a4:	2800      	cmp	r0, #0
 800a4a6:	f43f ae83 	beq.w	800a1b0 <_strtod_l+0x498>
 800a4aa:	f1b9 0f00 	cmp.w	r9, #0
 800a4ae:	dd08      	ble.n	800a4c2 <_strtod_l+0x7aa>
 800a4b0:	4631      	mov	r1, r6
 800a4b2:	464a      	mov	r2, r9
 800a4b4:	4620      	mov	r0, r4
 800a4b6:	f002 f985 	bl	800c7c4 <__lshift>
 800a4ba:	4606      	mov	r6, r0
 800a4bc:	2800      	cmp	r0, #0
 800a4be:	f43f ae77 	beq.w	800a1b0 <_strtod_l+0x498>
 800a4c2:	9a07      	ldr	r2, [sp, #28]
 800a4c4:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a4c6:	4620      	mov	r0, r4
 800a4c8:	f002 fa04 	bl	800c8d4 <__mdiff>
 800a4cc:	4605      	mov	r5, r0
 800a4ce:	2800      	cmp	r0, #0
 800a4d0:	f43f ae6e 	beq.w	800a1b0 <_strtod_l+0x498>
 800a4d4:	68c3      	ldr	r3, [r0, #12]
 800a4d6:	930f      	str	r3, [sp, #60]	; 0x3c
 800a4d8:	2300      	movs	r3, #0
 800a4da:	60c3      	str	r3, [r0, #12]
 800a4dc:	4631      	mov	r1, r6
 800a4de:	f002 f9dd 	bl	800c89c <__mcmp>
 800a4e2:	2800      	cmp	r0, #0
 800a4e4:	da65      	bge.n	800a5b2 <_strtod_l+0x89a>
 800a4e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a4e8:	ea53 030a 	orrs.w	r3, r3, sl
 800a4ec:	f040 8087 	bne.w	800a5fe <_strtod_l+0x8e6>
 800a4f0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	f040 8082 	bne.w	800a5fe <_strtod_l+0x8e6>
 800a4fa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a4fe:	0d1b      	lsrs	r3, r3, #20
 800a500:	051b      	lsls	r3, r3, #20
 800a502:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a506:	d97a      	bls.n	800a5fe <_strtod_l+0x8e6>
 800a508:	696b      	ldr	r3, [r5, #20]
 800a50a:	b913      	cbnz	r3, 800a512 <_strtod_l+0x7fa>
 800a50c:	692b      	ldr	r3, [r5, #16]
 800a50e:	2b01      	cmp	r3, #1
 800a510:	dd75      	ble.n	800a5fe <_strtod_l+0x8e6>
 800a512:	4629      	mov	r1, r5
 800a514:	2201      	movs	r2, #1
 800a516:	4620      	mov	r0, r4
 800a518:	f002 f954 	bl	800c7c4 <__lshift>
 800a51c:	4631      	mov	r1, r6
 800a51e:	4605      	mov	r5, r0
 800a520:	f002 f9bc 	bl	800c89c <__mcmp>
 800a524:	2800      	cmp	r0, #0
 800a526:	dd6a      	ble.n	800a5fe <_strtod_l+0x8e6>
 800a528:	9904      	ldr	r1, [sp, #16]
 800a52a:	4a55      	ldr	r2, [pc, #340]	; (800a680 <_strtod_l+0x968>)
 800a52c:	465b      	mov	r3, fp
 800a52e:	2900      	cmp	r1, #0
 800a530:	f000 8085 	beq.w	800a63e <_strtod_l+0x926>
 800a534:	ea02 010b 	and.w	r1, r2, fp
 800a538:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a53c:	dc7f      	bgt.n	800a63e <_strtod_l+0x926>
 800a53e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a542:	f77f aeaa 	ble.w	800a29a <_strtod_l+0x582>
 800a546:	4a4f      	ldr	r2, [pc, #316]	; (800a684 <_strtod_l+0x96c>)
 800a548:	2300      	movs	r3, #0
 800a54a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800a54e:	4650      	mov	r0, sl
 800a550:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800a554:	4659      	mov	r1, fp
 800a556:	f7f6 f84f 	bl	80005f8 <__aeabi_dmul>
 800a55a:	460b      	mov	r3, r1
 800a55c:	4303      	orrs	r3, r0
 800a55e:	bf08      	it	eq
 800a560:	2322      	moveq	r3, #34	; 0x22
 800a562:	4682      	mov	sl, r0
 800a564:	468b      	mov	fp, r1
 800a566:	bf08      	it	eq
 800a568:	6023      	streq	r3, [r4, #0]
 800a56a:	e62b      	b.n	800a1c4 <_strtod_l+0x4ac>
 800a56c:	f04f 32ff 	mov.w	r2, #4294967295
 800a570:	fa02 f303 	lsl.w	r3, r2, r3
 800a574:	ea03 0a0a 	and.w	sl, r3, sl
 800a578:	e6de      	b.n	800a338 <_strtod_l+0x620>
 800a57a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800a57e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800a582:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800a586:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800a58a:	fa01 f308 	lsl.w	r3, r1, r8
 800a58e:	930c      	str	r3, [sp, #48]	; 0x30
 800a590:	9111      	str	r1, [sp, #68]	; 0x44
 800a592:	e741      	b.n	800a418 <_strtod_l+0x700>
 800a594:	2300      	movs	r3, #0
 800a596:	930c      	str	r3, [sp, #48]	; 0x30
 800a598:	2301      	movs	r3, #1
 800a59a:	9311      	str	r3, [sp, #68]	; 0x44
 800a59c:	e73c      	b.n	800a418 <_strtod_l+0x700>
 800a59e:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a5a0:	4642      	mov	r2, r8
 800a5a2:	4620      	mov	r0, r4
 800a5a4:	f002 f90e 	bl	800c7c4 <__lshift>
 800a5a8:	901e      	str	r0, [sp, #120]	; 0x78
 800a5aa:	2800      	cmp	r0, #0
 800a5ac:	f47f af66 	bne.w	800a47c <_strtod_l+0x764>
 800a5b0:	e5fe      	b.n	800a1b0 <_strtod_l+0x498>
 800a5b2:	465f      	mov	r7, fp
 800a5b4:	d16e      	bne.n	800a694 <_strtod_l+0x97c>
 800a5b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a5b8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a5bc:	b342      	cbz	r2, 800a610 <_strtod_l+0x8f8>
 800a5be:	4a32      	ldr	r2, [pc, #200]	; (800a688 <_strtod_l+0x970>)
 800a5c0:	4293      	cmp	r3, r2
 800a5c2:	d128      	bne.n	800a616 <_strtod_l+0x8fe>
 800a5c4:	9b04      	ldr	r3, [sp, #16]
 800a5c6:	4650      	mov	r0, sl
 800a5c8:	b1eb      	cbz	r3, 800a606 <_strtod_l+0x8ee>
 800a5ca:	4a2d      	ldr	r2, [pc, #180]	; (800a680 <_strtod_l+0x968>)
 800a5cc:	403a      	ands	r2, r7
 800a5ce:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800a5d2:	f04f 31ff 	mov.w	r1, #4294967295
 800a5d6:	d819      	bhi.n	800a60c <_strtod_l+0x8f4>
 800a5d8:	0d12      	lsrs	r2, r2, #20
 800a5da:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a5de:	fa01 f303 	lsl.w	r3, r1, r3
 800a5e2:	4298      	cmp	r0, r3
 800a5e4:	d117      	bne.n	800a616 <_strtod_l+0x8fe>
 800a5e6:	4b29      	ldr	r3, [pc, #164]	; (800a68c <_strtod_l+0x974>)
 800a5e8:	429f      	cmp	r7, r3
 800a5ea:	d102      	bne.n	800a5f2 <_strtod_l+0x8da>
 800a5ec:	3001      	adds	r0, #1
 800a5ee:	f43f addf 	beq.w	800a1b0 <_strtod_l+0x498>
 800a5f2:	4b23      	ldr	r3, [pc, #140]	; (800a680 <_strtod_l+0x968>)
 800a5f4:	403b      	ands	r3, r7
 800a5f6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800a5fa:	f04f 0a00 	mov.w	sl, #0
 800a5fe:	9b04      	ldr	r3, [sp, #16]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d1a0      	bne.n	800a546 <_strtod_l+0x82e>
 800a604:	e5de      	b.n	800a1c4 <_strtod_l+0x4ac>
 800a606:	f04f 33ff 	mov.w	r3, #4294967295
 800a60a:	e7ea      	b.n	800a5e2 <_strtod_l+0x8ca>
 800a60c:	460b      	mov	r3, r1
 800a60e:	e7e8      	b.n	800a5e2 <_strtod_l+0x8ca>
 800a610:	ea53 030a 	orrs.w	r3, r3, sl
 800a614:	d088      	beq.n	800a528 <_strtod_l+0x810>
 800a616:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a618:	b1db      	cbz	r3, 800a652 <_strtod_l+0x93a>
 800a61a:	423b      	tst	r3, r7
 800a61c:	d0ef      	beq.n	800a5fe <_strtod_l+0x8e6>
 800a61e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a620:	9a04      	ldr	r2, [sp, #16]
 800a622:	4650      	mov	r0, sl
 800a624:	4659      	mov	r1, fp
 800a626:	b1c3      	cbz	r3, 800a65a <_strtod_l+0x942>
 800a628:	f7ff fb58 	bl	8009cdc <sulp>
 800a62c:	4602      	mov	r2, r0
 800a62e:	460b      	mov	r3, r1
 800a630:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a634:	f7f5 fe2a 	bl	800028c <__adddf3>
 800a638:	4682      	mov	sl, r0
 800a63a:	468b      	mov	fp, r1
 800a63c:	e7df      	b.n	800a5fe <_strtod_l+0x8e6>
 800a63e:	4013      	ands	r3, r2
 800a640:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a644:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a648:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a64c:	f04f 3aff 	mov.w	sl, #4294967295
 800a650:	e7d5      	b.n	800a5fe <_strtod_l+0x8e6>
 800a652:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a654:	ea13 0f0a 	tst.w	r3, sl
 800a658:	e7e0      	b.n	800a61c <_strtod_l+0x904>
 800a65a:	f7ff fb3f 	bl	8009cdc <sulp>
 800a65e:	4602      	mov	r2, r0
 800a660:	460b      	mov	r3, r1
 800a662:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a666:	f7f5 fe0f 	bl	8000288 <__aeabi_dsub>
 800a66a:	2200      	movs	r2, #0
 800a66c:	2300      	movs	r3, #0
 800a66e:	4682      	mov	sl, r0
 800a670:	468b      	mov	fp, r1
 800a672:	f7f6 fa29 	bl	8000ac8 <__aeabi_dcmpeq>
 800a676:	2800      	cmp	r0, #0
 800a678:	d0c1      	beq.n	800a5fe <_strtod_l+0x8e6>
 800a67a:	e60e      	b.n	800a29a <_strtod_l+0x582>
 800a67c:	fffffc02 	.word	0xfffffc02
 800a680:	7ff00000 	.word	0x7ff00000
 800a684:	39500000 	.word	0x39500000
 800a688:	000fffff 	.word	0x000fffff
 800a68c:	7fefffff 	.word	0x7fefffff
 800a690:	0800f4c0 	.word	0x0800f4c0
 800a694:	4631      	mov	r1, r6
 800a696:	4628      	mov	r0, r5
 800a698:	f002 fa7c 	bl	800cb94 <__ratio>
 800a69c:	ec59 8b10 	vmov	r8, r9, d0
 800a6a0:	ee10 0a10 	vmov	r0, s0
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a6aa:	4649      	mov	r1, r9
 800a6ac:	f7f6 fa20 	bl	8000af0 <__aeabi_dcmple>
 800a6b0:	2800      	cmp	r0, #0
 800a6b2:	d07c      	beq.n	800a7ae <_strtod_l+0xa96>
 800a6b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d04c      	beq.n	800a754 <_strtod_l+0xa3c>
 800a6ba:	4b95      	ldr	r3, [pc, #596]	; (800a910 <_strtod_l+0xbf8>)
 800a6bc:	2200      	movs	r2, #0
 800a6be:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800a6c2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800a910 <_strtod_l+0xbf8>
 800a6c6:	f04f 0800 	mov.w	r8, #0
 800a6ca:	4b92      	ldr	r3, [pc, #584]	; (800a914 <_strtod_l+0xbfc>)
 800a6cc:	403b      	ands	r3, r7
 800a6ce:	9311      	str	r3, [sp, #68]	; 0x44
 800a6d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a6d2:	4b91      	ldr	r3, [pc, #580]	; (800a918 <_strtod_l+0xc00>)
 800a6d4:	429a      	cmp	r2, r3
 800a6d6:	f040 80b2 	bne.w	800a83e <_strtod_l+0xb26>
 800a6da:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a6de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a6e2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800a6e6:	ec4b ab10 	vmov	d0, sl, fp
 800a6ea:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800a6ee:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a6f2:	f002 f977 	bl	800c9e4 <__ulp>
 800a6f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a6fa:	ec53 2b10 	vmov	r2, r3, d0
 800a6fe:	f7f5 ff7b 	bl	80005f8 <__aeabi_dmul>
 800a702:	4652      	mov	r2, sl
 800a704:	465b      	mov	r3, fp
 800a706:	f7f5 fdc1 	bl	800028c <__adddf3>
 800a70a:	460b      	mov	r3, r1
 800a70c:	4981      	ldr	r1, [pc, #516]	; (800a914 <_strtod_l+0xbfc>)
 800a70e:	4a83      	ldr	r2, [pc, #524]	; (800a91c <_strtod_l+0xc04>)
 800a710:	4019      	ands	r1, r3
 800a712:	4291      	cmp	r1, r2
 800a714:	4682      	mov	sl, r0
 800a716:	d95e      	bls.n	800a7d6 <_strtod_l+0xabe>
 800a718:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a71a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a71e:	4293      	cmp	r3, r2
 800a720:	d103      	bne.n	800a72a <_strtod_l+0xa12>
 800a722:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a724:	3301      	adds	r3, #1
 800a726:	f43f ad43 	beq.w	800a1b0 <_strtod_l+0x498>
 800a72a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800a928 <_strtod_l+0xc10>
 800a72e:	f04f 3aff 	mov.w	sl, #4294967295
 800a732:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a734:	4620      	mov	r0, r4
 800a736:	f001 fe29 	bl	800c38c <_Bfree>
 800a73a:	9907      	ldr	r1, [sp, #28]
 800a73c:	4620      	mov	r0, r4
 800a73e:	f001 fe25 	bl	800c38c <_Bfree>
 800a742:	4631      	mov	r1, r6
 800a744:	4620      	mov	r0, r4
 800a746:	f001 fe21 	bl	800c38c <_Bfree>
 800a74a:	4629      	mov	r1, r5
 800a74c:	4620      	mov	r0, r4
 800a74e:	f001 fe1d 	bl	800c38c <_Bfree>
 800a752:	e613      	b.n	800a37c <_strtod_l+0x664>
 800a754:	f1ba 0f00 	cmp.w	sl, #0
 800a758:	d11b      	bne.n	800a792 <_strtod_l+0xa7a>
 800a75a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a75e:	b9f3      	cbnz	r3, 800a79e <_strtod_l+0xa86>
 800a760:	4b6b      	ldr	r3, [pc, #428]	; (800a910 <_strtod_l+0xbf8>)
 800a762:	2200      	movs	r2, #0
 800a764:	4640      	mov	r0, r8
 800a766:	4649      	mov	r1, r9
 800a768:	f7f6 f9b8 	bl	8000adc <__aeabi_dcmplt>
 800a76c:	b9d0      	cbnz	r0, 800a7a4 <_strtod_l+0xa8c>
 800a76e:	4640      	mov	r0, r8
 800a770:	4649      	mov	r1, r9
 800a772:	4b6b      	ldr	r3, [pc, #428]	; (800a920 <_strtod_l+0xc08>)
 800a774:	2200      	movs	r2, #0
 800a776:	f7f5 ff3f 	bl	80005f8 <__aeabi_dmul>
 800a77a:	4680      	mov	r8, r0
 800a77c:	4689      	mov	r9, r1
 800a77e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a782:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800a786:	931b      	str	r3, [sp, #108]	; 0x6c
 800a788:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800a78c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800a790:	e79b      	b.n	800a6ca <_strtod_l+0x9b2>
 800a792:	f1ba 0f01 	cmp.w	sl, #1
 800a796:	d102      	bne.n	800a79e <_strtod_l+0xa86>
 800a798:	2f00      	cmp	r7, #0
 800a79a:	f43f ad7e 	beq.w	800a29a <_strtod_l+0x582>
 800a79e:	4b61      	ldr	r3, [pc, #388]	; (800a924 <_strtod_l+0xc0c>)
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	e78c      	b.n	800a6be <_strtod_l+0x9a6>
 800a7a4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800a920 <_strtod_l+0xc08>
 800a7a8:	f04f 0800 	mov.w	r8, #0
 800a7ac:	e7e7      	b.n	800a77e <_strtod_l+0xa66>
 800a7ae:	4b5c      	ldr	r3, [pc, #368]	; (800a920 <_strtod_l+0xc08>)
 800a7b0:	4640      	mov	r0, r8
 800a7b2:	4649      	mov	r1, r9
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	f7f5 ff1f 	bl	80005f8 <__aeabi_dmul>
 800a7ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a7bc:	4680      	mov	r8, r0
 800a7be:	4689      	mov	r9, r1
 800a7c0:	b933      	cbnz	r3, 800a7d0 <_strtod_l+0xab8>
 800a7c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a7c6:	9012      	str	r0, [sp, #72]	; 0x48
 800a7c8:	9313      	str	r3, [sp, #76]	; 0x4c
 800a7ca:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800a7ce:	e7dd      	b.n	800a78c <_strtod_l+0xa74>
 800a7d0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800a7d4:	e7f9      	b.n	800a7ca <_strtod_l+0xab2>
 800a7d6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800a7da:	9b04      	ldr	r3, [sp, #16]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d1a8      	bne.n	800a732 <_strtod_l+0xa1a>
 800a7e0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a7e4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a7e6:	0d1b      	lsrs	r3, r3, #20
 800a7e8:	051b      	lsls	r3, r3, #20
 800a7ea:	429a      	cmp	r2, r3
 800a7ec:	d1a1      	bne.n	800a732 <_strtod_l+0xa1a>
 800a7ee:	4640      	mov	r0, r8
 800a7f0:	4649      	mov	r1, r9
 800a7f2:	f7f6 fa61 	bl	8000cb8 <__aeabi_d2lz>
 800a7f6:	f7f5 fed1 	bl	800059c <__aeabi_l2d>
 800a7fa:	4602      	mov	r2, r0
 800a7fc:	460b      	mov	r3, r1
 800a7fe:	4640      	mov	r0, r8
 800a800:	4649      	mov	r1, r9
 800a802:	f7f5 fd41 	bl	8000288 <__aeabi_dsub>
 800a806:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a808:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a80c:	ea43 030a 	orr.w	r3, r3, sl
 800a810:	4313      	orrs	r3, r2
 800a812:	4680      	mov	r8, r0
 800a814:	4689      	mov	r9, r1
 800a816:	d053      	beq.n	800a8c0 <_strtod_l+0xba8>
 800a818:	a335      	add	r3, pc, #212	; (adr r3, 800a8f0 <_strtod_l+0xbd8>)
 800a81a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a81e:	f7f6 f95d 	bl	8000adc <__aeabi_dcmplt>
 800a822:	2800      	cmp	r0, #0
 800a824:	f47f acce 	bne.w	800a1c4 <_strtod_l+0x4ac>
 800a828:	a333      	add	r3, pc, #204	; (adr r3, 800a8f8 <_strtod_l+0xbe0>)
 800a82a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a82e:	4640      	mov	r0, r8
 800a830:	4649      	mov	r1, r9
 800a832:	f7f6 f971 	bl	8000b18 <__aeabi_dcmpgt>
 800a836:	2800      	cmp	r0, #0
 800a838:	f43f af7b 	beq.w	800a732 <_strtod_l+0xa1a>
 800a83c:	e4c2      	b.n	800a1c4 <_strtod_l+0x4ac>
 800a83e:	9b04      	ldr	r3, [sp, #16]
 800a840:	b333      	cbz	r3, 800a890 <_strtod_l+0xb78>
 800a842:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a844:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a848:	d822      	bhi.n	800a890 <_strtod_l+0xb78>
 800a84a:	a32d      	add	r3, pc, #180	; (adr r3, 800a900 <_strtod_l+0xbe8>)
 800a84c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a850:	4640      	mov	r0, r8
 800a852:	4649      	mov	r1, r9
 800a854:	f7f6 f94c 	bl	8000af0 <__aeabi_dcmple>
 800a858:	b1a0      	cbz	r0, 800a884 <_strtod_l+0xb6c>
 800a85a:	4649      	mov	r1, r9
 800a85c:	4640      	mov	r0, r8
 800a85e:	f7f6 f9a3 	bl	8000ba8 <__aeabi_d2uiz>
 800a862:	2801      	cmp	r0, #1
 800a864:	bf38      	it	cc
 800a866:	2001      	movcc	r0, #1
 800a868:	f7f5 fe4c 	bl	8000504 <__aeabi_ui2d>
 800a86c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a86e:	4680      	mov	r8, r0
 800a870:	4689      	mov	r9, r1
 800a872:	bb13      	cbnz	r3, 800a8ba <_strtod_l+0xba2>
 800a874:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a878:	9014      	str	r0, [sp, #80]	; 0x50
 800a87a:	9315      	str	r3, [sp, #84]	; 0x54
 800a87c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a880:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800a884:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a886:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a888:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a88c:	1a9b      	subs	r3, r3, r2
 800a88e:	930d      	str	r3, [sp, #52]	; 0x34
 800a890:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a894:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a898:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a89c:	f002 f8a2 	bl	800c9e4 <__ulp>
 800a8a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a8a4:	ec53 2b10 	vmov	r2, r3, d0
 800a8a8:	f7f5 fea6 	bl	80005f8 <__aeabi_dmul>
 800a8ac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a8b0:	f7f5 fcec 	bl	800028c <__adddf3>
 800a8b4:	4682      	mov	sl, r0
 800a8b6:	468b      	mov	fp, r1
 800a8b8:	e78f      	b.n	800a7da <_strtod_l+0xac2>
 800a8ba:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800a8be:	e7dd      	b.n	800a87c <_strtod_l+0xb64>
 800a8c0:	a311      	add	r3, pc, #68	; (adr r3, 800a908 <_strtod_l+0xbf0>)
 800a8c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8c6:	f7f6 f909 	bl	8000adc <__aeabi_dcmplt>
 800a8ca:	e7b4      	b.n	800a836 <_strtod_l+0xb1e>
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	930e      	str	r3, [sp, #56]	; 0x38
 800a8d0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a8d2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a8d4:	6013      	str	r3, [r2, #0]
 800a8d6:	f7ff ba65 	b.w	8009da4 <_strtod_l+0x8c>
 800a8da:	2b65      	cmp	r3, #101	; 0x65
 800a8dc:	f43f ab5d 	beq.w	8009f9a <_strtod_l+0x282>
 800a8e0:	2b45      	cmp	r3, #69	; 0x45
 800a8e2:	f43f ab5a 	beq.w	8009f9a <_strtod_l+0x282>
 800a8e6:	2201      	movs	r2, #1
 800a8e8:	f7ff bb92 	b.w	800a010 <_strtod_l+0x2f8>
 800a8ec:	f3af 8000 	nop.w
 800a8f0:	94a03595 	.word	0x94a03595
 800a8f4:	3fdfffff 	.word	0x3fdfffff
 800a8f8:	35afe535 	.word	0x35afe535
 800a8fc:	3fe00000 	.word	0x3fe00000
 800a900:	ffc00000 	.word	0xffc00000
 800a904:	41dfffff 	.word	0x41dfffff
 800a908:	94a03595 	.word	0x94a03595
 800a90c:	3fcfffff 	.word	0x3fcfffff
 800a910:	3ff00000 	.word	0x3ff00000
 800a914:	7ff00000 	.word	0x7ff00000
 800a918:	7fe00000 	.word	0x7fe00000
 800a91c:	7c9fffff 	.word	0x7c9fffff
 800a920:	3fe00000 	.word	0x3fe00000
 800a924:	bff00000 	.word	0xbff00000
 800a928:	7fefffff 	.word	0x7fefffff

0800a92c <_strtod_r>:
 800a92c:	4b01      	ldr	r3, [pc, #4]	; (800a934 <_strtod_r+0x8>)
 800a92e:	f7ff b9f3 	b.w	8009d18 <_strtod_l>
 800a932:	bf00      	nop
 800a934:	2000007c 	.word	0x2000007c

0800a938 <_strtol_l.isra.0>:
 800a938:	2b01      	cmp	r3, #1
 800a93a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a93e:	d001      	beq.n	800a944 <_strtol_l.isra.0+0xc>
 800a940:	2b24      	cmp	r3, #36	; 0x24
 800a942:	d906      	bls.n	800a952 <_strtol_l.isra.0+0x1a>
 800a944:	f7fe f93e 	bl	8008bc4 <__errno>
 800a948:	2316      	movs	r3, #22
 800a94a:	6003      	str	r3, [r0, #0]
 800a94c:	2000      	movs	r0, #0
 800a94e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a952:	4f3a      	ldr	r7, [pc, #232]	; (800aa3c <_strtol_l.isra.0+0x104>)
 800a954:	468e      	mov	lr, r1
 800a956:	4676      	mov	r6, lr
 800a958:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800a95c:	5de5      	ldrb	r5, [r4, r7]
 800a95e:	f015 0508 	ands.w	r5, r5, #8
 800a962:	d1f8      	bne.n	800a956 <_strtol_l.isra.0+0x1e>
 800a964:	2c2d      	cmp	r4, #45	; 0x2d
 800a966:	d134      	bne.n	800a9d2 <_strtol_l.isra.0+0x9a>
 800a968:	f89e 4000 	ldrb.w	r4, [lr]
 800a96c:	f04f 0801 	mov.w	r8, #1
 800a970:	f106 0e02 	add.w	lr, r6, #2
 800a974:	2b00      	cmp	r3, #0
 800a976:	d05c      	beq.n	800aa32 <_strtol_l.isra.0+0xfa>
 800a978:	2b10      	cmp	r3, #16
 800a97a:	d10c      	bne.n	800a996 <_strtol_l.isra.0+0x5e>
 800a97c:	2c30      	cmp	r4, #48	; 0x30
 800a97e:	d10a      	bne.n	800a996 <_strtol_l.isra.0+0x5e>
 800a980:	f89e 4000 	ldrb.w	r4, [lr]
 800a984:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a988:	2c58      	cmp	r4, #88	; 0x58
 800a98a:	d14d      	bne.n	800aa28 <_strtol_l.isra.0+0xf0>
 800a98c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800a990:	2310      	movs	r3, #16
 800a992:	f10e 0e02 	add.w	lr, lr, #2
 800a996:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800a99a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a99e:	2600      	movs	r6, #0
 800a9a0:	fbbc f9f3 	udiv	r9, ip, r3
 800a9a4:	4635      	mov	r5, r6
 800a9a6:	fb03 ca19 	mls	sl, r3, r9, ip
 800a9aa:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800a9ae:	2f09      	cmp	r7, #9
 800a9b0:	d818      	bhi.n	800a9e4 <_strtol_l.isra.0+0xac>
 800a9b2:	463c      	mov	r4, r7
 800a9b4:	42a3      	cmp	r3, r4
 800a9b6:	dd24      	ble.n	800aa02 <_strtol_l.isra.0+0xca>
 800a9b8:	2e00      	cmp	r6, #0
 800a9ba:	db1f      	blt.n	800a9fc <_strtol_l.isra.0+0xc4>
 800a9bc:	45a9      	cmp	r9, r5
 800a9be:	d31d      	bcc.n	800a9fc <_strtol_l.isra.0+0xc4>
 800a9c0:	d101      	bne.n	800a9c6 <_strtol_l.isra.0+0x8e>
 800a9c2:	45a2      	cmp	sl, r4
 800a9c4:	db1a      	blt.n	800a9fc <_strtol_l.isra.0+0xc4>
 800a9c6:	fb05 4503 	mla	r5, r5, r3, r4
 800a9ca:	2601      	movs	r6, #1
 800a9cc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800a9d0:	e7eb      	b.n	800a9aa <_strtol_l.isra.0+0x72>
 800a9d2:	2c2b      	cmp	r4, #43	; 0x2b
 800a9d4:	bf08      	it	eq
 800a9d6:	f89e 4000 	ldrbeq.w	r4, [lr]
 800a9da:	46a8      	mov	r8, r5
 800a9dc:	bf08      	it	eq
 800a9de:	f106 0e02 	addeq.w	lr, r6, #2
 800a9e2:	e7c7      	b.n	800a974 <_strtol_l.isra.0+0x3c>
 800a9e4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800a9e8:	2f19      	cmp	r7, #25
 800a9ea:	d801      	bhi.n	800a9f0 <_strtol_l.isra.0+0xb8>
 800a9ec:	3c37      	subs	r4, #55	; 0x37
 800a9ee:	e7e1      	b.n	800a9b4 <_strtol_l.isra.0+0x7c>
 800a9f0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800a9f4:	2f19      	cmp	r7, #25
 800a9f6:	d804      	bhi.n	800aa02 <_strtol_l.isra.0+0xca>
 800a9f8:	3c57      	subs	r4, #87	; 0x57
 800a9fa:	e7db      	b.n	800a9b4 <_strtol_l.isra.0+0x7c>
 800a9fc:	f04f 36ff 	mov.w	r6, #4294967295
 800aa00:	e7e4      	b.n	800a9cc <_strtol_l.isra.0+0x94>
 800aa02:	2e00      	cmp	r6, #0
 800aa04:	da05      	bge.n	800aa12 <_strtol_l.isra.0+0xda>
 800aa06:	2322      	movs	r3, #34	; 0x22
 800aa08:	6003      	str	r3, [r0, #0]
 800aa0a:	4665      	mov	r5, ip
 800aa0c:	b942      	cbnz	r2, 800aa20 <_strtol_l.isra.0+0xe8>
 800aa0e:	4628      	mov	r0, r5
 800aa10:	e79d      	b.n	800a94e <_strtol_l.isra.0+0x16>
 800aa12:	f1b8 0f00 	cmp.w	r8, #0
 800aa16:	d000      	beq.n	800aa1a <_strtol_l.isra.0+0xe2>
 800aa18:	426d      	negs	r5, r5
 800aa1a:	2a00      	cmp	r2, #0
 800aa1c:	d0f7      	beq.n	800aa0e <_strtol_l.isra.0+0xd6>
 800aa1e:	b10e      	cbz	r6, 800aa24 <_strtol_l.isra.0+0xec>
 800aa20:	f10e 31ff 	add.w	r1, lr, #4294967295
 800aa24:	6011      	str	r1, [r2, #0]
 800aa26:	e7f2      	b.n	800aa0e <_strtol_l.isra.0+0xd6>
 800aa28:	2430      	movs	r4, #48	; 0x30
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d1b3      	bne.n	800a996 <_strtol_l.isra.0+0x5e>
 800aa2e:	2308      	movs	r3, #8
 800aa30:	e7b1      	b.n	800a996 <_strtol_l.isra.0+0x5e>
 800aa32:	2c30      	cmp	r4, #48	; 0x30
 800aa34:	d0a4      	beq.n	800a980 <_strtol_l.isra.0+0x48>
 800aa36:	230a      	movs	r3, #10
 800aa38:	e7ad      	b.n	800a996 <_strtol_l.isra.0+0x5e>
 800aa3a:	bf00      	nop
 800aa3c:	0800f4e9 	.word	0x0800f4e9

0800aa40 <_strtol_r>:
 800aa40:	f7ff bf7a 	b.w	800a938 <_strtol_l.isra.0>

0800aa44 <strtol>:
 800aa44:	4613      	mov	r3, r2
 800aa46:	460a      	mov	r2, r1
 800aa48:	4601      	mov	r1, r0
 800aa4a:	4802      	ldr	r0, [pc, #8]	; (800aa54 <strtol+0x10>)
 800aa4c:	6800      	ldr	r0, [r0, #0]
 800aa4e:	f7ff bf73 	b.w	800a938 <_strtol_l.isra.0>
 800aa52:	bf00      	nop
 800aa54:	20000014 	.word	0x20000014

0800aa58 <_write_r>:
 800aa58:	b538      	push	{r3, r4, r5, lr}
 800aa5a:	4d07      	ldr	r5, [pc, #28]	; (800aa78 <_write_r+0x20>)
 800aa5c:	4604      	mov	r4, r0
 800aa5e:	4608      	mov	r0, r1
 800aa60:	4611      	mov	r1, r2
 800aa62:	2200      	movs	r2, #0
 800aa64:	602a      	str	r2, [r5, #0]
 800aa66:	461a      	mov	r2, r3
 800aa68:	f7f8 fe8c 	bl	8003784 <_write>
 800aa6c:	1c43      	adds	r3, r0, #1
 800aa6e:	d102      	bne.n	800aa76 <_write_r+0x1e>
 800aa70:	682b      	ldr	r3, [r5, #0]
 800aa72:	b103      	cbz	r3, 800aa76 <_write_r+0x1e>
 800aa74:	6023      	str	r3, [r4, #0]
 800aa76:	bd38      	pop	{r3, r4, r5, pc}
 800aa78:	200039e8 	.word	0x200039e8

0800aa7c <_close_r>:
 800aa7c:	b538      	push	{r3, r4, r5, lr}
 800aa7e:	4d06      	ldr	r5, [pc, #24]	; (800aa98 <_close_r+0x1c>)
 800aa80:	2300      	movs	r3, #0
 800aa82:	4604      	mov	r4, r0
 800aa84:	4608      	mov	r0, r1
 800aa86:	602b      	str	r3, [r5, #0]
 800aa88:	f7f8 fea8 	bl	80037dc <_close>
 800aa8c:	1c43      	adds	r3, r0, #1
 800aa8e:	d102      	bne.n	800aa96 <_close_r+0x1a>
 800aa90:	682b      	ldr	r3, [r5, #0]
 800aa92:	b103      	cbz	r3, 800aa96 <_close_r+0x1a>
 800aa94:	6023      	str	r3, [r4, #0]
 800aa96:	bd38      	pop	{r3, r4, r5, pc}
 800aa98:	200039e8 	.word	0x200039e8

0800aa9c <quorem>:
 800aa9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaa0:	6903      	ldr	r3, [r0, #16]
 800aaa2:	690c      	ldr	r4, [r1, #16]
 800aaa4:	42a3      	cmp	r3, r4
 800aaa6:	4607      	mov	r7, r0
 800aaa8:	f2c0 8081 	blt.w	800abae <quorem+0x112>
 800aaac:	3c01      	subs	r4, #1
 800aaae:	f101 0814 	add.w	r8, r1, #20
 800aab2:	f100 0514 	add.w	r5, r0, #20
 800aab6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aaba:	9301      	str	r3, [sp, #4]
 800aabc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800aac0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aac4:	3301      	adds	r3, #1
 800aac6:	429a      	cmp	r2, r3
 800aac8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800aacc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800aad0:	fbb2 f6f3 	udiv	r6, r2, r3
 800aad4:	d331      	bcc.n	800ab3a <quorem+0x9e>
 800aad6:	f04f 0e00 	mov.w	lr, #0
 800aada:	4640      	mov	r0, r8
 800aadc:	46ac      	mov	ip, r5
 800aade:	46f2      	mov	sl, lr
 800aae0:	f850 2b04 	ldr.w	r2, [r0], #4
 800aae4:	b293      	uxth	r3, r2
 800aae6:	fb06 e303 	mla	r3, r6, r3, lr
 800aaea:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800aaee:	b29b      	uxth	r3, r3
 800aaf0:	ebaa 0303 	sub.w	r3, sl, r3
 800aaf4:	0c12      	lsrs	r2, r2, #16
 800aaf6:	f8dc a000 	ldr.w	sl, [ip]
 800aafa:	fb06 e202 	mla	r2, r6, r2, lr
 800aafe:	fa13 f38a 	uxtah	r3, r3, sl
 800ab02:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ab06:	fa1f fa82 	uxth.w	sl, r2
 800ab0a:	f8dc 2000 	ldr.w	r2, [ip]
 800ab0e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800ab12:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ab16:	b29b      	uxth	r3, r3
 800ab18:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ab1c:	4581      	cmp	r9, r0
 800ab1e:	f84c 3b04 	str.w	r3, [ip], #4
 800ab22:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ab26:	d2db      	bcs.n	800aae0 <quorem+0x44>
 800ab28:	f855 300b 	ldr.w	r3, [r5, fp]
 800ab2c:	b92b      	cbnz	r3, 800ab3a <quorem+0x9e>
 800ab2e:	9b01      	ldr	r3, [sp, #4]
 800ab30:	3b04      	subs	r3, #4
 800ab32:	429d      	cmp	r5, r3
 800ab34:	461a      	mov	r2, r3
 800ab36:	d32e      	bcc.n	800ab96 <quorem+0xfa>
 800ab38:	613c      	str	r4, [r7, #16]
 800ab3a:	4638      	mov	r0, r7
 800ab3c:	f001 feae 	bl	800c89c <__mcmp>
 800ab40:	2800      	cmp	r0, #0
 800ab42:	db24      	blt.n	800ab8e <quorem+0xf2>
 800ab44:	3601      	adds	r6, #1
 800ab46:	4628      	mov	r0, r5
 800ab48:	f04f 0c00 	mov.w	ip, #0
 800ab4c:	f858 2b04 	ldr.w	r2, [r8], #4
 800ab50:	f8d0 e000 	ldr.w	lr, [r0]
 800ab54:	b293      	uxth	r3, r2
 800ab56:	ebac 0303 	sub.w	r3, ip, r3
 800ab5a:	0c12      	lsrs	r2, r2, #16
 800ab5c:	fa13 f38e 	uxtah	r3, r3, lr
 800ab60:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ab64:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ab68:	b29b      	uxth	r3, r3
 800ab6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ab6e:	45c1      	cmp	r9, r8
 800ab70:	f840 3b04 	str.w	r3, [r0], #4
 800ab74:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ab78:	d2e8      	bcs.n	800ab4c <quorem+0xb0>
 800ab7a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ab7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ab82:	b922      	cbnz	r2, 800ab8e <quorem+0xf2>
 800ab84:	3b04      	subs	r3, #4
 800ab86:	429d      	cmp	r5, r3
 800ab88:	461a      	mov	r2, r3
 800ab8a:	d30a      	bcc.n	800aba2 <quorem+0x106>
 800ab8c:	613c      	str	r4, [r7, #16]
 800ab8e:	4630      	mov	r0, r6
 800ab90:	b003      	add	sp, #12
 800ab92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab96:	6812      	ldr	r2, [r2, #0]
 800ab98:	3b04      	subs	r3, #4
 800ab9a:	2a00      	cmp	r2, #0
 800ab9c:	d1cc      	bne.n	800ab38 <quorem+0x9c>
 800ab9e:	3c01      	subs	r4, #1
 800aba0:	e7c7      	b.n	800ab32 <quorem+0x96>
 800aba2:	6812      	ldr	r2, [r2, #0]
 800aba4:	3b04      	subs	r3, #4
 800aba6:	2a00      	cmp	r2, #0
 800aba8:	d1f0      	bne.n	800ab8c <quorem+0xf0>
 800abaa:	3c01      	subs	r4, #1
 800abac:	e7eb      	b.n	800ab86 <quorem+0xea>
 800abae:	2000      	movs	r0, #0
 800abb0:	e7ee      	b.n	800ab90 <quorem+0xf4>
 800abb2:	0000      	movs	r0, r0
 800abb4:	0000      	movs	r0, r0
	...

0800abb8 <_dtoa_r>:
 800abb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abbc:	ed2d 8b02 	vpush	{d8}
 800abc0:	ec57 6b10 	vmov	r6, r7, d0
 800abc4:	b095      	sub	sp, #84	; 0x54
 800abc6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800abc8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800abcc:	9105      	str	r1, [sp, #20]
 800abce:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800abd2:	4604      	mov	r4, r0
 800abd4:	9209      	str	r2, [sp, #36]	; 0x24
 800abd6:	930f      	str	r3, [sp, #60]	; 0x3c
 800abd8:	b975      	cbnz	r5, 800abf8 <_dtoa_r+0x40>
 800abda:	2010      	movs	r0, #16
 800abdc:	f001 fb7c 	bl	800c2d8 <malloc>
 800abe0:	4602      	mov	r2, r0
 800abe2:	6260      	str	r0, [r4, #36]	; 0x24
 800abe4:	b920      	cbnz	r0, 800abf0 <_dtoa_r+0x38>
 800abe6:	4bb2      	ldr	r3, [pc, #712]	; (800aeb0 <_dtoa_r+0x2f8>)
 800abe8:	21ea      	movs	r1, #234	; 0xea
 800abea:	48b2      	ldr	r0, [pc, #712]	; (800aeb4 <_dtoa_r+0x2fc>)
 800abec:	f003 f8c0 	bl	800dd70 <__assert_func>
 800abf0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800abf4:	6005      	str	r5, [r0, #0]
 800abf6:	60c5      	str	r5, [r0, #12]
 800abf8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800abfa:	6819      	ldr	r1, [r3, #0]
 800abfc:	b151      	cbz	r1, 800ac14 <_dtoa_r+0x5c>
 800abfe:	685a      	ldr	r2, [r3, #4]
 800ac00:	604a      	str	r2, [r1, #4]
 800ac02:	2301      	movs	r3, #1
 800ac04:	4093      	lsls	r3, r2
 800ac06:	608b      	str	r3, [r1, #8]
 800ac08:	4620      	mov	r0, r4
 800ac0a:	f001 fbbf 	bl	800c38c <_Bfree>
 800ac0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac10:	2200      	movs	r2, #0
 800ac12:	601a      	str	r2, [r3, #0]
 800ac14:	1e3b      	subs	r3, r7, #0
 800ac16:	bfb9      	ittee	lt
 800ac18:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ac1c:	9303      	strlt	r3, [sp, #12]
 800ac1e:	2300      	movge	r3, #0
 800ac20:	f8c8 3000 	strge.w	r3, [r8]
 800ac24:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800ac28:	4ba3      	ldr	r3, [pc, #652]	; (800aeb8 <_dtoa_r+0x300>)
 800ac2a:	bfbc      	itt	lt
 800ac2c:	2201      	movlt	r2, #1
 800ac2e:	f8c8 2000 	strlt.w	r2, [r8]
 800ac32:	ea33 0309 	bics.w	r3, r3, r9
 800ac36:	d11b      	bne.n	800ac70 <_dtoa_r+0xb8>
 800ac38:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ac3a:	f242 730f 	movw	r3, #9999	; 0x270f
 800ac3e:	6013      	str	r3, [r2, #0]
 800ac40:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ac44:	4333      	orrs	r3, r6
 800ac46:	f000 857a 	beq.w	800b73e <_dtoa_r+0xb86>
 800ac4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ac4c:	b963      	cbnz	r3, 800ac68 <_dtoa_r+0xb0>
 800ac4e:	4b9b      	ldr	r3, [pc, #620]	; (800aebc <_dtoa_r+0x304>)
 800ac50:	e024      	b.n	800ac9c <_dtoa_r+0xe4>
 800ac52:	4b9b      	ldr	r3, [pc, #620]	; (800aec0 <_dtoa_r+0x308>)
 800ac54:	9300      	str	r3, [sp, #0]
 800ac56:	3308      	adds	r3, #8
 800ac58:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ac5a:	6013      	str	r3, [r2, #0]
 800ac5c:	9800      	ldr	r0, [sp, #0]
 800ac5e:	b015      	add	sp, #84	; 0x54
 800ac60:	ecbd 8b02 	vpop	{d8}
 800ac64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac68:	4b94      	ldr	r3, [pc, #592]	; (800aebc <_dtoa_r+0x304>)
 800ac6a:	9300      	str	r3, [sp, #0]
 800ac6c:	3303      	adds	r3, #3
 800ac6e:	e7f3      	b.n	800ac58 <_dtoa_r+0xa0>
 800ac70:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ac74:	2200      	movs	r2, #0
 800ac76:	ec51 0b17 	vmov	r0, r1, d7
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800ac80:	f7f5 ff22 	bl	8000ac8 <__aeabi_dcmpeq>
 800ac84:	4680      	mov	r8, r0
 800ac86:	b158      	cbz	r0, 800aca0 <_dtoa_r+0xe8>
 800ac88:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ac8a:	2301      	movs	r3, #1
 800ac8c:	6013      	str	r3, [r2, #0]
 800ac8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	f000 8551 	beq.w	800b738 <_dtoa_r+0xb80>
 800ac96:	488b      	ldr	r0, [pc, #556]	; (800aec4 <_dtoa_r+0x30c>)
 800ac98:	6018      	str	r0, [r3, #0]
 800ac9a:	1e43      	subs	r3, r0, #1
 800ac9c:	9300      	str	r3, [sp, #0]
 800ac9e:	e7dd      	b.n	800ac5c <_dtoa_r+0xa4>
 800aca0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800aca4:	aa12      	add	r2, sp, #72	; 0x48
 800aca6:	a913      	add	r1, sp, #76	; 0x4c
 800aca8:	4620      	mov	r0, r4
 800acaa:	f001 ff17 	bl	800cadc <__d2b>
 800acae:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800acb2:	4683      	mov	fp, r0
 800acb4:	2d00      	cmp	r5, #0
 800acb6:	d07c      	beq.n	800adb2 <_dtoa_r+0x1fa>
 800acb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800acba:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800acbe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800acc2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800acc6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800acca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800acce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800acd2:	4b7d      	ldr	r3, [pc, #500]	; (800aec8 <_dtoa_r+0x310>)
 800acd4:	2200      	movs	r2, #0
 800acd6:	4630      	mov	r0, r6
 800acd8:	4639      	mov	r1, r7
 800acda:	f7f5 fad5 	bl	8000288 <__aeabi_dsub>
 800acde:	a36e      	add	r3, pc, #440	; (adr r3, 800ae98 <_dtoa_r+0x2e0>)
 800ace0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ace4:	f7f5 fc88 	bl	80005f8 <__aeabi_dmul>
 800ace8:	a36d      	add	r3, pc, #436	; (adr r3, 800aea0 <_dtoa_r+0x2e8>)
 800acea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acee:	f7f5 facd 	bl	800028c <__adddf3>
 800acf2:	4606      	mov	r6, r0
 800acf4:	4628      	mov	r0, r5
 800acf6:	460f      	mov	r7, r1
 800acf8:	f7f5 fc14 	bl	8000524 <__aeabi_i2d>
 800acfc:	a36a      	add	r3, pc, #424	; (adr r3, 800aea8 <_dtoa_r+0x2f0>)
 800acfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad02:	f7f5 fc79 	bl	80005f8 <__aeabi_dmul>
 800ad06:	4602      	mov	r2, r0
 800ad08:	460b      	mov	r3, r1
 800ad0a:	4630      	mov	r0, r6
 800ad0c:	4639      	mov	r1, r7
 800ad0e:	f7f5 fabd 	bl	800028c <__adddf3>
 800ad12:	4606      	mov	r6, r0
 800ad14:	460f      	mov	r7, r1
 800ad16:	f7f5 ff1f 	bl	8000b58 <__aeabi_d2iz>
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	4682      	mov	sl, r0
 800ad1e:	2300      	movs	r3, #0
 800ad20:	4630      	mov	r0, r6
 800ad22:	4639      	mov	r1, r7
 800ad24:	f7f5 feda 	bl	8000adc <__aeabi_dcmplt>
 800ad28:	b148      	cbz	r0, 800ad3e <_dtoa_r+0x186>
 800ad2a:	4650      	mov	r0, sl
 800ad2c:	f7f5 fbfa 	bl	8000524 <__aeabi_i2d>
 800ad30:	4632      	mov	r2, r6
 800ad32:	463b      	mov	r3, r7
 800ad34:	f7f5 fec8 	bl	8000ac8 <__aeabi_dcmpeq>
 800ad38:	b908      	cbnz	r0, 800ad3e <_dtoa_r+0x186>
 800ad3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ad3e:	f1ba 0f16 	cmp.w	sl, #22
 800ad42:	d854      	bhi.n	800adee <_dtoa_r+0x236>
 800ad44:	4b61      	ldr	r3, [pc, #388]	; (800aecc <_dtoa_r+0x314>)
 800ad46:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ad4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad4e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ad52:	f7f5 fec3 	bl	8000adc <__aeabi_dcmplt>
 800ad56:	2800      	cmp	r0, #0
 800ad58:	d04b      	beq.n	800adf2 <_dtoa_r+0x23a>
 800ad5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ad5e:	2300      	movs	r3, #0
 800ad60:	930e      	str	r3, [sp, #56]	; 0x38
 800ad62:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ad64:	1b5d      	subs	r5, r3, r5
 800ad66:	1e6b      	subs	r3, r5, #1
 800ad68:	9304      	str	r3, [sp, #16]
 800ad6a:	bf43      	ittte	mi
 800ad6c:	2300      	movmi	r3, #0
 800ad6e:	f1c5 0801 	rsbmi	r8, r5, #1
 800ad72:	9304      	strmi	r3, [sp, #16]
 800ad74:	f04f 0800 	movpl.w	r8, #0
 800ad78:	f1ba 0f00 	cmp.w	sl, #0
 800ad7c:	db3b      	blt.n	800adf6 <_dtoa_r+0x23e>
 800ad7e:	9b04      	ldr	r3, [sp, #16]
 800ad80:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800ad84:	4453      	add	r3, sl
 800ad86:	9304      	str	r3, [sp, #16]
 800ad88:	2300      	movs	r3, #0
 800ad8a:	9306      	str	r3, [sp, #24]
 800ad8c:	9b05      	ldr	r3, [sp, #20]
 800ad8e:	2b09      	cmp	r3, #9
 800ad90:	d869      	bhi.n	800ae66 <_dtoa_r+0x2ae>
 800ad92:	2b05      	cmp	r3, #5
 800ad94:	bfc4      	itt	gt
 800ad96:	3b04      	subgt	r3, #4
 800ad98:	9305      	strgt	r3, [sp, #20]
 800ad9a:	9b05      	ldr	r3, [sp, #20]
 800ad9c:	f1a3 0302 	sub.w	r3, r3, #2
 800ada0:	bfcc      	ite	gt
 800ada2:	2500      	movgt	r5, #0
 800ada4:	2501      	movle	r5, #1
 800ada6:	2b03      	cmp	r3, #3
 800ada8:	d869      	bhi.n	800ae7e <_dtoa_r+0x2c6>
 800adaa:	e8df f003 	tbb	[pc, r3]
 800adae:	4e2c      	.short	0x4e2c
 800adb0:	5a4c      	.short	0x5a4c
 800adb2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800adb6:	441d      	add	r5, r3
 800adb8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800adbc:	2b20      	cmp	r3, #32
 800adbe:	bfc1      	itttt	gt
 800adc0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800adc4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800adc8:	fa09 f303 	lslgt.w	r3, r9, r3
 800adcc:	fa26 f000 	lsrgt.w	r0, r6, r0
 800add0:	bfda      	itte	le
 800add2:	f1c3 0320 	rsble	r3, r3, #32
 800add6:	fa06 f003 	lslle.w	r0, r6, r3
 800adda:	4318      	orrgt	r0, r3
 800addc:	f7f5 fb92 	bl	8000504 <__aeabi_ui2d>
 800ade0:	2301      	movs	r3, #1
 800ade2:	4606      	mov	r6, r0
 800ade4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ade8:	3d01      	subs	r5, #1
 800adea:	9310      	str	r3, [sp, #64]	; 0x40
 800adec:	e771      	b.n	800acd2 <_dtoa_r+0x11a>
 800adee:	2301      	movs	r3, #1
 800adf0:	e7b6      	b.n	800ad60 <_dtoa_r+0x1a8>
 800adf2:	900e      	str	r0, [sp, #56]	; 0x38
 800adf4:	e7b5      	b.n	800ad62 <_dtoa_r+0x1aa>
 800adf6:	f1ca 0300 	rsb	r3, sl, #0
 800adfa:	9306      	str	r3, [sp, #24]
 800adfc:	2300      	movs	r3, #0
 800adfe:	eba8 080a 	sub.w	r8, r8, sl
 800ae02:	930d      	str	r3, [sp, #52]	; 0x34
 800ae04:	e7c2      	b.n	800ad8c <_dtoa_r+0x1d4>
 800ae06:	2300      	movs	r3, #0
 800ae08:	9308      	str	r3, [sp, #32]
 800ae0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	dc39      	bgt.n	800ae84 <_dtoa_r+0x2cc>
 800ae10:	f04f 0901 	mov.w	r9, #1
 800ae14:	f8cd 9004 	str.w	r9, [sp, #4]
 800ae18:	464b      	mov	r3, r9
 800ae1a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800ae1e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ae20:	2200      	movs	r2, #0
 800ae22:	6042      	str	r2, [r0, #4]
 800ae24:	2204      	movs	r2, #4
 800ae26:	f102 0614 	add.w	r6, r2, #20
 800ae2a:	429e      	cmp	r6, r3
 800ae2c:	6841      	ldr	r1, [r0, #4]
 800ae2e:	d92f      	bls.n	800ae90 <_dtoa_r+0x2d8>
 800ae30:	4620      	mov	r0, r4
 800ae32:	f001 fa6b 	bl	800c30c <_Balloc>
 800ae36:	9000      	str	r0, [sp, #0]
 800ae38:	2800      	cmp	r0, #0
 800ae3a:	d14b      	bne.n	800aed4 <_dtoa_r+0x31c>
 800ae3c:	4b24      	ldr	r3, [pc, #144]	; (800aed0 <_dtoa_r+0x318>)
 800ae3e:	4602      	mov	r2, r0
 800ae40:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ae44:	e6d1      	b.n	800abea <_dtoa_r+0x32>
 800ae46:	2301      	movs	r3, #1
 800ae48:	e7de      	b.n	800ae08 <_dtoa_r+0x250>
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	9308      	str	r3, [sp, #32]
 800ae4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae50:	eb0a 0903 	add.w	r9, sl, r3
 800ae54:	f109 0301 	add.w	r3, r9, #1
 800ae58:	2b01      	cmp	r3, #1
 800ae5a:	9301      	str	r3, [sp, #4]
 800ae5c:	bfb8      	it	lt
 800ae5e:	2301      	movlt	r3, #1
 800ae60:	e7dd      	b.n	800ae1e <_dtoa_r+0x266>
 800ae62:	2301      	movs	r3, #1
 800ae64:	e7f2      	b.n	800ae4c <_dtoa_r+0x294>
 800ae66:	2501      	movs	r5, #1
 800ae68:	2300      	movs	r3, #0
 800ae6a:	9305      	str	r3, [sp, #20]
 800ae6c:	9508      	str	r5, [sp, #32]
 800ae6e:	f04f 39ff 	mov.w	r9, #4294967295
 800ae72:	2200      	movs	r2, #0
 800ae74:	f8cd 9004 	str.w	r9, [sp, #4]
 800ae78:	2312      	movs	r3, #18
 800ae7a:	9209      	str	r2, [sp, #36]	; 0x24
 800ae7c:	e7cf      	b.n	800ae1e <_dtoa_r+0x266>
 800ae7e:	2301      	movs	r3, #1
 800ae80:	9308      	str	r3, [sp, #32]
 800ae82:	e7f4      	b.n	800ae6e <_dtoa_r+0x2b6>
 800ae84:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800ae88:	f8cd 9004 	str.w	r9, [sp, #4]
 800ae8c:	464b      	mov	r3, r9
 800ae8e:	e7c6      	b.n	800ae1e <_dtoa_r+0x266>
 800ae90:	3101      	adds	r1, #1
 800ae92:	6041      	str	r1, [r0, #4]
 800ae94:	0052      	lsls	r2, r2, #1
 800ae96:	e7c6      	b.n	800ae26 <_dtoa_r+0x26e>
 800ae98:	636f4361 	.word	0x636f4361
 800ae9c:	3fd287a7 	.word	0x3fd287a7
 800aea0:	8b60c8b3 	.word	0x8b60c8b3
 800aea4:	3fc68a28 	.word	0x3fc68a28
 800aea8:	509f79fb 	.word	0x509f79fb
 800aeac:	3fd34413 	.word	0x3fd34413
 800aeb0:	0800f5f6 	.word	0x0800f5f6
 800aeb4:	0800f60d 	.word	0x0800f60d
 800aeb8:	7ff00000 	.word	0x7ff00000
 800aebc:	0800f5f2 	.word	0x0800f5f2
 800aec0:	0800f5e9 	.word	0x0800f5e9
 800aec4:	0800f8d2 	.word	0x0800f8d2
 800aec8:	3ff80000 	.word	0x3ff80000
 800aecc:	0800f7e8 	.word	0x0800f7e8
 800aed0:	0800f66c 	.word	0x0800f66c
 800aed4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aed6:	9a00      	ldr	r2, [sp, #0]
 800aed8:	601a      	str	r2, [r3, #0]
 800aeda:	9b01      	ldr	r3, [sp, #4]
 800aedc:	2b0e      	cmp	r3, #14
 800aede:	f200 80ad 	bhi.w	800b03c <_dtoa_r+0x484>
 800aee2:	2d00      	cmp	r5, #0
 800aee4:	f000 80aa 	beq.w	800b03c <_dtoa_r+0x484>
 800aee8:	f1ba 0f00 	cmp.w	sl, #0
 800aeec:	dd36      	ble.n	800af5c <_dtoa_r+0x3a4>
 800aeee:	4ac3      	ldr	r2, [pc, #780]	; (800b1fc <_dtoa_r+0x644>)
 800aef0:	f00a 030f 	and.w	r3, sl, #15
 800aef4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800aef8:	ed93 7b00 	vldr	d7, [r3]
 800aefc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800af00:	ea4f 172a 	mov.w	r7, sl, asr #4
 800af04:	eeb0 8a47 	vmov.f32	s16, s14
 800af08:	eef0 8a67 	vmov.f32	s17, s15
 800af0c:	d016      	beq.n	800af3c <_dtoa_r+0x384>
 800af0e:	4bbc      	ldr	r3, [pc, #752]	; (800b200 <_dtoa_r+0x648>)
 800af10:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800af14:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800af18:	f7f5 fc98 	bl	800084c <__aeabi_ddiv>
 800af1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af20:	f007 070f 	and.w	r7, r7, #15
 800af24:	2503      	movs	r5, #3
 800af26:	4eb6      	ldr	r6, [pc, #728]	; (800b200 <_dtoa_r+0x648>)
 800af28:	b957      	cbnz	r7, 800af40 <_dtoa_r+0x388>
 800af2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af2e:	ec53 2b18 	vmov	r2, r3, d8
 800af32:	f7f5 fc8b 	bl	800084c <__aeabi_ddiv>
 800af36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af3a:	e029      	b.n	800af90 <_dtoa_r+0x3d8>
 800af3c:	2502      	movs	r5, #2
 800af3e:	e7f2      	b.n	800af26 <_dtoa_r+0x36e>
 800af40:	07f9      	lsls	r1, r7, #31
 800af42:	d508      	bpl.n	800af56 <_dtoa_r+0x39e>
 800af44:	ec51 0b18 	vmov	r0, r1, d8
 800af48:	e9d6 2300 	ldrd	r2, r3, [r6]
 800af4c:	f7f5 fb54 	bl	80005f8 <__aeabi_dmul>
 800af50:	ec41 0b18 	vmov	d8, r0, r1
 800af54:	3501      	adds	r5, #1
 800af56:	107f      	asrs	r7, r7, #1
 800af58:	3608      	adds	r6, #8
 800af5a:	e7e5      	b.n	800af28 <_dtoa_r+0x370>
 800af5c:	f000 80a6 	beq.w	800b0ac <_dtoa_r+0x4f4>
 800af60:	f1ca 0600 	rsb	r6, sl, #0
 800af64:	4ba5      	ldr	r3, [pc, #660]	; (800b1fc <_dtoa_r+0x644>)
 800af66:	4fa6      	ldr	r7, [pc, #664]	; (800b200 <_dtoa_r+0x648>)
 800af68:	f006 020f 	and.w	r2, r6, #15
 800af6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800af70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af74:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800af78:	f7f5 fb3e 	bl	80005f8 <__aeabi_dmul>
 800af7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af80:	1136      	asrs	r6, r6, #4
 800af82:	2300      	movs	r3, #0
 800af84:	2502      	movs	r5, #2
 800af86:	2e00      	cmp	r6, #0
 800af88:	f040 8085 	bne.w	800b096 <_dtoa_r+0x4de>
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d1d2      	bne.n	800af36 <_dtoa_r+0x37e>
 800af90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af92:	2b00      	cmp	r3, #0
 800af94:	f000 808c 	beq.w	800b0b0 <_dtoa_r+0x4f8>
 800af98:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800af9c:	4b99      	ldr	r3, [pc, #612]	; (800b204 <_dtoa_r+0x64c>)
 800af9e:	2200      	movs	r2, #0
 800afa0:	4630      	mov	r0, r6
 800afa2:	4639      	mov	r1, r7
 800afa4:	f7f5 fd9a 	bl	8000adc <__aeabi_dcmplt>
 800afa8:	2800      	cmp	r0, #0
 800afaa:	f000 8081 	beq.w	800b0b0 <_dtoa_r+0x4f8>
 800afae:	9b01      	ldr	r3, [sp, #4]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d07d      	beq.n	800b0b0 <_dtoa_r+0x4f8>
 800afb4:	f1b9 0f00 	cmp.w	r9, #0
 800afb8:	dd3c      	ble.n	800b034 <_dtoa_r+0x47c>
 800afba:	f10a 33ff 	add.w	r3, sl, #4294967295
 800afbe:	9307      	str	r3, [sp, #28]
 800afc0:	2200      	movs	r2, #0
 800afc2:	4b91      	ldr	r3, [pc, #580]	; (800b208 <_dtoa_r+0x650>)
 800afc4:	4630      	mov	r0, r6
 800afc6:	4639      	mov	r1, r7
 800afc8:	f7f5 fb16 	bl	80005f8 <__aeabi_dmul>
 800afcc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800afd0:	3501      	adds	r5, #1
 800afd2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800afd6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800afda:	4628      	mov	r0, r5
 800afdc:	f7f5 faa2 	bl	8000524 <__aeabi_i2d>
 800afe0:	4632      	mov	r2, r6
 800afe2:	463b      	mov	r3, r7
 800afe4:	f7f5 fb08 	bl	80005f8 <__aeabi_dmul>
 800afe8:	4b88      	ldr	r3, [pc, #544]	; (800b20c <_dtoa_r+0x654>)
 800afea:	2200      	movs	r2, #0
 800afec:	f7f5 f94e 	bl	800028c <__adddf3>
 800aff0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800aff4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aff8:	9303      	str	r3, [sp, #12]
 800affa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800affc:	2b00      	cmp	r3, #0
 800affe:	d15c      	bne.n	800b0ba <_dtoa_r+0x502>
 800b000:	4b83      	ldr	r3, [pc, #524]	; (800b210 <_dtoa_r+0x658>)
 800b002:	2200      	movs	r2, #0
 800b004:	4630      	mov	r0, r6
 800b006:	4639      	mov	r1, r7
 800b008:	f7f5 f93e 	bl	8000288 <__aeabi_dsub>
 800b00c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b010:	4606      	mov	r6, r0
 800b012:	460f      	mov	r7, r1
 800b014:	f7f5 fd80 	bl	8000b18 <__aeabi_dcmpgt>
 800b018:	2800      	cmp	r0, #0
 800b01a:	f040 8296 	bne.w	800b54a <_dtoa_r+0x992>
 800b01e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b022:	4630      	mov	r0, r6
 800b024:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b028:	4639      	mov	r1, r7
 800b02a:	f7f5 fd57 	bl	8000adc <__aeabi_dcmplt>
 800b02e:	2800      	cmp	r0, #0
 800b030:	f040 8288 	bne.w	800b544 <_dtoa_r+0x98c>
 800b034:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b038:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b03c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b03e:	2b00      	cmp	r3, #0
 800b040:	f2c0 8158 	blt.w	800b2f4 <_dtoa_r+0x73c>
 800b044:	f1ba 0f0e 	cmp.w	sl, #14
 800b048:	f300 8154 	bgt.w	800b2f4 <_dtoa_r+0x73c>
 800b04c:	4b6b      	ldr	r3, [pc, #428]	; (800b1fc <_dtoa_r+0x644>)
 800b04e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b052:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b056:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b058:	2b00      	cmp	r3, #0
 800b05a:	f280 80e3 	bge.w	800b224 <_dtoa_r+0x66c>
 800b05e:	9b01      	ldr	r3, [sp, #4]
 800b060:	2b00      	cmp	r3, #0
 800b062:	f300 80df 	bgt.w	800b224 <_dtoa_r+0x66c>
 800b066:	f040 826d 	bne.w	800b544 <_dtoa_r+0x98c>
 800b06a:	4b69      	ldr	r3, [pc, #420]	; (800b210 <_dtoa_r+0x658>)
 800b06c:	2200      	movs	r2, #0
 800b06e:	4640      	mov	r0, r8
 800b070:	4649      	mov	r1, r9
 800b072:	f7f5 fac1 	bl	80005f8 <__aeabi_dmul>
 800b076:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b07a:	f7f5 fd43 	bl	8000b04 <__aeabi_dcmpge>
 800b07e:	9e01      	ldr	r6, [sp, #4]
 800b080:	4637      	mov	r7, r6
 800b082:	2800      	cmp	r0, #0
 800b084:	f040 8243 	bne.w	800b50e <_dtoa_r+0x956>
 800b088:	9d00      	ldr	r5, [sp, #0]
 800b08a:	2331      	movs	r3, #49	; 0x31
 800b08c:	f805 3b01 	strb.w	r3, [r5], #1
 800b090:	f10a 0a01 	add.w	sl, sl, #1
 800b094:	e23f      	b.n	800b516 <_dtoa_r+0x95e>
 800b096:	07f2      	lsls	r2, r6, #31
 800b098:	d505      	bpl.n	800b0a6 <_dtoa_r+0x4ee>
 800b09a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b09e:	f7f5 faab 	bl	80005f8 <__aeabi_dmul>
 800b0a2:	3501      	adds	r5, #1
 800b0a4:	2301      	movs	r3, #1
 800b0a6:	1076      	asrs	r6, r6, #1
 800b0a8:	3708      	adds	r7, #8
 800b0aa:	e76c      	b.n	800af86 <_dtoa_r+0x3ce>
 800b0ac:	2502      	movs	r5, #2
 800b0ae:	e76f      	b.n	800af90 <_dtoa_r+0x3d8>
 800b0b0:	9b01      	ldr	r3, [sp, #4]
 800b0b2:	f8cd a01c 	str.w	sl, [sp, #28]
 800b0b6:	930c      	str	r3, [sp, #48]	; 0x30
 800b0b8:	e78d      	b.n	800afd6 <_dtoa_r+0x41e>
 800b0ba:	9900      	ldr	r1, [sp, #0]
 800b0bc:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b0be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b0c0:	4b4e      	ldr	r3, [pc, #312]	; (800b1fc <_dtoa_r+0x644>)
 800b0c2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b0c6:	4401      	add	r1, r0
 800b0c8:	9102      	str	r1, [sp, #8]
 800b0ca:	9908      	ldr	r1, [sp, #32]
 800b0cc:	eeb0 8a47 	vmov.f32	s16, s14
 800b0d0:	eef0 8a67 	vmov.f32	s17, s15
 800b0d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b0d8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b0dc:	2900      	cmp	r1, #0
 800b0de:	d045      	beq.n	800b16c <_dtoa_r+0x5b4>
 800b0e0:	494c      	ldr	r1, [pc, #304]	; (800b214 <_dtoa_r+0x65c>)
 800b0e2:	2000      	movs	r0, #0
 800b0e4:	f7f5 fbb2 	bl	800084c <__aeabi_ddiv>
 800b0e8:	ec53 2b18 	vmov	r2, r3, d8
 800b0ec:	f7f5 f8cc 	bl	8000288 <__aeabi_dsub>
 800b0f0:	9d00      	ldr	r5, [sp, #0]
 800b0f2:	ec41 0b18 	vmov	d8, r0, r1
 800b0f6:	4639      	mov	r1, r7
 800b0f8:	4630      	mov	r0, r6
 800b0fa:	f7f5 fd2d 	bl	8000b58 <__aeabi_d2iz>
 800b0fe:	900c      	str	r0, [sp, #48]	; 0x30
 800b100:	f7f5 fa10 	bl	8000524 <__aeabi_i2d>
 800b104:	4602      	mov	r2, r0
 800b106:	460b      	mov	r3, r1
 800b108:	4630      	mov	r0, r6
 800b10a:	4639      	mov	r1, r7
 800b10c:	f7f5 f8bc 	bl	8000288 <__aeabi_dsub>
 800b110:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b112:	3330      	adds	r3, #48	; 0x30
 800b114:	f805 3b01 	strb.w	r3, [r5], #1
 800b118:	ec53 2b18 	vmov	r2, r3, d8
 800b11c:	4606      	mov	r6, r0
 800b11e:	460f      	mov	r7, r1
 800b120:	f7f5 fcdc 	bl	8000adc <__aeabi_dcmplt>
 800b124:	2800      	cmp	r0, #0
 800b126:	d165      	bne.n	800b1f4 <_dtoa_r+0x63c>
 800b128:	4632      	mov	r2, r6
 800b12a:	463b      	mov	r3, r7
 800b12c:	4935      	ldr	r1, [pc, #212]	; (800b204 <_dtoa_r+0x64c>)
 800b12e:	2000      	movs	r0, #0
 800b130:	f7f5 f8aa 	bl	8000288 <__aeabi_dsub>
 800b134:	ec53 2b18 	vmov	r2, r3, d8
 800b138:	f7f5 fcd0 	bl	8000adc <__aeabi_dcmplt>
 800b13c:	2800      	cmp	r0, #0
 800b13e:	f040 80b9 	bne.w	800b2b4 <_dtoa_r+0x6fc>
 800b142:	9b02      	ldr	r3, [sp, #8]
 800b144:	429d      	cmp	r5, r3
 800b146:	f43f af75 	beq.w	800b034 <_dtoa_r+0x47c>
 800b14a:	4b2f      	ldr	r3, [pc, #188]	; (800b208 <_dtoa_r+0x650>)
 800b14c:	ec51 0b18 	vmov	r0, r1, d8
 800b150:	2200      	movs	r2, #0
 800b152:	f7f5 fa51 	bl	80005f8 <__aeabi_dmul>
 800b156:	4b2c      	ldr	r3, [pc, #176]	; (800b208 <_dtoa_r+0x650>)
 800b158:	ec41 0b18 	vmov	d8, r0, r1
 800b15c:	2200      	movs	r2, #0
 800b15e:	4630      	mov	r0, r6
 800b160:	4639      	mov	r1, r7
 800b162:	f7f5 fa49 	bl	80005f8 <__aeabi_dmul>
 800b166:	4606      	mov	r6, r0
 800b168:	460f      	mov	r7, r1
 800b16a:	e7c4      	b.n	800b0f6 <_dtoa_r+0x53e>
 800b16c:	ec51 0b17 	vmov	r0, r1, d7
 800b170:	f7f5 fa42 	bl	80005f8 <__aeabi_dmul>
 800b174:	9b02      	ldr	r3, [sp, #8]
 800b176:	9d00      	ldr	r5, [sp, #0]
 800b178:	930c      	str	r3, [sp, #48]	; 0x30
 800b17a:	ec41 0b18 	vmov	d8, r0, r1
 800b17e:	4639      	mov	r1, r7
 800b180:	4630      	mov	r0, r6
 800b182:	f7f5 fce9 	bl	8000b58 <__aeabi_d2iz>
 800b186:	9011      	str	r0, [sp, #68]	; 0x44
 800b188:	f7f5 f9cc 	bl	8000524 <__aeabi_i2d>
 800b18c:	4602      	mov	r2, r0
 800b18e:	460b      	mov	r3, r1
 800b190:	4630      	mov	r0, r6
 800b192:	4639      	mov	r1, r7
 800b194:	f7f5 f878 	bl	8000288 <__aeabi_dsub>
 800b198:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b19a:	3330      	adds	r3, #48	; 0x30
 800b19c:	f805 3b01 	strb.w	r3, [r5], #1
 800b1a0:	9b02      	ldr	r3, [sp, #8]
 800b1a2:	429d      	cmp	r5, r3
 800b1a4:	4606      	mov	r6, r0
 800b1a6:	460f      	mov	r7, r1
 800b1a8:	f04f 0200 	mov.w	r2, #0
 800b1ac:	d134      	bne.n	800b218 <_dtoa_r+0x660>
 800b1ae:	4b19      	ldr	r3, [pc, #100]	; (800b214 <_dtoa_r+0x65c>)
 800b1b0:	ec51 0b18 	vmov	r0, r1, d8
 800b1b4:	f7f5 f86a 	bl	800028c <__adddf3>
 800b1b8:	4602      	mov	r2, r0
 800b1ba:	460b      	mov	r3, r1
 800b1bc:	4630      	mov	r0, r6
 800b1be:	4639      	mov	r1, r7
 800b1c0:	f7f5 fcaa 	bl	8000b18 <__aeabi_dcmpgt>
 800b1c4:	2800      	cmp	r0, #0
 800b1c6:	d175      	bne.n	800b2b4 <_dtoa_r+0x6fc>
 800b1c8:	ec53 2b18 	vmov	r2, r3, d8
 800b1cc:	4911      	ldr	r1, [pc, #68]	; (800b214 <_dtoa_r+0x65c>)
 800b1ce:	2000      	movs	r0, #0
 800b1d0:	f7f5 f85a 	bl	8000288 <__aeabi_dsub>
 800b1d4:	4602      	mov	r2, r0
 800b1d6:	460b      	mov	r3, r1
 800b1d8:	4630      	mov	r0, r6
 800b1da:	4639      	mov	r1, r7
 800b1dc:	f7f5 fc7e 	bl	8000adc <__aeabi_dcmplt>
 800b1e0:	2800      	cmp	r0, #0
 800b1e2:	f43f af27 	beq.w	800b034 <_dtoa_r+0x47c>
 800b1e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b1e8:	1e6b      	subs	r3, r5, #1
 800b1ea:	930c      	str	r3, [sp, #48]	; 0x30
 800b1ec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b1f0:	2b30      	cmp	r3, #48	; 0x30
 800b1f2:	d0f8      	beq.n	800b1e6 <_dtoa_r+0x62e>
 800b1f4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800b1f8:	e04a      	b.n	800b290 <_dtoa_r+0x6d8>
 800b1fa:	bf00      	nop
 800b1fc:	0800f7e8 	.word	0x0800f7e8
 800b200:	0800f7c0 	.word	0x0800f7c0
 800b204:	3ff00000 	.word	0x3ff00000
 800b208:	40240000 	.word	0x40240000
 800b20c:	401c0000 	.word	0x401c0000
 800b210:	40140000 	.word	0x40140000
 800b214:	3fe00000 	.word	0x3fe00000
 800b218:	4baf      	ldr	r3, [pc, #700]	; (800b4d8 <_dtoa_r+0x920>)
 800b21a:	f7f5 f9ed 	bl	80005f8 <__aeabi_dmul>
 800b21e:	4606      	mov	r6, r0
 800b220:	460f      	mov	r7, r1
 800b222:	e7ac      	b.n	800b17e <_dtoa_r+0x5c6>
 800b224:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b228:	9d00      	ldr	r5, [sp, #0]
 800b22a:	4642      	mov	r2, r8
 800b22c:	464b      	mov	r3, r9
 800b22e:	4630      	mov	r0, r6
 800b230:	4639      	mov	r1, r7
 800b232:	f7f5 fb0b 	bl	800084c <__aeabi_ddiv>
 800b236:	f7f5 fc8f 	bl	8000b58 <__aeabi_d2iz>
 800b23a:	9002      	str	r0, [sp, #8]
 800b23c:	f7f5 f972 	bl	8000524 <__aeabi_i2d>
 800b240:	4642      	mov	r2, r8
 800b242:	464b      	mov	r3, r9
 800b244:	f7f5 f9d8 	bl	80005f8 <__aeabi_dmul>
 800b248:	4602      	mov	r2, r0
 800b24a:	460b      	mov	r3, r1
 800b24c:	4630      	mov	r0, r6
 800b24e:	4639      	mov	r1, r7
 800b250:	f7f5 f81a 	bl	8000288 <__aeabi_dsub>
 800b254:	9e02      	ldr	r6, [sp, #8]
 800b256:	9f01      	ldr	r7, [sp, #4]
 800b258:	3630      	adds	r6, #48	; 0x30
 800b25a:	f805 6b01 	strb.w	r6, [r5], #1
 800b25e:	9e00      	ldr	r6, [sp, #0]
 800b260:	1bae      	subs	r6, r5, r6
 800b262:	42b7      	cmp	r7, r6
 800b264:	4602      	mov	r2, r0
 800b266:	460b      	mov	r3, r1
 800b268:	d137      	bne.n	800b2da <_dtoa_r+0x722>
 800b26a:	f7f5 f80f 	bl	800028c <__adddf3>
 800b26e:	4642      	mov	r2, r8
 800b270:	464b      	mov	r3, r9
 800b272:	4606      	mov	r6, r0
 800b274:	460f      	mov	r7, r1
 800b276:	f7f5 fc4f 	bl	8000b18 <__aeabi_dcmpgt>
 800b27a:	b9c8      	cbnz	r0, 800b2b0 <_dtoa_r+0x6f8>
 800b27c:	4642      	mov	r2, r8
 800b27e:	464b      	mov	r3, r9
 800b280:	4630      	mov	r0, r6
 800b282:	4639      	mov	r1, r7
 800b284:	f7f5 fc20 	bl	8000ac8 <__aeabi_dcmpeq>
 800b288:	b110      	cbz	r0, 800b290 <_dtoa_r+0x6d8>
 800b28a:	9b02      	ldr	r3, [sp, #8]
 800b28c:	07d9      	lsls	r1, r3, #31
 800b28e:	d40f      	bmi.n	800b2b0 <_dtoa_r+0x6f8>
 800b290:	4620      	mov	r0, r4
 800b292:	4659      	mov	r1, fp
 800b294:	f001 f87a 	bl	800c38c <_Bfree>
 800b298:	2300      	movs	r3, #0
 800b29a:	702b      	strb	r3, [r5, #0]
 800b29c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b29e:	f10a 0001 	add.w	r0, sl, #1
 800b2a2:	6018      	str	r0, [r3, #0]
 800b2a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	f43f acd8 	beq.w	800ac5c <_dtoa_r+0xa4>
 800b2ac:	601d      	str	r5, [r3, #0]
 800b2ae:	e4d5      	b.n	800ac5c <_dtoa_r+0xa4>
 800b2b0:	f8cd a01c 	str.w	sl, [sp, #28]
 800b2b4:	462b      	mov	r3, r5
 800b2b6:	461d      	mov	r5, r3
 800b2b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b2bc:	2a39      	cmp	r2, #57	; 0x39
 800b2be:	d108      	bne.n	800b2d2 <_dtoa_r+0x71a>
 800b2c0:	9a00      	ldr	r2, [sp, #0]
 800b2c2:	429a      	cmp	r2, r3
 800b2c4:	d1f7      	bne.n	800b2b6 <_dtoa_r+0x6fe>
 800b2c6:	9a07      	ldr	r2, [sp, #28]
 800b2c8:	9900      	ldr	r1, [sp, #0]
 800b2ca:	3201      	adds	r2, #1
 800b2cc:	9207      	str	r2, [sp, #28]
 800b2ce:	2230      	movs	r2, #48	; 0x30
 800b2d0:	700a      	strb	r2, [r1, #0]
 800b2d2:	781a      	ldrb	r2, [r3, #0]
 800b2d4:	3201      	adds	r2, #1
 800b2d6:	701a      	strb	r2, [r3, #0]
 800b2d8:	e78c      	b.n	800b1f4 <_dtoa_r+0x63c>
 800b2da:	4b7f      	ldr	r3, [pc, #508]	; (800b4d8 <_dtoa_r+0x920>)
 800b2dc:	2200      	movs	r2, #0
 800b2de:	f7f5 f98b 	bl	80005f8 <__aeabi_dmul>
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	4606      	mov	r6, r0
 800b2e8:	460f      	mov	r7, r1
 800b2ea:	f7f5 fbed 	bl	8000ac8 <__aeabi_dcmpeq>
 800b2ee:	2800      	cmp	r0, #0
 800b2f0:	d09b      	beq.n	800b22a <_dtoa_r+0x672>
 800b2f2:	e7cd      	b.n	800b290 <_dtoa_r+0x6d8>
 800b2f4:	9a08      	ldr	r2, [sp, #32]
 800b2f6:	2a00      	cmp	r2, #0
 800b2f8:	f000 80c4 	beq.w	800b484 <_dtoa_r+0x8cc>
 800b2fc:	9a05      	ldr	r2, [sp, #20]
 800b2fe:	2a01      	cmp	r2, #1
 800b300:	f300 80a8 	bgt.w	800b454 <_dtoa_r+0x89c>
 800b304:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b306:	2a00      	cmp	r2, #0
 800b308:	f000 80a0 	beq.w	800b44c <_dtoa_r+0x894>
 800b30c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b310:	9e06      	ldr	r6, [sp, #24]
 800b312:	4645      	mov	r5, r8
 800b314:	9a04      	ldr	r2, [sp, #16]
 800b316:	2101      	movs	r1, #1
 800b318:	441a      	add	r2, r3
 800b31a:	4620      	mov	r0, r4
 800b31c:	4498      	add	r8, r3
 800b31e:	9204      	str	r2, [sp, #16]
 800b320:	f001 f93a 	bl	800c598 <__i2b>
 800b324:	4607      	mov	r7, r0
 800b326:	2d00      	cmp	r5, #0
 800b328:	dd0b      	ble.n	800b342 <_dtoa_r+0x78a>
 800b32a:	9b04      	ldr	r3, [sp, #16]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	dd08      	ble.n	800b342 <_dtoa_r+0x78a>
 800b330:	42ab      	cmp	r3, r5
 800b332:	9a04      	ldr	r2, [sp, #16]
 800b334:	bfa8      	it	ge
 800b336:	462b      	movge	r3, r5
 800b338:	eba8 0803 	sub.w	r8, r8, r3
 800b33c:	1aed      	subs	r5, r5, r3
 800b33e:	1ad3      	subs	r3, r2, r3
 800b340:	9304      	str	r3, [sp, #16]
 800b342:	9b06      	ldr	r3, [sp, #24]
 800b344:	b1fb      	cbz	r3, 800b386 <_dtoa_r+0x7ce>
 800b346:	9b08      	ldr	r3, [sp, #32]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	f000 809f 	beq.w	800b48c <_dtoa_r+0x8d4>
 800b34e:	2e00      	cmp	r6, #0
 800b350:	dd11      	ble.n	800b376 <_dtoa_r+0x7be>
 800b352:	4639      	mov	r1, r7
 800b354:	4632      	mov	r2, r6
 800b356:	4620      	mov	r0, r4
 800b358:	f001 f9da 	bl	800c710 <__pow5mult>
 800b35c:	465a      	mov	r2, fp
 800b35e:	4601      	mov	r1, r0
 800b360:	4607      	mov	r7, r0
 800b362:	4620      	mov	r0, r4
 800b364:	f001 f92e 	bl	800c5c4 <__multiply>
 800b368:	4659      	mov	r1, fp
 800b36a:	9007      	str	r0, [sp, #28]
 800b36c:	4620      	mov	r0, r4
 800b36e:	f001 f80d 	bl	800c38c <_Bfree>
 800b372:	9b07      	ldr	r3, [sp, #28]
 800b374:	469b      	mov	fp, r3
 800b376:	9b06      	ldr	r3, [sp, #24]
 800b378:	1b9a      	subs	r2, r3, r6
 800b37a:	d004      	beq.n	800b386 <_dtoa_r+0x7ce>
 800b37c:	4659      	mov	r1, fp
 800b37e:	4620      	mov	r0, r4
 800b380:	f001 f9c6 	bl	800c710 <__pow5mult>
 800b384:	4683      	mov	fp, r0
 800b386:	2101      	movs	r1, #1
 800b388:	4620      	mov	r0, r4
 800b38a:	f001 f905 	bl	800c598 <__i2b>
 800b38e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b390:	2b00      	cmp	r3, #0
 800b392:	4606      	mov	r6, r0
 800b394:	dd7c      	ble.n	800b490 <_dtoa_r+0x8d8>
 800b396:	461a      	mov	r2, r3
 800b398:	4601      	mov	r1, r0
 800b39a:	4620      	mov	r0, r4
 800b39c:	f001 f9b8 	bl	800c710 <__pow5mult>
 800b3a0:	9b05      	ldr	r3, [sp, #20]
 800b3a2:	2b01      	cmp	r3, #1
 800b3a4:	4606      	mov	r6, r0
 800b3a6:	dd76      	ble.n	800b496 <_dtoa_r+0x8de>
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	9306      	str	r3, [sp, #24]
 800b3ac:	6933      	ldr	r3, [r6, #16]
 800b3ae:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b3b2:	6918      	ldr	r0, [r3, #16]
 800b3b4:	f001 f8a0 	bl	800c4f8 <__hi0bits>
 800b3b8:	f1c0 0020 	rsb	r0, r0, #32
 800b3bc:	9b04      	ldr	r3, [sp, #16]
 800b3be:	4418      	add	r0, r3
 800b3c0:	f010 001f 	ands.w	r0, r0, #31
 800b3c4:	f000 8086 	beq.w	800b4d4 <_dtoa_r+0x91c>
 800b3c8:	f1c0 0320 	rsb	r3, r0, #32
 800b3cc:	2b04      	cmp	r3, #4
 800b3ce:	dd7f      	ble.n	800b4d0 <_dtoa_r+0x918>
 800b3d0:	f1c0 001c 	rsb	r0, r0, #28
 800b3d4:	9b04      	ldr	r3, [sp, #16]
 800b3d6:	4403      	add	r3, r0
 800b3d8:	4480      	add	r8, r0
 800b3da:	4405      	add	r5, r0
 800b3dc:	9304      	str	r3, [sp, #16]
 800b3de:	f1b8 0f00 	cmp.w	r8, #0
 800b3e2:	dd05      	ble.n	800b3f0 <_dtoa_r+0x838>
 800b3e4:	4659      	mov	r1, fp
 800b3e6:	4642      	mov	r2, r8
 800b3e8:	4620      	mov	r0, r4
 800b3ea:	f001 f9eb 	bl	800c7c4 <__lshift>
 800b3ee:	4683      	mov	fp, r0
 800b3f0:	9b04      	ldr	r3, [sp, #16]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	dd05      	ble.n	800b402 <_dtoa_r+0x84a>
 800b3f6:	4631      	mov	r1, r6
 800b3f8:	461a      	mov	r2, r3
 800b3fa:	4620      	mov	r0, r4
 800b3fc:	f001 f9e2 	bl	800c7c4 <__lshift>
 800b400:	4606      	mov	r6, r0
 800b402:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b404:	2b00      	cmp	r3, #0
 800b406:	d069      	beq.n	800b4dc <_dtoa_r+0x924>
 800b408:	4631      	mov	r1, r6
 800b40a:	4658      	mov	r0, fp
 800b40c:	f001 fa46 	bl	800c89c <__mcmp>
 800b410:	2800      	cmp	r0, #0
 800b412:	da63      	bge.n	800b4dc <_dtoa_r+0x924>
 800b414:	2300      	movs	r3, #0
 800b416:	4659      	mov	r1, fp
 800b418:	220a      	movs	r2, #10
 800b41a:	4620      	mov	r0, r4
 800b41c:	f000 ffd8 	bl	800c3d0 <__multadd>
 800b420:	9b08      	ldr	r3, [sp, #32]
 800b422:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b426:	4683      	mov	fp, r0
 800b428:	2b00      	cmp	r3, #0
 800b42a:	f000 818f 	beq.w	800b74c <_dtoa_r+0xb94>
 800b42e:	4639      	mov	r1, r7
 800b430:	2300      	movs	r3, #0
 800b432:	220a      	movs	r2, #10
 800b434:	4620      	mov	r0, r4
 800b436:	f000 ffcb 	bl	800c3d0 <__multadd>
 800b43a:	f1b9 0f00 	cmp.w	r9, #0
 800b43e:	4607      	mov	r7, r0
 800b440:	f300 808e 	bgt.w	800b560 <_dtoa_r+0x9a8>
 800b444:	9b05      	ldr	r3, [sp, #20]
 800b446:	2b02      	cmp	r3, #2
 800b448:	dc50      	bgt.n	800b4ec <_dtoa_r+0x934>
 800b44a:	e089      	b.n	800b560 <_dtoa_r+0x9a8>
 800b44c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b44e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b452:	e75d      	b.n	800b310 <_dtoa_r+0x758>
 800b454:	9b01      	ldr	r3, [sp, #4]
 800b456:	1e5e      	subs	r6, r3, #1
 800b458:	9b06      	ldr	r3, [sp, #24]
 800b45a:	42b3      	cmp	r3, r6
 800b45c:	bfbf      	itttt	lt
 800b45e:	9b06      	ldrlt	r3, [sp, #24]
 800b460:	9606      	strlt	r6, [sp, #24]
 800b462:	1af2      	sublt	r2, r6, r3
 800b464:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800b466:	bfb6      	itet	lt
 800b468:	189b      	addlt	r3, r3, r2
 800b46a:	1b9e      	subge	r6, r3, r6
 800b46c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800b46e:	9b01      	ldr	r3, [sp, #4]
 800b470:	bfb8      	it	lt
 800b472:	2600      	movlt	r6, #0
 800b474:	2b00      	cmp	r3, #0
 800b476:	bfb5      	itete	lt
 800b478:	eba8 0503 	sublt.w	r5, r8, r3
 800b47c:	9b01      	ldrge	r3, [sp, #4]
 800b47e:	2300      	movlt	r3, #0
 800b480:	4645      	movge	r5, r8
 800b482:	e747      	b.n	800b314 <_dtoa_r+0x75c>
 800b484:	9e06      	ldr	r6, [sp, #24]
 800b486:	9f08      	ldr	r7, [sp, #32]
 800b488:	4645      	mov	r5, r8
 800b48a:	e74c      	b.n	800b326 <_dtoa_r+0x76e>
 800b48c:	9a06      	ldr	r2, [sp, #24]
 800b48e:	e775      	b.n	800b37c <_dtoa_r+0x7c4>
 800b490:	9b05      	ldr	r3, [sp, #20]
 800b492:	2b01      	cmp	r3, #1
 800b494:	dc18      	bgt.n	800b4c8 <_dtoa_r+0x910>
 800b496:	9b02      	ldr	r3, [sp, #8]
 800b498:	b9b3      	cbnz	r3, 800b4c8 <_dtoa_r+0x910>
 800b49a:	9b03      	ldr	r3, [sp, #12]
 800b49c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b4a0:	b9a3      	cbnz	r3, 800b4cc <_dtoa_r+0x914>
 800b4a2:	9b03      	ldr	r3, [sp, #12]
 800b4a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b4a8:	0d1b      	lsrs	r3, r3, #20
 800b4aa:	051b      	lsls	r3, r3, #20
 800b4ac:	b12b      	cbz	r3, 800b4ba <_dtoa_r+0x902>
 800b4ae:	9b04      	ldr	r3, [sp, #16]
 800b4b0:	3301      	adds	r3, #1
 800b4b2:	9304      	str	r3, [sp, #16]
 800b4b4:	f108 0801 	add.w	r8, r8, #1
 800b4b8:	2301      	movs	r3, #1
 800b4ba:	9306      	str	r3, [sp, #24]
 800b4bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	f47f af74 	bne.w	800b3ac <_dtoa_r+0x7f4>
 800b4c4:	2001      	movs	r0, #1
 800b4c6:	e779      	b.n	800b3bc <_dtoa_r+0x804>
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	e7f6      	b.n	800b4ba <_dtoa_r+0x902>
 800b4cc:	9b02      	ldr	r3, [sp, #8]
 800b4ce:	e7f4      	b.n	800b4ba <_dtoa_r+0x902>
 800b4d0:	d085      	beq.n	800b3de <_dtoa_r+0x826>
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	301c      	adds	r0, #28
 800b4d6:	e77d      	b.n	800b3d4 <_dtoa_r+0x81c>
 800b4d8:	40240000 	.word	0x40240000
 800b4dc:	9b01      	ldr	r3, [sp, #4]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	dc38      	bgt.n	800b554 <_dtoa_r+0x99c>
 800b4e2:	9b05      	ldr	r3, [sp, #20]
 800b4e4:	2b02      	cmp	r3, #2
 800b4e6:	dd35      	ble.n	800b554 <_dtoa_r+0x99c>
 800b4e8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b4ec:	f1b9 0f00 	cmp.w	r9, #0
 800b4f0:	d10d      	bne.n	800b50e <_dtoa_r+0x956>
 800b4f2:	4631      	mov	r1, r6
 800b4f4:	464b      	mov	r3, r9
 800b4f6:	2205      	movs	r2, #5
 800b4f8:	4620      	mov	r0, r4
 800b4fa:	f000 ff69 	bl	800c3d0 <__multadd>
 800b4fe:	4601      	mov	r1, r0
 800b500:	4606      	mov	r6, r0
 800b502:	4658      	mov	r0, fp
 800b504:	f001 f9ca 	bl	800c89c <__mcmp>
 800b508:	2800      	cmp	r0, #0
 800b50a:	f73f adbd 	bgt.w	800b088 <_dtoa_r+0x4d0>
 800b50e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b510:	9d00      	ldr	r5, [sp, #0]
 800b512:	ea6f 0a03 	mvn.w	sl, r3
 800b516:	f04f 0800 	mov.w	r8, #0
 800b51a:	4631      	mov	r1, r6
 800b51c:	4620      	mov	r0, r4
 800b51e:	f000 ff35 	bl	800c38c <_Bfree>
 800b522:	2f00      	cmp	r7, #0
 800b524:	f43f aeb4 	beq.w	800b290 <_dtoa_r+0x6d8>
 800b528:	f1b8 0f00 	cmp.w	r8, #0
 800b52c:	d005      	beq.n	800b53a <_dtoa_r+0x982>
 800b52e:	45b8      	cmp	r8, r7
 800b530:	d003      	beq.n	800b53a <_dtoa_r+0x982>
 800b532:	4641      	mov	r1, r8
 800b534:	4620      	mov	r0, r4
 800b536:	f000 ff29 	bl	800c38c <_Bfree>
 800b53a:	4639      	mov	r1, r7
 800b53c:	4620      	mov	r0, r4
 800b53e:	f000 ff25 	bl	800c38c <_Bfree>
 800b542:	e6a5      	b.n	800b290 <_dtoa_r+0x6d8>
 800b544:	2600      	movs	r6, #0
 800b546:	4637      	mov	r7, r6
 800b548:	e7e1      	b.n	800b50e <_dtoa_r+0x956>
 800b54a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b54c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800b550:	4637      	mov	r7, r6
 800b552:	e599      	b.n	800b088 <_dtoa_r+0x4d0>
 800b554:	9b08      	ldr	r3, [sp, #32]
 800b556:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	f000 80fd 	beq.w	800b75a <_dtoa_r+0xba2>
 800b560:	2d00      	cmp	r5, #0
 800b562:	dd05      	ble.n	800b570 <_dtoa_r+0x9b8>
 800b564:	4639      	mov	r1, r7
 800b566:	462a      	mov	r2, r5
 800b568:	4620      	mov	r0, r4
 800b56a:	f001 f92b 	bl	800c7c4 <__lshift>
 800b56e:	4607      	mov	r7, r0
 800b570:	9b06      	ldr	r3, [sp, #24]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d05c      	beq.n	800b630 <_dtoa_r+0xa78>
 800b576:	6879      	ldr	r1, [r7, #4]
 800b578:	4620      	mov	r0, r4
 800b57a:	f000 fec7 	bl	800c30c <_Balloc>
 800b57e:	4605      	mov	r5, r0
 800b580:	b928      	cbnz	r0, 800b58e <_dtoa_r+0x9d6>
 800b582:	4b80      	ldr	r3, [pc, #512]	; (800b784 <_dtoa_r+0xbcc>)
 800b584:	4602      	mov	r2, r0
 800b586:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b58a:	f7ff bb2e 	b.w	800abea <_dtoa_r+0x32>
 800b58e:	693a      	ldr	r2, [r7, #16]
 800b590:	3202      	adds	r2, #2
 800b592:	0092      	lsls	r2, r2, #2
 800b594:	f107 010c 	add.w	r1, r7, #12
 800b598:	300c      	adds	r0, #12
 800b59a:	f7fd fb3d 	bl	8008c18 <memcpy>
 800b59e:	2201      	movs	r2, #1
 800b5a0:	4629      	mov	r1, r5
 800b5a2:	4620      	mov	r0, r4
 800b5a4:	f001 f90e 	bl	800c7c4 <__lshift>
 800b5a8:	9b00      	ldr	r3, [sp, #0]
 800b5aa:	3301      	adds	r3, #1
 800b5ac:	9301      	str	r3, [sp, #4]
 800b5ae:	9b00      	ldr	r3, [sp, #0]
 800b5b0:	444b      	add	r3, r9
 800b5b2:	9307      	str	r3, [sp, #28]
 800b5b4:	9b02      	ldr	r3, [sp, #8]
 800b5b6:	f003 0301 	and.w	r3, r3, #1
 800b5ba:	46b8      	mov	r8, r7
 800b5bc:	9306      	str	r3, [sp, #24]
 800b5be:	4607      	mov	r7, r0
 800b5c0:	9b01      	ldr	r3, [sp, #4]
 800b5c2:	4631      	mov	r1, r6
 800b5c4:	3b01      	subs	r3, #1
 800b5c6:	4658      	mov	r0, fp
 800b5c8:	9302      	str	r3, [sp, #8]
 800b5ca:	f7ff fa67 	bl	800aa9c <quorem>
 800b5ce:	4603      	mov	r3, r0
 800b5d0:	3330      	adds	r3, #48	; 0x30
 800b5d2:	9004      	str	r0, [sp, #16]
 800b5d4:	4641      	mov	r1, r8
 800b5d6:	4658      	mov	r0, fp
 800b5d8:	9308      	str	r3, [sp, #32]
 800b5da:	f001 f95f 	bl	800c89c <__mcmp>
 800b5de:	463a      	mov	r2, r7
 800b5e0:	4681      	mov	r9, r0
 800b5e2:	4631      	mov	r1, r6
 800b5e4:	4620      	mov	r0, r4
 800b5e6:	f001 f975 	bl	800c8d4 <__mdiff>
 800b5ea:	68c2      	ldr	r2, [r0, #12]
 800b5ec:	9b08      	ldr	r3, [sp, #32]
 800b5ee:	4605      	mov	r5, r0
 800b5f0:	bb02      	cbnz	r2, 800b634 <_dtoa_r+0xa7c>
 800b5f2:	4601      	mov	r1, r0
 800b5f4:	4658      	mov	r0, fp
 800b5f6:	f001 f951 	bl	800c89c <__mcmp>
 800b5fa:	9b08      	ldr	r3, [sp, #32]
 800b5fc:	4602      	mov	r2, r0
 800b5fe:	4629      	mov	r1, r5
 800b600:	4620      	mov	r0, r4
 800b602:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800b606:	f000 fec1 	bl	800c38c <_Bfree>
 800b60a:	9b05      	ldr	r3, [sp, #20]
 800b60c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b60e:	9d01      	ldr	r5, [sp, #4]
 800b610:	ea43 0102 	orr.w	r1, r3, r2
 800b614:	9b06      	ldr	r3, [sp, #24]
 800b616:	430b      	orrs	r3, r1
 800b618:	9b08      	ldr	r3, [sp, #32]
 800b61a:	d10d      	bne.n	800b638 <_dtoa_r+0xa80>
 800b61c:	2b39      	cmp	r3, #57	; 0x39
 800b61e:	d029      	beq.n	800b674 <_dtoa_r+0xabc>
 800b620:	f1b9 0f00 	cmp.w	r9, #0
 800b624:	dd01      	ble.n	800b62a <_dtoa_r+0xa72>
 800b626:	9b04      	ldr	r3, [sp, #16]
 800b628:	3331      	adds	r3, #49	; 0x31
 800b62a:	9a02      	ldr	r2, [sp, #8]
 800b62c:	7013      	strb	r3, [r2, #0]
 800b62e:	e774      	b.n	800b51a <_dtoa_r+0x962>
 800b630:	4638      	mov	r0, r7
 800b632:	e7b9      	b.n	800b5a8 <_dtoa_r+0x9f0>
 800b634:	2201      	movs	r2, #1
 800b636:	e7e2      	b.n	800b5fe <_dtoa_r+0xa46>
 800b638:	f1b9 0f00 	cmp.w	r9, #0
 800b63c:	db06      	blt.n	800b64c <_dtoa_r+0xa94>
 800b63e:	9905      	ldr	r1, [sp, #20]
 800b640:	ea41 0909 	orr.w	r9, r1, r9
 800b644:	9906      	ldr	r1, [sp, #24]
 800b646:	ea59 0101 	orrs.w	r1, r9, r1
 800b64a:	d120      	bne.n	800b68e <_dtoa_r+0xad6>
 800b64c:	2a00      	cmp	r2, #0
 800b64e:	ddec      	ble.n	800b62a <_dtoa_r+0xa72>
 800b650:	4659      	mov	r1, fp
 800b652:	2201      	movs	r2, #1
 800b654:	4620      	mov	r0, r4
 800b656:	9301      	str	r3, [sp, #4]
 800b658:	f001 f8b4 	bl	800c7c4 <__lshift>
 800b65c:	4631      	mov	r1, r6
 800b65e:	4683      	mov	fp, r0
 800b660:	f001 f91c 	bl	800c89c <__mcmp>
 800b664:	2800      	cmp	r0, #0
 800b666:	9b01      	ldr	r3, [sp, #4]
 800b668:	dc02      	bgt.n	800b670 <_dtoa_r+0xab8>
 800b66a:	d1de      	bne.n	800b62a <_dtoa_r+0xa72>
 800b66c:	07da      	lsls	r2, r3, #31
 800b66e:	d5dc      	bpl.n	800b62a <_dtoa_r+0xa72>
 800b670:	2b39      	cmp	r3, #57	; 0x39
 800b672:	d1d8      	bne.n	800b626 <_dtoa_r+0xa6e>
 800b674:	9a02      	ldr	r2, [sp, #8]
 800b676:	2339      	movs	r3, #57	; 0x39
 800b678:	7013      	strb	r3, [r2, #0]
 800b67a:	462b      	mov	r3, r5
 800b67c:	461d      	mov	r5, r3
 800b67e:	3b01      	subs	r3, #1
 800b680:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b684:	2a39      	cmp	r2, #57	; 0x39
 800b686:	d050      	beq.n	800b72a <_dtoa_r+0xb72>
 800b688:	3201      	adds	r2, #1
 800b68a:	701a      	strb	r2, [r3, #0]
 800b68c:	e745      	b.n	800b51a <_dtoa_r+0x962>
 800b68e:	2a00      	cmp	r2, #0
 800b690:	dd03      	ble.n	800b69a <_dtoa_r+0xae2>
 800b692:	2b39      	cmp	r3, #57	; 0x39
 800b694:	d0ee      	beq.n	800b674 <_dtoa_r+0xabc>
 800b696:	3301      	adds	r3, #1
 800b698:	e7c7      	b.n	800b62a <_dtoa_r+0xa72>
 800b69a:	9a01      	ldr	r2, [sp, #4]
 800b69c:	9907      	ldr	r1, [sp, #28]
 800b69e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b6a2:	428a      	cmp	r2, r1
 800b6a4:	d02a      	beq.n	800b6fc <_dtoa_r+0xb44>
 800b6a6:	4659      	mov	r1, fp
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	220a      	movs	r2, #10
 800b6ac:	4620      	mov	r0, r4
 800b6ae:	f000 fe8f 	bl	800c3d0 <__multadd>
 800b6b2:	45b8      	cmp	r8, r7
 800b6b4:	4683      	mov	fp, r0
 800b6b6:	f04f 0300 	mov.w	r3, #0
 800b6ba:	f04f 020a 	mov.w	r2, #10
 800b6be:	4641      	mov	r1, r8
 800b6c0:	4620      	mov	r0, r4
 800b6c2:	d107      	bne.n	800b6d4 <_dtoa_r+0xb1c>
 800b6c4:	f000 fe84 	bl	800c3d0 <__multadd>
 800b6c8:	4680      	mov	r8, r0
 800b6ca:	4607      	mov	r7, r0
 800b6cc:	9b01      	ldr	r3, [sp, #4]
 800b6ce:	3301      	adds	r3, #1
 800b6d0:	9301      	str	r3, [sp, #4]
 800b6d2:	e775      	b.n	800b5c0 <_dtoa_r+0xa08>
 800b6d4:	f000 fe7c 	bl	800c3d0 <__multadd>
 800b6d8:	4639      	mov	r1, r7
 800b6da:	4680      	mov	r8, r0
 800b6dc:	2300      	movs	r3, #0
 800b6de:	220a      	movs	r2, #10
 800b6e0:	4620      	mov	r0, r4
 800b6e2:	f000 fe75 	bl	800c3d0 <__multadd>
 800b6e6:	4607      	mov	r7, r0
 800b6e8:	e7f0      	b.n	800b6cc <_dtoa_r+0xb14>
 800b6ea:	f1b9 0f00 	cmp.w	r9, #0
 800b6ee:	9a00      	ldr	r2, [sp, #0]
 800b6f0:	bfcc      	ite	gt
 800b6f2:	464d      	movgt	r5, r9
 800b6f4:	2501      	movle	r5, #1
 800b6f6:	4415      	add	r5, r2
 800b6f8:	f04f 0800 	mov.w	r8, #0
 800b6fc:	4659      	mov	r1, fp
 800b6fe:	2201      	movs	r2, #1
 800b700:	4620      	mov	r0, r4
 800b702:	9301      	str	r3, [sp, #4]
 800b704:	f001 f85e 	bl	800c7c4 <__lshift>
 800b708:	4631      	mov	r1, r6
 800b70a:	4683      	mov	fp, r0
 800b70c:	f001 f8c6 	bl	800c89c <__mcmp>
 800b710:	2800      	cmp	r0, #0
 800b712:	dcb2      	bgt.n	800b67a <_dtoa_r+0xac2>
 800b714:	d102      	bne.n	800b71c <_dtoa_r+0xb64>
 800b716:	9b01      	ldr	r3, [sp, #4]
 800b718:	07db      	lsls	r3, r3, #31
 800b71a:	d4ae      	bmi.n	800b67a <_dtoa_r+0xac2>
 800b71c:	462b      	mov	r3, r5
 800b71e:	461d      	mov	r5, r3
 800b720:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b724:	2a30      	cmp	r2, #48	; 0x30
 800b726:	d0fa      	beq.n	800b71e <_dtoa_r+0xb66>
 800b728:	e6f7      	b.n	800b51a <_dtoa_r+0x962>
 800b72a:	9a00      	ldr	r2, [sp, #0]
 800b72c:	429a      	cmp	r2, r3
 800b72e:	d1a5      	bne.n	800b67c <_dtoa_r+0xac4>
 800b730:	f10a 0a01 	add.w	sl, sl, #1
 800b734:	2331      	movs	r3, #49	; 0x31
 800b736:	e779      	b.n	800b62c <_dtoa_r+0xa74>
 800b738:	4b13      	ldr	r3, [pc, #76]	; (800b788 <_dtoa_r+0xbd0>)
 800b73a:	f7ff baaf 	b.w	800ac9c <_dtoa_r+0xe4>
 800b73e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b740:	2b00      	cmp	r3, #0
 800b742:	f47f aa86 	bne.w	800ac52 <_dtoa_r+0x9a>
 800b746:	4b11      	ldr	r3, [pc, #68]	; (800b78c <_dtoa_r+0xbd4>)
 800b748:	f7ff baa8 	b.w	800ac9c <_dtoa_r+0xe4>
 800b74c:	f1b9 0f00 	cmp.w	r9, #0
 800b750:	dc03      	bgt.n	800b75a <_dtoa_r+0xba2>
 800b752:	9b05      	ldr	r3, [sp, #20]
 800b754:	2b02      	cmp	r3, #2
 800b756:	f73f aec9 	bgt.w	800b4ec <_dtoa_r+0x934>
 800b75a:	9d00      	ldr	r5, [sp, #0]
 800b75c:	4631      	mov	r1, r6
 800b75e:	4658      	mov	r0, fp
 800b760:	f7ff f99c 	bl	800aa9c <quorem>
 800b764:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b768:	f805 3b01 	strb.w	r3, [r5], #1
 800b76c:	9a00      	ldr	r2, [sp, #0]
 800b76e:	1aaa      	subs	r2, r5, r2
 800b770:	4591      	cmp	r9, r2
 800b772:	ddba      	ble.n	800b6ea <_dtoa_r+0xb32>
 800b774:	4659      	mov	r1, fp
 800b776:	2300      	movs	r3, #0
 800b778:	220a      	movs	r2, #10
 800b77a:	4620      	mov	r0, r4
 800b77c:	f000 fe28 	bl	800c3d0 <__multadd>
 800b780:	4683      	mov	fp, r0
 800b782:	e7eb      	b.n	800b75c <_dtoa_r+0xba4>
 800b784:	0800f66c 	.word	0x0800f66c
 800b788:	0800f8d1 	.word	0x0800f8d1
 800b78c:	0800f5e9 	.word	0x0800f5e9

0800b790 <__sflush_r>:
 800b790:	898a      	ldrh	r2, [r1, #12]
 800b792:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b796:	4605      	mov	r5, r0
 800b798:	0710      	lsls	r0, r2, #28
 800b79a:	460c      	mov	r4, r1
 800b79c:	d458      	bmi.n	800b850 <__sflush_r+0xc0>
 800b79e:	684b      	ldr	r3, [r1, #4]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	dc05      	bgt.n	800b7b0 <__sflush_r+0x20>
 800b7a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	dc02      	bgt.n	800b7b0 <__sflush_r+0x20>
 800b7aa:	2000      	movs	r0, #0
 800b7ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b7b2:	2e00      	cmp	r6, #0
 800b7b4:	d0f9      	beq.n	800b7aa <__sflush_r+0x1a>
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b7bc:	682f      	ldr	r7, [r5, #0]
 800b7be:	602b      	str	r3, [r5, #0]
 800b7c0:	d032      	beq.n	800b828 <__sflush_r+0x98>
 800b7c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b7c4:	89a3      	ldrh	r3, [r4, #12]
 800b7c6:	075a      	lsls	r2, r3, #29
 800b7c8:	d505      	bpl.n	800b7d6 <__sflush_r+0x46>
 800b7ca:	6863      	ldr	r3, [r4, #4]
 800b7cc:	1ac0      	subs	r0, r0, r3
 800b7ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b7d0:	b10b      	cbz	r3, 800b7d6 <__sflush_r+0x46>
 800b7d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b7d4:	1ac0      	subs	r0, r0, r3
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	4602      	mov	r2, r0
 800b7da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b7dc:	6a21      	ldr	r1, [r4, #32]
 800b7de:	4628      	mov	r0, r5
 800b7e0:	47b0      	blx	r6
 800b7e2:	1c43      	adds	r3, r0, #1
 800b7e4:	89a3      	ldrh	r3, [r4, #12]
 800b7e6:	d106      	bne.n	800b7f6 <__sflush_r+0x66>
 800b7e8:	6829      	ldr	r1, [r5, #0]
 800b7ea:	291d      	cmp	r1, #29
 800b7ec:	d82c      	bhi.n	800b848 <__sflush_r+0xb8>
 800b7ee:	4a2a      	ldr	r2, [pc, #168]	; (800b898 <__sflush_r+0x108>)
 800b7f0:	40ca      	lsrs	r2, r1
 800b7f2:	07d6      	lsls	r6, r2, #31
 800b7f4:	d528      	bpl.n	800b848 <__sflush_r+0xb8>
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	6062      	str	r2, [r4, #4]
 800b7fa:	04d9      	lsls	r1, r3, #19
 800b7fc:	6922      	ldr	r2, [r4, #16]
 800b7fe:	6022      	str	r2, [r4, #0]
 800b800:	d504      	bpl.n	800b80c <__sflush_r+0x7c>
 800b802:	1c42      	adds	r2, r0, #1
 800b804:	d101      	bne.n	800b80a <__sflush_r+0x7a>
 800b806:	682b      	ldr	r3, [r5, #0]
 800b808:	b903      	cbnz	r3, 800b80c <__sflush_r+0x7c>
 800b80a:	6560      	str	r0, [r4, #84]	; 0x54
 800b80c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b80e:	602f      	str	r7, [r5, #0]
 800b810:	2900      	cmp	r1, #0
 800b812:	d0ca      	beq.n	800b7aa <__sflush_r+0x1a>
 800b814:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b818:	4299      	cmp	r1, r3
 800b81a:	d002      	beq.n	800b822 <__sflush_r+0x92>
 800b81c:	4628      	mov	r0, r5
 800b81e:	f001 fa3f 	bl	800cca0 <_free_r>
 800b822:	2000      	movs	r0, #0
 800b824:	6360      	str	r0, [r4, #52]	; 0x34
 800b826:	e7c1      	b.n	800b7ac <__sflush_r+0x1c>
 800b828:	6a21      	ldr	r1, [r4, #32]
 800b82a:	2301      	movs	r3, #1
 800b82c:	4628      	mov	r0, r5
 800b82e:	47b0      	blx	r6
 800b830:	1c41      	adds	r1, r0, #1
 800b832:	d1c7      	bne.n	800b7c4 <__sflush_r+0x34>
 800b834:	682b      	ldr	r3, [r5, #0]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d0c4      	beq.n	800b7c4 <__sflush_r+0x34>
 800b83a:	2b1d      	cmp	r3, #29
 800b83c:	d001      	beq.n	800b842 <__sflush_r+0xb2>
 800b83e:	2b16      	cmp	r3, #22
 800b840:	d101      	bne.n	800b846 <__sflush_r+0xb6>
 800b842:	602f      	str	r7, [r5, #0]
 800b844:	e7b1      	b.n	800b7aa <__sflush_r+0x1a>
 800b846:	89a3      	ldrh	r3, [r4, #12]
 800b848:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b84c:	81a3      	strh	r3, [r4, #12]
 800b84e:	e7ad      	b.n	800b7ac <__sflush_r+0x1c>
 800b850:	690f      	ldr	r7, [r1, #16]
 800b852:	2f00      	cmp	r7, #0
 800b854:	d0a9      	beq.n	800b7aa <__sflush_r+0x1a>
 800b856:	0793      	lsls	r3, r2, #30
 800b858:	680e      	ldr	r6, [r1, #0]
 800b85a:	bf08      	it	eq
 800b85c:	694b      	ldreq	r3, [r1, #20]
 800b85e:	600f      	str	r7, [r1, #0]
 800b860:	bf18      	it	ne
 800b862:	2300      	movne	r3, #0
 800b864:	eba6 0807 	sub.w	r8, r6, r7
 800b868:	608b      	str	r3, [r1, #8]
 800b86a:	f1b8 0f00 	cmp.w	r8, #0
 800b86e:	dd9c      	ble.n	800b7aa <__sflush_r+0x1a>
 800b870:	6a21      	ldr	r1, [r4, #32]
 800b872:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b874:	4643      	mov	r3, r8
 800b876:	463a      	mov	r2, r7
 800b878:	4628      	mov	r0, r5
 800b87a:	47b0      	blx	r6
 800b87c:	2800      	cmp	r0, #0
 800b87e:	dc06      	bgt.n	800b88e <__sflush_r+0xfe>
 800b880:	89a3      	ldrh	r3, [r4, #12]
 800b882:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b886:	81a3      	strh	r3, [r4, #12]
 800b888:	f04f 30ff 	mov.w	r0, #4294967295
 800b88c:	e78e      	b.n	800b7ac <__sflush_r+0x1c>
 800b88e:	4407      	add	r7, r0
 800b890:	eba8 0800 	sub.w	r8, r8, r0
 800b894:	e7e9      	b.n	800b86a <__sflush_r+0xda>
 800b896:	bf00      	nop
 800b898:	20400001 	.word	0x20400001

0800b89c <_fflush_r>:
 800b89c:	b538      	push	{r3, r4, r5, lr}
 800b89e:	690b      	ldr	r3, [r1, #16]
 800b8a0:	4605      	mov	r5, r0
 800b8a2:	460c      	mov	r4, r1
 800b8a4:	b913      	cbnz	r3, 800b8ac <_fflush_r+0x10>
 800b8a6:	2500      	movs	r5, #0
 800b8a8:	4628      	mov	r0, r5
 800b8aa:	bd38      	pop	{r3, r4, r5, pc}
 800b8ac:	b118      	cbz	r0, 800b8b6 <_fflush_r+0x1a>
 800b8ae:	6983      	ldr	r3, [r0, #24]
 800b8b0:	b90b      	cbnz	r3, 800b8b6 <_fflush_r+0x1a>
 800b8b2:	f000 f887 	bl	800b9c4 <__sinit>
 800b8b6:	4b14      	ldr	r3, [pc, #80]	; (800b908 <_fflush_r+0x6c>)
 800b8b8:	429c      	cmp	r4, r3
 800b8ba:	d11b      	bne.n	800b8f4 <_fflush_r+0x58>
 800b8bc:	686c      	ldr	r4, [r5, #4]
 800b8be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d0ef      	beq.n	800b8a6 <_fflush_r+0xa>
 800b8c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b8c8:	07d0      	lsls	r0, r2, #31
 800b8ca:	d404      	bmi.n	800b8d6 <_fflush_r+0x3a>
 800b8cc:	0599      	lsls	r1, r3, #22
 800b8ce:	d402      	bmi.n	800b8d6 <_fflush_r+0x3a>
 800b8d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b8d2:	f000 fc88 	bl	800c1e6 <__retarget_lock_acquire_recursive>
 800b8d6:	4628      	mov	r0, r5
 800b8d8:	4621      	mov	r1, r4
 800b8da:	f7ff ff59 	bl	800b790 <__sflush_r>
 800b8de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b8e0:	07da      	lsls	r2, r3, #31
 800b8e2:	4605      	mov	r5, r0
 800b8e4:	d4e0      	bmi.n	800b8a8 <_fflush_r+0xc>
 800b8e6:	89a3      	ldrh	r3, [r4, #12]
 800b8e8:	059b      	lsls	r3, r3, #22
 800b8ea:	d4dd      	bmi.n	800b8a8 <_fflush_r+0xc>
 800b8ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b8ee:	f000 fc7b 	bl	800c1e8 <__retarget_lock_release_recursive>
 800b8f2:	e7d9      	b.n	800b8a8 <_fflush_r+0xc>
 800b8f4:	4b05      	ldr	r3, [pc, #20]	; (800b90c <_fflush_r+0x70>)
 800b8f6:	429c      	cmp	r4, r3
 800b8f8:	d101      	bne.n	800b8fe <_fflush_r+0x62>
 800b8fa:	68ac      	ldr	r4, [r5, #8]
 800b8fc:	e7df      	b.n	800b8be <_fflush_r+0x22>
 800b8fe:	4b04      	ldr	r3, [pc, #16]	; (800b910 <_fflush_r+0x74>)
 800b900:	429c      	cmp	r4, r3
 800b902:	bf08      	it	eq
 800b904:	68ec      	ldreq	r4, [r5, #12]
 800b906:	e7da      	b.n	800b8be <_fflush_r+0x22>
 800b908:	0800f6a0 	.word	0x0800f6a0
 800b90c:	0800f6c0 	.word	0x0800f6c0
 800b910:	0800f680 	.word	0x0800f680

0800b914 <std>:
 800b914:	2300      	movs	r3, #0
 800b916:	b510      	push	{r4, lr}
 800b918:	4604      	mov	r4, r0
 800b91a:	e9c0 3300 	strd	r3, r3, [r0]
 800b91e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b922:	6083      	str	r3, [r0, #8]
 800b924:	8181      	strh	r1, [r0, #12]
 800b926:	6643      	str	r3, [r0, #100]	; 0x64
 800b928:	81c2      	strh	r2, [r0, #14]
 800b92a:	6183      	str	r3, [r0, #24]
 800b92c:	4619      	mov	r1, r3
 800b92e:	2208      	movs	r2, #8
 800b930:	305c      	adds	r0, #92	; 0x5c
 800b932:	f7fd f97f 	bl	8008c34 <memset>
 800b936:	4b05      	ldr	r3, [pc, #20]	; (800b94c <std+0x38>)
 800b938:	6263      	str	r3, [r4, #36]	; 0x24
 800b93a:	4b05      	ldr	r3, [pc, #20]	; (800b950 <std+0x3c>)
 800b93c:	62a3      	str	r3, [r4, #40]	; 0x28
 800b93e:	4b05      	ldr	r3, [pc, #20]	; (800b954 <std+0x40>)
 800b940:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b942:	4b05      	ldr	r3, [pc, #20]	; (800b958 <std+0x44>)
 800b944:	6224      	str	r4, [r4, #32]
 800b946:	6323      	str	r3, [r4, #48]	; 0x30
 800b948:	bd10      	pop	{r4, pc}
 800b94a:	bf00      	nop
 800b94c:	08009c01 	.word	0x08009c01
 800b950:	08009c27 	.word	0x08009c27
 800b954:	08009c5f 	.word	0x08009c5f
 800b958:	08009c83 	.word	0x08009c83

0800b95c <_cleanup_r>:
 800b95c:	4901      	ldr	r1, [pc, #4]	; (800b964 <_cleanup_r+0x8>)
 800b95e:	f000 b8af 	b.w	800bac0 <_fwalk_reent>
 800b962:	bf00      	nop
 800b964:	0800b89d 	.word	0x0800b89d

0800b968 <__sfmoreglue>:
 800b968:	b570      	push	{r4, r5, r6, lr}
 800b96a:	1e4a      	subs	r2, r1, #1
 800b96c:	2568      	movs	r5, #104	; 0x68
 800b96e:	4355      	muls	r5, r2
 800b970:	460e      	mov	r6, r1
 800b972:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b976:	f001 f9e3 	bl	800cd40 <_malloc_r>
 800b97a:	4604      	mov	r4, r0
 800b97c:	b140      	cbz	r0, 800b990 <__sfmoreglue+0x28>
 800b97e:	2100      	movs	r1, #0
 800b980:	e9c0 1600 	strd	r1, r6, [r0]
 800b984:	300c      	adds	r0, #12
 800b986:	60a0      	str	r0, [r4, #8]
 800b988:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b98c:	f7fd f952 	bl	8008c34 <memset>
 800b990:	4620      	mov	r0, r4
 800b992:	bd70      	pop	{r4, r5, r6, pc}

0800b994 <__sfp_lock_acquire>:
 800b994:	4801      	ldr	r0, [pc, #4]	; (800b99c <__sfp_lock_acquire+0x8>)
 800b996:	f000 bc26 	b.w	800c1e6 <__retarget_lock_acquire_recursive>
 800b99a:	bf00      	nop
 800b99c:	200039e4 	.word	0x200039e4

0800b9a0 <__sfp_lock_release>:
 800b9a0:	4801      	ldr	r0, [pc, #4]	; (800b9a8 <__sfp_lock_release+0x8>)
 800b9a2:	f000 bc21 	b.w	800c1e8 <__retarget_lock_release_recursive>
 800b9a6:	bf00      	nop
 800b9a8:	200039e4 	.word	0x200039e4

0800b9ac <__sinit_lock_acquire>:
 800b9ac:	4801      	ldr	r0, [pc, #4]	; (800b9b4 <__sinit_lock_acquire+0x8>)
 800b9ae:	f000 bc1a 	b.w	800c1e6 <__retarget_lock_acquire_recursive>
 800b9b2:	bf00      	nop
 800b9b4:	200039df 	.word	0x200039df

0800b9b8 <__sinit_lock_release>:
 800b9b8:	4801      	ldr	r0, [pc, #4]	; (800b9c0 <__sinit_lock_release+0x8>)
 800b9ba:	f000 bc15 	b.w	800c1e8 <__retarget_lock_release_recursive>
 800b9be:	bf00      	nop
 800b9c0:	200039df 	.word	0x200039df

0800b9c4 <__sinit>:
 800b9c4:	b510      	push	{r4, lr}
 800b9c6:	4604      	mov	r4, r0
 800b9c8:	f7ff fff0 	bl	800b9ac <__sinit_lock_acquire>
 800b9cc:	69a3      	ldr	r3, [r4, #24]
 800b9ce:	b11b      	cbz	r3, 800b9d8 <__sinit+0x14>
 800b9d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b9d4:	f7ff bff0 	b.w	800b9b8 <__sinit_lock_release>
 800b9d8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b9dc:	6523      	str	r3, [r4, #80]	; 0x50
 800b9de:	4b13      	ldr	r3, [pc, #76]	; (800ba2c <__sinit+0x68>)
 800b9e0:	4a13      	ldr	r2, [pc, #76]	; (800ba30 <__sinit+0x6c>)
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	62a2      	str	r2, [r4, #40]	; 0x28
 800b9e6:	42a3      	cmp	r3, r4
 800b9e8:	bf04      	itt	eq
 800b9ea:	2301      	moveq	r3, #1
 800b9ec:	61a3      	streq	r3, [r4, #24]
 800b9ee:	4620      	mov	r0, r4
 800b9f0:	f000 f820 	bl	800ba34 <__sfp>
 800b9f4:	6060      	str	r0, [r4, #4]
 800b9f6:	4620      	mov	r0, r4
 800b9f8:	f000 f81c 	bl	800ba34 <__sfp>
 800b9fc:	60a0      	str	r0, [r4, #8]
 800b9fe:	4620      	mov	r0, r4
 800ba00:	f000 f818 	bl	800ba34 <__sfp>
 800ba04:	2200      	movs	r2, #0
 800ba06:	60e0      	str	r0, [r4, #12]
 800ba08:	2104      	movs	r1, #4
 800ba0a:	6860      	ldr	r0, [r4, #4]
 800ba0c:	f7ff ff82 	bl	800b914 <std>
 800ba10:	68a0      	ldr	r0, [r4, #8]
 800ba12:	2201      	movs	r2, #1
 800ba14:	2109      	movs	r1, #9
 800ba16:	f7ff ff7d 	bl	800b914 <std>
 800ba1a:	68e0      	ldr	r0, [r4, #12]
 800ba1c:	2202      	movs	r2, #2
 800ba1e:	2112      	movs	r1, #18
 800ba20:	f7ff ff78 	bl	800b914 <std>
 800ba24:	2301      	movs	r3, #1
 800ba26:	61a3      	str	r3, [r4, #24]
 800ba28:	e7d2      	b.n	800b9d0 <__sinit+0xc>
 800ba2a:	bf00      	nop
 800ba2c:	0800f458 	.word	0x0800f458
 800ba30:	0800b95d 	.word	0x0800b95d

0800ba34 <__sfp>:
 800ba34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba36:	4607      	mov	r7, r0
 800ba38:	f7ff ffac 	bl	800b994 <__sfp_lock_acquire>
 800ba3c:	4b1e      	ldr	r3, [pc, #120]	; (800bab8 <__sfp+0x84>)
 800ba3e:	681e      	ldr	r6, [r3, #0]
 800ba40:	69b3      	ldr	r3, [r6, #24]
 800ba42:	b913      	cbnz	r3, 800ba4a <__sfp+0x16>
 800ba44:	4630      	mov	r0, r6
 800ba46:	f7ff ffbd 	bl	800b9c4 <__sinit>
 800ba4a:	3648      	adds	r6, #72	; 0x48
 800ba4c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ba50:	3b01      	subs	r3, #1
 800ba52:	d503      	bpl.n	800ba5c <__sfp+0x28>
 800ba54:	6833      	ldr	r3, [r6, #0]
 800ba56:	b30b      	cbz	r3, 800ba9c <__sfp+0x68>
 800ba58:	6836      	ldr	r6, [r6, #0]
 800ba5a:	e7f7      	b.n	800ba4c <__sfp+0x18>
 800ba5c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ba60:	b9d5      	cbnz	r5, 800ba98 <__sfp+0x64>
 800ba62:	4b16      	ldr	r3, [pc, #88]	; (800babc <__sfp+0x88>)
 800ba64:	60e3      	str	r3, [r4, #12]
 800ba66:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ba6a:	6665      	str	r5, [r4, #100]	; 0x64
 800ba6c:	f000 fbba 	bl	800c1e4 <__retarget_lock_init_recursive>
 800ba70:	f7ff ff96 	bl	800b9a0 <__sfp_lock_release>
 800ba74:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ba78:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ba7c:	6025      	str	r5, [r4, #0]
 800ba7e:	61a5      	str	r5, [r4, #24]
 800ba80:	2208      	movs	r2, #8
 800ba82:	4629      	mov	r1, r5
 800ba84:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ba88:	f7fd f8d4 	bl	8008c34 <memset>
 800ba8c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ba90:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ba94:	4620      	mov	r0, r4
 800ba96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba98:	3468      	adds	r4, #104	; 0x68
 800ba9a:	e7d9      	b.n	800ba50 <__sfp+0x1c>
 800ba9c:	2104      	movs	r1, #4
 800ba9e:	4638      	mov	r0, r7
 800baa0:	f7ff ff62 	bl	800b968 <__sfmoreglue>
 800baa4:	4604      	mov	r4, r0
 800baa6:	6030      	str	r0, [r6, #0]
 800baa8:	2800      	cmp	r0, #0
 800baaa:	d1d5      	bne.n	800ba58 <__sfp+0x24>
 800baac:	f7ff ff78 	bl	800b9a0 <__sfp_lock_release>
 800bab0:	230c      	movs	r3, #12
 800bab2:	603b      	str	r3, [r7, #0]
 800bab4:	e7ee      	b.n	800ba94 <__sfp+0x60>
 800bab6:	bf00      	nop
 800bab8:	0800f458 	.word	0x0800f458
 800babc:	ffff0001 	.word	0xffff0001

0800bac0 <_fwalk_reent>:
 800bac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bac4:	4606      	mov	r6, r0
 800bac6:	4688      	mov	r8, r1
 800bac8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bacc:	2700      	movs	r7, #0
 800bace:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bad2:	f1b9 0901 	subs.w	r9, r9, #1
 800bad6:	d505      	bpl.n	800bae4 <_fwalk_reent+0x24>
 800bad8:	6824      	ldr	r4, [r4, #0]
 800bada:	2c00      	cmp	r4, #0
 800badc:	d1f7      	bne.n	800bace <_fwalk_reent+0xe>
 800bade:	4638      	mov	r0, r7
 800bae0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bae4:	89ab      	ldrh	r3, [r5, #12]
 800bae6:	2b01      	cmp	r3, #1
 800bae8:	d907      	bls.n	800bafa <_fwalk_reent+0x3a>
 800baea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800baee:	3301      	adds	r3, #1
 800baf0:	d003      	beq.n	800bafa <_fwalk_reent+0x3a>
 800baf2:	4629      	mov	r1, r5
 800baf4:	4630      	mov	r0, r6
 800baf6:	47c0      	blx	r8
 800baf8:	4307      	orrs	r7, r0
 800bafa:	3568      	adds	r5, #104	; 0x68
 800bafc:	e7e9      	b.n	800bad2 <_fwalk_reent+0x12>

0800bafe <rshift>:
 800bafe:	6903      	ldr	r3, [r0, #16]
 800bb00:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800bb04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bb08:	ea4f 1261 	mov.w	r2, r1, asr #5
 800bb0c:	f100 0414 	add.w	r4, r0, #20
 800bb10:	dd45      	ble.n	800bb9e <rshift+0xa0>
 800bb12:	f011 011f 	ands.w	r1, r1, #31
 800bb16:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800bb1a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bb1e:	d10c      	bne.n	800bb3a <rshift+0x3c>
 800bb20:	f100 0710 	add.w	r7, r0, #16
 800bb24:	4629      	mov	r1, r5
 800bb26:	42b1      	cmp	r1, r6
 800bb28:	d334      	bcc.n	800bb94 <rshift+0x96>
 800bb2a:	1a9b      	subs	r3, r3, r2
 800bb2c:	009b      	lsls	r3, r3, #2
 800bb2e:	1eea      	subs	r2, r5, #3
 800bb30:	4296      	cmp	r6, r2
 800bb32:	bf38      	it	cc
 800bb34:	2300      	movcc	r3, #0
 800bb36:	4423      	add	r3, r4
 800bb38:	e015      	b.n	800bb66 <rshift+0x68>
 800bb3a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bb3e:	f1c1 0820 	rsb	r8, r1, #32
 800bb42:	40cf      	lsrs	r7, r1
 800bb44:	f105 0e04 	add.w	lr, r5, #4
 800bb48:	46a1      	mov	r9, r4
 800bb4a:	4576      	cmp	r6, lr
 800bb4c:	46f4      	mov	ip, lr
 800bb4e:	d815      	bhi.n	800bb7c <rshift+0x7e>
 800bb50:	1a9b      	subs	r3, r3, r2
 800bb52:	009a      	lsls	r2, r3, #2
 800bb54:	3a04      	subs	r2, #4
 800bb56:	3501      	adds	r5, #1
 800bb58:	42ae      	cmp	r6, r5
 800bb5a:	bf38      	it	cc
 800bb5c:	2200      	movcc	r2, #0
 800bb5e:	18a3      	adds	r3, r4, r2
 800bb60:	50a7      	str	r7, [r4, r2]
 800bb62:	b107      	cbz	r7, 800bb66 <rshift+0x68>
 800bb64:	3304      	adds	r3, #4
 800bb66:	1b1a      	subs	r2, r3, r4
 800bb68:	42a3      	cmp	r3, r4
 800bb6a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bb6e:	bf08      	it	eq
 800bb70:	2300      	moveq	r3, #0
 800bb72:	6102      	str	r2, [r0, #16]
 800bb74:	bf08      	it	eq
 800bb76:	6143      	streq	r3, [r0, #20]
 800bb78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bb7c:	f8dc c000 	ldr.w	ip, [ip]
 800bb80:	fa0c fc08 	lsl.w	ip, ip, r8
 800bb84:	ea4c 0707 	orr.w	r7, ip, r7
 800bb88:	f849 7b04 	str.w	r7, [r9], #4
 800bb8c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bb90:	40cf      	lsrs	r7, r1
 800bb92:	e7da      	b.n	800bb4a <rshift+0x4c>
 800bb94:	f851 cb04 	ldr.w	ip, [r1], #4
 800bb98:	f847 cf04 	str.w	ip, [r7, #4]!
 800bb9c:	e7c3      	b.n	800bb26 <rshift+0x28>
 800bb9e:	4623      	mov	r3, r4
 800bba0:	e7e1      	b.n	800bb66 <rshift+0x68>

0800bba2 <__hexdig_fun>:
 800bba2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800bba6:	2b09      	cmp	r3, #9
 800bba8:	d802      	bhi.n	800bbb0 <__hexdig_fun+0xe>
 800bbaa:	3820      	subs	r0, #32
 800bbac:	b2c0      	uxtb	r0, r0
 800bbae:	4770      	bx	lr
 800bbb0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800bbb4:	2b05      	cmp	r3, #5
 800bbb6:	d801      	bhi.n	800bbbc <__hexdig_fun+0x1a>
 800bbb8:	3847      	subs	r0, #71	; 0x47
 800bbba:	e7f7      	b.n	800bbac <__hexdig_fun+0xa>
 800bbbc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800bbc0:	2b05      	cmp	r3, #5
 800bbc2:	d801      	bhi.n	800bbc8 <__hexdig_fun+0x26>
 800bbc4:	3827      	subs	r0, #39	; 0x27
 800bbc6:	e7f1      	b.n	800bbac <__hexdig_fun+0xa>
 800bbc8:	2000      	movs	r0, #0
 800bbca:	4770      	bx	lr

0800bbcc <__gethex>:
 800bbcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbd0:	ed2d 8b02 	vpush	{d8}
 800bbd4:	b089      	sub	sp, #36	; 0x24
 800bbd6:	ee08 0a10 	vmov	s16, r0
 800bbda:	9304      	str	r3, [sp, #16]
 800bbdc:	4bbc      	ldr	r3, [pc, #752]	; (800bed0 <__gethex+0x304>)
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	9301      	str	r3, [sp, #4]
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	468b      	mov	fp, r1
 800bbe6:	4690      	mov	r8, r2
 800bbe8:	f7f4 fb42 	bl	8000270 <strlen>
 800bbec:	9b01      	ldr	r3, [sp, #4]
 800bbee:	f8db 2000 	ldr.w	r2, [fp]
 800bbf2:	4403      	add	r3, r0
 800bbf4:	4682      	mov	sl, r0
 800bbf6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800bbfa:	9305      	str	r3, [sp, #20]
 800bbfc:	1c93      	adds	r3, r2, #2
 800bbfe:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800bc02:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800bc06:	32fe      	adds	r2, #254	; 0xfe
 800bc08:	18d1      	adds	r1, r2, r3
 800bc0a:	461f      	mov	r7, r3
 800bc0c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800bc10:	9100      	str	r1, [sp, #0]
 800bc12:	2830      	cmp	r0, #48	; 0x30
 800bc14:	d0f8      	beq.n	800bc08 <__gethex+0x3c>
 800bc16:	f7ff ffc4 	bl	800bba2 <__hexdig_fun>
 800bc1a:	4604      	mov	r4, r0
 800bc1c:	2800      	cmp	r0, #0
 800bc1e:	d13a      	bne.n	800bc96 <__gethex+0xca>
 800bc20:	9901      	ldr	r1, [sp, #4]
 800bc22:	4652      	mov	r2, sl
 800bc24:	4638      	mov	r0, r7
 800bc26:	f7fe f830 	bl	8009c8a <strncmp>
 800bc2a:	4605      	mov	r5, r0
 800bc2c:	2800      	cmp	r0, #0
 800bc2e:	d168      	bne.n	800bd02 <__gethex+0x136>
 800bc30:	f817 000a 	ldrb.w	r0, [r7, sl]
 800bc34:	eb07 060a 	add.w	r6, r7, sl
 800bc38:	f7ff ffb3 	bl	800bba2 <__hexdig_fun>
 800bc3c:	2800      	cmp	r0, #0
 800bc3e:	d062      	beq.n	800bd06 <__gethex+0x13a>
 800bc40:	4633      	mov	r3, r6
 800bc42:	7818      	ldrb	r0, [r3, #0]
 800bc44:	2830      	cmp	r0, #48	; 0x30
 800bc46:	461f      	mov	r7, r3
 800bc48:	f103 0301 	add.w	r3, r3, #1
 800bc4c:	d0f9      	beq.n	800bc42 <__gethex+0x76>
 800bc4e:	f7ff ffa8 	bl	800bba2 <__hexdig_fun>
 800bc52:	2301      	movs	r3, #1
 800bc54:	fab0 f480 	clz	r4, r0
 800bc58:	0964      	lsrs	r4, r4, #5
 800bc5a:	4635      	mov	r5, r6
 800bc5c:	9300      	str	r3, [sp, #0]
 800bc5e:	463a      	mov	r2, r7
 800bc60:	4616      	mov	r6, r2
 800bc62:	3201      	adds	r2, #1
 800bc64:	7830      	ldrb	r0, [r6, #0]
 800bc66:	f7ff ff9c 	bl	800bba2 <__hexdig_fun>
 800bc6a:	2800      	cmp	r0, #0
 800bc6c:	d1f8      	bne.n	800bc60 <__gethex+0x94>
 800bc6e:	9901      	ldr	r1, [sp, #4]
 800bc70:	4652      	mov	r2, sl
 800bc72:	4630      	mov	r0, r6
 800bc74:	f7fe f809 	bl	8009c8a <strncmp>
 800bc78:	b980      	cbnz	r0, 800bc9c <__gethex+0xd0>
 800bc7a:	b94d      	cbnz	r5, 800bc90 <__gethex+0xc4>
 800bc7c:	eb06 050a 	add.w	r5, r6, sl
 800bc80:	462a      	mov	r2, r5
 800bc82:	4616      	mov	r6, r2
 800bc84:	3201      	adds	r2, #1
 800bc86:	7830      	ldrb	r0, [r6, #0]
 800bc88:	f7ff ff8b 	bl	800bba2 <__hexdig_fun>
 800bc8c:	2800      	cmp	r0, #0
 800bc8e:	d1f8      	bne.n	800bc82 <__gethex+0xb6>
 800bc90:	1bad      	subs	r5, r5, r6
 800bc92:	00ad      	lsls	r5, r5, #2
 800bc94:	e004      	b.n	800bca0 <__gethex+0xd4>
 800bc96:	2400      	movs	r4, #0
 800bc98:	4625      	mov	r5, r4
 800bc9a:	e7e0      	b.n	800bc5e <__gethex+0x92>
 800bc9c:	2d00      	cmp	r5, #0
 800bc9e:	d1f7      	bne.n	800bc90 <__gethex+0xc4>
 800bca0:	7833      	ldrb	r3, [r6, #0]
 800bca2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bca6:	2b50      	cmp	r3, #80	; 0x50
 800bca8:	d13b      	bne.n	800bd22 <__gethex+0x156>
 800bcaa:	7873      	ldrb	r3, [r6, #1]
 800bcac:	2b2b      	cmp	r3, #43	; 0x2b
 800bcae:	d02c      	beq.n	800bd0a <__gethex+0x13e>
 800bcb0:	2b2d      	cmp	r3, #45	; 0x2d
 800bcb2:	d02e      	beq.n	800bd12 <__gethex+0x146>
 800bcb4:	1c71      	adds	r1, r6, #1
 800bcb6:	f04f 0900 	mov.w	r9, #0
 800bcba:	7808      	ldrb	r0, [r1, #0]
 800bcbc:	f7ff ff71 	bl	800bba2 <__hexdig_fun>
 800bcc0:	1e43      	subs	r3, r0, #1
 800bcc2:	b2db      	uxtb	r3, r3
 800bcc4:	2b18      	cmp	r3, #24
 800bcc6:	d82c      	bhi.n	800bd22 <__gethex+0x156>
 800bcc8:	f1a0 0210 	sub.w	r2, r0, #16
 800bccc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bcd0:	f7ff ff67 	bl	800bba2 <__hexdig_fun>
 800bcd4:	1e43      	subs	r3, r0, #1
 800bcd6:	b2db      	uxtb	r3, r3
 800bcd8:	2b18      	cmp	r3, #24
 800bcda:	d91d      	bls.n	800bd18 <__gethex+0x14c>
 800bcdc:	f1b9 0f00 	cmp.w	r9, #0
 800bce0:	d000      	beq.n	800bce4 <__gethex+0x118>
 800bce2:	4252      	negs	r2, r2
 800bce4:	4415      	add	r5, r2
 800bce6:	f8cb 1000 	str.w	r1, [fp]
 800bcea:	b1e4      	cbz	r4, 800bd26 <__gethex+0x15a>
 800bcec:	9b00      	ldr	r3, [sp, #0]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	bf14      	ite	ne
 800bcf2:	2700      	movne	r7, #0
 800bcf4:	2706      	moveq	r7, #6
 800bcf6:	4638      	mov	r0, r7
 800bcf8:	b009      	add	sp, #36	; 0x24
 800bcfa:	ecbd 8b02 	vpop	{d8}
 800bcfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd02:	463e      	mov	r6, r7
 800bd04:	4625      	mov	r5, r4
 800bd06:	2401      	movs	r4, #1
 800bd08:	e7ca      	b.n	800bca0 <__gethex+0xd4>
 800bd0a:	f04f 0900 	mov.w	r9, #0
 800bd0e:	1cb1      	adds	r1, r6, #2
 800bd10:	e7d3      	b.n	800bcba <__gethex+0xee>
 800bd12:	f04f 0901 	mov.w	r9, #1
 800bd16:	e7fa      	b.n	800bd0e <__gethex+0x142>
 800bd18:	230a      	movs	r3, #10
 800bd1a:	fb03 0202 	mla	r2, r3, r2, r0
 800bd1e:	3a10      	subs	r2, #16
 800bd20:	e7d4      	b.n	800bccc <__gethex+0x100>
 800bd22:	4631      	mov	r1, r6
 800bd24:	e7df      	b.n	800bce6 <__gethex+0x11a>
 800bd26:	1bf3      	subs	r3, r6, r7
 800bd28:	3b01      	subs	r3, #1
 800bd2a:	4621      	mov	r1, r4
 800bd2c:	2b07      	cmp	r3, #7
 800bd2e:	dc0b      	bgt.n	800bd48 <__gethex+0x17c>
 800bd30:	ee18 0a10 	vmov	r0, s16
 800bd34:	f000 faea 	bl	800c30c <_Balloc>
 800bd38:	4604      	mov	r4, r0
 800bd3a:	b940      	cbnz	r0, 800bd4e <__gethex+0x182>
 800bd3c:	4b65      	ldr	r3, [pc, #404]	; (800bed4 <__gethex+0x308>)
 800bd3e:	4602      	mov	r2, r0
 800bd40:	21de      	movs	r1, #222	; 0xde
 800bd42:	4865      	ldr	r0, [pc, #404]	; (800bed8 <__gethex+0x30c>)
 800bd44:	f002 f814 	bl	800dd70 <__assert_func>
 800bd48:	3101      	adds	r1, #1
 800bd4a:	105b      	asrs	r3, r3, #1
 800bd4c:	e7ee      	b.n	800bd2c <__gethex+0x160>
 800bd4e:	f100 0914 	add.w	r9, r0, #20
 800bd52:	f04f 0b00 	mov.w	fp, #0
 800bd56:	f1ca 0301 	rsb	r3, sl, #1
 800bd5a:	f8cd 9008 	str.w	r9, [sp, #8]
 800bd5e:	f8cd b000 	str.w	fp, [sp]
 800bd62:	9306      	str	r3, [sp, #24]
 800bd64:	42b7      	cmp	r7, r6
 800bd66:	d340      	bcc.n	800bdea <__gethex+0x21e>
 800bd68:	9802      	ldr	r0, [sp, #8]
 800bd6a:	9b00      	ldr	r3, [sp, #0]
 800bd6c:	f840 3b04 	str.w	r3, [r0], #4
 800bd70:	eba0 0009 	sub.w	r0, r0, r9
 800bd74:	1080      	asrs	r0, r0, #2
 800bd76:	0146      	lsls	r6, r0, #5
 800bd78:	6120      	str	r0, [r4, #16]
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	f000 fbbc 	bl	800c4f8 <__hi0bits>
 800bd80:	1a30      	subs	r0, r6, r0
 800bd82:	f8d8 6000 	ldr.w	r6, [r8]
 800bd86:	42b0      	cmp	r0, r6
 800bd88:	dd63      	ble.n	800be52 <__gethex+0x286>
 800bd8a:	1b87      	subs	r7, r0, r6
 800bd8c:	4639      	mov	r1, r7
 800bd8e:	4620      	mov	r0, r4
 800bd90:	f000 ff56 	bl	800cc40 <__any_on>
 800bd94:	4682      	mov	sl, r0
 800bd96:	b1a8      	cbz	r0, 800bdc4 <__gethex+0x1f8>
 800bd98:	1e7b      	subs	r3, r7, #1
 800bd9a:	1159      	asrs	r1, r3, #5
 800bd9c:	f003 021f 	and.w	r2, r3, #31
 800bda0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800bda4:	f04f 0a01 	mov.w	sl, #1
 800bda8:	fa0a f202 	lsl.w	r2, sl, r2
 800bdac:	420a      	tst	r2, r1
 800bdae:	d009      	beq.n	800bdc4 <__gethex+0x1f8>
 800bdb0:	4553      	cmp	r3, sl
 800bdb2:	dd05      	ble.n	800bdc0 <__gethex+0x1f4>
 800bdb4:	1eb9      	subs	r1, r7, #2
 800bdb6:	4620      	mov	r0, r4
 800bdb8:	f000 ff42 	bl	800cc40 <__any_on>
 800bdbc:	2800      	cmp	r0, #0
 800bdbe:	d145      	bne.n	800be4c <__gethex+0x280>
 800bdc0:	f04f 0a02 	mov.w	sl, #2
 800bdc4:	4639      	mov	r1, r7
 800bdc6:	4620      	mov	r0, r4
 800bdc8:	f7ff fe99 	bl	800bafe <rshift>
 800bdcc:	443d      	add	r5, r7
 800bdce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bdd2:	42ab      	cmp	r3, r5
 800bdd4:	da4c      	bge.n	800be70 <__gethex+0x2a4>
 800bdd6:	ee18 0a10 	vmov	r0, s16
 800bdda:	4621      	mov	r1, r4
 800bddc:	f000 fad6 	bl	800c38c <_Bfree>
 800bde0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bde2:	2300      	movs	r3, #0
 800bde4:	6013      	str	r3, [r2, #0]
 800bde6:	27a3      	movs	r7, #163	; 0xa3
 800bde8:	e785      	b.n	800bcf6 <__gethex+0x12a>
 800bdea:	1e73      	subs	r3, r6, #1
 800bdec:	9a05      	ldr	r2, [sp, #20]
 800bdee:	9303      	str	r3, [sp, #12]
 800bdf0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bdf4:	4293      	cmp	r3, r2
 800bdf6:	d019      	beq.n	800be2c <__gethex+0x260>
 800bdf8:	f1bb 0f20 	cmp.w	fp, #32
 800bdfc:	d107      	bne.n	800be0e <__gethex+0x242>
 800bdfe:	9b02      	ldr	r3, [sp, #8]
 800be00:	9a00      	ldr	r2, [sp, #0]
 800be02:	f843 2b04 	str.w	r2, [r3], #4
 800be06:	9302      	str	r3, [sp, #8]
 800be08:	2300      	movs	r3, #0
 800be0a:	9300      	str	r3, [sp, #0]
 800be0c:	469b      	mov	fp, r3
 800be0e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800be12:	f7ff fec6 	bl	800bba2 <__hexdig_fun>
 800be16:	9b00      	ldr	r3, [sp, #0]
 800be18:	f000 000f 	and.w	r0, r0, #15
 800be1c:	fa00 f00b 	lsl.w	r0, r0, fp
 800be20:	4303      	orrs	r3, r0
 800be22:	9300      	str	r3, [sp, #0]
 800be24:	f10b 0b04 	add.w	fp, fp, #4
 800be28:	9b03      	ldr	r3, [sp, #12]
 800be2a:	e00d      	b.n	800be48 <__gethex+0x27c>
 800be2c:	9b03      	ldr	r3, [sp, #12]
 800be2e:	9a06      	ldr	r2, [sp, #24]
 800be30:	4413      	add	r3, r2
 800be32:	42bb      	cmp	r3, r7
 800be34:	d3e0      	bcc.n	800bdf8 <__gethex+0x22c>
 800be36:	4618      	mov	r0, r3
 800be38:	9901      	ldr	r1, [sp, #4]
 800be3a:	9307      	str	r3, [sp, #28]
 800be3c:	4652      	mov	r2, sl
 800be3e:	f7fd ff24 	bl	8009c8a <strncmp>
 800be42:	9b07      	ldr	r3, [sp, #28]
 800be44:	2800      	cmp	r0, #0
 800be46:	d1d7      	bne.n	800bdf8 <__gethex+0x22c>
 800be48:	461e      	mov	r6, r3
 800be4a:	e78b      	b.n	800bd64 <__gethex+0x198>
 800be4c:	f04f 0a03 	mov.w	sl, #3
 800be50:	e7b8      	b.n	800bdc4 <__gethex+0x1f8>
 800be52:	da0a      	bge.n	800be6a <__gethex+0x29e>
 800be54:	1a37      	subs	r7, r6, r0
 800be56:	4621      	mov	r1, r4
 800be58:	ee18 0a10 	vmov	r0, s16
 800be5c:	463a      	mov	r2, r7
 800be5e:	f000 fcb1 	bl	800c7c4 <__lshift>
 800be62:	1bed      	subs	r5, r5, r7
 800be64:	4604      	mov	r4, r0
 800be66:	f100 0914 	add.w	r9, r0, #20
 800be6a:	f04f 0a00 	mov.w	sl, #0
 800be6e:	e7ae      	b.n	800bdce <__gethex+0x202>
 800be70:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800be74:	42a8      	cmp	r0, r5
 800be76:	dd72      	ble.n	800bf5e <__gethex+0x392>
 800be78:	1b45      	subs	r5, r0, r5
 800be7a:	42ae      	cmp	r6, r5
 800be7c:	dc36      	bgt.n	800beec <__gethex+0x320>
 800be7e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800be82:	2b02      	cmp	r3, #2
 800be84:	d02a      	beq.n	800bedc <__gethex+0x310>
 800be86:	2b03      	cmp	r3, #3
 800be88:	d02c      	beq.n	800bee4 <__gethex+0x318>
 800be8a:	2b01      	cmp	r3, #1
 800be8c:	d115      	bne.n	800beba <__gethex+0x2ee>
 800be8e:	42ae      	cmp	r6, r5
 800be90:	d113      	bne.n	800beba <__gethex+0x2ee>
 800be92:	2e01      	cmp	r6, #1
 800be94:	d10b      	bne.n	800beae <__gethex+0x2e2>
 800be96:	9a04      	ldr	r2, [sp, #16]
 800be98:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800be9c:	6013      	str	r3, [r2, #0]
 800be9e:	2301      	movs	r3, #1
 800bea0:	6123      	str	r3, [r4, #16]
 800bea2:	f8c9 3000 	str.w	r3, [r9]
 800bea6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bea8:	2762      	movs	r7, #98	; 0x62
 800beaa:	601c      	str	r4, [r3, #0]
 800beac:	e723      	b.n	800bcf6 <__gethex+0x12a>
 800beae:	1e71      	subs	r1, r6, #1
 800beb0:	4620      	mov	r0, r4
 800beb2:	f000 fec5 	bl	800cc40 <__any_on>
 800beb6:	2800      	cmp	r0, #0
 800beb8:	d1ed      	bne.n	800be96 <__gethex+0x2ca>
 800beba:	ee18 0a10 	vmov	r0, s16
 800bebe:	4621      	mov	r1, r4
 800bec0:	f000 fa64 	bl	800c38c <_Bfree>
 800bec4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bec6:	2300      	movs	r3, #0
 800bec8:	6013      	str	r3, [r2, #0]
 800beca:	2750      	movs	r7, #80	; 0x50
 800becc:	e713      	b.n	800bcf6 <__gethex+0x12a>
 800bece:	bf00      	nop
 800bed0:	0800f74c 	.word	0x0800f74c
 800bed4:	0800f66c 	.word	0x0800f66c
 800bed8:	0800f6e0 	.word	0x0800f6e0
 800bedc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d1eb      	bne.n	800beba <__gethex+0x2ee>
 800bee2:	e7d8      	b.n	800be96 <__gethex+0x2ca>
 800bee4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d1d5      	bne.n	800be96 <__gethex+0x2ca>
 800beea:	e7e6      	b.n	800beba <__gethex+0x2ee>
 800beec:	1e6f      	subs	r7, r5, #1
 800beee:	f1ba 0f00 	cmp.w	sl, #0
 800bef2:	d131      	bne.n	800bf58 <__gethex+0x38c>
 800bef4:	b127      	cbz	r7, 800bf00 <__gethex+0x334>
 800bef6:	4639      	mov	r1, r7
 800bef8:	4620      	mov	r0, r4
 800befa:	f000 fea1 	bl	800cc40 <__any_on>
 800befe:	4682      	mov	sl, r0
 800bf00:	117b      	asrs	r3, r7, #5
 800bf02:	2101      	movs	r1, #1
 800bf04:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800bf08:	f007 071f 	and.w	r7, r7, #31
 800bf0c:	fa01 f707 	lsl.w	r7, r1, r7
 800bf10:	421f      	tst	r7, r3
 800bf12:	4629      	mov	r1, r5
 800bf14:	4620      	mov	r0, r4
 800bf16:	bf18      	it	ne
 800bf18:	f04a 0a02 	orrne.w	sl, sl, #2
 800bf1c:	1b76      	subs	r6, r6, r5
 800bf1e:	f7ff fdee 	bl	800bafe <rshift>
 800bf22:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800bf26:	2702      	movs	r7, #2
 800bf28:	f1ba 0f00 	cmp.w	sl, #0
 800bf2c:	d048      	beq.n	800bfc0 <__gethex+0x3f4>
 800bf2e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bf32:	2b02      	cmp	r3, #2
 800bf34:	d015      	beq.n	800bf62 <__gethex+0x396>
 800bf36:	2b03      	cmp	r3, #3
 800bf38:	d017      	beq.n	800bf6a <__gethex+0x39e>
 800bf3a:	2b01      	cmp	r3, #1
 800bf3c:	d109      	bne.n	800bf52 <__gethex+0x386>
 800bf3e:	f01a 0f02 	tst.w	sl, #2
 800bf42:	d006      	beq.n	800bf52 <__gethex+0x386>
 800bf44:	f8d9 0000 	ldr.w	r0, [r9]
 800bf48:	ea4a 0a00 	orr.w	sl, sl, r0
 800bf4c:	f01a 0f01 	tst.w	sl, #1
 800bf50:	d10e      	bne.n	800bf70 <__gethex+0x3a4>
 800bf52:	f047 0710 	orr.w	r7, r7, #16
 800bf56:	e033      	b.n	800bfc0 <__gethex+0x3f4>
 800bf58:	f04f 0a01 	mov.w	sl, #1
 800bf5c:	e7d0      	b.n	800bf00 <__gethex+0x334>
 800bf5e:	2701      	movs	r7, #1
 800bf60:	e7e2      	b.n	800bf28 <__gethex+0x35c>
 800bf62:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bf64:	f1c3 0301 	rsb	r3, r3, #1
 800bf68:	9315      	str	r3, [sp, #84]	; 0x54
 800bf6a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d0f0      	beq.n	800bf52 <__gethex+0x386>
 800bf70:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800bf74:	f104 0314 	add.w	r3, r4, #20
 800bf78:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800bf7c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800bf80:	f04f 0c00 	mov.w	ip, #0
 800bf84:	4618      	mov	r0, r3
 800bf86:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf8a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800bf8e:	d01c      	beq.n	800bfca <__gethex+0x3fe>
 800bf90:	3201      	adds	r2, #1
 800bf92:	6002      	str	r2, [r0, #0]
 800bf94:	2f02      	cmp	r7, #2
 800bf96:	f104 0314 	add.w	r3, r4, #20
 800bf9a:	d13f      	bne.n	800c01c <__gethex+0x450>
 800bf9c:	f8d8 2000 	ldr.w	r2, [r8]
 800bfa0:	3a01      	subs	r2, #1
 800bfa2:	42b2      	cmp	r2, r6
 800bfa4:	d10a      	bne.n	800bfbc <__gethex+0x3f0>
 800bfa6:	1171      	asrs	r1, r6, #5
 800bfa8:	2201      	movs	r2, #1
 800bfaa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bfae:	f006 061f 	and.w	r6, r6, #31
 800bfb2:	fa02 f606 	lsl.w	r6, r2, r6
 800bfb6:	421e      	tst	r6, r3
 800bfb8:	bf18      	it	ne
 800bfba:	4617      	movne	r7, r2
 800bfbc:	f047 0720 	orr.w	r7, r7, #32
 800bfc0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bfc2:	601c      	str	r4, [r3, #0]
 800bfc4:	9b04      	ldr	r3, [sp, #16]
 800bfc6:	601d      	str	r5, [r3, #0]
 800bfc8:	e695      	b.n	800bcf6 <__gethex+0x12a>
 800bfca:	4299      	cmp	r1, r3
 800bfcc:	f843 cc04 	str.w	ip, [r3, #-4]
 800bfd0:	d8d8      	bhi.n	800bf84 <__gethex+0x3b8>
 800bfd2:	68a3      	ldr	r3, [r4, #8]
 800bfd4:	459b      	cmp	fp, r3
 800bfd6:	db19      	blt.n	800c00c <__gethex+0x440>
 800bfd8:	6861      	ldr	r1, [r4, #4]
 800bfda:	ee18 0a10 	vmov	r0, s16
 800bfde:	3101      	adds	r1, #1
 800bfe0:	f000 f994 	bl	800c30c <_Balloc>
 800bfe4:	4681      	mov	r9, r0
 800bfe6:	b918      	cbnz	r0, 800bff0 <__gethex+0x424>
 800bfe8:	4b1a      	ldr	r3, [pc, #104]	; (800c054 <__gethex+0x488>)
 800bfea:	4602      	mov	r2, r0
 800bfec:	2184      	movs	r1, #132	; 0x84
 800bfee:	e6a8      	b.n	800bd42 <__gethex+0x176>
 800bff0:	6922      	ldr	r2, [r4, #16]
 800bff2:	3202      	adds	r2, #2
 800bff4:	f104 010c 	add.w	r1, r4, #12
 800bff8:	0092      	lsls	r2, r2, #2
 800bffa:	300c      	adds	r0, #12
 800bffc:	f7fc fe0c 	bl	8008c18 <memcpy>
 800c000:	4621      	mov	r1, r4
 800c002:	ee18 0a10 	vmov	r0, s16
 800c006:	f000 f9c1 	bl	800c38c <_Bfree>
 800c00a:	464c      	mov	r4, r9
 800c00c:	6923      	ldr	r3, [r4, #16]
 800c00e:	1c5a      	adds	r2, r3, #1
 800c010:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c014:	6122      	str	r2, [r4, #16]
 800c016:	2201      	movs	r2, #1
 800c018:	615a      	str	r2, [r3, #20]
 800c01a:	e7bb      	b.n	800bf94 <__gethex+0x3c8>
 800c01c:	6922      	ldr	r2, [r4, #16]
 800c01e:	455a      	cmp	r2, fp
 800c020:	dd0b      	ble.n	800c03a <__gethex+0x46e>
 800c022:	2101      	movs	r1, #1
 800c024:	4620      	mov	r0, r4
 800c026:	f7ff fd6a 	bl	800bafe <rshift>
 800c02a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c02e:	3501      	adds	r5, #1
 800c030:	42ab      	cmp	r3, r5
 800c032:	f6ff aed0 	blt.w	800bdd6 <__gethex+0x20a>
 800c036:	2701      	movs	r7, #1
 800c038:	e7c0      	b.n	800bfbc <__gethex+0x3f0>
 800c03a:	f016 061f 	ands.w	r6, r6, #31
 800c03e:	d0fa      	beq.n	800c036 <__gethex+0x46a>
 800c040:	449a      	add	sl, r3
 800c042:	f1c6 0620 	rsb	r6, r6, #32
 800c046:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800c04a:	f000 fa55 	bl	800c4f8 <__hi0bits>
 800c04e:	42b0      	cmp	r0, r6
 800c050:	dbe7      	blt.n	800c022 <__gethex+0x456>
 800c052:	e7f0      	b.n	800c036 <__gethex+0x46a>
 800c054:	0800f66c 	.word	0x0800f66c

0800c058 <L_shift>:
 800c058:	f1c2 0208 	rsb	r2, r2, #8
 800c05c:	0092      	lsls	r2, r2, #2
 800c05e:	b570      	push	{r4, r5, r6, lr}
 800c060:	f1c2 0620 	rsb	r6, r2, #32
 800c064:	6843      	ldr	r3, [r0, #4]
 800c066:	6804      	ldr	r4, [r0, #0]
 800c068:	fa03 f506 	lsl.w	r5, r3, r6
 800c06c:	432c      	orrs	r4, r5
 800c06e:	40d3      	lsrs	r3, r2
 800c070:	6004      	str	r4, [r0, #0]
 800c072:	f840 3f04 	str.w	r3, [r0, #4]!
 800c076:	4288      	cmp	r0, r1
 800c078:	d3f4      	bcc.n	800c064 <L_shift+0xc>
 800c07a:	bd70      	pop	{r4, r5, r6, pc}

0800c07c <__match>:
 800c07c:	b530      	push	{r4, r5, lr}
 800c07e:	6803      	ldr	r3, [r0, #0]
 800c080:	3301      	adds	r3, #1
 800c082:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c086:	b914      	cbnz	r4, 800c08e <__match+0x12>
 800c088:	6003      	str	r3, [r0, #0]
 800c08a:	2001      	movs	r0, #1
 800c08c:	bd30      	pop	{r4, r5, pc}
 800c08e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c092:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c096:	2d19      	cmp	r5, #25
 800c098:	bf98      	it	ls
 800c09a:	3220      	addls	r2, #32
 800c09c:	42a2      	cmp	r2, r4
 800c09e:	d0f0      	beq.n	800c082 <__match+0x6>
 800c0a0:	2000      	movs	r0, #0
 800c0a2:	e7f3      	b.n	800c08c <__match+0x10>

0800c0a4 <__hexnan>:
 800c0a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0a8:	680b      	ldr	r3, [r1, #0]
 800c0aa:	6801      	ldr	r1, [r0, #0]
 800c0ac:	115e      	asrs	r6, r3, #5
 800c0ae:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c0b2:	f013 031f 	ands.w	r3, r3, #31
 800c0b6:	b087      	sub	sp, #28
 800c0b8:	bf18      	it	ne
 800c0ba:	3604      	addne	r6, #4
 800c0bc:	2500      	movs	r5, #0
 800c0be:	1f37      	subs	r7, r6, #4
 800c0c0:	4682      	mov	sl, r0
 800c0c2:	4690      	mov	r8, r2
 800c0c4:	9301      	str	r3, [sp, #4]
 800c0c6:	f846 5c04 	str.w	r5, [r6, #-4]
 800c0ca:	46b9      	mov	r9, r7
 800c0cc:	463c      	mov	r4, r7
 800c0ce:	9502      	str	r5, [sp, #8]
 800c0d0:	46ab      	mov	fp, r5
 800c0d2:	784a      	ldrb	r2, [r1, #1]
 800c0d4:	1c4b      	adds	r3, r1, #1
 800c0d6:	9303      	str	r3, [sp, #12]
 800c0d8:	b342      	cbz	r2, 800c12c <__hexnan+0x88>
 800c0da:	4610      	mov	r0, r2
 800c0dc:	9105      	str	r1, [sp, #20]
 800c0de:	9204      	str	r2, [sp, #16]
 800c0e0:	f7ff fd5f 	bl	800bba2 <__hexdig_fun>
 800c0e4:	2800      	cmp	r0, #0
 800c0e6:	d14f      	bne.n	800c188 <__hexnan+0xe4>
 800c0e8:	9a04      	ldr	r2, [sp, #16]
 800c0ea:	9905      	ldr	r1, [sp, #20]
 800c0ec:	2a20      	cmp	r2, #32
 800c0ee:	d818      	bhi.n	800c122 <__hexnan+0x7e>
 800c0f0:	9b02      	ldr	r3, [sp, #8]
 800c0f2:	459b      	cmp	fp, r3
 800c0f4:	dd13      	ble.n	800c11e <__hexnan+0x7a>
 800c0f6:	454c      	cmp	r4, r9
 800c0f8:	d206      	bcs.n	800c108 <__hexnan+0x64>
 800c0fa:	2d07      	cmp	r5, #7
 800c0fc:	dc04      	bgt.n	800c108 <__hexnan+0x64>
 800c0fe:	462a      	mov	r2, r5
 800c100:	4649      	mov	r1, r9
 800c102:	4620      	mov	r0, r4
 800c104:	f7ff ffa8 	bl	800c058 <L_shift>
 800c108:	4544      	cmp	r4, r8
 800c10a:	d950      	bls.n	800c1ae <__hexnan+0x10a>
 800c10c:	2300      	movs	r3, #0
 800c10e:	f1a4 0904 	sub.w	r9, r4, #4
 800c112:	f844 3c04 	str.w	r3, [r4, #-4]
 800c116:	f8cd b008 	str.w	fp, [sp, #8]
 800c11a:	464c      	mov	r4, r9
 800c11c:	461d      	mov	r5, r3
 800c11e:	9903      	ldr	r1, [sp, #12]
 800c120:	e7d7      	b.n	800c0d2 <__hexnan+0x2e>
 800c122:	2a29      	cmp	r2, #41	; 0x29
 800c124:	d156      	bne.n	800c1d4 <__hexnan+0x130>
 800c126:	3102      	adds	r1, #2
 800c128:	f8ca 1000 	str.w	r1, [sl]
 800c12c:	f1bb 0f00 	cmp.w	fp, #0
 800c130:	d050      	beq.n	800c1d4 <__hexnan+0x130>
 800c132:	454c      	cmp	r4, r9
 800c134:	d206      	bcs.n	800c144 <__hexnan+0xa0>
 800c136:	2d07      	cmp	r5, #7
 800c138:	dc04      	bgt.n	800c144 <__hexnan+0xa0>
 800c13a:	462a      	mov	r2, r5
 800c13c:	4649      	mov	r1, r9
 800c13e:	4620      	mov	r0, r4
 800c140:	f7ff ff8a 	bl	800c058 <L_shift>
 800c144:	4544      	cmp	r4, r8
 800c146:	d934      	bls.n	800c1b2 <__hexnan+0x10e>
 800c148:	f1a8 0204 	sub.w	r2, r8, #4
 800c14c:	4623      	mov	r3, r4
 800c14e:	f853 1b04 	ldr.w	r1, [r3], #4
 800c152:	f842 1f04 	str.w	r1, [r2, #4]!
 800c156:	429f      	cmp	r7, r3
 800c158:	d2f9      	bcs.n	800c14e <__hexnan+0xaa>
 800c15a:	1b3b      	subs	r3, r7, r4
 800c15c:	f023 0303 	bic.w	r3, r3, #3
 800c160:	3304      	adds	r3, #4
 800c162:	3401      	adds	r4, #1
 800c164:	3e03      	subs	r6, #3
 800c166:	42b4      	cmp	r4, r6
 800c168:	bf88      	it	hi
 800c16a:	2304      	movhi	r3, #4
 800c16c:	4443      	add	r3, r8
 800c16e:	2200      	movs	r2, #0
 800c170:	f843 2b04 	str.w	r2, [r3], #4
 800c174:	429f      	cmp	r7, r3
 800c176:	d2fb      	bcs.n	800c170 <__hexnan+0xcc>
 800c178:	683b      	ldr	r3, [r7, #0]
 800c17a:	b91b      	cbnz	r3, 800c184 <__hexnan+0xe0>
 800c17c:	4547      	cmp	r7, r8
 800c17e:	d127      	bne.n	800c1d0 <__hexnan+0x12c>
 800c180:	2301      	movs	r3, #1
 800c182:	603b      	str	r3, [r7, #0]
 800c184:	2005      	movs	r0, #5
 800c186:	e026      	b.n	800c1d6 <__hexnan+0x132>
 800c188:	3501      	adds	r5, #1
 800c18a:	2d08      	cmp	r5, #8
 800c18c:	f10b 0b01 	add.w	fp, fp, #1
 800c190:	dd06      	ble.n	800c1a0 <__hexnan+0xfc>
 800c192:	4544      	cmp	r4, r8
 800c194:	d9c3      	bls.n	800c11e <__hexnan+0x7a>
 800c196:	2300      	movs	r3, #0
 800c198:	f844 3c04 	str.w	r3, [r4, #-4]
 800c19c:	2501      	movs	r5, #1
 800c19e:	3c04      	subs	r4, #4
 800c1a0:	6822      	ldr	r2, [r4, #0]
 800c1a2:	f000 000f 	and.w	r0, r0, #15
 800c1a6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800c1aa:	6022      	str	r2, [r4, #0]
 800c1ac:	e7b7      	b.n	800c11e <__hexnan+0x7a>
 800c1ae:	2508      	movs	r5, #8
 800c1b0:	e7b5      	b.n	800c11e <__hexnan+0x7a>
 800c1b2:	9b01      	ldr	r3, [sp, #4]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d0df      	beq.n	800c178 <__hexnan+0xd4>
 800c1b8:	f04f 32ff 	mov.w	r2, #4294967295
 800c1bc:	f1c3 0320 	rsb	r3, r3, #32
 800c1c0:	fa22 f303 	lsr.w	r3, r2, r3
 800c1c4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c1c8:	401a      	ands	r2, r3
 800c1ca:	f846 2c04 	str.w	r2, [r6, #-4]
 800c1ce:	e7d3      	b.n	800c178 <__hexnan+0xd4>
 800c1d0:	3f04      	subs	r7, #4
 800c1d2:	e7d1      	b.n	800c178 <__hexnan+0xd4>
 800c1d4:	2004      	movs	r0, #4
 800c1d6:	b007      	add	sp, #28
 800c1d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c1dc <_localeconv_r>:
 800c1dc:	4800      	ldr	r0, [pc, #0]	; (800c1e0 <_localeconv_r+0x4>)
 800c1de:	4770      	bx	lr
 800c1e0:	2000016c 	.word	0x2000016c

0800c1e4 <__retarget_lock_init_recursive>:
 800c1e4:	4770      	bx	lr

0800c1e6 <__retarget_lock_acquire_recursive>:
 800c1e6:	4770      	bx	lr

0800c1e8 <__retarget_lock_release_recursive>:
 800c1e8:	4770      	bx	lr
	...

0800c1ec <_lseek_r>:
 800c1ec:	b538      	push	{r3, r4, r5, lr}
 800c1ee:	4d07      	ldr	r5, [pc, #28]	; (800c20c <_lseek_r+0x20>)
 800c1f0:	4604      	mov	r4, r0
 800c1f2:	4608      	mov	r0, r1
 800c1f4:	4611      	mov	r1, r2
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	602a      	str	r2, [r5, #0]
 800c1fa:	461a      	mov	r2, r3
 800c1fc:	f7f7 fb05 	bl	800380a <_lseek>
 800c200:	1c43      	adds	r3, r0, #1
 800c202:	d102      	bne.n	800c20a <_lseek_r+0x1e>
 800c204:	682b      	ldr	r3, [r5, #0]
 800c206:	b103      	cbz	r3, 800c20a <_lseek_r+0x1e>
 800c208:	6023      	str	r3, [r4, #0]
 800c20a:	bd38      	pop	{r3, r4, r5, pc}
 800c20c:	200039e8 	.word	0x200039e8

0800c210 <__swhatbuf_r>:
 800c210:	b570      	push	{r4, r5, r6, lr}
 800c212:	460e      	mov	r6, r1
 800c214:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c218:	2900      	cmp	r1, #0
 800c21a:	b096      	sub	sp, #88	; 0x58
 800c21c:	4614      	mov	r4, r2
 800c21e:	461d      	mov	r5, r3
 800c220:	da07      	bge.n	800c232 <__swhatbuf_r+0x22>
 800c222:	2300      	movs	r3, #0
 800c224:	602b      	str	r3, [r5, #0]
 800c226:	89b3      	ldrh	r3, [r6, #12]
 800c228:	061a      	lsls	r2, r3, #24
 800c22a:	d410      	bmi.n	800c24e <__swhatbuf_r+0x3e>
 800c22c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c230:	e00e      	b.n	800c250 <__swhatbuf_r+0x40>
 800c232:	466a      	mov	r2, sp
 800c234:	f001 fdcc 	bl	800ddd0 <_fstat_r>
 800c238:	2800      	cmp	r0, #0
 800c23a:	dbf2      	blt.n	800c222 <__swhatbuf_r+0x12>
 800c23c:	9a01      	ldr	r2, [sp, #4]
 800c23e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c242:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c246:	425a      	negs	r2, r3
 800c248:	415a      	adcs	r2, r3
 800c24a:	602a      	str	r2, [r5, #0]
 800c24c:	e7ee      	b.n	800c22c <__swhatbuf_r+0x1c>
 800c24e:	2340      	movs	r3, #64	; 0x40
 800c250:	2000      	movs	r0, #0
 800c252:	6023      	str	r3, [r4, #0]
 800c254:	b016      	add	sp, #88	; 0x58
 800c256:	bd70      	pop	{r4, r5, r6, pc}

0800c258 <__smakebuf_r>:
 800c258:	898b      	ldrh	r3, [r1, #12]
 800c25a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c25c:	079d      	lsls	r5, r3, #30
 800c25e:	4606      	mov	r6, r0
 800c260:	460c      	mov	r4, r1
 800c262:	d507      	bpl.n	800c274 <__smakebuf_r+0x1c>
 800c264:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c268:	6023      	str	r3, [r4, #0]
 800c26a:	6123      	str	r3, [r4, #16]
 800c26c:	2301      	movs	r3, #1
 800c26e:	6163      	str	r3, [r4, #20]
 800c270:	b002      	add	sp, #8
 800c272:	bd70      	pop	{r4, r5, r6, pc}
 800c274:	ab01      	add	r3, sp, #4
 800c276:	466a      	mov	r2, sp
 800c278:	f7ff ffca 	bl	800c210 <__swhatbuf_r>
 800c27c:	9900      	ldr	r1, [sp, #0]
 800c27e:	4605      	mov	r5, r0
 800c280:	4630      	mov	r0, r6
 800c282:	f000 fd5d 	bl	800cd40 <_malloc_r>
 800c286:	b948      	cbnz	r0, 800c29c <__smakebuf_r+0x44>
 800c288:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c28c:	059a      	lsls	r2, r3, #22
 800c28e:	d4ef      	bmi.n	800c270 <__smakebuf_r+0x18>
 800c290:	f023 0303 	bic.w	r3, r3, #3
 800c294:	f043 0302 	orr.w	r3, r3, #2
 800c298:	81a3      	strh	r3, [r4, #12]
 800c29a:	e7e3      	b.n	800c264 <__smakebuf_r+0xc>
 800c29c:	4b0d      	ldr	r3, [pc, #52]	; (800c2d4 <__smakebuf_r+0x7c>)
 800c29e:	62b3      	str	r3, [r6, #40]	; 0x28
 800c2a0:	89a3      	ldrh	r3, [r4, #12]
 800c2a2:	6020      	str	r0, [r4, #0]
 800c2a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c2a8:	81a3      	strh	r3, [r4, #12]
 800c2aa:	9b00      	ldr	r3, [sp, #0]
 800c2ac:	6163      	str	r3, [r4, #20]
 800c2ae:	9b01      	ldr	r3, [sp, #4]
 800c2b0:	6120      	str	r0, [r4, #16]
 800c2b2:	b15b      	cbz	r3, 800c2cc <__smakebuf_r+0x74>
 800c2b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c2b8:	4630      	mov	r0, r6
 800c2ba:	f001 fd9b 	bl	800ddf4 <_isatty_r>
 800c2be:	b128      	cbz	r0, 800c2cc <__smakebuf_r+0x74>
 800c2c0:	89a3      	ldrh	r3, [r4, #12]
 800c2c2:	f023 0303 	bic.w	r3, r3, #3
 800c2c6:	f043 0301 	orr.w	r3, r3, #1
 800c2ca:	81a3      	strh	r3, [r4, #12]
 800c2cc:	89a0      	ldrh	r0, [r4, #12]
 800c2ce:	4305      	orrs	r5, r0
 800c2d0:	81a5      	strh	r5, [r4, #12]
 800c2d2:	e7cd      	b.n	800c270 <__smakebuf_r+0x18>
 800c2d4:	0800b95d 	.word	0x0800b95d

0800c2d8 <malloc>:
 800c2d8:	4b02      	ldr	r3, [pc, #8]	; (800c2e4 <malloc+0xc>)
 800c2da:	4601      	mov	r1, r0
 800c2dc:	6818      	ldr	r0, [r3, #0]
 800c2de:	f000 bd2f 	b.w	800cd40 <_malloc_r>
 800c2e2:	bf00      	nop
 800c2e4:	20000014 	.word	0x20000014

0800c2e8 <__ascii_mbtowc>:
 800c2e8:	b082      	sub	sp, #8
 800c2ea:	b901      	cbnz	r1, 800c2ee <__ascii_mbtowc+0x6>
 800c2ec:	a901      	add	r1, sp, #4
 800c2ee:	b142      	cbz	r2, 800c302 <__ascii_mbtowc+0x1a>
 800c2f0:	b14b      	cbz	r3, 800c306 <__ascii_mbtowc+0x1e>
 800c2f2:	7813      	ldrb	r3, [r2, #0]
 800c2f4:	600b      	str	r3, [r1, #0]
 800c2f6:	7812      	ldrb	r2, [r2, #0]
 800c2f8:	1e10      	subs	r0, r2, #0
 800c2fa:	bf18      	it	ne
 800c2fc:	2001      	movne	r0, #1
 800c2fe:	b002      	add	sp, #8
 800c300:	4770      	bx	lr
 800c302:	4610      	mov	r0, r2
 800c304:	e7fb      	b.n	800c2fe <__ascii_mbtowc+0x16>
 800c306:	f06f 0001 	mvn.w	r0, #1
 800c30a:	e7f8      	b.n	800c2fe <__ascii_mbtowc+0x16>

0800c30c <_Balloc>:
 800c30c:	b570      	push	{r4, r5, r6, lr}
 800c30e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c310:	4604      	mov	r4, r0
 800c312:	460d      	mov	r5, r1
 800c314:	b976      	cbnz	r6, 800c334 <_Balloc+0x28>
 800c316:	2010      	movs	r0, #16
 800c318:	f7ff ffde 	bl	800c2d8 <malloc>
 800c31c:	4602      	mov	r2, r0
 800c31e:	6260      	str	r0, [r4, #36]	; 0x24
 800c320:	b920      	cbnz	r0, 800c32c <_Balloc+0x20>
 800c322:	4b18      	ldr	r3, [pc, #96]	; (800c384 <_Balloc+0x78>)
 800c324:	4818      	ldr	r0, [pc, #96]	; (800c388 <_Balloc+0x7c>)
 800c326:	2166      	movs	r1, #102	; 0x66
 800c328:	f001 fd22 	bl	800dd70 <__assert_func>
 800c32c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c330:	6006      	str	r6, [r0, #0]
 800c332:	60c6      	str	r6, [r0, #12]
 800c334:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c336:	68f3      	ldr	r3, [r6, #12]
 800c338:	b183      	cbz	r3, 800c35c <_Balloc+0x50>
 800c33a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c33c:	68db      	ldr	r3, [r3, #12]
 800c33e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c342:	b9b8      	cbnz	r0, 800c374 <_Balloc+0x68>
 800c344:	2101      	movs	r1, #1
 800c346:	fa01 f605 	lsl.w	r6, r1, r5
 800c34a:	1d72      	adds	r2, r6, #5
 800c34c:	0092      	lsls	r2, r2, #2
 800c34e:	4620      	mov	r0, r4
 800c350:	f000 fc97 	bl	800cc82 <_calloc_r>
 800c354:	b160      	cbz	r0, 800c370 <_Balloc+0x64>
 800c356:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c35a:	e00e      	b.n	800c37a <_Balloc+0x6e>
 800c35c:	2221      	movs	r2, #33	; 0x21
 800c35e:	2104      	movs	r1, #4
 800c360:	4620      	mov	r0, r4
 800c362:	f000 fc8e 	bl	800cc82 <_calloc_r>
 800c366:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c368:	60f0      	str	r0, [r6, #12]
 800c36a:	68db      	ldr	r3, [r3, #12]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d1e4      	bne.n	800c33a <_Balloc+0x2e>
 800c370:	2000      	movs	r0, #0
 800c372:	bd70      	pop	{r4, r5, r6, pc}
 800c374:	6802      	ldr	r2, [r0, #0]
 800c376:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c37a:	2300      	movs	r3, #0
 800c37c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c380:	e7f7      	b.n	800c372 <_Balloc+0x66>
 800c382:	bf00      	nop
 800c384:	0800f5f6 	.word	0x0800f5f6
 800c388:	0800f760 	.word	0x0800f760

0800c38c <_Bfree>:
 800c38c:	b570      	push	{r4, r5, r6, lr}
 800c38e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c390:	4605      	mov	r5, r0
 800c392:	460c      	mov	r4, r1
 800c394:	b976      	cbnz	r6, 800c3b4 <_Bfree+0x28>
 800c396:	2010      	movs	r0, #16
 800c398:	f7ff ff9e 	bl	800c2d8 <malloc>
 800c39c:	4602      	mov	r2, r0
 800c39e:	6268      	str	r0, [r5, #36]	; 0x24
 800c3a0:	b920      	cbnz	r0, 800c3ac <_Bfree+0x20>
 800c3a2:	4b09      	ldr	r3, [pc, #36]	; (800c3c8 <_Bfree+0x3c>)
 800c3a4:	4809      	ldr	r0, [pc, #36]	; (800c3cc <_Bfree+0x40>)
 800c3a6:	218a      	movs	r1, #138	; 0x8a
 800c3a8:	f001 fce2 	bl	800dd70 <__assert_func>
 800c3ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c3b0:	6006      	str	r6, [r0, #0]
 800c3b2:	60c6      	str	r6, [r0, #12]
 800c3b4:	b13c      	cbz	r4, 800c3c6 <_Bfree+0x3a>
 800c3b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c3b8:	6862      	ldr	r2, [r4, #4]
 800c3ba:	68db      	ldr	r3, [r3, #12]
 800c3bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c3c0:	6021      	str	r1, [r4, #0]
 800c3c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c3c6:	bd70      	pop	{r4, r5, r6, pc}
 800c3c8:	0800f5f6 	.word	0x0800f5f6
 800c3cc:	0800f760 	.word	0x0800f760

0800c3d0 <__multadd>:
 800c3d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3d4:	690e      	ldr	r6, [r1, #16]
 800c3d6:	4607      	mov	r7, r0
 800c3d8:	4698      	mov	r8, r3
 800c3da:	460c      	mov	r4, r1
 800c3dc:	f101 0014 	add.w	r0, r1, #20
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	6805      	ldr	r5, [r0, #0]
 800c3e4:	b2a9      	uxth	r1, r5
 800c3e6:	fb02 8101 	mla	r1, r2, r1, r8
 800c3ea:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800c3ee:	0c2d      	lsrs	r5, r5, #16
 800c3f0:	fb02 c505 	mla	r5, r2, r5, ip
 800c3f4:	b289      	uxth	r1, r1
 800c3f6:	3301      	adds	r3, #1
 800c3f8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800c3fc:	429e      	cmp	r6, r3
 800c3fe:	f840 1b04 	str.w	r1, [r0], #4
 800c402:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800c406:	dcec      	bgt.n	800c3e2 <__multadd+0x12>
 800c408:	f1b8 0f00 	cmp.w	r8, #0
 800c40c:	d022      	beq.n	800c454 <__multadd+0x84>
 800c40e:	68a3      	ldr	r3, [r4, #8]
 800c410:	42b3      	cmp	r3, r6
 800c412:	dc19      	bgt.n	800c448 <__multadd+0x78>
 800c414:	6861      	ldr	r1, [r4, #4]
 800c416:	4638      	mov	r0, r7
 800c418:	3101      	adds	r1, #1
 800c41a:	f7ff ff77 	bl	800c30c <_Balloc>
 800c41e:	4605      	mov	r5, r0
 800c420:	b928      	cbnz	r0, 800c42e <__multadd+0x5e>
 800c422:	4602      	mov	r2, r0
 800c424:	4b0d      	ldr	r3, [pc, #52]	; (800c45c <__multadd+0x8c>)
 800c426:	480e      	ldr	r0, [pc, #56]	; (800c460 <__multadd+0x90>)
 800c428:	21b5      	movs	r1, #181	; 0xb5
 800c42a:	f001 fca1 	bl	800dd70 <__assert_func>
 800c42e:	6922      	ldr	r2, [r4, #16]
 800c430:	3202      	adds	r2, #2
 800c432:	f104 010c 	add.w	r1, r4, #12
 800c436:	0092      	lsls	r2, r2, #2
 800c438:	300c      	adds	r0, #12
 800c43a:	f7fc fbed 	bl	8008c18 <memcpy>
 800c43e:	4621      	mov	r1, r4
 800c440:	4638      	mov	r0, r7
 800c442:	f7ff ffa3 	bl	800c38c <_Bfree>
 800c446:	462c      	mov	r4, r5
 800c448:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800c44c:	3601      	adds	r6, #1
 800c44e:	f8c3 8014 	str.w	r8, [r3, #20]
 800c452:	6126      	str	r6, [r4, #16]
 800c454:	4620      	mov	r0, r4
 800c456:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c45a:	bf00      	nop
 800c45c:	0800f66c 	.word	0x0800f66c
 800c460:	0800f760 	.word	0x0800f760

0800c464 <__s2b>:
 800c464:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c468:	460c      	mov	r4, r1
 800c46a:	4615      	mov	r5, r2
 800c46c:	461f      	mov	r7, r3
 800c46e:	2209      	movs	r2, #9
 800c470:	3308      	adds	r3, #8
 800c472:	4606      	mov	r6, r0
 800c474:	fb93 f3f2 	sdiv	r3, r3, r2
 800c478:	2100      	movs	r1, #0
 800c47a:	2201      	movs	r2, #1
 800c47c:	429a      	cmp	r2, r3
 800c47e:	db09      	blt.n	800c494 <__s2b+0x30>
 800c480:	4630      	mov	r0, r6
 800c482:	f7ff ff43 	bl	800c30c <_Balloc>
 800c486:	b940      	cbnz	r0, 800c49a <__s2b+0x36>
 800c488:	4602      	mov	r2, r0
 800c48a:	4b19      	ldr	r3, [pc, #100]	; (800c4f0 <__s2b+0x8c>)
 800c48c:	4819      	ldr	r0, [pc, #100]	; (800c4f4 <__s2b+0x90>)
 800c48e:	21ce      	movs	r1, #206	; 0xce
 800c490:	f001 fc6e 	bl	800dd70 <__assert_func>
 800c494:	0052      	lsls	r2, r2, #1
 800c496:	3101      	adds	r1, #1
 800c498:	e7f0      	b.n	800c47c <__s2b+0x18>
 800c49a:	9b08      	ldr	r3, [sp, #32]
 800c49c:	6143      	str	r3, [r0, #20]
 800c49e:	2d09      	cmp	r5, #9
 800c4a0:	f04f 0301 	mov.w	r3, #1
 800c4a4:	6103      	str	r3, [r0, #16]
 800c4a6:	dd16      	ble.n	800c4d6 <__s2b+0x72>
 800c4a8:	f104 0909 	add.w	r9, r4, #9
 800c4ac:	46c8      	mov	r8, r9
 800c4ae:	442c      	add	r4, r5
 800c4b0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c4b4:	4601      	mov	r1, r0
 800c4b6:	3b30      	subs	r3, #48	; 0x30
 800c4b8:	220a      	movs	r2, #10
 800c4ba:	4630      	mov	r0, r6
 800c4bc:	f7ff ff88 	bl	800c3d0 <__multadd>
 800c4c0:	45a0      	cmp	r8, r4
 800c4c2:	d1f5      	bne.n	800c4b0 <__s2b+0x4c>
 800c4c4:	f1a5 0408 	sub.w	r4, r5, #8
 800c4c8:	444c      	add	r4, r9
 800c4ca:	1b2d      	subs	r5, r5, r4
 800c4cc:	1963      	adds	r3, r4, r5
 800c4ce:	42bb      	cmp	r3, r7
 800c4d0:	db04      	blt.n	800c4dc <__s2b+0x78>
 800c4d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4d6:	340a      	adds	r4, #10
 800c4d8:	2509      	movs	r5, #9
 800c4da:	e7f6      	b.n	800c4ca <__s2b+0x66>
 800c4dc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c4e0:	4601      	mov	r1, r0
 800c4e2:	3b30      	subs	r3, #48	; 0x30
 800c4e4:	220a      	movs	r2, #10
 800c4e6:	4630      	mov	r0, r6
 800c4e8:	f7ff ff72 	bl	800c3d0 <__multadd>
 800c4ec:	e7ee      	b.n	800c4cc <__s2b+0x68>
 800c4ee:	bf00      	nop
 800c4f0:	0800f66c 	.word	0x0800f66c
 800c4f4:	0800f760 	.word	0x0800f760

0800c4f8 <__hi0bits>:
 800c4f8:	0c03      	lsrs	r3, r0, #16
 800c4fa:	041b      	lsls	r3, r3, #16
 800c4fc:	b9d3      	cbnz	r3, 800c534 <__hi0bits+0x3c>
 800c4fe:	0400      	lsls	r0, r0, #16
 800c500:	2310      	movs	r3, #16
 800c502:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c506:	bf04      	itt	eq
 800c508:	0200      	lsleq	r0, r0, #8
 800c50a:	3308      	addeq	r3, #8
 800c50c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c510:	bf04      	itt	eq
 800c512:	0100      	lsleq	r0, r0, #4
 800c514:	3304      	addeq	r3, #4
 800c516:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c51a:	bf04      	itt	eq
 800c51c:	0080      	lsleq	r0, r0, #2
 800c51e:	3302      	addeq	r3, #2
 800c520:	2800      	cmp	r0, #0
 800c522:	db05      	blt.n	800c530 <__hi0bits+0x38>
 800c524:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c528:	f103 0301 	add.w	r3, r3, #1
 800c52c:	bf08      	it	eq
 800c52e:	2320      	moveq	r3, #32
 800c530:	4618      	mov	r0, r3
 800c532:	4770      	bx	lr
 800c534:	2300      	movs	r3, #0
 800c536:	e7e4      	b.n	800c502 <__hi0bits+0xa>

0800c538 <__lo0bits>:
 800c538:	6803      	ldr	r3, [r0, #0]
 800c53a:	f013 0207 	ands.w	r2, r3, #7
 800c53e:	4601      	mov	r1, r0
 800c540:	d00b      	beq.n	800c55a <__lo0bits+0x22>
 800c542:	07da      	lsls	r2, r3, #31
 800c544:	d424      	bmi.n	800c590 <__lo0bits+0x58>
 800c546:	0798      	lsls	r0, r3, #30
 800c548:	bf49      	itett	mi
 800c54a:	085b      	lsrmi	r3, r3, #1
 800c54c:	089b      	lsrpl	r3, r3, #2
 800c54e:	2001      	movmi	r0, #1
 800c550:	600b      	strmi	r3, [r1, #0]
 800c552:	bf5c      	itt	pl
 800c554:	600b      	strpl	r3, [r1, #0]
 800c556:	2002      	movpl	r0, #2
 800c558:	4770      	bx	lr
 800c55a:	b298      	uxth	r0, r3
 800c55c:	b9b0      	cbnz	r0, 800c58c <__lo0bits+0x54>
 800c55e:	0c1b      	lsrs	r3, r3, #16
 800c560:	2010      	movs	r0, #16
 800c562:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c566:	bf04      	itt	eq
 800c568:	0a1b      	lsreq	r3, r3, #8
 800c56a:	3008      	addeq	r0, #8
 800c56c:	071a      	lsls	r2, r3, #28
 800c56e:	bf04      	itt	eq
 800c570:	091b      	lsreq	r3, r3, #4
 800c572:	3004      	addeq	r0, #4
 800c574:	079a      	lsls	r2, r3, #30
 800c576:	bf04      	itt	eq
 800c578:	089b      	lsreq	r3, r3, #2
 800c57a:	3002      	addeq	r0, #2
 800c57c:	07da      	lsls	r2, r3, #31
 800c57e:	d403      	bmi.n	800c588 <__lo0bits+0x50>
 800c580:	085b      	lsrs	r3, r3, #1
 800c582:	f100 0001 	add.w	r0, r0, #1
 800c586:	d005      	beq.n	800c594 <__lo0bits+0x5c>
 800c588:	600b      	str	r3, [r1, #0]
 800c58a:	4770      	bx	lr
 800c58c:	4610      	mov	r0, r2
 800c58e:	e7e8      	b.n	800c562 <__lo0bits+0x2a>
 800c590:	2000      	movs	r0, #0
 800c592:	4770      	bx	lr
 800c594:	2020      	movs	r0, #32
 800c596:	4770      	bx	lr

0800c598 <__i2b>:
 800c598:	b510      	push	{r4, lr}
 800c59a:	460c      	mov	r4, r1
 800c59c:	2101      	movs	r1, #1
 800c59e:	f7ff feb5 	bl	800c30c <_Balloc>
 800c5a2:	4602      	mov	r2, r0
 800c5a4:	b928      	cbnz	r0, 800c5b2 <__i2b+0x1a>
 800c5a6:	4b05      	ldr	r3, [pc, #20]	; (800c5bc <__i2b+0x24>)
 800c5a8:	4805      	ldr	r0, [pc, #20]	; (800c5c0 <__i2b+0x28>)
 800c5aa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c5ae:	f001 fbdf 	bl	800dd70 <__assert_func>
 800c5b2:	2301      	movs	r3, #1
 800c5b4:	6144      	str	r4, [r0, #20]
 800c5b6:	6103      	str	r3, [r0, #16]
 800c5b8:	bd10      	pop	{r4, pc}
 800c5ba:	bf00      	nop
 800c5bc:	0800f66c 	.word	0x0800f66c
 800c5c0:	0800f760 	.word	0x0800f760

0800c5c4 <__multiply>:
 800c5c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5c8:	4614      	mov	r4, r2
 800c5ca:	690a      	ldr	r2, [r1, #16]
 800c5cc:	6923      	ldr	r3, [r4, #16]
 800c5ce:	429a      	cmp	r2, r3
 800c5d0:	bfb8      	it	lt
 800c5d2:	460b      	movlt	r3, r1
 800c5d4:	460d      	mov	r5, r1
 800c5d6:	bfbc      	itt	lt
 800c5d8:	4625      	movlt	r5, r4
 800c5da:	461c      	movlt	r4, r3
 800c5dc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800c5e0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c5e4:	68ab      	ldr	r3, [r5, #8]
 800c5e6:	6869      	ldr	r1, [r5, #4]
 800c5e8:	eb0a 0709 	add.w	r7, sl, r9
 800c5ec:	42bb      	cmp	r3, r7
 800c5ee:	b085      	sub	sp, #20
 800c5f0:	bfb8      	it	lt
 800c5f2:	3101      	addlt	r1, #1
 800c5f4:	f7ff fe8a 	bl	800c30c <_Balloc>
 800c5f8:	b930      	cbnz	r0, 800c608 <__multiply+0x44>
 800c5fa:	4602      	mov	r2, r0
 800c5fc:	4b42      	ldr	r3, [pc, #264]	; (800c708 <__multiply+0x144>)
 800c5fe:	4843      	ldr	r0, [pc, #268]	; (800c70c <__multiply+0x148>)
 800c600:	f240 115d 	movw	r1, #349	; 0x15d
 800c604:	f001 fbb4 	bl	800dd70 <__assert_func>
 800c608:	f100 0614 	add.w	r6, r0, #20
 800c60c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800c610:	4633      	mov	r3, r6
 800c612:	2200      	movs	r2, #0
 800c614:	4543      	cmp	r3, r8
 800c616:	d31e      	bcc.n	800c656 <__multiply+0x92>
 800c618:	f105 0c14 	add.w	ip, r5, #20
 800c61c:	f104 0314 	add.w	r3, r4, #20
 800c620:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800c624:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800c628:	9202      	str	r2, [sp, #8]
 800c62a:	ebac 0205 	sub.w	r2, ip, r5
 800c62e:	3a15      	subs	r2, #21
 800c630:	f022 0203 	bic.w	r2, r2, #3
 800c634:	3204      	adds	r2, #4
 800c636:	f105 0115 	add.w	r1, r5, #21
 800c63a:	458c      	cmp	ip, r1
 800c63c:	bf38      	it	cc
 800c63e:	2204      	movcc	r2, #4
 800c640:	9201      	str	r2, [sp, #4]
 800c642:	9a02      	ldr	r2, [sp, #8]
 800c644:	9303      	str	r3, [sp, #12]
 800c646:	429a      	cmp	r2, r3
 800c648:	d808      	bhi.n	800c65c <__multiply+0x98>
 800c64a:	2f00      	cmp	r7, #0
 800c64c:	dc55      	bgt.n	800c6fa <__multiply+0x136>
 800c64e:	6107      	str	r7, [r0, #16]
 800c650:	b005      	add	sp, #20
 800c652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c656:	f843 2b04 	str.w	r2, [r3], #4
 800c65a:	e7db      	b.n	800c614 <__multiply+0x50>
 800c65c:	f8b3 a000 	ldrh.w	sl, [r3]
 800c660:	f1ba 0f00 	cmp.w	sl, #0
 800c664:	d020      	beq.n	800c6a8 <__multiply+0xe4>
 800c666:	f105 0e14 	add.w	lr, r5, #20
 800c66a:	46b1      	mov	r9, r6
 800c66c:	2200      	movs	r2, #0
 800c66e:	f85e 4b04 	ldr.w	r4, [lr], #4
 800c672:	f8d9 b000 	ldr.w	fp, [r9]
 800c676:	b2a1      	uxth	r1, r4
 800c678:	fa1f fb8b 	uxth.w	fp, fp
 800c67c:	fb0a b101 	mla	r1, sl, r1, fp
 800c680:	4411      	add	r1, r2
 800c682:	f8d9 2000 	ldr.w	r2, [r9]
 800c686:	0c24      	lsrs	r4, r4, #16
 800c688:	0c12      	lsrs	r2, r2, #16
 800c68a:	fb0a 2404 	mla	r4, sl, r4, r2
 800c68e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800c692:	b289      	uxth	r1, r1
 800c694:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800c698:	45f4      	cmp	ip, lr
 800c69a:	f849 1b04 	str.w	r1, [r9], #4
 800c69e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800c6a2:	d8e4      	bhi.n	800c66e <__multiply+0xaa>
 800c6a4:	9901      	ldr	r1, [sp, #4]
 800c6a6:	5072      	str	r2, [r6, r1]
 800c6a8:	9a03      	ldr	r2, [sp, #12]
 800c6aa:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c6ae:	3304      	adds	r3, #4
 800c6b0:	f1b9 0f00 	cmp.w	r9, #0
 800c6b4:	d01f      	beq.n	800c6f6 <__multiply+0x132>
 800c6b6:	6834      	ldr	r4, [r6, #0]
 800c6b8:	f105 0114 	add.w	r1, r5, #20
 800c6bc:	46b6      	mov	lr, r6
 800c6be:	f04f 0a00 	mov.w	sl, #0
 800c6c2:	880a      	ldrh	r2, [r1, #0]
 800c6c4:	f8be b002 	ldrh.w	fp, [lr, #2]
 800c6c8:	fb09 b202 	mla	r2, r9, r2, fp
 800c6cc:	4492      	add	sl, r2
 800c6ce:	b2a4      	uxth	r4, r4
 800c6d0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800c6d4:	f84e 4b04 	str.w	r4, [lr], #4
 800c6d8:	f851 4b04 	ldr.w	r4, [r1], #4
 800c6dc:	f8be 2000 	ldrh.w	r2, [lr]
 800c6e0:	0c24      	lsrs	r4, r4, #16
 800c6e2:	fb09 2404 	mla	r4, r9, r4, r2
 800c6e6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800c6ea:	458c      	cmp	ip, r1
 800c6ec:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800c6f0:	d8e7      	bhi.n	800c6c2 <__multiply+0xfe>
 800c6f2:	9a01      	ldr	r2, [sp, #4]
 800c6f4:	50b4      	str	r4, [r6, r2]
 800c6f6:	3604      	adds	r6, #4
 800c6f8:	e7a3      	b.n	800c642 <__multiply+0x7e>
 800c6fa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d1a5      	bne.n	800c64e <__multiply+0x8a>
 800c702:	3f01      	subs	r7, #1
 800c704:	e7a1      	b.n	800c64a <__multiply+0x86>
 800c706:	bf00      	nop
 800c708:	0800f66c 	.word	0x0800f66c
 800c70c:	0800f760 	.word	0x0800f760

0800c710 <__pow5mult>:
 800c710:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c714:	4615      	mov	r5, r2
 800c716:	f012 0203 	ands.w	r2, r2, #3
 800c71a:	4606      	mov	r6, r0
 800c71c:	460f      	mov	r7, r1
 800c71e:	d007      	beq.n	800c730 <__pow5mult+0x20>
 800c720:	4c25      	ldr	r4, [pc, #148]	; (800c7b8 <__pow5mult+0xa8>)
 800c722:	3a01      	subs	r2, #1
 800c724:	2300      	movs	r3, #0
 800c726:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c72a:	f7ff fe51 	bl	800c3d0 <__multadd>
 800c72e:	4607      	mov	r7, r0
 800c730:	10ad      	asrs	r5, r5, #2
 800c732:	d03d      	beq.n	800c7b0 <__pow5mult+0xa0>
 800c734:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c736:	b97c      	cbnz	r4, 800c758 <__pow5mult+0x48>
 800c738:	2010      	movs	r0, #16
 800c73a:	f7ff fdcd 	bl	800c2d8 <malloc>
 800c73e:	4602      	mov	r2, r0
 800c740:	6270      	str	r0, [r6, #36]	; 0x24
 800c742:	b928      	cbnz	r0, 800c750 <__pow5mult+0x40>
 800c744:	4b1d      	ldr	r3, [pc, #116]	; (800c7bc <__pow5mult+0xac>)
 800c746:	481e      	ldr	r0, [pc, #120]	; (800c7c0 <__pow5mult+0xb0>)
 800c748:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c74c:	f001 fb10 	bl	800dd70 <__assert_func>
 800c750:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c754:	6004      	str	r4, [r0, #0]
 800c756:	60c4      	str	r4, [r0, #12]
 800c758:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c75c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c760:	b94c      	cbnz	r4, 800c776 <__pow5mult+0x66>
 800c762:	f240 2171 	movw	r1, #625	; 0x271
 800c766:	4630      	mov	r0, r6
 800c768:	f7ff ff16 	bl	800c598 <__i2b>
 800c76c:	2300      	movs	r3, #0
 800c76e:	f8c8 0008 	str.w	r0, [r8, #8]
 800c772:	4604      	mov	r4, r0
 800c774:	6003      	str	r3, [r0, #0]
 800c776:	f04f 0900 	mov.w	r9, #0
 800c77a:	07eb      	lsls	r3, r5, #31
 800c77c:	d50a      	bpl.n	800c794 <__pow5mult+0x84>
 800c77e:	4639      	mov	r1, r7
 800c780:	4622      	mov	r2, r4
 800c782:	4630      	mov	r0, r6
 800c784:	f7ff ff1e 	bl	800c5c4 <__multiply>
 800c788:	4639      	mov	r1, r7
 800c78a:	4680      	mov	r8, r0
 800c78c:	4630      	mov	r0, r6
 800c78e:	f7ff fdfd 	bl	800c38c <_Bfree>
 800c792:	4647      	mov	r7, r8
 800c794:	106d      	asrs	r5, r5, #1
 800c796:	d00b      	beq.n	800c7b0 <__pow5mult+0xa0>
 800c798:	6820      	ldr	r0, [r4, #0]
 800c79a:	b938      	cbnz	r0, 800c7ac <__pow5mult+0x9c>
 800c79c:	4622      	mov	r2, r4
 800c79e:	4621      	mov	r1, r4
 800c7a0:	4630      	mov	r0, r6
 800c7a2:	f7ff ff0f 	bl	800c5c4 <__multiply>
 800c7a6:	6020      	str	r0, [r4, #0]
 800c7a8:	f8c0 9000 	str.w	r9, [r0]
 800c7ac:	4604      	mov	r4, r0
 800c7ae:	e7e4      	b.n	800c77a <__pow5mult+0x6a>
 800c7b0:	4638      	mov	r0, r7
 800c7b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c7b6:	bf00      	nop
 800c7b8:	0800f8b0 	.word	0x0800f8b0
 800c7bc:	0800f5f6 	.word	0x0800f5f6
 800c7c0:	0800f760 	.word	0x0800f760

0800c7c4 <__lshift>:
 800c7c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7c8:	460c      	mov	r4, r1
 800c7ca:	6849      	ldr	r1, [r1, #4]
 800c7cc:	6923      	ldr	r3, [r4, #16]
 800c7ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c7d2:	68a3      	ldr	r3, [r4, #8]
 800c7d4:	4607      	mov	r7, r0
 800c7d6:	4691      	mov	r9, r2
 800c7d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c7dc:	f108 0601 	add.w	r6, r8, #1
 800c7e0:	42b3      	cmp	r3, r6
 800c7e2:	db0b      	blt.n	800c7fc <__lshift+0x38>
 800c7e4:	4638      	mov	r0, r7
 800c7e6:	f7ff fd91 	bl	800c30c <_Balloc>
 800c7ea:	4605      	mov	r5, r0
 800c7ec:	b948      	cbnz	r0, 800c802 <__lshift+0x3e>
 800c7ee:	4602      	mov	r2, r0
 800c7f0:	4b28      	ldr	r3, [pc, #160]	; (800c894 <__lshift+0xd0>)
 800c7f2:	4829      	ldr	r0, [pc, #164]	; (800c898 <__lshift+0xd4>)
 800c7f4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c7f8:	f001 faba 	bl	800dd70 <__assert_func>
 800c7fc:	3101      	adds	r1, #1
 800c7fe:	005b      	lsls	r3, r3, #1
 800c800:	e7ee      	b.n	800c7e0 <__lshift+0x1c>
 800c802:	2300      	movs	r3, #0
 800c804:	f100 0114 	add.w	r1, r0, #20
 800c808:	f100 0210 	add.w	r2, r0, #16
 800c80c:	4618      	mov	r0, r3
 800c80e:	4553      	cmp	r3, sl
 800c810:	db33      	blt.n	800c87a <__lshift+0xb6>
 800c812:	6920      	ldr	r0, [r4, #16]
 800c814:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c818:	f104 0314 	add.w	r3, r4, #20
 800c81c:	f019 091f 	ands.w	r9, r9, #31
 800c820:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c824:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c828:	d02b      	beq.n	800c882 <__lshift+0xbe>
 800c82a:	f1c9 0e20 	rsb	lr, r9, #32
 800c82e:	468a      	mov	sl, r1
 800c830:	2200      	movs	r2, #0
 800c832:	6818      	ldr	r0, [r3, #0]
 800c834:	fa00 f009 	lsl.w	r0, r0, r9
 800c838:	4302      	orrs	r2, r0
 800c83a:	f84a 2b04 	str.w	r2, [sl], #4
 800c83e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c842:	459c      	cmp	ip, r3
 800c844:	fa22 f20e 	lsr.w	r2, r2, lr
 800c848:	d8f3      	bhi.n	800c832 <__lshift+0x6e>
 800c84a:	ebac 0304 	sub.w	r3, ip, r4
 800c84e:	3b15      	subs	r3, #21
 800c850:	f023 0303 	bic.w	r3, r3, #3
 800c854:	3304      	adds	r3, #4
 800c856:	f104 0015 	add.w	r0, r4, #21
 800c85a:	4584      	cmp	ip, r0
 800c85c:	bf38      	it	cc
 800c85e:	2304      	movcc	r3, #4
 800c860:	50ca      	str	r2, [r1, r3]
 800c862:	b10a      	cbz	r2, 800c868 <__lshift+0xa4>
 800c864:	f108 0602 	add.w	r6, r8, #2
 800c868:	3e01      	subs	r6, #1
 800c86a:	4638      	mov	r0, r7
 800c86c:	612e      	str	r6, [r5, #16]
 800c86e:	4621      	mov	r1, r4
 800c870:	f7ff fd8c 	bl	800c38c <_Bfree>
 800c874:	4628      	mov	r0, r5
 800c876:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c87a:	f842 0f04 	str.w	r0, [r2, #4]!
 800c87e:	3301      	adds	r3, #1
 800c880:	e7c5      	b.n	800c80e <__lshift+0x4a>
 800c882:	3904      	subs	r1, #4
 800c884:	f853 2b04 	ldr.w	r2, [r3], #4
 800c888:	f841 2f04 	str.w	r2, [r1, #4]!
 800c88c:	459c      	cmp	ip, r3
 800c88e:	d8f9      	bhi.n	800c884 <__lshift+0xc0>
 800c890:	e7ea      	b.n	800c868 <__lshift+0xa4>
 800c892:	bf00      	nop
 800c894:	0800f66c 	.word	0x0800f66c
 800c898:	0800f760 	.word	0x0800f760

0800c89c <__mcmp>:
 800c89c:	b530      	push	{r4, r5, lr}
 800c89e:	6902      	ldr	r2, [r0, #16]
 800c8a0:	690c      	ldr	r4, [r1, #16]
 800c8a2:	1b12      	subs	r2, r2, r4
 800c8a4:	d10e      	bne.n	800c8c4 <__mcmp+0x28>
 800c8a6:	f100 0314 	add.w	r3, r0, #20
 800c8aa:	3114      	adds	r1, #20
 800c8ac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c8b0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c8b4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c8b8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c8bc:	42a5      	cmp	r5, r4
 800c8be:	d003      	beq.n	800c8c8 <__mcmp+0x2c>
 800c8c0:	d305      	bcc.n	800c8ce <__mcmp+0x32>
 800c8c2:	2201      	movs	r2, #1
 800c8c4:	4610      	mov	r0, r2
 800c8c6:	bd30      	pop	{r4, r5, pc}
 800c8c8:	4283      	cmp	r3, r0
 800c8ca:	d3f3      	bcc.n	800c8b4 <__mcmp+0x18>
 800c8cc:	e7fa      	b.n	800c8c4 <__mcmp+0x28>
 800c8ce:	f04f 32ff 	mov.w	r2, #4294967295
 800c8d2:	e7f7      	b.n	800c8c4 <__mcmp+0x28>

0800c8d4 <__mdiff>:
 800c8d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8d8:	460c      	mov	r4, r1
 800c8da:	4606      	mov	r6, r0
 800c8dc:	4611      	mov	r1, r2
 800c8de:	4620      	mov	r0, r4
 800c8e0:	4617      	mov	r7, r2
 800c8e2:	f7ff ffdb 	bl	800c89c <__mcmp>
 800c8e6:	1e05      	subs	r5, r0, #0
 800c8e8:	d110      	bne.n	800c90c <__mdiff+0x38>
 800c8ea:	4629      	mov	r1, r5
 800c8ec:	4630      	mov	r0, r6
 800c8ee:	f7ff fd0d 	bl	800c30c <_Balloc>
 800c8f2:	b930      	cbnz	r0, 800c902 <__mdiff+0x2e>
 800c8f4:	4b39      	ldr	r3, [pc, #228]	; (800c9dc <__mdiff+0x108>)
 800c8f6:	4602      	mov	r2, r0
 800c8f8:	f240 2132 	movw	r1, #562	; 0x232
 800c8fc:	4838      	ldr	r0, [pc, #224]	; (800c9e0 <__mdiff+0x10c>)
 800c8fe:	f001 fa37 	bl	800dd70 <__assert_func>
 800c902:	2301      	movs	r3, #1
 800c904:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c908:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c90c:	bfa4      	itt	ge
 800c90e:	463b      	movge	r3, r7
 800c910:	4627      	movge	r7, r4
 800c912:	4630      	mov	r0, r6
 800c914:	6879      	ldr	r1, [r7, #4]
 800c916:	bfa6      	itte	ge
 800c918:	461c      	movge	r4, r3
 800c91a:	2500      	movge	r5, #0
 800c91c:	2501      	movlt	r5, #1
 800c91e:	f7ff fcf5 	bl	800c30c <_Balloc>
 800c922:	b920      	cbnz	r0, 800c92e <__mdiff+0x5a>
 800c924:	4b2d      	ldr	r3, [pc, #180]	; (800c9dc <__mdiff+0x108>)
 800c926:	4602      	mov	r2, r0
 800c928:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c92c:	e7e6      	b.n	800c8fc <__mdiff+0x28>
 800c92e:	693e      	ldr	r6, [r7, #16]
 800c930:	60c5      	str	r5, [r0, #12]
 800c932:	6925      	ldr	r5, [r4, #16]
 800c934:	f107 0114 	add.w	r1, r7, #20
 800c938:	f104 0914 	add.w	r9, r4, #20
 800c93c:	f100 0e14 	add.w	lr, r0, #20
 800c940:	f107 0210 	add.w	r2, r7, #16
 800c944:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800c948:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800c94c:	46f2      	mov	sl, lr
 800c94e:	2700      	movs	r7, #0
 800c950:	f859 3b04 	ldr.w	r3, [r9], #4
 800c954:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c958:	fa1f f883 	uxth.w	r8, r3
 800c95c:	fa17 f78b 	uxtah	r7, r7, fp
 800c960:	0c1b      	lsrs	r3, r3, #16
 800c962:	eba7 0808 	sub.w	r8, r7, r8
 800c966:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c96a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c96e:	fa1f f888 	uxth.w	r8, r8
 800c972:	141f      	asrs	r7, r3, #16
 800c974:	454d      	cmp	r5, r9
 800c976:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c97a:	f84a 3b04 	str.w	r3, [sl], #4
 800c97e:	d8e7      	bhi.n	800c950 <__mdiff+0x7c>
 800c980:	1b2b      	subs	r3, r5, r4
 800c982:	3b15      	subs	r3, #21
 800c984:	f023 0303 	bic.w	r3, r3, #3
 800c988:	3304      	adds	r3, #4
 800c98a:	3415      	adds	r4, #21
 800c98c:	42a5      	cmp	r5, r4
 800c98e:	bf38      	it	cc
 800c990:	2304      	movcc	r3, #4
 800c992:	4419      	add	r1, r3
 800c994:	4473      	add	r3, lr
 800c996:	469e      	mov	lr, r3
 800c998:	460d      	mov	r5, r1
 800c99a:	4565      	cmp	r5, ip
 800c99c:	d30e      	bcc.n	800c9bc <__mdiff+0xe8>
 800c99e:	f10c 0203 	add.w	r2, ip, #3
 800c9a2:	1a52      	subs	r2, r2, r1
 800c9a4:	f022 0203 	bic.w	r2, r2, #3
 800c9a8:	3903      	subs	r1, #3
 800c9aa:	458c      	cmp	ip, r1
 800c9ac:	bf38      	it	cc
 800c9ae:	2200      	movcc	r2, #0
 800c9b0:	441a      	add	r2, r3
 800c9b2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c9b6:	b17b      	cbz	r3, 800c9d8 <__mdiff+0x104>
 800c9b8:	6106      	str	r6, [r0, #16]
 800c9ba:	e7a5      	b.n	800c908 <__mdiff+0x34>
 800c9bc:	f855 8b04 	ldr.w	r8, [r5], #4
 800c9c0:	fa17 f488 	uxtah	r4, r7, r8
 800c9c4:	1422      	asrs	r2, r4, #16
 800c9c6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800c9ca:	b2a4      	uxth	r4, r4
 800c9cc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800c9d0:	f84e 4b04 	str.w	r4, [lr], #4
 800c9d4:	1417      	asrs	r7, r2, #16
 800c9d6:	e7e0      	b.n	800c99a <__mdiff+0xc6>
 800c9d8:	3e01      	subs	r6, #1
 800c9da:	e7ea      	b.n	800c9b2 <__mdiff+0xde>
 800c9dc:	0800f66c 	.word	0x0800f66c
 800c9e0:	0800f760 	.word	0x0800f760

0800c9e4 <__ulp>:
 800c9e4:	b082      	sub	sp, #8
 800c9e6:	ed8d 0b00 	vstr	d0, [sp]
 800c9ea:	9b01      	ldr	r3, [sp, #4]
 800c9ec:	4912      	ldr	r1, [pc, #72]	; (800ca38 <__ulp+0x54>)
 800c9ee:	4019      	ands	r1, r3
 800c9f0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800c9f4:	2900      	cmp	r1, #0
 800c9f6:	dd05      	ble.n	800ca04 <__ulp+0x20>
 800c9f8:	2200      	movs	r2, #0
 800c9fa:	460b      	mov	r3, r1
 800c9fc:	ec43 2b10 	vmov	d0, r2, r3
 800ca00:	b002      	add	sp, #8
 800ca02:	4770      	bx	lr
 800ca04:	4249      	negs	r1, r1
 800ca06:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800ca0a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800ca0e:	f04f 0200 	mov.w	r2, #0
 800ca12:	f04f 0300 	mov.w	r3, #0
 800ca16:	da04      	bge.n	800ca22 <__ulp+0x3e>
 800ca18:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800ca1c:	fa41 f300 	asr.w	r3, r1, r0
 800ca20:	e7ec      	b.n	800c9fc <__ulp+0x18>
 800ca22:	f1a0 0114 	sub.w	r1, r0, #20
 800ca26:	291e      	cmp	r1, #30
 800ca28:	bfda      	itte	le
 800ca2a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800ca2e:	fa20 f101 	lsrle.w	r1, r0, r1
 800ca32:	2101      	movgt	r1, #1
 800ca34:	460a      	mov	r2, r1
 800ca36:	e7e1      	b.n	800c9fc <__ulp+0x18>
 800ca38:	7ff00000 	.word	0x7ff00000

0800ca3c <__b2d>:
 800ca3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca3e:	6905      	ldr	r5, [r0, #16]
 800ca40:	f100 0714 	add.w	r7, r0, #20
 800ca44:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800ca48:	1f2e      	subs	r6, r5, #4
 800ca4a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800ca4e:	4620      	mov	r0, r4
 800ca50:	f7ff fd52 	bl	800c4f8 <__hi0bits>
 800ca54:	f1c0 0320 	rsb	r3, r0, #32
 800ca58:	280a      	cmp	r0, #10
 800ca5a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800cad8 <__b2d+0x9c>
 800ca5e:	600b      	str	r3, [r1, #0]
 800ca60:	dc14      	bgt.n	800ca8c <__b2d+0x50>
 800ca62:	f1c0 0e0b 	rsb	lr, r0, #11
 800ca66:	fa24 f10e 	lsr.w	r1, r4, lr
 800ca6a:	42b7      	cmp	r7, r6
 800ca6c:	ea41 030c 	orr.w	r3, r1, ip
 800ca70:	bf34      	ite	cc
 800ca72:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ca76:	2100      	movcs	r1, #0
 800ca78:	3015      	adds	r0, #21
 800ca7a:	fa04 f000 	lsl.w	r0, r4, r0
 800ca7e:	fa21 f10e 	lsr.w	r1, r1, lr
 800ca82:	ea40 0201 	orr.w	r2, r0, r1
 800ca86:	ec43 2b10 	vmov	d0, r2, r3
 800ca8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca8c:	42b7      	cmp	r7, r6
 800ca8e:	bf3a      	itte	cc
 800ca90:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ca94:	f1a5 0608 	subcc.w	r6, r5, #8
 800ca98:	2100      	movcs	r1, #0
 800ca9a:	380b      	subs	r0, #11
 800ca9c:	d017      	beq.n	800cace <__b2d+0x92>
 800ca9e:	f1c0 0c20 	rsb	ip, r0, #32
 800caa2:	fa04 f500 	lsl.w	r5, r4, r0
 800caa6:	42be      	cmp	r6, r7
 800caa8:	fa21 f40c 	lsr.w	r4, r1, ip
 800caac:	ea45 0504 	orr.w	r5, r5, r4
 800cab0:	bf8c      	ite	hi
 800cab2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800cab6:	2400      	movls	r4, #0
 800cab8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800cabc:	fa01 f000 	lsl.w	r0, r1, r0
 800cac0:	fa24 f40c 	lsr.w	r4, r4, ip
 800cac4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800cac8:	ea40 0204 	orr.w	r2, r0, r4
 800cacc:	e7db      	b.n	800ca86 <__b2d+0x4a>
 800cace:	ea44 030c 	orr.w	r3, r4, ip
 800cad2:	460a      	mov	r2, r1
 800cad4:	e7d7      	b.n	800ca86 <__b2d+0x4a>
 800cad6:	bf00      	nop
 800cad8:	3ff00000 	.word	0x3ff00000

0800cadc <__d2b>:
 800cadc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cae0:	4689      	mov	r9, r1
 800cae2:	2101      	movs	r1, #1
 800cae4:	ec57 6b10 	vmov	r6, r7, d0
 800cae8:	4690      	mov	r8, r2
 800caea:	f7ff fc0f 	bl	800c30c <_Balloc>
 800caee:	4604      	mov	r4, r0
 800caf0:	b930      	cbnz	r0, 800cb00 <__d2b+0x24>
 800caf2:	4602      	mov	r2, r0
 800caf4:	4b25      	ldr	r3, [pc, #148]	; (800cb8c <__d2b+0xb0>)
 800caf6:	4826      	ldr	r0, [pc, #152]	; (800cb90 <__d2b+0xb4>)
 800caf8:	f240 310a 	movw	r1, #778	; 0x30a
 800cafc:	f001 f938 	bl	800dd70 <__assert_func>
 800cb00:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800cb04:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cb08:	bb35      	cbnz	r5, 800cb58 <__d2b+0x7c>
 800cb0a:	2e00      	cmp	r6, #0
 800cb0c:	9301      	str	r3, [sp, #4]
 800cb0e:	d028      	beq.n	800cb62 <__d2b+0x86>
 800cb10:	4668      	mov	r0, sp
 800cb12:	9600      	str	r6, [sp, #0]
 800cb14:	f7ff fd10 	bl	800c538 <__lo0bits>
 800cb18:	9900      	ldr	r1, [sp, #0]
 800cb1a:	b300      	cbz	r0, 800cb5e <__d2b+0x82>
 800cb1c:	9a01      	ldr	r2, [sp, #4]
 800cb1e:	f1c0 0320 	rsb	r3, r0, #32
 800cb22:	fa02 f303 	lsl.w	r3, r2, r3
 800cb26:	430b      	orrs	r3, r1
 800cb28:	40c2      	lsrs	r2, r0
 800cb2a:	6163      	str	r3, [r4, #20]
 800cb2c:	9201      	str	r2, [sp, #4]
 800cb2e:	9b01      	ldr	r3, [sp, #4]
 800cb30:	61a3      	str	r3, [r4, #24]
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	bf14      	ite	ne
 800cb36:	2202      	movne	r2, #2
 800cb38:	2201      	moveq	r2, #1
 800cb3a:	6122      	str	r2, [r4, #16]
 800cb3c:	b1d5      	cbz	r5, 800cb74 <__d2b+0x98>
 800cb3e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cb42:	4405      	add	r5, r0
 800cb44:	f8c9 5000 	str.w	r5, [r9]
 800cb48:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cb4c:	f8c8 0000 	str.w	r0, [r8]
 800cb50:	4620      	mov	r0, r4
 800cb52:	b003      	add	sp, #12
 800cb54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cb5c:	e7d5      	b.n	800cb0a <__d2b+0x2e>
 800cb5e:	6161      	str	r1, [r4, #20]
 800cb60:	e7e5      	b.n	800cb2e <__d2b+0x52>
 800cb62:	a801      	add	r0, sp, #4
 800cb64:	f7ff fce8 	bl	800c538 <__lo0bits>
 800cb68:	9b01      	ldr	r3, [sp, #4]
 800cb6a:	6163      	str	r3, [r4, #20]
 800cb6c:	2201      	movs	r2, #1
 800cb6e:	6122      	str	r2, [r4, #16]
 800cb70:	3020      	adds	r0, #32
 800cb72:	e7e3      	b.n	800cb3c <__d2b+0x60>
 800cb74:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cb78:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cb7c:	f8c9 0000 	str.w	r0, [r9]
 800cb80:	6918      	ldr	r0, [r3, #16]
 800cb82:	f7ff fcb9 	bl	800c4f8 <__hi0bits>
 800cb86:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cb8a:	e7df      	b.n	800cb4c <__d2b+0x70>
 800cb8c:	0800f66c 	.word	0x0800f66c
 800cb90:	0800f760 	.word	0x0800f760

0800cb94 <__ratio>:
 800cb94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb98:	4688      	mov	r8, r1
 800cb9a:	4669      	mov	r1, sp
 800cb9c:	4681      	mov	r9, r0
 800cb9e:	f7ff ff4d 	bl	800ca3c <__b2d>
 800cba2:	a901      	add	r1, sp, #4
 800cba4:	4640      	mov	r0, r8
 800cba6:	ec55 4b10 	vmov	r4, r5, d0
 800cbaa:	f7ff ff47 	bl	800ca3c <__b2d>
 800cbae:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cbb2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800cbb6:	eba3 0c02 	sub.w	ip, r3, r2
 800cbba:	e9dd 3200 	ldrd	r3, r2, [sp]
 800cbbe:	1a9b      	subs	r3, r3, r2
 800cbc0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800cbc4:	ec51 0b10 	vmov	r0, r1, d0
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	bfd6      	itet	le
 800cbcc:	460a      	movle	r2, r1
 800cbce:	462a      	movgt	r2, r5
 800cbd0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800cbd4:	468b      	mov	fp, r1
 800cbd6:	462f      	mov	r7, r5
 800cbd8:	bfd4      	ite	le
 800cbda:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800cbde:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800cbe2:	4620      	mov	r0, r4
 800cbe4:	ee10 2a10 	vmov	r2, s0
 800cbe8:	465b      	mov	r3, fp
 800cbea:	4639      	mov	r1, r7
 800cbec:	f7f3 fe2e 	bl	800084c <__aeabi_ddiv>
 800cbf0:	ec41 0b10 	vmov	d0, r0, r1
 800cbf4:	b003      	add	sp, #12
 800cbf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cbfa <__copybits>:
 800cbfa:	3901      	subs	r1, #1
 800cbfc:	b570      	push	{r4, r5, r6, lr}
 800cbfe:	1149      	asrs	r1, r1, #5
 800cc00:	6914      	ldr	r4, [r2, #16]
 800cc02:	3101      	adds	r1, #1
 800cc04:	f102 0314 	add.w	r3, r2, #20
 800cc08:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cc0c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cc10:	1f05      	subs	r5, r0, #4
 800cc12:	42a3      	cmp	r3, r4
 800cc14:	d30c      	bcc.n	800cc30 <__copybits+0x36>
 800cc16:	1aa3      	subs	r3, r4, r2
 800cc18:	3b11      	subs	r3, #17
 800cc1a:	f023 0303 	bic.w	r3, r3, #3
 800cc1e:	3211      	adds	r2, #17
 800cc20:	42a2      	cmp	r2, r4
 800cc22:	bf88      	it	hi
 800cc24:	2300      	movhi	r3, #0
 800cc26:	4418      	add	r0, r3
 800cc28:	2300      	movs	r3, #0
 800cc2a:	4288      	cmp	r0, r1
 800cc2c:	d305      	bcc.n	800cc3a <__copybits+0x40>
 800cc2e:	bd70      	pop	{r4, r5, r6, pc}
 800cc30:	f853 6b04 	ldr.w	r6, [r3], #4
 800cc34:	f845 6f04 	str.w	r6, [r5, #4]!
 800cc38:	e7eb      	b.n	800cc12 <__copybits+0x18>
 800cc3a:	f840 3b04 	str.w	r3, [r0], #4
 800cc3e:	e7f4      	b.n	800cc2a <__copybits+0x30>

0800cc40 <__any_on>:
 800cc40:	f100 0214 	add.w	r2, r0, #20
 800cc44:	6900      	ldr	r0, [r0, #16]
 800cc46:	114b      	asrs	r3, r1, #5
 800cc48:	4298      	cmp	r0, r3
 800cc4a:	b510      	push	{r4, lr}
 800cc4c:	db11      	blt.n	800cc72 <__any_on+0x32>
 800cc4e:	dd0a      	ble.n	800cc66 <__any_on+0x26>
 800cc50:	f011 011f 	ands.w	r1, r1, #31
 800cc54:	d007      	beq.n	800cc66 <__any_on+0x26>
 800cc56:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800cc5a:	fa24 f001 	lsr.w	r0, r4, r1
 800cc5e:	fa00 f101 	lsl.w	r1, r0, r1
 800cc62:	428c      	cmp	r4, r1
 800cc64:	d10b      	bne.n	800cc7e <__any_on+0x3e>
 800cc66:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cc6a:	4293      	cmp	r3, r2
 800cc6c:	d803      	bhi.n	800cc76 <__any_on+0x36>
 800cc6e:	2000      	movs	r0, #0
 800cc70:	bd10      	pop	{r4, pc}
 800cc72:	4603      	mov	r3, r0
 800cc74:	e7f7      	b.n	800cc66 <__any_on+0x26>
 800cc76:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cc7a:	2900      	cmp	r1, #0
 800cc7c:	d0f5      	beq.n	800cc6a <__any_on+0x2a>
 800cc7e:	2001      	movs	r0, #1
 800cc80:	e7f6      	b.n	800cc70 <__any_on+0x30>

0800cc82 <_calloc_r>:
 800cc82:	b513      	push	{r0, r1, r4, lr}
 800cc84:	434a      	muls	r2, r1
 800cc86:	4611      	mov	r1, r2
 800cc88:	9201      	str	r2, [sp, #4]
 800cc8a:	f000 f859 	bl	800cd40 <_malloc_r>
 800cc8e:	4604      	mov	r4, r0
 800cc90:	b118      	cbz	r0, 800cc9a <_calloc_r+0x18>
 800cc92:	9a01      	ldr	r2, [sp, #4]
 800cc94:	2100      	movs	r1, #0
 800cc96:	f7fb ffcd 	bl	8008c34 <memset>
 800cc9a:	4620      	mov	r0, r4
 800cc9c:	b002      	add	sp, #8
 800cc9e:	bd10      	pop	{r4, pc}

0800cca0 <_free_r>:
 800cca0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cca2:	2900      	cmp	r1, #0
 800cca4:	d048      	beq.n	800cd38 <_free_r+0x98>
 800cca6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ccaa:	9001      	str	r0, [sp, #4]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	f1a1 0404 	sub.w	r4, r1, #4
 800ccb2:	bfb8      	it	lt
 800ccb4:	18e4      	addlt	r4, r4, r3
 800ccb6:	f001 f8c7 	bl	800de48 <__malloc_lock>
 800ccba:	4a20      	ldr	r2, [pc, #128]	; (800cd3c <_free_r+0x9c>)
 800ccbc:	9801      	ldr	r0, [sp, #4]
 800ccbe:	6813      	ldr	r3, [r2, #0]
 800ccc0:	4615      	mov	r5, r2
 800ccc2:	b933      	cbnz	r3, 800ccd2 <_free_r+0x32>
 800ccc4:	6063      	str	r3, [r4, #4]
 800ccc6:	6014      	str	r4, [r2, #0]
 800ccc8:	b003      	add	sp, #12
 800ccca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ccce:	f001 b8c1 	b.w	800de54 <__malloc_unlock>
 800ccd2:	42a3      	cmp	r3, r4
 800ccd4:	d90b      	bls.n	800ccee <_free_r+0x4e>
 800ccd6:	6821      	ldr	r1, [r4, #0]
 800ccd8:	1862      	adds	r2, r4, r1
 800ccda:	4293      	cmp	r3, r2
 800ccdc:	bf04      	itt	eq
 800ccde:	681a      	ldreq	r2, [r3, #0]
 800cce0:	685b      	ldreq	r3, [r3, #4]
 800cce2:	6063      	str	r3, [r4, #4]
 800cce4:	bf04      	itt	eq
 800cce6:	1852      	addeq	r2, r2, r1
 800cce8:	6022      	streq	r2, [r4, #0]
 800ccea:	602c      	str	r4, [r5, #0]
 800ccec:	e7ec      	b.n	800ccc8 <_free_r+0x28>
 800ccee:	461a      	mov	r2, r3
 800ccf0:	685b      	ldr	r3, [r3, #4]
 800ccf2:	b10b      	cbz	r3, 800ccf8 <_free_r+0x58>
 800ccf4:	42a3      	cmp	r3, r4
 800ccf6:	d9fa      	bls.n	800ccee <_free_r+0x4e>
 800ccf8:	6811      	ldr	r1, [r2, #0]
 800ccfa:	1855      	adds	r5, r2, r1
 800ccfc:	42a5      	cmp	r5, r4
 800ccfe:	d10b      	bne.n	800cd18 <_free_r+0x78>
 800cd00:	6824      	ldr	r4, [r4, #0]
 800cd02:	4421      	add	r1, r4
 800cd04:	1854      	adds	r4, r2, r1
 800cd06:	42a3      	cmp	r3, r4
 800cd08:	6011      	str	r1, [r2, #0]
 800cd0a:	d1dd      	bne.n	800ccc8 <_free_r+0x28>
 800cd0c:	681c      	ldr	r4, [r3, #0]
 800cd0e:	685b      	ldr	r3, [r3, #4]
 800cd10:	6053      	str	r3, [r2, #4]
 800cd12:	4421      	add	r1, r4
 800cd14:	6011      	str	r1, [r2, #0]
 800cd16:	e7d7      	b.n	800ccc8 <_free_r+0x28>
 800cd18:	d902      	bls.n	800cd20 <_free_r+0x80>
 800cd1a:	230c      	movs	r3, #12
 800cd1c:	6003      	str	r3, [r0, #0]
 800cd1e:	e7d3      	b.n	800ccc8 <_free_r+0x28>
 800cd20:	6825      	ldr	r5, [r4, #0]
 800cd22:	1961      	adds	r1, r4, r5
 800cd24:	428b      	cmp	r3, r1
 800cd26:	bf04      	itt	eq
 800cd28:	6819      	ldreq	r1, [r3, #0]
 800cd2a:	685b      	ldreq	r3, [r3, #4]
 800cd2c:	6063      	str	r3, [r4, #4]
 800cd2e:	bf04      	itt	eq
 800cd30:	1949      	addeq	r1, r1, r5
 800cd32:	6021      	streq	r1, [r4, #0]
 800cd34:	6054      	str	r4, [r2, #4]
 800cd36:	e7c7      	b.n	800ccc8 <_free_r+0x28>
 800cd38:	b003      	add	sp, #12
 800cd3a:	bd30      	pop	{r4, r5, pc}
 800cd3c:	20000a5c 	.word	0x20000a5c

0800cd40 <_malloc_r>:
 800cd40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd42:	1ccd      	adds	r5, r1, #3
 800cd44:	f025 0503 	bic.w	r5, r5, #3
 800cd48:	3508      	adds	r5, #8
 800cd4a:	2d0c      	cmp	r5, #12
 800cd4c:	bf38      	it	cc
 800cd4e:	250c      	movcc	r5, #12
 800cd50:	2d00      	cmp	r5, #0
 800cd52:	4606      	mov	r6, r0
 800cd54:	db01      	blt.n	800cd5a <_malloc_r+0x1a>
 800cd56:	42a9      	cmp	r1, r5
 800cd58:	d903      	bls.n	800cd62 <_malloc_r+0x22>
 800cd5a:	230c      	movs	r3, #12
 800cd5c:	6033      	str	r3, [r6, #0]
 800cd5e:	2000      	movs	r0, #0
 800cd60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd62:	f001 f871 	bl	800de48 <__malloc_lock>
 800cd66:	4921      	ldr	r1, [pc, #132]	; (800cdec <_malloc_r+0xac>)
 800cd68:	680a      	ldr	r2, [r1, #0]
 800cd6a:	4614      	mov	r4, r2
 800cd6c:	b99c      	cbnz	r4, 800cd96 <_malloc_r+0x56>
 800cd6e:	4f20      	ldr	r7, [pc, #128]	; (800cdf0 <_malloc_r+0xb0>)
 800cd70:	683b      	ldr	r3, [r7, #0]
 800cd72:	b923      	cbnz	r3, 800cd7e <_malloc_r+0x3e>
 800cd74:	4621      	mov	r1, r4
 800cd76:	4630      	mov	r0, r6
 800cd78:	f000 fe2a 	bl	800d9d0 <_sbrk_r>
 800cd7c:	6038      	str	r0, [r7, #0]
 800cd7e:	4629      	mov	r1, r5
 800cd80:	4630      	mov	r0, r6
 800cd82:	f000 fe25 	bl	800d9d0 <_sbrk_r>
 800cd86:	1c43      	adds	r3, r0, #1
 800cd88:	d123      	bne.n	800cdd2 <_malloc_r+0x92>
 800cd8a:	230c      	movs	r3, #12
 800cd8c:	6033      	str	r3, [r6, #0]
 800cd8e:	4630      	mov	r0, r6
 800cd90:	f001 f860 	bl	800de54 <__malloc_unlock>
 800cd94:	e7e3      	b.n	800cd5e <_malloc_r+0x1e>
 800cd96:	6823      	ldr	r3, [r4, #0]
 800cd98:	1b5b      	subs	r3, r3, r5
 800cd9a:	d417      	bmi.n	800cdcc <_malloc_r+0x8c>
 800cd9c:	2b0b      	cmp	r3, #11
 800cd9e:	d903      	bls.n	800cda8 <_malloc_r+0x68>
 800cda0:	6023      	str	r3, [r4, #0]
 800cda2:	441c      	add	r4, r3
 800cda4:	6025      	str	r5, [r4, #0]
 800cda6:	e004      	b.n	800cdb2 <_malloc_r+0x72>
 800cda8:	6863      	ldr	r3, [r4, #4]
 800cdaa:	42a2      	cmp	r2, r4
 800cdac:	bf0c      	ite	eq
 800cdae:	600b      	streq	r3, [r1, #0]
 800cdb0:	6053      	strne	r3, [r2, #4]
 800cdb2:	4630      	mov	r0, r6
 800cdb4:	f001 f84e 	bl	800de54 <__malloc_unlock>
 800cdb8:	f104 000b 	add.w	r0, r4, #11
 800cdbc:	1d23      	adds	r3, r4, #4
 800cdbe:	f020 0007 	bic.w	r0, r0, #7
 800cdc2:	1ac2      	subs	r2, r0, r3
 800cdc4:	d0cc      	beq.n	800cd60 <_malloc_r+0x20>
 800cdc6:	1a1b      	subs	r3, r3, r0
 800cdc8:	50a3      	str	r3, [r4, r2]
 800cdca:	e7c9      	b.n	800cd60 <_malloc_r+0x20>
 800cdcc:	4622      	mov	r2, r4
 800cdce:	6864      	ldr	r4, [r4, #4]
 800cdd0:	e7cc      	b.n	800cd6c <_malloc_r+0x2c>
 800cdd2:	1cc4      	adds	r4, r0, #3
 800cdd4:	f024 0403 	bic.w	r4, r4, #3
 800cdd8:	42a0      	cmp	r0, r4
 800cdda:	d0e3      	beq.n	800cda4 <_malloc_r+0x64>
 800cddc:	1a21      	subs	r1, r4, r0
 800cdde:	4630      	mov	r0, r6
 800cde0:	f000 fdf6 	bl	800d9d0 <_sbrk_r>
 800cde4:	3001      	adds	r0, #1
 800cde6:	d1dd      	bne.n	800cda4 <_malloc_r+0x64>
 800cde8:	e7cf      	b.n	800cd8a <_malloc_r+0x4a>
 800cdea:	bf00      	nop
 800cdec:	20000a5c 	.word	0x20000a5c
 800cdf0:	20000a60 	.word	0x20000a60

0800cdf4 <__ssputs_r>:
 800cdf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cdf8:	688e      	ldr	r6, [r1, #8]
 800cdfa:	429e      	cmp	r6, r3
 800cdfc:	4682      	mov	sl, r0
 800cdfe:	460c      	mov	r4, r1
 800ce00:	4690      	mov	r8, r2
 800ce02:	461f      	mov	r7, r3
 800ce04:	d838      	bhi.n	800ce78 <__ssputs_r+0x84>
 800ce06:	898a      	ldrh	r2, [r1, #12]
 800ce08:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ce0c:	d032      	beq.n	800ce74 <__ssputs_r+0x80>
 800ce0e:	6825      	ldr	r5, [r4, #0]
 800ce10:	6909      	ldr	r1, [r1, #16]
 800ce12:	eba5 0901 	sub.w	r9, r5, r1
 800ce16:	6965      	ldr	r5, [r4, #20]
 800ce18:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ce1c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ce20:	3301      	adds	r3, #1
 800ce22:	444b      	add	r3, r9
 800ce24:	106d      	asrs	r5, r5, #1
 800ce26:	429d      	cmp	r5, r3
 800ce28:	bf38      	it	cc
 800ce2a:	461d      	movcc	r5, r3
 800ce2c:	0553      	lsls	r3, r2, #21
 800ce2e:	d531      	bpl.n	800ce94 <__ssputs_r+0xa0>
 800ce30:	4629      	mov	r1, r5
 800ce32:	f7ff ff85 	bl	800cd40 <_malloc_r>
 800ce36:	4606      	mov	r6, r0
 800ce38:	b950      	cbnz	r0, 800ce50 <__ssputs_r+0x5c>
 800ce3a:	230c      	movs	r3, #12
 800ce3c:	f8ca 3000 	str.w	r3, [sl]
 800ce40:	89a3      	ldrh	r3, [r4, #12]
 800ce42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce46:	81a3      	strh	r3, [r4, #12]
 800ce48:	f04f 30ff 	mov.w	r0, #4294967295
 800ce4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce50:	6921      	ldr	r1, [r4, #16]
 800ce52:	464a      	mov	r2, r9
 800ce54:	f7fb fee0 	bl	8008c18 <memcpy>
 800ce58:	89a3      	ldrh	r3, [r4, #12]
 800ce5a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ce5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce62:	81a3      	strh	r3, [r4, #12]
 800ce64:	6126      	str	r6, [r4, #16]
 800ce66:	6165      	str	r5, [r4, #20]
 800ce68:	444e      	add	r6, r9
 800ce6a:	eba5 0509 	sub.w	r5, r5, r9
 800ce6e:	6026      	str	r6, [r4, #0]
 800ce70:	60a5      	str	r5, [r4, #8]
 800ce72:	463e      	mov	r6, r7
 800ce74:	42be      	cmp	r6, r7
 800ce76:	d900      	bls.n	800ce7a <__ssputs_r+0x86>
 800ce78:	463e      	mov	r6, r7
 800ce7a:	4632      	mov	r2, r6
 800ce7c:	6820      	ldr	r0, [r4, #0]
 800ce7e:	4641      	mov	r1, r8
 800ce80:	f000 ffc8 	bl	800de14 <memmove>
 800ce84:	68a3      	ldr	r3, [r4, #8]
 800ce86:	6822      	ldr	r2, [r4, #0]
 800ce88:	1b9b      	subs	r3, r3, r6
 800ce8a:	4432      	add	r2, r6
 800ce8c:	60a3      	str	r3, [r4, #8]
 800ce8e:	6022      	str	r2, [r4, #0]
 800ce90:	2000      	movs	r0, #0
 800ce92:	e7db      	b.n	800ce4c <__ssputs_r+0x58>
 800ce94:	462a      	mov	r2, r5
 800ce96:	f000 ffe3 	bl	800de60 <_realloc_r>
 800ce9a:	4606      	mov	r6, r0
 800ce9c:	2800      	cmp	r0, #0
 800ce9e:	d1e1      	bne.n	800ce64 <__ssputs_r+0x70>
 800cea0:	6921      	ldr	r1, [r4, #16]
 800cea2:	4650      	mov	r0, sl
 800cea4:	f7ff fefc 	bl	800cca0 <_free_r>
 800cea8:	e7c7      	b.n	800ce3a <__ssputs_r+0x46>
	...

0800ceac <_svfiprintf_r>:
 800ceac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ceb0:	4698      	mov	r8, r3
 800ceb2:	898b      	ldrh	r3, [r1, #12]
 800ceb4:	061b      	lsls	r3, r3, #24
 800ceb6:	b09d      	sub	sp, #116	; 0x74
 800ceb8:	4607      	mov	r7, r0
 800ceba:	460d      	mov	r5, r1
 800cebc:	4614      	mov	r4, r2
 800cebe:	d50e      	bpl.n	800cede <_svfiprintf_r+0x32>
 800cec0:	690b      	ldr	r3, [r1, #16]
 800cec2:	b963      	cbnz	r3, 800cede <_svfiprintf_r+0x32>
 800cec4:	2140      	movs	r1, #64	; 0x40
 800cec6:	f7ff ff3b 	bl	800cd40 <_malloc_r>
 800ceca:	6028      	str	r0, [r5, #0]
 800cecc:	6128      	str	r0, [r5, #16]
 800cece:	b920      	cbnz	r0, 800ceda <_svfiprintf_r+0x2e>
 800ced0:	230c      	movs	r3, #12
 800ced2:	603b      	str	r3, [r7, #0]
 800ced4:	f04f 30ff 	mov.w	r0, #4294967295
 800ced8:	e0d1      	b.n	800d07e <_svfiprintf_r+0x1d2>
 800ceda:	2340      	movs	r3, #64	; 0x40
 800cedc:	616b      	str	r3, [r5, #20]
 800cede:	2300      	movs	r3, #0
 800cee0:	9309      	str	r3, [sp, #36]	; 0x24
 800cee2:	2320      	movs	r3, #32
 800cee4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cee8:	f8cd 800c 	str.w	r8, [sp, #12]
 800ceec:	2330      	movs	r3, #48	; 0x30
 800ceee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d098 <_svfiprintf_r+0x1ec>
 800cef2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cef6:	f04f 0901 	mov.w	r9, #1
 800cefa:	4623      	mov	r3, r4
 800cefc:	469a      	mov	sl, r3
 800cefe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf02:	b10a      	cbz	r2, 800cf08 <_svfiprintf_r+0x5c>
 800cf04:	2a25      	cmp	r2, #37	; 0x25
 800cf06:	d1f9      	bne.n	800cefc <_svfiprintf_r+0x50>
 800cf08:	ebba 0b04 	subs.w	fp, sl, r4
 800cf0c:	d00b      	beq.n	800cf26 <_svfiprintf_r+0x7a>
 800cf0e:	465b      	mov	r3, fp
 800cf10:	4622      	mov	r2, r4
 800cf12:	4629      	mov	r1, r5
 800cf14:	4638      	mov	r0, r7
 800cf16:	f7ff ff6d 	bl	800cdf4 <__ssputs_r>
 800cf1a:	3001      	adds	r0, #1
 800cf1c:	f000 80aa 	beq.w	800d074 <_svfiprintf_r+0x1c8>
 800cf20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cf22:	445a      	add	r2, fp
 800cf24:	9209      	str	r2, [sp, #36]	; 0x24
 800cf26:	f89a 3000 	ldrb.w	r3, [sl]
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	f000 80a2 	beq.w	800d074 <_svfiprintf_r+0x1c8>
 800cf30:	2300      	movs	r3, #0
 800cf32:	f04f 32ff 	mov.w	r2, #4294967295
 800cf36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cf3a:	f10a 0a01 	add.w	sl, sl, #1
 800cf3e:	9304      	str	r3, [sp, #16]
 800cf40:	9307      	str	r3, [sp, #28]
 800cf42:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cf46:	931a      	str	r3, [sp, #104]	; 0x68
 800cf48:	4654      	mov	r4, sl
 800cf4a:	2205      	movs	r2, #5
 800cf4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf50:	4851      	ldr	r0, [pc, #324]	; (800d098 <_svfiprintf_r+0x1ec>)
 800cf52:	f7f3 f93d 	bl	80001d0 <memchr>
 800cf56:	9a04      	ldr	r2, [sp, #16]
 800cf58:	b9d8      	cbnz	r0, 800cf92 <_svfiprintf_r+0xe6>
 800cf5a:	06d0      	lsls	r0, r2, #27
 800cf5c:	bf44      	itt	mi
 800cf5e:	2320      	movmi	r3, #32
 800cf60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf64:	0711      	lsls	r1, r2, #28
 800cf66:	bf44      	itt	mi
 800cf68:	232b      	movmi	r3, #43	; 0x2b
 800cf6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf6e:	f89a 3000 	ldrb.w	r3, [sl]
 800cf72:	2b2a      	cmp	r3, #42	; 0x2a
 800cf74:	d015      	beq.n	800cfa2 <_svfiprintf_r+0xf6>
 800cf76:	9a07      	ldr	r2, [sp, #28]
 800cf78:	4654      	mov	r4, sl
 800cf7a:	2000      	movs	r0, #0
 800cf7c:	f04f 0c0a 	mov.w	ip, #10
 800cf80:	4621      	mov	r1, r4
 800cf82:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cf86:	3b30      	subs	r3, #48	; 0x30
 800cf88:	2b09      	cmp	r3, #9
 800cf8a:	d94e      	bls.n	800d02a <_svfiprintf_r+0x17e>
 800cf8c:	b1b0      	cbz	r0, 800cfbc <_svfiprintf_r+0x110>
 800cf8e:	9207      	str	r2, [sp, #28]
 800cf90:	e014      	b.n	800cfbc <_svfiprintf_r+0x110>
 800cf92:	eba0 0308 	sub.w	r3, r0, r8
 800cf96:	fa09 f303 	lsl.w	r3, r9, r3
 800cf9a:	4313      	orrs	r3, r2
 800cf9c:	9304      	str	r3, [sp, #16]
 800cf9e:	46a2      	mov	sl, r4
 800cfa0:	e7d2      	b.n	800cf48 <_svfiprintf_r+0x9c>
 800cfa2:	9b03      	ldr	r3, [sp, #12]
 800cfa4:	1d19      	adds	r1, r3, #4
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	9103      	str	r1, [sp, #12]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	bfbb      	ittet	lt
 800cfae:	425b      	neglt	r3, r3
 800cfb0:	f042 0202 	orrlt.w	r2, r2, #2
 800cfb4:	9307      	strge	r3, [sp, #28]
 800cfb6:	9307      	strlt	r3, [sp, #28]
 800cfb8:	bfb8      	it	lt
 800cfba:	9204      	strlt	r2, [sp, #16]
 800cfbc:	7823      	ldrb	r3, [r4, #0]
 800cfbe:	2b2e      	cmp	r3, #46	; 0x2e
 800cfc0:	d10c      	bne.n	800cfdc <_svfiprintf_r+0x130>
 800cfc2:	7863      	ldrb	r3, [r4, #1]
 800cfc4:	2b2a      	cmp	r3, #42	; 0x2a
 800cfc6:	d135      	bne.n	800d034 <_svfiprintf_r+0x188>
 800cfc8:	9b03      	ldr	r3, [sp, #12]
 800cfca:	1d1a      	adds	r2, r3, #4
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	9203      	str	r2, [sp, #12]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	bfb8      	it	lt
 800cfd4:	f04f 33ff 	movlt.w	r3, #4294967295
 800cfd8:	3402      	adds	r4, #2
 800cfda:	9305      	str	r3, [sp, #20]
 800cfdc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d0a8 <_svfiprintf_r+0x1fc>
 800cfe0:	7821      	ldrb	r1, [r4, #0]
 800cfe2:	2203      	movs	r2, #3
 800cfe4:	4650      	mov	r0, sl
 800cfe6:	f7f3 f8f3 	bl	80001d0 <memchr>
 800cfea:	b140      	cbz	r0, 800cffe <_svfiprintf_r+0x152>
 800cfec:	2340      	movs	r3, #64	; 0x40
 800cfee:	eba0 000a 	sub.w	r0, r0, sl
 800cff2:	fa03 f000 	lsl.w	r0, r3, r0
 800cff6:	9b04      	ldr	r3, [sp, #16]
 800cff8:	4303      	orrs	r3, r0
 800cffa:	3401      	adds	r4, #1
 800cffc:	9304      	str	r3, [sp, #16]
 800cffe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d002:	4826      	ldr	r0, [pc, #152]	; (800d09c <_svfiprintf_r+0x1f0>)
 800d004:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d008:	2206      	movs	r2, #6
 800d00a:	f7f3 f8e1 	bl	80001d0 <memchr>
 800d00e:	2800      	cmp	r0, #0
 800d010:	d038      	beq.n	800d084 <_svfiprintf_r+0x1d8>
 800d012:	4b23      	ldr	r3, [pc, #140]	; (800d0a0 <_svfiprintf_r+0x1f4>)
 800d014:	bb1b      	cbnz	r3, 800d05e <_svfiprintf_r+0x1b2>
 800d016:	9b03      	ldr	r3, [sp, #12]
 800d018:	3307      	adds	r3, #7
 800d01a:	f023 0307 	bic.w	r3, r3, #7
 800d01e:	3308      	adds	r3, #8
 800d020:	9303      	str	r3, [sp, #12]
 800d022:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d024:	4433      	add	r3, r6
 800d026:	9309      	str	r3, [sp, #36]	; 0x24
 800d028:	e767      	b.n	800cefa <_svfiprintf_r+0x4e>
 800d02a:	fb0c 3202 	mla	r2, ip, r2, r3
 800d02e:	460c      	mov	r4, r1
 800d030:	2001      	movs	r0, #1
 800d032:	e7a5      	b.n	800cf80 <_svfiprintf_r+0xd4>
 800d034:	2300      	movs	r3, #0
 800d036:	3401      	adds	r4, #1
 800d038:	9305      	str	r3, [sp, #20]
 800d03a:	4619      	mov	r1, r3
 800d03c:	f04f 0c0a 	mov.w	ip, #10
 800d040:	4620      	mov	r0, r4
 800d042:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d046:	3a30      	subs	r2, #48	; 0x30
 800d048:	2a09      	cmp	r2, #9
 800d04a:	d903      	bls.n	800d054 <_svfiprintf_r+0x1a8>
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d0c5      	beq.n	800cfdc <_svfiprintf_r+0x130>
 800d050:	9105      	str	r1, [sp, #20]
 800d052:	e7c3      	b.n	800cfdc <_svfiprintf_r+0x130>
 800d054:	fb0c 2101 	mla	r1, ip, r1, r2
 800d058:	4604      	mov	r4, r0
 800d05a:	2301      	movs	r3, #1
 800d05c:	e7f0      	b.n	800d040 <_svfiprintf_r+0x194>
 800d05e:	ab03      	add	r3, sp, #12
 800d060:	9300      	str	r3, [sp, #0]
 800d062:	462a      	mov	r2, r5
 800d064:	4b0f      	ldr	r3, [pc, #60]	; (800d0a4 <_svfiprintf_r+0x1f8>)
 800d066:	a904      	add	r1, sp, #16
 800d068:	4638      	mov	r0, r7
 800d06a:	f7fb fe8b 	bl	8008d84 <_printf_float>
 800d06e:	1c42      	adds	r2, r0, #1
 800d070:	4606      	mov	r6, r0
 800d072:	d1d6      	bne.n	800d022 <_svfiprintf_r+0x176>
 800d074:	89ab      	ldrh	r3, [r5, #12]
 800d076:	065b      	lsls	r3, r3, #25
 800d078:	f53f af2c 	bmi.w	800ced4 <_svfiprintf_r+0x28>
 800d07c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d07e:	b01d      	add	sp, #116	; 0x74
 800d080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d084:	ab03      	add	r3, sp, #12
 800d086:	9300      	str	r3, [sp, #0]
 800d088:	462a      	mov	r2, r5
 800d08a:	4b06      	ldr	r3, [pc, #24]	; (800d0a4 <_svfiprintf_r+0x1f8>)
 800d08c:	a904      	add	r1, sp, #16
 800d08e:	4638      	mov	r0, r7
 800d090:	f7fc f91c 	bl	80092cc <_printf_i>
 800d094:	e7eb      	b.n	800d06e <_svfiprintf_r+0x1c2>
 800d096:	bf00      	nop
 800d098:	0800f8bc 	.word	0x0800f8bc
 800d09c:	0800f8c6 	.word	0x0800f8c6
 800d0a0:	08008d85 	.word	0x08008d85
 800d0a4:	0800cdf5 	.word	0x0800cdf5
 800d0a8:	0800f8c2 	.word	0x0800f8c2

0800d0ac <_sungetc_r>:
 800d0ac:	b538      	push	{r3, r4, r5, lr}
 800d0ae:	1c4b      	adds	r3, r1, #1
 800d0b0:	4614      	mov	r4, r2
 800d0b2:	d103      	bne.n	800d0bc <_sungetc_r+0x10>
 800d0b4:	f04f 35ff 	mov.w	r5, #4294967295
 800d0b8:	4628      	mov	r0, r5
 800d0ba:	bd38      	pop	{r3, r4, r5, pc}
 800d0bc:	8993      	ldrh	r3, [r2, #12]
 800d0be:	f023 0320 	bic.w	r3, r3, #32
 800d0c2:	8193      	strh	r3, [r2, #12]
 800d0c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d0c6:	6852      	ldr	r2, [r2, #4]
 800d0c8:	b2cd      	uxtb	r5, r1
 800d0ca:	b18b      	cbz	r3, 800d0f0 <_sungetc_r+0x44>
 800d0cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d0ce:	4293      	cmp	r3, r2
 800d0d0:	dd08      	ble.n	800d0e4 <_sungetc_r+0x38>
 800d0d2:	6823      	ldr	r3, [r4, #0]
 800d0d4:	1e5a      	subs	r2, r3, #1
 800d0d6:	6022      	str	r2, [r4, #0]
 800d0d8:	f803 5c01 	strb.w	r5, [r3, #-1]
 800d0dc:	6863      	ldr	r3, [r4, #4]
 800d0de:	3301      	adds	r3, #1
 800d0e0:	6063      	str	r3, [r4, #4]
 800d0e2:	e7e9      	b.n	800d0b8 <_sungetc_r+0xc>
 800d0e4:	4621      	mov	r1, r4
 800d0e6:	f000 fd3b 	bl	800db60 <__submore>
 800d0ea:	2800      	cmp	r0, #0
 800d0ec:	d0f1      	beq.n	800d0d2 <_sungetc_r+0x26>
 800d0ee:	e7e1      	b.n	800d0b4 <_sungetc_r+0x8>
 800d0f0:	6921      	ldr	r1, [r4, #16]
 800d0f2:	6823      	ldr	r3, [r4, #0]
 800d0f4:	b151      	cbz	r1, 800d10c <_sungetc_r+0x60>
 800d0f6:	4299      	cmp	r1, r3
 800d0f8:	d208      	bcs.n	800d10c <_sungetc_r+0x60>
 800d0fa:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800d0fe:	42a9      	cmp	r1, r5
 800d100:	d104      	bne.n	800d10c <_sungetc_r+0x60>
 800d102:	3b01      	subs	r3, #1
 800d104:	3201      	adds	r2, #1
 800d106:	6023      	str	r3, [r4, #0]
 800d108:	6062      	str	r2, [r4, #4]
 800d10a:	e7d5      	b.n	800d0b8 <_sungetc_r+0xc>
 800d10c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800d110:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d114:	6363      	str	r3, [r4, #52]	; 0x34
 800d116:	2303      	movs	r3, #3
 800d118:	63a3      	str	r3, [r4, #56]	; 0x38
 800d11a:	4623      	mov	r3, r4
 800d11c:	f803 5f46 	strb.w	r5, [r3, #70]!
 800d120:	6023      	str	r3, [r4, #0]
 800d122:	2301      	movs	r3, #1
 800d124:	e7dc      	b.n	800d0e0 <_sungetc_r+0x34>

0800d126 <__ssrefill_r>:
 800d126:	b510      	push	{r4, lr}
 800d128:	460c      	mov	r4, r1
 800d12a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800d12c:	b169      	cbz	r1, 800d14a <__ssrefill_r+0x24>
 800d12e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d132:	4299      	cmp	r1, r3
 800d134:	d001      	beq.n	800d13a <__ssrefill_r+0x14>
 800d136:	f7ff fdb3 	bl	800cca0 <_free_r>
 800d13a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d13c:	6063      	str	r3, [r4, #4]
 800d13e:	2000      	movs	r0, #0
 800d140:	6360      	str	r0, [r4, #52]	; 0x34
 800d142:	b113      	cbz	r3, 800d14a <__ssrefill_r+0x24>
 800d144:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d146:	6023      	str	r3, [r4, #0]
 800d148:	bd10      	pop	{r4, pc}
 800d14a:	6923      	ldr	r3, [r4, #16]
 800d14c:	6023      	str	r3, [r4, #0]
 800d14e:	2300      	movs	r3, #0
 800d150:	6063      	str	r3, [r4, #4]
 800d152:	89a3      	ldrh	r3, [r4, #12]
 800d154:	f043 0320 	orr.w	r3, r3, #32
 800d158:	81a3      	strh	r3, [r4, #12]
 800d15a:	f04f 30ff 	mov.w	r0, #4294967295
 800d15e:	e7f3      	b.n	800d148 <__ssrefill_r+0x22>

0800d160 <__ssvfiscanf_r>:
 800d160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d164:	460c      	mov	r4, r1
 800d166:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800d16a:	2100      	movs	r1, #0
 800d16c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800d170:	49b2      	ldr	r1, [pc, #712]	; (800d43c <__ssvfiscanf_r+0x2dc>)
 800d172:	91a0      	str	r1, [sp, #640]	; 0x280
 800d174:	f10d 0804 	add.w	r8, sp, #4
 800d178:	49b1      	ldr	r1, [pc, #708]	; (800d440 <__ssvfiscanf_r+0x2e0>)
 800d17a:	4fb2      	ldr	r7, [pc, #712]	; (800d444 <__ssvfiscanf_r+0x2e4>)
 800d17c:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 800d448 <__ssvfiscanf_r+0x2e8>
 800d180:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800d184:	4606      	mov	r6, r0
 800d186:	91a1      	str	r1, [sp, #644]	; 0x284
 800d188:	9300      	str	r3, [sp, #0]
 800d18a:	f892 a000 	ldrb.w	sl, [r2]
 800d18e:	f1ba 0f00 	cmp.w	sl, #0
 800d192:	f000 8151 	beq.w	800d438 <__ssvfiscanf_r+0x2d8>
 800d196:	f81a 3007 	ldrb.w	r3, [sl, r7]
 800d19a:	f013 0308 	ands.w	r3, r3, #8
 800d19e:	f102 0501 	add.w	r5, r2, #1
 800d1a2:	d019      	beq.n	800d1d8 <__ssvfiscanf_r+0x78>
 800d1a4:	6863      	ldr	r3, [r4, #4]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	dd0f      	ble.n	800d1ca <__ssvfiscanf_r+0x6a>
 800d1aa:	6823      	ldr	r3, [r4, #0]
 800d1ac:	781a      	ldrb	r2, [r3, #0]
 800d1ae:	5cba      	ldrb	r2, [r7, r2]
 800d1b0:	0712      	lsls	r2, r2, #28
 800d1b2:	d401      	bmi.n	800d1b8 <__ssvfiscanf_r+0x58>
 800d1b4:	462a      	mov	r2, r5
 800d1b6:	e7e8      	b.n	800d18a <__ssvfiscanf_r+0x2a>
 800d1b8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d1ba:	3201      	adds	r2, #1
 800d1bc:	9245      	str	r2, [sp, #276]	; 0x114
 800d1be:	6862      	ldr	r2, [r4, #4]
 800d1c0:	3301      	adds	r3, #1
 800d1c2:	3a01      	subs	r2, #1
 800d1c4:	6062      	str	r2, [r4, #4]
 800d1c6:	6023      	str	r3, [r4, #0]
 800d1c8:	e7ec      	b.n	800d1a4 <__ssvfiscanf_r+0x44>
 800d1ca:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d1cc:	4621      	mov	r1, r4
 800d1ce:	4630      	mov	r0, r6
 800d1d0:	4798      	blx	r3
 800d1d2:	2800      	cmp	r0, #0
 800d1d4:	d0e9      	beq.n	800d1aa <__ssvfiscanf_r+0x4a>
 800d1d6:	e7ed      	b.n	800d1b4 <__ssvfiscanf_r+0x54>
 800d1d8:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 800d1dc:	f040 8083 	bne.w	800d2e6 <__ssvfiscanf_r+0x186>
 800d1e0:	9341      	str	r3, [sp, #260]	; 0x104
 800d1e2:	9343      	str	r3, [sp, #268]	; 0x10c
 800d1e4:	7853      	ldrb	r3, [r2, #1]
 800d1e6:	2b2a      	cmp	r3, #42	; 0x2a
 800d1e8:	bf02      	ittt	eq
 800d1ea:	2310      	moveq	r3, #16
 800d1ec:	1c95      	addeq	r5, r2, #2
 800d1ee:	9341      	streq	r3, [sp, #260]	; 0x104
 800d1f0:	220a      	movs	r2, #10
 800d1f2:	46ab      	mov	fp, r5
 800d1f4:	f81b 1b01 	ldrb.w	r1, [fp], #1
 800d1f8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800d1fc:	2b09      	cmp	r3, #9
 800d1fe:	d91d      	bls.n	800d23c <__ssvfiscanf_r+0xdc>
 800d200:	4891      	ldr	r0, [pc, #580]	; (800d448 <__ssvfiscanf_r+0x2e8>)
 800d202:	2203      	movs	r2, #3
 800d204:	f7f2 ffe4 	bl	80001d0 <memchr>
 800d208:	b140      	cbz	r0, 800d21c <__ssvfiscanf_r+0xbc>
 800d20a:	2301      	movs	r3, #1
 800d20c:	eba0 0009 	sub.w	r0, r0, r9
 800d210:	fa03 f000 	lsl.w	r0, r3, r0
 800d214:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d216:	4318      	orrs	r0, r3
 800d218:	9041      	str	r0, [sp, #260]	; 0x104
 800d21a:	465d      	mov	r5, fp
 800d21c:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d220:	2b78      	cmp	r3, #120	; 0x78
 800d222:	d806      	bhi.n	800d232 <__ssvfiscanf_r+0xd2>
 800d224:	2b57      	cmp	r3, #87	; 0x57
 800d226:	d810      	bhi.n	800d24a <__ssvfiscanf_r+0xea>
 800d228:	2b25      	cmp	r3, #37	; 0x25
 800d22a:	d05c      	beq.n	800d2e6 <__ssvfiscanf_r+0x186>
 800d22c:	d856      	bhi.n	800d2dc <__ssvfiscanf_r+0x17c>
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d074      	beq.n	800d31c <__ssvfiscanf_r+0x1bc>
 800d232:	2303      	movs	r3, #3
 800d234:	9347      	str	r3, [sp, #284]	; 0x11c
 800d236:	230a      	movs	r3, #10
 800d238:	9342      	str	r3, [sp, #264]	; 0x108
 800d23a:	e081      	b.n	800d340 <__ssvfiscanf_r+0x1e0>
 800d23c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800d23e:	fb02 1303 	mla	r3, r2, r3, r1
 800d242:	3b30      	subs	r3, #48	; 0x30
 800d244:	9343      	str	r3, [sp, #268]	; 0x10c
 800d246:	465d      	mov	r5, fp
 800d248:	e7d3      	b.n	800d1f2 <__ssvfiscanf_r+0x92>
 800d24a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800d24e:	2a20      	cmp	r2, #32
 800d250:	d8ef      	bhi.n	800d232 <__ssvfiscanf_r+0xd2>
 800d252:	a101      	add	r1, pc, #4	; (adr r1, 800d258 <__ssvfiscanf_r+0xf8>)
 800d254:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d258:	0800d32b 	.word	0x0800d32b
 800d25c:	0800d233 	.word	0x0800d233
 800d260:	0800d233 	.word	0x0800d233
 800d264:	0800d389 	.word	0x0800d389
 800d268:	0800d233 	.word	0x0800d233
 800d26c:	0800d233 	.word	0x0800d233
 800d270:	0800d233 	.word	0x0800d233
 800d274:	0800d233 	.word	0x0800d233
 800d278:	0800d233 	.word	0x0800d233
 800d27c:	0800d233 	.word	0x0800d233
 800d280:	0800d233 	.word	0x0800d233
 800d284:	0800d39f 	.word	0x0800d39f
 800d288:	0800d375 	.word	0x0800d375
 800d28c:	0800d2e3 	.word	0x0800d2e3
 800d290:	0800d2e3 	.word	0x0800d2e3
 800d294:	0800d2e3 	.word	0x0800d2e3
 800d298:	0800d233 	.word	0x0800d233
 800d29c:	0800d379 	.word	0x0800d379
 800d2a0:	0800d233 	.word	0x0800d233
 800d2a4:	0800d233 	.word	0x0800d233
 800d2a8:	0800d233 	.word	0x0800d233
 800d2ac:	0800d233 	.word	0x0800d233
 800d2b0:	0800d3af 	.word	0x0800d3af
 800d2b4:	0800d381 	.word	0x0800d381
 800d2b8:	0800d323 	.word	0x0800d323
 800d2bc:	0800d233 	.word	0x0800d233
 800d2c0:	0800d233 	.word	0x0800d233
 800d2c4:	0800d3ab 	.word	0x0800d3ab
 800d2c8:	0800d233 	.word	0x0800d233
 800d2cc:	0800d375 	.word	0x0800d375
 800d2d0:	0800d233 	.word	0x0800d233
 800d2d4:	0800d233 	.word	0x0800d233
 800d2d8:	0800d32b 	.word	0x0800d32b
 800d2dc:	3b45      	subs	r3, #69	; 0x45
 800d2de:	2b02      	cmp	r3, #2
 800d2e0:	d8a7      	bhi.n	800d232 <__ssvfiscanf_r+0xd2>
 800d2e2:	2305      	movs	r3, #5
 800d2e4:	e02b      	b.n	800d33e <__ssvfiscanf_r+0x1de>
 800d2e6:	6863      	ldr	r3, [r4, #4]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	dd0d      	ble.n	800d308 <__ssvfiscanf_r+0x1a8>
 800d2ec:	6823      	ldr	r3, [r4, #0]
 800d2ee:	781a      	ldrb	r2, [r3, #0]
 800d2f0:	4552      	cmp	r2, sl
 800d2f2:	f040 80a1 	bne.w	800d438 <__ssvfiscanf_r+0x2d8>
 800d2f6:	3301      	adds	r3, #1
 800d2f8:	6862      	ldr	r2, [r4, #4]
 800d2fa:	6023      	str	r3, [r4, #0]
 800d2fc:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800d2fe:	3a01      	subs	r2, #1
 800d300:	3301      	adds	r3, #1
 800d302:	6062      	str	r2, [r4, #4]
 800d304:	9345      	str	r3, [sp, #276]	; 0x114
 800d306:	e755      	b.n	800d1b4 <__ssvfiscanf_r+0x54>
 800d308:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d30a:	4621      	mov	r1, r4
 800d30c:	4630      	mov	r0, r6
 800d30e:	4798      	blx	r3
 800d310:	2800      	cmp	r0, #0
 800d312:	d0eb      	beq.n	800d2ec <__ssvfiscanf_r+0x18c>
 800d314:	9844      	ldr	r0, [sp, #272]	; 0x110
 800d316:	2800      	cmp	r0, #0
 800d318:	f040 8084 	bne.w	800d424 <__ssvfiscanf_r+0x2c4>
 800d31c:	f04f 30ff 	mov.w	r0, #4294967295
 800d320:	e086      	b.n	800d430 <__ssvfiscanf_r+0x2d0>
 800d322:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800d324:	f042 0220 	orr.w	r2, r2, #32
 800d328:	9241      	str	r2, [sp, #260]	; 0x104
 800d32a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800d32c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d330:	9241      	str	r2, [sp, #260]	; 0x104
 800d332:	2210      	movs	r2, #16
 800d334:	2b6f      	cmp	r3, #111	; 0x6f
 800d336:	9242      	str	r2, [sp, #264]	; 0x108
 800d338:	bf34      	ite	cc
 800d33a:	2303      	movcc	r3, #3
 800d33c:	2304      	movcs	r3, #4
 800d33e:	9347      	str	r3, [sp, #284]	; 0x11c
 800d340:	6863      	ldr	r3, [r4, #4]
 800d342:	2b00      	cmp	r3, #0
 800d344:	dd41      	ble.n	800d3ca <__ssvfiscanf_r+0x26a>
 800d346:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d348:	0659      	lsls	r1, r3, #25
 800d34a:	d404      	bmi.n	800d356 <__ssvfiscanf_r+0x1f6>
 800d34c:	6823      	ldr	r3, [r4, #0]
 800d34e:	781a      	ldrb	r2, [r3, #0]
 800d350:	5cba      	ldrb	r2, [r7, r2]
 800d352:	0712      	lsls	r2, r2, #28
 800d354:	d440      	bmi.n	800d3d8 <__ssvfiscanf_r+0x278>
 800d356:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800d358:	2b02      	cmp	r3, #2
 800d35a:	dc4f      	bgt.n	800d3fc <__ssvfiscanf_r+0x29c>
 800d35c:	466b      	mov	r3, sp
 800d35e:	4622      	mov	r2, r4
 800d360:	a941      	add	r1, sp, #260	; 0x104
 800d362:	4630      	mov	r0, r6
 800d364:	f000 f9ce 	bl	800d704 <_scanf_chars>
 800d368:	2801      	cmp	r0, #1
 800d36a:	d065      	beq.n	800d438 <__ssvfiscanf_r+0x2d8>
 800d36c:	2802      	cmp	r0, #2
 800d36e:	f47f af21 	bne.w	800d1b4 <__ssvfiscanf_r+0x54>
 800d372:	e7cf      	b.n	800d314 <__ssvfiscanf_r+0x1b4>
 800d374:	220a      	movs	r2, #10
 800d376:	e7dd      	b.n	800d334 <__ssvfiscanf_r+0x1d4>
 800d378:	2300      	movs	r3, #0
 800d37a:	9342      	str	r3, [sp, #264]	; 0x108
 800d37c:	2303      	movs	r3, #3
 800d37e:	e7de      	b.n	800d33e <__ssvfiscanf_r+0x1de>
 800d380:	2308      	movs	r3, #8
 800d382:	9342      	str	r3, [sp, #264]	; 0x108
 800d384:	2304      	movs	r3, #4
 800d386:	e7da      	b.n	800d33e <__ssvfiscanf_r+0x1de>
 800d388:	4629      	mov	r1, r5
 800d38a:	4640      	mov	r0, r8
 800d38c:	f000 fb30 	bl	800d9f0 <__sccl>
 800d390:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d392:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d396:	9341      	str	r3, [sp, #260]	; 0x104
 800d398:	4605      	mov	r5, r0
 800d39a:	2301      	movs	r3, #1
 800d39c:	e7cf      	b.n	800d33e <__ssvfiscanf_r+0x1de>
 800d39e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d3a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d3a4:	9341      	str	r3, [sp, #260]	; 0x104
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	e7c9      	b.n	800d33e <__ssvfiscanf_r+0x1de>
 800d3aa:	2302      	movs	r3, #2
 800d3ac:	e7c7      	b.n	800d33e <__ssvfiscanf_r+0x1de>
 800d3ae:	9841      	ldr	r0, [sp, #260]	; 0x104
 800d3b0:	06c3      	lsls	r3, r0, #27
 800d3b2:	f53f aeff 	bmi.w	800d1b4 <__ssvfiscanf_r+0x54>
 800d3b6:	9b00      	ldr	r3, [sp, #0]
 800d3b8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d3ba:	1d19      	adds	r1, r3, #4
 800d3bc:	9100      	str	r1, [sp, #0]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	07c0      	lsls	r0, r0, #31
 800d3c2:	bf4c      	ite	mi
 800d3c4:	801a      	strhmi	r2, [r3, #0]
 800d3c6:	601a      	strpl	r2, [r3, #0]
 800d3c8:	e6f4      	b.n	800d1b4 <__ssvfiscanf_r+0x54>
 800d3ca:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d3cc:	4621      	mov	r1, r4
 800d3ce:	4630      	mov	r0, r6
 800d3d0:	4798      	blx	r3
 800d3d2:	2800      	cmp	r0, #0
 800d3d4:	d0b7      	beq.n	800d346 <__ssvfiscanf_r+0x1e6>
 800d3d6:	e79d      	b.n	800d314 <__ssvfiscanf_r+0x1b4>
 800d3d8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d3da:	3201      	adds	r2, #1
 800d3dc:	9245      	str	r2, [sp, #276]	; 0x114
 800d3de:	6862      	ldr	r2, [r4, #4]
 800d3e0:	3a01      	subs	r2, #1
 800d3e2:	2a00      	cmp	r2, #0
 800d3e4:	6062      	str	r2, [r4, #4]
 800d3e6:	dd02      	ble.n	800d3ee <__ssvfiscanf_r+0x28e>
 800d3e8:	3301      	adds	r3, #1
 800d3ea:	6023      	str	r3, [r4, #0]
 800d3ec:	e7ae      	b.n	800d34c <__ssvfiscanf_r+0x1ec>
 800d3ee:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d3f0:	4621      	mov	r1, r4
 800d3f2:	4630      	mov	r0, r6
 800d3f4:	4798      	blx	r3
 800d3f6:	2800      	cmp	r0, #0
 800d3f8:	d0a8      	beq.n	800d34c <__ssvfiscanf_r+0x1ec>
 800d3fa:	e78b      	b.n	800d314 <__ssvfiscanf_r+0x1b4>
 800d3fc:	2b04      	cmp	r3, #4
 800d3fe:	dc06      	bgt.n	800d40e <__ssvfiscanf_r+0x2ae>
 800d400:	466b      	mov	r3, sp
 800d402:	4622      	mov	r2, r4
 800d404:	a941      	add	r1, sp, #260	; 0x104
 800d406:	4630      	mov	r0, r6
 800d408:	f000 f9d4 	bl	800d7b4 <_scanf_i>
 800d40c:	e7ac      	b.n	800d368 <__ssvfiscanf_r+0x208>
 800d40e:	4b0f      	ldr	r3, [pc, #60]	; (800d44c <__ssvfiscanf_r+0x2ec>)
 800d410:	2b00      	cmp	r3, #0
 800d412:	f43f aecf 	beq.w	800d1b4 <__ssvfiscanf_r+0x54>
 800d416:	466b      	mov	r3, sp
 800d418:	4622      	mov	r2, r4
 800d41a:	a941      	add	r1, sp, #260	; 0x104
 800d41c:	4630      	mov	r0, r6
 800d41e:	f7fc f87b 	bl	8009518 <_scanf_float>
 800d422:	e7a1      	b.n	800d368 <__ssvfiscanf_r+0x208>
 800d424:	89a3      	ldrh	r3, [r4, #12]
 800d426:	f013 0f40 	tst.w	r3, #64	; 0x40
 800d42a:	bf18      	it	ne
 800d42c:	f04f 30ff 	movne.w	r0, #4294967295
 800d430:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800d434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d438:	9844      	ldr	r0, [sp, #272]	; 0x110
 800d43a:	e7f9      	b.n	800d430 <__ssvfiscanf_r+0x2d0>
 800d43c:	0800d0ad 	.word	0x0800d0ad
 800d440:	0800d127 	.word	0x0800d127
 800d444:	0800f4e9 	.word	0x0800f4e9
 800d448:	0800f8c2 	.word	0x0800f8c2
 800d44c:	08009519 	.word	0x08009519

0800d450 <__sfputc_r>:
 800d450:	6893      	ldr	r3, [r2, #8]
 800d452:	3b01      	subs	r3, #1
 800d454:	2b00      	cmp	r3, #0
 800d456:	b410      	push	{r4}
 800d458:	6093      	str	r3, [r2, #8]
 800d45a:	da08      	bge.n	800d46e <__sfputc_r+0x1e>
 800d45c:	6994      	ldr	r4, [r2, #24]
 800d45e:	42a3      	cmp	r3, r4
 800d460:	db01      	blt.n	800d466 <__sfputc_r+0x16>
 800d462:	290a      	cmp	r1, #10
 800d464:	d103      	bne.n	800d46e <__sfputc_r+0x1e>
 800d466:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d46a:	f000 bbb3 	b.w	800dbd4 <__swbuf_r>
 800d46e:	6813      	ldr	r3, [r2, #0]
 800d470:	1c58      	adds	r0, r3, #1
 800d472:	6010      	str	r0, [r2, #0]
 800d474:	7019      	strb	r1, [r3, #0]
 800d476:	4608      	mov	r0, r1
 800d478:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d47c:	4770      	bx	lr

0800d47e <__sfputs_r>:
 800d47e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d480:	4606      	mov	r6, r0
 800d482:	460f      	mov	r7, r1
 800d484:	4614      	mov	r4, r2
 800d486:	18d5      	adds	r5, r2, r3
 800d488:	42ac      	cmp	r4, r5
 800d48a:	d101      	bne.n	800d490 <__sfputs_r+0x12>
 800d48c:	2000      	movs	r0, #0
 800d48e:	e007      	b.n	800d4a0 <__sfputs_r+0x22>
 800d490:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d494:	463a      	mov	r2, r7
 800d496:	4630      	mov	r0, r6
 800d498:	f7ff ffda 	bl	800d450 <__sfputc_r>
 800d49c:	1c43      	adds	r3, r0, #1
 800d49e:	d1f3      	bne.n	800d488 <__sfputs_r+0xa>
 800d4a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d4a4 <_vfiprintf_r>:
 800d4a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4a8:	460d      	mov	r5, r1
 800d4aa:	b09d      	sub	sp, #116	; 0x74
 800d4ac:	4614      	mov	r4, r2
 800d4ae:	4698      	mov	r8, r3
 800d4b0:	4606      	mov	r6, r0
 800d4b2:	b118      	cbz	r0, 800d4bc <_vfiprintf_r+0x18>
 800d4b4:	6983      	ldr	r3, [r0, #24]
 800d4b6:	b90b      	cbnz	r3, 800d4bc <_vfiprintf_r+0x18>
 800d4b8:	f7fe fa84 	bl	800b9c4 <__sinit>
 800d4bc:	4b89      	ldr	r3, [pc, #548]	; (800d6e4 <_vfiprintf_r+0x240>)
 800d4be:	429d      	cmp	r5, r3
 800d4c0:	d11b      	bne.n	800d4fa <_vfiprintf_r+0x56>
 800d4c2:	6875      	ldr	r5, [r6, #4]
 800d4c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d4c6:	07d9      	lsls	r1, r3, #31
 800d4c8:	d405      	bmi.n	800d4d6 <_vfiprintf_r+0x32>
 800d4ca:	89ab      	ldrh	r3, [r5, #12]
 800d4cc:	059a      	lsls	r2, r3, #22
 800d4ce:	d402      	bmi.n	800d4d6 <_vfiprintf_r+0x32>
 800d4d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d4d2:	f7fe fe88 	bl	800c1e6 <__retarget_lock_acquire_recursive>
 800d4d6:	89ab      	ldrh	r3, [r5, #12]
 800d4d8:	071b      	lsls	r3, r3, #28
 800d4da:	d501      	bpl.n	800d4e0 <_vfiprintf_r+0x3c>
 800d4dc:	692b      	ldr	r3, [r5, #16]
 800d4de:	b9eb      	cbnz	r3, 800d51c <_vfiprintf_r+0x78>
 800d4e0:	4629      	mov	r1, r5
 800d4e2:	4630      	mov	r0, r6
 800d4e4:	f000 fbd6 	bl	800dc94 <__swsetup_r>
 800d4e8:	b1c0      	cbz	r0, 800d51c <_vfiprintf_r+0x78>
 800d4ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d4ec:	07dc      	lsls	r4, r3, #31
 800d4ee:	d50e      	bpl.n	800d50e <_vfiprintf_r+0x6a>
 800d4f0:	f04f 30ff 	mov.w	r0, #4294967295
 800d4f4:	b01d      	add	sp, #116	; 0x74
 800d4f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4fa:	4b7b      	ldr	r3, [pc, #492]	; (800d6e8 <_vfiprintf_r+0x244>)
 800d4fc:	429d      	cmp	r5, r3
 800d4fe:	d101      	bne.n	800d504 <_vfiprintf_r+0x60>
 800d500:	68b5      	ldr	r5, [r6, #8]
 800d502:	e7df      	b.n	800d4c4 <_vfiprintf_r+0x20>
 800d504:	4b79      	ldr	r3, [pc, #484]	; (800d6ec <_vfiprintf_r+0x248>)
 800d506:	429d      	cmp	r5, r3
 800d508:	bf08      	it	eq
 800d50a:	68f5      	ldreq	r5, [r6, #12]
 800d50c:	e7da      	b.n	800d4c4 <_vfiprintf_r+0x20>
 800d50e:	89ab      	ldrh	r3, [r5, #12]
 800d510:	0598      	lsls	r0, r3, #22
 800d512:	d4ed      	bmi.n	800d4f0 <_vfiprintf_r+0x4c>
 800d514:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d516:	f7fe fe67 	bl	800c1e8 <__retarget_lock_release_recursive>
 800d51a:	e7e9      	b.n	800d4f0 <_vfiprintf_r+0x4c>
 800d51c:	2300      	movs	r3, #0
 800d51e:	9309      	str	r3, [sp, #36]	; 0x24
 800d520:	2320      	movs	r3, #32
 800d522:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d526:	f8cd 800c 	str.w	r8, [sp, #12]
 800d52a:	2330      	movs	r3, #48	; 0x30
 800d52c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d6f0 <_vfiprintf_r+0x24c>
 800d530:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d534:	f04f 0901 	mov.w	r9, #1
 800d538:	4623      	mov	r3, r4
 800d53a:	469a      	mov	sl, r3
 800d53c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d540:	b10a      	cbz	r2, 800d546 <_vfiprintf_r+0xa2>
 800d542:	2a25      	cmp	r2, #37	; 0x25
 800d544:	d1f9      	bne.n	800d53a <_vfiprintf_r+0x96>
 800d546:	ebba 0b04 	subs.w	fp, sl, r4
 800d54a:	d00b      	beq.n	800d564 <_vfiprintf_r+0xc0>
 800d54c:	465b      	mov	r3, fp
 800d54e:	4622      	mov	r2, r4
 800d550:	4629      	mov	r1, r5
 800d552:	4630      	mov	r0, r6
 800d554:	f7ff ff93 	bl	800d47e <__sfputs_r>
 800d558:	3001      	adds	r0, #1
 800d55a:	f000 80aa 	beq.w	800d6b2 <_vfiprintf_r+0x20e>
 800d55e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d560:	445a      	add	r2, fp
 800d562:	9209      	str	r2, [sp, #36]	; 0x24
 800d564:	f89a 3000 	ldrb.w	r3, [sl]
 800d568:	2b00      	cmp	r3, #0
 800d56a:	f000 80a2 	beq.w	800d6b2 <_vfiprintf_r+0x20e>
 800d56e:	2300      	movs	r3, #0
 800d570:	f04f 32ff 	mov.w	r2, #4294967295
 800d574:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d578:	f10a 0a01 	add.w	sl, sl, #1
 800d57c:	9304      	str	r3, [sp, #16]
 800d57e:	9307      	str	r3, [sp, #28]
 800d580:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d584:	931a      	str	r3, [sp, #104]	; 0x68
 800d586:	4654      	mov	r4, sl
 800d588:	2205      	movs	r2, #5
 800d58a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d58e:	4858      	ldr	r0, [pc, #352]	; (800d6f0 <_vfiprintf_r+0x24c>)
 800d590:	f7f2 fe1e 	bl	80001d0 <memchr>
 800d594:	9a04      	ldr	r2, [sp, #16]
 800d596:	b9d8      	cbnz	r0, 800d5d0 <_vfiprintf_r+0x12c>
 800d598:	06d1      	lsls	r1, r2, #27
 800d59a:	bf44      	itt	mi
 800d59c:	2320      	movmi	r3, #32
 800d59e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d5a2:	0713      	lsls	r3, r2, #28
 800d5a4:	bf44      	itt	mi
 800d5a6:	232b      	movmi	r3, #43	; 0x2b
 800d5a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d5ac:	f89a 3000 	ldrb.w	r3, [sl]
 800d5b0:	2b2a      	cmp	r3, #42	; 0x2a
 800d5b2:	d015      	beq.n	800d5e0 <_vfiprintf_r+0x13c>
 800d5b4:	9a07      	ldr	r2, [sp, #28]
 800d5b6:	4654      	mov	r4, sl
 800d5b8:	2000      	movs	r0, #0
 800d5ba:	f04f 0c0a 	mov.w	ip, #10
 800d5be:	4621      	mov	r1, r4
 800d5c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d5c4:	3b30      	subs	r3, #48	; 0x30
 800d5c6:	2b09      	cmp	r3, #9
 800d5c8:	d94e      	bls.n	800d668 <_vfiprintf_r+0x1c4>
 800d5ca:	b1b0      	cbz	r0, 800d5fa <_vfiprintf_r+0x156>
 800d5cc:	9207      	str	r2, [sp, #28]
 800d5ce:	e014      	b.n	800d5fa <_vfiprintf_r+0x156>
 800d5d0:	eba0 0308 	sub.w	r3, r0, r8
 800d5d4:	fa09 f303 	lsl.w	r3, r9, r3
 800d5d8:	4313      	orrs	r3, r2
 800d5da:	9304      	str	r3, [sp, #16]
 800d5dc:	46a2      	mov	sl, r4
 800d5de:	e7d2      	b.n	800d586 <_vfiprintf_r+0xe2>
 800d5e0:	9b03      	ldr	r3, [sp, #12]
 800d5e2:	1d19      	adds	r1, r3, #4
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	9103      	str	r1, [sp, #12]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	bfbb      	ittet	lt
 800d5ec:	425b      	neglt	r3, r3
 800d5ee:	f042 0202 	orrlt.w	r2, r2, #2
 800d5f2:	9307      	strge	r3, [sp, #28]
 800d5f4:	9307      	strlt	r3, [sp, #28]
 800d5f6:	bfb8      	it	lt
 800d5f8:	9204      	strlt	r2, [sp, #16]
 800d5fa:	7823      	ldrb	r3, [r4, #0]
 800d5fc:	2b2e      	cmp	r3, #46	; 0x2e
 800d5fe:	d10c      	bne.n	800d61a <_vfiprintf_r+0x176>
 800d600:	7863      	ldrb	r3, [r4, #1]
 800d602:	2b2a      	cmp	r3, #42	; 0x2a
 800d604:	d135      	bne.n	800d672 <_vfiprintf_r+0x1ce>
 800d606:	9b03      	ldr	r3, [sp, #12]
 800d608:	1d1a      	adds	r2, r3, #4
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	9203      	str	r2, [sp, #12]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	bfb8      	it	lt
 800d612:	f04f 33ff 	movlt.w	r3, #4294967295
 800d616:	3402      	adds	r4, #2
 800d618:	9305      	str	r3, [sp, #20]
 800d61a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d700 <_vfiprintf_r+0x25c>
 800d61e:	7821      	ldrb	r1, [r4, #0]
 800d620:	2203      	movs	r2, #3
 800d622:	4650      	mov	r0, sl
 800d624:	f7f2 fdd4 	bl	80001d0 <memchr>
 800d628:	b140      	cbz	r0, 800d63c <_vfiprintf_r+0x198>
 800d62a:	2340      	movs	r3, #64	; 0x40
 800d62c:	eba0 000a 	sub.w	r0, r0, sl
 800d630:	fa03 f000 	lsl.w	r0, r3, r0
 800d634:	9b04      	ldr	r3, [sp, #16]
 800d636:	4303      	orrs	r3, r0
 800d638:	3401      	adds	r4, #1
 800d63a:	9304      	str	r3, [sp, #16]
 800d63c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d640:	482c      	ldr	r0, [pc, #176]	; (800d6f4 <_vfiprintf_r+0x250>)
 800d642:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d646:	2206      	movs	r2, #6
 800d648:	f7f2 fdc2 	bl	80001d0 <memchr>
 800d64c:	2800      	cmp	r0, #0
 800d64e:	d03f      	beq.n	800d6d0 <_vfiprintf_r+0x22c>
 800d650:	4b29      	ldr	r3, [pc, #164]	; (800d6f8 <_vfiprintf_r+0x254>)
 800d652:	bb1b      	cbnz	r3, 800d69c <_vfiprintf_r+0x1f8>
 800d654:	9b03      	ldr	r3, [sp, #12]
 800d656:	3307      	adds	r3, #7
 800d658:	f023 0307 	bic.w	r3, r3, #7
 800d65c:	3308      	adds	r3, #8
 800d65e:	9303      	str	r3, [sp, #12]
 800d660:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d662:	443b      	add	r3, r7
 800d664:	9309      	str	r3, [sp, #36]	; 0x24
 800d666:	e767      	b.n	800d538 <_vfiprintf_r+0x94>
 800d668:	fb0c 3202 	mla	r2, ip, r2, r3
 800d66c:	460c      	mov	r4, r1
 800d66e:	2001      	movs	r0, #1
 800d670:	e7a5      	b.n	800d5be <_vfiprintf_r+0x11a>
 800d672:	2300      	movs	r3, #0
 800d674:	3401      	adds	r4, #1
 800d676:	9305      	str	r3, [sp, #20]
 800d678:	4619      	mov	r1, r3
 800d67a:	f04f 0c0a 	mov.w	ip, #10
 800d67e:	4620      	mov	r0, r4
 800d680:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d684:	3a30      	subs	r2, #48	; 0x30
 800d686:	2a09      	cmp	r2, #9
 800d688:	d903      	bls.n	800d692 <_vfiprintf_r+0x1ee>
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d0c5      	beq.n	800d61a <_vfiprintf_r+0x176>
 800d68e:	9105      	str	r1, [sp, #20]
 800d690:	e7c3      	b.n	800d61a <_vfiprintf_r+0x176>
 800d692:	fb0c 2101 	mla	r1, ip, r1, r2
 800d696:	4604      	mov	r4, r0
 800d698:	2301      	movs	r3, #1
 800d69a:	e7f0      	b.n	800d67e <_vfiprintf_r+0x1da>
 800d69c:	ab03      	add	r3, sp, #12
 800d69e:	9300      	str	r3, [sp, #0]
 800d6a0:	462a      	mov	r2, r5
 800d6a2:	4b16      	ldr	r3, [pc, #88]	; (800d6fc <_vfiprintf_r+0x258>)
 800d6a4:	a904      	add	r1, sp, #16
 800d6a6:	4630      	mov	r0, r6
 800d6a8:	f7fb fb6c 	bl	8008d84 <_printf_float>
 800d6ac:	4607      	mov	r7, r0
 800d6ae:	1c78      	adds	r0, r7, #1
 800d6b0:	d1d6      	bne.n	800d660 <_vfiprintf_r+0x1bc>
 800d6b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d6b4:	07d9      	lsls	r1, r3, #31
 800d6b6:	d405      	bmi.n	800d6c4 <_vfiprintf_r+0x220>
 800d6b8:	89ab      	ldrh	r3, [r5, #12]
 800d6ba:	059a      	lsls	r2, r3, #22
 800d6bc:	d402      	bmi.n	800d6c4 <_vfiprintf_r+0x220>
 800d6be:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d6c0:	f7fe fd92 	bl	800c1e8 <__retarget_lock_release_recursive>
 800d6c4:	89ab      	ldrh	r3, [r5, #12]
 800d6c6:	065b      	lsls	r3, r3, #25
 800d6c8:	f53f af12 	bmi.w	800d4f0 <_vfiprintf_r+0x4c>
 800d6cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d6ce:	e711      	b.n	800d4f4 <_vfiprintf_r+0x50>
 800d6d0:	ab03      	add	r3, sp, #12
 800d6d2:	9300      	str	r3, [sp, #0]
 800d6d4:	462a      	mov	r2, r5
 800d6d6:	4b09      	ldr	r3, [pc, #36]	; (800d6fc <_vfiprintf_r+0x258>)
 800d6d8:	a904      	add	r1, sp, #16
 800d6da:	4630      	mov	r0, r6
 800d6dc:	f7fb fdf6 	bl	80092cc <_printf_i>
 800d6e0:	e7e4      	b.n	800d6ac <_vfiprintf_r+0x208>
 800d6e2:	bf00      	nop
 800d6e4:	0800f6a0 	.word	0x0800f6a0
 800d6e8:	0800f6c0 	.word	0x0800f6c0
 800d6ec:	0800f680 	.word	0x0800f680
 800d6f0:	0800f8bc 	.word	0x0800f8bc
 800d6f4:	0800f8c6 	.word	0x0800f8c6
 800d6f8:	08008d85 	.word	0x08008d85
 800d6fc:	0800d47f 	.word	0x0800d47f
 800d700:	0800f8c2 	.word	0x0800f8c2

0800d704 <_scanf_chars>:
 800d704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d708:	4615      	mov	r5, r2
 800d70a:	688a      	ldr	r2, [r1, #8]
 800d70c:	4680      	mov	r8, r0
 800d70e:	460c      	mov	r4, r1
 800d710:	b932      	cbnz	r2, 800d720 <_scanf_chars+0x1c>
 800d712:	698a      	ldr	r2, [r1, #24]
 800d714:	2a00      	cmp	r2, #0
 800d716:	bf0c      	ite	eq
 800d718:	2201      	moveq	r2, #1
 800d71a:	f04f 32ff 	movne.w	r2, #4294967295
 800d71e:	608a      	str	r2, [r1, #8]
 800d720:	6822      	ldr	r2, [r4, #0]
 800d722:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800d7b0 <_scanf_chars+0xac>
 800d726:	06d1      	lsls	r1, r2, #27
 800d728:	bf5f      	itttt	pl
 800d72a:	681a      	ldrpl	r2, [r3, #0]
 800d72c:	1d11      	addpl	r1, r2, #4
 800d72e:	6019      	strpl	r1, [r3, #0]
 800d730:	6816      	ldrpl	r6, [r2, #0]
 800d732:	2700      	movs	r7, #0
 800d734:	69a0      	ldr	r0, [r4, #24]
 800d736:	b188      	cbz	r0, 800d75c <_scanf_chars+0x58>
 800d738:	2801      	cmp	r0, #1
 800d73a:	d107      	bne.n	800d74c <_scanf_chars+0x48>
 800d73c:	682b      	ldr	r3, [r5, #0]
 800d73e:	781a      	ldrb	r2, [r3, #0]
 800d740:	6963      	ldr	r3, [r4, #20]
 800d742:	5c9b      	ldrb	r3, [r3, r2]
 800d744:	b953      	cbnz	r3, 800d75c <_scanf_chars+0x58>
 800d746:	bb27      	cbnz	r7, 800d792 <_scanf_chars+0x8e>
 800d748:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d74c:	2802      	cmp	r0, #2
 800d74e:	d120      	bne.n	800d792 <_scanf_chars+0x8e>
 800d750:	682b      	ldr	r3, [r5, #0]
 800d752:	781b      	ldrb	r3, [r3, #0]
 800d754:	f813 3009 	ldrb.w	r3, [r3, r9]
 800d758:	071b      	lsls	r3, r3, #28
 800d75a:	d41a      	bmi.n	800d792 <_scanf_chars+0x8e>
 800d75c:	6823      	ldr	r3, [r4, #0]
 800d75e:	06da      	lsls	r2, r3, #27
 800d760:	bf5e      	ittt	pl
 800d762:	682b      	ldrpl	r3, [r5, #0]
 800d764:	781b      	ldrbpl	r3, [r3, #0]
 800d766:	f806 3b01 	strbpl.w	r3, [r6], #1
 800d76a:	682a      	ldr	r2, [r5, #0]
 800d76c:	686b      	ldr	r3, [r5, #4]
 800d76e:	3201      	adds	r2, #1
 800d770:	602a      	str	r2, [r5, #0]
 800d772:	68a2      	ldr	r2, [r4, #8]
 800d774:	3b01      	subs	r3, #1
 800d776:	3a01      	subs	r2, #1
 800d778:	606b      	str	r3, [r5, #4]
 800d77a:	3701      	adds	r7, #1
 800d77c:	60a2      	str	r2, [r4, #8]
 800d77e:	b142      	cbz	r2, 800d792 <_scanf_chars+0x8e>
 800d780:	2b00      	cmp	r3, #0
 800d782:	dcd7      	bgt.n	800d734 <_scanf_chars+0x30>
 800d784:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d788:	4629      	mov	r1, r5
 800d78a:	4640      	mov	r0, r8
 800d78c:	4798      	blx	r3
 800d78e:	2800      	cmp	r0, #0
 800d790:	d0d0      	beq.n	800d734 <_scanf_chars+0x30>
 800d792:	6823      	ldr	r3, [r4, #0]
 800d794:	f013 0310 	ands.w	r3, r3, #16
 800d798:	d105      	bne.n	800d7a6 <_scanf_chars+0xa2>
 800d79a:	68e2      	ldr	r2, [r4, #12]
 800d79c:	3201      	adds	r2, #1
 800d79e:	60e2      	str	r2, [r4, #12]
 800d7a0:	69a2      	ldr	r2, [r4, #24]
 800d7a2:	b102      	cbz	r2, 800d7a6 <_scanf_chars+0xa2>
 800d7a4:	7033      	strb	r3, [r6, #0]
 800d7a6:	6923      	ldr	r3, [r4, #16]
 800d7a8:	441f      	add	r7, r3
 800d7aa:	6127      	str	r7, [r4, #16]
 800d7ac:	2000      	movs	r0, #0
 800d7ae:	e7cb      	b.n	800d748 <_scanf_chars+0x44>
 800d7b0:	0800f4e9 	.word	0x0800f4e9

0800d7b4 <_scanf_i>:
 800d7b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7b8:	4698      	mov	r8, r3
 800d7ba:	4b74      	ldr	r3, [pc, #464]	; (800d98c <_scanf_i+0x1d8>)
 800d7bc:	460c      	mov	r4, r1
 800d7be:	4682      	mov	sl, r0
 800d7c0:	4616      	mov	r6, r2
 800d7c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d7c6:	b087      	sub	sp, #28
 800d7c8:	ab03      	add	r3, sp, #12
 800d7ca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d7ce:	4b70      	ldr	r3, [pc, #448]	; (800d990 <_scanf_i+0x1dc>)
 800d7d0:	69a1      	ldr	r1, [r4, #24]
 800d7d2:	4a70      	ldr	r2, [pc, #448]	; (800d994 <_scanf_i+0x1e0>)
 800d7d4:	2903      	cmp	r1, #3
 800d7d6:	bf18      	it	ne
 800d7d8:	461a      	movne	r2, r3
 800d7da:	68a3      	ldr	r3, [r4, #8]
 800d7dc:	9201      	str	r2, [sp, #4]
 800d7de:	1e5a      	subs	r2, r3, #1
 800d7e0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800d7e4:	bf88      	it	hi
 800d7e6:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800d7ea:	4627      	mov	r7, r4
 800d7ec:	bf82      	ittt	hi
 800d7ee:	eb03 0905 	addhi.w	r9, r3, r5
 800d7f2:	f240 135d 	movwhi	r3, #349	; 0x15d
 800d7f6:	60a3      	strhi	r3, [r4, #8]
 800d7f8:	f857 3b1c 	ldr.w	r3, [r7], #28
 800d7fc:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800d800:	bf98      	it	ls
 800d802:	f04f 0900 	movls.w	r9, #0
 800d806:	6023      	str	r3, [r4, #0]
 800d808:	463d      	mov	r5, r7
 800d80a:	f04f 0b00 	mov.w	fp, #0
 800d80e:	6831      	ldr	r1, [r6, #0]
 800d810:	ab03      	add	r3, sp, #12
 800d812:	7809      	ldrb	r1, [r1, #0]
 800d814:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800d818:	2202      	movs	r2, #2
 800d81a:	f7f2 fcd9 	bl	80001d0 <memchr>
 800d81e:	b328      	cbz	r0, 800d86c <_scanf_i+0xb8>
 800d820:	f1bb 0f01 	cmp.w	fp, #1
 800d824:	d159      	bne.n	800d8da <_scanf_i+0x126>
 800d826:	6862      	ldr	r2, [r4, #4]
 800d828:	b92a      	cbnz	r2, 800d836 <_scanf_i+0x82>
 800d82a:	6822      	ldr	r2, [r4, #0]
 800d82c:	2308      	movs	r3, #8
 800d82e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d832:	6063      	str	r3, [r4, #4]
 800d834:	6022      	str	r2, [r4, #0]
 800d836:	6822      	ldr	r2, [r4, #0]
 800d838:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800d83c:	6022      	str	r2, [r4, #0]
 800d83e:	68a2      	ldr	r2, [r4, #8]
 800d840:	1e51      	subs	r1, r2, #1
 800d842:	60a1      	str	r1, [r4, #8]
 800d844:	b192      	cbz	r2, 800d86c <_scanf_i+0xb8>
 800d846:	6832      	ldr	r2, [r6, #0]
 800d848:	1c51      	adds	r1, r2, #1
 800d84a:	6031      	str	r1, [r6, #0]
 800d84c:	7812      	ldrb	r2, [r2, #0]
 800d84e:	f805 2b01 	strb.w	r2, [r5], #1
 800d852:	6872      	ldr	r2, [r6, #4]
 800d854:	3a01      	subs	r2, #1
 800d856:	2a00      	cmp	r2, #0
 800d858:	6072      	str	r2, [r6, #4]
 800d85a:	dc07      	bgt.n	800d86c <_scanf_i+0xb8>
 800d85c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800d860:	4631      	mov	r1, r6
 800d862:	4650      	mov	r0, sl
 800d864:	4790      	blx	r2
 800d866:	2800      	cmp	r0, #0
 800d868:	f040 8085 	bne.w	800d976 <_scanf_i+0x1c2>
 800d86c:	f10b 0b01 	add.w	fp, fp, #1
 800d870:	f1bb 0f03 	cmp.w	fp, #3
 800d874:	d1cb      	bne.n	800d80e <_scanf_i+0x5a>
 800d876:	6863      	ldr	r3, [r4, #4]
 800d878:	b90b      	cbnz	r3, 800d87e <_scanf_i+0xca>
 800d87a:	230a      	movs	r3, #10
 800d87c:	6063      	str	r3, [r4, #4]
 800d87e:	6863      	ldr	r3, [r4, #4]
 800d880:	4945      	ldr	r1, [pc, #276]	; (800d998 <_scanf_i+0x1e4>)
 800d882:	6960      	ldr	r0, [r4, #20]
 800d884:	1ac9      	subs	r1, r1, r3
 800d886:	f000 f8b3 	bl	800d9f0 <__sccl>
 800d88a:	f04f 0b00 	mov.w	fp, #0
 800d88e:	68a3      	ldr	r3, [r4, #8]
 800d890:	6822      	ldr	r2, [r4, #0]
 800d892:	2b00      	cmp	r3, #0
 800d894:	d03d      	beq.n	800d912 <_scanf_i+0x15e>
 800d896:	6831      	ldr	r1, [r6, #0]
 800d898:	6960      	ldr	r0, [r4, #20]
 800d89a:	f891 c000 	ldrb.w	ip, [r1]
 800d89e:	f810 000c 	ldrb.w	r0, [r0, ip]
 800d8a2:	2800      	cmp	r0, #0
 800d8a4:	d035      	beq.n	800d912 <_scanf_i+0x15e>
 800d8a6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800d8aa:	d124      	bne.n	800d8f6 <_scanf_i+0x142>
 800d8ac:	0510      	lsls	r0, r2, #20
 800d8ae:	d522      	bpl.n	800d8f6 <_scanf_i+0x142>
 800d8b0:	f10b 0b01 	add.w	fp, fp, #1
 800d8b4:	f1b9 0f00 	cmp.w	r9, #0
 800d8b8:	d003      	beq.n	800d8c2 <_scanf_i+0x10e>
 800d8ba:	3301      	adds	r3, #1
 800d8bc:	f109 39ff 	add.w	r9, r9, #4294967295
 800d8c0:	60a3      	str	r3, [r4, #8]
 800d8c2:	6873      	ldr	r3, [r6, #4]
 800d8c4:	3b01      	subs	r3, #1
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	6073      	str	r3, [r6, #4]
 800d8ca:	dd1b      	ble.n	800d904 <_scanf_i+0x150>
 800d8cc:	6833      	ldr	r3, [r6, #0]
 800d8ce:	3301      	adds	r3, #1
 800d8d0:	6033      	str	r3, [r6, #0]
 800d8d2:	68a3      	ldr	r3, [r4, #8]
 800d8d4:	3b01      	subs	r3, #1
 800d8d6:	60a3      	str	r3, [r4, #8]
 800d8d8:	e7d9      	b.n	800d88e <_scanf_i+0xda>
 800d8da:	f1bb 0f02 	cmp.w	fp, #2
 800d8de:	d1ae      	bne.n	800d83e <_scanf_i+0x8a>
 800d8e0:	6822      	ldr	r2, [r4, #0]
 800d8e2:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800d8e6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800d8ea:	d1bf      	bne.n	800d86c <_scanf_i+0xb8>
 800d8ec:	2310      	movs	r3, #16
 800d8ee:	6063      	str	r3, [r4, #4]
 800d8f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d8f4:	e7a2      	b.n	800d83c <_scanf_i+0x88>
 800d8f6:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800d8fa:	6022      	str	r2, [r4, #0]
 800d8fc:	780b      	ldrb	r3, [r1, #0]
 800d8fe:	f805 3b01 	strb.w	r3, [r5], #1
 800d902:	e7de      	b.n	800d8c2 <_scanf_i+0x10e>
 800d904:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d908:	4631      	mov	r1, r6
 800d90a:	4650      	mov	r0, sl
 800d90c:	4798      	blx	r3
 800d90e:	2800      	cmp	r0, #0
 800d910:	d0df      	beq.n	800d8d2 <_scanf_i+0x11e>
 800d912:	6823      	ldr	r3, [r4, #0]
 800d914:	05d9      	lsls	r1, r3, #23
 800d916:	d50d      	bpl.n	800d934 <_scanf_i+0x180>
 800d918:	42bd      	cmp	r5, r7
 800d91a:	d909      	bls.n	800d930 <_scanf_i+0x17c>
 800d91c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800d920:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d924:	4632      	mov	r2, r6
 800d926:	4650      	mov	r0, sl
 800d928:	4798      	blx	r3
 800d92a:	f105 39ff 	add.w	r9, r5, #4294967295
 800d92e:	464d      	mov	r5, r9
 800d930:	42bd      	cmp	r5, r7
 800d932:	d028      	beq.n	800d986 <_scanf_i+0x1d2>
 800d934:	6822      	ldr	r2, [r4, #0]
 800d936:	f012 0210 	ands.w	r2, r2, #16
 800d93a:	d113      	bne.n	800d964 <_scanf_i+0x1b0>
 800d93c:	702a      	strb	r2, [r5, #0]
 800d93e:	6863      	ldr	r3, [r4, #4]
 800d940:	9e01      	ldr	r6, [sp, #4]
 800d942:	4639      	mov	r1, r7
 800d944:	4650      	mov	r0, sl
 800d946:	47b0      	blx	r6
 800d948:	f8d8 3000 	ldr.w	r3, [r8]
 800d94c:	6821      	ldr	r1, [r4, #0]
 800d94e:	1d1a      	adds	r2, r3, #4
 800d950:	f8c8 2000 	str.w	r2, [r8]
 800d954:	f011 0f20 	tst.w	r1, #32
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	d00f      	beq.n	800d97c <_scanf_i+0x1c8>
 800d95c:	6018      	str	r0, [r3, #0]
 800d95e:	68e3      	ldr	r3, [r4, #12]
 800d960:	3301      	adds	r3, #1
 800d962:	60e3      	str	r3, [r4, #12]
 800d964:	1bed      	subs	r5, r5, r7
 800d966:	44ab      	add	fp, r5
 800d968:	6925      	ldr	r5, [r4, #16]
 800d96a:	445d      	add	r5, fp
 800d96c:	6125      	str	r5, [r4, #16]
 800d96e:	2000      	movs	r0, #0
 800d970:	b007      	add	sp, #28
 800d972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d976:	f04f 0b00 	mov.w	fp, #0
 800d97a:	e7ca      	b.n	800d912 <_scanf_i+0x15e>
 800d97c:	07ca      	lsls	r2, r1, #31
 800d97e:	bf4c      	ite	mi
 800d980:	8018      	strhmi	r0, [r3, #0]
 800d982:	6018      	strpl	r0, [r3, #0]
 800d984:	e7eb      	b.n	800d95e <_scanf_i+0x1aa>
 800d986:	2001      	movs	r0, #1
 800d988:	e7f2      	b.n	800d970 <_scanf_i+0x1bc>
 800d98a:	bf00      	nop
 800d98c:	0800e2e4 	.word	0x0800e2e4
 800d990:	0800db5d 	.word	0x0800db5d
 800d994:	0800aa41 	.word	0x0800aa41
 800d998:	0800f8e6 	.word	0x0800f8e6

0800d99c <_read_r>:
 800d99c:	b538      	push	{r3, r4, r5, lr}
 800d99e:	4d07      	ldr	r5, [pc, #28]	; (800d9bc <_read_r+0x20>)
 800d9a0:	4604      	mov	r4, r0
 800d9a2:	4608      	mov	r0, r1
 800d9a4:	4611      	mov	r1, r2
 800d9a6:	2200      	movs	r2, #0
 800d9a8:	602a      	str	r2, [r5, #0]
 800d9aa:	461a      	mov	r2, r3
 800d9ac:	f7f5 ff3e 	bl	800382c <_read>
 800d9b0:	1c43      	adds	r3, r0, #1
 800d9b2:	d102      	bne.n	800d9ba <_read_r+0x1e>
 800d9b4:	682b      	ldr	r3, [r5, #0]
 800d9b6:	b103      	cbz	r3, 800d9ba <_read_r+0x1e>
 800d9b8:	6023      	str	r3, [r4, #0]
 800d9ba:	bd38      	pop	{r3, r4, r5, pc}
 800d9bc:	200039e8 	.word	0x200039e8

0800d9c0 <nan>:
 800d9c0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d9c8 <nan+0x8>
 800d9c4:	4770      	bx	lr
 800d9c6:	bf00      	nop
 800d9c8:	00000000 	.word	0x00000000
 800d9cc:	7ff80000 	.word	0x7ff80000

0800d9d0 <_sbrk_r>:
 800d9d0:	b538      	push	{r3, r4, r5, lr}
 800d9d2:	4d06      	ldr	r5, [pc, #24]	; (800d9ec <_sbrk_r+0x1c>)
 800d9d4:	2300      	movs	r3, #0
 800d9d6:	4604      	mov	r4, r0
 800d9d8:	4608      	mov	r0, r1
 800d9da:	602b      	str	r3, [r5, #0]
 800d9dc:	f7f6 fa10 	bl	8003e00 <_sbrk>
 800d9e0:	1c43      	adds	r3, r0, #1
 800d9e2:	d102      	bne.n	800d9ea <_sbrk_r+0x1a>
 800d9e4:	682b      	ldr	r3, [r5, #0]
 800d9e6:	b103      	cbz	r3, 800d9ea <_sbrk_r+0x1a>
 800d9e8:	6023      	str	r3, [r4, #0]
 800d9ea:	bd38      	pop	{r3, r4, r5, pc}
 800d9ec:	200039e8 	.word	0x200039e8

0800d9f0 <__sccl>:
 800d9f0:	b570      	push	{r4, r5, r6, lr}
 800d9f2:	780b      	ldrb	r3, [r1, #0]
 800d9f4:	4604      	mov	r4, r0
 800d9f6:	2b5e      	cmp	r3, #94	; 0x5e
 800d9f8:	bf0b      	itete	eq
 800d9fa:	784b      	ldrbeq	r3, [r1, #1]
 800d9fc:	1c48      	addne	r0, r1, #1
 800d9fe:	1c88      	addeq	r0, r1, #2
 800da00:	2200      	movne	r2, #0
 800da02:	bf08      	it	eq
 800da04:	2201      	moveq	r2, #1
 800da06:	1e61      	subs	r1, r4, #1
 800da08:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800da0c:	f801 2f01 	strb.w	r2, [r1, #1]!
 800da10:	42a9      	cmp	r1, r5
 800da12:	d1fb      	bne.n	800da0c <__sccl+0x1c>
 800da14:	b90b      	cbnz	r3, 800da1a <__sccl+0x2a>
 800da16:	3801      	subs	r0, #1
 800da18:	bd70      	pop	{r4, r5, r6, pc}
 800da1a:	f082 0101 	eor.w	r1, r2, #1
 800da1e:	54e1      	strb	r1, [r4, r3]
 800da20:	1c42      	adds	r2, r0, #1
 800da22:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800da26:	2d2d      	cmp	r5, #45	; 0x2d
 800da28:	f102 36ff 	add.w	r6, r2, #4294967295
 800da2c:	4610      	mov	r0, r2
 800da2e:	d006      	beq.n	800da3e <__sccl+0x4e>
 800da30:	2d5d      	cmp	r5, #93	; 0x5d
 800da32:	d0f1      	beq.n	800da18 <__sccl+0x28>
 800da34:	b90d      	cbnz	r5, 800da3a <__sccl+0x4a>
 800da36:	4630      	mov	r0, r6
 800da38:	e7ee      	b.n	800da18 <__sccl+0x28>
 800da3a:	462b      	mov	r3, r5
 800da3c:	e7ef      	b.n	800da1e <__sccl+0x2e>
 800da3e:	7816      	ldrb	r6, [r2, #0]
 800da40:	2e5d      	cmp	r6, #93	; 0x5d
 800da42:	d0fa      	beq.n	800da3a <__sccl+0x4a>
 800da44:	42b3      	cmp	r3, r6
 800da46:	dcf8      	bgt.n	800da3a <__sccl+0x4a>
 800da48:	4618      	mov	r0, r3
 800da4a:	3001      	adds	r0, #1
 800da4c:	4286      	cmp	r6, r0
 800da4e:	5421      	strb	r1, [r4, r0]
 800da50:	dcfb      	bgt.n	800da4a <__sccl+0x5a>
 800da52:	43d8      	mvns	r0, r3
 800da54:	4430      	add	r0, r6
 800da56:	1c5d      	adds	r5, r3, #1
 800da58:	42b3      	cmp	r3, r6
 800da5a:	bfa8      	it	ge
 800da5c:	2000      	movge	r0, #0
 800da5e:	182b      	adds	r3, r5, r0
 800da60:	3202      	adds	r2, #2
 800da62:	e7de      	b.n	800da22 <__sccl+0x32>

0800da64 <_strtoul_l.isra.0>:
 800da64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800da68:	4e3b      	ldr	r6, [pc, #236]	; (800db58 <_strtoul_l.isra.0+0xf4>)
 800da6a:	4686      	mov	lr, r0
 800da6c:	468c      	mov	ip, r1
 800da6e:	4660      	mov	r0, ip
 800da70:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800da74:	5da5      	ldrb	r5, [r4, r6]
 800da76:	f015 0508 	ands.w	r5, r5, #8
 800da7a:	d1f8      	bne.n	800da6e <_strtoul_l.isra.0+0xa>
 800da7c:	2c2d      	cmp	r4, #45	; 0x2d
 800da7e:	d134      	bne.n	800daea <_strtoul_l.isra.0+0x86>
 800da80:	f89c 4000 	ldrb.w	r4, [ip]
 800da84:	f04f 0801 	mov.w	r8, #1
 800da88:	f100 0c02 	add.w	ip, r0, #2
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d05e      	beq.n	800db4e <_strtoul_l.isra.0+0xea>
 800da90:	2b10      	cmp	r3, #16
 800da92:	d10c      	bne.n	800daae <_strtoul_l.isra.0+0x4a>
 800da94:	2c30      	cmp	r4, #48	; 0x30
 800da96:	d10a      	bne.n	800daae <_strtoul_l.isra.0+0x4a>
 800da98:	f89c 0000 	ldrb.w	r0, [ip]
 800da9c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800daa0:	2858      	cmp	r0, #88	; 0x58
 800daa2:	d14f      	bne.n	800db44 <_strtoul_l.isra.0+0xe0>
 800daa4:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800daa8:	2310      	movs	r3, #16
 800daaa:	f10c 0c02 	add.w	ip, ip, #2
 800daae:	f04f 37ff 	mov.w	r7, #4294967295
 800dab2:	2500      	movs	r5, #0
 800dab4:	fbb7 f7f3 	udiv	r7, r7, r3
 800dab8:	fb03 f907 	mul.w	r9, r3, r7
 800dabc:	ea6f 0909 	mvn.w	r9, r9
 800dac0:	4628      	mov	r0, r5
 800dac2:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800dac6:	2e09      	cmp	r6, #9
 800dac8:	d818      	bhi.n	800dafc <_strtoul_l.isra.0+0x98>
 800daca:	4634      	mov	r4, r6
 800dacc:	42a3      	cmp	r3, r4
 800dace:	dd24      	ble.n	800db1a <_strtoul_l.isra.0+0xb6>
 800dad0:	2d00      	cmp	r5, #0
 800dad2:	db1f      	blt.n	800db14 <_strtoul_l.isra.0+0xb0>
 800dad4:	4287      	cmp	r7, r0
 800dad6:	d31d      	bcc.n	800db14 <_strtoul_l.isra.0+0xb0>
 800dad8:	d101      	bne.n	800dade <_strtoul_l.isra.0+0x7a>
 800dada:	45a1      	cmp	r9, r4
 800dadc:	db1a      	blt.n	800db14 <_strtoul_l.isra.0+0xb0>
 800dade:	fb00 4003 	mla	r0, r0, r3, r4
 800dae2:	2501      	movs	r5, #1
 800dae4:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800dae8:	e7eb      	b.n	800dac2 <_strtoul_l.isra.0+0x5e>
 800daea:	2c2b      	cmp	r4, #43	; 0x2b
 800daec:	bf08      	it	eq
 800daee:	f89c 4000 	ldrbeq.w	r4, [ip]
 800daf2:	46a8      	mov	r8, r5
 800daf4:	bf08      	it	eq
 800daf6:	f100 0c02 	addeq.w	ip, r0, #2
 800dafa:	e7c7      	b.n	800da8c <_strtoul_l.isra.0+0x28>
 800dafc:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800db00:	2e19      	cmp	r6, #25
 800db02:	d801      	bhi.n	800db08 <_strtoul_l.isra.0+0xa4>
 800db04:	3c37      	subs	r4, #55	; 0x37
 800db06:	e7e1      	b.n	800dacc <_strtoul_l.isra.0+0x68>
 800db08:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800db0c:	2e19      	cmp	r6, #25
 800db0e:	d804      	bhi.n	800db1a <_strtoul_l.isra.0+0xb6>
 800db10:	3c57      	subs	r4, #87	; 0x57
 800db12:	e7db      	b.n	800dacc <_strtoul_l.isra.0+0x68>
 800db14:	f04f 35ff 	mov.w	r5, #4294967295
 800db18:	e7e4      	b.n	800dae4 <_strtoul_l.isra.0+0x80>
 800db1a:	2d00      	cmp	r5, #0
 800db1c:	da07      	bge.n	800db2e <_strtoul_l.isra.0+0xca>
 800db1e:	2322      	movs	r3, #34	; 0x22
 800db20:	f8ce 3000 	str.w	r3, [lr]
 800db24:	f04f 30ff 	mov.w	r0, #4294967295
 800db28:	b942      	cbnz	r2, 800db3c <_strtoul_l.isra.0+0xd8>
 800db2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800db2e:	f1b8 0f00 	cmp.w	r8, #0
 800db32:	d000      	beq.n	800db36 <_strtoul_l.isra.0+0xd2>
 800db34:	4240      	negs	r0, r0
 800db36:	2a00      	cmp	r2, #0
 800db38:	d0f7      	beq.n	800db2a <_strtoul_l.isra.0+0xc6>
 800db3a:	b10d      	cbz	r5, 800db40 <_strtoul_l.isra.0+0xdc>
 800db3c:	f10c 31ff 	add.w	r1, ip, #4294967295
 800db40:	6011      	str	r1, [r2, #0]
 800db42:	e7f2      	b.n	800db2a <_strtoul_l.isra.0+0xc6>
 800db44:	2430      	movs	r4, #48	; 0x30
 800db46:	2b00      	cmp	r3, #0
 800db48:	d1b1      	bne.n	800daae <_strtoul_l.isra.0+0x4a>
 800db4a:	2308      	movs	r3, #8
 800db4c:	e7af      	b.n	800daae <_strtoul_l.isra.0+0x4a>
 800db4e:	2c30      	cmp	r4, #48	; 0x30
 800db50:	d0a2      	beq.n	800da98 <_strtoul_l.isra.0+0x34>
 800db52:	230a      	movs	r3, #10
 800db54:	e7ab      	b.n	800daae <_strtoul_l.isra.0+0x4a>
 800db56:	bf00      	nop
 800db58:	0800f4e9 	.word	0x0800f4e9

0800db5c <_strtoul_r>:
 800db5c:	f7ff bf82 	b.w	800da64 <_strtoul_l.isra.0>

0800db60 <__submore>:
 800db60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db64:	460c      	mov	r4, r1
 800db66:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800db68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800db6c:	4299      	cmp	r1, r3
 800db6e:	d11d      	bne.n	800dbac <__submore+0x4c>
 800db70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800db74:	f7ff f8e4 	bl	800cd40 <_malloc_r>
 800db78:	b918      	cbnz	r0, 800db82 <__submore+0x22>
 800db7a:	f04f 30ff 	mov.w	r0, #4294967295
 800db7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800db86:	63a3      	str	r3, [r4, #56]	; 0x38
 800db88:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800db8c:	6360      	str	r0, [r4, #52]	; 0x34
 800db8e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800db92:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800db96:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800db9a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800db9e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800dba2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800dba6:	6020      	str	r0, [r4, #0]
 800dba8:	2000      	movs	r0, #0
 800dbaa:	e7e8      	b.n	800db7e <__submore+0x1e>
 800dbac:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800dbae:	0077      	lsls	r7, r6, #1
 800dbb0:	463a      	mov	r2, r7
 800dbb2:	f000 f955 	bl	800de60 <_realloc_r>
 800dbb6:	4605      	mov	r5, r0
 800dbb8:	2800      	cmp	r0, #0
 800dbba:	d0de      	beq.n	800db7a <__submore+0x1a>
 800dbbc:	eb00 0806 	add.w	r8, r0, r6
 800dbc0:	4601      	mov	r1, r0
 800dbc2:	4632      	mov	r2, r6
 800dbc4:	4640      	mov	r0, r8
 800dbc6:	f7fb f827 	bl	8008c18 <memcpy>
 800dbca:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800dbce:	f8c4 8000 	str.w	r8, [r4]
 800dbd2:	e7e9      	b.n	800dba8 <__submore+0x48>

0800dbd4 <__swbuf_r>:
 800dbd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbd6:	460e      	mov	r6, r1
 800dbd8:	4614      	mov	r4, r2
 800dbda:	4605      	mov	r5, r0
 800dbdc:	b118      	cbz	r0, 800dbe6 <__swbuf_r+0x12>
 800dbde:	6983      	ldr	r3, [r0, #24]
 800dbe0:	b90b      	cbnz	r3, 800dbe6 <__swbuf_r+0x12>
 800dbe2:	f7fd feef 	bl	800b9c4 <__sinit>
 800dbe6:	4b21      	ldr	r3, [pc, #132]	; (800dc6c <__swbuf_r+0x98>)
 800dbe8:	429c      	cmp	r4, r3
 800dbea:	d12b      	bne.n	800dc44 <__swbuf_r+0x70>
 800dbec:	686c      	ldr	r4, [r5, #4]
 800dbee:	69a3      	ldr	r3, [r4, #24]
 800dbf0:	60a3      	str	r3, [r4, #8]
 800dbf2:	89a3      	ldrh	r3, [r4, #12]
 800dbf4:	071a      	lsls	r2, r3, #28
 800dbf6:	d52f      	bpl.n	800dc58 <__swbuf_r+0x84>
 800dbf8:	6923      	ldr	r3, [r4, #16]
 800dbfa:	b36b      	cbz	r3, 800dc58 <__swbuf_r+0x84>
 800dbfc:	6923      	ldr	r3, [r4, #16]
 800dbfe:	6820      	ldr	r0, [r4, #0]
 800dc00:	1ac0      	subs	r0, r0, r3
 800dc02:	6963      	ldr	r3, [r4, #20]
 800dc04:	b2f6      	uxtb	r6, r6
 800dc06:	4283      	cmp	r3, r0
 800dc08:	4637      	mov	r7, r6
 800dc0a:	dc04      	bgt.n	800dc16 <__swbuf_r+0x42>
 800dc0c:	4621      	mov	r1, r4
 800dc0e:	4628      	mov	r0, r5
 800dc10:	f7fd fe44 	bl	800b89c <_fflush_r>
 800dc14:	bb30      	cbnz	r0, 800dc64 <__swbuf_r+0x90>
 800dc16:	68a3      	ldr	r3, [r4, #8]
 800dc18:	3b01      	subs	r3, #1
 800dc1a:	60a3      	str	r3, [r4, #8]
 800dc1c:	6823      	ldr	r3, [r4, #0]
 800dc1e:	1c5a      	adds	r2, r3, #1
 800dc20:	6022      	str	r2, [r4, #0]
 800dc22:	701e      	strb	r6, [r3, #0]
 800dc24:	6963      	ldr	r3, [r4, #20]
 800dc26:	3001      	adds	r0, #1
 800dc28:	4283      	cmp	r3, r0
 800dc2a:	d004      	beq.n	800dc36 <__swbuf_r+0x62>
 800dc2c:	89a3      	ldrh	r3, [r4, #12]
 800dc2e:	07db      	lsls	r3, r3, #31
 800dc30:	d506      	bpl.n	800dc40 <__swbuf_r+0x6c>
 800dc32:	2e0a      	cmp	r6, #10
 800dc34:	d104      	bne.n	800dc40 <__swbuf_r+0x6c>
 800dc36:	4621      	mov	r1, r4
 800dc38:	4628      	mov	r0, r5
 800dc3a:	f7fd fe2f 	bl	800b89c <_fflush_r>
 800dc3e:	b988      	cbnz	r0, 800dc64 <__swbuf_r+0x90>
 800dc40:	4638      	mov	r0, r7
 800dc42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc44:	4b0a      	ldr	r3, [pc, #40]	; (800dc70 <__swbuf_r+0x9c>)
 800dc46:	429c      	cmp	r4, r3
 800dc48:	d101      	bne.n	800dc4e <__swbuf_r+0x7a>
 800dc4a:	68ac      	ldr	r4, [r5, #8]
 800dc4c:	e7cf      	b.n	800dbee <__swbuf_r+0x1a>
 800dc4e:	4b09      	ldr	r3, [pc, #36]	; (800dc74 <__swbuf_r+0xa0>)
 800dc50:	429c      	cmp	r4, r3
 800dc52:	bf08      	it	eq
 800dc54:	68ec      	ldreq	r4, [r5, #12]
 800dc56:	e7ca      	b.n	800dbee <__swbuf_r+0x1a>
 800dc58:	4621      	mov	r1, r4
 800dc5a:	4628      	mov	r0, r5
 800dc5c:	f000 f81a 	bl	800dc94 <__swsetup_r>
 800dc60:	2800      	cmp	r0, #0
 800dc62:	d0cb      	beq.n	800dbfc <__swbuf_r+0x28>
 800dc64:	f04f 37ff 	mov.w	r7, #4294967295
 800dc68:	e7ea      	b.n	800dc40 <__swbuf_r+0x6c>
 800dc6a:	bf00      	nop
 800dc6c:	0800f6a0 	.word	0x0800f6a0
 800dc70:	0800f6c0 	.word	0x0800f6c0
 800dc74:	0800f680 	.word	0x0800f680

0800dc78 <__ascii_wctomb>:
 800dc78:	b149      	cbz	r1, 800dc8e <__ascii_wctomb+0x16>
 800dc7a:	2aff      	cmp	r2, #255	; 0xff
 800dc7c:	bf85      	ittet	hi
 800dc7e:	238a      	movhi	r3, #138	; 0x8a
 800dc80:	6003      	strhi	r3, [r0, #0]
 800dc82:	700a      	strbls	r2, [r1, #0]
 800dc84:	f04f 30ff 	movhi.w	r0, #4294967295
 800dc88:	bf98      	it	ls
 800dc8a:	2001      	movls	r0, #1
 800dc8c:	4770      	bx	lr
 800dc8e:	4608      	mov	r0, r1
 800dc90:	4770      	bx	lr
	...

0800dc94 <__swsetup_r>:
 800dc94:	4b32      	ldr	r3, [pc, #200]	; (800dd60 <__swsetup_r+0xcc>)
 800dc96:	b570      	push	{r4, r5, r6, lr}
 800dc98:	681d      	ldr	r5, [r3, #0]
 800dc9a:	4606      	mov	r6, r0
 800dc9c:	460c      	mov	r4, r1
 800dc9e:	b125      	cbz	r5, 800dcaa <__swsetup_r+0x16>
 800dca0:	69ab      	ldr	r3, [r5, #24]
 800dca2:	b913      	cbnz	r3, 800dcaa <__swsetup_r+0x16>
 800dca4:	4628      	mov	r0, r5
 800dca6:	f7fd fe8d 	bl	800b9c4 <__sinit>
 800dcaa:	4b2e      	ldr	r3, [pc, #184]	; (800dd64 <__swsetup_r+0xd0>)
 800dcac:	429c      	cmp	r4, r3
 800dcae:	d10f      	bne.n	800dcd0 <__swsetup_r+0x3c>
 800dcb0:	686c      	ldr	r4, [r5, #4]
 800dcb2:	89a3      	ldrh	r3, [r4, #12]
 800dcb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dcb8:	0719      	lsls	r1, r3, #28
 800dcba:	d42c      	bmi.n	800dd16 <__swsetup_r+0x82>
 800dcbc:	06dd      	lsls	r5, r3, #27
 800dcbe:	d411      	bmi.n	800dce4 <__swsetup_r+0x50>
 800dcc0:	2309      	movs	r3, #9
 800dcc2:	6033      	str	r3, [r6, #0]
 800dcc4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800dcc8:	81a3      	strh	r3, [r4, #12]
 800dcca:	f04f 30ff 	mov.w	r0, #4294967295
 800dcce:	e03e      	b.n	800dd4e <__swsetup_r+0xba>
 800dcd0:	4b25      	ldr	r3, [pc, #148]	; (800dd68 <__swsetup_r+0xd4>)
 800dcd2:	429c      	cmp	r4, r3
 800dcd4:	d101      	bne.n	800dcda <__swsetup_r+0x46>
 800dcd6:	68ac      	ldr	r4, [r5, #8]
 800dcd8:	e7eb      	b.n	800dcb2 <__swsetup_r+0x1e>
 800dcda:	4b24      	ldr	r3, [pc, #144]	; (800dd6c <__swsetup_r+0xd8>)
 800dcdc:	429c      	cmp	r4, r3
 800dcde:	bf08      	it	eq
 800dce0:	68ec      	ldreq	r4, [r5, #12]
 800dce2:	e7e6      	b.n	800dcb2 <__swsetup_r+0x1e>
 800dce4:	0758      	lsls	r0, r3, #29
 800dce6:	d512      	bpl.n	800dd0e <__swsetup_r+0x7a>
 800dce8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dcea:	b141      	cbz	r1, 800dcfe <__swsetup_r+0x6a>
 800dcec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dcf0:	4299      	cmp	r1, r3
 800dcf2:	d002      	beq.n	800dcfa <__swsetup_r+0x66>
 800dcf4:	4630      	mov	r0, r6
 800dcf6:	f7fe ffd3 	bl	800cca0 <_free_r>
 800dcfa:	2300      	movs	r3, #0
 800dcfc:	6363      	str	r3, [r4, #52]	; 0x34
 800dcfe:	89a3      	ldrh	r3, [r4, #12]
 800dd00:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dd04:	81a3      	strh	r3, [r4, #12]
 800dd06:	2300      	movs	r3, #0
 800dd08:	6063      	str	r3, [r4, #4]
 800dd0a:	6923      	ldr	r3, [r4, #16]
 800dd0c:	6023      	str	r3, [r4, #0]
 800dd0e:	89a3      	ldrh	r3, [r4, #12]
 800dd10:	f043 0308 	orr.w	r3, r3, #8
 800dd14:	81a3      	strh	r3, [r4, #12]
 800dd16:	6923      	ldr	r3, [r4, #16]
 800dd18:	b94b      	cbnz	r3, 800dd2e <__swsetup_r+0x9a>
 800dd1a:	89a3      	ldrh	r3, [r4, #12]
 800dd1c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dd20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dd24:	d003      	beq.n	800dd2e <__swsetup_r+0x9a>
 800dd26:	4621      	mov	r1, r4
 800dd28:	4630      	mov	r0, r6
 800dd2a:	f7fe fa95 	bl	800c258 <__smakebuf_r>
 800dd2e:	89a0      	ldrh	r0, [r4, #12]
 800dd30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dd34:	f010 0301 	ands.w	r3, r0, #1
 800dd38:	d00a      	beq.n	800dd50 <__swsetup_r+0xbc>
 800dd3a:	2300      	movs	r3, #0
 800dd3c:	60a3      	str	r3, [r4, #8]
 800dd3e:	6963      	ldr	r3, [r4, #20]
 800dd40:	425b      	negs	r3, r3
 800dd42:	61a3      	str	r3, [r4, #24]
 800dd44:	6923      	ldr	r3, [r4, #16]
 800dd46:	b943      	cbnz	r3, 800dd5a <__swsetup_r+0xc6>
 800dd48:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dd4c:	d1ba      	bne.n	800dcc4 <__swsetup_r+0x30>
 800dd4e:	bd70      	pop	{r4, r5, r6, pc}
 800dd50:	0781      	lsls	r1, r0, #30
 800dd52:	bf58      	it	pl
 800dd54:	6963      	ldrpl	r3, [r4, #20]
 800dd56:	60a3      	str	r3, [r4, #8]
 800dd58:	e7f4      	b.n	800dd44 <__swsetup_r+0xb0>
 800dd5a:	2000      	movs	r0, #0
 800dd5c:	e7f7      	b.n	800dd4e <__swsetup_r+0xba>
 800dd5e:	bf00      	nop
 800dd60:	20000014 	.word	0x20000014
 800dd64:	0800f6a0 	.word	0x0800f6a0
 800dd68:	0800f6c0 	.word	0x0800f6c0
 800dd6c:	0800f680 	.word	0x0800f680

0800dd70 <__assert_func>:
 800dd70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dd72:	4614      	mov	r4, r2
 800dd74:	461a      	mov	r2, r3
 800dd76:	4b09      	ldr	r3, [pc, #36]	; (800dd9c <__assert_func+0x2c>)
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	4605      	mov	r5, r0
 800dd7c:	68d8      	ldr	r0, [r3, #12]
 800dd7e:	b14c      	cbz	r4, 800dd94 <__assert_func+0x24>
 800dd80:	4b07      	ldr	r3, [pc, #28]	; (800dda0 <__assert_func+0x30>)
 800dd82:	9100      	str	r1, [sp, #0]
 800dd84:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dd88:	4906      	ldr	r1, [pc, #24]	; (800dda4 <__assert_func+0x34>)
 800dd8a:	462b      	mov	r3, r5
 800dd8c:	f000 f80e 	bl	800ddac <fiprintf>
 800dd90:	f000 f88c 	bl	800deac <abort>
 800dd94:	4b04      	ldr	r3, [pc, #16]	; (800dda8 <__assert_func+0x38>)
 800dd96:	461c      	mov	r4, r3
 800dd98:	e7f3      	b.n	800dd82 <__assert_func+0x12>
 800dd9a:	bf00      	nop
 800dd9c:	20000014 	.word	0x20000014
 800dda0:	0800f8e8 	.word	0x0800f8e8
 800dda4:	0800f8f5 	.word	0x0800f8f5
 800dda8:	0800f923 	.word	0x0800f923

0800ddac <fiprintf>:
 800ddac:	b40e      	push	{r1, r2, r3}
 800ddae:	b503      	push	{r0, r1, lr}
 800ddb0:	4601      	mov	r1, r0
 800ddb2:	ab03      	add	r3, sp, #12
 800ddb4:	4805      	ldr	r0, [pc, #20]	; (800ddcc <fiprintf+0x20>)
 800ddb6:	f853 2b04 	ldr.w	r2, [r3], #4
 800ddba:	6800      	ldr	r0, [r0, #0]
 800ddbc:	9301      	str	r3, [sp, #4]
 800ddbe:	f7ff fb71 	bl	800d4a4 <_vfiprintf_r>
 800ddc2:	b002      	add	sp, #8
 800ddc4:	f85d eb04 	ldr.w	lr, [sp], #4
 800ddc8:	b003      	add	sp, #12
 800ddca:	4770      	bx	lr
 800ddcc:	20000014 	.word	0x20000014

0800ddd0 <_fstat_r>:
 800ddd0:	b538      	push	{r3, r4, r5, lr}
 800ddd2:	4d07      	ldr	r5, [pc, #28]	; (800ddf0 <_fstat_r+0x20>)
 800ddd4:	2300      	movs	r3, #0
 800ddd6:	4604      	mov	r4, r0
 800ddd8:	4608      	mov	r0, r1
 800ddda:	4611      	mov	r1, r2
 800dddc:	602b      	str	r3, [r5, #0]
 800ddde:	f7f5 fd4d 	bl	800387c <_fstat>
 800dde2:	1c43      	adds	r3, r0, #1
 800dde4:	d102      	bne.n	800ddec <_fstat_r+0x1c>
 800dde6:	682b      	ldr	r3, [r5, #0]
 800dde8:	b103      	cbz	r3, 800ddec <_fstat_r+0x1c>
 800ddea:	6023      	str	r3, [r4, #0]
 800ddec:	bd38      	pop	{r3, r4, r5, pc}
 800ddee:	bf00      	nop
 800ddf0:	200039e8 	.word	0x200039e8

0800ddf4 <_isatty_r>:
 800ddf4:	b538      	push	{r3, r4, r5, lr}
 800ddf6:	4d06      	ldr	r5, [pc, #24]	; (800de10 <_isatty_r+0x1c>)
 800ddf8:	2300      	movs	r3, #0
 800ddfa:	4604      	mov	r4, r0
 800ddfc:	4608      	mov	r0, r1
 800ddfe:	602b      	str	r3, [r5, #0]
 800de00:	f7f5 fcaa 	bl	8003758 <_isatty>
 800de04:	1c43      	adds	r3, r0, #1
 800de06:	d102      	bne.n	800de0e <_isatty_r+0x1a>
 800de08:	682b      	ldr	r3, [r5, #0]
 800de0a:	b103      	cbz	r3, 800de0e <_isatty_r+0x1a>
 800de0c:	6023      	str	r3, [r4, #0]
 800de0e:	bd38      	pop	{r3, r4, r5, pc}
 800de10:	200039e8 	.word	0x200039e8

0800de14 <memmove>:
 800de14:	4288      	cmp	r0, r1
 800de16:	b510      	push	{r4, lr}
 800de18:	eb01 0402 	add.w	r4, r1, r2
 800de1c:	d902      	bls.n	800de24 <memmove+0x10>
 800de1e:	4284      	cmp	r4, r0
 800de20:	4623      	mov	r3, r4
 800de22:	d807      	bhi.n	800de34 <memmove+0x20>
 800de24:	1e43      	subs	r3, r0, #1
 800de26:	42a1      	cmp	r1, r4
 800de28:	d008      	beq.n	800de3c <memmove+0x28>
 800de2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800de2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800de32:	e7f8      	b.n	800de26 <memmove+0x12>
 800de34:	4402      	add	r2, r0
 800de36:	4601      	mov	r1, r0
 800de38:	428a      	cmp	r2, r1
 800de3a:	d100      	bne.n	800de3e <memmove+0x2a>
 800de3c:	bd10      	pop	{r4, pc}
 800de3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800de42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800de46:	e7f7      	b.n	800de38 <memmove+0x24>

0800de48 <__malloc_lock>:
 800de48:	4801      	ldr	r0, [pc, #4]	; (800de50 <__malloc_lock+0x8>)
 800de4a:	f7fe b9cc 	b.w	800c1e6 <__retarget_lock_acquire_recursive>
 800de4e:	bf00      	nop
 800de50:	200039e0 	.word	0x200039e0

0800de54 <__malloc_unlock>:
 800de54:	4801      	ldr	r0, [pc, #4]	; (800de5c <__malloc_unlock+0x8>)
 800de56:	f7fe b9c7 	b.w	800c1e8 <__retarget_lock_release_recursive>
 800de5a:	bf00      	nop
 800de5c:	200039e0 	.word	0x200039e0

0800de60 <_realloc_r>:
 800de60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de62:	4607      	mov	r7, r0
 800de64:	4614      	mov	r4, r2
 800de66:	460e      	mov	r6, r1
 800de68:	b921      	cbnz	r1, 800de74 <_realloc_r+0x14>
 800de6a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800de6e:	4611      	mov	r1, r2
 800de70:	f7fe bf66 	b.w	800cd40 <_malloc_r>
 800de74:	b922      	cbnz	r2, 800de80 <_realloc_r+0x20>
 800de76:	f7fe ff13 	bl	800cca0 <_free_r>
 800de7a:	4625      	mov	r5, r4
 800de7c:	4628      	mov	r0, r5
 800de7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de80:	f000 f81b 	bl	800deba <_malloc_usable_size_r>
 800de84:	42a0      	cmp	r0, r4
 800de86:	d20f      	bcs.n	800dea8 <_realloc_r+0x48>
 800de88:	4621      	mov	r1, r4
 800de8a:	4638      	mov	r0, r7
 800de8c:	f7fe ff58 	bl	800cd40 <_malloc_r>
 800de90:	4605      	mov	r5, r0
 800de92:	2800      	cmp	r0, #0
 800de94:	d0f2      	beq.n	800de7c <_realloc_r+0x1c>
 800de96:	4631      	mov	r1, r6
 800de98:	4622      	mov	r2, r4
 800de9a:	f7fa febd 	bl	8008c18 <memcpy>
 800de9e:	4631      	mov	r1, r6
 800dea0:	4638      	mov	r0, r7
 800dea2:	f7fe fefd 	bl	800cca0 <_free_r>
 800dea6:	e7e9      	b.n	800de7c <_realloc_r+0x1c>
 800dea8:	4635      	mov	r5, r6
 800deaa:	e7e7      	b.n	800de7c <_realloc_r+0x1c>

0800deac <abort>:
 800deac:	b508      	push	{r3, lr}
 800deae:	2006      	movs	r0, #6
 800deb0:	f000 f834 	bl	800df1c <raise>
 800deb4:	2001      	movs	r0, #1
 800deb6:	f000 f85d 	bl	800df74 <_exit>

0800deba <_malloc_usable_size_r>:
 800deba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800debe:	1f18      	subs	r0, r3, #4
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	bfbc      	itt	lt
 800dec4:	580b      	ldrlt	r3, [r1, r0]
 800dec6:	18c0      	addlt	r0, r0, r3
 800dec8:	4770      	bx	lr

0800deca <_raise_r>:
 800deca:	291f      	cmp	r1, #31
 800decc:	b538      	push	{r3, r4, r5, lr}
 800dece:	4604      	mov	r4, r0
 800ded0:	460d      	mov	r5, r1
 800ded2:	d904      	bls.n	800dede <_raise_r+0x14>
 800ded4:	2316      	movs	r3, #22
 800ded6:	6003      	str	r3, [r0, #0]
 800ded8:	f04f 30ff 	mov.w	r0, #4294967295
 800dedc:	bd38      	pop	{r3, r4, r5, pc}
 800dede:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800dee0:	b112      	cbz	r2, 800dee8 <_raise_r+0x1e>
 800dee2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dee6:	b94b      	cbnz	r3, 800defc <_raise_r+0x32>
 800dee8:	4620      	mov	r0, r4
 800deea:	f000 f831 	bl	800df50 <_getpid_r>
 800deee:	462a      	mov	r2, r5
 800def0:	4601      	mov	r1, r0
 800def2:	4620      	mov	r0, r4
 800def4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800def8:	f000 b818 	b.w	800df2c <_kill_r>
 800defc:	2b01      	cmp	r3, #1
 800defe:	d00a      	beq.n	800df16 <_raise_r+0x4c>
 800df00:	1c59      	adds	r1, r3, #1
 800df02:	d103      	bne.n	800df0c <_raise_r+0x42>
 800df04:	2316      	movs	r3, #22
 800df06:	6003      	str	r3, [r0, #0]
 800df08:	2001      	movs	r0, #1
 800df0a:	e7e7      	b.n	800dedc <_raise_r+0x12>
 800df0c:	2400      	movs	r4, #0
 800df0e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800df12:	4628      	mov	r0, r5
 800df14:	4798      	blx	r3
 800df16:	2000      	movs	r0, #0
 800df18:	e7e0      	b.n	800dedc <_raise_r+0x12>
	...

0800df1c <raise>:
 800df1c:	4b02      	ldr	r3, [pc, #8]	; (800df28 <raise+0xc>)
 800df1e:	4601      	mov	r1, r0
 800df20:	6818      	ldr	r0, [r3, #0]
 800df22:	f7ff bfd2 	b.w	800deca <_raise_r>
 800df26:	bf00      	nop
 800df28:	20000014 	.word	0x20000014

0800df2c <_kill_r>:
 800df2c:	b538      	push	{r3, r4, r5, lr}
 800df2e:	4d07      	ldr	r5, [pc, #28]	; (800df4c <_kill_r+0x20>)
 800df30:	2300      	movs	r3, #0
 800df32:	4604      	mov	r4, r0
 800df34:	4608      	mov	r0, r1
 800df36:	4611      	mov	r1, r2
 800df38:	602b      	str	r3, [r5, #0]
 800df3a:	f000 f813 	bl	800df64 <_kill>
 800df3e:	1c43      	adds	r3, r0, #1
 800df40:	d102      	bne.n	800df48 <_kill_r+0x1c>
 800df42:	682b      	ldr	r3, [r5, #0]
 800df44:	b103      	cbz	r3, 800df48 <_kill_r+0x1c>
 800df46:	6023      	str	r3, [r4, #0]
 800df48:	bd38      	pop	{r3, r4, r5, pc}
 800df4a:	bf00      	nop
 800df4c:	200039e8 	.word	0x200039e8

0800df50 <_getpid_r>:
 800df50:	f000 b800 	b.w	800df54 <_getpid>

0800df54 <_getpid>:
 800df54:	4b02      	ldr	r3, [pc, #8]	; (800df60 <_getpid+0xc>)
 800df56:	2258      	movs	r2, #88	; 0x58
 800df58:	601a      	str	r2, [r3, #0]
 800df5a:	f04f 30ff 	mov.w	r0, #4294967295
 800df5e:	4770      	bx	lr
 800df60:	200039e8 	.word	0x200039e8

0800df64 <_kill>:
 800df64:	4b02      	ldr	r3, [pc, #8]	; (800df70 <_kill+0xc>)
 800df66:	2258      	movs	r2, #88	; 0x58
 800df68:	601a      	str	r2, [r3, #0]
 800df6a:	f04f 30ff 	mov.w	r0, #4294967295
 800df6e:	4770      	bx	lr
 800df70:	200039e8 	.word	0x200039e8

0800df74 <_exit>:
 800df74:	e7fe      	b.n	800df74 <_exit>
	...

0800df78 <_init>:
 800df78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df7a:	bf00      	nop
 800df7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df7e:	bc08      	pop	{r3}
 800df80:	469e      	mov	lr, r3
 800df82:	4770      	bx	lr

0800df84 <_fini>:
 800df84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df86:	bf00      	nop
 800df88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df8a:	bc08      	pop	{r3}
 800df8c:	469e      	mov	lr, r3
 800df8e:	4770      	bx	lr
